
FlexFox80.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000052c  00804000  00009b8a  00009c3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009b8a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000415  0080452c  0080452c  0000a16a  2**0
                  ALLOC
  3 .eeprom       00000035  00810000  00810000  0000a16a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  0000a19f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000a1fc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000009a8  00000000  00000000  0000a240  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00012c80  00000000  00000000  0000abe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005baf  00000000  00000000  0001d868  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007d87  00000000  00000000  00023417  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001e58  00000000  00000000  0002b1a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00006004  00000000  00000000  0002cff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ad99  00000000  00000000  00032ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000918  00000000  00000000  0003dd95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 80 01 	jmp	0x300	; 0x300 <__dtors_end>
       4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
       8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
       c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      10:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      14:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      18:	0c 94 b0 28 	jmp	0x5160	; 0x5160 <__vector_6>
      1c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      20:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      24:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      28:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      2c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      30:	0c 94 5e 10 	jmp	0x20bc	; 0x20bc <__vector_12>
      34:	0c 94 41 43 	jmp	0x8682	; 0x8682 <__vector_13>
      38:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      3c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      40:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      44:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      48:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      4c:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_19>
      50:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <__vector_20>
      54:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      58:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      5c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      60:	0c 94 21 28 	jmp	0x5042	; 0x5042 <__vector_24>
      64:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      68:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      6c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      70:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      74:	0c 94 85 28 	jmp	0x510a	; 0x510a <__vector_29>
      78:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__vector_30>
      7c:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <__vector_31>
      80:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__vector_32>
      84:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      88:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      8c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      90:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      94:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      98:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      9c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a4:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__vector_41>
      a8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      ac:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      bc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      cc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      dc:	0c 94 96 0b 	jmp	0x172c	; 0x172c <__vector_55>
      e0:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__vector_56>
      e4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      e8:	ca 22       	and	r12, r26
      ea:	d6 22       	and	r13, r22
      ec:	e5 22       	and	r14, r21
      ee:	f4 22       	and	r15, r20
      f0:	03 23       	and	r16, r19
      f2:	e4 23       	and	r30, r20
      f4:	e4 23       	and	r30, r20
      f6:	30 23       	and	r19, r16
      f8:	39 23       	and	r19, r25
      fa:	45 23       	and	r20, r21
      fc:	51 23       	and	r21, r17
      fe:	5d 23       	and	r21, r29
     100:	8a 23       	and	r24, r26
     102:	93 23       	and	r25, r19
     104:	9f 23       	and	r25, r31
     106:	ab 23       	and	r26, r27
     108:	b7 23       	and	r27, r23
     10a:	11 30       	cpi	r17, 0x01	; 1
     10c:	17 30       	cpi	r17, 0x07	; 7
     10e:	f9 2f       	mov	r31, r25
     110:	17 30       	cpi	r17, 0x07	; 7
     112:	17 30       	cpi	r17, 0x07	; 7
     114:	17 30       	cpi	r17, 0x07	; 7
     116:	02 30       	cpi	r16, 0x02	; 2
     118:	17 30       	cpi	r17, 0x07	; 7
     11a:	17 30       	cpi	r17, 0x07	; 7
     11c:	17 30       	cpi	r17, 0x07	; 7
     11e:	c0 2f       	mov	r28, r16
     120:	17 30       	cpi	r17, 0x07	; 7
     122:	17 30       	cpi	r17, 0x07	; 7
     124:	17 30       	cpi	r17, 0x07	; 7
     126:	17 30       	cpi	r17, 0x07	; 7
     128:	17 30       	cpi	r17, 0x07	; 7
     12a:	17 30       	cpi	r17, 0x07	; 7
     12c:	17 30       	cpi	r17, 0x07	; 7
     12e:	17 30       	cpi	r17, 0x07	; 7
     130:	17 30       	cpi	r17, 0x07	; 7
     132:	17 30       	cpi	r17, 0x07	; 7
     134:	17 30       	cpi	r17, 0x07	; 7
     136:	17 30       	cpi	r17, 0x07	; 7
     138:	17 30       	cpi	r17, 0x07	; 7
     13a:	17 30       	cpi	r17, 0x07	; 7
     13c:	17 30       	cpi	r17, 0x07	; 7
     13e:	17 30       	cpi	r17, 0x07	; 7
     140:	17 30       	cpi	r17, 0x07	; 7
     142:	17 30       	cpi	r17, 0x07	; 7
     144:	17 30       	cpi	r17, 0x07	; 7
     146:	17 30       	cpi	r17, 0x07	; 7
     148:	d6 2f       	mov	r29, r22
     14a:	17 30       	cpi	r17, 0x07	; 7
     14c:	17 30       	cpi	r17, 0x07	; 7
     14e:	17 30       	cpi	r17, 0x07	; 7
     150:	17 30       	cpi	r17, 0x07	; 7
     152:	17 30       	cpi	r17, 0x07	; 7
     154:	17 30       	cpi	r17, 0x07	; 7
     156:	17 30       	cpi	r17, 0x07	; 7
     158:	17 30       	cpi	r17, 0x07	; 7
     15a:	ed 2f       	mov	r30, r29
     15c:	f3 2f       	mov	r31, r19
     15e:	0b 30       	cpi	r16, 0x0B	; 11
     160:	a7 2f       	mov	r26, r23
     162:	17 30       	cpi	r17, 0x07	; 7
     164:	17 30       	cpi	r17, 0x07	; 7
     166:	17 30       	cpi	r17, 0x07	; 7
     168:	b0 2f       	mov	r27, r16
     16a:	17 30       	cpi	r17, 0x07	; 7
     16c:	17 30       	cpi	r17, 0x07	; 7
     16e:	17 30       	cpi	r17, 0x07	; 7
     170:	b9 2f       	mov	r27, r25
     172:	44 38       	cpi	r20, 0x84	; 132
     174:	08 38       	cpi	r16, 0x88	; 136
     176:	34 38       	cpi	r19, 0x84	; 132
     178:	4c 38       	cpi	r20, 0x8C	; 140
     17a:	38 38       	cpi	r19, 0x88	; 136
     17c:	4c 38       	cpi	r20, 0x8C	; 140
     17e:	18 38       	cpi	r17, 0x88	; 136
     180:	04 38       	cpi	r16, 0x84	; 132
     182:	10 38       	cpi	r17, 0x80	; 128
     184:	14 38       	cpi	r17, 0x84	; 132
     186:	4c 38       	cpi	r20, 0x8C	; 140
     188:	28 38       	cpi	r18, 0x88	; 136
     18a:	fc 37       	cpi	r31, 0x7C	; 124
     18c:	2c 38       	cpi	r18, 0x8C	; 140
     18e:	f8 37       	cpi	r31, 0x78	; 120
     190:	0c 38       	cpi	r16, 0x8C	; 140
     192:	d0 37       	cpi	r29, 0x70	; 112
     194:	d4 37       	cpi	r29, 0x74	; 116
     196:	d8 37       	cpi	r29, 0x78	; 120
     198:	dc 37       	cpi	r29, 0x7C	; 124
     19a:	e0 37       	cpi	r30, 0x70	; 112
     19c:	e4 37       	cpi	r30, 0x74	; 116
     19e:	e8 37       	cpi	r30, 0x78	; 120
     1a0:	ec 37       	cpi	r30, 0x7C	; 124
     1a2:	f0 37       	cpi	r31, 0x70	; 112
     1a4:	f4 37       	cpi	r31, 0x74	; 116
     1a6:	1c 38       	cpi	r17, 0x8C	; 140
     1a8:	20 38       	cpi	r18, 0x80	; 128
     1aa:	48 38       	cpi	r20, 0x88	; 136
     1ac:	24 38       	cpi	r18, 0x84	; 132
     1ae:	4c 38       	cpi	r20, 0x8C	; 140
     1b0:	00 38       	cpi	r16, 0x80	; 128
     1b2:	3c 38       	cpi	r19, 0x8C	; 140
     1b4:	68 37       	cpi	r22, 0x78	; 120
     1b6:	6c 37       	cpi	r22, 0x7C	; 124
     1b8:	70 37       	cpi	r23, 0x70	; 112
     1ba:	74 37       	cpi	r23, 0x74	; 116
     1bc:	78 37       	cpi	r23, 0x78	; 120
     1be:	7c 37       	cpi	r23, 0x7C	; 124
     1c0:	80 37       	cpi	r24, 0x70	; 112
     1c2:	84 37       	cpi	r24, 0x74	; 116
     1c4:	88 37       	cpi	r24, 0x78	; 120
     1c6:	8c 37       	cpi	r24, 0x7C	; 124
     1c8:	90 37       	cpi	r25, 0x70	; 112
     1ca:	94 37       	cpi	r25, 0x74	; 116
     1cc:	98 37       	cpi	r25, 0x78	; 120
     1ce:	9c 37       	cpi	r25, 0x7C	; 124
     1d0:	a0 37       	cpi	r26, 0x70	; 112
     1d2:	a4 37       	cpi	r26, 0x74	; 116
     1d4:	a8 37       	cpi	r26, 0x78	; 120
     1d6:	ac 37       	cpi	r26, 0x7C	; 124
     1d8:	b0 37       	cpi	r27, 0x70	; 112
     1da:	b4 37       	cpi	r27, 0x74	; 116
     1dc:	b8 37       	cpi	r27, 0x78	; 120
     1de:	bc 37       	cpi	r27, 0x7C	; 124
     1e0:	c0 37       	cpi	r28, 0x70	; 112
     1e2:	c4 37       	cpi	r28, 0x74	; 116
     1e4:	c8 37       	cpi	r28, 0x78	; 120
     1e6:	cc 37       	cpi	r28, 0x7C	; 124
     1e8:	4c 38       	cpi	r20, 0x8C	; 140
     1ea:	4c 38       	cpi	r20, 0x8C	; 140
     1ec:	4c 38       	cpi	r20, 0x8C	; 140
     1ee:	4c 38       	cpi	r20, 0x8C	; 140
     1f0:	30 38       	cpi	r19, 0x80	; 128
     1f2:	4c 38       	cpi	r20, 0x8C	; 140
     1f4:	4c 38       	cpi	r20, 0x8C	; 140
     1f6:	4c 38       	cpi	r20, 0x8C	; 140
     1f8:	4c 38       	cpi	r20, 0x8C	; 140
     1fa:	4c 38       	cpi	r20, 0x8C	; 140
     1fc:	4c 38       	cpi	r20, 0x8C	; 140
     1fe:	4c 38       	cpi	r20, 0x8C	; 140
     200:	4c 38       	cpi	r20, 0x8C	; 140
     202:	4c 38       	cpi	r20, 0x8C	; 140
     204:	4c 38       	cpi	r20, 0x8C	; 140
     206:	4c 38       	cpi	r20, 0x8C	; 140
     208:	4c 38       	cpi	r20, 0x8C	; 140
     20a:	4c 38       	cpi	r20, 0x8C	; 140
     20c:	4c 38       	cpi	r20, 0x8C	; 140
     20e:	4c 38       	cpi	r20, 0x8C	; 140
     210:	4c 38       	cpi	r20, 0x8C	; 140
     212:	4c 38       	cpi	r20, 0x8C	; 140
     214:	4c 38       	cpi	r20, 0x8C	; 140
     216:	4c 38       	cpi	r20, 0x8C	; 140
     218:	4c 38       	cpi	r20, 0x8C	; 140
     21a:	4c 38       	cpi	r20, 0x8C	; 140
     21c:	4c 38       	cpi	r20, 0x8C	; 140
     21e:	4c 38       	cpi	r20, 0x8C	; 140
     220:	4c 38       	cpi	r20, 0x8C	; 140
     222:	4c 38       	cpi	r20, 0x8C	; 140
     224:	4c 38       	cpi	r20, 0x8C	; 140
     226:	4c 38       	cpi	r20, 0x8C	; 140
     228:	4c 38       	cpi	r20, 0x8C	; 140
     22a:	40 38       	cpi	r20, 0x80	; 128

0000022c <__trampolines_end>:
     22c:	4a 61       	ori	r20, 0x1A	; 26
     22e:	6e 75       	andi	r22, 0x5E	; 94
     230:	61 72       	andi	r22, 0x21	; 33
     232:	79 20       	and	r7, r9
     234:	46 65       	ori	r20, 0x56	; 86
     236:	62 72       	andi	r22, 0x22	; 34
     238:	75 61       	ori	r23, 0x15	; 21
     23a:	72 79       	andi	r23, 0x92	; 146
     23c:	20 4d       	sbci	r18, 0xD0	; 208
     23e:	61 72       	andi	r22, 0x21	; 33
     240:	63 68       	ori	r22, 0x83	; 131
     242:	20 41       	sbci	r18, 0x10	; 16
     244:	70 72       	andi	r23, 0x20	; 32
     246:	69 6c       	ori	r22, 0xC9	; 201
     248:	20 4d       	sbci	r18, 0xD0	; 208
     24a:	61 79       	andi	r22, 0x91	; 145
     24c:	20 4a       	sbci	r18, 0xA0	; 160
     24e:	75 6e       	ori	r23, 0xE5	; 229
     250:	65 20       	and	r6, r5
     252:	4a 75       	andi	r20, 0x5A	; 90
     254:	6c 79       	andi	r22, 0x9C	; 156
     256:	20 41       	sbci	r18, 0x10	; 16
     258:	75 67       	ori	r23, 0x75	; 117
     25a:	75 73       	andi	r23, 0x35	; 53
     25c:	74 20       	and	r7, r4
     25e:	53 65       	ori	r21, 0x53	; 83
     260:	70 74       	andi	r23, 0x40	; 64
     262:	65 6d       	ori	r22, 0xD5	; 213
     264:	62 65       	ori	r22, 0x52	; 82
     266:	72 20       	and	r7, r2
     268:	4f 63       	ori	r20, 0x3F	; 63
     26a:	74 6f       	ori	r23, 0xF4	; 244
     26c:	62 65       	ori	r22, 0x52	; 82
     26e:	72 20       	and	r7, r2
     270:	4e 6f       	ori	r20, 0xFE	; 254
     272:	76 65       	ori	r23, 0x56	; 86
     274:	6d 62       	ori	r22, 0x2D	; 45
     276:	65 72       	andi	r22, 0x25	; 37
     278:	20 44       	sbci	r18, 0x40	; 64
     27a:	65 63       	ori	r22, 0x35	; 53
     27c:	65 6d       	ori	r22, 0xD5	; 213
     27e:	62 65       	ori	r22, 0x52	; 82
     280:	72 20       	and	r7, r2
	...

00000283 <strfwkdays>:
     283:	53 75 6e 64 61 79 20 4d 6f 6e 64 61 79 20 54 75     Sunday Monday Tu
     293:	65 73 64 61 79 20 57 65 64 6e 65 73 64 61 79 20     esday Wednesday 
     2a3:	54 68 75 72 73 64 61 79 20 46 72 69 64 61 79 20     Thursday Friday 
     2b3:	53 61 74 75 72 64 61 79 20 00                       Saturday .

000002bd <ascdays>:
     2bd:	53 75 6e 4d 6f 6e 54 75 65 57 65 64 54 68 75 46     SunMonTueWedThuF
     2cd:	72 69 53 61 74 00                                   riSat.

000002d3 <ascmonths>:
     2d3:	4a 61 6e 46 65 62 4d 61 72 41 70 72 4d 61 79 4a     JanFebMarAprMayJ
     2e3:	75 6e 4a 75 6c 41 75 67 53 65 70 4f 63 74 4e 6f     unJulAugSepOctNo
     2f3:	76 44 65 63 00                                      vDec.

000002f8 <__ctors_start>:
     2f8:	5f 27       	eor	r21, r31
     2fa:	51 28       	or	r5, r1

000002fc <__ctors_end>:
     2fc:	66 27       	eor	r22, r22
     2fe:	58 28       	or	r5, r8

00000300 <__dtors_end>:
     300:	11 24       	eor	r1, r1
     302:	1f be       	out	0x3f, r1	; 63
     304:	cf ef       	ldi	r28, 0xFF	; 255
     306:	cd bf       	out	0x3d, r28	; 61
     308:	df e7       	ldi	r29, 0x7F	; 127
     30a:	de bf       	out	0x3e, r29	; 62

0000030c <__do_copy_data>:
     30c:	15 e4       	ldi	r17, 0x45	; 69
     30e:	a0 e0       	ldi	r26, 0x00	; 0
     310:	b0 e4       	ldi	r27, 0x40	; 64
     312:	ea e8       	ldi	r30, 0x8A	; 138
     314:	fb e9       	ldi	r31, 0x9B	; 155
     316:	00 e0       	ldi	r16, 0x00	; 0
     318:	0b bf       	out	0x3b, r16	; 59
     31a:	02 c0       	rjmp	.+4      	; 0x320 <__do_copy_data+0x14>
     31c:	07 90       	elpm	r0, Z+
     31e:	0d 92       	st	X+, r0
     320:	ac 32       	cpi	r26, 0x2C	; 44
     322:	b1 07       	cpc	r27, r17
     324:	d9 f7       	brne	.-10     	; 0x31c <__do_copy_data+0x10>

00000326 <__do_clear_bss>:
     326:	29 e4       	ldi	r18, 0x49	; 73
     328:	ac e2       	ldi	r26, 0x2C	; 44
     32a:	b5 e4       	ldi	r27, 0x45	; 69
     32c:	01 c0       	rjmp	.+2      	; 0x330 <.do_clear_bss_start>

0000032e <.do_clear_bss_loop>:
     32e:	1d 92       	st	X+, r1

00000330 <.do_clear_bss_start>:
     330:	a1 34       	cpi	r26, 0x41	; 65
     332:	b2 07       	cpc	r27, r18
     334:	e1 f7       	brne	.-8      	; 0x32e <.do_clear_bss_loop>

00000336 <__do_global_ctors>:
     336:	11 e0       	ldi	r17, 0x01	; 1
     338:	ce e7       	ldi	r28, 0x7E	; 126
     33a:	d1 e0       	ldi	r29, 0x01	; 1
     33c:	04 c0       	rjmp	.+8      	; 0x346 <__do_global_ctors+0x10>
     33e:	21 97       	sbiw	r28, 0x01	; 1
     340:	fe 01       	movw	r30, r28
     342:	0e 94 bf 48 	call	0x917e	; 0x917e <__tablejump2__>
     346:	cc 37       	cpi	r28, 0x7C	; 124
     348:	d1 07       	cpc	r29, r17
     34a:	c9 f7       	brne	.-14     	; 0x33e <__do_global_ctors+0x8>
     34c:	0e 94 5e 11 	call	0x22bc	; 0x22bc <main>
     350:	0c 94 b8 4d 	jmp	0x9b70	; 0x9b70 <__do_global_dtors>

00000354 <__bad_interrupt>:
     354:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000358 <is_leap_year>:
     358:	9c 01       	movw	r18, r24
     35a:	23 70       	andi	r18, 0x03	; 3
     35c:	33 27       	eor	r19, r19
     35e:	23 2b       	or	r18, r19
     360:	59 f4       	brne	.+22     	; 0x378 <is_leap_year+0x20>
     362:	64 e6       	ldi	r22, 0x64	; 100
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     36a:	89 2b       	or	r24, r25
     36c:	39 f4       	brne	.+14     	; 0x37c <is_leap_year+0x24>
     36e:	63 70       	andi	r22, 0x03	; 3
     370:	77 27       	eor	r23, r23
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	67 2b       	or	r22, r23
     376:	19 f0       	breq	.+6      	; 0x37e <is_leap_year+0x26>
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	08 95       	ret
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	08 95       	ret

00000380 <localtime>:
     380:	6f e2       	ldi	r22, 0x2F	; 47
     382:	79 e4       	ldi	r23, 0x49	; 73
     384:	0e 94 c7 01 	call	0x38e	; 0x38e <localtime_r>
     388:	8f e2       	ldi	r24, 0x2F	; 47
     38a:	99 e4       	ldi	r25, 0x49	; 73
     38c:	08 95       	ret

0000038e <localtime_r>:
     38e:	cf 92       	push	r12
     390:	df 92       	push	r13
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <localtime_r+0x12>
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <localtime_r+0x14>
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	6c 01       	movw	r12, r24
     3a8:	7b 01       	movw	r14, r22
     3aa:	e0 91 3f 49 	lds	r30, 0x493F	; 0x80493f <__dst_ptr>
     3ae:	f0 91 40 49 	lds	r31, 0x4940	; 0x804940 <__dst_ptr+0x1>
     3b2:	30 97       	sbiw	r30, 0x00	; 0
     3b4:	29 f0       	breq	.+10     	; 0x3c0 <localtime_r+0x32>
     3b6:	6b e3       	ldi	r22, 0x3B	; 59
     3b8:	79 e4       	ldi	r23, 0x49	; 73
     3ba:	09 95       	icall
     3bc:	8c 01       	movw	r16, r24
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <localtime_r+0x36>
     3c0:	0f ef       	ldi	r16, 0xFF	; 255
     3c2:	1f ef       	ldi	r17, 0xFF	; 255
     3c4:	f6 01       	movw	r30, r12
     3c6:	40 81       	ld	r20, Z
     3c8:	51 81       	ldd	r21, Z+1	; 0x01
     3ca:	62 81       	ldd	r22, Z+2	; 0x02
     3cc:	73 81       	ldd	r23, Z+3	; 0x03
     3ce:	80 91 3b 49 	lds	r24, 0x493B	; 0x80493b <__utc_offset>
     3d2:	90 91 3c 49 	lds	r25, 0x493C	; 0x80493c <__utc_offset+0x1>
     3d6:	a0 91 3d 49 	lds	r26, 0x493D	; 0x80493d <__utc_offset+0x2>
     3da:	b0 91 3e 49 	lds	r27, 0x493E	; 0x80493e <__utc_offset+0x3>
     3de:	84 0f       	add	r24, r20
     3e0:	95 1f       	adc	r25, r21
     3e2:	a6 1f       	adc	r26, r22
     3e4:	b7 1f       	adc	r27, r23
     3e6:	10 16       	cp	r1, r16
     3e8:	11 06       	cpc	r1, r17
     3ea:	4c f4       	brge	.+18     	; 0x3fe <localtime_r+0x70>
     3ec:	a8 01       	movw	r20, r16
     3ee:	01 2e       	mov	r0, r17
     3f0:	00 0c       	add	r0, r0
     3f2:	66 0b       	sbc	r22, r22
     3f4:	77 0b       	sbc	r23, r23
     3f6:	84 0f       	add	r24, r20
     3f8:	95 1f       	adc	r25, r21
     3fa:	a6 1f       	adc	r26, r22
     3fc:	b7 1f       	adc	r27, r23
     3fe:	89 83       	std	Y+1, r24	; 0x01
     400:	9a 83       	std	Y+2, r25	; 0x02
     402:	ab 83       	std	Y+3, r26	; 0x03
     404:	bc 83       	std	Y+4, r27	; 0x04
     406:	b7 01       	movw	r22, r14
     408:	ce 01       	movw	r24, r28
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <gmtime_r>
     410:	f7 01       	movw	r30, r14
     412:	02 87       	std	Z+10, r16	; 0x0a
     414:	13 87       	std	Z+11, r17	; 0x0b
     416:	24 96       	adiw	r28, 0x04	; 4
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	ff 90       	pop	r15
     426:	ef 90       	pop	r14
     428:	df 90       	pop	r13
     42a:	cf 90       	pop	r12
     42c:	08 95       	ret

0000042e <month_length>:
     42e:	62 30       	cpi	r22, 0x02	; 2
     430:	21 f4       	brne	.+8      	; 0x43a <month_length+0xc>
     432:	0e 94 ac 01 	call	0x358	; 0x358 <is_leap_year>
     436:	84 5e       	subi	r24, 0xE4	; 228
     438:	08 95       	ret
     43a:	68 30       	cpi	r22, 0x08	; 8
     43c:	08 f0       	brcs	.+2      	; 0x440 <month_length+0x12>
     43e:	6f 5f       	subi	r22, 0xFF	; 255
     440:	61 70       	andi	r22, 0x01	; 1
     442:	8e e1       	ldi	r24, 0x1E	; 30
     444:	86 0f       	add	r24, r22
     446:	08 95       	ret

00000448 <set_system_time>:
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	60 93 2b 49 	sts	0x492B, r22	; 0x80492b <__system_time>
     450:	70 93 2c 49 	sts	0x492C, r23	; 0x80492c <__system_time+0x1>
     454:	80 93 2d 49 	sts	0x492D, r24	; 0x80492d <__system_time+0x2>
     458:	90 93 2e 49 	sts	0x492E, r25	; 0x80492e <__system_time+0x3>
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	08 95       	ret

00000460 <pgm_copystring>:
     460:	cf 92       	push	r12
     462:	df 92       	push	r13
     464:	ef 92       	push	r14
     466:	0f 93       	push	r16
     468:	6b 01       	movw	r12, r22
     46a:	e8 2e       	mov	r14, r24
     46c:	7c 2d       	mov	r23, r12
     46e:	6d 2d       	mov	r22, r13
     470:	5e 2d       	mov	r21, r14
     472:	ae 2d       	mov	r26, r14
     474:	c6 01       	movw	r24, r12
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	a1 1d       	adc	r26, r1
     47a:	44 23       	and	r20, r20
     47c:	51 f0       	breq	.+20     	; 0x492 <pgm_copystring+0x32>
     47e:	6c 01       	movw	r12, r24
     480:	ea 2e       	mov	r14, r26
     482:	e7 2f       	mov	r30, r23
     484:	f6 2f       	mov	r31, r22
     486:	0e 94 a5 4d 	call	0x9b4a	; 0x9b4a <__xload_1>
     48a:	60 32       	cpi	r22, 0x20	; 32
     48c:	79 f7       	brne	.-34     	; 0x46c <pgm_copystring+0xc>
     48e:	41 50       	subi	r20, 0x01	; 1
     490:	ed cf       	rjmp	.-38     	; 0x46c <pgm_copystring+0xc>
     492:	f6 01       	movw	r30, r12
     494:	0e 94 a5 4d 	call	0x9b4a	; 0x9b4a <__xload_1>
     498:	6c 01       	movw	r12, r24
     49a:	ea 2e       	mov	r14, r26
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	60 32       	cpi	r22, 0x20	; 32
     4a0:	39 f4       	brne	.+14     	; 0x4b0 <pgm_copystring+0x50>
     4a2:	f9 01       	movw	r30, r18
     4a4:	10 82       	st	Z, r1
     4a6:	0f 91       	pop	r16
     4a8:	ef 90       	pop	r14
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
     4ae:	08 95       	ret
     4b0:	80 17       	cp	r24, r16
     4b2:	b9 f3       	breq	.-18     	; 0x4a2 <pgm_copystring+0x42>
     4b4:	2f 5f       	subi	r18, 0xFF	; 255
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	f9 01       	movw	r30, r18
     4ba:	31 97       	sbiw	r30, 0x01	; 1
     4bc:	60 83       	st	Z, r22
     4be:	8f 5f       	subi	r24, 0xFF	; 255
     4c0:	f6 01       	movw	r30, r12
     4c2:	5e 2d       	mov	r21, r14
     4c4:	0e 94 a5 4d 	call	0x9b4a	; 0x9b4a <__xload_1>
     4c8:	9f ef       	ldi	r25, 0xFF	; 255
     4ca:	c9 1a       	sub	r12, r25
     4cc:	d9 0a       	sbc	r13, r25
     4ce:	e9 0a       	sbc	r14, r25
     4d0:	e6 cf       	rjmp	.-52     	; 0x49e <pgm_copystring+0x3e>

000004d2 <strftime>:
     4d2:	2f 92       	push	r2
     4d4:	3f 92       	push	r3
     4d6:	4f 92       	push	r4
     4d8:	5f 92       	push	r5
     4da:	6f 92       	push	r6
     4dc:	7f 92       	push	r7
     4de:	8f 92       	push	r8
     4e0:	9f 92       	push	r9
     4e2:	af 92       	push	r10
     4e4:	bf 92       	push	r11
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	a2 97       	sbiw	r28, 0x22	; 34
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	2c 01       	movw	r4, r24
     502:	69 a3       	std	Y+33, r22	; 0x21
     504:	7a a3       	std	Y+34, r23	; 0x22
     506:	4a 01       	movw	r8, r20
     508:	79 01       	movw	r14, r18
     50a:	61 2c       	mov	r6, r1
     50c:	71 2c       	mov	r7, r1
     50e:	9e 01       	movw	r18, r28
     510:	2f 5f       	subi	r18, 0xFF	; 255
     512:	3f 4f       	sbci	r19, 0xFF	; 255
     514:	69 01       	movw	r12, r18
     516:	84 e6       	ldi	r24, 0x64	; 100
     518:	28 2e       	mov	r2, r24
     51a:	31 2c       	mov	r3, r1
     51c:	9e ec       	ldi	r25, 0xCE	; 206
     51e:	a9 2e       	mov	r10, r25
     520:	94 e4       	ldi	r25, 0x44	; 68
     522:	b9 2e       	mov	r11, r25
     524:	29 a1       	ldd	r18, Y+33	; 0x21
     526:	3a a1       	ldd	r19, Y+34	; 0x22
     528:	62 16       	cp	r6, r18
     52a:	73 06       	cpc	r7, r19
     52c:	08 f0       	brcs	.+2      	; 0x530 <strftime+0x5e>
     52e:	cd c2       	rjmp	.+1434   	; 0xaca <strftime+0x5f8>
     530:	d4 01       	movw	r26, r8
     532:	8c 91       	ld	r24, X
     534:	85 32       	cpi	r24, 0x25	; 37
     536:	09 f0       	breq	.+2      	; 0x53a <strftime+0x68>
     538:	bc c2       	rjmp	.+1400   	; 0xab2 <strftime+0x5e0>
     53a:	11 96       	adiw	r26, 0x01	; 1
     53c:	1c 91       	ld	r17, X
     53e:	15 34       	cpi	r17, 0x45	; 69
     540:	31 f0       	breq	.+12     	; 0x54e <strftime+0x7c>
     542:	1f 34       	cpi	r17, 0x4F	; 79
     544:	21 f0       	breq	.+8      	; 0x54e <strftime+0x7c>
     546:	b2 e0       	ldi	r27, 0x02	; 2
     548:	8b 0e       	add	r8, r27
     54a:	91 1c       	adc	r9, r1
     54c:	06 c0       	rjmp	.+12     	; 0x55a <strftime+0x88>
     54e:	f4 01       	movw	r30, r8
     550:	12 81       	ldd	r17, Z+2	; 0x02
     552:	94 01       	movw	r18, r8
     554:	2d 5f       	subi	r18, 0xFD	; 253
     556:	3f 4f       	sbci	r19, 0xFF	; 255
     558:	49 01       	movw	r8, r18
     55a:	19 35       	cpi	r17, 0x59	; 89
     55c:	09 f4       	brne	.+2      	; 0x560 <strftime+0x8e>
     55e:	32 c2       	rjmp	.+1124   	; 0x9c4 <strftime+0x4f2>
     560:	0c f0       	brlt	.+2      	; 0x564 <strftime+0x92>
     562:	60 c0       	rjmp	.+192    	; 0x624 <strftime+0x152>
     564:	19 34       	cpi	r17, 0x49	; 73
     566:	09 f4       	brne	.+2      	; 0x56a <strftime+0x98>
     568:	3f c1       	rjmp	.+638    	; 0x7e8 <strftime+0x316>
     56a:	44 f5       	brge	.+80     	; 0x5bc <strftime+0xea>
     56c:	13 34       	cpi	r17, 0x43	; 67
     56e:	09 f4       	brne	.+2      	; 0x572 <strftime+0xa0>
     570:	e7 c0       	rjmp	.+462    	; 0x740 <strftime+0x26e>
     572:	54 f4       	brge	.+20     	; 0x588 <strftime+0xb6>
     574:	11 34       	cpi	r17, 0x41	; 65
     576:	09 f4       	brne	.+2      	; 0x57a <strftime+0xa8>
     578:	be c0       	rjmp	.+380    	; 0x6f6 <strftime+0x224>
     57a:	0c f0       	brlt	.+2      	; 0x57e <strftime+0xac>
     57c:	ca c0       	rjmp	.+404    	; 0x712 <strftime+0x240>
     57e:	15 32       	cpi	r17, 0x25	; 37
     580:	09 f0       	breq	.+2      	; 0x584 <strftime+0xb2>
     582:	74 c2       	rjmp	.+1256   	; 0xa6c <strftime+0x59a>
     584:	19 83       	std	Y+1, r17	; 0x01
     586:	75 c2       	rjmp	.+1258   	; 0xa72 <strftime+0x5a0>
     588:	16 34       	cpi	r17, 0x46	; 70
     58a:	09 f4       	brne	.+2      	; 0x58e <strftime+0xbc>
     58c:	ea c0       	rjmp	.+468    	; 0x762 <strftime+0x290>
     58e:	64 f4       	brge	.+24     	; 0x5a8 <strftime+0xd6>
     590:	14 34       	cpi	r17, 0x44	; 68
     592:	09 f0       	breq	.+2      	; 0x596 <strftime+0xc4>
     594:	6b c2       	rjmp	.+1238   	; 0xa6c <strftime+0x59a>
     596:	f7 01       	movw	r30, r14
     598:	86 81       	ldd	r24, Z+6	; 0x06
     59a:	97 81       	ldd	r25, Z+7	; 0x07
     59c:	b1 01       	movw	r22, r2
     59e:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     5a2:	9f 93       	push	r25
     5a4:	8f 93       	push	r24
     5a6:	e7 c1       	rjmp	.+974    	; 0x976 <strftime+0x4a4>
     5a8:	17 34       	cpi	r17, 0x47	; 71
     5aa:	09 f4       	brne	.+2      	; 0x5ae <strftime+0xdc>
     5ac:	f8 c0       	rjmp	.+496    	; 0x79e <strftime+0x2cc>
     5ae:	18 34       	cpi	r17, 0x48	; 72
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <strftime+0xe2>
     5b2:	5c c2       	rjmp	.+1208   	; 0xa6c <strftime+0x59a>
     5b4:	d7 01       	movw	r26, r14
     5b6:	12 96       	adiw	r26, 0x02	; 2
     5b8:	8c 91       	ld	r24, X
     5ba:	30 c1       	rjmp	.+608    	; 0x81c <strftime+0x34a>
     5bc:	14 35       	cpi	r17, 0x54	; 84
     5be:	09 f4       	brne	.+2      	; 0x5c2 <strftime+0xf0>
     5c0:	89 c1       	rjmp	.+786    	; 0x8d4 <strftime+0x402>
     5c2:	64 f4       	brge	.+24     	; 0x5dc <strftime+0x10a>
     5c4:	12 35       	cpi	r17, 0x52	; 82
     5c6:	09 f4       	brne	.+2      	; 0x5ca <strftime+0xf8>
     5c8:	6e c1       	rjmp	.+732    	; 0x8a6 <strftime+0x3d4>
     5ca:	0c f0       	brlt	.+2      	; 0x5ce <strftime+0xfc>
     5cc:	25 c1       	rjmp	.+586    	; 0x818 <strftime+0x346>
     5ce:	1d 34       	cpi	r17, 0x4D	; 77
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <strftime+0x102>
     5d2:	4c c2       	rjmp	.+1176   	; 0xa6c <strftime+0x59a>
     5d4:	d7 01       	movw	r26, r14
     5d6:	11 96       	adiw	r26, 0x01	; 1
     5d8:	8c 91       	ld	r24, X
     5da:	20 c1       	rjmp	.+576    	; 0x81c <strftime+0x34a>
     5dc:	16 35       	cpi	r17, 0x56	; 86
     5de:	09 f4       	brne	.+2      	; 0x5e2 <strftime+0x110>
     5e0:	a5 c1       	rjmp	.+842    	; 0x92c <strftime+0x45a>
     5e2:	0c f4       	brge	.+2      	; 0x5e6 <strftime+0x114>
     5e4:	a1 c1       	rjmp	.+834    	; 0x928 <strftime+0x456>
     5e6:	17 35       	cpi	r17, 0x57	; 87
     5e8:	09 f4       	brne	.+2      	; 0x5ec <strftime+0x11a>
     5ea:	b4 c1       	rjmp	.+872    	; 0x954 <strftime+0x482>
     5ec:	18 35       	cpi	r17, 0x58	; 88
     5ee:	09 f0       	breq	.+2      	; 0x5f2 <strftime+0x120>
     5f0:	3d c2       	rjmp	.+1146   	; 0xa6c <strftime+0x59a>
     5f2:	f7 01       	movw	r30, r14
     5f4:	80 81       	ld	r24, Z
     5f6:	28 2f       	mov	r18, r24
     5f8:	08 2e       	mov	r0, r24
     5fa:	00 0c       	add	r0, r0
     5fc:	33 0b       	sbc	r19, r19
     5fe:	3f 93       	push	r19
     600:	8f 93       	push	r24
     602:	81 81       	ldd	r24, Z+1	; 0x01
     604:	28 2f       	mov	r18, r24
     606:	08 2e       	mov	r0, r24
     608:	00 0c       	add	r0, r0
     60a:	33 0b       	sbc	r19, r19
     60c:	3f 93       	push	r19
     60e:	8f 93       	push	r24
     610:	82 81       	ldd	r24, Z+2	; 0x02
     612:	28 2f       	mov	r18, r24
     614:	08 2e       	mov	r0, r24
     616:	00 0c       	add	r0, r0
     618:	33 0b       	sbc	r19, r19
     61a:	3f 93       	push	r19
     61c:	8f 93       	push	r24
     61e:	83 e1       	ldi	r24, 0x13	; 19
     620:	95 e4       	ldi	r25, 0x45	; 69
     622:	c0 c1       	rjmp	.+896    	; 0x9a4 <strftime+0x4d2>
     624:	1d 36       	cpi	r17, 0x6D	; 109
     626:	09 f4       	brne	.+2      	; 0x62a <strftime+0x158>
     628:	f0 c0       	rjmp	.+480    	; 0x80a <strftime+0x338>
     62a:	ac f5       	brge	.+106    	; 0x696 <strftime+0x1c4>
     62c:	14 36       	cpi	r17, 0x64	; 100
     62e:	09 f4       	brne	.+2      	; 0x632 <strftime+0x160>
     630:	94 c0       	rjmp	.+296    	; 0x75a <strftime+0x288>
     632:	74 f4       	brge	.+28     	; 0x650 <strftime+0x17e>
     634:	12 36       	cpi	r17, 0x62	; 98
     636:	09 f4       	brne	.+2      	; 0x63a <strftime+0x168>
     638:	66 c0       	rjmp	.+204    	; 0x706 <strftime+0x234>
     63a:	0c f0       	brlt	.+2      	; 0x63e <strftime+0x16c>
     63c:	75 c0       	rjmp	.+234    	; 0x728 <strftime+0x256>
     63e:	11 36       	cpi	r17, 0x61	; 97
     640:	09 f0       	breq	.+2      	; 0x644 <strftime+0x172>
     642:	14 c2       	rjmp	.+1064   	; 0xa6c <strftime+0x59a>
     644:	03 e0       	ldi	r16, 0x03	; 3
     646:	96 01       	movw	r18, r12
     648:	d7 01       	movw	r26, r14
     64a:	14 96       	adiw	r26, 0x04	; 4
     64c:	4c 91       	ld	r20, X
     64e:	57 c0       	rjmp	.+174    	; 0x6fe <strftime+0x22c>
     650:	17 36       	cpi	r17, 0x67	; 103
     652:	09 f4       	brne	.+2      	; 0x656 <strftime+0x184>
     654:	a4 c0       	rjmp	.+328    	; 0x79e <strftime+0x2cc>
     656:	74 f4       	brge	.+28     	; 0x674 <strftime+0x1a2>
     658:	15 36       	cpi	r17, 0x65	; 101
     65a:	09 f0       	breq	.+2      	; 0x65e <strftime+0x18c>
     65c:	07 c2       	rjmp	.+1038   	; 0xa6c <strftime+0x59a>
     65e:	f7 01       	movw	r30, r14
     660:	83 81       	ldd	r24, Z+3	; 0x03
     662:	28 2f       	mov	r18, r24
     664:	08 2e       	mov	r0, r24
     666:	00 0c       	add	r0, r0
     668:	33 0b       	sbc	r19, r19
     66a:	3f 93       	push	r19
     66c:	8f 93       	push	r24
     66e:	83 ed       	ldi	r24, 0xD3	; 211
     670:	94 e4       	ldi	r25, 0x44	; 68
     672:	c8 c0       	rjmp	.+400    	; 0x804 <strftime+0x332>
     674:	18 36       	cpi	r17, 0x68	; 104
     676:	09 f4       	brne	.+2      	; 0x67a <strftime+0x1a8>
     678:	46 c0       	rjmp	.+140    	; 0x706 <strftime+0x234>
     67a:	1a 36       	cpi	r17, 0x6A	; 106
     67c:	09 f0       	breq	.+2      	; 0x680 <strftime+0x1ae>
     67e:	f6 c1       	rjmp	.+1004   	; 0xa6c <strftime+0x59a>
     680:	d7 01       	movw	r26, r14
     682:	18 96       	adiw	r26, 0x08	; 8
     684:	8d 91       	ld	r24, X+
     686:	9c 91       	ld	r25, X
     688:	19 97       	sbiw	r26, 0x09	; 9
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	9f 93       	push	r25
     68e:	8f 93       	push	r24
     690:	89 ee       	ldi	r24, 0xE9	; 233
     692:	94 e4       	ldi	r25, 0x44	; 68
     694:	b7 c0       	rjmp	.+366    	; 0x804 <strftime+0x332>
     696:	15 37       	cpi	r17, 0x75	; 117
     698:	09 f4       	brne	.+2      	; 0x69c <strftime+0x1ca>
     69a:	35 c1       	rjmp	.+618    	; 0x906 <strftime+0x434>
     69c:	b4 f4       	brge	.+44     	; 0x6ca <strftime+0x1f8>
     69e:	10 37       	cpi	r17, 0x70	; 112
     6a0:	09 f4       	brne	.+2      	; 0x6a4 <strftime+0x1d2>
     6a2:	c2 c0       	rjmp	.+388    	; 0x828 <strftime+0x356>
     6a4:	34 f4       	brge	.+12     	; 0x6b2 <strftime+0x1e0>
     6a6:	1e 36       	cpi	r17, 0x6E	; 110
     6a8:	09 f0       	breq	.+2      	; 0x6ac <strftime+0x1da>
     6aa:	e0 c1       	rjmp	.+960    	; 0xa6c <strftime+0x59a>
     6ac:	8a e0       	ldi	r24, 0x0A	; 10
     6ae:	89 83       	std	Y+1, r24	; 0x01
     6b0:	e0 c1       	rjmp	.+960    	; 0xa72 <strftime+0x5a0>
     6b2:	12 37       	cpi	r17, 0x72	; 114
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <strftime+0x1e6>
     6b6:	c6 c0       	rjmp	.+396    	; 0x844 <strftime+0x372>
     6b8:	14 37       	cpi	r17, 0x74	; 116
     6ba:	09 f0       	breq	.+2      	; 0x6be <strftime+0x1ec>
     6bc:	d7 c1       	rjmp	.+942    	; 0xa6c <strftime+0x59a>
     6be:	6f ef       	ldi	r22, 0xFF	; 255
     6c0:	74 e4       	ldi	r23, 0x44	; 68
     6c2:	c6 01       	movw	r24, r12
     6c4:	0e 94 6a 4a 	call	0x94d4	; 0x94d4 <strcpy>
     6c8:	d4 c1       	rjmp	.+936    	; 0xa72 <strftime+0x5a0>
     6ca:	18 37       	cpi	r17, 0x78	; 120
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <strftime+0x1fe>
     6ce:	48 c1       	rjmp	.+656    	; 0x960 <strftime+0x48e>
     6d0:	5c f4       	brge	.+22     	; 0x6e8 <strftime+0x216>
     6d2:	17 37       	cpi	r17, 0x77	; 119
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <strftime+0x206>
     6d6:	ca c1       	rjmp	.+916    	; 0xa6c <strftime+0x59a>
     6d8:	f7 01       	movw	r30, r14
     6da:	84 81       	ldd	r24, Z+4	; 0x04
     6dc:	28 2f       	mov	r18, r24
     6de:	08 2e       	mov	r0, r24
     6e0:	00 0c       	add	r0, r0
     6e2:	33 0b       	sbc	r19, r19
     6e4:	3f 93       	push	r19
     6e6:	74 c1       	rjmp	.+744    	; 0x9d0 <strftime+0x4fe>
     6e8:	19 37       	cpi	r17, 0x79	; 121
     6ea:	09 f4       	brne	.+2      	; 0x6ee <strftime+0x21c>
     6ec:	5e c1       	rjmp	.+700    	; 0x9aa <strftime+0x4d8>
     6ee:	1a 37       	cpi	r17, 0x7A	; 122
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <strftime+0x222>
     6f2:	7e c1       	rjmp	.+764    	; 0x9f0 <strftime+0x51e>
     6f4:	bb c1       	rjmp	.+886    	; 0xa6c <strftime+0x59a>
     6f6:	0f ef       	ldi	r16, 0xFF	; 255
     6f8:	96 01       	movw	r18, r12
     6fa:	f7 01       	movw	r30, r14
     6fc:	44 81       	ldd	r20, Z+4	; 0x04
     6fe:	63 e8       	ldi	r22, 0x83	; 131
     700:	72 e0       	ldi	r23, 0x02	; 2
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0d c0       	rjmp	.+26     	; 0x720 <strftime+0x24e>
     706:	03 e0       	ldi	r16, 0x03	; 3
     708:	96 01       	movw	r18, r12
     70a:	d7 01       	movw	r26, r14
     70c:	15 96       	adiw	r26, 0x05	; 5
     70e:	4c 91       	ld	r20, X
     710:	04 c0       	rjmp	.+8      	; 0x71a <strftime+0x248>
     712:	0f ef       	ldi	r16, 0xFF	; 255
     714:	96 01       	movw	r18, r12
     716:	f7 01       	movw	r30, r14
     718:	45 81       	ldd	r20, Z+5	; 0x05
     71a:	6c e2       	ldi	r22, 0x2C	; 44
     71c:	72 e0       	ldi	r23, 0x02	; 2
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	0e 94 30 02 	call	0x460	; 0x460 <pgm_copystring>
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	a7 c1       	rjmp	.+846    	; 0xa76 <strftime+0x5a4>
     728:	b6 01       	movw	r22, r12
     72a:	c7 01       	movw	r24, r14
     72c:	0e 94 cc 05 	call	0xb98	; 0xb98 <asctime_r>
     730:	f6 01       	movw	r30, r12
     732:	cf 01       	movw	r24, r30
     734:	8c 19       	sub	r24, r12
     736:	9d 09       	sbc	r25, r13
     738:	21 91       	ld	r18, Z+
     73a:	21 11       	cpse	r18, r1
     73c:	fa cf       	rjmp	.-12     	; 0x732 <strftime+0x260>
     73e:	9b c1       	rjmp	.+822    	; 0xa76 <strftime+0x5a4>
     740:	d7 01       	movw	r26, r14
     742:	16 96       	adiw	r26, 0x06	; 6
     744:	8d 91       	ld	r24, X+
     746:	9c 91       	ld	r25, X
     748:	17 97       	sbiw	r26, 0x07	; 7
     74a:	84 59       	subi	r24, 0x94	; 148
     74c:	98 4f       	sbci	r25, 0xF8	; 248
     74e:	b1 01       	movw	r22, r2
     750:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     754:	7f 93       	push	r23
     756:	6f 93       	push	r22
     758:	3b c0       	rjmp	.+118    	; 0x7d0 <strftime+0x2fe>
     75a:	d7 01       	movw	r26, r14
     75c:	13 96       	adiw	r26, 0x03	; 3
     75e:	8c 91       	ld	r24, X
     760:	5d c0       	rjmp	.+186    	; 0x81c <strftime+0x34a>
     762:	d7 01       	movw	r26, r14
     764:	13 96       	adiw	r26, 0x03	; 3
     766:	8c 91       	ld	r24, X
     768:	13 97       	sbiw	r26, 0x03	; 3
     76a:	28 2f       	mov	r18, r24
     76c:	08 2e       	mov	r0, r24
     76e:	00 0c       	add	r0, r0
     770:	33 0b       	sbc	r19, r19
     772:	3f 93       	push	r19
     774:	8f 93       	push	r24
     776:	15 96       	adiw	r26, 0x05	; 5
     778:	8c 91       	ld	r24, X
     77a:	15 97       	sbiw	r26, 0x05	; 5
     77c:	08 2e       	mov	r0, r24
     77e:	00 0c       	add	r0, r0
     780:	99 0b       	sbc	r25, r25
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	16 96       	adiw	r26, 0x06	; 6
     78a:	8d 91       	ld	r24, X+
     78c:	9c 91       	ld	r25, X
     78e:	17 97       	sbiw	r26, 0x07	; 7
     790:	84 59       	subi	r24, 0x94	; 148
     792:	98 4f       	sbci	r25, 0xF8	; 248
     794:	9f 93       	push	r25
     796:	8f 93       	push	r24
     798:	87 ed       	ldi	r24, 0xD7	; 215
     79a:	94 e4       	ldi	r25, 0x44	; 68
     79c:	03 c1       	rjmp	.+518    	; 0x9a4 <strftime+0x4d2>
     79e:	d7 01       	movw	r26, r14
     7a0:	18 96       	adiw	r26, 0x08	; 8
     7a2:	6d 91       	ld	r22, X+
     7a4:	7c 91       	ld	r23, X
     7a6:	19 97       	sbiw	r26, 0x09	; 9
     7a8:	16 96       	adiw	r26, 0x06	; 6
     7aa:	8d 91       	ld	r24, X+
     7ac:	9c 91       	ld	r25, X
     7ae:	17 97       	sbiw	r26, 0x07	; 7
     7b0:	ae 01       	movw	r20, r28
     7b2:	45 5e       	subi	r20, 0xE5	; 229
     7b4:	5f 4f       	sbci	r21, 0xFF	; 255
     7b6:	84 59       	subi	r24, 0x94	; 148
     7b8:	98 4f       	sbci	r25, 0xF8	; 248
     7ba:	0e 94 25 07 	call	0xe4a	; 0xe4a <iso_week_date_r>
     7be:	17 36       	cpi	r17, 0x67	; 103
     7c0:	51 f4       	brne	.+20     	; 0x7d6 <strftime+0x304>
     7c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7c6:	b1 01       	movw	r22, r2
     7c8:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     7cc:	9f 93       	push	r25
     7ce:	8f 93       	push	r24
     7d0:	ef ed       	ldi	r30, 0xDF	; 223
     7d2:	f4 e4       	ldi	r31, 0x44	; 68
     7d4:	a6 c0       	rjmp	.+332    	; 0x922 <strftime+0x450>
     7d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7d8:	8f 93       	push	r24
     7da:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7dc:	8f 93       	push	r24
     7de:	44 ee       	ldi	r20, 0xE4	; 228
     7e0:	54 e4       	ldi	r21, 0x44	; 68
     7e2:	5f 93       	push	r21
     7e4:	4f 93       	push	r20
     7e6:	f9 c0       	rjmp	.+498    	; 0x9da <strftime+0x508>
     7e8:	f7 01       	movw	r30, r14
     7ea:	82 81       	ldd	r24, Z+2	; 0x02
     7ec:	6c e0       	ldi	r22, 0x0C	; 12
     7ee:	0e 94 97 4d 	call	0x9b2e	; 0x9b2e <__divmodqi4>
     7f2:	99 23       	and	r25, r25
     7f4:	21 f0       	breq	.+8      	; 0x7fe <strftime+0x32c>
     7f6:	89 2f       	mov	r24, r25
     7f8:	99 0f       	add	r25, r25
     7fa:	99 0b       	sbc	r25, r25
     7fc:	de c0       	rjmp	.+444    	; 0x9ba <strftime+0x4e8>
     7fe:	8c e0       	ldi	r24, 0x0C	; 12
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	db c0       	rjmp	.+438    	; 0x9ba <strftime+0x4e8>
     804:	9f 93       	push	r25
     806:	8f 93       	push	r24
     808:	e8 c0       	rjmp	.+464    	; 0x9da <strftime+0x508>
     80a:	f7 01       	movw	r30, r14
     80c:	85 81       	ldd	r24, Z+5	; 0x05
     80e:	08 2e       	mov	r0, r24
     810:	00 0c       	add	r0, r0
     812:	99 0b       	sbc	r25, r25
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	d1 c0       	rjmp	.+418    	; 0x9ba <strftime+0x4e8>
     818:	d7 01       	movw	r26, r14
     81a:	8c 91       	ld	r24, X
     81c:	28 2f       	mov	r18, r24
     81e:	08 2e       	mov	r0, r24
     820:	00 0c       	add	r0, r0
     822:	33 0b       	sbc	r19, r19
     824:	3f 93       	push	r19
     826:	ca c0       	rjmp	.+404    	; 0x9bc <strftime+0x4ea>
     828:	81 e4       	ldi	r24, 0x41	; 65
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	f7 01       	movw	r30, r14
     82e:	82 81       	ldd	r24, Z+2	; 0x02
     830:	8c 30       	cpi	r24, 0x0C	; 12
     832:	14 f0       	brlt	.+4      	; 0x838 <strftime+0x366>
     834:	80 e5       	ldi	r24, 0x50	; 80
     836:	89 83       	std	Y+1, r24	; 0x01
     838:	8d e4       	ldi	r24, 0x4D	; 77
     83a:	8a 83       	std	Y+2, r24	; 0x02
     83c:	1b 82       	std	Y+3, r1	; 0x03
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	19 c1       	rjmp	.+562    	; 0xa76 <strftime+0x5a4>
     844:	d7 01       	movw	r26, r14
     846:	12 96       	adiw	r26, 0x02	; 2
     848:	8c 91       	ld	r24, X
     84a:	6c e0       	ldi	r22, 0x0C	; 12
     84c:	0e 94 97 4d 	call	0x9b2e	; 0x9b2e <__divmodqi4>
     850:	99 23       	and	r25, r25
     852:	21 f0       	breq	.+8      	; 0x85c <strftime+0x38a>
     854:	89 2f       	mov	r24, r25
     856:	99 0f       	add	r25, r25
     858:	99 0b       	sbc	r25, r25
     85a:	02 c0       	rjmp	.+4      	; 0x860 <strftime+0x38e>
     85c:	8c e0       	ldi	r24, 0x0C	; 12
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	f7 01       	movw	r30, r14
     862:	20 81       	ld	r18, Z
     864:	42 2f       	mov	r20, r18
     866:	02 2e       	mov	r0, r18
     868:	00 0c       	add	r0, r0
     86a:	55 0b       	sbc	r21, r21
     86c:	5f 93       	push	r21
     86e:	2f 93       	push	r18
     870:	21 81       	ldd	r18, Z+1	; 0x01
     872:	42 2f       	mov	r20, r18
     874:	02 2e       	mov	r0, r18
     876:	00 0c       	add	r0, r0
     878:	55 0b       	sbc	r21, r21
     87a:	5f 93       	push	r21
     87c:	2f 93       	push	r18
     87e:	9f 93       	push	r25
     880:	8f 93       	push	r24
     882:	2e ee       	ldi	r18, 0xEE	; 238
     884:	34 e4       	ldi	r19, 0x44	; 68
     886:	3f 93       	push	r19
     888:	2f 93       	push	r18
     88a:	df 92       	push	r13
     88c:	cf 92       	push	r12
     88e:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
     892:	cd bf       	out	0x3d, r28	; 61
     894:	de bf       	out	0x3e, r29	; 62
     896:	f7 01       	movw	r30, r14
     898:	22 81       	ldd	r18, Z+2	; 0x02
     89a:	2c 30       	cpi	r18, 0x0C	; 12
     89c:	0c f4       	brge	.+2      	; 0x8a0 <strftime+0x3ce>
     89e:	eb c0       	rjmp	.+470    	; 0xa76 <strftime+0x5a4>
     8a0:	20 e5       	ldi	r18, 0x50	; 80
     8a2:	2b 87       	std	Y+11, r18	; 0x0b
     8a4:	e8 c0       	rjmp	.+464    	; 0xa76 <strftime+0x5a4>
     8a6:	d7 01       	movw	r26, r14
     8a8:	11 96       	adiw	r26, 0x01	; 1
     8aa:	8c 91       	ld	r24, X
     8ac:	11 97       	sbiw	r26, 0x01	; 1
     8ae:	28 2f       	mov	r18, r24
     8b0:	08 2e       	mov	r0, r24
     8b2:	00 0c       	add	r0, r0
     8b4:	33 0b       	sbc	r19, r19
     8b6:	3f 93       	push	r19
     8b8:	8f 93       	push	r24
     8ba:	12 96       	adiw	r26, 0x02	; 2
     8bc:	8c 91       	ld	r24, X
     8be:	28 2f       	mov	r18, r24
     8c0:	08 2e       	mov	r0, r24
     8c2:	00 0c       	add	r0, r0
     8c4:	33 0b       	sbc	r19, r19
     8c6:	3f 93       	push	r19
     8c8:	8f 93       	push	r24
     8ca:	86 e0       	ldi	r24, 0x06	; 6
     8cc:	95 e4       	ldi	r25, 0x45	; 69
     8ce:	9f 93       	push	r25
     8d0:	8f 93       	push	r24
     8d2:	c5 c0       	rjmp	.+394    	; 0xa5e <strftime+0x58c>
     8d4:	f7 01       	movw	r30, r14
     8d6:	80 81       	ld	r24, Z
     8d8:	28 2f       	mov	r18, r24
     8da:	08 2e       	mov	r0, r24
     8dc:	00 0c       	add	r0, r0
     8de:	33 0b       	sbc	r19, r19
     8e0:	3f 93       	push	r19
     8e2:	8f 93       	push	r24
     8e4:	81 81       	ldd	r24, Z+1	; 0x01
     8e6:	28 2f       	mov	r18, r24
     8e8:	08 2e       	mov	r0, r24
     8ea:	00 0c       	add	r0, r0
     8ec:	33 0b       	sbc	r19, r19
     8ee:	3f 93       	push	r19
     8f0:	8f 93       	push	r24
     8f2:	82 81       	ldd	r24, Z+2	; 0x02
     8f4:	28 2f       	mov	r18, r24
     8f6:	08 2e       	mov	r0, r24
     8f8:	00 0c       	add	r0, r0
     8fa:	33 0b       	sbc	r19, r19
     8fc:	3f 93       	push	r19
     8fe:	8f 93       	push	r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	95 e4       	ldi	r25, 0x45	; 69
     904:	4f c0       	rjmp	.+158    	; 0x9a4 <strftime+0x4d2>
     906:	d7 01       	movw	r26, r14
     908:	14 96       	adiw	r26, 0x04	; 4
     90a:	8c 91       	ld	r24, X
     90c:	08 2e       	mov	r0, r24
     90e:	00 0c       	add	r0, r0
     910:	99 0b       	sbc	r25, r25
     912:	00 97       	sbiw	r24, 0x00	; 0
     914:	11 f4       	brne	.+4      	; 0x91a <strftime+0x448>
     916:	87 e0       	ldi	r24, 0x07	; 7
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	9f 93       	push	r25
     91c:	8f 93       	push	r24
     91e:	e0 e1       	ldi	r30, 0x10	; 16
     920:	f5 e4       	ldi	r31, 0x45	; 69
     922:	ff 93       	push	r31
     924:	ef 93       	push	r30
     926:	59 c0       	rjmp	.+178    	; 0x9da <strftime+0x508>
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	15 c0       	rjmp	.+42     	; 0x956 <strftime+0x484>
     92c:	d7 01       	movw	r26, r14
     92e:	18 96       	adiw	r26, 0x08	; 8
     930:	6d 91       	ld	r22, X+
     932:	7c 91       	ld	r23, X
     934:	19 97       	sbiw	r26, 0x09	; 9
     936:	16 96       	adiw	r26, 0x06	; 6
     938:	8d 91       	ld	r24, X+
     93a:	9c 91       	ld	r25, X
     93c:	17 97       	sbiw	r26, 0x07	; 7
     93e:	ae 01       	movw	r20, r28
     940:	45 5e       	subi	r20, 0xE5	; 229
     942:	5f 4f       	sbci	r21, 0xFF	; 255
     944:	84 59       	subi	r24, 0x94	; 148
     946:	98 4f       	sbci	r25, 0xF8	; 248
     948:	0e 94 25 07 	call	0xe4a	; 0xe4a <iso_week_date_r>
     94c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     94e:	8f 93       	push	r24
     950:	8d 8d       	ldd	r24, Y+29	; 0x1d
     952:	34 c0       	rjmp	.+104    	; 0x9bc <strftime+0x4ea>
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	c7 01       	movw	r24, r14
     958:	0e 94 91 05 	call	0xb22	; 0xb22 <week_of_year>
     95c:	1f 92       	push	r1
     95e:	2e c0       	rjmp	.+92     	; 0x9bc <strftime+0x4ea>
     960:	d7 01       	movw	r26, r14
     962:	16 96       	adiw	r26, 0x06	; 6
     964:	8d 91       	ld	r24, X+
     966:	9c 91       	ld	r25, X
     968:	17 97       	sbiw	r26, 0x07	; 7
     96a:	b1 01       	movw	r22, r2
     96c:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     970:	9f 93       	push	r25
     972:	8f 93       	push	r24
     974:	f7 01       	movw	r30, r14
     976:	83 81       	ldd	r24, Z+3	; 0x03
     978:	28 2f       	mov	r18, r24
     97a:	08 2e       	mov	r0, r24
     97c:	00 0c       	add	r0, r0
     97e:	33 0b       	sbc	r19, r19
     980:	3f 93       	push	r19
     982:	8f 93       	push	r24
     984:	85 81       	ldd	r24, Z+5	; 0x05
     986:	08 2e       	mov	r0, r24
     988:	00 0c       	add	r0, r0
     98a:	99 0b       	sbc	r25, r25
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	9f 93       	push	r25
     990:	8f 93       	push	r24
     992:	24 ec       	ldi	r18, 0xC4	; 196
     994:	34 e4       	ldi	r19, 0x44	; 68
     996:	3f 93       	push	r19
     998:	2f 93       	push	r18
     99a:	df 92       	push	r13
     99c:	cf 92       	push	r12
     99e:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
     9a2:	61 c0       	rjmp	.+194    	; 0xa66 <strftime+0x594>
     9a4:	9f 93       	push	r25
     9a6:	8f 93       	push	r24
     9a8:	f8 cf       	rjmp	.-16     	; 0x99a <strftime+0x4c8>
     9aa:	d7 01       	movw	r26, r14
     9ac:	16 96       	adiw	r26, 0x06	; 6
     9ae:	8d 91       	ld	r24, X+
     9b0:	9c 91       	ld	r25, X
     9b2:	17 97       	sbiw	r26, 0x07	; 7
     9b4:	b1 01       	movw	r22, r2
     9b6:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     9ba:	9f 93       	push	r25
     9bc:	8f 93       	push	r24
     9be:	bf 92       	push	r11
     9c0:	af 92       	push	r10
     9c2:	0b c0       	rjmp	.+22     	; 0x9da <strftime+0x508>
     9c4:	f7 01       	movw	r30, r14
     9c6:	86 81       	ldd	r24, Z+6	; 0x06
     9c8:	97 81       	ldd	r25, Z+7	; 0x07
     9ca:	84 59       	subi	r24, 0x94	; 148
     9cc:	98 4f       	sbci	r25, 0xF8	; 248
     9ce:	9f 93       	push	r25
     9d0:	8f 93       	push	r24
     9d2:	25 eb       	ldi	r18, 0xB5	; 181
     9d4:	34 e4       	ldi	r19, 0x44	; 68
     9d6:	3f 93       	push	r19
     9d8:	2f 93       	push	r18
     9da:	df 92       	push	r13
     9dc:	cf 92       	push	r12
     9de:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	43 c0       	rjmp	.+134    	; 0xa76 <strftime+0x5a4>
     9f0:	60 91 3b 49 	lds	r22, 0x493B	; 0x80493b <__utc_offset>
     9f4:	70 91 3c 49 	lds	r23, 0x493C	; 0x80493c <__utc_offset+0x1>
     9f8:	80 91 3d 49 	lds	r24, 0x493D	; 0x80493d <__utc_offset+0x2>
     9fc:	90 91 3e 49 	lds	r25, 0x493E	; 0x80493e <__utc_offset+0x3>
     a00:	2c e3       	ldi	r18, 0x3C	; 60
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	0e 94 a0 48 	call	0x9140	; 0x9140 <__divmodsi4>
     a0c:	89 01       	movw	r16, r18
     a0e:	9a 01       	movw	r18, r20
     a10:	f8 01       	movw	r30, r16
     a12:	d7 01       	movw	r26, r14
     a14:	1a 96       	adiw	r26, 0x0a	; 10
     a16:	8d 91       	ld	r24, X+
     a18:	9c 91       	ld	r25, X
     a1a:	1b 97       	sbiw	r26, 0x0b	; 11
     a1c:	6c e3       	ldi	r22, 0x3C	; 60
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     a24:	16 16       	cp	r1, r22
     a26:	17 06       	cpc	r1, r23
     a28:	1c f4       	brge	.+6      	; 0xa30 <strftime+0x55e>
     a2a:	fb 01       	movw	r30, r22
     a2c:	e0 0f       	add	r30, r16
     a2e:	f1 1f       	adc	r31, r17
     a30:	cf 01       	movw	r24, r30
     a32:	6c e3       	ldi	r22, 0x3C	; 60
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     a3a:	97 ff       	sbrs	r25, 7
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <strftime+0x572>
     a3e:	91 95       	neg	r25
     a40:	81 95       	neg	r24
     a42:	91 09       	sbc	r25, r1
     a44:	9f 93       	push	r25
     a46:	8f 93       	push	r24
     a48:	cf 01       	movw	r24, r30
     a4a:	6c e3       	ldi	r22, 0x3C	; 60
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     a52:	7f 93       	push	r23
     a54:	6f 93       	push	r22
     a56:	e2 e2       	ldi	r30, 0x22	; 34
     a58:	f5 e4       	ldi	r31, 0x45	; 69
     a5a:	ff 93       	push	r31
     a5c:	ef 93       	push	r30
     a5e:	df 92       	push	r13
     a60:	cf 92       	push	r12
     a62:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
     a66:	cd bf       	out	0x3d, r28	; 61
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	05 c0       	rjmp	.+10     	; 0xa76 <strftime+0x5a4>
     a6c:	8f e3       	ldi	r24, 0x3F	; 63
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	1a 82       	std	Y+2, r1	; 0x02
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	93 01       	movw	r18, r6
     a78:	28 0f       	add	r18, r24
     a7a:	39 1f       	adc	r19, r25
     a7c:	a9 a1       	ldd	r26, Y+33	; 0x21
     a7e:	ba a1       	ldd	r27, Y+34	; 0x22
     a80:	2a 17       	cp	r18, r26
     a82:	3b 07       	cpc	r19, r27
     a84:	98 f4       	brcc	.+38     	; 0xaac <strftime+0x5da>
     a86:	d2 01       	movw	r26, r4
     a88:	f6 01       	movw	r30, r12
     a8a:	af 01       	movw	r20, r30
     a8c:	4c 19       	sub	r20, r12
     a8e:	5d 09       	sbc	r21, r13
     a90:	48 17       	cp	r20, r24
     a92:	59 07       	cpc	r21, r25
     a94:	1c f4       	brge	.+6      	; 0xa9c <strftime+0x5ca>
     a96:	41 91       	ld	r20, Z+
     a98:	4d 93       	st	X+, r20
     a9a:	f7 cf       	rjmp	.-18     	; 0xa8a <strftime+0x5b8>
     a9c:	97 ff       	sbrs	r25, 7
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <strftime+0x5d2>
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	48 0e       	add	r4, r24
     aa6:	59 1e       	adc	r5, r25
     aa8:	39 01       	movw	r6, r18
     aaa:	3c cd       	rjmp	.-1416   	; 0x524 <strftime+0x52>
     aac:	f2 01       	movw	r30, r4
     aae:	10 82       	st	Z, r1
     ab0:	0e c0       	rjmp	.+28     	; 0xace <strftime+0x5fc>
     ab2:	d2 01       	movw	r26, r4
     ab4:	8d 93       	st	X+, r24
     ab6:	2d 01       	movw	r4, r26
     ab8:	bf ef       	ldi	r27, 0xFF	; 255
     aba:	6b 1a       	sub	r6, r27
     abc:	7b 0a       	sbc	r7, r27
     abe:	88 23       	and	r24, r24
     ac0:	31 f0       	breq	.+12     	; 0xace <strftime+0x5fc>
     ac2:	ef ef       	ldi	r30, 0xFF	; 255
     ac4:	8e 1a       	sub	r8, r30
     ac6:	9e 0a       	sbc	r9, r30
     ac8:	2d cd       	rjmp	.-1446   	; 0x524 <strftime+0x52>
     aca:	d2 01       	movw	r26, r4
     acc:	1c 92       	st	X, r1
     ace:	c3 01       	movw	r24, r6
     ad0:	a2 96       	adiw	r28, 0x22	; 34
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	df 90       	pop	r13
     ae4:	cf 90       	pop	r12
     ae6:	bf 90       	pop	r11
     ae8:	af 90       	pop	r10
     aea:	9f 90       	pop	r9
     aec:	8f 90       	pop	r8
     aee:	7f 90       	pop	r7
     af0:	6f 90       	pop	r6
     af2:	5f 90       	pop	r5
     af4:	4f 90       	pop	r4
     af6:	3f 90       	pop	r3
     af8:	2f 90       	pop	r2
     afa:	08 95       	ret

00000afc <time>:
     afc:	fc 01       	movw	r30, r24
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	f8 94       	cli
     b02:	60 91 2b 49 	lds	r22, 0x492B	; 0x80492b <__system_time>
     b06:	70 91 2c 49 	lds	r23, 0x492C	; 0x80492c <__system_time+0x1>
     b0a:	80 91 2d 49 	lds	r24, 0x492D	; 0x80492d <__system_time+0x2>
     b0e:	90 91 2e 49 	lds	r25, 0x492E	; 0x80492e <__system_time+0x3>
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	30 97       	sbiw	r30, 0x00	; 0
     b16:	21 f0       	breq	.+8      	; 0xb20 <time+0x24>
     b18:	60 83       	st	Z, r22
     b1a:	71 83       	std	Z+1, r23	; 0x01
     b1c:	82 83       	std	Z+2, r24	; 0x02
     b1e:	93 83       	std	Z+3, r25	; 0x03
     b20:	08 95       	ret

00000b22 <week_of_year>:
     b22:	fc 01       	movw	r30, r24
     b24:	20 85       	ldd	r18, Z+8	; 0x08
     b26:	31 85       	ldd	r19, Z+9	; 0x09
     b28:	c9 01       	movw	r24, r18
     b2a:	07 96       	adiw	r24, 0x07	; 7
     b2c:	44 81       	ldd	r20, Z+4	; 0x04
     b2e:	84 1b       	sub	r24, r20
     b30:	91 09       	sbc	r25, r1
     b32:	47 fd       	sbrc	r20, 7
     b34:	93 95       	inc	r25
     b36:	86 0f       	add	r24, r22
     b38:	91 1d       	adc	r25, r1
     b3a:	e7 e0       	ldi	r30, 0x07	; 7
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	bf 01       	movw	r22, r30
     b40:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     b44:	a9 01       	movw	r20, r18
     b46:	48 1b       	sub	r20, r24
     b48:	59 0b       	sbc	r21, r25
     b4a:	ca 01       	movw	r24, r20
     b4c:	57 fd       	sbrc	r21, 7
     b4e:	06 c0       	rjmp	.+12     	; 0xb5c <week_of_year+0x3a>
     b50:	bf 01       	movw	r22, r30
     b52:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	86 0f       	add	r24, r22
     b5a:	08 95       	ret
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	08 95       	ret

00000b60 <system_tick>:
     b60:	8f 93       	push	r24
     b62:	8f b7       	in	r24, 0x3f	; 63
     b64:	8f 93       	push	r24
     b66:	f8 94       	cli
     b68:	80 91 2b 49 	lds	r24, 0x492B	; 0x80492b <__system_time>
     b6c:	8f 5f       	subi	r24, 0xFF	; 255
     b6e:	80 93 2b 49 	sts	0x492B, r24	; 0x80492b <__system_time>
     b72:	80 91 2c 49 	lds	r24, 0x492C	; 0x80492c <__system_time+0x1>
     b76:	8f 4f       	sbci	r24, 0xFF	; 255
     b78:	80 93 2c 49 	sts	0x492C, r24	; 0x80492c <__system_time+0x1>
     b7c:	80 91 2d 49 	lds	r24, 0x492D	; 0x80492d <__system_time+0x2>
     b80:	8f 4f       	sbci	r24, 0xFF	; 255
     b82:	80 93 2d 49 	sts	0x492D, r24	; 0x80492d <__system_time+0x2>
     b86:	80 91 2e 49 	lds	r24, 0x492E	; 0x80492e <__system_time+0x3>
     b8a:	8f 4f       	sbci	r24, 0xFF	; 255
     b8c:	80 93 2e 49 	sts	0x492E, r24	; 0x80492e <__system_time+0x3>
     b90:	8f 91       	pop	r24
     b92:	8f bf       	out	0x3f, r24	; 63
     b94:	8f 91       	pop	r24
     b96:	08 95       	ret

00000b98 <asctime_r>:
     b98:	cf 92       	push	r12
     b9a:	df 92       	push	r13
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	8c 01       	movw	r16, r24
     baa:	eb 01       	movw	r28, r22
     bac:	fc 01       	movw	r30, r24
     bae:	84 81       	ldd	r24, Z+4	; 0x04
     bb0:	b8 2f       	mov	r27, r24
     bb2:	bb 0f       	add	r27, r27
     bb4:	b8 0f       	add	r27, r24
     bb6:	85 81       	ldd	r24, Z+5	; 0x05
     bb8:	78 2f       	mov	r23, r24
     bba:	77 0f       	add	r23, r23
     bbc:	78 0f       	add	r23, r24
     bbe:	9e 01       	movw	r18, r28
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	8b 2f       	mov	r24, r27
     bc4:	84 0f       	add	r24, r20
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a0 e0       	ldi	r26, 0x00	; 0
     bca:	83 54       	subi	r24, 0x43	; 67
     bcc:	9d 4f       	sbci	r25, 0xFD	; 253
     bce:	af 4f       	sbci	r26, 0xFF	; 255
     bd0:	fc 01       	movw	r30, r24
     bd2:	5a 2f       	mov	r21, r26
     bd4:	0e 94 a5 4d 	call	0x9b4a	; 0x9b4a <__xload_1>
     bd8:	f9 01       	movw	r30, r18
     bda:	61 93       	st	Z+, r22
     bdc:	9f 01       	movw	r18, r30
     bde:	87 2f       	mov	r24, r23
     be0:	84 0f       	add	r24, r20
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	8d 52       	subi	r24, 0x2D	; 45
     be8:	9d 4f       	sbci	r25, 0xFD	; 253
     bea:	af 4f       	sbci	r26, 0xFF	; 255
     bec:	fc 01       	movw	r30, r24
     bee:	5a 2f       	mov	r21, r26
     bf0:	0e 94 a5 4d 	call	0x9b4a	; 0x9b4a <__xload_1>
     bf4:	f9 01       	movw	r30, r18
     bf6:	63 83       	std	Z+3, r22	; 0x03
     bf8:	4f 5f       	subi	r20, 0xFF	; 255
     bfa:	43 30       	cpi	r20, 0x03	; 3
     bfc:	11 f7       	brne	.-60     	; 0xbc2 <asctime_r+0x2a>
     bfe:	80 e2       	ldi	r24, 0x20	; 32
     c00:	8f 83       	std	Y+7, r24	; 0x07
     c02:	8b 83       	std	Y+3, r24	; 0x03
     c04:	be 01       	movw	r22, r28
     c06:	68 5f       	subi	r22, 0xF8	; 248
     c08:	7f 4f       	sbci	r23, 0xFF	; 255
     c0a:	f8 01       	movw	r30, r16
     c0c:	83 81       	ldd	r24, Z+3	; 0x03
     c0e:	40 e2       	ldi	r20, 0x20	; 32
     c10:	08 2e       	mov	r0, r24
     c12:	00 0c       	add	r0, r0
     c14:	99 0b       	sbc	r25, r25
     c16:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__print_lz>
     c1a:	be 01       	movw	r22, r28
     c1c:	65 5f       	subi	r22, 0xF5	; 245
     c1e:	7f 4f       	sbci	r23, 0xFF	; 255
     c20:	f8 01       	movw	r30, r16
     c22:	82 81       	ldd	r24, Z+2	; 0x02
     c24:	4a e3       	ldi	r20, 0x3A	; 58
     c26:	08 2e       	mov	r0, r24
     c28:	00 0c       	add	r0, r0
     c2a:	99 0b       	sbc	r25, r25
     c2c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__print_lz>
     c30:	be 01       	movw	r22, r28
     c32:	62 5f       	subi	r22, 0xF2	; 242
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	f8 01       	movw	r30, r16
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	4a e3       	ldi	r20, 0x3A	; 58
     c3c:	08 2e       	mov	r0, r24
     c3e:	00 0c       	add	r0, r0
     c40:	99 0b       	sbc	r25, r25
     c42:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__print_lz>
     c46:	be 01       	movw	r22, r28
     c48:	6f 5e       	subi	r22, 0xEF	; 239
     c4a:	7f 4f       	sbci	r23, 0xFF	; 255
     c4c:	f8 01       	movw	r30, r16
     c4e:	80 81       	ld	r24, Z
     c50:	40 e2       	ldi	r20, 0x20	; 32
     c52:	08 2e       	mov	r0, r24
     c54:	00 0c       	add	r0, r0
     c56:	99 0b       	sbc	r25, r25
     c58:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__print_lz>
     c5c:	f8 01       	movw	r30, r16
     c5e:	86 81       	ldd	r24, Z+6	; 0x06
     c60:	97 81       	ldd	r25, Z+7	; 0x07
     c62:	64 e6       	ldi	r22, 0x64	; 100
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	84 59       	subi	r24, 0x94	; 148
     c68:	98 4f       	sbci	r25, 0xF8	; 248
     c6a:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     c6e:	6b 01       	movw	r12, r22
     c70:	7c 01       	movw	r14, r24
     c72:	be 01       	movw	r22, r28
     c74:	6c 5e       	subi	r22, 0xEC	; 236
     c76:	7f 4f       	sbci	r23, 0xFF	; 255
     c78:	40 e2       	ldi	r20, 0x20	; 32
     c7a:	c6 01       	movw	r24, r12
     c7c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__print_lz>
     c80:	be 01       	movw	r22, r28
     c82:	6a 5e       	subi	r22, 0xEA	; 234
     c84:	7f 4f       	sbci	r23, 0xFF	; 255
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	c7 01       	movw	r24, r14
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	cf 90       	pop	r12
     c9a:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__print_lz>

00000c9e <gmtime_r>:
     c9e:	cf 92       	push	r12
     ca0:	df 92       	push	r13
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	28 97       	sbiw	r28, 0x08	; 8
     cb4:	cd bf       	out	0x3d, r28	; 61
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	8b 01       	movw	r16, r22
     cba:	fc 01       	movw	r30, r24
     cbc:	60 81       	ld	r22, Z
     cbe:	71 81       	ldd	r23, Z+1	; 0x01
     cc0:	82 81       	ldd	r24, Z+2	; 0x02
     cc2:	93 81       	ldd	r25, Z+3	; 0x03
     cc4:	20 e8       	ldi	r18, 0x80	; 128
     cc6:	31 e5       	ldi	r19, 0x51	; 81
     cc8:	41 e0       	ldi	r20, 0x01	; 1
     cca:	50 e0       	ldi	r21, 0x00	; 0
     ccc:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
     cd0:	69 01       	movw	r12, r18
     cd2:	7a 01       	movw	r14, r20
     cd4:	2c e3       	ldi	r18, 0x3C	; 60
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	0e 94 a0 48 	call	0x9140	; 0x9140 <__divmodsi4>
     ce0:	29 83       	std	Y+1, r18	; 0x01
     ce2:	3a 83       	std	Y+2, r19	; 0x02
     ce4:	4b 83       	std	Y+3, r20	; 0x03
     ce6:	5c 83       	std	Y+4, r21	; 0x04
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	9a 81       	ldd	r25, Y+2	; 0x02
     cec:	ab 81       	ldd	r26, Y+3	; 0x03
     cee:	bc 81       	ldd	r27, Y+4	; 0x04
     cf0:	f8 01       	movw	r30, r16
     cf2:	60 83       	st	Z, r22
     cf4:	6c e3       	ldi	r22, 0x3C	; 60
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	f8 01       	movw	r30, r16
     d02:	a1 83       	std	Z+1, r26	; 0x01
     d04:	82 83       	std	Z+2, r24	; 0x02
     d06:	c6 01       	movw	r24, r12
     d08:	06 96       	adiw	r24, 0x06	; 6
     d0a:	67 e0       	ldi	r22, 0x07	; 7
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	0e 94 56 48 	call	0x90ac	; 0x90ac <__udivmodhi4>
     d12:	84 83       	std	Z+4, r24	; 0x04
     d14:	2d ea       	ldi	r18, 0xAD	; 173
     d16:	3e e8       	ldi	r19, 0x8E	; 142
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	c7 01       	movw	r24, r14
     d1e:	b6 01       	movw	r22, r12
     d20:	0e 94 a0 48 	call	0x9140	; 0x9140 <__divmodsi4>
     d24:	29 83       	std	Y+1, r18	; 0x01
     d26:	3a 83       	std	Y+2, r19	; 0x02
     d28:	6d 83       	std	Y+5, r22	; 0x05
     d2a:	7e 83       	std	Y+6, r23	; 0x06
     d2c:	8f 83       	std	Y+7, r24	; 0x07
     d2e:	98 87       	std	Y+8, r25	; 0x08
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	9a 81       	ldd	r25, Y+2	; 0x02
     d34:	24 e6       	ldi	r18, 0x64	; 100
     d36:	28 9f       	mul	r18, r24
     d38:	60 01       	movw	r12, r0
     d3a:	29 9f       	mul	r18, r25
     d3c:	d0 0c       	add	r13, r0
     d3e:	11 24       	eor	r1, r1
     d40:	6d 81       	ldd	r22, Y+5	; 0x05
     d42:	7e 81       	ldd	r23, Y+6	; 0x06
     d44:	8f 81       	ldd	r24, Y+7	; 0x07
     d46:	98 85       	ldd	r25, Y+8	; 0x08
     d48:	25 eb       	ldi	r18, 0xB5	; 181
     d4a:	35 e0       	ldi	r19, 0x05	; 5
     d4c:	40 e0       	ldi	r20, 0x00	; 0
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	0e 94 a0 48 	call	0x9140	; 0x9140 <__divmodsi4>
     d54:	29 83       	std	Y+1, r18	; 0x01
     d56:	3a 83       	std	Y+2, r19	; 0x02
     d58:	6d 83       	std	Y+5, r22	; 0x05
     d5a:	7e 83       	std	Y+6, r23	; 0x06
     d5c:	e9 80       	ldd	r14, Y+1	; 0x01
     d5e:	fa 80       	ldd	r15, Y+2	; 0x02
     d60:	ee 0c       	add	r14, r14
     d62:	ff 1c       	adc	r15, r15
     d64:	ee 0c       	add	r14, r14
     d66:	ff 1c       	adc	r15, r15
     d68:	ec 0c       	add	r14, r12
     d6a:	fd 1c       	adc	r15, r13
     d6c:	8d 81       	ldd	r24, Y+5	; 0x05
     d6e:	9e 81       	ldd	r25, Y+6	; 0x06
     d70:	f5 e6       	ldi	r31, 0x65	; 101
     d72:	ef 16       	cp	r14, r31
     d74:	f1 04       	cpc	r15, r1
     d76:	10 f0       	brcs	.+4      	; 0xd7c <gmtime_r+0xde>
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	04 c0       	rjmp	.+8      	; 0xd84 <gmtime_r+0xe6>
     d7c:	24 e6       	ldi	r18, 0x64	; 100
     d7e:	e2 16       	cp	r14, r18
     d80:	f1 04       	cpc	r15, r1
     d82:	19 f0       	breq	.+6      	; 0xd8a <gmtime_r+0xec>
     d84:	21 e0       	ldi	r18, 0x01	; 1
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <gmtime_r+0xf0>
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	a9 01       	movw	r20, r18
     d90:	44 59       	subi	r20, 0x94	; 148
     d92:	5e 4f       	sbci	r21, 0xFE	; 254
     d94:	48 17       	cp	r20, r24
     d96:	59 07       	cpc	r21, r25
     d98:	68 f4       	brcc	.+26     	; 0xdb4 <gmtime_r+0x116>
     d9a:	6d e6       	ldi	r22, 0x6D	; 109
     d9c:	71 e0       	ldi	r23, 0x01	; 1
     d9e:	82 1b       	sub	r24, r18
     da0:	93 0b       	sbc	r25, r19
     da2:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	e8 0e       	add	r14, r24
     dac:	f9 1e       	adc	r15, r25
     dae:	cd 01       	movw	r24, r26
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	44 e6       	ldi	r20, 0x64	; 100
     db6:	e4 0e       	add	r14, r20
     db8:	f1 1c       	adc	r15, r1
     dba:	f8 01       	movw	r30, r16
     dbc:	e6 82       	std	Z+6, r14	; 0x06
     dbe:	f7 82       	std	Z+7, r15	; 0x07
     dc0:	80 87       	std	Z+8, r24	; 0x08
     dc2:	91 87       	std	Z+9, r25	; 0x09
     dc4:	25 5c       	subi	r18, 0xC5	; 197
     dc6:	3f 4f       	sbci	r19, 0xFF	; 255
     dc8:	82 17       	cp	r24, r18
     dca:	93 07       	cpc	r25, r19
     dcc:	48 f4       	brcc	.+18     	; 0xde0 <gmtime_r+0x142>
     dce:	6f e1       	ldi	r22, 0x1F	; 31
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	f8 01       	movw	r30, r16
     ddc:	85 83       	std	Z+5, r24	; 0x05
     dde:	22 c0       	rjmp	.+68     	; 0xe24 <gmtime_r+0x186>
     de0:	69 e9       	ldi	r22, 0x99	; 153
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	82 1b       	sub	r24, r18
     de6:	93 0b       	sbc	r25, r19
     de8:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	f8 2e       	mov	r15, r24
     df2:	ff 0c       	add	r15, r15
     df4:	ff 0c       	add	r15, r15
     df6:	f8 0e       	add	r15, r24
     df8:	6d e3       	ldi	r22, 0x3D	; 61
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	cd 01       	movw	r24, r26
     dfe:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	e8 2e       	mov	r14, r24
     e08:	ee 0c       	add	r14, r14
     e0a:	6f e1       	ldi	r22, 0x1F	; 31
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	cd 01       	movw	r24, r26
     e10:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	22 e0       	ldi	r18, 0x02	; 2
     e1a:	28 0f       	add	r18, r24
     e1c:	f2 0e       	add	r15, r18
     e1e:	fe 0c       	add	r15, r14
     e20:	f8 01       	movw	r30, r16
     e22:	f5 82       	std	Z+5, r15	; 0x05
     e24:	a3 83       	std	Z+3, r26	; 0x03
     e26:	f8 01       	movw	r30, r16
     e28:	12 86       	std	Z+10, r1	; 0x0a
     e2a:	13 86       	std	Z+11, r1	; 0x0b
     e2c:	83 81       	ldd	r24, Z+3	; 0x03
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	83 83       	std	Z+3, r24	; 0x03
     e32:	28 96       	adiw	r28, 0x08	; 8
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	ff 90       	pop	r15
     e42:	ef 90       	pop	r14
     e44:	df 90       	pop	r13
     e46:	cf 90       	pop	r12
     e48:	08 95       	ret

00000e4a <iso_week_date_r>:
     e4a:	cf 92       	push	r12
     e4c:	df 92       	push	r13
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	8c 01       	movw	r16, r24
     e5c:	7b 01       	movw	r14, r22
     e5e:	ea 01       	movw	r28, r20
     e60:	88 83       	st	Y, r24
     e62:	99 83       	std	Y+1, r25	; 0x01
     e64:	0e 94 ac 01 	call	0x358	; 0x358 <is_leap_year>
     e68:	28 2f       	mov	r18, r24
     e6a:	a8 01       	movw	r20, r16
     e6c:	40 5d       	subi	r20, 0xD0	; 208
     e6e:	57 40       	sbci	r21, 0x07	; 7
     e70:	6d e6       	ldi	r22, 0x6D	; 109
     e72:	71 e0       	ldi	r23, 0x01	; 1
     e74:	46 9f       	mul	r20, r22
     e76:	c0 01       	movw	r24, r0
     e78:	47 9f       	mul	r20, r23
     e7a:	90 0d       	add	r25, r0
     e7c:	56 9f       	mul	r21, r22
     e7e:	90 0d       	add	r25, r0
     e80:	11 24       	eor	r1, r1
     e82:	8e 0d       	add	r24, r14
     e84:	9f 1d       	adc	r25, r15
     e86:	41 15       	cp	r20, r1
     e88:	51 05       	cpc	r21, r1
     e8a:	79 f0       	breq	.+30     	; 0xeaa <iso_week_date_r+0x60>
     e8c:	ba 01       	movw	r22, r20
     e8e:	76 95       	lsr	r23
     e90:	67 95       	ror	r22
     e92:	76 95       	lsr	r23
     e94:	67 95       	ror	r22
     e96:	6f 5f       	subi	r22, 0xFF	; 255
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	86 0f       	add	r24, r22
     e9c:	97 1f       	adc	r25, r23
     e9e:	82 1b       	sub	r24, r18
     ea0:	91 09       	sbc	r25, r1
     ea2:	45 36       	cpi	r20, 0x65	; 101
     ea4:	51 05       	cpc	r21, r1
     ea6:	08 f0       	brcs	.+2      	; 0xeaa <iso_week_date_r+0x60>
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	06 96       	adiw	r24, 0x06	; 6
     eac:	67 e0       	ldi	r22, 0x07	; 7
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	0e 94 56 48 	call	0x90ac	; 0x90ac <__udivmodhi4>
     eb4:	6c 01       	movw	r12, r24
     eb6:	89 2b       	or	r24, r25
     eb8:	19 f4       	brne	.+6      	; 0xec0 <iso_week_date_r+0x76>
     eba:	87 e0       	ldi	r24, 0x07	; 7
     ebc:	c8 2e       	mov	r12, r24
     ebe:	d1 2c       	mov	r13, r1
     ec0:	cc 82       	std	Y+4, r12	; 0x04
     ec2:	dd 82       	std	Y+5, r13	; 0x05
     ec4:	c7 01       	movw	r24, r14
     ec6:	0b 96       	adiw	r24, 0x0b	; 11
     ec8:	8c 19       	sub	r24, r12
     eca:	9d 09       	sbc	r25, r13
     ecc:	67 e0       	ldi	r22, 0x07	; 7
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     ed4:	65 33       	cpi	r22, 0x35	; 53
     ed6:	71 05       	cpc	r23, r1
     ed8:	b1 f4       	brne	.+44     	; 0xf06 <iso_week_date_r+0xbc>
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	c8 1a       	sub	r12, r24
     ede:	d1 08       	sbc	r13, r1
     ee0:	ec 18       	sub	r14, r12
     ee2:	fd 08       	sbc	r15, r13
     ee4:	82 2f       	mov	r24, r18
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	84 59       	subi	r24, 0x94	; 148
     eea:	9e 4f       	sbci	r25, 0xFE	; 254
     eec:	23 e0       	ldi	r18, 0x03	; 3
     eee:	e2 0e       	add	r14, r18
     ef0:	f1 1c       	adc	r15, r1
     ef2:	8e 15       	cp	r24, r14
     ef4:	9f 05       	cpc	r25, r15
     ef6:	3c f4       	brge	.+14     	; 0xf06 <iso_week_date_r+0xbc>
     ef8:	88 81       	ld	r24, Y
     efa:	99 81       	ldd	r25, Y+1	; 0x01
     efc:	01 96       	adiw	r24, 0x01	; 1
     efe:	88 83       	st	Y, r24
     f00:	99 83       	std	Y+1, r25	; 0x01
     f02:	61 e0       	ldi	r22, 0x01	; 1
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	6a 83       	std	Y+2, r22	; 0x02
     f08:	7b 83       	std	Y+3, r23	; 0x03
     f0a:	67 2b       	or	r22, r23
     f0c:	79 f4       	brne	.+30     	; 0xf2c <iso_week_date_r+0xe2>
     f0e:	01 50       	subi	r16, 0x01	; 1
     f10:	11 09       	sbc	r17, r1
     f12:	c8 01       	movw	r24, r16
     f14:	0e 94 ac 01 	call	0x358	; 0x358 <is_leap_year>
     f18:	68 2f       	mov	r22, r24
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	64 59       	subi	r22, 0x94	; 148
     f1e:	7e 4f       	sbci	r23, 0xFE	; 254
     f20:	ae 01       	movw	r20, r28
     f22:	c8 01       	movw	r24, r16
     f24:	0e 94 25 07 	call	0xe4a	; 0xe4a <iso_week_date_r>
     f28:	cc 82       	std	Y+4, r12	; 0x04
     f2a:	dd 82       	std	Y+5, r13	; 0x05
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	08 95       	ret

00000f3e <__print_lz>:
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	eb 01       	movw	r28, r22
     f46:	14 2f       	mov	r17, r20
     f48:	6a e0       	ldi	r22, 0x0A	; 10
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
     f50:	60 5d       	subi	r22, 0xD0	; 208
     f52:	68 83       	st	Y, r22
     f54:	80 5d       	subi	r24, 0xD0	; 208
     f56:	89 83       	std	Y+1, r24	; 0x01
     f58:	1a 83       	std	Y+2, r17	; 0x02
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	08 95       	ret

00000f62 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     f62:	0e 94 00 2a 	call	0x5400	; 0x5400 <system_init>
     f66:	08 95       	ret

00000f68 <__vector_30>:

extern USART_Number_t g_serialbus_usart_number;
extern USART_Number_t g_linkbus_usart_number;

ISR(TCB2_INT_vect)
{
     f68:	1f 92       	push	r1
     f6a:	0f 92       	push	r0
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	0f 92       	push	r0
     f70:	11 24       	eor	r1, r1
     f72:	8f 93       	push	r24
	if(TCB2.INTFLAGS & TCB_CAPT_bm)
     f74:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
     f78:	80 ff       	sbrs	r24, 0
     f7a:	03 c0       	rjmp	.+6      	; 0xf82 <__vector_30+0x1a>
    {
        TCB2.INTFLAGS = TCB_CAPT_bm;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    }
}
     f82:	8f 91       	pop	r24
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <_Z9serial_Rxh>:
		serial_Rx(rx_char);
	}
}

void serial_Rx(uint8_t rx_char)
{
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static int msg_ID = 0;
	static bool receiving_msg = false;

	if(!buff)
     f96:	80 91 81 45 	lds	r24, 0x4581	; 0x804581 <_ZZ9serial_RxhE4buff>
     f9a:	90 91 82 45 	lds	r25, 0x4582	; 0x804582 <_ZZ9serial_RxhE4buff+0x1>
     f9e:	89 2b       	or	r24, r25
     fa0:	31 f4       	brne	.+12     	; 0xfae <_Z9serial_Rxh+0x20>
	{
		buff = nextEmptySBRxBuffer();
     fa2:	0e 94 f4 39 	call	0x73e8	; 0x73e8 <nextEmptySBRxBuffer>
     fa6:	80 93 81 45 	sts	0x4581, r24	; 0x804581 <_ZZ9serial_RxhE4buff>
     faa:	90 93 82 45 	sts	0x4582, r25	; 0x804582 <_ZZ9serial_RxhE4buff+0x1>
	}

	if(buff)
     fae:	c0 91 81 45 	lds	r28, 0x4581	; 0x804581 <_ZZ9serial_RxhE4buff>
     fb2:	d0 91 82 45 	lds	r29, 0x4582	; 0x804582 <_ZZ9serial_RxhE4buff+0x1>
     fb6:	20 97       	sbiw	r28, 0x00	; 0
     fb8:	09 f4       	brne	.+2      	; 0xfbc <_Z9serial_Rxh+0x2e>
     fba:	73 c1       	rjmp	.+742    	; 0x12a2 <_Z9serial_Rxh+0x314>
	{
		static uint8_t ignoreCount = 0;
		rx_char = toupper(rx_char);
     fbc:	81 2f       	mov	r24, r17
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 57 4a 	call	0x94ae	; 0x94ae <toupper>
     fc4:	ac 01       	movw	r20, r24
     fc6:	28 2f       	mov	r18, r24

		if(ignoreCount)
     fc8:	90 91 80 45 	lds	r25, 0x4580	; 0x804580 <_ZZ9serial_RxhE11ignoreCount>
     fcc:	99 23       	and	r25, r25
     fce:	21 f0       	breq	.+8      	; 0xfd8 <_Z9serial_Rxh+0x4a>
		{
			rx_char = '\0';
			ignoreCount--;
     fd0:	91 50       	subi	r25, 0x01	; 1
     fd2:	90 93 80 45 	sts	0x4580, r25	; 0x804580 <_ZZ9serial_RxhE11ignoreCount>
     fd6:	65 c1       	rjmp	.+714    	; 0x12a2 <_Z9serial_Rxh+0x314>
		}
		else if(rx_char == 0x1B)    /* Ignore ESC sequences */
     fd8:	4b 31       	cpi	r20, 0x1B	; 27
     fda:	21 f4       	brne	.+8      	; 0xfe4 <_Z9serial_Rxh+0x56>
			if(charIndex < SERIALBUS_MAX_MSG_FIELD_LENGTH)
			{
				rx_char = textBuff[charIndex];
			}

			ignoreCount = 2;        /* throw out the next two characters */
     fdc:	82 e0       	ldi	r24, 0x02	; 2
     fde:	80 93 80 45 	sts	0x4580, r24	; 0x804580 <_ZZ9serial_RxhE11ignoreCount>
     fe2:	5f c1       	rjmp	.+702    	; 0x12a2 <_Z9serial_Rxh+0x314>
		}
		else if(rx_char == 0x0D)    /* Handle carriage return */
     fe4:	4d 30       	cpi	r20, 0x0D	; 13
     fe6:	09 f0       	breq	.+2      	; 0xfea <_Z9serial_Rxh+0x5c>
     fe8:	3f c0       	rjmp	.+126    	; 0x1068 <_Z9serial_Rxh+0xda>
		{
			if(receiving_msg)
     fea:	80 91 4c 45 	lds	r24, 0x454C	; 0x80454c <_ZZ9serial_RxhE13receiving_msg>
     fee:	88 23       	and	r24, r24
     ff0:	31 f1       	breq	.+76     	; 0x103e <_Z9serial_Rxh+0xb0>
			{
				if(charIndex > 0)
     ff2:	e0 91 7f 45 	lds	r30, 0x457F	; 0x80457f <_ZZ9serial_RxhE9charIndex>
     ff6:	ee 23       	and	r30, r30
     ff8:	f9 f0       	breq	.+62     	; 0x1038 <_Z9serial_Rxh+0xaa>
				{
					buff->type = SERIALBUS_MSG_QUERY;
     ffa:	82 e0       	ldi	r24, 0x02	; 2
     ffc:	88 83       	st	Y, r24
					buff->id = (SBMessageID)msg_ID;
     ffe:	80 91 4a 45 	lds	r24, 0x454A	; 0x80454a <_ZZ9serial_RxhE6msg_ID>
    1002:	90 91 4b 45 	lds	r25, 0x454B	; 0x80454b <_ZZ9serial_RxhE6msg_ID+0x1>
    1006:	89 83       	std	Y+1, r24	; 0x01
    1008:	9a 83       	std	Y+2, r25	; 0x02

					if(field_index > 0) /* terminate the last field */
    100a:	80 91 49 45 	lds	r24, 0x4549	; 0x804549 <_ZZ9serial_RxhE11field_index>
    100e:	88 23       	and	r24, r24
    1010:	79 f0       	breq	.+30     	; 0x1030 <_Z9serial_Rxh+0xa2>
					{
						buff->fields[field_index - 1][field_len] = 0;
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	40 91 48 45 	lds	r20, 0x4548	; 0x804548 <_ZZ9serial_RxhE9field_len>
    101a:	54 e1       	ldi	r21, 0x14	; 20
    101c:	58 9f       	mul	r21, r24
    101e:	90 01       	movw	r18, r0
    1020:	59 9f       	mul	r21, r25
    1022:	30 0d       	add	r19, r0
    1024:	11 24       	eor	r1, r1
    1026:	c2 0f       	add	r28, r18
    1028:	d3 1f       	adc	r29, r19
    102a:	c4 0f       	add	r28, r20
    102c:	d1 1d       	adc	r29, r1
    102e:	1b 82       	std	Y+3, r1	; 0x03
					}

					textBuff[charIndex] = '\0'; /* terminate last-message buffer */
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	e3 5b       	subi	r30, 0xB3	; 179
    1034:	fa 4b       	sbci	r31, 0xBA	; 186
    1036:	10 82       	st	Z, r1
				}

				sb_send_NewLine();
    1038:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <sb_send_NewLine>
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <_Z9serial_Rxh+0xb8>
			}
			else
			{
				buff->id = SB_INVALID_MESSAGE; /* print help message */
    103e:	8f ef       	ldi	r24, 0xFF	; 255
    1040:	9f ef       	ldi	r25, 0xFF	; 255
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	9a 83       	std	Y+2, r25	; 0x02
			}

			charIndex = 0;
    1046:	10 92 7f 45 	sts	0x457F, r1	; 0x80457f <_ZZ9serial_RxhE9charIndex>
			field_len = 0;
    104a:	10 92 48 45 	sts	0x4548, r1	; 0x804548 <_ZZ9serial_RxhE9field_len>
			msg_ID = LB_MESSAGE_EMPTY;
    104e:	10 92 4a 45 	sts	0x454A, r1	; 0x80454a <_ZZ9serial_RxhE6msg_ID>
    1052:	10 92 4b 45 	sts	0x454B, r1	; 0x80454b <_ZZ9serial_RxhE6msg_ID+0x1>

			field_index = 0;
    1056:	10 92 49 45 	sts	0x4549, r1	; 0x804549 <_ZZ9serial_RxhE11field_index>
			buff = NULL;
    105a:	10 92 81 45 	sts	0x4581, r1	; 0x804581 <_ZZ9serial_RxhE4buff>
    105e:	10 92 82 45 	sts	0x4582, r1	; 0x804582 <_ZZ9serial_RxhE4buff+0x1>

			receiving_msg = false;
    1062:	10 92 4c 45 	sts	0x454C, r1	; 0x80454c <_ZZ9serial_RxhE13receiving_msg>
    1066:	1d c1       	rjmp	.+570    	; 0x12a2 <_Z9serial_Rxh+0x314>
		}
		else if(rx_char)
    1068:	44 23       	and	r20, r20
    106a:	09 f4       	brne	.+2      	; 0x106e <_Z9serial_Rxh+0xe0>
    106c:	1a c1       	rjmp	.+564    	; 0x12a2 <_Z9serial_Rxh+0x314>
		{
			textBuff[charIndex] = rx_char;  /* hold the characters for re-use */
    106e:	e0 91 7f 45 	lds	r30, 0x457F	; 0x80457f <_ZZ9serial_RxhE9charIndex>
    1072:	8e 2f       	mov	r24, r30
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	dc 01       	movw	r26, r24
    1078:	a3 5b       	subi	r26, 0xB3	; 179
    107a:	ba 4b       	sbci	r27, 0xBA	; 186
    107c:	4c 93       	st	X, r20

			if(charIndex)
    107e:	ee 23       	and	r30, r30
    1080:	09 f4       	brne	.+2      	; 0x1084 <_Z9serial_Rxh+0xf6>
    1082:	d7 c0       	rjmp	.+430    	; 0x1232 <_Z9serial_Rxh+0x2a4>
			{
				if(rx_char == 0x7F)         /* Handle backspace */
    1084:	4f 37       	cpi	r20, 0x7F	; 127
    1086:	09 f0       	breq	.+2      	; 0x108a <_Z9serial_Rxh+0xfc>
    1088:	5f c0       	rjmp	.+190    	; 0x1148 <_Z9serial_Rxh+0x1ba>
				{
					charIndex--;
    108a:	e1 50       	subi	r30, 0x01	; 1
    108c:	e0 93 7f 45 	sts	0x457F, r30	; 0x80457f <_ZZ9serial_RxhE9charIndex>
					if(field_index == 0)
    1090:	80 91 49 45 	lds	r24, 0x4549	; 0x804549 <_ZZ9serial_RxhE11field_index>
    1094:	81 11       	cpse	r24, r1
    1096:	13 c0       	rjmp	.+38     	; 0x10be <_Z9serial_Rxh+0x130>
					{
						msg_ID -= textBuff[charIndex];
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	e3 5b       	subi	r30, 0xB3	; 179
    109c:	fa 4b       	sbci	r31, 0xBA	; 186
    109e:	30 81       	ld	r19, Z
    10a0:	80 91 4a 45 	lds	r24, 0x454A	; 0x80454a <_ZZ9serial_RxhE6msg_ID>
    10a4:	90 91 4b 45 	lds	r25, 0x454B	; 0x80454b <_ZZ9serial_RxhE6msg_ID+0x1>
    10a8:	83 1b       	sub	r24, r19
    10aa:	91 09       	sbc	r25, r1
						msg_ID /= 10;
    10ac:	6a e0       	ldi	r22, 0x0A	; 10
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
    10b4:	60 93 4a 45 	sts	0x454A, r22	; 0x80454a <_ZZ9serial_RxhE6msg_ID>
    10b8:	70 93 4b 45 	sts	0x454B, r23	; 0x80454b <_ZZ9serial_RxhE6msg_ID+0x1>
    10bc:	39 c0       	rjmp	.+114    	; 0x1130 <_Z9serial_Rxh+0x1a2>
					}
					else if(field_len)
    10be:	90 91 48 45 	lds	r25, 0x4548	; 0x804548 <_ZZ9serial_RxhE9field_len>
    10c2:	99 23       	and	r25, r25
    10c4:	91 f0       	breq	.+36     	; 0x10ea <_Z9serial_Rxh+0x15c>
					{
						field_len--;
    10c6:	3f ef       	ldi	r19, 0xFF	; 255
    10c8:	39 0f       	add	r19, r25
    10ca:	30 93 48 45 	sts	0x4548, r19	; 0x804548 <_ZZ9serial_RxhE9field_len>
						buff->fields[field_index - 1][field_len] = '\0';
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	64 e1       	ldi	r22, 0x14	; 20
    10d4:	68 9f       	mul	r22, r24
    10d6:	a0 01       	movw	r20, r0
    10d8:	69 9f       	mul	r22, r25
    10da:	50 0d       	add	r21, r0
    10dc:	11 24       	eor	r1, r1
    10de:	c4 0f       	add	r28, r20
    10e0:	d5 1f       	adc	r29, r21
    10e2:	c3 0f       	add	r28, r19
    10e4:	d1 1d       	adc	r29, r1
    10e6:	1b 82       	std	Y+3, r1	; 0x03
    10e8:	23 c0       	rjmp	.+70     	; 0x1130 <_Z9serial_Rxh+0x1a2>
					}
					else if(textBuff[charIndex] == ' ')
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	e3 5b       	subi	r30, 0xB3	; 179
    10ee:	fa 4b       	sbci	r31, 0xBA	; 186
    10f0:	90 81       	ld	r25, Z
    10f2:	90 32       	cpi	r25, 0x20	; 32
    10f4:	a1 f4       	brne	.+40     	; 0x111e <_Z9serial_Rxh+0x190>
					{
						field_index--;
    10f6:	81 50       	subi	r24, 0x01	; 1
    10f8:	80 93 49 45 	sts	0x4549, r24	; 0x804549 <_ZZ9serial_RxhE11field_index>
						field_len = strlen(buff->fields[field_index]);
    10fc:	34 e1       	ldi	r19, 0x14	; 20
    10fe:	83 9f       	mul	r24, r19
    1100:	c0 01       	movw	r24, r0
    1102:	11 24       	eor	r1, r1
    1104:	03 96       	adiw	r24, 0x03	; 3
    1106:	c8 0f       	add	r28, r24
    1108:	d9 1f       	adc	r29, r25
    110a:	fe 01       	movw	r30, r28
    110c:	01 90       	ld	r0, Z+
    110e:	00 20       	and	r0, r0
    1110:	e9 f7       	brne	.-6      	; 0x110c <_Z9serial_Rxh+0x17e>
    1112:	31 97       	sbiw	r30, 0x01	; 1
    1114:	ec 1b       	sub	r30, r28
    1116:	fd 0b       	sbc	r31, r29
    1118:	e0 93 48 45 	sts	0x4548, r30	; 0x804548 <_ZZ9serial_RxhE9field_len>
    111c:	09 c0       	rjmp	.+18     	; 0x1130 <_Z9serial_Rxh+0x1a2>
					}
					else
					{
						buff->fields[field_index][0] = '\0';
    111e:	94 e1       	ldi	r25, 0x14	; 20
    1120:	89 9f       	mul	r24, r25
    1122:	c0 0d       	add	r28, r0
    1124:	d1 1d       	adc	r29, r1
    1126:	11 24       	eor	r1, r1
    1128:	1b 82       	std	Y+3, r1	; 0x03
						field_index--;
    112a:	81 50       	subi	r24, 0x01	; 1
    112c:	80 93 49 45 	sts	0x4549, r24	; 0x804549 <_ZZ9serial_RxhE11field_index>
					}

					textBuff[charIndex] = '\0'; /* replace deleted char with null */
    1130:	80 91 7f 45 	lds	r24, 0x457F	; 0x80457f <_ZZ9serial_RxhE9charIndex>
    1134:	e8 2f       	mov	r30, r24
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	e3 5b       	subi	r30, 0xB3	; 179
    113a:	fa 4b       	sbci	r31, 0xBA	; 186
    113c:	10 82       	st	Z, r1

					if(charIndex == 0)
    113e:	81 11       	cpse	r24, r1
    1140:	ab c0       	rjmp	.+342    	; 0x1298 <_Z9serial_Rxh+0x30a>
					{
						receiving_msg = false;
    1142:	10 92 4c 45 	sts	0x454C, r1	; 0x80454c <_ZZ9serial_RxhE13receiving_msg>
    1146:	a8 c0       	rjmp	.+336    	; 0x1298 <_Z9serial_Rxh+0x30a>
					}
				}
				else
				{
					if(rx_char == ' ')
    1148:	40 32       	cpi	r20, 0x20	; 32
    114a:	81 f5       	brne	.+96     	; 0x11ac <_Z9serial_Rxh+0x21e>
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
    114c:	fc 01       	movw	r30, r24
    114e:	e4 5b       	subi	r30, 0xB4	; 180
    1150:	fa 4b       	sbci	r31, 0xBA	; 186
    1152:	30 81       	ld	r19, Z
    1154:	30 32       	cpi	r19, 0x20	; 32
    1156:	09 f4       	brne	.+2      	; 0x115a <_Z9serial_Rxh+0x1cc>
    1158:	98 c0       	rjmp	.+304    	; 0x128a <_Z9serial_Rxh+0x2fc>
    115a:	30 91 49 45 	lds	r19, 0x4549	; 0x804549 <_ZZ9serial_RxhE11field_index>
    115e:	43 2f       	mov	r20, r19
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	ba 01       	movw	r22, r20
    1164:	6f 5f       	subi	r22, 0xFF	; 255
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	63 30       	cpi	r22, 0x03	; 3
    116a:	71 05       	cpc	r23, r1
    116c:	0c f0       	brlt	.+2      	; 0x1170 <_Z9serial_Rxh+0x1e2>
    116e:	8f c0       	rjmp	.+286    	; 0x128e <_Z9serial_Rxh+0x300>
						{
							rx_char = '\0';
						}
						else
						{
							if(field_index > 0)
    1170:	33 23       	and	r19, r19
    1172:	79 f0       	breq	.+30     	; 0x1192 <_Z9serial_Rxh+0x204>
							{
								buff->fields[field_index - 1][field_len] = '\0';
    1174:	41 50       	subi	r20, 0x01	; 1
    1176:	51 09       	sbc	r21, r1
    1178:	e0 91 48 45 	lds	r30, 0x4548	; 0x804548 <_ZZ9serial_RxhE9field_len>
    117c:	f4 e1       	ldi	r31, 0x14	; 20
    117e:	f4 9f       	mul	r31, r20
    1180:	b0 01       	movw	r22, r0
    1182:	f5 9f       	mul	r31, r21
    1184:	70 0d       	add	r23, r0
    1186:	11 24       	eor	r1, r1
    1188:	c6 0f       	add	r28, r22
    118a:	d7 1f       	adc	r29, r23
    118c:	ce 0f       	add	r28, r30
    118e:	d1 1d       	adc	r29, r1
    1190:	1b 82       	std	Y+3, r1	; 0x03
							}

							field_index++;
    1192:	3f 5f       	subi	r19, 0xFF	; 255
    1194:	30 93 49 45 	sts	0x4549, r19	; 0x804549 <_ZZ9serial_RxhE11field_index>
							field_len = 0;
    1198:	10 92 48 45 	sts	0x4548, r1	; 0x804548 <_ZZ9serial_RxhE9field_len>
							charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	81 33       	cpi	r24, 0x31	; 49
    11a0:	91 05       	cpc	r25, r1
    11a2:	0c f0       	brlt	.+2      	; 0x11a6 <_Z9serial_Rxh+0x218>
    11a4:	81 e3       	ldi	r24, 0x31	; 49
    11a6:	80 93 7f 45 	sts	0x457F, r24	; 0x80457f <_ZZ9serial_RxhE9charIndex>
    11aa:	76 c0       	rjmp	.+236    	; 0x1298 <_Z9serial_Rxh+0x30a>
						}
					}
					else if(field_len < LINKBUS_MAX_MSG_FIELD_LENGTH)
    11ac:	80 91 48 45 	lds	r24, 0x4548	; 0x804548 <_ZZ9serial_RxhE9field_len>
    11b0:	85 31       	cpi	r24, 0x15	; 21
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <_Z9serial_Rxh+0x228>
    11b4:	6e c0       	rjmp	.+220    	; 0x1292 <_Z9serial_Rxh+0x304>
					{
						if(field_index == 0)    /* message ID received */
    11b6:	60 91 49 45 	lds	r22, 0x4549	; 0x804549 <_ZZ9serial_RxhE11field_index>
    11ba:	61 11       	cpse	r22, r1
    11bc:	19 c0       	rjmp	.+50     	; 0x11f0 <_Z9serial_Rxh+0x262>
						{
							msg_ID = msg_ID * 10 + rx_char;
    11be:	60 91 4a 45 	lds	r22, 0x454A	; 0x80454a <_ZZ9serial_RxhE6msg_ID>
    11c2:	70 91 4b 45 	lds	r23, 0x454B	; 0x80454b <_ZZ9serial_RxhE6msg_ID+0x1>
    11c6:	fb 01       	movw	r30, r22
    11c8:	ee 0f       	add	r30, r30
    11ca:	ff 1f       	adc	r31, r31
    11cc:	66 0f       	add	r22, r22
    11ce:	77 1f       	adc	r23, r23
    11d0:	66 0f       	add	r22, r22
    11d2:	77 1f       	adc	r23, r23
    11d4:	66 0f       	add	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	6e 0f       	add	r22, r30
    11da:	7f 1f       	adc	r23, r31
    11dc:	64 0f       	add	r22, r20
    11de:	71 1d       	adc	r23, r1
    11e0:	60 93 4a 45 	sts	0x454A, r22	; 0x80454a <_ZZ9serial_RxhE6msg_ID>
    11e4:	70 93 4b 45 	sts	0x454B, r23	; 0x80454b <_ZZ9serial_RxhE6msg_ID+0x1>
							field_len++;
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	80 93 48 45 	sts	0x4548, r24	; 0x804548 <_ZZ9serial_RxhE9field_len>
    11ee:	16 c0       	rjmp	.+44     	; 0x121c <_Z9serial_Rxh+0x28e>
						}
						else
						{
							buff->fields[field_index - 1][field_len++] = rx_char;
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	61 50       	subi	r22, 0x01	; 1
    11f4:	71 09       	sbc	r23, r1
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	98 0f       	add	r25, r24
    11fa:	90 93 48 45 	sts	0x4548, r25	; 0x804548 <_ZZ9serial_RxhE9field_len>
    11fe:	34 e1       	ldi	r19, 0x14	; 20
    1200:	36 9f       	mul	r19, r22
    1202:	f0 01       	movw	r30, r0
    1204:	37 9f       	mul	r19, r23
    1206:	f0 0d       	add	r31, r0
    1208:	11 24       	eor	r1, r1
    120a:	ce 0f       	add	r28, r30
    120c:	df 1f       	adc	r29, r31
    120e:	fe 01       	movw	r30, r28
    1210:	e8 0f       	add	r30, r24
    1212:	f1 1d       	adc	r31, r1
    1214:	43 83       	std	Z+3, r20	; 0x03
							buff->fields[field_index - 1][field_len] = '\0';
    1216:	c9 0f       	add	r28, r25
    1218:	d1 1d       	adc	r29, r1
    121a:	1b 82       	std	Y+3, r1	; 0x03
						}

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
    121c:	80 91 7f 45 	lds	r24, 0x457F	; 0x80457f <_ZZ9serial_RxhE9charIndex>
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	81 33       	cpi	r24, 0x31	; 49
    1226:	91 05       	cpc	r25, r1
    1228:	0c f0       	brlt	.+2      	; 0x122c <_Z9serial_Rxh+0x29e>
    122a:	81 e3       	ldi	r24, 0x31	; 49
    122c:	80 93 7f 45 	sts	0x457F, r24	; 0x80457f <_ZZ9serial_RxhE9charIndex>
    1230:	33 c0       	rjmp	.+102    	; 0x1298 <_Z9serial_Rxh+0x30a>
					}
				}
			}
			else
			{
				if(rx_char == 0x7F) /* Handle Backspace */
    1232:	4f 37       	cpi	r20, 0x7F	; 127
    1234:	69 f4       	brne	.+26     	; 0x1250 <_Z9serial_Rxh+0x2c2>
				{
					if(msg_ID <= 0)
    1236:	80 91 4a 45 	lds	r24, 0x454A	; 0x80454a <_ZZ9serial_RxhE6msg_ID>
    123a:	90 91 4b 45 	lds	r25, 0x454B	; 0x80454b <_ZZ9serial_RxhE6msg_ID+0x1>
    123e:	18 16       	cp	r1, r24
    1240:	19 06       	cpc	r1, r25
    1242:	0c f0       	brlt	.+2      	; 0x1246 <_Z9serial_Rxh+0x2b8>
					{
						rx_char = '\0';
    1244:	20 e0       	ldi	r18, 0x00	; 0
					}

					msg_ID = 0;
    1246:	10 92 4a 45 	sts	0x454A, r1	; 0x80454a <_ZZ9serial_RxhE6msg_ID>
    124a:	10 92 4b 45 	sts	0x454B, r1	; 0x80454b <_ZZ9serial_RxhE6msg_ID+0x1>
    124e:	24 c0       	rjmp	.+72     	; 0x1298 <_Z9serial_Rxh+0x30a>
				}
				else if(rx_char == ' ') /* Handle Space */
    1250:	40 32       	cpi	r20, 0x20	; 32
    1252:	09 f1       	breq	.+66     	; 0x1296 <_Z9serial_Rxh+0x308>
					rx_char = '\0';
				}
				else                    /* start of new message */
				{
					uint8_t i;
					field_index = 0;
    1254:	10 92 49 45 	sts	0x4549, r1	; 0x804549 <_ZZ9serial_RxhE11field_index>
					msg_ID = rx_char;
    1258:	55 27       	eor	r21, r21
    125a:	40 93 4a 45 	sts	0x454A, r20	; 0x80454a <_ZZ9serial_RxhE6msg_ID>
    125e:	50 93 4b 45 	sts	0x454B, r21	; 0x80454b <_ZZ9serial_RxhE6msg_ID+0x1>

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	83 30       	cpi	r24, 0x03	; 3
    1266:	50 f4       	brcc	.+20     	; 0x127c <_Z9serial_Rxh+0x2ee>
					{
						buff->fields[i][0] = '\0';
    1268:	de 01       	movw	r26, r28
    126a:	34 e1       	ldi	r19, 0x14	; 20
    126c:	83 9f       	mul	r24, r19
    126e:	a0 0d       	add	r26, r0
    1270:	b1 1d       	adc	r27, r1
    1272:	11 24       	eor	r1, r1
    1274:	13 96       	adiw	r26, 0x03	; 3
    1276:	1c 92       	st	X, r1
					uint8_t i;
					field_index = 0;
					msg_ID = rx_char;

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
    1278:	8f 5f       	subi	r24, 0xFF	; 255
    127a:	f4 cf       	rjmp	.-24     	; 0x1264 <_Z9serial_Rxh+0x2d6>
					{
						buff->fields[i][0] = '\0';
					}

					receiving_msg = true;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	80 93 4c 45 	sts	0x454C, r24	; 0x80454c <_ZZ9serial_RxhE13receiving_msg>
					charIndex++;
    1282:	ef 5f       	subi	r30, 0xFF	; 255
    1284:	e0 93 7f 45 	sts	0x457F, r30	; 0x80457f <_ZZ9serial_RxhE9charIndex>
    1288:	07 c0       	rjmp	.+14     	; 0x1298 <_Z9serial_Rxh+0x30a>
				{
					if(rx_char == ' ')
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
						{
							rx_char = '\0';
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	05 c0       	rjmp	.+10     	; 0x1298 <_Z9serial_Rxh+0x30a>
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	03 c0       	rjmp	.+6      	; 0x1298 <_Z9serial_Rxh+0x30a>

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
					}
					else
					{
						rx_char = '\0';
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	01 c0       	rjmp	.+2      	; 0x1298 <_Z9serial_Rxh+0x30a>

					msg_ID = 0;
				}
				else if(rx_char == ' ') /* Handle Space */
				{
					rx_char = '\0';
    1296:	20 e0       	ldi	r18, 0x00	; 0
					receiving_msg = true;
					charIndex++;
				}
			}

			if(rx_char)
    1298:	22 23       	and	r18, r18
    129a:	19 f0       	breq	.+6      	; 0x12a2 <_Z9serial_Rxh+0x314>
			{
				sb_echo_char(rx_char);
    129c:	82 2f       	mov	r24, r18
    129e:	0e 94 fc 3a 	call	0x75f8	; 0x75f8 <sb_echo_char>
			}
		}
	}	
}
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	08 95       	ret

000012aa <__vector_20>:

/**

*/
ISR(USART0_DRE_vect)
{
    12aa:	1f 92       	push	r1
    12ac:	0f 92       	push	r0
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	0f 92       	push	r0
    12b2:	11 24       	eor	r1, r1
    12b4:	0b b6       	in	r0, 0x3b	; 59
    12b6:	0f 92       	push	r0
    12b8:	2f 93       	push	r18
    12ba:	3f 93       	push	r19
    12bc:	4f 93       	push	r20
    12be:	5f 93       	push	r21
    12c0:	6f 93       	push	r22
    12c2:	7f 93       	push	r23
    12c4:	8f 93       	push	r24
    12c6:	9f 93       	push	r25
    12c8:	af 93       	push	r26
    12ca:	bf 93       	push	r27
    12cc:	ef 93       	push	r30
    12ce:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_0)
    12d0:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    12d4:	81 11       	cpse	r24, r1
    12d6:	2b c0       	rjmp	.+86     	; 0x132e <__vector_20+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    12d8:	80 91 46 45 	lds	r24, 0x4546	; 0x804546 <_ZZ11__vector_20E4buff>
    12dc:	90 91 47 45 	lds	r25, 0x4547	; 0x804547 <_ZZ11__vector_20E4buff+0x1>
    12e0:	89 2b       	or	r24, r25
    12e2:	31 f4       	brne	.+12     	; 0x12f0 <__vector_20+0x46>
		{
			buff = nextFullLBTxBuffer();
    12e4:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <_Z18nextFullLBTxBufferv>
    12e8:	80 93 46 45 	sts	0x4546, r24	; 0x804546 <_ZZ11__vector_20E4buff>
    12ec:	90 93 47 45 	sts	0x4547, r25	; 0x804547 <_ZZ11__vector_20E4buff+0x1>
		}

		if((*buff)[charIndex])
    12f0:	e0 91 46 45 	lds	r30, 0x4546	; 0x804546 <_ZZ11__vector_20E4buff>
    12f4:	f0 91 47 45 	lds	r31, 0x4547	; 0x804547 <_ZZ11__vector_20E4buff+0x1>
    12f8:	80 91 45 45 	lds	r24, 0x4545	; 0x804545 <_ZZ11__vector_20E9charIndex>
    12fc:	df 01       	movw	r26, r30
    12fe:	a8 0f       	add	r26, r24
    1300:	b1 1d       	adc	r27, r1
    1302:	9c 91       	ld	r25, X
    1304:	99 23       	and	r25, r25
    1306:	31 f0       	breq	.+12     	; 0x1314 <__vector_20+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
    1308:	8f 5f       	subi	r24, 0xFF	; 255
    130a:	80 93 45 45 	sts	0x4545, r24	; 0x804545 <_ZZ11__vector_20E9charIndex>
    130e:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
    1312:	0d c0       	rjmp	.+26     	; 0x132e <__vector_20+0x84>
		}
		else
		{
			charIndex = 0;
    1314:	10 92 45 45 	sts	0x4545, r1	; 0x804545 <_ZZ11__vector_20E9charIndex>
			(*buff)[0] = '\0';
    1318:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    131a:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <_Z18nextFullLBTxBufferv>
    131e:	80 93 46 45 	sts	0x4546, r24	; 0x804546 <_ZZ11__vector_20E4buff>
    1322:	90 93 47 45 	sts	0x4547, r25	; 0x804547 <_ZZ11__vector_20E4buff+0x1>
			if(!buff)
    1326:	89 2b       	or	r24, r25
    1328:	11 f4       	brne	.+4      	; 0x132e <__vector_20+0x84>
			{
				linkbus_end_tx();
    132a:	0e 94 04 36 	call	0x6c08	; 0x6c08 <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_0)
    132e:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    1332:	81 11       	cpse	r24, r1
    1334:	2b c0       	rjmp	.+86     	; 0x138c <__vector_20+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    1336:	80 91 43 45 	lds	r24, 0x4543	; 0x804543 <_ZZ11__vector_20E4buff_0>
    133a:	90 91 44 45 	lds	r25, 0x4544	; 0x804544 <_ZZ11__vector_20E4buff_0+0x1>
    133e:	89 2b       	or	r24, r25
    1340:	31 f4       	brne	.+12     	; 0x134e <__vector_20+0xa4>
		{
			buff = nextFullSBTxBuffer();
    1342:	0e 94 9c 39 	call	0x7338	; 0x7338 <nextFullSBTxBuffer>
    1346:	80 93 43 45 	sts	0x4543, r24	; 0x804543 <_ZZ11__vector_20E4buff_0>
    134a:	90 93 44 45 	sts	0x4544, r25	; 0x804544 <_ZZ11__vector_20E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    134e:	e0 91 43 45 	lds	r30, 0x4543	; 0x804543 <_ZZ11__vector_20E4buff_0>
    1352:	f0 91 44 45 	lds	r31, 0x4544	; 0x804544 <_ZZ11__vector_20E4buff_0+0x1>
    1356:	80 91 42 45 	lds	r24, 0x4542	; 0x804542 <_ZZ11__vector_20E9charIndex_0>
    135a:	df 01       	movw	r26, r30
    135c:	a8 0f       	add	r26, r24
    135e:	b1 1d       	adc	r27, r1
    1360:	9c 91       	ld	r25, X
    1362:	99 23       	and	r25, r25
    1364:	31 f0       	breq	.+12     	; 0x1372 <__vector_20+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
    1366:	8f 5f       	subi	r24, 0xFF	; 255
    1368:	80 93 42 45 	sts	0x4542, r24	; 0x804542 <_ZZ11__vector_20E9charIndex_0>
    136c:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
    1370:	0d c0       	rjmp	.+26     	; 0x138c <__vector_20+0xe2>
		}
		else
		{
			charIndex = 0;
    1372:	10 92 42 45 	sts	0x4542, r1	; 0x804542 <_ZZ11__vector_20E9charIndex_0>
			(*buff)[0] = '\0';
    1376:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    1378:	0e 94 9c 39 	call	0x7338	; 0x7338 <nextFullSBTxBuffer>
    137c:	80 93 43 45 	sts	0x4543, r24	; 0x804543 <_ZZ11__vector_20E4buff_0>
    1380:	90 93 44 45 	sts	0x4544, r25	; 0x804544 <_ZZ11__vector_20E4buff_0+0x1>
			if(!buff)
    1384:	89 2b       	or	r24, r25
    1386:	11 f4       	brne	.+4      	; 0x138c <__vector_20+0xe2>
			{
				serialbus_end_tx();
    1388:	0e 94 65 3a 	call	0x74ca	; 0x74ca <serialbus_end_tx>
			}
		}
	}
}
    138c:	ff 91       	pop	r31
    138e:	ef 91       	pop	r30
    1390:	bf 91       	pop	r27
    1392:	af 91       	pop	r26
    1394:	9f 91       	pop	r25
    1396:	8f 91       	pop	r24
    1398:	7f 91       	pop	r23
    139a:	6f 91       	pop	r22
    139c:	5f 91       	pop	r21
    139e:	4f 91       	pop	r20
    13a0:	3f 91       	pop	r19
    13a2:	2f 91       	pop	r18
    13a4:	0f 90       	pop	r0
    13a6:	0b be       	out	0x3b, r0	; 59
    13a8:	0f 90       	pop	r0
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	0f 90       	pop	r0
    13ae:	1f 90       	pop	r1
    13b0:	18 95       	reti

000013b2 <__vector_56>:

/**

*/
ISR(USART4_DRE_vect)
{
    13b2:	1f 92       	push	r1
    13b4:	0f 92       	push	r0
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	0f 92       	push	r0
    13ba:	11 24       	eor	r1, r1
    13bc:	0b b6       	in	r0, 0x3b	; 59
    13be:	0f 92       	push	r0
    13c0:	2f 93       	push	r18
    13c2:	3f 93       	push	r19
    13c4:	4f 93       	push	r20
    13c6:	5f 93       	push	r21
    13c8:	6f 93       	push	r22
    13ca:	7f 93       	push	r23
    13cc:	8f 93       	push	r24
    13ce:	9f 93       	push	r25
    13d0:	af 93       	push	r26
    13d2:	bf 93       	push	r27
    13d4:	ef 93       	push	r30
    13d6:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_4)
    13d8:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    13dc:	84 30       	cpi	r24, 0x04	; 4
    13de:	59 f5       	brne	.+86     	; 0x1436 <__vector_56+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    13e0:	80 91 40 45 	lds	r24, 0x4540	; 0x804540 <_ZZ11__vector_56E4buff>
    13e4:	90 91 41 45 	lds	r25, 0x4541	; 0x804541 <_ZZ11__vector_56E4buff+0x1>
    13e8:	89 2b       	or	r24, r25
    13ea:	31 f4       	brne	.+12     	; 0x13f8 <__vector_56+0x46>
		{
			buff = nextFullLBTxBuffer();
    13ec:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <_Z18nextFullLBTxBufferv>
    13f0:	80 93 40 45 	sts	0x4540, r24	; 0x804540 <_ZZ11__vector_56E4buff>
    13f4:	90 93 41 45 	sts	0x4541, r25	; 0x804541 <_ZZ11__vector_56E4buff+0x1>
		}

		if((*buff)[charIndex])
    13f8:	e0 91 40 45 	lds	r30, 0x4540	; 0x804540 <_ZZ11__vector_56E4buff>
    13fc:	f0 91 41 45 	lds	r31, 0x4541	; 0x804541 <_ZZ11__vector_56E4buff+0x1>
    1400:	80 91 3f 45 	lds	r24, 0x453F	; 0x80453f <_ZZ11__vector_56E9charIndex>
    1404:	df 01       	movw	r26, r30
    1406:	a8 0f       	add	r26, r24
    1408:	b1 1d       	adc	r27, r1
    140a:	9c 91       	ld	r25, X
    140c:	99 23       	and	r25, r25
    140e:	31 f0       	breq	.+12     	; 0x141c <__vector_56+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
    1410:	8f 5f       	subi	r24, 0xFF	; 255
    1412:	80 93 3f 45 	sts	0x453F, r24	; 0x80453f <_ZZ11__vector_56E9charIndex>
    1416:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
    141a:	0d c0       	rjmp	.+26     	; 0x1436 <__vector_56+0x84>
		}
		else
		{
			charIndex = 0;
    141c:	10 92 3f 45 	sts	0x453F, r1	; 0x80453f <_ZZ11__vector_56E9charIndex>
			(*buff)[0] = '\0';
    1420:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    1422:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <_Z18nextFullLBTxBufferv>
    1426:	80 93 40 45 	sts	0x4540, r24	; 0x804540 <_ZZ11__vector_56E4buff>
    142a:	90 93 41 45 	sts	0x4541, r25	; 0x804541 <_ZZ11__vector_56E4buff+0x1>
			if(!buff)
    142e:	89 2b       	or	r24, r25
    1430:	11 f4       	brne	.+4      	; 0x1436 <__vector_56+0x84>
			{
				linkbus_end_tx();
    1432:	0e 94 04 36 	call	0x6c08	; 0x6c08 <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_4)
    1436:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    143a:	84 30       	cpi	r24, 0x04	; 4
    143c:	59 f5       	brne	.+86     	; 0x1494 <__vector_56+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    143e:	80 91 3d 45 	lds	r24, 0x453D	; 0x80453d <_ZZ11__vector_56E4buff_0>
    1442:	90 91 3e 45 	lds	r25, 0x453E	; 0x80453e <_ZZ11__vector_56E4buff_0+0x1>
    1446:	89 2b       	or	r24, r25
    1448:	31 f4       	brne	.+12     	; 0x1456 <__vector_56+0xa4>
		{
			buff = nextFullSBTxBuffer();
    144a:	0e 94 9c 39 	call	0x7338	; 0x7338 <nextFullSBTxBuffer>
    144e:	80 93 3d 45 	sts	0x453D, r24	; 0x80453d <_ZZ11__vector_56E4buff_0>
    1452:	90 93 3e 45 	sts	0x453E, r25	; 0x80453e <_ZZ11__vector_56E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    1456:	e0 91 3d 45 	lds	r30, 0x453D	; 0x80453d <_ZZ11__vector_56E4buff_0>
    145a:	f0 91 3e 45 	lds	r31, 0x453E	; 0x80453e <_ZZ11__vector_56E4buff_0+0x1>
    145e:	80 91 3c 45 	lds	r24, 0x453C	; 0x80453c <_ZZ11__vector_56E9charIndex_0>
    1462:	df 01       	movw	r26, r30
    1464:	a8 0f       	add	r26, r24
    1466:	b1 1d       	adc	r27, r1
    1468:	9c 91       	ld	r25, X
    146a:	99 23       	and	r25, r25
    146c:	31 f0       	breq	.+12     	; 0x147a <__vector_56+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
    146e:	8f 5f       	subi	r24, 0xFF	; 255
    1470:	80 93 3c 45 	sts	0x453C, r24	; 0x80453c <_ZZ11__vector_56E9charIndex_0>
    1474:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
    1478:	0d c0       	rjmp	.+26     	; 0x1494 <__vector_56+0xe2>
		}
		else
		{
			charIndex = 0;
    147a:	10 92 3c 45 	sts	0x453C, r1	; 0x80453c <_ZZ11__vector_56E9charIndex_0>
			(*buff)[0] = '\0';
    147e:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    1480:	0e 94 9c 39 	call	0x7338	; 0x7338 <nextFullSBTxBuffer>
    1484:	80 93 3d 45 	sts	0x453D, r24	; 0x80453d <_ZZ11__vector_56E4buff_0>
    1488:	90 93 3e 45 	sts	0x453E, r25	; 0x80453e <_ZZ11__vector_56E4buff_0+0x1>
			if(!buff)
    148c:	89 2b       	or	r24, r25
    148e:	11 f4       	brne	.+4      	; 0x1494 <__vector_56+0xe2>
			{
				serialbus_end_tx();
    1490:	0e 94 65 3a 	call	0x74ca	; 0x74ca <serialbus_end_tx>
			}
		}
	}
}
    1494:	ff 91       	pop	r31
    1496:	ef 91       	pop	r30
    1498:	bf 91       	pop	r27
    149a:	af 91       	pop	r26
    149c:	9f 91       	pop	r25
    149e:	8f 91       	pop	r24
    14a0:	7f 91       	pop	r23
    14a2:	6f 91       	pop	r22
    14a4:	5f 91       	pop	r21
    14a6:	4f 91       	pop	r20
    14a8:	3f 91       	pop	r19
    14aa:	2f 91       	pop	r18
    14ac:	0f 90       	pop	r0
    14ae:	0b be       	out	0x3b, r0	; 59
    14b0:	0f 90       	pop	r0
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	0f 90       	pop	r0
    14b6:	1f 90       	pop	r1
    14b8:	18 95       	reti

000014ba <_Z10linkbus_Rxh>:
		serial_Rx(rx_char);
	}
}

void linkbus_Rx(uint8_t rx_char)
{
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static uint32_t tempMsg_ID = 0;
	static bool receiving_msg = false;

	if(!buff)
    14c4:	80 91 3a 45 	lds	r24, 0x453A	; 0x80453a <_ZZ10linkbus_RxhE4buff>
    14c8:	90 91 3b 45 	lds	r25, 0x453B	; 0x80453b <_ZZ10linkbus_RxhE4buff+0x1>
    14cc:	89 2b       	or	r24, r25
    14ce:	31 f4       	brne	.+12     	; 0x14dc <_Z10linkbus_Rxh+0x22>
	{
		buff = nextEmptyLBRxBuffer();
    14d0:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <_Z19nextEmptyLBRxBufferv>
    14d4:	80 93 3a 45 	sts	0x453A, r24	; 0x80453a <_ZZ10linkbus_RxhE4buff>
    14d8:	90 93 3b 45 	sts	0x453B, r25	; 0x80453b <_ZZ10linkbus_RxhE4buff+0x1>
	}

	if(buff)
    14dc:	c0 91 3a 45 	lds	r28, 0x453A	; 0x80453a <_ZZ10linkbus_RxhE4buff>
    14e0:	d0 91 3b 45 	lds	r29, 0x453B	; 0x80453b <_ZZ10linkbus_RxhE4buff+0x1>
    14e4:	20 97       	sbiw	r28, 0x00	; 0
    14e6:	09 f4       	brne	.+2      	; 0x14ea <_Z10linkbus_Rxh+0x30>
    14e8:	e3 c0       	rjmp	.+454    	; 0x16b0 <_Z10linkbus_Rxh+0x1f6>
	{
		rx_char = toupper(rx_char);
    14ea:	81 2f       	mov	r24, r17
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 57 4a 	call	0x94ae	; 0x94ae <toupper>

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
    14f2:	84 32       	cpi	r24, 0x24	; 36
    14f4:	11 f0       	breq	.+4      	; 0x14fa <_Z10linkbus_Rxh+0x40>
    14f6:	81 32       	cpi	r24, 0x21	; 33
    14f8:	49 f5       	brne	.+82     	; 0x154c <_Z10linkbus_Rxh+0x92>
		{
			charIndex = 0;
    14fa:	10 92 39 45 	sts	0x4539, r1	; 0x804539 <_ZZ10linkbus_RxhE9charIndex>
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
    14fe:	81 32       	cpi	r24, 0x21	; 33
    1500:	11 f4       	brne	.+4      	; 0x1506 <_Z10linkbus_Rxh+0x4c>
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <_Z10linkbus_Rxh+0x4e>
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	88 83       	st	Y, r24
			field_len = 0;
    150a:	10 92 38 45 	sts	0x4538, r1	; 0x804538 <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
    150e:	10 92 34 45 	sts	0x4534, r1	; 0x804534 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1512:	10 92 35 45 	sts	0x4535, r1	; 0x804535 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1516:	10 92 36 45 	sts	0x4536, r1	; 0x804536 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    151a:	10 92 37 45 	sts	0x4537, r1	; 0x804537 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			receiving_msg = true;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	80 93 33 45 	sts	0x4533, r24	; 0x804533 <_ZZ10linkbus_RxhE13receiving_msg>

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
    1524:	10 92 32 45 	sts	0x4532, r1	; 0x804532 <_ZZ10linkbus_RxhE11field_index>
    1528:	80 91 32 45 	lds	r24, 0x4532	; 0x804532 <_ZZ10linkbus_RxhE11field_index>
    152c:	83 30       	cpi	r24, 0x03	; 3
    152e:	58 f4       	brcc	.+22     	; 0x1546 <_Z10linkbus_Rxh+0x8c>
			{
				buff->fields[field_index][0] = '\0';
    1530:	fe 01       	movw	r30, r28
    1532:	05 e1       	ldi	r16, 0x15	; 21
    1534:	80 9f       	mul	r24, r16
    1536:	e0 0d       	add	r30, r0
    1538:	f1 1d       	adc	r31, r1
    153a:	11 24       	eor	r1, r1
    153c:	13 82       	std	Z+3, r1	; 0x03
			field_len = 0;
			tempMsg_ID = 0;
			receiving_msg = true;

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
    153e:	8f 5f       	subi	r24, 0xFF	; 255
    1540:	80 93 32 45 	sts	0x4532, r24	; 0x804532 <_ZZ10linkbus_RxhE11field_index>
    1544:	f1 cf       	rjmp	.-30     	; 0x1528 <_Z10linkbus_Rxh+0x6e>
			{
				buff->fields[field_index][0] = '\0';
			}

			field_index = 0;
    1546:	10 92 32 45 	sts	0x4532, r1	; 0x804532 <_ZZ10linkbus_RxhE11field_index>
    154a:	a7 c0       	rjmp	.+334    	; 0x169a <_Z10linkbus_Rxh+0x1e0>
		}
		else if(receiving_msg)
    154c:	90 91 33 45 	lds	r25, 0x4533	; 0x804533 <_ZZ10linkbus_RxhE13receiving_msg>
    1550:	99 23       	and	r25, r25
    1552:	09 f4       	brne	.+2      	; 0x1556 <_Z10linkbus_Rxh+0x9c>
    1554:	8b c0       	rjmp	.+278    	; 0x166c <_Z10linkbus_Rxh+0x1b2>
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
    1556:	8c 32       	cpi	r24, 0x2C	; 44
    1558:	29 f0       	breq	.+10     	; 0x1564 <_Z10linkbus_Rxh+0xaa>
    155a:	8b 33       	cpi	r24, 0x3B	; 59
    155c:	19 f0       	breq	.+6      	; 0x1564 <_Z10linkbus_Rxh+0xaa>
    155e:	8f 33       	cpi	r24, 0x3F	; 63
    1560:	09 f0       	breq	.+2      	; 0x1564 <_Z10linkbus_Rxh+0xaa>
    1562:	42 c0       	rjmp	.+132    	; 0x15e8 <_Z10linkbus_Rxh+0x12e>
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
    1564:	90 91 32 45 	lds	r25, 0x4532	; 0x804532 <_ZZ10linkbus_RxhE11field_index>
    1568:	99 23       	and	r25, r25
    156a:	89 f0       	breq	.+34     	; 0x158e <_Z10linkbus_Rxh+0xd4>
				{
					buff->fields[field_index - 1][field_len] = 0;
    156c:	29 2f       	mov	r18, r25
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	21 50       	subi	r18, 0x01	; 1
    1572:	31 09       	sbc	r19, r1
    1574:	40 91 38 45 	lds	r20, 0x4538	; 0x804538 <_ZZ10linkbus_RxhE9field_len>
    1578:	55 e1       	ldi	r21, 0x15	; 21
    157a:	52 9f       	mul	r21, r18
    157c:	f0 01       	movw	r30, r0
    157e:	53 9f       	mul	r21, r19
    1580:	f0 0d       	add	r31, r0
    1582:	11 24       	eor	r1, r1
    1584:	ec 0f       	add	r30, r28
    1586:	fd 1f       	adc	r31, r29
    1588:	e4 0f       	add	r30, r20
    158a:	f1 1d       	adc	r31, r1
    158c:	13 82       	std	Z+3, r1	; 0x03
				}

				field_index++;
    158e:	9f 5f       	subi	r25, 0xFF	; 255
    1590:	90 93 32 45 	sts	0x4532, r25	; 0x804532 <_ZZ10linkbus_RxhE11field_index>
				field_len = 0;
    1594:	10 92 38 45 	sts	0x4538, r1	; 0x804538 <_ZZ10linkbus_RxhE9field_len>

				if(rx_char == ';')
    1598:	8b 33       	cpi	r24, 0x3B	; 59
    159a:	69 f4       	brne	.+26     	; 0x15b6 <_Z10linkbus_Rxh+0xfc>
				{
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
    159c:	80 91 39 45 	lds	r24, 0x4539	; 0x804539 <_ZZ10linkbus_RxhE9charIndex>
    15a0:	84 30       	cpi	r24, 0x04	; 4
    15a2:	30 f0       	brcs	.+12     	; 0x15b0 <_Z10linkbus_Rxh+0xf6>
					{
						buff->id = (LBMessageID)tempMsg_ID;
    15a4:	80 91 34 45 	lds	r24, 0x4534	; 0x804534 <_ZZ10linkbus_RxhE10tempMsg_ID>
    15a8:	90 91 35 45 	lds	r25, 0x4535	; 0x804535 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = false;
    15b0:	10 92 33 45 	sts	0x4533, r1	; 0x804533 <_ZZ10linkbus_RxhE13receiving_msg>
    15b4:	10 c0       	rjmp	.+32     	; 0x15d6 <_Z10linkbus_Rxh+0x11c>
				}
				else if(rx_char == '?')
    15b6:	8f 33       	cpi	r24, 0x3F	; 63
    15b8:	71 f4       	brne	.+28     	; 0x15d6 <_Z10linkbus_Rxh+0x11c>
				{
					buff->type = LINKBUS_MSG_QUERY;
    15ba:	82 e0       	ldi	r24, 0x02	; 2
    15bc:	88 83       	st	Y, r24
					if(charIndex >= LINKBUS_MIN_MSG_LENGTH)
    15be:	80 91 39 45 	lds	r24, 0x4539	; 0x804539 <_ZZ10linkbus_RxhE9charIndex>
    15c2:	83 30       	cpi	r24, 0x03	; 3
    15c4:	30 f0       	brcs	.+12     	; 0x15d2 <_Z10linkbus_Rxh+0x118>
					{
						buff->id = (LBMessageID)tempMsg_ID;
    15c6:	80 91 34 45 	lds	r24, 0x4534	; 0x804534 <_ZZ10linkbus_RxhE10tempMsg_ID>
    15ca:	90 91 35 45 	lds	r25, 0x4535	; 0x804535 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    15ce:	89 83       	std	Y+1, r24	; 0x01
    15d0:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = false;
    15d2:	10 92 33 45 	sts	0x4533, r1	; 0x804533 <_ZZ10linkbus_RxhE13receiving_msg>
				}

				if(!receiving_msg)
    15d6:	80 91 33 45 	lds	r24, 0x4533	; 0x804533 <_ZZ10linkbus_RxhE13receiving_msg>
    15da:	81 11       	cpse	r24, r1
    15dc:	5e c0       	rjmp	.+188    	; 0x169a <_Z10linkbus_Rxh+0x1e0>
				{
					buff = 0;
    15de:	10 92 3a 45 	sts	0x453A, r1	; 0x80453a <_ZZ10linkbus_RxhE4buff>
    15e2:	10 92 3b 45 	sts	0x453B, r1	; 0x80453b <_ZZ10linkbus_RxhE4buff+0x1>
    15e6:	59 c0       	rjmp	.+178    	; 0x169a <_Z10linkbus_Rxh+0x1e0>
				}
			}
			else
			{
				if(field_index == 0)    /* message ID received */
    15e8:	20 91 32 45 	lds	r18, 0x4532	; 0x804532 <_ZZ10linkbus_RxhE11field_index>
    15ec:	21 11       	cpse	r18, r1
    15ee:	29 c0       	rjmp	.+82     	; 0x1642 <_Z10linkbus_Rxh+0x188>
				{
					tempMsg_ID = tempMsg_ID * 10 + rx_char;
    15f0:	40 91 34 45 	lds	r20, 0x4534	; 0x804534 <_ZZ10linkbus_RxhE10tempMsg_ID>
    15f4:	50 91 35 45 	lds	r21, 0x4535	; 0x804535 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    15f8:	60 91 36 45 	lds	r22, 0x4536	; 0x804536 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    15fc:	70 91 37 45 	lds	r23, 0x4537	; 0x804537 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
    1600:	44 0f       	add	r20, r20
    1602:	55 1f       	adc	r21, r21
    1604:	66 1f       	adc	r22, r22
    1606:	77 1f       	adc	r23, r23
    1608:	8a 01       	movw	r16, r20
    160a:	9b 01       	movw	r18, r22
    160c:	00 0f       	add	r16, r16
    160e:	11 1f       	adc	r17, r17
    1610:	22 1f       	adc	r18, r18
    1612:	33 1f       	adc	r19, r19
    1614:	00 0f       	add	r16, r16
    1616:	11 1f       	adc	r17, r17
    1618:	22 1f       	adc	r18, r18
    161a:	33 1f       	adc	r19, r19
    161c:	40 0f       	add	r20, r16
    161e:	51 1f       	adc	r21, r17
    1620:	62 1f       	adc	r22, r18
    1622:	73 1f       	adc	r23, r19
    1624:	8a 01       	movw	r16, r20
    1626:	9b 01       	movw	r18, r22
    1628:	08 0f       	add	r16, r24
    162a:	11 1d       	adc	r17, r1
    162c:	21 1d       	adc	r18, r1
    162e:	31 1d       	adc	r19, r1
    1630:	00 93 34 45 	sts	0x4534, r16	; 0x804534 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1634:	10 93 35 45 	sts	0x4535, r17	; 0x804535 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1638:	20 93 36 45 	sts	0x4536, r18	; 0x804536 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    163c:	30 93 37 45 	sts	0x4537, r19	; 0x804537 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
    1640:	2c c0       	rjmp	.+88     	; 0x169a <_Z10linkbus_Rxh+0x1e0>
				}
				else
				{
					buff->fields[field_index - 1][field_len++] = rx_char;
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	21 50       	subi	r18, 0x01	; 1
    1646:	31 09       	sbc	r19, r1
    1648:	90 91 38 45 	lds	r25, 0x4538	; 0x804538 <_ZZ10linkbus_RxhE9field_len>
    164c:	41 e0       	ldi	r20, 0x01	; 1
    164e:	49 0f       	add	r20, r25
    1650:	40 93 38 45 	sts	0x4538, r20	; 0x804538 <_ZZ10linkbus_RxhE9field_len>
    1654:	65 e1       	ldi	r22, 0x15	; 21
    1656:	62 9f       	mul	r22, r18
    1658:	a0 01       	movw	r20, r0
    165a:	63 9f       	mul	r22, r19
    165c:	50 0d       	add	r21, r0
    165e:	11 24       	eor	r1, r1
    1660:	c4 0f       	add	r28, r20
    1662:	d5 1f       	adc	r29, r21
    1664:	c9 0f       	add	r28, r25
    1666:	d1 1d       	adc	r29, r1
    1668:	8b 83       	std	Y+3, r24	; 0x03
    166a:	17 c0       	rjmp	.+46     	; 0x169a <_Z10linkbus_Rxh+0x1e0>
				}
			}
		}
		else if(rx_char == 0x0D)    /* Carriage return resets any message in progress */
    166c:	8d 30       	cpi	r24, 0x0D	; 13
    166e:	a9 f4       	brne	.+42     	; 0x169a <_Z10linkbus_Rxh+0x1e0>
		{
			buff->id = LB_MESSAGE_EMPTY;
    1670:	19 82       	std	Y+1, r1	; 0x01
    1672:	1a 82       	std	Y+2, r1	; 0x02
			charIndex = LINKBUS_MAX_MSG_LENGTH;
    1674:	82 e3       	ldi	r24, 0x32	; 50
    1676:	80 93 39 45 	sts	0x4539, r24	; 0x804539 <_ZZ10linkbus_RxhE9charIndex>
			field_len = 0;
    167a:	10 92 38 45 	sts	0x4538, r1	; 0x804538 <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
    167e:	10 92 34 45 	sts	0x4534, r1	; 0x804534 <_ZZ10linkbus_RxhE10tempMsg_ID>
    1682:	10 92 35 45 	sts	0x4535, r1	; 0x804535 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
    1686:	10 92 36 45 	sts	0x4536, r1	; 0x804536 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
    168a:	10 92 37 45 	sts	0x4537, r1	; 0x804537 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			field_index = 0;
    168e:	10 92 32 45 	sts	0x4532, r1	; 0x804532 <_ZZ10linkbus_RxhE11field_index>
			buff = NULL;
    1692:	10 92 3a 45 	sts	0x453A, r1	; 0x80453a <_ZZ10linkbus_RxhE4buff>
    1696:	10 92 3b 45 	sts	0x453B, r1	; 0x80453b <_ZZ10linkbus_RxhE4buff+0x1>
		}

		if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
    169a:	80 91 39 45 	lds	r24, 0x4539	; 0x804539 <_ZZ10linkbus_RxhE9charIndex>
    169e:	8f 5f       	subi	r24, 0xFF	; 255
    16a0:	80 93 39 45 	sts	0x4539, r24	; 0x804539 <_ZZ10linkbus_RxhE9charIndex>
    16a4:	82 33       	cpi	r24, 0x32	; 50
    16a6:	20 f0       	brcs	.+8      	; 0x16b0 <_Z10linkbus_Rxh+0x1f6>
		{
			receiving_msg = false;
    16a8:	10 92 33 45 	sts	0x4533, r1	; 0x804533 <_ZZ10linkbus_RxhE13receiving_msg>
			charIndex = 0;
    16ac:	10 92 39 45 	sts	0x4539, r1	; 0x804539 <_ZZ10linkbus_RxhE9charIndex>
		}
	}
}
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	1f 91       	pop	r17
    16b6:	0f 91       	pop	r16
    16b8:	08 95       	ret

000016ba <__vector_19>:
        TCB2.INTFLAGS = TCB_CAPT_bm;
    }
}

ISR(USART0_RXC_vect)
{
    16ba:	1f 92       	push	r1
    16bc:	0f 92       	push	r0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	0f 92       	push	r0
    16c2:	11 24       	eor	r1, r1
    16c4:	0b b6       	in	r0, 0x3b	; 59
    16c6:	0f 92       	push	r0
    16c8:	2f 93       	push	r18
    16ca:	3f 93       	push	r19
    16cc:	4f 93       	push	r20
    16ce:	5f 93       	push	r21
    16d0:	6f 93       	push	r22
    16d2:	7f 93       	push	r23
    16d4:	8f 93       	push	r24
    16d6:	9f 93       	push	r25
    16d8:	af 93       	push	r26
    16da:	bf 93       	push	r27
    16dc:	cf 93       	push	r28
    16de:	ef 93       	push	r30
    16e0:	ff 93       	push	r31
	uint8_t rx_char = USART0_get_data();
    16e2:	0e 94 7f 45 	call	0x8afe	; 0x8afe <USART0_get_data>
    16e6:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_0)
    16e8:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    16ec:	81 11       	cpse	r24, r1
    16ee:	03 c0       	rjmp	.+6      	; 0x16f6 <__vector_19+0x3c>
	{
		linkbus_Rx(rx_char);
    16f0:	8c 2f       	mov	r24, r28
    16f2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_0)
    16f6:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    16fa:	81 11       	cpse	r24, r1
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <__vector_19+0x4a>
	{
		serial_Rx(rx_char);
    16fe:	8c 2f       	mov	r24, r28
    1700:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_Z9serial_Rxh>
	}
}
    1704:	ff 91       	pop	r31
    1706:	ef 91       	pop	r30
    1708:	cf 91       	pop	r28
    170a:	bf 91       	pop	r27
    170c:	af 91       	pop	r26
    170e:	9f 91       	pop	r25
    1710:	8f 91       	pop	r24
    1712:	7f 91       	pop	r23
    1714:	6f 91       	pop	r22
    1716:	5f 91       	pop	r21
    1718:	4f 91       	pop	r20
    171a:	3f 91       	pop	r19
    171c:	2f 91       	pop	r18
    171e:	0f 90       	pop	r0
    1720:	0b be       	out	0x3b, r0	; 59
    1722:	0f 90       	pop	r0
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	0f 90       	pop	r0
    1728:	1f 90       	pop	r1
    172a:	18 95       	reti

0000172c <__vector_55>:

ISR(USART4_RXC_vect)
{
    172c:	1f 92       	push	r1
    172e:	0f 92       	push	r0
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	0f 92       	push	r0
    1734:	11 24       	eor	r1, r1
    1736:	0b b6       	in	r0, 0x3b	; 59
    1738:	0f 92       	push	r0
    173a:	2f 93       	push	r18
    173c:	3f 93       	push	r19
    173e:	4f 93       	push	r20
    1740:	5f 93       	push	r21
    1742:	6f 93       	push	r22
    1744:	7f 93       	push	r23
    1746:	8f 93       	push	r24
    1748:	9f 93       	push	r25
    174a:	af 93       	push	r26
    174c:	bf 93       	push	r27
    174e:	cf 93       	push	r28
    1750:	ef 93       	push	r30
    1752:	ff 93       	push	r31
	uint8_t rx_char = USART4_get_data();
    1754:	0e 94 e7 45 	call	0x8bce	; 0x8bce <USART4_get_data>
    1758:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_4)
    175a:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    175e:	84 30       	cpi	r24, 0x04	; 4
    1760:	19 f4       	brne	.+6      	; 0x1768 <__vector_55+0x3c>
	{
		linkbus_Rx(rx_char);
    1762:	8c 2f       	mov	r24, r28
    1764:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_4)
    1768:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    176c:	84 30       	cpi	r24, 0x04	; 4
    176e:	19 f4       	brne	.+6      	; 0x1776 <__vector_55+0x4a>
	{
		serial_Rx(rx_char);
    1770:	8c 2f       	mov	r24, r28
    1772:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_Z9serial_Rxh>
	}
}
    1776:	ff 91       	pop	r31
    1778:	ef 91       	pop	r30
    177a:	cf 91       	pop	r28
    177c:	bf 91       	pop	r27
    177e:	af 91       	pop	r26
    1780:	9f 91       	pop	r25
    1782:	8f 91       	pop	r24
    1784:	7f 91       	pop	r23
    1786:	6f 91       	pop	r22
    1788:	5f 91       	pop	r21
    178a:	4f 91       	pop	r20
    178c:	3f 91       	pop	r19
    178e:	2f 91       	pop	r18
    1790:	0f 90       	pop	r0
    1792:	0b be       	out	0x3b, r0	; 59
    1794:	0f 90       	pop	r0
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	0f 90       	pop	r0
    179a:	1f 90       	pop	r1
    179c:	18 95       	reti

0000179e <__vector_31>:

/**

*/
ISR(USART1_RXC_vect)
{
    179e:	1f 92       	push	r1
    17a0:	0f 92       	push	r0
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	0f 92       	push	r0
    17a6:	11 24       	eor	r1, r1
    17a8:	0b b6       	in	r0, 0x3b	; 59
    17aa:	0f 92       	push	r0
    17ac:	2f 93       	push	r18
    17ae:	3f 93       	push	r19
    17b0:	4f 93       	push	r20
    17b2:	5f 93       	push	r21
    17b4:	6f 93       	push	r22
    17b6:	7f 93       	push	r23
    17b8:	8f 93       	push	r24
    17ba:	9f 93       	push	r25
    17bc:	af 93       	push	r26
    17be:	bf 93       	push	r27
    17c0:	cf 93       	push	r28
    17c2:	ef 93       	push	r30
    17c4:	ff 93       	push	r31
	uint8_t rx_char = USART1_get_data();	
    17c6:	0e 94 b3 45 	call	0x8b66	; 0x8b66 <USART1_get_data>
    17ca:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_1)
    17cc:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	19 f4       	brne	.+6      	; 0x17da <__vector_31+0x3c>
	{
		linkbus_Rx(rx_char);
    17d4:	8c 2f       	mov	r24, r28
    17d6:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_1)
    17da:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	19 f4       	brne	.+6      	; 0x17e8 <__vector_31+0x4a>
	{
		serial_Rx(rx_char);
    17e2:	8c 2f       	mov	r24, r28
    17e4:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_Z9serial_Rxh>
	}
}
    17e8:	ff 91       	pop	r31
    17ea:	ef 91       	pop	r30
    17ec:	cf 91       	pop	r28
    17ee:	bf 91       	pop	r27
    17f0:	af 91       	pop	r26
    17f2:	9f 91       	pop	r25
    17f4:	8f 91       	pop	r24
    17f6:	7f 91       	pop	r23
    17f8:	6f 91       	pop	r22
    17fa:	5f 91       	pop	r21
    17fc:	4f 91       	pop	r20
    17fe:	3f 91       	pop	r19
    1800:	2f 91       	pop	r18
    1802:	0f 90       	pop	r0
    1804:	0b be       	out	0x3b, r0	; 59
    1806:	0f 90       	pop	r0
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	0f 90       	pop	r0
    180c:	1f 90       	pop	r1
    180e:	18 95       	reti

00001810 <__vector_32>:

/**

*/
ISR(USART1_DRE_vect)
{
    1810:	1f 92       	push	r1
    1812:	0f 92       	push	r0
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	0f 92       	push	r0
    1818:	11 24       	eor	r1, r1
    181a:	0b b6       	in	r0, 0x3b	; 59
    181c:	0f 92       	push	r0
    181e:	2f 93       	push	r18
    1820:	3f 93       	push	r19
    1822:	4f 93       	push	r20
    1824:	5f 93       	push	r21
    1826:	6f 93       	push	r22
    1828:	7f 93       	push	r23
    182a:	8f 93       	push	r24
    182c:	9f 93       	push	r25
    182e:	af 93       	push	r26
    1830:	bf 93       	push	r27
    1832:	ef 93       	push	r30
    1834:	ff 93       	push	r31
	if(g_serialbus_usart_number == USART_1)
    1836:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	59 f5       	brne	.+86     	; 0x1894 <__vector_32+0x84>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    183e:	80 91 30 45 	lds	r24, 0x4530	; 0x804530 <_ZZ11__vector_32E4buff>
    1842:	90 91 31 45 	lds	r25, 0x4531	; 0x804531 <_ZZ11__vector_32E4buff+0x1>
    1846:	89 2b       	or	r24, r25
    1848:	31 f4       	brne	.+12     	; 0x1856 <__vector_32+0x46>
		{
			buff = nextFullSBTxBuffer();
    184a:	0e 94 9c 39 	call	0x7338	; 0x7338 <nextFullSBTxBuffer>
    184e:	80 93 30 45 	sts	0x4530, r24	; 0x804530 <_ZZ11__vector_32E4buff>
    1852:	90 93 31 45 	sts	0x4531, r25	; 0x804531 <_ZZ11__vector_32E4buff+0x1>
		}

		if((*buff)[charIndex])
    1856:	e0 91 30 45 	lds	r30, 0x4530	; 0x804530 <_ZZ11__vector_32E4buff>
    185a:	f0 91 31 45 	lds	r31, 0x4531	; 0x804531 <_ZZ11__vector_32E4buff+0x1>
    185e:	80 91 2f 45 	lds	r24, 0x452F	; 0x80452f <_ZZ11__vector_32E9charIndex>
    1862:	df 01       	movw	r26, r30
    1864:	a8 0f       	add	r26, r24
    1866:	b1 1d       	adc	r27, r1
    1868:	9c 91       	ld	r25, X
    186a:	99 23       	and	r25, r25
    186c:	31 f0       	breq	.+12     	; 0x187a <__vector_32+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
    186e:	8f 5f       	subi	r24, 0xFF	; 255
    1870:	80 93 2f 45 	sts	0x452F, r24	; 0x80452f <_ZZ11__vector_32E9charIndex>
    1874:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
    1878:	0d c0       	rjmp	.+26     	; 0x1894 <__vector_32+0x84>
		}
		else
		{
			charIndex = 0;
    187a:	10 92 2f 45 	sts	0x452F, r1	; 0x80452f <_ZZ11__vector_32E9charIndex>
			(*buff)[0] = '\0';
    187e:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
    1880:	0e 94 9c 39 	call	0x7338	; 0x7338 <nextFullSBTxBuffer>
    1884:	80 93 30 45 	sts	0x4530, r24	; 0x804530 <_ZZ11__vector_32E4buff>
    1888:	90 93 31 45 	sts	0x4531, r25	; 0x804531 <_ZZ11__vector_32E4buff+0x1>
			if(!buff)
    188c:	89 2b       	or	r24, r25
    188e:	11 f4       	brne	.+4      	; 0x1894 <__vector_32+0x84>
			{
				serialbus_end_tx();
    1890:	0e 94 65 3a 	call	0x74ca	; 0x74ca <serialbus_end_tx>
			}
		}
	}
	
	if(g_linkbus_usart_number == USART_1)
    1894:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	59 f5       	brne	.+86     	; 0x18f2 <__vector_32+0xe2>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
    189c:	80 91 2d 45 	lds	r24, 0x452D	; 0x80452d <_ZZ11__vector_32E4buff_0>
    18a0:	90 91 2e 45 	lds	r25, 0x452E	; 0x80452e <_ZZ11__vector_32E4buff_0+0x1>
    18a4:	89 2b       	or	r24, r25
    18a6:	31 f4       	brne	.+12     	; 0x18b4 <__vector_32+0xa4>
		{
			buff = nextFullLBTxBuffer();
    18a8:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <_Z18nextFullLBTxBufferv>
    18ac:	80 93 2d 45 	sts	0x452D, r24	; 0x80452d <_ZZ11__vector_32E4buff_0>
    18b0:	90 93 2e 45 	sts	0x452E, r25	; 0x80452e <_ZZ11__vector_32E4buff_0+0x1>
		}

		if((*buff)[charIndex])
    18b4:	e0 91 2d 45 	lds	r30, 0x452D	; 0x80452d <_ZZ11__vector_32E4buff_0>
    18b8:	f0 91 2e 45 	lds	r31, 0x452E	; 0x80452e <_ZZ11__vector_32E4buff_0+0x1>
    18bc:	80 91 2c 45 	lds	r24, 0x452C	; 0x80452c <__data_end>
    18c0:	df 01       	movw	r26, r30
    18c2:	a8 0f       	add	r26, r24
    18c4:	b1 1d       	adc	r27, r1
    18c6:	9c 91       	ld	r25, X
    18c8:	99 23       	and	r25, r25
    18ca:	31 f0       	breq	.+12     	; 0x18d8 <__vector_32+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
    18cc:	8f 5f       	subi	r24, 0xFF	; 255
    18ce:	80 93 2c 45 	sts	0x452C, r24	; 0x80452c <__data_end>
    18d2:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
    18d6:	0d c0       	rjmp	.+26     	; 0x18f2 <__vector_32+0xe2>
		}
		else
		{
			charIndex = 0;
    18d8:	10 92 2c 45 	sts	0x452C, r1	; 0x80452c <__data_end>
			(*buff)[0] = '\0';
    18dc:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
    18de:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <_Z18nextFullLBTxBufferv>
    18e2:	80 93 2d 45 	sts	0x452D, r24	; 0x80452d <_ZZ11__vector_32E4buff_0>
    18e6:	90 93 2e 45 	sts	0x452E, r25	; 0x80452e <_ZZ11__vector_32E4buff_0+0x1>
			if(!buff)
    18ea:	89 2b       	or	r24, r25
    18ec:	11 f4       	brne	.+4      	; 0x18f2 <__vector_32+0xe2>
			{
				linkbus_end_tx();
    18ee:	0e 94 04 36 	call	0x6c08	; 0x6c08 <_Z14linkbus_end_txv>
			}
		}
	}
}
    18f2:	ff 91       	pop	r31
    18f4:	ef 91       	pop	r30
    18f6:	bf 91       	pop	r27
    18f8:	af 91       	pop	r26
    18fa:	9f 91       	pop	r25
    18fc:	8f 91       	pop	r24
    18fe:	7f 91       	pop	r23
    1900:	6f 91       	pop	r22
    1902:	5f 91       	pop	r21
    1904:	4f 91       	pop	r20
    1906:	3f 91       	pop	r19
    1908:	2f 91       	pop	r18
    190a:	0f 90       	pop	r0
    190c:	0b be       	out	0x3b, r0	; 59
    190e:	0f 90       	pop	r0
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	0f 90       	pop	r0
    1914:	1f 90       	pop	r1
    1916:	18 95       	reti

00001918 <__vector_41>:
{
	
}

void suspendEvent()
{
    1918:	1f 92       	push	r1
    191a:	0f 92       	push	r0
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	0f 92       	push	r0
    1920:	11 24       	eor	r1, r1
    1922:	0b b6       	in	r0, 0x3b	; 59
    1924:	0f 92       	push	r0
    1926:	0f 93       	push	r16
    1928:	1f 93       	push	r17
    192a:	2f 93       	push	r18
    192c:	3f 93       	push	r19
    192e:	4f 93       	push	r20
    1930:	5f 93       	push	r21
    1932:	6f 93       	push	r22
    1934:	7f 93       	push	r23
    1936:	8f 93       	push	r24
    1938:	9f 93       	push	r25
    193a:	af 93       	push	r26
    193c:	bf 93       	push	r27
    193e:	ef 93       	push	r30
    1940:	ff 93       	push	r31
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	25 97       	sbiw	r28, 0x05	; 5
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    1954:	80 ff       	sbrs	r24, 0
    1956:	98 c3       	rjmp	.+1840   	; 0x2088 <__vector_41+0x770>
    1958:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <_ZZ11__vector_41E3cnt>
    195c:	90 91 26 46 	lds	r25, 0x4626	; 0x804626 <_ZZ11__vector_41E3cnt+0x1>
    1960:	9c 01       	movw	r18, r24
    1962:	2f 5f       	subi	r18, 0xFF	; 255
    1964:	3f 4f       	sbci	r19, 0xFF	; 255
    1966:	20 93 25 46 	sts	0x4625, r18	; 0x804625 <_ZZ11__vector_41E3cnt>
    196a:	30 93 26 46 	sts	0x4626, r19	; 0x804626 <_ZZ11__vector_41E3cnt+0x1>
    196e:	8b 32       	cpi	r24, 0x2B	; 43
    1970:	91 40       	sbci	r25, 0x01	; 1
    1972:	09 f0       	breq	.+2      	; 0x1976 <__vector_41+0x5e>
    1974:	86 c3       	rjmp	.+1804   	; 0x2082 <__vector_41+0x76a>
    1976:	10 92 25 46 	sts	0x4625, r1	; 0x804625 <_ZZ11__vector_41E3cnt>
    197a:	10 92 26 46 	sts	0x4626, r1	; 0x804626 <_ZZ11__vector_41E3cnt+0x1>
    197e:	80 91 fa 45 	lds	r24, 0x45FA	; 0x8045fa <g_event_enabled>
    1982:	81 11       	cpse	r24, r1
    1984:	03 c0       	rjmp	.+6      	; 0x198c <__vector_41+0x74>
    1986:	8a b1       	in	r24, 0x0a	; 10
    1988:	80 64       	ori	r24, 0x40	; 64
    198a:	8a b9       	out	0x0a, r24	; 10
    198c:	0e 94 ab 21 	call	0x4356	; 0x4356 <_Z18antennaIsConnectedv>
    1990:	81 11       	cpse	r24, r1
    1992:	0a c0       	rjmp	.+20     	; 0x19a8 <__vector_41+0x90>
    1994:	90 91 b9 45 	lds	r25, 0x45B9	; 0x8045b9 <g_antenna_connect_state>
    1998:	91 30       	cpi	r25, 0x01	; 1
    199a:	19 f1       	breq	.+70     	; 0x19e2 <__vector_41+0xca>
    199c:	91 e0       	ldi	r25, 0x01	; 1
    199e:	90 93 b9 45 	sts	0x45B9, r25	; 0x8045b9 <g_antenna_connect_state>
    19a2:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
    19a6:	1d c0       	rjmp	.+58     	; 0x19e2 <__vector_41+0xca>
    19a8:	90 91 b9 45 	lds	r25, 0x45B9	; 0x8045b9 <g_antenna_connect_state>
    19ac:	91 30       	cpi	r25, 0x01	; 1
    19ae:	c9 f4       	brne	.+50     	; 0x19e2 <__vector_41+0xca>
    19b0:	90 91 27 46 	lds	r25, 0x4627	; 0x804627 <_ZZ11__vector_41E26lastAntennaConnectionState>
    19b4:	89 13       	cpse	r24, r25
    19b6:	12 c0       	rjmp	.+36     	; 0x19dc <__vector_41+0xc4>
    19b8:	90 91 1d 40 	lds	r25, 0x401D	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    19bc:	99 23       	and	r25, r25
    19be:	89 f0       	breq	.+34     	; 0x19e2 <__vector_41+0xca>
    19c0:	91 50       	subi	r25, 0x01	; 1
    19c2:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    19c6:	91 11       	cpse	r25, r1
    19c8:	0c c0       	rjmp	.+24     	; 0x19e2 <__vector_41+0xca>
    19ca:	10 92 b9 45 	sts	0x45B9, r1	; 0x8045b9 <g_antenna_connect_state>
    19ce:	91 e0       	ldi	r25, 0x01	; 1
    19d0:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
    19d4:	93 e0       	ldi	r25, 0x03	; 3
    19d6:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    19da:	03 c0       	rjmp	.+6      	; 0x19e2 <__vector_41+0xca>
    19dc:	93 e0       	ldi	r25, 0x03	; 3
    19de:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
    19e2:	80 93 27 46 	sts	0x4627, r24	; 0x804627 <_ZZ11__vector_41E26lastAntennaConnectionState>
    19e6:	0e 94 b0 05 	call	0xb60	; 0xb60 <system_tick>
    19ea:	10 91 ff 45 	lds	r17, 0x45FF	; 0x8045ff <_ZL10g_sleeping>
    19ee:	11 23       	and	r17, r17
    19f0:	a9 f1       	breq	.+106    	; 0x1a5c <__vector_41+0x144>
    19f2:	80 91 00 46 	lds	r24, 0x4600	; 0x804600 <_ZL23g_seconds_left_to_sleep>
    19f6:	90 91 01 46 	lds	r25, 0x4601	; 0x804601 <_ZL23g_seconds_left_to_sleep+0x1>
    19fa:	a0 91 02 46 	lds	r26, 0x4602	; 0x804602 <_ZL23g_seconds_left_to_sleep+0x2>
    19fe:	b0 91 03 46 	lds	r27, 0x4603	; 0x804603 <_ZL23g_seconds_left_to_sleep+0x3>
    1a02:	89 2b       	or	r24, r25
    1a04:	8a 2b       	or	r24, r26
    1a06:	8b 2b       	or	r24, r27
    1a08:	99 f0       	breq	.+38     	; 0x1a30 <__vector_41+0x118>
    1a0a:	80 91 00 46 	lds	r24, 0x4600	; 0x804600 <_ZL23g_seconds_left_to_sleep>
    1a0e:	90 91 01 46 	lds	r25, 0x4601	; 0x804601 <_ZL23g_seconds_left_to_sleep+0x1>
    1a12:	a0 91 02 46 	lds	r26, 0x4602	; 0x804602 <_ZL23g_seconds_left_to_sleep+0x2>
    1a16:	b0 91 03 46 	lds	r27, 0x4603	; 0x804603 <_ZL23g_seconds_left_to_sleep+0x3>
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	a1 09       	sbc	r26, r1
    1a1e:	b1 09       	sbc	r27, r1
    1a20:	80 93 00 46 	sts	0x4600, r24	; 0x804600 <_ZL23g_seconds_left_to_sleep>
    1a24:	90 93 01 46 	sts	0x4601, r25	; 0x804601 <_ZL23g_seconds_left_to_sleep+0x1>
    1a28:	a0 93 02 46 	sts	0x4602, r26	; 0x804602 <_ZL23g_seconds_left_to_sleep+0x2>
    1a2c:	b0 93 03 46 	sts	0x4603, r27	; 0x804603 <_ZL23g_seconds_left_to_sleep+0x3>
    1a30:	80 91 00 46 	lds	r24, 0x4600	; 0x804600 <_ZL23g_seconds_left_to_sleep>
    1a34:	90 91 01 46 	lds	r25, 0x4601	; 0x804601 <_ZL23g_seconds_left_to_sleep+0x1>
    1a38:	a0 91 02 46 	lds	r26, 0x4602	; 0x804602 <_ZL23g_seconds_left_to_sleep+0x2>
    1a3c:	b0 91 03 46 	lds	r27, 0x4603	; 0x804603 <_ZL23g_seconds_left_to_sleep+0x3>
    1a40:	89 2b       	or	r24, r25
    1a42:	8a 2b       	or	r24, r26
    1a44:	8b 2b       	or	r24, r27
    1a46:	11 f0       	breq	.+4      	; 0x1a4c <__vector_41+0x134>
    1a48:	10 91 06 40 	lds	r17, 0x4006	; 0x804006 <_ZL28g_antenna_connection_changed>
    1a4c:	11 23       	and	r17, r17
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <__vector_41+0x13a>
    1a50:	18 c3       	rjmp	.+1584   	; 0x2082 <__vector_41+0x76a>
    1a52:	10 92 fe 45 	sts	0x45FE, r1	; 0x8045fe <_ZL13g_go_to_sleep>
    1a56:	10 92 ff 45 	sts	0x45FF, r1	; 0x8045ff <_ZL10g_sleeping>
    1a5a:	13 c3       	rjmp	.+1574   	; 0x2082 <__vector_41+0x76a>
    1a5c:	19 82       	std	Y+1, r1	; 0x01
    1a5e:	1a 82       	std	Y+2, r1	; 0x02
    1a60:	1b 82       	std	Y+3, r1	; 0x03
    1a62:	1c 82       	std	Y+4, r1	; 0x04
    1a64:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    1a68:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    1a6c:	89 2b       	or	r24, r25
    1a6e:	49 f0       	breq	.+18     	; 0x1a82 <__vector_41+0x16a>
    1a70:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    1a74:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    1a7e:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    1a82:	80 91 fb 45 	lds	r24, 0x45FB	; 0x8045fb <g_event_commenced>
    1a86:	88 23       	and	r24, r24
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <__vector_41+0x174>
    1a8a:	52 c0       	rjmp	.+164    	; 0x1b30 <__vector_41+0x218>
    1a8c:	40 91 f6 45 	lds	r20, 0x45F6	; 0x8045f6 <g_event_finish_time>
    1a90:	50 91 f7 45 	lds	r21, 0x45F7	; 0x8045f7 <g_event_finish_time+0x1>
    1a94:	60 91 f8 45 	lds	r22, 0x45F8	; 0x8045f8 <g_event_finish_time+0x2>
    1a98:	70 91 f9 45 	lds	r23, 0x45F9	; 0x8045f9 <g_event_finish_time+0x3>
    1a9c:	45 2b       	or	r20, r21
    1a9e:	46 2b       	or	r20, r22
    1aa0:	47 2b       	or	r20, r23
    1aa2:	51 f0       	breq	.+20     	; 0x1ab8 <__vector_41+0x1a0>
    1aa4:	90 91 fc 45 	lds	r25, 0x45FC	; 0x8045fc <g_check_for_next_event>
    1aa8:	91 11       	cpse	r25, r1
    1aaa:	08 c0       	rjmp	.+16     	; 0x1abc <__vector_41+0x1a4>
    1aac:	90 91 c2 45 	lds	r25, 0x45C2	; 0x8045c2 <_ZL20g_shutting_down_wifi>
    1ab0:	99 23       	and	r25, r25
    1ab2:	29 f0       	breq	.+10     	; 0x1abe <__vector_41+0x1a6>
    1ab4:	81 2f       	mov	r24, r17
    1ab6:	03 c0       	rjmp	.+6      	; 0x1abe <__vector_41+0x1a6>
    1ab8:	81 2f       	mov	r24, r17
    1aba:	01 c0       	rjmp	.+2      	; 0x1abe <__vector_41+0x1a6>
    1abc:	81 2f       	mov	r24, r17
    1abe:	88 23       	and	r24, r24
    1ac0:	b9 f1       	breq	.+110    	; 0x1b30 <__vector_41+0x218>
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	01 96       	adiw	r24, 0x01	; 1
    1ac6:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    1aca:	49 81       	ldd	r20, Y+1	; 0x01
    1acc:	5a 81       	ldd	r21, Y+2	; 0x02
    1ace:	6b 81       	ldd	r22, Y+3	; 0x03
    1ad0:	7c 81       	ldd	r23, Y+4	; 0x04
    1ad2:	80 91 f6 45 	lds	r24, 0x45F6	; 0x8045f6 <g_event_finish_time>
    1ad6:	90 91 f7 45 	lds	r25, 0x45F7	; 0x8045f7 <g_event_finish_time+0x1>
    1ada:	a0 91 f8 45 	lds	r26, 0x45F8	; 0x8045f8 <g_event_finish_time+0x2>
    1ade:	b0 91 f9 45 	lds	r27, 0x45F9	; 0x8045f9 <g_event_finish_time+0x3>
    1ae2:	48 17       	cp	r20, r24
    1ae4:	59 07       	cpc	r21, r25
    1ae6:	6a 07       	cpc	r22, r26
    1ae8:	7b 07       	cpc	r23, r27
    1aea:	10 f1       	brcs	.+68     	; 0x1b30 <__vector_41+0x218>
    1aec:	8c ef       	ldi	r24, 0xFC	; 252
    1aee:	80 93 b6 45 	sts	0x45B6, r24	; 0x8045b6 <_ZL18g_last_status_code>
    1af2:	10 92 ba 45 	sts	0x45BA, r1	; 0x8045ba <_ZL12g_on_the_air>
    1af6:	10 92 bb 45 	sts	0x45BB, r1	; 0x8045bb <_ZL12g_on_the_air+0x1>
    1afa:	10 92 bc 45 	sts	0x45BC, r1	; 0x8045bc <_ZL12g_on_the_air+0x2>
    1afe:	10 92 bd 45 	sts	0x45BD, r1	; 0x8045bd <_ZL12g_on_the_air+0x3>
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	0e 94 b3 43 	call	0x8766	; 0x8766 <_Z14keyTransmitterb>
    1b08:	10 92 fa 45 	sts	0x45FA, r1	; 0x8045fa <g_event_enabled>
    1b0c:	10 92 fb 45 	sts	0x45FB, r1	; 0x8045fb <g_event_commenced>
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	80 93 fc 45 	sts	0x45FC, r24	; 0x8045fc <g_check_for_next_event>
    1b16:	8a e5       	ldi	r24, 0x5A	; 90
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    1b1e:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    1b22:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    1b26:	88 23       	and	r24, r24
    1b28:	19 f0       	breq	.+6      	; 0x1b30 <__vector_41+0x218>
    1b2a:	8c e3       	ldi	r24, 0x3C	; 60
    1b2c:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1b30:	80 91 fa 45 	lds	r24, 0x45FA	; 0x8045fa <g_event_enabled>
    1b34:	88 23       	and	r24, r24
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <__vector_41+0x222>
    1b38:	32 c2       	rjmp	.+1124   	; 0x1f9e <__vector_41+0x686>
    1b3a:	00 91 fb 45 	lds	r16, 0x45FB	; 0x8045fb <g_event_commenced>
    1b3e:	00 23       	and	r16, r16
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <__vector_41+0x22c>
    1b42:	a2 c1       	rjmp	.+836    	; 0x1e88 <__vector_41+0x570>
    1b44:	80 91 be 45 	lds	r24, 0x45BE	; 0x8045be <_ZL26g_sendID_seconds_countdown>
    1b48:	90 91 bf 45 	lds	r25, 0x45BF	; 0x8045bf <_ZL26g_sendID_seconds_countdown+0x1>
    1b4c:	89 2b       	or	r24, r25
    1b4e:	49 f0       	breq	.+18     	; 0x1b62 <__vector_41+0x24a>
    1b50:	80 91 be 45 	lds	r24, 0x45BE	; 0x8045be <_ZL26g_sendID_seconds_countdown>
    1b54:	90 91 bf 45 	lds	r25, 0x45BF	; 0x8045bf <_ZL26g_sendID_seconds_countdown+0x1>
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	80 93 be 45 	sts	0x45BE, r24	; 0x8045be <_ZL26g_sendID_seconds_countdown>
    1b5e:	90 93 bf 45 	sts	0x45BF, r25	; 0x8045bf <_ZL26g_sendID_seconds_countdown+0x1>
    1b62:	80 91 ba 45 	lds	r24, 0x45BA	; 0x8045ba <_ZL12g_on_the_air>
    1b66:	90 91 bb 45 	lds	r25, 0x45BB	; 0x8045bb <_ZL12g_on_the_air+0x1>
    1b6a:	a0 91 bc 45 	lds	r26, 0x45BC	; 0x8045bc <_ZL12g_on_the_air+0x2>
    1b6e:	b0 91 bd 45 	lds	r27, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x3>
    1b72:	89 2b       	or	r24, r25
    1b74:	8a 2b       	or	r24, r26
    1b76:	8b 2b       	or	r24, r27
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <__vector_41+0x264>
    1b7a:	11 c2       	rjmp	.+1058   	; 0x1f9e <__vector_41+0x686>
    1b7c:	80 91 ba 45 	lds	r24, 0x45BA	; 0x8045ba <_ZL12g_on_the_air>
    1b80:	90 91 bb 45 	lds	r25, 0x45BB	; 0x8045bb <_ZL12g_on_the_air+0x1>
    1b84:	a0 91 bc 45 	lds	r26, 0x45BC	; 0x8045bc <_ZL12g_on_the_air+0x2>
    1b88:	b0 91 bd 45 	lds	r27, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x3>
    1b8c:	18 16       	cp	r1, r24
    1b8e:	19 06       	cpc	r1, r25
    1b90:	1a 06       	cpc	r1, r26
    1b92:	1b 06       	cpc	r1, r27
    1b94:	0c f0       	brlt	.+2      	; 0x1b98 <__vector_41+0x280>
    1b96:	26 c1       	rjmp	.+588    	; 0x1de4 <__vector_41+0x4cc>
    1b98:	80 91 ba 45 	lds	r24, 0x45BA	; 0x8045ba <_ZL12g_on_the_air>
    1b9c:	90 91 bb 45 	lds	r25, 0x45BB	; 0x8045bb <_ZL12g_on_the_air+0x1>
    1ba0:	a0 91 bc 45 	lds	r26, 0x45BC	; 0x8045bc <_ZL12g_on_the_air+0x2>
    1ba4:	b0 91 bd 45 	lds	r27, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x3>
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	a1 09       	sbc	r26, r1
    1bac:	b1 09       	sbc	r27, r1
    1bae:	80 93 ba 45 	sts	0x45BA, r24	; 0x8045ba <_ZL12g_on_the_air>
    1bb2:	90 93 bb 45 	sts	0x45BB, r25	; 0x8045bb <_ZL12g_on_the_air+0x1>
    1bb6:	a0 93 bc 45 	sts	0x45BC, r26	; 0x8045bc <_ZL12g_on_the_air+0x2>
    1bba:	b0 93 bd 45 	sts	0x45BD, r27	; 0x8045bd <_ZL12g_on_the_air+0x3>
    1bbe:	80 91 be 45 	lds	r24, 0x45BE	; 0x8045be <_ZL26g_sendID_seconds_countdown>
    1bc2:	90 91 bf 45 	lds	r25, 0x45BF	; 0x8045bf <_ZL26g_sendID_seconds_countdown+0x1>
    1bc6:	89 2b       	or	r24, r25
    1bc8:	41 f4       	brne	.+16     	; 0x1bda <__vector_41+0x2c2>
    1bca:	80 91 ee 45 	lds	r24, 0x45EE	; 0x8045ee <g_time_needed_for_ID>
    1bce:	90 91 ef 45 	lds	r25, 0x45EF	; 0x8045ef <g_time_needed_for_ID+0x1>
    1bd2:	89 2b       	or	r24, r25
    1bd4:	21 f4       	brne	.+8      	; 0x1bde <__vector_41+0x2c6>
    1bd6:	81 2f       	mov	r24, r17
    1bd8:	03 c0       	rjmp	.+6      	; 0x1be0 <__vector_41+0x2c8>
    1bda:	81 2f       	mov	r24, r17
    1bdc:	01 c0       	rjmp	.+2      	; 0x1be0 <__vector_41+0x2c8>
    1bde:	80 2f       	mov	r24, r16
    1be0:	88 23       	and	r24, r24
    1be2:	81 f1       	breq	.+96     	; 0x1c44 <__vector_41+0x32c>
    1be4:	80 91 ee 45 	lds	r24, 0x45EE	; 0x8045ee <g_time_needed_for_ID>
    1be8:	90 91 ef 45 	lds	r25, 0x45EF	; 0x8045ef <g_time_needed_for_ID+0x1>
    1bec:	a0 e0       	ldi	r26, 0x00	; 0
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	40 91 ba 45 	lds	r20, 0x45BA	; 0x8045ba <_ZL12g_on_the_air>
    1bf4:	50 91 bb 45 	lds	r21, 0x45BB	; 0x8045bb <_ZL12g_on_the_air+0x1>
    1bf8:	60 91 bc 45 	lds	r22, 0x45BC	; 0x8045bc <_ZL12g_on_the_air+0x2>
    1bfc:	70 91 bd 45 	lds	r23, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x3>
    1c00:	84 17       	cp	r24, r20
    1c02:	95 07       	cpc	r25, r21
    1c04:	a6 07       	cpc	r26, r22
    1c06:	b7 07       	cpc	r27, r23
    1c08:	e9 f4       	brne	.+58     	; 0x1c44 <__vector_41+0x32c>
    1c0a:	8f ee       	ldi	r24, 0xEF	; 239
    1c0c:	80 93 b6 45 	sts	0x45B6, r24	; 0x8045b6 <_ZL18g_last_status_code>
    1c10:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    1c14:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    1c18:	80 93 be 45 	sts	0x45BE, r24	; 0x8045be <_ZL26g_sendID_seconds_countdown>
    1c1c:	90 93 bf 45 	sts	0x45BF, r25	; 0x8045bf <_ZL26g_sendID_seconds_countdown+0x1>
    1c20:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    1c24:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_Z13throttleValueh>
    1c28:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1c2c:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1c30:	1d 82       	std	Y+5, r1	; 0x05
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	50 e0       	ldi	r21, 0x00	; 0
    1c36:	be 01       	movw	r22, r28
    1c38:	6b 5f       	subi	r22, 0xFB	; 251
    1c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3c:	89 ed       	ldi	r24, 0xD9	; 217
    1c3e:	95 e4       	ldi	r25, 0x45	; 69
    1c40:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_Z9makeMorsePcPbS0_>
    1c44:	80 91 ba 45 	lds	r24, 0x45BA	; 0x8045ba <_ZL12g_on_the_air>
    1c48:	90 91 bb 45 	lds	r25, 0x45BB	; 0x8045bb <_ZL12g_on_the_air+0x1>
    1c4c:	a0 91 bc 45 	lds	r26, 0x45BC	; 0x8045bc <_ZL12g_on_the_air+0x2>
    1c50:	b0 91 bd 45 	lds	r27, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x3>
    1c54:	89 2b       	or	r24, r25
    1c56:	8a 2b       	or	r24, r26
    1c58:	8b 2b       	or	r24, r27
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <__vector_41+0x346>
    1c5c:	a0 c1       	rjmp	.+832    	; 0x1f9e <__vector_41+0x686>
    1c5e:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1c62:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1c66:	89 2b       	or	r24, r25
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <__vector_41+0x354>
    1c6a:	a3 c0       	rjmp	.+326    	; 0x1db2 <__vector_41+0x49a>
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	0e 94 b3 43 	call	0x8766	; 0x8766 <_Z14keyTransmitterb>
    1c72:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    1c76:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1c7a:	80 91 ba 45 	lds	r24, 0x45BA	; 0x8045ba <_ZL12g_on_the_air>
    1c7e:	90 91 bb 45 	lds	r25, 0x45BB	; 0x8045bb <_ZL12g_on_the_air+0x1>
    1c82:	a0 91 bc 45 	lds	r26, 0x45BC	; 0x8045bc <_ZL12g_on_the_air+0x2>
    1c86:	b0 91 bd 45 	lds	r27, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x3>
    1c8a:	05 2e       	mov	r0, r21
    1c8c:	00 0c       	add	r0, r0
    1c8e:	66 0b       	sbc	r22, r22
    1c90:	77 0b       	sbc	r23, r23
    1c92:	84 1b       	sub	r24, r20
    1c94:	95 0b       	sbc	r25, r21
    1c96:	a6 0b       	sbc	r26, r22
    1c98:	b7 0b       	sbc	r27, r23
    1c9a:	80 93 ba 45 	sts	0x45BA, r24	; 0x8045ba <_ZL12g_on_the_air>
    1c9e:	90 93 bb 45 	sts	0x45BB, r25	; 0x8045bb <_ZL12g_on_the_air+0x1>
    1ca2:	a0 93 bc 45 	sts	0x45BC, r26	; 0x8045bc <_ZL12g_on_the_air+0x2>
    1ca6:	b0 93 bd 45 	sts	0x45BD, r27	; 0x8045bd <_ZL12g_on_the_air+0x3>
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	8d 83       	std	Y+5, r24	; 0x05
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	50 e0       	ldi	r21, 0x00	; 0
    1cb2:	be 01       	movw	r22, r28
    1cb4:	6b 5f       	subi	r22, 0xFB	; 251
    1cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb8:	84 ec       	ldi	r24, 0xC4	; 196
    1cba:	95 e4       	ldi	r25, 0x45	; 69
    1cbc:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_Z9makeMorsePcPbS0_>
    1cc0:	8e ef       	ldi	r24, 0xFE	; 254
    1cc2:	80 93 b6 45 	sts	0x45B6, r24	; 0x8045b6 <_ZL18g_last_status_code>
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	01 96       	adiw	r24, 0x01	; 1
    1cca:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    1cce:	29 81       	ldd	r18, Y+1	; 0x01
    1cd0:	3a 81       	ldd	r19, Y+2	; 0x02
    1cd2:	4b 81       	ldd	r20, Y+3	; 0x03
    1cd4:	5c 81       	ldd	r21, Y+4	; 0x04
    1cd6:	80 91 f6 45 	lds	r24, 0x45F6	; 0x8045f6 <g_event_finish_time>
    1cda:	90 91 f7 45 	lds	r25, 0x45F7	; 0x8045f7 <g_event_finish_time+0x1>
    1cde:	a0 91 f8 45 	lds	r26, 0x45F8	; 0x8045f8 <g_event_finish_time+0x2>
    1ce2:	b0 91 f9 45 	lds	r27, 0x45F9	; 0x8045f9 <g_event_finish_time+0x3>
    1ce6:	28 17       	cp	r18, r24
    1ce8:	39 07       	cpc	r19, r25
    1cea:	4a 07       	cpc	r20, r26
    1cec:	5b 07       	cpc	r21, r27
    1cee:	58 f4       	brcc	.+22     	; 0x1d06 <__vector_41+0x3ee>
    1cf0:	60 91 f6 45 	lds	r22, 0x45F6	; 0x8045f6 <g_event_finish_time>
    1cf4:	70 91 f7 45 	lds	r23, 0x45F7	; 0x8045f7 <g_event_finish_time+0x1>
    1cf8:	80 91 f8 45 	lds	r24, 0x45F8	; 0x8045f8 <g_event_finish_time+0x2>
    1cfc:	90 91 f9 45 	lds	r25, 0x45F9	; 0x8045f9 <g_event_finish_time+0x3>
    1d00:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <_Z7timeDifmm>
    1d04:	03 c0       	rjmp	.+6      	; 0x1d0c <__vector_41+0x3f4>
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    1d10:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1d14:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    1d18:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1d1c:	24 0f       	add	r18, r20
    1d1e:	35 1f       	adc	r19, r21
    1d20:	21 5f       	subi	r18, 0xF1	; 241
    1d22:	3f 4f       	sbci	r19, 0xFF	; 255
    1d24:	03 2e       	mov	r0, r19
    1d26:	00 0c       	add	r0, r0
    1d28:	44 0b       	sbc	r20, r20
    1d2a:	55 0b       	sbc	r21, r21
    1d2c:	26 17       	cp	r18, r22
    1d2e:	37 07       	cpc	r19, r23
    1d30:	48 07       	cpc	r20, r24
    1d32:	59 07       	cpc	r21, r25
    1d34:	0c f0       	brlt	.+2      	; 0x1d38 <__vector_41+0x420>
    1d36:	33 c1       	rjmp	.+614    	; 0x1f9e <__vector_41+0x686>
    1d38:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1d3c:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1d40:	40 97       	sbiw	r24, 0x10	; 16
    1d42:	2c f0       	brlt	.+10     	; 0x1d4e <__vector_41+0x436>
    1d44:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1d48:	81 11       	cpse	r24, r1
    1d4a:	01 c0       	rjmp	.+2      	; 0x1d4e <__vector_41+0x436>
    1d4c:	10 2f       	mov	r17, r16
    1d4e:	11 23       	and	r17, r17
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <__vector_41+0x43c>
    1d52:	25 c1       	rjmp	.+586    	; 0x1f9e <__vector_41+0x686>
    1d54:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1d58:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1d5c:	0a 97       	sbiw	r24, 0x0a	; 10
    1d5e:	09 2e       	mov	r0, r25
    1d60:	00 0c       	add	r0, r0
    1d62:	aa 0b       	sbc	r26, r26
    1d64:	bb 0b       	sbc	r27, r27
    1d66:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    1d6a:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    1d6e:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    1d72:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    1d76:	82 e0       	ldi	r24, 0x02	; 2
    1d78:	80 93 c3 45 	sts	0x45C3, r24	; 0x8045c3 <_ZL11g_sleepType>
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	80 93 fe 45 	sts	0x45FE, r24	; 0x8045fe <_ZL13g_go_to_sleep>
    1d82:	80 91 be 45 	lds	r24, 0x45BE	; 0x8045be <_ZL26g_sendID_seconds_countdown>
    1d86:	90 91 bf 45 	lds	r25, 0x45BF	; 0x8045bf <_ZL26g_sendID_seconds_countdown+0x1>
    1d8a:	40 91 17 40 	lds	r20, 0x4017	; 0x804017 <_ZL18g_seconds_to_sleep>
    1d8e:	50 91 18 40 	lds	r21, 0x4018	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    1d92:	60 91 19 40 	lds	r22, 0x4019	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    1d96:	70 91 1a 40 	lds	r23, 0x401A	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    1d9a:	84 1b       	sub	r24, r20
    1d9c:	95 0b       	sbc	r25, r21
    1d9e:	18 16       	cp	r1, r24
    1da0:	19 06       	cpc	r1, r25
    1da2:	14 f0       	brlt	.+4      	; 0x1da8 <__vector_41+0x490>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	80 93 be 45 	sts	0x45BE, r24	; 0x8045be <_ZL26g_sendID_seconds_countdown>
    1dac:	90 93 bf 45 	sts	0x45BF, r25	; 0x8045bf <_ZL26g_sendID_seconds_countdown+0x1>
    1db0:	f6 c0       	rjmp	.+492    	; 0x1f9e <__vector_41+0x686>
    1db2:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1db6:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1dba:	09 2e       	mov	r0, r25
    1dbc:	00 0c       	add	r0, r0
    1dbe:	aa 0b       	sbc	r26, r26
    1dc0:	bb 0b       	sbc	r27, r27
    1dc2:	80 93 ba 45 	sts	0x45BA, r24	; 0x8045ba <_ZL12g_on_the_air>
    1dc6:	90 93 bb 45 	sts	0x45BB, r25	; 0x8045bb <_ZL12g_on_the_air+0x1>
    1dca:	a0 93 bc 45 	sts	0x45BC, r26	; 0x8045bc <_ZL12g_on_the_air+0x2>
    1dce:	b0 93 bd 45 	sts	0x45BD, r27	; 0x8045bd <_ZL12g_on_the_air+0x3>
    1dd2:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1dd6:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_Z13throttleValueh>
    1dda:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1dde:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1de2:	dd c0       	rjmp	.+442    	; 0x1f9e <__vector_41+0x686>
    1de4:	80 91 ba 45 	lds	r24, 0x45BA	; 0x8045ba <_ZL12g_on_the_air>
    1de8:	90 91 bb 45 	lds	r25, 0x45BB	; 0x8045bb <_ZL12g_on_the_air+0x1>
    1dec:	a0 91 bc 45 	lds	r26, 0x45BC	; 0x8045bc <_ZL12g_on_the_air+0x2>
    1df0:	b0 91 bd 45 	lds	r27, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x3>
    1df4:	bb 23       	and	r27, r27
    1df6:	0c f0       	brlt	.+2      	; 0x1dfa <__vector_41+0x4e2>
    1df8:	d2 c0       	rjmp	.+420    	; 0x1f9e <__vector_41+0x686>
    1dfa:	80 91 ba 45 	lds	r24, 0x45BA	; 0x8045ba <_ZL12g_on_the_air>
    1dfe:	90 91 bb 45 	lds	r25, 0x45BB	; 0x8045bb <_ZL12g_on_the_air+0x1>
    1e02:	a0 91 bc 45 	lds	r26, 0x45BC	; 0x8045bc <_ZL12g_on_the_air+0x2>
    1e06:	b0 91 bd 45 	lds	r27, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x3>
    1e0a:	01 96       	adiw	r24, 0x01	; 1
    1e0c:	a1 1d       	adc	r26, r1
    1e0e:	b1 1d       	adc	r27, r1
    1e10:	80 93 ba 45 	sts	0x45BA, r24	; 0x8045ba <_ZL12g_on_the_air>
    1e14:	90 93 bb 45 	sts	0x45BB, r25	; 0x8045bb <_ZL12g_on_the_air+0x1>
    1e18:	a0 93 bc 45 	sts	0x45BC, r26	; 0x8045bc <_ZL12g_on_the_air+0x2>
    1e1c:	b0 93 bd 45 	sts	0x45BD, r27	; 0x8045bd <_ZL12g_on_the_air+0x3>
    1e20:	80 91 ba 45 	lds	r24, 0x45BA	; 0x8045ba <_ZL12g_on_the_air>
    1e24:	90 91 bb 45 	lds	r25, 0x45BB	; 0x8045bb <_ZL12g_on_the_air+0x1>
    1e28:	a0 91 bc 45 	lds	r26, 0x45BC	; 0x8045bc <_ZL12g_on_the_air+0x2>
    1e2c:	b0 91 bd 45 	lds	r27, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x3>
    1e30:	89 2b       	or	r24, r25
    1e32:	8a 2b       	or	r24, r26
    1e34:	8b 2b       	or	r24, r27
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <__vector_41+0x522>
    1e38:	b2 c0       	rjmp	.+356    	; 0x1f9e <__vector_41+0x686>
    1e3a:	8d ef       	ldi	r24, 0xFD	; 253
    1e3c:	80 93 b6 45 	sts	0x45B6, r24	; 0x8045b6 <_ZL18g_last_status_code>
    1e40:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1e44:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1e48:	09 2e       	mov	r0, r25
    1e4a:	00 0c       	add	r0, r0
    1e4c:	aa 0b       	sbc	r26, r26
    1e4e:	bb 0b       	sbc	r27, r27
    1e50:	80 93 ba 45 	sts	0x45BA, r24	; 0x8045ba <_ZL12g_on_the_air>
    1e54:	90 93 bb 45 	sts	0x45BB, r25	; 0x8045bb <_ZL12g_on_the_air+0x1>
    1e58:	a0 93 bc 45 	sts	0x45BC, r26	; 0x8045bc <_ZL12g_on_the_air+0x2>
    1e5c:	b0 93 bd 45 	sts	0x45BD, r27	; 0x8045bd <_ZL12g_on_the_air+0x3>
    1e60:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1e64:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_Z13throttleValueh>
    1e68:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1e6c:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	8d 83       	std	Y+5, r24	; 0x05
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	be 01       	movw	r22, r28
    1e7a:	6b 5f       	subi	r22, 0xFB	; 251
    1e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7e:	84 ec       	ldi	r24, 0xC4	; 196
    1e80:	95 e4       	ldi	r25, 0x45	; 69
    1e82:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_Z9makeMorsePcPbS0_>
    1e86:	8b c0       	rjmp	.+278    	; 0x1f9e <__vector_41+0x686>
    1e88:	80 91 f2 45 	lds	r24, 0x45F2	; 0x8045f2 <g_event_start_time>
    1e8c:	90 91 f3 45 	lds	r25, 0x45F3	; 0x8045f3 <g_event_start_time+0x1>
    1e90:	a0 91 f4 45 	lds	r26, 0x45F4	; 0x8045f4 <g_event_start_time+0x2>
    1e94:	b0 91 f5 45 	lds	r27, 0x45F5	; 0x8045f5 <g_event_start_time+0x3>
    1e98:	89 2b       	or	r24, r25
    1e9a:	8a 2b       	or	r24, r26
    1e9c:	8b 2b       	or	r24, r27
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <__vector_41+0x58a>
    1ea0:	7e c0       	rjmp	.+252    	; 0x1f9e <__vector_41+0x686>
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	01 96       	adiw	r24, 0x01	; 1
    1ea6:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    1eaa:	49 81       	ldd	r20, Y+1	; 0x01
    1eac:	5a 81       	ldd	r21, Y+2	; 0x02
    1eae:	6b 81       	ldd	r22, Y+3	; 0x03
    1eb0:	7c 81       	ldd	r23, Y+4	; 0x04
    1eb2:	80 91 f2 45 	lds	r24, 0x45F2	; 0x8045f2 <g_event_start_time>
    1eb6:	90 91 f3 45 	lds	r25, 0x45F3	; 0x8045f3 <g_event_start_time+0x1>
    1eba:	a0 91 f4 45 	lds	r26, 0x45F4	; 0x8045f4 <g_event_start_time+0x2>
    1ebe:	b0 91 f5 45 	lds	r27, 0x45F5	; 0x8045f5 <g_event_start_time+0x3>
    1ec2:	48 17       	cp	r20, r24
    1ec4:	59 07       	cpc	r21, r25
    1ec6:	6a 07       	cpc	r22, r26
    1ec8:	7b 07       	cpc	r23, r27
    1eca:	08 f4       	brcc	.+2      	; 0x1ece <__vector_41+0x5b6>
    1ecc:	68 c0       	rjmp	.+208    	; 0x1f9e <__vector_41+0x686>
    1ece:	80 91 f0 45 	lds	r24, 0x45F0	; 0x8045f0 <g_intra_cycle_delay_time>
    1ed2:	90 91 f1 45 	lds	r25, 0x45F1	; 0x8045f1 <g_intra_cycle_delay_time+0x1>
    1ed6:	89 2b       	or	r24, r25
    1ed8:	59 f1       	breq	.+86     	; 0x1f30 <__vector_41+0x618>
    1eda:	8e ef       	ldi	r24, 0xFE	; 254
    1edc:	80 93 b6 45 	sts	0x45B6, r24	; 0x8045b6 <_ZL18g_last_status_code>
    1ee0:	80 91 f0 45 	lds	r24, 0x45F0	; 0x8045f0 <g_intra_cycle_delay_time>
    1ee4:	90 91 f1 45 	lds	r25, 0x45F1	; 0x8045f1 <g_intra_cycle_delay_time+0x1>
    1ee8:	91 95       	neg	r25
    1eea:	81 95       	neg	r24
    1eec:	91 09       	sbc	r25, r1
    1eee:	09 2e       	mov	r0, r25
    1ef0:	00 0c       	add	r0, r0
    1ef2:	aa 0b       	sbc	r26, r26
    1ef4:	bb 0b       	sbc	r27, r27
    1ef6:	80 93 ba 45 	sts	0x45BA, r24	; 0x8045ba <_ZL12g_on_the_air>
    1efa:	90 93 bb 45 	sts	0x45BB, r25	; 0x8045bb <_ZL12g_on_the_air+0x1>
    1efe:	a0 93 bc 45 	sts	0x45BC, r26	; 0x8045bc <_ZL12g_on_the_air+0x2>
    1f02:	b0 93 bd 45 	sts	0x45BD, r27	; 0x8045bd <_ZL12g_on_the_air+0x3>
    1f06:	20 91 f0 45 	lds	r18, 0x45F0	; 0x8045f0 <g_intra_cycle_delay_time>
    1f0a:	30 91 f1 45 	lds	r19, 0x45F1	; 0x8045f1 <g_intra_cycle_delay_time+0x1>
    1f0e:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1f12:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1f16:	82 0f       	add	r24, r18
    1f18:	93 1f       	adc	r25, r19
    1f1a:	20 91 ee 45 	lds	r18, 0x45EE	; 0x8045ee <g_time_needed_for_ID>
    1f1e:	30 91 ef 45 	lds	r19, 0x45EF	; 0x8045ef <g_time_needed_for_ID+0x1>
    1f22:	82 1b       	sub	r24, r18
    1f24:	93 0b       	sbc	r25, r19
    1f26:	80 93 be 45 	sts	0x45BE, r24	; 0x8045be <_ZL26g_sendID_seconds_countdown>
    1f2a:	90 93 bf 45 	sts	0x45BF, r25	; 0x8045bf <_ZL26g_sendID_seconds_countdown+0x1>
    1f2e:	34 c0       	rjmp	.+104    	; 0x1f98 <__vector_41+0x680>
    1f30:	8d ef       	ldi	r24, 0xFD	; 253
    1f32:	80 93 b6 45 	sts	0x45B6, r24	; 0x8045b6 <_ZL18g_last_status_code>
    1f36:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1f3a:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1f3e:	09 2e       	mov	r0, r25
    1f40:	00 0c       	add	r0, r0
    1f42:	aa 0b       	sbc	r26, r26
    1f44:	bb 0b       	sbc	r27, r27
    1f46:	80 93 ba 45 	sts	0x45BA, r24	; 0x8045ba <_ZL12g_on_the_air>
    1f4a:	90 93 bb 45 	sts	0x45BB, r25	; 0x8045bb <_ZL12g_on_the_air+0x1>
    1f4e:	a0 93 bc 45 	sts	0x45BC, r26	; 0x8045bc <_ZL12g_on_the_air+0x2>
    1f52:	b0 93 bd 45 	sts	0x45BD, r27	; 0x8045bd <_ZL12g_on_the_air+0x3>
    1f56:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1f5a:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1f5e:	20 91 ee 45 	lds	r18, 0x45EE	; 0x8045ee <g_time_needed_for_ID>
    1f62:	30 91 ef 45 	lds	r19, 0x45EF	; 0x8045ef <g_time_needed_for_ID+0x1>
    1f66:	82 1b       	sub	r24, r18
    1f68:	93 0b       	sbc	r25, r19
    1f6a:	80 93 be 45 	sts	0x45BE, r24	; 0x8045be <_ZL26g_sendID_seconds_countdown>
    1f6e:	90 93 bf 45 	sts	0x45BF, r25	; 0x8045bf <_ZL26g_sendID_seconds_countdown+0x1>
    1f72:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    1f76:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_Z13throttleValueh>
    1f7a:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1f7e:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	8d 83       	std	Y+5, r24	; 0x05
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	be 01       	movw	r22, r28
    1f8c:	6b 5f       	subi	r22, 0xFB	; 251
    1f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f90:	84 ec       	ldi	r24, 0xC4	; 196
    1f92:	95 e4       	ldi	r25, 0x45	; 69
    1f94:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_Z9makeMorsePcPbS0_>
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	80 93 fb 45 	sts	0x45FB, r24	; 0x8045fb <g_event_commenced>
    1f9e:	80 91 c1 45 	lds	r24, 0x45C1	; 0x8045c1 <_ZL19g_wifi_enable_delay>
    1fa2:	88 23       	and	r24, r24
    1fa4:	e1 f0       	breq	.+56     	; 0x1fde <__vector_41+0x6c6>
    1fa6:	80 91 c1 45 	lds	r24, 0x45C1	; 0x8045c1 <_ZL19g_wifi_enable_delay>
    1faa:	81 50       	subi	r24, 0x01	; 1
    1fac:	80 93 c1 45 	sts	0x45C1, r24	; 0x8045c1 <_ZL19g_wifi_enable_delay>
    1fb0:	80 91 c1 45 	lds	r24, 0x45C1	; 0x8045c1 <_ZL19g_wifi_enable_delay>
    1fb4:	85 30       	cpi	r24, 0x05	; 5
    1fb6:	39 f4       	brne	.+14     	; 0x1fc6 <__vector_41+0x6ae>
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	0e 94 69 28 	call	0x50d2	; 0x50d2 <_Z10wifi_powerb>
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	0e 94 73 28 	call	0x50e6	; 0x50e6 <_Z10wifi_resetb>
    1fc4:	5e c0       	rjmp	.+188    	; 0x2082 <__vector_41+0x76a>
    1fc6:	80 91 c1 45 	lds	r24, 0x45C1	; 0x8045c1 <_ZL19g_wifi_enable_delay>
    1fca:	81 11       	cpse	r24, r1
    1fcc:	5a c0       	rjmp	.+180    	; 0x2082 <__vector_41+0x76a>
    1fce:	46 e0       	ldi	r20, 0x06	; 6
    1fd0:	60 e8       	ldi	r22, 0x80	; 128
    1fd2:	75 e2       	ldi	r23, 0x25	; 37
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <_Z12linkbus_initm14USART_Number_t>
    1fdc:	52 c0       	rjmp	.+164    	; 0x2082 <__vector_41+0x76a>
    1fde:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    1fe2:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    1fe6:	89 2b       	or	r24, r25
    1fe8:	69 f0       	breq	.+26     	; 0x2004 <__vector_41+0x6ec>
    1fea:	80 91 c2 45 	lds	r24, 0x45C2	; 0x8045c2 <_ZL20g_shutting_down_wifi>
    1fee:	81 11       	cpse	r24, r1
    1ff0:	0c c0       	rjmp	.+24     	; 0x200a <__vector_41+0x6f2>
    1ff2:	90 91 fc 45 	lds	r25, 0x45FC	; 0x8045fc <g_check_for_next_event>
    1ff6:	91 11       	cpse	r25, r1
    1ff8:	08 c0       	rjmp	.+16     	; 0x200a <__vector_41+0x6f2>
    1ffa:	90 91 fd 45 	lds	r25, 0x45FD	; 0x8045fd <g_waiting_for_next_event>
    1ffe:	99 23       	and	r25, r25
    2000:	19 f0       	breq	.+6      	; 0x2008 <__vector_41+0x6f0>
    2002:	03 c0       	rjmp	.+6      	; 0x200a <__vector_41+0x6f2>
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	01 c0       	rjmp	.+2      	; 0x200a <__vector_41+0x6f2>
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	88 23       	and	r24, r24
    200c:	99 f1       	breq	.+102    	; 0x2074 <__vector_41+0x75c>
    200e:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2012:	88 23       	and	r24, r24
    2014:	79 f1       	breq	.+94     	; 0x2074 <__vector_41+0x75c>
    2016:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    201a:	81 50       	subi	r24, 0x01	; 1
    201c:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2020:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2024:	81 11       	cpse	r24, r1
    2026:	26 c0       	rjmp	.+76     	; 0x2074 <__vector_41+0x75c>
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	0e 94 73 28 	call	0x50e6	; 0x50e6 <_Z10wifi_resetb>
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	0e 94 69 28 	call	0x50d2	; 0x50d2 <_Z10wifi_powerb>
    2034:	10 92 c2 45 	sts	0x45C2, r1	; 0x8045c2 <_ZL20g_shutting_down_wifi>
    2038:	80 91 fa 45 	lds	r24, 0x45FA	; 0x8045fa <g_event_enabled>
    203c:	81 11       	cpse	r24, r1
    203e:	12 c0       	rjmp	.+36     	; 0x2064 <__vector_41+0x74c>
    2040:	84 e0       	ldi	r24, 0x04	; 4
    2042:	80 93 c3 45 	sts	0x45C3, r24	; 0x8045c3 <_ZL11g_sleepType>
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	80 93 fe 45 	sts	0x45FE, r24	; 0x8045fe <_ZL13g_go_to_sleep>
    204c:	8f ef       	ldi	r24, 0xFF	; 255
    204e:	9f ef       	ldi	r25, 0xFF	; 255
    2050:	dc 01       	movw	r26, r24
    2052:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    2056:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    205a:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    205e:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    2062:	06 c0       	rjmp	.+12     	; 0x2070 <__vector_41+0x758>
    2064:	80 91 c3 45 	lds	r24, 0x45C3	; 0x8045c3 <_ZL11g_sleepType>
    2068:	83 30       	cpi	r24, 0x03	; 3
    206a:	11 f4       	brne	.+4      	; 0x2070 <__vector_41+0x758>
    206c:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <_Z12eventEnabledv>
    2070:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    2074:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    2078:	88 23       	and	r24, r24
    207a:	19 f0       	breq	.+6      	; 0x2082 <__vector_41+0x76a>
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	80 93 c0 45 	sts	0x45C0, r24	; 0x8045c0 <_ZL16g_report_seconds>
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    2088:	25 96       	adiw	r28, 0x05	; 5
    208a:	cd bf       	out	0x3d, r28	; 61
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	ff 91       	pop	r31
    2094:	ef 91       	pop	r30
    2096:	bf 91       	pop	r27
    2098:	af 91       	pop	r26
    209a:	9f 91       	pop	r25
    209c:	8f 91       	pop	r24
    209e:	7f 91       	pop	r23
    20a0:	6f 91       	pop	r22
    20a2:	5f 91       	pop	r21
    20a4:	4f 91       	pop	r20
    20a6:	3f 91       	pop	r19
    20a8:	2f 91       	pop	r18
    20aa:	1f 91       	pop	r17
    20ac:	0f 91       	pop	r16
    20ae:	0f 90       	pop	r0
    20b0:	0b be       	out	0x3b, r0	; 59
    20b2:	0f 90       	pop	r0
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	0f 90       	pop	r0
    20b8:	1f 90       	pop	r1
    20ba:	18 95       	reti

000020bc <__vector_12>:
    20bc:	1f 92       	push	r1
    20be:	0f 92       	push	r0
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	0f 92       	push	r0
    20c4:	11 24       	eor	r1, r1
    20c6:	0b b6       	in	r0, 0x3b	; 59
    20c8:	0f 92       	push	r0
    20ca:	2f 93       	push	r18
    20cc:	3f 93       	push	r19
    20ce:	4f 93       	push	r20
    20d0:	5f 93       	push	r21
    20d2:	6f 93       	push	r22
    20d4:	7f 93       	push	r23
    20d6:	8f 93       	push	r24
    20d8:	9f 93       	push	r25
    20da:	af 93       	push	r26
    20dc:	bf 93       	push	r27
    20de:	ef 93       	push	r30
    20e0:	ff 93       	push	r31
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <__vector_12+0x2c>
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    20f0:	80 ff       	sbrs	r24, 0
    20f2:	cd c0       	rjmp	.+410    	; 0x228e <__vector_12+0x1d2>
    20f4:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    20f8:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    20fc:	89 2b       	or	r24, r25
    20fe:	49 f0       	breq	.+18     	; 0x2112 <__vector_12+0x56>
    2100:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    2104:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    210e:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    2112:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    2116:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    211a:	89 2b       	or	r24, r25
    211c:	49 f0       	breq	.+18     	; 0x2130 <__vector_12+0x74>
    211e:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    2122:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c1_timeout_ticks>
    212c:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    2130:	80 91 b7 45 	lds	r24, 0x45B7	; 0x8045b7 <_ZL21g_util_tick_countdown>
    2134:	90 91 b8 45 	lds	r25, 0x45B8	; 0x8045b8 <_ZL21g_util_tick_countdown+0x1>
    2138:	89 2b       	or	r24, r25
    213a:	49 f0       	breq	.+18     	; 0x214e <__vector_12+0x92>
    213c:	80 91 b7 45 	lds	r24, 0x45B7	; 0x8045b7 <_ZL21g_util_tick_countdown>
    2140:	90 91 b8 45 	lds	r25, 0x45B8	; 0x8045b8 <_ZL21g_util_tick_countdown+0x1>
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	80 93 b7 45 	sts	0x45B7, r24	; 0x8045b7 <_ZL21g_util_tick_countdown>
    214a:	90 93 b8 45 	sts	0x45B8, r25	; 0x8045b8 <_ZL21g_util_tick_countdown+0x1>
    214e:	80 91 fa 45 	lds	r24, 0x45FA	; 0x8045fa <g_event_enabled>
    2152:	88 23       	and	r24, r24
    2154:	19 f0       	breq	.+6      	; 0x215c <__vector_12+0xa0>
    2156:	80 91 fb 45 	lds	r24, 0x45FB	; 0x8045fb <g_event_commenced>
    215a:	01 c0       	rjmp	.+2      	; 0x215e <__vector_12+0xa2>
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	88 23       	and	r24, r24
    2160:	09 f4       	brne	.+2      	; 0x2164 <__vector_12+0xa8>
    2162:	92 c0       	rjmp	.+292    	; 0x2288 <__vector_12+0x1cc>
    2164:	80 91 ba 45 	lds	r24, 0x45BA	; 0x8045ba <_ZL12g_on_the_air>
    2168:	90 91 bb 45 	lds	r25, 0x45BB	; 0x8045bb <_ZL12g_on_the_air+0x1>
    216c:	a0 91 bc 45 	lds	r26, 0x45BC	; 0x8045bc <_ZL12g_on_the_air+0x2>
    2170:	b0 91 bd 45 	lds	r27, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x3>
    2174:	18 16       	cp	r1, r24
    2176:	19 06       	cpc	r1, r25
    2178:	1a 06       	cpc	r1, r26
    217a:	1b 06       	cpc	r1, r27
    217c:	0c f0       	brlt	.+2      	; 0x2180 <__vector_12+0xc4>
    217e:	66 c0       	rjmp	.+204    	; 0x224c <__vector_12+0x190>
    2180:	80 91 28 46 	lds	r24, 0x4628	; 0x804628 <_ZZ11__vector_12E7codeInc>
    2184:	90 91 29 46 	lds	r25, 0x4629	; 0x804629 <_ZZ11__vector_12E7codeInc+0x1>
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	09 f4       	brne	.+2      	; 0x218e <__vector_12+0xd2>
    218c:	47 c0       	rjmp	.+142    	; 0x221c <__vector_12+0x160>
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	80 93 28 46 	sts	0x4628, r24	; 0x804628 <_ZZ11__vector_12E7codeInc>
    2194:	90 93 29 46 	sts	0x4629, r25	; 0x804629 <_ZZ11__vector_12E7codeInc+0x1>
    2198:	89 2b       	or	r24, r25
    219a:	09 f0       	breq	.+2      	; 0x219e <__vector_12+0xe2>
    219c:	75 c0       	rjmp	.+234    	; 0x2288 <__vector_12+0x1cc>
    219e:	ae 01       	movw	r20, r28
    21a0:	4f 5f       	subi	r20, 0xFF	; 255
    21a2:	5f 4f       	sbci	r21, 0xFF	; 255
    21a4:	be 01       	movw	r22, r28
    21a6:	6e 5f       	subi	r22, 0xFE	; 254
    21a8:	7f 4f       	sbci	r23, 0xFF	; 255
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_Z9makeMorsePcPbS0_>
    21b2:	80 93 2a 46 	sts	0x462A, r24	; 0x80462a <_ZZ11__vector_12E3key>
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	81 11       	cpse	r24, r1
    21ba:	25 c0       	rjmp	.+74     	; 0x2206 <__vector_12+0x14a>
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	88 23       	and	r24, r24
    21c0:	11 f1       	breq	.+68     	; 0x2206 <__vector_12+0x14a>
    21c2:	8d ef       	ldi	r24, 0xFD	; 253
    21c4:	80 93 b6 45 	sts	0x45B6, r24	; 0x8045b6 <_ZL18g_last_status_code>
    21c8:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    21cc:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_Z13throttleValueh>
    21d0:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    21d4:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	8a 83       	std	Y+2, r24	; 0x02
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	50 e0       	ldi	r21, 0x00	; 0
    21e0:	be 01       	movw	r22, r28
    21e2:	6e 5f       	subi	r22, 0xFE	; 254
    21e4:	7f 4f       	sbci	r23, 0xFF	; 255
    21e6:	84 ec       	ldi	r24, 0xC4	; 196
    21e8:	95 e4       	ldi	r25, 0x45	; 69
    21ea:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_Z9makeMorsePcPbS0_>
    21ee:	ae 01       	movw	r20, r28
    21f0:	4f 5f       	subi	r20, 0xFF	; 255
    21f2:	5f 4f       	sbci	r21, 0xFF	; 255
    21f4:	be 01       	movw	r22, r28
    21f6:	6e 5f       	subi	r22, 0xFE	; 254
    21f8:	7f 4f       	sbci	r23, 0xFF	; 255
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_Z9makeMorsePcPbS0_>
    2202:	80 93 2a 46 	sts	0x462A, r24	; 0x80462a <_ZZ11__vector_12E3key>
    2206:	80 91 2a 46 	lds	r24, 0x462A	; 0x80462a <_ZZ11__vector_12E3key>
    220a:	88 23       	and	r24, r24
    220c:	e9 f1       	breq	.+122    	; 0x2288 <__vector_12+0x1cc>
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	0e 94 af 43 	call	0x875e	; 0x875e <_Z18powerToTransmitterb>
    2214:	89 b1       	in	r24, 0x09	; 9
    2216:	8f 7b       	andi	r24, 0xBF	; 191
    2218:	89 b9       	out	0x09, r24	; 9
    221a:	36 c0       	rjmp	.+108    	; 0x2288 <__vector_12+0x1cc>
    221c:	80 91 2a 46 	lds	r24, 0x462A	; 0x80462a <_ZZ11__vector_12E3key>
    2220:	0e 94 b3 43 	call	0x8766	; 0x8766 <_Z14keyTransmitterb>
    2224:	80 91 2a 46 	lds	r24, 0x462A	; 0x80462a <_ZZ11__vector_12E3key>
    2228:	81 11       	cpse	r24, r1
    222a:	04 c0       	rjmp	.+8      	; 0x2234 <__vector_12+0x178>
    222c:	89 b1       	in	r24, 0x09	; 9
    222e:	80 64       	ori	r24, 0x40	; 64
    2230:	89 b9       	out	0x09, r24	; 9
    2232:	03 c0       	rjmp	.+6      	; 0x223a <__vector_12+0x17e>
    2234:	89 b1       	in	r24, 0x09	; 9
    2236:	8f 7b       	andi	r24, 0xBF	; 191
    2238:	89 b9       	out	0x09, r24	; 9
    223a:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <_ZL15g_code_throttle>
    223e:	90 91 08 40 	lds	r25, 0x4008	; 0x804008 <_ZL15g_code_throttle+0x1>
    2242:	80 93 28 46 	sts	0x4628, r24	; 0x804628 <_ZZ11__vector_12E7codeInc>
    2246:	90 93 29 46 	sts	0x4629, r25	; 0x804629 <_ZZ11__vector_12E7codeInc+0x1>
    224a:	1e c0       	rjmp	.+60     	; 0x2288 <__vector_12+0x1cc>
    224c:	80 91 ba 45 	lds	r24, 0x45BA	; 0x8045ba <_ZL12g_on_the_air>
    2250:	90 91 bb 45 	lds	r25, 0x45BB	; 0x8045bb <_ZL12g_on_the_air+0x1>
    2254:	a0 91 bc 45 	lds	r26, 0x45BC	; 0x8045bc <_ZL12g_on_the_air+0x2>
    2258:	b0 91 bd 45 	lds	r27, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x3>
    225c:	89 2b       	or	r24, r25
    225e:	8a 2b       	or	r24, r26
    2260:	8b 2b       	or	r24, r27
    2262:	91 f4       	brne	.+36     	; 0x2288 <__vector_12+0x1cc>
    2264:	80 91 2a 46 	lds	r24, 0x462A	; 0x80462a <_ZZ11__vector_12E3key>
    2268:	88 23       	and	r24, r24
    226a:	71 f0       	breq	.+28     	; 0x2288 <__vector_12+0x1cc>
    226c:	10 92 2a 46 	sts	0x462A, r1	; 0x80462a <_ZZ11__vector_12E3key>
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	0e 94 b3 43 	call	0x8766	; 0x8766 <_Z14keyTransmitterb>
    2276:	89 b1       	in	r24, 0x09	; 9
    2278:	80 64       	ori	r24, 0x40	; 64
    227a:	89 b9       	out	0x09, r24	; 9
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	0e 94 af 43 	call	0x875e	; 0x875e <_Z18powerToTransmitterb>
    2282:	8e ef       	ldi	r24, 0xFE	; 254
    2284:	80 93 b6 45 	sts	0x45B6, r24	; 0x8045b6 <_ZL18g_last_status_code>
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	df 91       	pop	r29
    2294:	cf 91       	pop	r28
    2296:	ff 91       	pop	r31
    2298:	ef 91       	pop	r30
    229a:	bf 91       	pop	r27
    229c:	af 91       	pop	r26
    229e:	9f 91       	pop	r25
    22a0:	8f 91       	pop	r24
    22a2:	7f 91       	pop	r23
    22a4:	6f 91       	pop	r22
    22a6:	5f 91       	pop	r21
    22a8:	4f 91       	pop	r20
    22aa:	3f 91       	pop	r19
    22ac:	2f 91       	pop	r18
    22ae:	0f 90       	pop	r0
    22b0:	0b be       	out	0x3b, r0	; 59
    22b2:	0f 90       	pop	r0
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	0f 90       	pop	r0
    22b8:	1f 90       	pop	r1
    22ba:	18 95       	reti

000022bc <main>:
    22bc:	0e 94 b1 07 	call	0xf62	; 0xf62 <atmel_start_init>
    22c0:	89 b1       	in	r24, 0x09	; 9
    22c2:	80 64       	ori	r24, 0x40	; 64
    22c4:	89 b9       	out	0x09, r24	; 9
    22c6:	8e e0       	ldi	r24, 0x0E	; 14
    22c8:	96 e4       	ldi	r25, 0x46	; 70
    22ca:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN13EepromManager20initializeEEPROMVarsEv>
    22ce:	8e e0       	ldi	r24, 0x0E	; 14
    22d0:	96 e4       	ldi	r25, 0x46	; 70
    22d2:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <_ZN13EepromManager11readNonVolsEv>
    22d6:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <sb_send_NewLine>
    22da:	87 e4       	ldi	r24, 0x47	; 71
    22dc:	90 e4       	ldi	r25, 0x40	; 64
    22de:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    22e2:	84 e6       	ldi	r24, 0x64	; 100
    22e4:	90 e4       	ldi	r25, 0x40	; 64
    22e6:	9f 93       	push	r25
    22e8:	8f 93       	push	r24
    22ea:	88 e6       	ldi	r24, 0x68	; 104
    22ec:	90 e4       	ldi	r25, 0x40	; 64
    22ee:	9f 93       	push	r25
    22f0:	8f 93       	push	r24
    22f2:	83 e8       	ldi	r24, 0x83	; 131
    22f4:	95 e4       	ldi	r25, 0x45	; 69
    22f6:	9f 93       	push	r25
    22f8:	8f 93       	push	r24
    22fa:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    22fe:	83 e8       	ldi	r24, 0x83	; 131
    2300:	95 e4       	ldi	r25, 0x45	; 69
    2302:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    2306:	85 e7       	ldi	r24, 0x75	; 117
    2308:	90 e4       	ldi	r25, 0x40	; 64
    230a:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>
    2314:	0e 94 63 44 	call	0x88c6	; 0x88c6 <_Z16init_transmitterv>
    2318:	80 93 b5 45 	sts	0x45B5, r24	; 0x8045b5 <_ZL17g_last_error_code>
    231c:	80 91 b5 45 	lds	r24, 0x45B5	; 0x8045b5 <_ZL17g_last_error_code>
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	88 23       	and	r24, r24
    232e:	31 f0       	breq	.+12     	; 0x233c <main+0x80>
    2330:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <sb_send_NewLine>
    2334:	88 eb       	ldi	r24, 0xB8	; 184
    2336:	91 e4       	ldi	r25, 0x41	; 65
    2338:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    233c:	0e 94 57 2e 	call	0x5cae	; 0x5cae <ds3231_init>
    2340:	88 23       	and	r24, r24
    2342:	31 f0       	breq	.+12     	; 0x2350 <main+0x94>
    2344:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <sb_send_NewLine>
    2348:	83 ee       	ldi	r24, 0xE3	; 227
    234a:	91 e4       	ldi	r25, 0x41	; 65
    234c:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    2350:	0e 94 7d 28 	call	0x50fa	; 0x50fa <_Z11wifiPresentv>
    2354:	81 11       	cpse	r24, r1
    2356:	06 c0       	rjmp	.+12     	; 0x2364 <main+0xa8>
    2358:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <sb_send_NewLine>
    235c:	8b e0       	ldi	r24, 0x0B	; 11
    235e:	92 e4       	ldi	r25, 0x42	; 66
    2360:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    2364:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <sb_send_NewLine>
    2368:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <sb_send_NewPrompt>
    236c:	6a ef       	ldi	r22, 0xFA	; 250
    236e:	70 e0       	ldi	r23, 0x00	; 0
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	0e 94 b6 42 	call	0x856c	; 0x856c <util_delay_ms>
    2378:	88 23       	and	r24, r24
    237a:	c1 f3       	breq	.-16     	; 0x236c <main+0xb0>
    237c:	0e 94 46 18 	call	0x308c	; 0x308c <_Z17handleLinkBusMsgsv>
    2380:	0e 94 c3 11 	call	0x2386	; 0x2386 <_Z19handleSerialBusMsgsv>
    2384:	f3 cf       	rjmp	.-26     	; 0x236c <main+0xb0>

00002386 <_Z19handleSerialBusMsgsv>:
    2386:	ef 92       	push	r14
    2388:	ff 92       	push	r15
    238a:	0f 93       	push	r16
    238c:	1f 93       	push	r17
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
    2396:	cd 56       	subi	r28, 0x6D	; 109
    2398:	d1 09       	sbc	r29, r1
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	de bf       	out	0x3e, r29	; 62
    239e:	0e 94 21 3a 	call	0x7442	; 0x7442 <nextFullSBRxBuffer>
    23a2:	8a 87       	std	Y+10, r24	; 0x0a
    23a4:	9b 87       	std	Y+11, r25	; 0x0b
    23a6:	21 e0       	ldi	r18, 0x01	; 1
    23a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ac:	89 2b       	or	r24, r25
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <_Z19handleSerialBusMsgsv+0x2c>
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	22 23       	and	r18, r18
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <_Z19handleSerialBusMsgsv+0x32>
    23b6:	5e c6       	rjmp	.+3260   	; 0x3074 <_Z19handleSerialBusMsgsv+0xcee>
    23b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    23bc:	fc 01       	movw	r30, r24
    23be:	81 81       	ldd	r24, Z+1	; 0x01
    23c0:	92 81       	ldd	r25, Z+2	; 0x02
    23c2:	8c 87       	std	Y+12, r24	; 0x0c
    23c4:	9d 87       	std	Y+13, r25	; 0x0d
    23c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    23c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    23ca:	8a 3e       	cpi	r24, 0xEA	; 234
    23cc:	f2 e2       	ldi	r31, 0x22	; 34
    23ce:	9f 07       	cpc	r25, r31
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <_Z19handleSerialBusMsgsv+0x4e>
    23d2:	4f c3       	rjmp	.+1694   	; 0x2a72 <_Z19handleSerialBusMsgsv+0x6ec>
    23d4:	8b 3e       	cpi	r24, 0xEB	; 235
    23d6:	22 e2       	ldi	r18, 0x22	; 34
    23d8:	92 07       	cpc	r25, r18
    23da:	b8 f4       	brcc	.+46     	; 0x240a <_Z19handleSerialBusMsgsv+0x84>
    23dc:	8f 36       	cpi	r24, 0x6F	; 111
    23de:	ed e1       	ldi	r30, 0x1D	; 29
    23e0:	9e 07       	cpc	r25, r30
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <_Z19handleSerialBusMsgsv+0x60>
    23e4:	98 c3       	rjmp	.+1840   	; 0x2b16 <_Z19handleSerialBusMsgsv+0x790>
    23e6:	80 37       	cpi	r24, 0x70	; 112
    23e8:	fd e1       	ldi	r31, 0x1D	; 29
    23ea:	9f 07       	cpc	r25, r31
    23ec:	28 f4       	brcc	.+10     	; 0x23f8 <_Z19handleSerialBusMsgsv+0x72>
    23ee:	8e 31       	cpi	r24, 0x1E	; 30
    23f0:	93 40       	sbci	r25, 0x03	; 3
    23f2:	09 f4       	brne	.+2      	; 0x23f6 <_Z19handleSerialBusMsgsv+0x70>
    23f4:	2c c2       	rjmp	.+1112   	; 0x284e <_Z19handleSerialBusMsgsv+0x4c8>
    23f6:	2c c6       	rjmp	.+3160   	; 0x3050 <_Z19handleSerialBusMsgsv+0xcca>
    23f8:	86 3c       	cpi	r24, 0xC6	; 198
    23fa:	ee e1       	ldi	r30, 0x1E	; 30
    23fc:	9e 07       	cpc	r25, r30
    23fe:	e9 f0       	breq	.+58     	; 0x243a <_Z19handleSerialBusMsgsv+0xb4>
    2400:	81 3d       	cpi	r24, 0xD1	; 209
    2402:	9e 41       	sbci	r25, 0x1E	; 30
    2404:	09 f4       	brne	.+2      	; 0x2408 <_Z19handleSerialBusMsgsv+0x82>
    2406:	7b c1       	rjmp	.+758    	; 0x26fe <_Z19handleSerialBusMsgsv+0x378>
    2408:	23 c6       	rjmp	.+3142   	; 0x3050 <_Z19handleSerialBusMsgsv+0xcca>
    240a:	82 37       	cpi	r24, 0x72	; 114
    240c:	23 e2       	ldi	r18, 0x23	; 35
    240e:	92 07       	cpc	r25, r18
    2410:	09 f4       	brne	.+2      	; 0x2414 <_Z19handleSerialBusMsgsv+0x8e>
    2412:	ab c2       	rjmp	.+1366   	; 0x296a <_Z19handleSerialBusMsgsv+0x5e4>
    2414:	83 37       	cpi	r24, 0x73	; 115
    2416:	e3 e2       	ldi	r30, 0x23	; 35
    2418:	9e 07       	cpc	r25, r30
    241a:	28 f4       	brcc	.+10     	; 0x2426 <_Z19handleSerialBusMsgsv+0xa0>
    241c:	88 3f       	cpi	r24, 0xF8	; 248
    241e:	92 42       	sbci	r25, 0x22	; 34
    2420:	09 f4       	brne	.+2      	; 0x2424 <_Z19handleSerialBusMsgsv+0x9e>
    2422:	0a c1       	rjmp	.+532    	; 0x2638 <_Z19handleSerialBusMsgsv+0x2b2>
    2424:	15 c6       	rjmp	.+3114   	; 0x3050 <_Z19handleSerialBusMsgsv+0xcca>
    2426:	84 33       	cpi	r24, 0x34	; 52
    2428:	24 e2       	ldi	r18, 0x24	; 36
    242a:	92 07       	cpc	r25, r18
    242c:	09 f4       	brne	.+2      	; 0x2430 <_Z19handleSerialBusMsgsv+0xaa>
    242e:	d3 c1       	rjmp	.+934    	; 0x27d6 <_Z19handleSerialBusMsgsv+0x450>
    2430:	85 3c       	cpi	r24, 0xC5	; 197
    2432:	94 42       	sbci	r25, 0x24	; 36
    2434:	09 f4       	brne	.+2      	; 0x2438 <_Z19handleSerialBusMsgsv+0xb2>
    2436:	f8 c5       	rjmp	.+3056   	; 0x3028 <_Z19handleSerialBusMsgsv+0xca2>
    2438:	0b c6       	rjmp	.+3094   	; 0x3050 <_Z19handleSerialBusMsgsv+0xcca>
    243a:	8a 85       	ldd	r24, Y+10	; 0x0a
    243c:	9b 85       	ldd	r25, Y+11	; 0x0b
    243e:	fc 01       	movw	r30, r24
    2440:	83 81       	ldd	r24, Z+3	; 0x03
    2442:	88 2f       	mov	r24, r24
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	9a 83       	std	Y+2, r25	; 0x02
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	9a 81       	ldd	r25, Y+2	; 0x02
    244e:	89 2b       	or	r24, r25
    2450:	09 f4       	brne	.+2      	; 0x2454 <_Z19handleSerialBusMsgsv+0xce>
    2452:	d0 c0       	rjmp	.+416    	; 0x25f4 <_Z19handleSerialBusMsgsv+0x26e>
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	9a 81       	ldd	r25, Y+2	; 0x02
    2458:	82 34       	cpi	r24, 0x42	; 66
    245a:	91 05       	cpc	r25, r1
    245c:	19 f4       	brne	.+6      	; 0x2464 <_Z19handleSerialBusMsgsv+0xde>
    245e:	19 82       	std	Y+1, r1	; 0x01
    2460:	1a 82       	std	Y+2, r1	; 0x02
    2462:	ac c0       	rjmp	.+344    	; 0x25bc <_Z19handleSerialBusMsgsv+0x236>
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	9a 81       	ldd	r25, Y+2	; 0x02
    2468:	86 34       	cpi	r24, 0x46	; 70
    246a:	91 05       	cpc	r25, r1
    246c:	29 f4       	brne	.+10     	; 0x2478 <_Z19handleSerialBusMsgsv+0xf2>
    246e:	86 e0       	ldi	r24, 0x06	; 6
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	89 83       	std	Y+1, r24	; 0x01
    2474:	9a 83       	std	Y+2, r25	; 0x02
    2476:	a2 c0       	rjmp	.+324    	; 0x25bc <_Z19handleSerialBusMsgsv+0x236>
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	9a 81       	ldd	r25, Y+2	; 0x02
    247c:	83 34       	cpi	r24, 0x43	; 67
    247e:	91 05       	cpc	r25, r1
    2480:	b9 f5       	brne	.+110    	; 0x24f0 <_Z19handleSerialBusMsgsv+0x16a>
    2482:	8a 85       	ldd	r24, Y+10	; 0x0a
    2484:	9b 85       	ldd	r25, Y+11	; 0x0b
    2486:	fc 01       	movw	r30, r24
    2488:	87 89       	ldd	r24, Z+23	; 0x17
    248a:	8b 83       	std	Y+3, r24	; 0x03
    248c:	8a 85       	ldd	r24, Y+10	; 0x0a
    248e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2490:	fc 01       	movw	r30, r24
    2492:	10 8e       	std	Z+24, r1	; 0x18
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	82 34       	cpi	r24, 0x42	; 66
    2498:	11 f4       	brne	.+4      	; 0x249e <_Z19handleSerialBusMsgsv+0x118>
    249a:	80 e3       	ldi	r24, 0x30	; 48
    249c:	8b 83       	std	Y+3, r24	; 0x03
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	88 2f       	mov	r24, r24
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	c0 97       	sbiw	r24, 0x30	; 48
    24a6:	0a 97       	sbiw	r24, 0x0a	; 10
    24a8:	08 f0       	brcs	.+2      	; 0x24ac <_Z19handleSerialBusMsgsv+0x126>
    24aa:	88 c0       	rjmp	.+272    	; 0x25bc <_Z19handleSerialBusMsgsv+0x236>
    24ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    24ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    24b0:	47 96       	adiw	r24, 0x17	; 23
    24b2:	0e 94 12 4a 	call	0x9424	; 0x9424 <atoi>
    24b6:	8e 87       	std	Y+14, r24	; 0x0e
    24b8:	9f 87       	std	Y+15, r25	; 0x0f
    24ba:	18 8a       	std	Y+16, r1	; 0x10
    24bc:	85 e0       	ldi	r24, 0x05	; 5
    24be:	89 8b       	std	Y+17, r24	; 0x11
    24c0:	89 89       	ldd	r24, Y+17	; 0x11
    24c2:	28 2f       	mov	r18, r24
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    24c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    24ca:	28 17       	cp	r18, r24
    24cc:	39 07       	cpc	r19, r25
    24ce:	24 f4       	brge	.+8      	; 0x24d8 <_Z19handleSerialBusMsgsv+0x152>
    24d0:	89 89       	ldd	r24, Y+17	; 0x11
    24d2:	88 2f       	mov	r24, r24
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	09 c0       	rjmp	.+18     	; 0x24ea <_Z19handleSerialBusMsgsv+0x164>
    24d8:	88 89       	ldd	r24, Y+16	; 0x10
    24da:	88 2f       	mov	r24, r24
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	2e 85       	ldd	r18, Y+14	; 0x0e
    24e0:	3f 85       	ldd	r19, Y+15	; 0x0f
    24e2:	82 17       	cp	r24, r18
    24e4:	93 07       	cpc	r25, r19
    24e6:	0c f4       	brge	.+2      	; 0x24ea <_Z19handleSerialBusMsgsv+0x164>
    24e8:	c9 01       	movw	r24, r18
    24ea:	89 83       	std	Y+1, r24	; 0x01
    24ec:	9a 83       	std	Y+2, r25	; 0x02
    24ee:	66 c0       	rjmp	.+204    	; 0x25bc <_Z19handleSerialBusMsgsv+0x236>
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	9a 81       	ldd	r25, Y+2	; 0x02
    24f4:	83 35       	cpi	r24, 0x53	; 83
    24f6:	91 05       	cpc	r25, r1
    24f8:	09 f0       	breq	.+2      	; 0x24fc <_Z19handleSerialBusMsgsv+0x176>
    24fa:	59 c0       	rjmp	.+178    	; 0x25ae <_Z19handleSerialBusMsgsv+0x228>
    24fc:	1c 82       	std	Y+4, r1	; 0x04
    24fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2500:	9b 85       	ldd	r25, Y+11	; 0x0b
    2502:	fc 01       	movw	r30, r24
    2504:	87 89       	ldd	r24, Z+23	; 0x17
    2506:	8a 8b       	std	Y+18, r24	; 0x12
    2508:	8a 85       	ldd	r24, Y+10	; 0x0a
    250a:	9b 85       	ldd	r25, Y+11	; 0x0b
    250c:	fc 01       	movw	r30, r24
    250e:	80 8d       	ldd	r24, Z+24	; 0x18
    2510:	8b 8b       	std	Y+19, r24	; 0x13
    2512:	8a 85       	ldd	r24, Y+10	; 0x0a
    2514:	9b 85       	ldd	r25, Y+11	; 0x0b
    2516:	fc 01       	movw	r30, r24
    2518:	11 8e       	std	Z+25, r1	; 0x19
    251a:	8a 89       	ldd	r24, Y+18	; 0x12
    251c:	82 34       	cpi	r24, 0x42	; 66
    251e:	11 f4       	brne	.+4      	; 0x2524 <_Z19handleSerialBusMsgsv+0x19e>
    2520:	1c 82       	std	Y+4, r1	; 0x04
    2522:	36 c0       	rjmp	.+108    	; 0x2590 <_Z19handleSerialBusMsgsv+0x20a>
    2524:	8a 89       	ldd	r24, Y+18	; 0x12
    2526:	86 34       	cpi	r24, 0x46	; 70
    2528:	51 f4       	brne	.+20     	; 0x253e <_Z19handleSerialBusMsgsv+0x1b8>
    252a:	8b 89       	ldd	r24, Y+19	; 0x13
    252c:	81 33       	cpi	r24, 0x31	; 49
    252e:	80 f1       	brcs	.+96     	; 0x2590 <_Z19handleSerialBusMsgsv+0x20a>
    2530:	8b 89       	ldd	r24, Y+19	; 0x13
    2532:	86 33       	cpi	r24, 0x36	; 54
    2534:	68 f5       	brcc	.+90     	; 0x2590 <_Z19handleSerialBusMsgsv+0x20a>
    2536:	8b 89       	ldd	r24, Y+19	; 0x13
    2538:	84 52       	subi	r24, 0x24	; 36
    253a:	8c 83       	std	Y+4, r24	; 0x04
    253c:	29 c0       	rjmp	.+82     	; 0x2590 <_Z19handleSerialBusMsgsv+0x20a>
    253e:	8a 89       	ldd	r24, Y+18	; 0x12
    2540:	83 35       	cpi	r24, 0x53	; 83
    2542:	69 f4       	brne	.+26     	; 0x255e <_Z19handleSerialBusMsgsv+0x1d8>
    2544:	8b 89       	ldd	r24, Y+19	; 0x13
    2546:	81 33       	cpi	r24, 0x31	; 49
    2548:	38 f0       	brcs	.+14     	; 0x2558 <_Z19handleSerialBusMsgsv+0x1d2>
    254a:	8b 89       	ldd	r24, Y+19	; 0x13
    254c:	86 33       	cpi	r24, 0x36	; 54
    254e:	20 f4       	brcc	.+8      	; 0x2558 <_Z19handleSerialBusMsgsv+0x1d2>
    2550:	8b 89       	ldd	r24, Y+19	; 0x13
    2552:	89 52       	subi	r24, 0x29	; 41
    2554:	8c 83       	std	Y+4, r24	; 0x04
    2556:	1c c0       	rjmp	.+56     	; 0x2590 <_Z19handleSerialBusMsgsv+0x20a>
    2558:	87 e0       	ldi	r24, 0x07	; 7
    255a:	8c 83       	std	Y+4, r24	; 0x04
    255c:	19 c0       	rjmp	.+50     	; 0x2590 <_Z19handleSerialBusMsgsv+0x20a>
    255e:	8b 89       	ldd	r24, Y+19	; 0x13
    2560:	86 34       	cpi	r24, 0x46	; 70
    2562:	51 f4       	brne	.+20     	; 0x2578 <_Z19handleSerialBusMsgsv+0x1f2>
    2564:	8a 89       	ldd	r24, Y+18	; 0x12
    2566:	81 33       	cpi	r24, 0x31	; 49
    2568:	98 f0       	brcs	.+38     	; 0x2590 <_Z19handleSerialBusMsgsv+0x20a>
    256a:	8a 89       	ldd	r24, Y+18	; 0x12
    256c:	86 33       	cpi	r24, 0x36	; 54
    256e:	80 f4       	brcc	.+32     	; 0x2590 <_Z19handleSerialBusMsgsv+0x20a>
    2570:	8a 89       	ldd	r24, Y+18	; 0x12
    2572:	84 52       	subi	r24, 0x24	; 36
    2574:	8c 83       	std	Y+4, r24	; 0x04
    2576:	0c c0       	rjmp	.+24     	; 0x2590 <_Z19handleSerialBusMsgsv+0x20a>
    2578:	8b 89       	ldd	r24, Y+19	; 0x13
    257a:	83 35       	cpi	r24, 0x53	; 83
    257c:	49 f4       	brne	.+18     	; 0x2590 <_Z19handleSerialBusMsgsv+0x20a>
    257e:	8a 89       	ldd	r24, Y+18	; 0x12
    2580:	81 33       	cpi	r24, 0x31	; 49
    2582:	30 f0       	brcs	.+12     	; 0x2590 <_Z19handleSerialBusMsgsv+0x20a>
    2584:	8a 89       	ldd	r24, Y+18	; 0x12
    2586:	86 33       	cpi	r24, 0x36	; 54
    2588:	18 f4       	brcc	.+6      	; 0x2590 <_Z19handleSerialBusMsgsv+0x20a>
    258a:	8a 89       	ldd	r24, Y+18	; 0x12
    258c:	89 52       	subi	r24, 0x29	; 41
    258e:	8c 83       	std	Y+4, r24	; 0x04
    2590:	8c 81       	ldd	r24, Y+4	; 0x04
    2592:	87 30       	cpi	r24, 0x07	; 7
    2594:	48 f0       	brcs	.+18     	; 0x25a8 <_Z19handleSerialBusMsgsv+0x222>
    2596:	8c 81       	ldd	r24, Y+4	; 0x04
    2598:	82 31       	cpi	r24, 0x12	; 18
    259a:	30 f4       	brcc	.+12     	; 0x25a8 <_Z19handleSerialBusMsgsv+0x222>
    259c:	8c 81       	ldd	r24, Y+4	; 0x04
    259e:	88 2f       	mov	r24, r24
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	9a 83       	std	Y+2, r25	; 0x02
    25a6:	0a c0       	rjmp	.+20     	; 0x25bc <_Z19handleSerialBusMsgsv+0x236>
    25a8:	19 82       	std	Y+1, r1	; 0x01
    25aa:	1a 82       	std	Y+2, r1	; 0x02
    25ac:	07 c0       	rjmp	.+14     	; 0x25bc <_Z19handleSerialBusMsgsv+0x236>
    25ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    25b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    25b2:	03 96       	adiw	r24, 0x03	; 3
    25b4:	0e 94 12 4a 	call	0x9424	; 0x9424 <atoi>
    25b8:	89 83       	std	Y+1, r24	; 0x01
    25ba:	9a 83       	std	Y+2, r25	; 0x02
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	9a 81       	ldd	r25, Y+2	; 0x02
    25c0:	99 23       	and	r25, r25
    25c2:	c4 f0       	brlt	.+48     	; 0x25f4 <_Z19handleSerialBusMsgsv+0x26e>
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	9a 81       	ldd	r25, Y+2	; 0x02
    25c8:	42 97       	sbiw	r24, 0x12	; 18
    25ca:	a4 f4       	brge	.+40     	; 0x25f4 <_Z19handleSerialBusMsgsv+0x26e>
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	8e ab       	std	Y+54, r24	; 0x36
    25d0:	ce 01       	movw	r24, r28
    25d2:	c6 96       	adiw	r24, 0x36	; 54
    25d4:	ac 01       	movw	r20, r24
    25d6:	69 e2       	ldi	r22, 0x29	; 41
    25d8:	8e e0       	ldi	r24, 0x0E	; 14
    25da:	96 e4       	ldi	r25, 0x46	; 70
    25dc:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    25e0:	9e a9       	ldd	r25, Y+54	; 0x36
    25e2:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    25e6:	98 17       	cp	r25, r24
    25e8:	29 f0       	breq	.+10     	; 0x25f4 <_Z19handleSerialBusMsgsv+0x26e>
    25ea:	ce 01       	movw	r24, r28
    25ec:	c6 96       	adiw	r24, 0x36	; 54
    25ee:	60 e0       	ldi	r22, 0x00	; 0
    25f0:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>
    25f4:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    25f8:	88 2f       	mov	r24, r24
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	29 2f       	mov	r18, r25
    25fe:	2f 93       	push	r18
    2600:	8f 93       	push	r24
    2602:	80 e3       	ldi	r24, 0x30	; 48
    2604:	92 e4       	ldi	r25, 0x42	; 66
    2606:	89 2f       	mov	r24, r25
    2608:	8f 93       	push	r24
    260a:	80 e3       	ldi	r24, 0x30	; 48
    260c:	92 e4       	ldi	r25, 0x42	; 66
    260e:	8f 93       	push	r24
    2610:	83 e8       	ldi	r24, 0x83	; 131
    2612:	95 e4       	ldi	r25, 0x45	; 69
    2614:	89 2f       	mov	r24, r25
    2616:	8f 93       	push	r24
    2618:	83 e8       	ldi	r24, 0x83	; 131
    261a:	95 e4       	ldi	r25, 0x45	; 69
    261c:	8f 93       	push	r24
    261e:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	83 e8       	ldi	r24, 0x83	; 131
    2630:	95 e4       	ldi	r25, 0x45	; 69
    2632:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    2636:	16 c5       	rjmp	.+2604   	; 0x3064 <_Z19handleSerialBusMsgsv+0xcde>
    2638:	8a 85       	ldd	r24, Y+10	; 0x0a
    263a:	9b 85       	ldd	r25, Y+11	; 0x0b
    263c:	fc 01       	movw	r30, r24
    263e:	83 81       	ldd	r24, Z+3	; 0x03
    2640:	88 23       	and	r24, r24
    2642:	e9 f1       	breq	.+122    	; 0x26be <_Z19handleSerialBusMsgsv+0x338>
    2644:	8a 85       	ldd	r24, Y+10	; 0x0a
    2646:	9b 85       	ldd	r25, Y+11	; 0x0b
    2648:	03 96       	adiw	r24, 0x03	; 3
    264a:	0e 94 12 4a 	call	0x9424	; 0x9424 <atoi>
    264e:	80 93 2b 46 	sts	0x462B, r24	; 0x80462b <_ZZ19handleSerialBusMsgsvE6pwr_mW>
    2652:	90 93 2c 46 	sts	0x462C, r25	; 0x80462c <_ZZ19handleSerialBusMsgsvE6pwr_mW+0x1>
    2656:	80 91 2b 46 	lds	r24, 0x462B	; 0x80462b <_ZZ19handleSerialBusMsgsvE6pwr_mW>
    265a:	90 91 2c 46 	lds	r25, 0x462C	; 0x80462c <_ZZ19handleSerialBusMsgsvE6pwr_mW+0x1>
    265e:	89 38       	cpi	r24, 0x89	; 137
    2660:	93 41       	sbci	r25, 0x13	; 19
    2662:	68 f4       	brcc	.+26     	; 0x267e <_Z19handleSerialBusMsgsv+0x2f8>
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	70 e0       	ldi	r23, 0x00	; 0
    2668:	8b e2       	ldi	r24, 0x2B	; 43
    266a:	96 e4       	ldi	r25, 0x46	; 70
    266c:	0e 94 d5 43 	call	0x87aa	; 0x87aa <_Z15txSetParametersPjPb>
    2670:	8c 8b       	std	Y+20, r24	; 0x14
    2672:	8c 89       	ldd	r24, Y+20	; 0x14
    2674:	88 23       	and	r24, r24
    2676:	19 f0       	breq	.+6      	; 0x267e <_Z19handleSerialBusMsgsv+0x2f8>
    2678:	8c 89       	ldd	r24, Y+20	; 0x14
    267a:	80 93 b5 45 	sts	0x45B5, r24	; 0x8045b5 <_ZL17g_last_error_code>
    267e:	0e 94 d0 43 	call	0x87a0	; 0x87a0 <_Z12txGetPowerMwv>
    2682:	29 2f       	mov	r18, r25
    2684:	2f 93       	push	r18
    2686:	8f 93       	push	r24
    2688:	88 e3       	ldi	r24, 0x38	; 56
    268a:	92 e4       	ldi	r25, 0x42	; 66
    268c:	89 2f       	mov	r24, r25
    268e:	8f 93       	push	r24
    2690:	88 e3       	ldi	r24, 0x38	; 56
    2692:	92 e4       	ldi	r25, 0x42	; 66
    2694:	8f 93       	push	r24
    2696:	83 e8       	ldi	r24, 0x83	; 131
    2698:	95 e4       	ldi	r25, 0x45	; 69
    269a:	89 2f       	mov	r24, r25
    269c:	8f 93       	push	r24
    269e:	83 e8       	ldi	r24, 0x83	; 131
    26a0:	95 e4       	ldi	r25, 0x45	; 69
    26a2:	8f 93       	push	r24
    26a4:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	83 e8       	ldi	r24, 0x83	; 131
    26b6:	95 e4       	ldi	r25, 0x45	; 69
    26b8:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    26bc:	d3 c4       	rjmp	.+2470   	; 0x3064 <_Z19handleSerialBusMsgsv+0xcde>
    26be:	0e 94 d0 43 	call	0x87a0	; 0x87a0 <_Z12txGetPowerMwv>
    26c2:	29 2f       	mov	r18, r25
    26c4:	2f 93       	push	r18
    26c6:	8f 93       	push	r24
    26c8:	88 e3       	ldi	r24, 0x38	; 56
    26ca:	92 e4       	ldi	r25, 0x42	; 66
    26cc:	89 2f       	mov	r24, r25
    26ce:	8f 93       	push	r24
    26d0:	88 e3       	ldi	r24, 0x38	; 56
    26d2:	92 e4       	ldi	r25, 0x42	; 66
    26d4:	8f 93       	push	r24
    26d6:	83 e8       	ldi	r24, 0x83	; 131
    26d8:	95 e4       	ldi	r25, 0x45	; 69
    26da:	89 2f       	mov	r24, r25
    26dc:	8f 93       	push	r24
    26de:	83 e8       	ldi	r24, 0x83	; 131
    26e0:	95 e4       	ldi	r25, 0x45	; 69
    26e2:	8f 93       	push	r24
    26e4:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	83 e8       	ldi	r24, 0x83	; 131
    26f6:	95 e4       	ldi	r25, 0x45	; 69
    26f8:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    26fc:	b3 c4       	rjmp	.+2406   	; 0x3064 <_Z19handleSerialBusMsgsv+0xcde>
    26fe:	1d 82       	std	Y+5, r1	; 0x05
    2700:	1e 82       	std	Y+6, r1	; 0x06
    2702:	1f 82       	std	Y+7, r1	; 0x07
    2704:	18 86       	std	Y+8, r1	; 0x08
    2706:	8a 85       	ldd	r24, Y+10	; 0x0a
    2708:	9b 85       	ldd	r25, Y+11	; 0x0b
    270a:	fc 01       	movw	r30, r24
    270c:	83 81       	ldd	r24, Z+3	; 0x03
    270e:	88 23       	and	r24, r24
    2710:	79 f1       	breq	.+94     	; 0x2770 <_Z19handleSerialBusMsgsv+0x3ea>
    2712:	8a 85       	ldd	r24, Y+10	; 0x0a
    2714:	9b 85       	ldd	r25, Y+11	; 0x0b
    2716:	03 96       	adiw	r24, 0x03	; 3
    2718:	0e 94 30 4a 	call	0x9460	; 0x9460 <atol>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	8d 8b       	std	Y+21, r24	; 0x15
    2722:	9e 8b       	std	Y+22, r25	; 0x16
    2724:	af 8b       	std	Y+23, r26	; 0x17
    2726:	b8 8f       	std	Y+24, r27	; 0x18
    2728:	8d 89       	ldd	r24, Y+21	; 0x15
    272a:	9e 89       	ldd	r25, Y+22	; 0x16
    272c:	af 89       	ldd	r26, Y+23	; 0x17
    272e:	b8 8d       	ldd	r27, Y+24	; 0x18
    2730:	8f ab       	std	Y+55, r24	; 0x37
    2732:	98 af       	std	Y+56, r25	; 0x38
    2734:	a9 af       	std	Y+57, r26	; 0x39
    2736:	ba af       	std	Y+58, r27	; 0x3a
    2738:	ce 01       	movw	r24, r28
    273a:	c7 96       	adiw	r24, 0x37	; 55
    273c:	61 e0       	ldi	r22, 0x01	; 1
    273e:	0e 94 74 43 	call	0x86e8	; 0x86e8 <_Z14txSetFrequencyPmb>
    2742:	98 2f       	mov	r25, r24
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	89 27       	eor	r24, r25
    2748:	88 23       	and	r24, r24
    274a:	69 f0       	breq	.+26     	; 0x2766 <_Z19handleSerialBusMsgsv+0x3e0>
    274c:	8f a9       	ldd	r24, Y+55	; 0x37
    274e:	98 ad       	ldd	r25, Y+56	; 0x38
    2750:	a9 ad       	ldd	r26, Y+57	; 0x39
    2752:	ba ad       	ldd	r27, Y+58	; 0x3a
    2754:	8d 83       	std	Y+5, r24	; 0x05
    2756:	9e 83       	std	Y+6, r25	; 0x06
    2758:	af 83       	std	Y+7, r26	; 0x07
    275a:	b8 87       	std	Y+8, r27	; 0x08
    275c:	8e e0       	ldi	r24, 0x0E	; 14
    275e:	96 e4       	ldi	r25, 0x46	; 70
    2760:	0e 94 1c 30 	call	0x6038	; 0x6038 <_ZN13EepromManager13saveAllEEPROMEv>
    2764:	0d c0       	rjmp	.+26     	; 0x2780 <_Z19handleSerialBusMsgsv+0x3fa>
    2766:	88 eb       	ldi	r24, 0xB8	; 184
    2768:	91 e4       	ldi	r25, 0x41	; 65
    276a:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    276e:	08 c0       	rjmp	.+16     	; 0x2780 <_Z19handleSerialBusMsgsv+0x3fa>
    2770:	0e 94 a6 43 	call	0x874c	; 0x874c <_Z14txGetFrequencyv>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	8d 83       	std	Y+5, r24	; 0x05
    277a:	9e 83       	std	Y+6, r25	; 0x06
    277c:	af 83       	std	Y+7, r26	; 0x07
    277e:	b8 87       	std	Y+8, r27	; 0x08
    2780:	8d 81       	ldd	r24, Y+5	; 0x05
    2782:	9e 81       	ldd	r25, Y+6	; 0x06
    2784:	af 81       	ldd	r26, Y+7	; 0x07
    2786:	b8 85       	ldd	r27, Y+8	; 0x08
    2788:	89 2b       	or	r24, r25
    278a:	8a 2b       	or	r24, r26
    278c:	8b 2b       	or	r24, r27
    278e:	09 f4       	brne	.+2      	; 0x2792 <_Z19handleSerialBusMsgsv+0x40c>
    2790:	64 c4       	rjmp	.+2248   	; 0x305a <_Z19handleSerialBusMsgsv+0xcd4>
    2792:	88 85       	ldd	r24, Y+8	; 0x08
    2794:	8f 93       	push	r24
    2796:	8f 81       	ldd	r24, Y+7	; 0x07
    2798:	8f 93       	push	r24
    279a:	8e 81       	ldd	r24, Y+6	; 0x06
    279c:	8f 93       	push	r24
    279e:	8d 81       	ldd	r24, Y+5	; 0x05
    27a0:	8f 93       	push	r24
    27a2:	83 e4       	ldi	r24, 0x43	; 67
    27a4:	92 e4       	ldi	r25, 0x42	; 66
    27a6:	89 2f       	mov	r24, r25
    27a8:	8f 93       	push	r24
    27aa:	83 e4       	ldi	r24, 0x43	; 67
    27ac:	92 e4       	ldi	r25, 0x42	; 66
    27ae:	8f 93       	push	r24
    27b0:	83 e8       	ldi	r24, 0x83	; 131
    27b2:	95 e4       	ldi	r25, 0x45	; 69
    27b4:	89 2f       	mov	r24, r25
    27b6:	8f 93       	push	r24
    27b8:	83 e8       	ldi	r24, 0x83	; 131
    27ba:	95 e4       	ldi	r25, 0x45	; 69
    27bc:	8f 93       	push	r24
    27be:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    27c2:	8d b7       	in	r24, 0x3d	; 61
    27c4:	9e b7       	in	r25, 0x3e	; 62
    27c6:	08 96       	adiw	r24, 0x08	; 8
    27c8:	cd bf       	out	0x3d, r28	; 61
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	83 e8       	ldi	r24, 0x83	; 131
    27ce:	95 e4       	ldi	r25, 0x45	; 69
    27d0:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    27d4:	42 c4       	rjmp	.+2180   	; 0x305a <_Z19handleSerialBusMsgsv+0xcd4>
    27d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    27d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    27da:	fc 01       	movw	r30, r24
    27dc:	83 81       	ldd	r24, Z+3	; 0x03
    27de:	88 23       	and	r24, r24
    27e0:	89 f1       	breq	.+98     	; 0x2844 <_Z19handleSerialBusMsgsv+0x4be>
    27e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    27e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    27e6:	fc 01       	movw	r30, r24
    27e8:	83 81       	ldd	r24, Z+3	; 0x03
    27ea:	80 33       	cpi	r24, 0x30	; 48
    27ec:	21 f4       	brne	.+8      	; 0x27f6 <_Z19handleSerialBusMsgsv+0x470>
    27ee:	82 e0       	ldi	r24, 0x02	; 2
    27f0:	0e 94 fe 21 	call	0x43fc	; 0x43fc <_Z12stopEventNow19EventActionSource_t>
    27f4:	37 c4       	rjmp	.+2158   	; 0x3064 <_Z19handleSerialBusMsgsv+0xcde>
    27f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    27f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    27fa:	fc 01       	movw	r30, r24
    27fc:	83 81       	ldd	r24, Z+3	; 0x03
    27fe:	81 33       	cpi	r24, 0x31	; 49
    2800:	21 f4       	brne	.+8      	; 0x280a <_Z19handleSerialBusMsgsv+0x484>
    2802:	82 e0       	ldi	r24, 0x02	; 2
    2804:	0e 94 ad 21 	call	0x435a	; 0x435a <_Z13startEventNow19EventActionSource_t>
    2808:	2d c4       	rjmp	.+2138   	; 0x3064 <_Z19handleSerialBusMsgsv+0xcde>
    280a:	8a 85       	ldd	r24, Y+10	; 0x0a
    280c:	9b 85       	ldd	r25, Y+11	; 0x0b
    280e:	fc 01       	movw	r30, r24
    2810:	83 81       	ldd	r24, Z+3	; 0x03
    2812:	82 33       	cpi	r24, 0x32	; 50
    2814:	31 f4       	brne	.+12     	; 0x2822 <_Z19handleSerialBusMsgsv+0x49c>
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
    281c:	0e 94 24 22 	call	0x4448	; 0x4448 <_Z18startEventUsingRTCv>
    2820:	21 c4       	rjmp	.+2114   	; 0x3064 <_Z19handleSerialBusMsgsv+0xcde>
    2822:	8a 85       	ldd	r24, Y+10	; 0x0a
    2824:	9b 85       	ldd	r25, Y+11	; 0x0b
    2826:	fc 01       	movw	r30, r24
    2828:	83 81       	ldd	r24, Z+3	; 0x03
    282a:	83 33       	cpi	r24, 0x33	; 51
    282c:	31 f4       	brne	.+12     	; 0x283a <_Z19handleSerialBusMsgsv+0x4b4>
    282e:	62 e0       	ldi	r22, 0x02	; 2
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2838:	15 c4       	rjmp	.+2090   	; 0x3064 <_Z19handleSerialBusMsgsv+0xcde>
    283a:	8f e4       	ldi	r24, 0x4F	; 79
    283c:	92 e4       	ldi	r25, 0x42	; 66
    283e:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    2842:	10 c4       	rjmp	.+2080   	; 0x3064 <_Z19handleSerialBusMsgsv+0xcde>
    2844:	8f e4       	ldi	r24, 0x4F	; 79
    2846:	92 e4       	ldi	r25, 0x42	; 66
    2848:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    284c:	0b c4       	rjmp	.+2070   	; 0x3064 <_Z19handleSerialBusMsgsv+0xcde>
    284e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2850:	9b 85       	ldd	r25, Y+11	; 0x0b
    2852:	fc 01       	movw	r30, r24
    2854:	83 81       	ldd	r24, Z+3	; 0x03
    2856:	88 23       	and	r24, r24
    2858:	09 f4       	brne	.+2      	; 0x285c <_Z19handleSerialBusMsgsv+0x4d6>
    285a:	41 c0       	rjmp	.+130    	; 0x28de <_Z19handleSerialBusMsgsv+0x558>
    285c:	80 e2       	ldi	r24, 0x20	; 32
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	80 93 83 45 	sts	0x4583, r24	; 0x804583 <_ZL9g_tempStr>
    2864:	90 93 84 45 	sts	0x4584, r25	; 0x804584 <_ZL9g_tempStr+0x1>
    2868:	8a 85       	ldd	r24, Y+10	; 0x0a
    286a:	9b 85       	ldd	r25, Y+11	; 0x0b
    286c:	03 96       	adiw	r24, 0x03	; 3
    286e:	bc 01       	movw	r22, r24
    2870:	83 e8       	ldi	r24, 0x83	; 131
    2872:	95 e4       	ldi	r25, 0x45	; 69
    2874:	0e 94 5f 4a 	call	0x94be	; 0x94be <strcat>
    2878:	8a 85       	ldd	r24, Y+10	; 0x0a
    287a:	9b 85       	ldd	r25, Y+11	; 0x0b
    287c:	fc 01       	movw	r30, r24
    287e:	87 89       	ldd	r24, Z+23	; 0x17
    2880:	88 23       	and	r24, r24
    2882:	d1 f0       	breq	.+52     	; 0x28b8 <_Z19handleSerialBusMsgsv+0x532>
    2884:	83 e8       	ldi	r24, 0x83	; 131
    2886:	95 e4       	ldi	r25, 0x45	; 69
    2888:	9c 01       	movw	r18, r24
    288a:	f9 01       	movw	r30, r18
    288c:	01 90       	ld	r0, Z+
    288e:	00 20       	and	r0, r0
    2890:	e9 f7       	brne	.-6      	; 0x288c <_Z19handleSerialBusMsgsv+0x506>
    2892:	cf 01       	movw	r24, r30
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	82 1b       	sub	r24, r18
    2898:	93 0b       	sbc	r25, r19
    289a:	8d 57       	subi	r24, 0x7D	; 125
    289c:	9a 4b       	sbci	r25, 0xBA	; 186
    289e:	20 e2       	ldi	r18, 0x20	; 32
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	fc 01       	movw	r30, r24
    28a4:	20 83       	st	Z, r18
    28a6:	31 83       	std	Z+1, r19	; 0x01
    28a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    28aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    28ac:	47 96       	adiw	r24, 0x17	; 23
    28ae:	bc 01       	movw	r22, r24
    28b0:	83 e8       	ldi	r24, 0x83	; 131
    28b2:	95 e4       	ldi	r25, 0x45	; 69
    28b4:	0e 94 5f 4a 	call	0x94be	; 0x94be <strcat>
    28b8:	83 e8       	ldi	r24, 0x83	; 131
    28ba:	95 e4       	ldi	r25, 0x45	; 69
    28bc:	0e 94 71 4a 	call	0x94e2	; 0x94e2 <strlen>
    28c0:	45 97       	sbiw	r24, 0x15	; 21
    28c2:	68 f4       	brcc	.+26     	; 0x28de <_Z19handleSerialBusMsgsv+0x558>
    28c4:	63 e8       	ldi	r22, 0x83	; 131
    28c6:	75 e4       	ldi	r23, 0x45	; 69
    28c8:	89 ed       	ldi	r24, 0xD9	; 217
    28ca:	95 e4       	ldi	r25, 0x45	; 69
    28cc:	0e 94 6a 4a 	call	0x94d4	; 0x94d4 <strcpy>
    28d0:	43 e8       	ldi	r20, 0x83	; 131
    28d2:	55 e4       	ldi	r21, 0x45	; 69
    28d4:	6a e0       	ldi	r22, 0x0A	; 10
    28d6:	8e e0       	ldi	r24, 0x0E	; 14
    28d8:	96 e4       	ldi	r25, 0x46	; 70
    28da:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    28de:	80 91 d9 45 	lds	r24, 0x45D9	; 0x8045d9 <g_messages_text+0x15>
    28e2:	88 23       	and	r24, r24
    28e4:	01 f1       	breq	.+64     	; 0x2926 <_Z19handleSerialBusMsgsv+0x5a0>
    28e6:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    28ea:	88 2f       	mov	r24, r24
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	bc 01       	movw	r22, r24
    28f0:	89 ed       	ldi	r24, 0xD9	; 217
    28f2:	95 e4       	ldi	r25, 0x45	; 69
    28f4:	0e 94 46 39 	call	0x728c	; 0x728c <_Z26timeRequiredToSendStrAtWPMPcj>
    28f8:	88 5a       	subi	r24, 0xA8	; 168
    28fa:	9d 4f       	sbci	r25, 0xFD	; 253
    28fc:	96 95       	lsr	r25
    28fe:	87 95       	ror	r24
    2900:	96 95       	lsr	r25
    2902:	87 95       	ror	r24
    2904:	96 95       	lsr	r25
    2906:	87 95       	ror	r24
    2908:	9c 01       	movw	r18, r24
    290a:	a5 ec       	ldi	r26, 0xC5	; 197
    290c:	b0 e2       	ldi	r27, 0x20	; 32
    290e:	0e 94 c8 48 	call	0x9190	; 0x9190 <__umulhisi3>
    2912:	92 95       	swap	r25
    2914:	82 95       	swap	r24
    2916:	8f 70       	andi	r24, 0x0F	; 15
    2918:	89 27       	eor	r24, r25
    291a:	9f 70       	andi	r25, 0x0F	; 15
    291c:	89 27       	eor	r24, r25
    291e:	80 93 ee 45 	sts	0x45EE, r24	; 0x8045ee <g_time_needed_for_ID>
    2922:	90 93 ef 45 	sts	0x45EF, r25	; 0x8045ef <g_time_needed_for_ID+0x1>
    2926:	89 ed       	ldi	r24, 0xD9	; 217
    2928:	95 e4       	ldi	r25, 0x45	; 69
    292a:	89 2f       	mov	r24, r25
    292c:	8f 93       	push	r24
    292e:	89 ed       	ldi	r24, 0xD9	; 217
    2930:	95 e4       	ldi	r25, 0x45	; 69
    2932:	8f 93       	push	r24
    2934:	84 e5       	ldi	r24, 0x54	; 84
    2936:	92 e4       	ldi	r25, 0x42	; 66
    2938:	89 2f       	mov	r24, r25
    293a:	8f 93       	push	r24
    293c:	84 e5       	ldi	r24, 0x54	; 84
    293e:	92 e4       	ldi	r25, 0x42	; 66
    2940:	8f 93       	push	r24
    2942:	83 e8       	ldi	r24, 0x83	; 131
    2944:	95 e4       	ldi	r25, 0x45	; 69
    2946:	89 2f       	mov	r24, r25
    2948:	8f 93       	push	r24
    294a:	83 e8       	ldi	r24, 0x83	; 131
    294c:	95 e4       	ldi	r25, 0x45	; 69
    294e:	8f 93       	push	r24
    2950:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	83 e8       	ldi	r24, 0x83	; 131
    2962:	95 e4       	ldi	r25, 0x45	; 69
    2964:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    2968:	7d c3       	rjmp	.+1786   	; 0x3064 <_Z19handleSerialBusMsgsv+0xcde>
    296a:	8a 85       	ldd	r24, Y+10	; 0x0a
    296c:	9b 85       	ldd	r25, Y+11	; 0x0b
    296e:	fc 01       	movw	r30, r24
    2970:	83 81       	ldd	r24, Z+3	; 0x03
    2972:	83 35       	cpi	r24, 0x53	; 83
    2974:	09 f0       	breq	.+2      	; 0x2978 <_Z19handleSerialBusMsgsv+0x5f2>
    2976:	6f c0       	rjmp	.+222    	; 0x2a56 <_Z19handleSerialBusMsgsv+0x6d0>
    2978:	8a 85       	ldd	r24, Y+10	; 0x0a
    297a:	9b 85       	ldd	r25, Y+11	; 0x0b
    297c:	fc 01       	movw	r30, r24
    297e:	87 89       	ldd	r24, Z+23	; 0x17
    2980:	89 8f       	std	Y+25, r24	; 0x19
    2982:	89 8d       	ldd	r24, Y+25	; 0x19
    2984:	88 23       	and	r24, r24
    2986:	09 f4       	brne	.+2      	; 0x298a <_Z19handleSerialBusMsgsv+0x604>
    2988:	48 c0       	rjmp	.+144    	; 0x2a1a <_Z19handleSerialBusMsgsv+0x694>
    298a:	8a 85       	ldd	r24, Y+10	; 0x0a
    298c:	9b 85       	ldd	r25, Y+11	; 0x0b
    298e:	47 96       	adiw	r24, 0x17	; 23
    2990:	0e 94 30 4a 	call	0x9460	; 0x9460 <atol>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	8a 8f       	std	Y+26, r24	; 0x1a
    299a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    299c:	8b 8f       	std	Y+27, r24	; 0x1b
    299e:	85 e0       	ldi	r24, 0x05	; 5
    29a0:	8c 8f       	std	Y+28, r24	; 0x1c
    29a2:	84 e1       	ldi	r24, 0x14	; 20
    29a4:	8d 8f       	std	Y+29, r24	; 0x1d
    29a6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    29a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29aa:	89 17       	cp	r24, r25
    29ac:	40 f0       	brcs	.+16     	; 0x29be <_Z19handleSerialBusMsgsv+0x638>
    29ae:	9b 8d       	ldd	r25, Y+27	; 0x1b
    29b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29b2:	98 17       	cp	r25, r24
    29b4:	10 f4       	brcc	.+4      	; 0x29ba <_Z19handleSerialBusMsgsv+0x634>
    29b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29b8:	03 c0       	rjmp	.+6      	; 0x29c0 <_Z19handleSerialBusMsgsv+0x63a>
    29ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29bc:	01 c0       	rjmp	.+2      	; 0x29c0 <_Z19handleSerialBusMsgsv+0x63a>
    29be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29c0:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
    29c4:	4b e0       	ldi	r20, 0x0B	; 11
    29c6:	50 e4       	ldi	r21, 0x40	; 64
    29c8:	68 e2       	ldi	r22, 0x28	; 40
    29ca:	8e e0       	ldi	r24, 0x0E	; 14
    29cc:	96 e4       	ldi	r25, 0x46	; 70
    29ce:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    29d2:	80 91 d9 45 	lds	r24, 0x45D9	; 0x8045d9 <g_messages_text+0x15>
    29d6:	88 23       	and	r24, r24
    29d8:	01 f1       	breq	.+64     	; 0x2a1a <_Z19handleSerialBusMsgsv+0x694>
    29da:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    29de:	88 2f       	mov	r24, r24
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	bc 01       	movw	r22, r24
    29e4:	89 ed       	ldi	r24, 0xD9	; 217
    29e6:	95 e4       	ldi	r25, 0x45	; 69
    29e8:	0e 94 46 39 	call	0x728c	; 0x728c <_Z26timeRequiredToSendStrAtWPMPcj>
    29ec:	88 5a       	subi	r24, 0xA8	; 168
    29ee:	9d 4f       	sbci	r25, 0xFD	; 253
    29f0:	96 95       	lsr	r25
    29f2:	87 95       	ror	r24
    29f4:	96 95       	lsr	r25
    29f6:	87 95       	ror	r24
    29f8:	96 95       	lsr	r25
    29fa:	87 95       	ror	r24
    29fc:	9c 01       	movw	r18, r24
    29fe:	a5 ec       	ldi	r26, 0xC5	; 197
    2a00:	b0 e2       	ldi	r27, 0x20	; 32
    2a02:	0e 94 c8 48 	call	0x9190	; 0x9190 <__umulhisi3>
    2a06:	92 95       	swap	r25
    2a08:	82 95       	swap	r24
    2a0a:	8f 70       	andi	r24, 0x0F	; 15
    2a0c:	89 27       	eor	r24, r25
    2a0e:	9f 70       	andi	r25, 0x0F	; 15
    2a10:	89 27       	eor	r24, r25
    2a12:	80 93 ee 45 	sts	0x45EE, r24	; 0x8045ee <g_time_needed_for_ID>
    2a16:	90 93 ef 45 	sts	0x45EF, r25	; 0x8045ef <g_time_needed_for_ID+0x1>
    2a1a:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2a1e:	88 2f       	mov	r24, r24
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	29 2f       	mov	r18, r25
    2a24:	2f 93       	push	r18
    2a26:	8f 93       	push	r24
    2a28:	8b e5       	ldi	r24, 0x5B	; 91
    2a2a:	92 e4       	ldi	r25, 0x42	; 66
    2a2c:	89 2f       	mov	r24, r25
    2a2e:	8f 93       	push	r24
    2a30:	8b e5       	ldi	r24, 0x5B	; 91
    2a32:	92 e4       	ldi	r25, 0x42	; 66
    2a34:	8f 93       	push	r24
    2a36:	83 e8       	ldi	r24, 0x83	; 131
    2a38:	95 e4       	ldi	r25, 0x45	; 69
    2a3a:	89 2f       	mov	r24, r25
    2a3c:	8f 93       	push	r24
    2a3e:	83 e8       	ldi	r24, 0x83	; 131
    2a40:	95 e4       	ldi	r25, 0x45	; 69
    2a42:	8f 93       	push	r24
    2a44:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	09 c0       	rjmp	.+18     	; 0x2a68 <_Z19handleSerialBusMsgsv+0x6e2>
    2a56:	85 e0       	ldi	r24, 0x05	; 5
    2a58:	ef e4       	ldi	r30, 0x4F	; 79
    2a5a:	f2 e4       	ldi	r31, 0x42	; 66
    2a5c:	a3 e8       	ldi	r26, 0x83	; 131
    2a5e:	b5 e4       	ldi	r27, 0x45	; 69
    2a60:	01 90       	ld	r0, Z+
    2a62:	0d 92       	st	X+, r0
    2a64:	8a 95       	dec	r24
    2a66:	e1 f7       	brne	.-8      	; 0x2a60 <_Z19handleSerialBusMsgsv+0x6da>
    2a68:	83 e8       	ldi	r24, 0x83	; 131
    2a6a:	95 e4       	ldi	r25, 0x45	; 69
    2a6c:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    2a70:	f9 c2       	rjmp	.+1522   	; 0x3064 <_Z19handleSerialBusMsgsv+0xcde>
    2a72:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a74:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a76:	fc 01       	movw	r30, r24
    2a78:	83 81       	ldd	r24, Z+3	; 0x03
    2a7a:	88 23       	and	r24, r24
    2a7c:	51 f1       	breq	.+84     	; 0x2ad2 <_Z19handleSerialBusMsgsv+0x74c>
    2a7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a80:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a82:	03 96       	adiw	r24, 0x03	; 3
    2a84:	48 e0       	ldi	r20, 0x08	; 8
    2a86:	50 e0       	ldi	r21, 0x00	; 0
    2a88:	bc 01       	movw	r22, r24
    2a8a:	83 e8       	ldi	r24, 0x83	; 131
    2a8c:	95 e4       	ldi	r25, 0x45	; 69
    2a8e:	0e 94 7a 4a 	call	0x94f4	; 0x94f4 <strncpy>
    2a92:	10 92 8b 45 	sts	0x458B, r1	; 0x80458b <_ZL9g_tempStr+0x8>
    2a96:	83 e8       	ldi	r24, 0x83	; 131
    2a98:	95 e4       	ldi	r25, 0x45	; 69
    2a9a:	0e 94 f9 45 	call	0x8bf2	; 0x8bf2 <_Z11only_digitsPc>
    2a9e:	88 23       	and	r24, r24
    2aa0:	41 f0       	breq	.+16     	; 0x2ab2 <_Z19handleSerialBusMsgsv+0x72c>
    2aa2:	83 e8       	ldi	r24, 0x83	; 131
    2aa4:	95 e4       	ldi	r25, 0x45	; 69
    2aa6:	0e 94 71 4a 	call	0x94e2	; 0x94e2 <strlen>
    2aaa:	04 97       	sbiw	r24, 0x04	; 4
    2aac:	10 f0       	brcs	.+4      	; 0x2ab2 <_Z19handleSerialBusMsgsv+0x72c>
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	01 c0       	rjmp	.+2      	; 0x2ab4 <_Z19handleSerialBusMsgsv+0x72e>
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	88 23       	and	r24, r24
    2ab6:	69 f0       	breq	.+26     	; 0x2ad2 <_Z19handleSerialBusMsgsv+0x74c>
    2ab8:	63 e8       	ldi	r22, 0x83	; 131
    2aba:	75 e4       	ldi	r23, 0x45	; 69
    2abc:	88 e1       	ldi	r24, 0x18	; 24
    2abe:	96 e4       	ldi	r25, 0x46	; 70
    2ac0:	0e 94 6a 4a 	call	0x94d4	; 0x94d4 <strcpy>
    2ac4:	48 e1       	ldi	r20, 0x18	; 24
    2ac6:	56 e4       	ldi	r21, 0x46	; 70
    2ac8:	6f e1       	ldi	r22, 0x1F	; 31
    2aca:	8e e0       	ldi	r24, 0x0E	; 14
    2acc:	96 e4       	ldi	r25, 0x46	; 70
    2ace:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2ad2:	88 e1       	ldi	r24, 0x18	; 24
    2ad4:	96 e4       	ldi	r25, 0x46	; 70
    2ad6:	89 2f       	mov	r24, r25
    2ad8:	8f 93       	push	r24
    2ada:	88 e1       	ldi	r24, 0x18	; 24
    2adc:	96 e4       	ldi	r25, 0x46	; 70
    2ade:	8f 93       	push	r24
    2ae0:	8d e6       	ldi	r24, 0x6D	; 109
    2ae2:	92 e4       	ldi	r25, 0x42	; 66
    2ae4:	89 2f       	mov	r24, r25
    2ae6:	8f 93       	push	r24
    2ae8:	8d e6       	ldi	r24, 0x6D	; 109
    2aea:	92 e4       	ldi	r25, 0x42	; 66
    2aec:	8f 93       	push	r24
    2aee:	83 e8       	ldi	r24, 0x83	; 131
    2af0:	95 e4       	ldi	r25, 0x45	; 69
    2af2:	89 2f       	mov	r24, r25
    2af4:	8f 93       	push	r24
    2af6:	83 e8       	ldi	r24, 0x83	; 131
    2af8:	95 e4       	ldi	r25, 0x45	; 69
    2afa:	8f 93       	push	r24
    2afc:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	0f 90       	pop	r0
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	83 e8       	ldi	r24, 0x83	; 131
    2b0e:	95 e4       	ldi	r25, 0x45	; 69
    2b10:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    2b14:	a7 c2       	rjmp	.+1358   	; 0x3064 <_Z19handleSerialBusMsgsv+0xcde>
    2b16:	19 86       	std	Y+9, r1	; 0x09
    2b18:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	83 81       	ldd	r24, Z+3	; 0x03
    2b20:	84 35       	cpi	r24, 0x54	; 84
    2b22:	09 f0       	breq	.+2      	; 0x2b26 <_Z19handleSerialBusMsgsv+0x7a0>
    2b24:	bb c0       	rjmp	.+374    	; 0x2c9c <_Z19handleSerialBusMsgsv+0x916>
    2b26:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b28:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	87 89       	ldd	r24, Z+23	; 0x17
    2b2e:	88 23       	and	r24, r24
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <_Z19handleSerialBusMsgsv+0x7ae>
    2b32:	71 c0       	rjmp	.+226    	; 0x2c16 <_Z19handleSerialBusMsgsv+0x890>
    2b34:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b36:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b38:	47 96       	adiw	r24, 0x17	; 23
    2b3a:	4c e0       	ldi	r20, 0x0C	; 12
    2b3c:	50 e0       	ldi	r21, 0x00	; 0
    2b3e:	bc 01       	movw	r22, r24
    2b40:	83 e8       	ldi	r24, 0x83	; 131
    2b42:	95 e4       	ldi	r25, 0x45	; 69
    2b44:	0e 94 7a 4a 	call	0x94f4	; 0x94f4 <strncpy>
    2b48:	10 92 8f 45 	sts	0x458F, r1	; 0x80458f <_ZL9g_tempStr+0xc>
    2b4c:	80 91 17 46 	lds	r24, 0x4617	; 0x804617 <g_utc_offset>
    2b50:	81 95       	neg	r24
    2b52:	48 2f       	mov	r20, r24
    2b54:	60 e2       	ldi	r22, 0x20	; 32
    2b56:	76 e4       	ldi	r23, 0x46	; 70
    2b58:	83 e8       	ldi	r24, 0x83	; 131
    2b5a:	95 e4       	ldi	r25, 0x45	; 69
    2b5c:	0e 94 5e 24 	call	0x48bc	; 0x48bc <_Z18validateTimeStringPcPma>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	8e 8f       	std	Y+30, r24	; 0x1e
    2b66:	9f 8f       	std	Y+31, r25	; 0x1f
    2b68:	a8 a3       	std	Y+32, r26	; 0x20
    2b6a:	b9 a3       	std	Y+33, r27	; 0x21
    2b6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b6e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b70:	a8 a1       	ldd	r26, Y+32	; 0x20
    2b72:	b9 a1       	ldd	r27, Y+33	; 0x21
    2b74:	89 2b       	or	r24, r25
    2b76:	8a 2b       	or	r24, r26
    2b78:	8b 2b       	or	r24, r27
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <_Z19handleSerialBusMsgsv+0x7f8>
    2b7c:	8c c0       	rjmp	.+280    	; 0x2c96 <_Z19handleSerialBusMsgsv+0x910>
    2b7e:	60 e0       	ldi	r22, 0x00	; 0
    2b80:	83 e8       	ldi	r24, 0x83	; 131
    2b82:	95 e4       	ldi	r25, 0x45	; 69
    2b84:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <ds3231_set_date_time_arducon>
    2b88:	8a a3       	std	Y+34, r24	; 0x22
    2b8a:	8a a1       	ldd	r24, Y+34	; 0x22
    2b8c:	88 23       	and	r24, r24
    2b8e:	29 f0       	breq	.+10     	; 0x2b9a <_Z19handleSerialBusMsgsv+0x814>
    2b90:	83 ee       	ldi	r24, 0xE3	; 227
    2b92:	91 e4       	ldi	r25, 0x41	; 65
    2b94:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    2b98:	7e c0       	rjmp	.+252    	; 0x2c96 <_Z19handleSerialBusMsgsv+0x910>
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <ds3231_get_epoch>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	80 93 20 46 	sts	0x4620, r24	; 0x804620 <g_current_epoch>
    2baa:	90 93 21 46 	sts	0x4621, r25	; 0x804621 <g_current_epoch+0x1>
    2bae:	a0 93 22 46 	sts	0x4622, r26	; 0x804622 <g_current_epoch+0x2>
    2bb2:	b0 93 23 46 	sts	0x4623, r27	; 0x804623 <g_current_epoch+0x3>
    2bb6:	80 91 20 46 	lds	r24, 0x4620	; 0x804620 <g_current_epoch>
    2bba:	90 91 21 46 	lds	r25, 0x4621	; 0x804621 <g_current_epoch+0x1>
    2bbe:	a0 91 22 46 	lds	r26, 0x4622	; 0x804622 <g_current_epoch+0x2>
    2bc2:	b0 91 23 46 	lds	r27, 0x4623	; 0x804623 <g_current_epoch+0x3>
    2bc6:	ae 01       	movw	r20, r28
    2bc8:	44 5c       	subi	r20, 0xC4	; 196
    2bca:	5f 4f       	sbci	r21, 0xFF	; 255
    2bcc:	22 e3       	ldi	r18, 0x32	; 50
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	bc 01       	movw	r22, r24
    2bd2:	cd 01       	movw	r24, r26
    2bd4:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <convertEpochToTimeString>
    2bd8:	29 2f       	mov	r18, r25
    2bda:	2f 93       	push	r18
    2bdc:	8f 93       	push	r24
    2bde:	85 e7       	ldi	r24, 0x75	; 117
    2be0:	92 e4       	ldi	r25, 0x42	; 66
    2be2:	89 2f       	mov	r24, r25
    2be4:	8f 93       	push	r24
    2be6:	85 e7       	ldi	r24, 0x75	; 117
    2be8:	92 e4       	ldi	r25, 0x42	; 66
    2bea:	8f 93       	push	r24
    2bec:	83 e8       	ldi	r24, 0x83	; 131
    2bee:	95 e4       	ldi	r25, 0x45	; 69
    2bf0:	89 2f       	mov	r24, r25
    2bf2:	8f 93       	push	r24
    2bf4:	83 e8       	ldi	r24, 0x83	; 131
    2bf6:	95 e4       	ldi	r25, 0x45	; 69
    2bf8:	8f 93       	push	r24
    2bfa:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    2bfe:	0f 90       	pop	r0
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	60 e0       	ldi	r22, 0x00	; 0
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2c14:	40 c0       	rjmp	.+128    	; 0x2c96 <_Z19handleSerialBusMsgsv+0x910>
    2c16:	ce 01       	movw	r24, r28
    2c18:	cb 96       	adiw	r24, 0x3b	; 59
    2c1a:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <ds3231_get_epoch>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	80 93 20 46 	sts	0x4620, r24	; 0x804620 <g_current_epoch>
    2c26:	90 93 21 46 	sts	0x4621, r25	; 0x804621 <g_current_epoch+0x1>
    2c2a:	a0 93 22 46 	sts	0x4622, r26	; 0x804622 <g_current_epoch+0x2>
    2c2e:	b0 93 23 46 	sts	0x4623, r27	; 0x804623 <g_current_epoch+0x3>
    2c32:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c34:	88 23       	and	r24, r24
    2c36:	29 f0       	breq	.+10     	; 0x2c42 <_Z19handleSerialBusMsgsv+0x8bc>
    2c38:	83 ee       	ldi	r24, 0xE3	; 227
    2c3a:	91 e4       	ldi	r25, 0x41	; 65
    2c3c:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    2c40:	2a c0       	rjmp	.+84     	; 0x2c96 <_Z19handleSerialBusMsgsv+0x910>
    2c42:	80 91 20 46 	lds	r24, 0x4620	; 0x804620 <g_current_epoch>
    2c46:	90 91 21 46 	lds	r25, 0x4621	; 0x804621 <g_current_epoch+0x1>
    2c4a:	a0 91 22 46 	lds	r26, 0x4622	; 0x804622 <g_current_epoch+0x2>
    2c4e:	b0 91 23 46 	lds	r27, 0x4623	; 0x804623 <g_current_epoch+0x3>
    2c52:	ae 01       	movw	r20, r28
    2c54:	44 5c       	subi	r20, 0xC4	; 196
    2c56:	5f 4f       	sbci	r21, 0xFF	; 255
    2c58:	22 e3       	ldi	r18, 0x32	; 50
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	bc 01       	movw	r22, r24
    2c5e:	cd 01       	movw	r24, r26
    2c60:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <convertEpochToTimeString>
    2c64:	29 2f       	mov	r18, r25
    2c66:	2f 93       	push	r18
    2c68:	8f 93       	push	r24
    2c6a:	85 e7       	ldi	r24, 0x75	; 117
    2c6c:	92 e4       	ldi	r25, 0x42	; 66
    2c6e:	89 2f       	mov	r24, r25
    2c70:	8f 93       	push	r24
    2c72:	85 e7       	ldi	r24, 0x75	; 117
    2c74:	92 e4       	ldi	r25, 0x42	; 66
    2c76:	8f 93       	push	r24
    2c78:	83 e8       	ldi	r24, 0x83	; 131
    2c7a:	95 e4       	ldi	r25, 0x45	; 69
    2c7c:	89 2f       	mov	r24, r25
    2c7e:	8f 93       	push	r24
    2c80:	83 e8       	ldi	r24, 0x83	; 131
    2c82:	95 e4       	ldi	r25, 0x45	; 69
    2c84:	8f 93       	push	r24
    2c86:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    2c8a:	0f 90       	pop	r0
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	89 87       	std	Y+9, r24	; 0x09
    2c9a:	be c1       	rjmp	.+892    	; 0x3018 <_Z19handleSerialBusMsgsv+0xc92>
    2c9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ca0:	fc 01       	movw	r30, r24
    2ca2:	83 81       	ldd	r24, Z+3	; 0x03
    2ca4:	83 35       	cpi	r24, 0x53	; 83
    2ca6:	09 f0       	breq	.+2      	; 0x2caa <_Z19handleSerialBusMsgsv+0x924>
    2ca8:	be c0       	rjmp	.+380    	; 0x2e26 <_Z19handleSerialBusMsgsv+0xaa0>
    2caa:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cac:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cae:	47 96       	adiw	r24, 0x17	; 23
    2cb0:	bc 01       	movw	r22, r24
    2cb2:	83 e8       	ldi	r24, 0x83	; 131
    2cb4:	95 e4       	ldi	r25, 0x45	; 69
    2cb6:	0e 94 6a 4a 	call	0x94d4	; 0x94d4 <strcpy>
    2cba:	80 91 17 46 	lds	r24, 0x4617	; 0x804617 <g_utc_offset>
    2cbe:	81 95       	neg	r24
    2cc0:	48 2f       	mov	r20, r24
    2cc2:	6f e0       	ldi	r22, 0x0F	; 15
    2cc4:	76 e4       	ldi	r23, 0x46	; 70
    2cc6:	83 e8       	ldi	r24, 0x83	; 131
    2cc8:	95 e4       	ldi	r25, 0x45	; 69
    2cca:	0e 94 5e 24 	call	0x48bc	; 0x48bc <_Z18validateTimeStringPcPma>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	8b a3       	std	Y+35, r24	; 0x23
    2cd4:	9c a3       	std	Y+36, r25	; 0x24
    2cd6:	ad a3       	std	Y+37, r26	; 0x25
    2cd8:	be a3       	std	Y+38, r27	; 0x26
    2cda:	8b a1       	ldd	r24, Y+35	; 0x23
    2cdc:	9c a1       	ldd	r25, Y+36	; 0x24
    2cde:	ad a1       	ldd	r26, Y+37	; 0x25
    2ce0:	be a1       	ldd	r27, Y+38	; 0x26
    2ce2:	89 2b       	or	r24, r25
    2ce4:	8a 2b       	or	r24, r26
    2ce6:	8b 2b       	or	r24, r27
    2ce8:	09 f4       	brne	.+2      	; 0x2cec <_Z19handleSerialBusMsgsv+0x966>
    2cea:	70 c0       	rjmp	.+224    	; 0x2dcc <_Z19handleSerialBusMsgsv+0xa46>
    2cec:	8b a1       	ldd	r24, Y+35	; 0x23
    2cee:	9c a1       	ldd	r25, Y+36	; 0x24
    2cf0:	ad a1       	ldd	r26, Y+37	; 0x25
    2cf2:	be a1       	ldd	r27, Y+38	; 0x26
    2cf4:	80 93 0f 46 	sts	0x460F, r24	; 0x80460f <g_event_start_epoch>
    2cf8:	90 93 10 46 	sts	0x4610, r25	; 0x804610 <g_event_start_epoch+0x1>
    2cfc:	a0 93 11 46 	sts	0x4611, r26	; 0x804611 <g_event_start_epoch+0x2>
    2d00:	b0 93 12 46 	sts	0x4612, r27	; 0x804612 <g_event_start_epoch+0x3>
    2d04:	4f e0       	ldi	r20, 0x0F	; 15
    2d06:	56 e4       	ldi	r21, 0x46	; 70
    2d08:	62 e0       	ldi	r22, 0x02	; 2
    2d0a:	8e e0       	ldi	r24, 0x0E	; 14
    2d0c:	96 e4       	ldi	r25, 0x46	; 70
    2d0e:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2d12:	80 91 13 46 	lds	r24, 0x4613	; 0x804613 <g_event_finish_epoch>
    2d16:	90 91 14 46 	lds	r25, 0x4614	; 0x804614 <g_event_finish_epoch+0x1>
    2d1a:	a0 91 15 46 	lds	r26, 0x4615	; 0x804615 <g_event_finish_epoch+0x2>
    2d1e:	b0 91 16 46 	lds	r27, 0x4616	; 0x804616 <g_event_finish_epoch+0x3>
    2d22:	8f a3       	std	Y+39, r24	; 0x27
    2d24:	98 a7       	std	Y+40, r25	; 0x28
    2d26:	a9 a7       	std	Y+41, r26	; 0x29
    2d28:	ba a7       	std	Y+42, r27	; 0x2a
    2d2a:	80 91 0f 46 	lds	r24, 0x460F	; 0x80460f <g_event_start_epoch>
    2d2e:	90 91 10 46 	lds	r25, 0x4610	; 0x804610 <g_event_start_epoch+0x1>
    2d32:	a0 91 11 46 	lds	r26, 0x4611	; 0x804611 <g_event_start_epoch+0x2>
    2d36:	b0 91 12 46 	lds	r27, 0x4612	; 0x804612 <g_event_start_epoch+0x3>
    2d3a:	80 58       	subi	r24, 0x80	; 128
    2d3c:	9e 4a       	sbci	r25, 0xAE	; 174
    2d3e:	ae 4f       	sbci	r26, 0xFE	; 254
    2d40:	bf 4f       	sbci	r27, 0xFF	; 255
    2d42:	8b a7       	std	Y+43, r24	; 0x2b
    2d44:	9c a7       	std	Y+44, r25	; 0x2c
    2d46:	ad a7       	std	Y+45, r26	; 0x2d
    2d48:	be a7       	std	Y+46, r27	; 0x2e
    2d4a:	2f a1       	ldd	r18, Y+39	; 0x27
    2d4c:	38 a5       	ldd	r19, Y+40	; 0x28
    2d4e:	49 a5       	ldd	r20, Y+41	; 0x29
    2d50:	5a a5       	ldd	r21, Y+42	; 0x2a
    2d52:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d54:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d56:	ad a5       	ldd	r26, Y+45	; 0x2d
    2d58:	be a5       	ldd	r27, Y+46	; 0x2e
    2d5a:	28 17       	cp	r18, r24
    2d5c:	39 07       	cpc	r19, r25
    2d5e:	4a 07       	cpc	r20, r26
    2d60:	5b 07       	cpc	r21, r27
    2d62:	28 f4       	brcc	.+10     	; 0x2d6e <_Z19handleSerialBusMsgsv+0x9e8>
    2d64:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d66:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d68:	ad a5       	ldd	r26, Y+45	; 0x2d
    2d6a:	be a5       	ldd	r27, Y+46	; 0x2e
    2d6c:	04 c0       	rjmp	.+8      	; 0x2d76 <_Z19handleSerialBusMsgsv+0x9f0>
    2d6e:	8f a1       	ldd	r24, Y+39	; 0x27
    2d70:	98 a5       	ldd	r25, Y+40	; 0x28
    2d72:	a9 a5       	ldd	r26, Y+41	; 0x29
    2d74:	ba a5       	ldd	r27, Y+42	; 0x2a
    2d76:	80 93 13 46 	sts	0x4613, r24	; 0x804613 <g_event_finish_epoch>
    2d7a:	90 93 14 46 	sts	0x4614, r25	; 0x804614 <g_event_finish_epoch+0x1>
    2d7e:	a0 93 15 46 	sts	0x4615, r26	; 0x804615 <g_event_finish_epoch+0x2>
    2d82:	b0 93 16 46 	sts	0x4616, r27	; 0x804616 <g_event_finish_epoch+0x3>
    2d86:	43 e1       	ldi	r20, 0x13	; 19
    2d88:	56 e4       	ldi	r21, 0x46	; 70
    2d8a:	66 e0       	ldi	r22, 0x06	; 6
    2d8c:	8e e0       	ldi	r24, 0x0E	; 14
    2d8e:	96 e4       	ldi	r25, 0x46	; 70
    2d90:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2d94:	63 e0       	ldi	r22, 0x03	; 3
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2d9e:	20 91 0f 46 	lds	r18, 0x460F	; 0x80460f <g_event_start_epoch>
    2da2:	30 91 10 46 	lds	r19, 0x4610	; 0x804610 <g_event_start_epoch+0x1>
    2da6:	40 91 11 46 	lds	r20, 0x4611	; 0x804611 <g_event_start_epoch+0x2>
    2daa:	50 91 12 46 	lds	r21, 0x4612	; 0x804612 <g_event_start_epoch+0x3>
    2dae:	80 91 20 46 	lds	r24, 0x4620	; 0x804620 <g_current_epoch>
    2db2:	90 91 21 46 	lds	r25, 0x4621	; 0x804621 <g_current_epoch+0x1>
    2db6:	a0 91 22 46 	lds	r26, 0x4622	; 0x804622 <g_current_epoch+0x2>
    2dba:	b0 91 23 46 	lds	r27, 0x4623	; 0x804623 <g_current_epoch+0x3>
    2dbe:	82 17       	cp	r24, r18
    2dc0:	93 07       	cpc	r25, r19
    2dc2:	a4 07       	cpc	r26, r20
    2dc4:	b5 07       	cpc	r27, r21
    2dc6:	10 f4       	brcc	.+4      	; 0x2dcc <_Z19handleSerialBusMsgsv+0xa46>
    2dc8:	0e 94 24 22 	call	0x4448	; 0x4448 <_Z18startEventUsingRTCv>
    2dcc:	80 91 0f 46 	lds	r24, 0x460F	; 0x80460f <g_event_start_epoch>
    2dd0:	90 91 10 46 	lds	r25, 0x4610	; 0x804610 <g_event_start_epoch+0x1>
    2dd4:	a0 91 11 46 	lds	r26, 0x4611	; 0x804611 <g_event_start_epoch+0x2>
    2dd8:	b0 91 12 46 	lds	r27, 0x4612	; 0x804612 <g_event_start_epoch+0x3>
    2ddc:	ae 01       	movw	r20, r28
    2dde:	44 5c       	subi	r20, 0xC4	; 196
    2de0:	5f 4f       	sbci	r21, 0xFF	; 255
    2de2:	22 e3       	ldi	r18, 0x32	; 50
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	bc 01       	movw	r22, r24
    2de8:	cd 01       	movw	r24, r26
    2dea:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <convertEpochToTimeString>
    2dee:	29 2f       	mov	r18, r25
    2df0:	2f 93       	push	r18
    2df2:	8f 93       	push	r24
    2df4:	8f e7       	ldi	r24, 0x7F	; 127
    2df6:	92 e4       	ldi	r25, 0x42	; 66
    2df8:	89 2f       	mov	r24, r25
    2dfa:	8f 93       	push	r24
    2dfc:	8f e7       	ldi	r24, 0x7F	; 127
    2dfe:	92 e4       	ldi	r25, 0x42	; 66
    2e00:	8f 93       	push	r24
    2e02:	83 e8       	ldi	r24, 0x83	; 131
    2e04:	95 e4       	ldi	r25, 0x45	; 69
    2e06:	89 2f       	mov	r24, r25
    2e08:	8f 93       	push	r24
    2e0a:	83 e8       	ldi	r24, 0x83	; 131
    2e0c:	95 e4       	ldi	r25, 0x45	; 69
    2e0e:	8f 93       	push	r24
    2e10:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    2e14:	0f 90       	pop	r0
    2e16:	0f 90       	pop	r0
    2e18:	0f 90       	pop	r0
    2e1a:	0f 90       	pop	r0
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	89 87       	std	Y+9, r24	; 0x09
    2e24:	f9 c0       	rjmp	.+498    	; 0x3018 <_Z19handleSerialBusMsgsv+0xc92>
    2e26:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e28:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	83 81       	ldd	r24, Z+3	; 0x03
    2e2e:	86 34       	cpi	r24, 0x46	; 70
    2e30:	09 f0       	breq	.+2      	; 0x2e34 <_Z19handleSerialBusMsgsv+0xaae>
    2e32:	7c c0       	rjmp	.+248    	; 0x2f2c <_Z19handleSerialBusMsgsv+0xba6>
    2e34:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e36:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e38:	47 96       	adiw	r24, 0x17	; 23
    2e3a:	bc 01       	movw	r22, r24
    2e3c:	83 e8       	ldi	r24, 0x83	; 131
    2e3e:	95 e4       	ldi	r25, 0x45	; 69
    2e40:	0e 94 6a 4a 	call	0x94d4	; 0x94d4 <strcpy>
    2e44:	80 91 17 46 	lds	r24, 0x4617	; 0x804617 <g_utc_offset>
    2e48:	81 95       	neg	r24
    2e4a:	48 2f       	mov	r20, r24
    2e4c:	63 e1       	ldi	r22, 0x13	; 19
    2e4e:	76 e4       	ldi	r23, 0x46	; 70
    2e50:	83 e8       	ldi	r24, 0x83	; 131
    2e52:	95 e4       	ldi	r25, 0x45	; 69
    2e54:	0e 94 5e 24 	call	0x48bc	; 0x48bc <_Z18validateTimeStringPcPma>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	8f a7       	std	Y+47, r24	; 0x2f
    2e5e:	98 ab       	std	Y+48, r25	; 0x30
    2e60:	a9 ab       	std	Y+49, r26	; 0x31
    2e62:	ba ab       	std	Y+50, r27	; 0x32
    2e64:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e66:	98 a9       	ldd	r25, Y+48	; 0x30
    2e68:	a9 a9       	ldd	r26, Y+49	; 0x31
    2e6a:	ba a9       	ldd	r27, Y+50	; 0x32
    2e6c:	89 2b       	or	r24, r25
    2e6e:	8a 2b       	or	r24, r26
    2e70:	8b 2b       	or	r24, r27
    2e72:	79 f1       	breq	.+94     	; 0x2ed2 <_Z19handleSerialBusMsgsv+0xb4c>
    2e74:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e76:	98 a9       	ldd	r25, Y+48	; 0x30
    2e78:	a9 a9       	ldd	r26, Y+49	; 0x31
    2e7a:	ba a9       	ldd	r27, Y+50	; 0x32
    2e7c:	80 93 13 46 	sts	0x4613, r24	; 0x804613 <g_event_finish_epoch>
    2e80:	90 93 14 46 	sts	0x4614, r25	; 0x804614 <g_event_finish_epoch+0x1>
    2e84:	a0 93 15 46 	sts	0x4615, r26	; 0x804615 <g_event_finish_epoch+0x2>
    2e88:	b0 93 16 46 	sts	0x4616, r27	; 0x804616 <g_event_finish_epoch+0x3>
    2e8c:	43 e1       	ldi	r20, 0x13	; 19
    2e8e:	56 e4       	ldi	r21, 0x46	; 70
    2e90:	66 e0       	ldi	r22, 0x06	; 6
    2e92:	8e e0       	ldi	r24, 0x0E	; 14
    2e94:	96 e4       	ldi	r25, 0x46	; 70
    2e96:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    2e9a:	63 e0       	ldi	r22, 0x03	; 3
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>
    2ea4:	20 91 0f 46 	lds	r18, 0x460F	; 0x80460f <g_event_start_epoch>
    2ea8:	30 91 10 46 	lds	r19, 0x4610	; 0x804610 <g_event_start_epoch+0x1>
    2eac:	40 91 11 46 	lds	r20, 0x4611	; 0x804611 <g_event_start_epoch+0x2>
    2eb0:	50 91 12 46 	lds	r21, 0x4612	; 0x804612 <g_event_start_epoch+0x3>
    2eb4:	80 91 20 46 	lds	r24, 0x4620	; 0x804620 <g_current_epoch>
    2eb8:	90 91 21 46 	lds	r25, 0x4621	; 0x804621 <g_current_epoch+0x1>
    2ebc:	a0 91 22 46 	lds	r26, 0x4622	; 0x804622 <g_current_epoch+0x2>
    2ec0:	b0 91 23 46 	lds	r27, 0x4623	; 0x804623 <g_current_epoch+0x3>
    2ec4:	82 17       	cp	r24, r18
    2ec6:	93 07       	cpc	r25, r19
    2ec8:	a4 07       	cpc	r26, r20
    2eca:	b5 07       	cpc	r27, r21
    2ecc:	10 f4       	brcc	.+4      	; 0x2ed2 <_Z19handleSerialBusMsgsv+0xb4c>
    2ece:	0e 94 24 22 	call	0x4448	; 0x4448 <_Z18startEventUsingRTCv>
    2ed2:	80 91 13 46 	lds	r24, 0x4613	; 0x804613 <g_event_finish_epoch>
    2ed6:	90 91 14 46 	lds	r25, 0x4614	; 0x804614 <g_event_finish_epoch+0x1>
    2eda:	a0 91 15 46 	lds	r26, 0x4615	; 0x804615 <g_event_finish_epoch+0x2>
    2ede:	b0 91 16 46 	lds	r27, 0x4616	; 0x804616 <g_event_finish_epoch+0x3>
    2ee2:	ae 01       	movw	r20, r28
    2ee4:	44 5c       	subi	r20, 0xC4	; 196
    2ee6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ee8:	22 e3       	ldi	r18, 0x32	; 50
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	bc 01       	movw	r22, r24
    2eee:	cd 01       	movw	r24, r26
    2ef0:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <convertEpochToTimeString>
    2ef4:	29 2f       	mov	r18, r25
    2ef6:	2f 93       	push	r18
    2ef8:	8f 93       	push	r24
    2efa:	8a e8       	ldi	r24, 0x8A	; 138
    2efc:	92 e4       	ldi	r25, 0x42	; 66
    2efe:	89 2f       	mov	r24, r25
    2f00:	8f 93       	push	r24
    2f02:	8a e8       	ldi	r24, 0x8A	; 138
    2f04:	92 e4       	ldi	r25, 0x42	; 66
    2f06:	8f 93       	push	r24
    2f08:	83 e8       	ldi	r24, 0x83	; 131
    2f0a:	95 e4       	ldi	r25, 0x45	; 69
    2f0c:	89 2f       	mov	r24, r25
    2f0e:	8f 93       	push	r24
    2f10:	83 e8       	ldi	r24, 0x83	; 131
    2f12:	95 e4       	ldi	r25, 0x45	; 69
    2f14:	8f 93       	push	r24
    2f16:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    2f1a:	0f 90       	pop	r0
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	0f 90       	pop	r0
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	89 87       	std	Y+9, r24	; 0x09
    2f2a:	76 c0       	rjmp	.+236    	; 0x3018 <_Z19handleSerialBusMsgsv+0xc92>
    2f2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f30:	fc 01       	movw	r30, r24
    2f32:	83 81       	ldd	r24, Z+3	; 0x03
    2f34:	8a 32       	cpi	r24, 0x2A	; 42
    2f36:	19 f4       	brne	.+6      	; 0x2f3e <_Z19handleSerialBusMsgsv+0xbb8>
    2f38:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <ds3231_sync2nearestMinute>
    2f3c:	6d c0       	rjmp	.+218    	; 0x3018 <_Z19handleSerialBusMsgsv+0xc92>
    2f3e:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <_Z23clockConfigurationCheckv>
    2f42:	8b ab       	std	Y+51, r24	; 0x33
    2f44:	8b a9       	ldd	r24, Y+51	; 0x33
    2f46:	81 30       	cpi	r24, 0x01	; 1
    2f48:	31 f0       	breq	.+12     	; 0x2f56 <_Z19handleSerialBusMsgsv+0xbd0>
    2f4a:	8b a9       	ldd	r24, Y+51	; 0x33
    2f4c:	85 30       	cpi	r24, 0x05	; 5
    2f4e:	19 f0       	breq	.+6      	; 0x2f56 <_Z19handleSerialBusMsgsv+0xbd0>
    2f50:	0e 94 d6 26 	call	0x4dac	; 0x4dac <_Z18reportConfigErrorsv>
    2f54:	61 c0       	rjmp	.+194    	; 0x3018 <_Z19handleSerialBusMsgsv+0xc92>
    2f56:	20 91 0f 46 	lds	r18, 0x460F	; 0x80460f <g_event_start_epoch>
    2f5a:	30 91 10 46 	lds	r19, 0x4610	; 0x804610 <g_event_start_epoch+0x1>
    2f5e:	40 91 11 46 	lds	r20, 0x4611	; 0x804611 <g_event_start_epoch+0x2>
    2f62:	50 91 12 46 	lds	r21, 0x4612	; 0x804612 <g_event_start_epoch+0x3>
    2f66:	80 91 20 46 	lds	r24, 0x4620	; 0x804620 <g_current_epoch>
    2f6a:	90 91 21 46 	lds	r25, 0x4621	; 0x804621 <g_current_epoch+0x1>
    2f6e:	a0 91 22 46 	lds	r26, 0x4622	; 0x804622 <g_current_epoch+0x2>
    2f72:	b0 91 23 46 	lds	r27, 0x4623	; 0x804623 <g_current_epoch+0x3>
    2f76:	0f 2e       	mov	r0, r31
    2f78:	f6 e9       	ldi	r31, 0x96	; 150
    2f7a:	ef 2e       	mov	r14, r31
    2f7c:	f2 e4       	ldi	r31, 0x42	; 66
    2f7e:	ff 2e       	mov	r15, r31
    2f80:	f0 2d       	mov	r31, r0
    2f82:	03 ea       	ldi	r16, 0xA3	; 163
    2f84:	12 e4       	ldi	r17, 0x42	; 66
    2f86:	bc 01       	movw	r22, r24
    2f88:	cd 01       	movw	r24, r26
    2f8a:	0e 94 41 25 	call	0x4a82	; 0x4a82 <_Z14reportTimeTillmmPKcS0_>
    2f8e:	20 91 13 46 	lds	r18, 0x4613	; 0x804613 <g_event_finish_epoch>
    2f92:	30 91 14 46 	lds	r19, 0x4614	; 0x804614 <g_event_finish_epoch+0x1>
    2f96:	40 91 15 46 	lds	r20, 0x4615	; 0x804615 <g_event_finish_epoch+0x2>
    2f9a:	50 91 16 46 	lds	r21, 0x4616	; 0x804616 <g_event_finish_epoch+0x3>
    2f9e:	80 91 0f 46 	lds	r24, 0x460F	; 0x80460f <g_event_start_epoch>
    2fa2:	90 91 10 46 	lds	r25, 0x4610	; 0x804610 <g_event_start_epoch+0x1>
    2fa6:	a0 91 11 46 	lds	r26, 0x4611	; 0x804611 <g_event_start_epoch+0x2>
    2faa:	b0 91 12 46 	lds	r27, 0x4612	; 0x804612 <g_event_start_epoch+0x3>
    2fae:	e1 2c       	mov	r14, r1
    2fb0:	f1 2c       	mov	r15, r1
    2fb2:	0f ea       	ldi	r16, 0xAF	; 175
    2fb4:	12 e4       	ldi	r17, 0x42	; 66
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	cd 01       	movw	r24, r26
    2fba:	0e 94 41 25 	call	0x4a82	; 0x4a82 <_Z14reportTimeTillmmPKcS0_>
    2fbe:	20 91 0f 46 	lds	r18, 0x460F	; 0x80460f <g_event_start_epoch>
    2fc2:	30 91 10 46 	lds	r19, 0x4610	; 0x804610 <g_event_start_epoch+0x1>
    2fc6:	40 91 11 46 	lds	r20, 0x4611	; 0x804611 <g_event_start_epoch+0x2>
    2fca:	50 91 12 46 	lds	r21, 0x4612	; 0x804612 <g_event_start_epoch+0x3>
    2fce:	80 91 20 46 	lds	r24, 0x4620	; 0x804620 <g_current_epoch>
    2fd2:	90 91 21 46 	lds	r25, 0x4621	; 0x804621 <g_current_epoch+0x1>
    2fd6:	a0 91 22 46 	lds	r26, 0x4622	; 0x804622 <g_current_epoch+0x2>
    2fda:	b0 91 23 46 	lds	r27, 0x4623	; 0x804623 <g_current_epoch+0x3>
    2fde:	28 17       	cp	r18, r24
    2fe0:	39 07       	cpc	r19, r25
    2fe2:	4a 07       	cpc	r20, r26
    2fe4:	5b 07       	cpc	r21, r27
    2fe6:	c0 f4       	brcc	.+48     	; 0x3018 <_Z19handleSerialBusMsgsv+0xc92>
    2fe8:	20 91 13 46 	lds	r18, 0x4613	; 0x804613 <g_event_finish_epoch>
    2fec:	30 91 14 46 	lds	r19, 0x4614	; 0x804614 <g_event_finish_epoch+0x1>
    2ff0:	40 91 15 46 	lds	r20, 0x4615	; 0x804615 <g_event_finish_epoch+0x2>
    2ff4:	50 91 16 46 	lds	r21, 0x4616	; 0x804616 <g_event_finish_epoch+0x3>
    2ff8:	80 91 20 46 	lds	r24, 0x4620	; 0x804620 <g_current_epoch>
    2ffc:	90 91 21 46 	lds	r25, 0x4621	; 0x804621 <g_current_epoch+0x1>
    3000:	a0 91 22 46 	lds	r26, 0x4622	; 0x804622 <g_current_epoch+0x2>
    3004:	b0 91 23 46 	lds	r27, 0x4623	; 0x804623 <g_current_epoch+0x3>
    3008:	e1 2c       	mov	r14, r1
    300a:	f1 2c       	mov	r15, r1
    300c:	07 eb       	ldi	r16, 0xB7	; 183
    300e:	12 e4       	ldi	r17, 0x42	; 66
    3010:	bc 01       	movw	r22, r24
    3012:	cd 01       	movw	r24, r26
    3014:	0e 94 41 25 	call	0x4a82	; 0x4a82 <_Z14reportTimeTillmmPKcS0_>
    3018:	89 85       	ldd	r24, Y+9	; 0x09
    301a:	88 23       	and	r24, r24
    301c:	01 f1       	breq	.+64     	; 0x305e <_Z19handleSerialBusMsgsv+0xcd8>
    301e:	83 e8       	ldi	r24, 0x83	; 131
    3020:	95 e4       	ldi	r25, 0x45	; 69
    3022:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    3026:	1b c0       	rjmp	.+54     	; 0x305e <_Z19handleSerialBusMsgsv+0xcd8>
    3028:	8a 85       	ldd	r24, Y+10	; 0x0a
    302a:	9b 85       	ldd	r25, Y+11	; 0x0b
    302c:	fc 01       	movw	r30, r24
    302e:	83 81       	ldd	r24, Z+3	; 0x03
    3030:	83 34       	cpi	r24, 0x43	; 67
    3032:	b9 f4       	brne	.+46     	; 0x3062 <_Z19handleSerialBusMsgsv+0xcdc>
    3034:	8a 85       	ldd	r24, Y+10	; 0x0a
    3036:	9b 85       	ldd	r25, Y+11	; 0x0b
    3038:	fc 01       	movw	r30, r24
    303a:	87 89       	ldd	r24, Z+23	; 0x17
    303c:	88 23       	and	r24, r24
    303e:	89 f0       	breq	.+34     	; 0x3062 <_Z19handleSerialBusMsgsv+0xcdc>
    3040:	8a 85       	ldd	r24, Y+10	; 0x0a
    3042:	9b 85       	ldd	r25, Y+11	; 0x0b
    3044:	47 96       	adiw	r24, 0x17	; 23
    3046:	0e 94 12 4a 	call	0x9424	; 0x9424 <atoi>
    304a:	8c ab       	std	Y+52, r24	; 0x34
    304c:	9d ab       	std	Y+53, r25	; 0x35
    304e:	09 c0       	rjmp	.+18     	; 0x3062 <_Z19handleSerialBusMsgsv+0xcdc>
    3050:	85 e7       	ldi	r24, 0x75	; 117
    3052:	90 e4       	ldi	r25, 0x40	; 64
    3054:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    3058:	05 c0       	rjmp	.+10     	; 0x3064 <_Z19handleSerialBusMsgsv+0xcde>
    305a:	00 00       	nop
    305c:	03 c0       	rjmp	.+6      	; 0x3064 <_Z19handleSerialBusMsgsv+0xcde>
    305e:	00 00       	nop
    3060:	01 c0       	rjmp	.+2      	; 0x3064 <_Z19handleSerialBusMsgsv+0xcde>
    3062:	00 00       	nop
    3064:	8a 85       	ldd	r24, Y+10	; 0x0a
    3066:	9b 85       	ldd	r25, Y+11	; 0x0b
    3068:	fc 01       	movw	r30, r24
    306a:	11 82       	std	Z+1, r1	; 0x01
    306c:	12 82       	std	Z+2, r1	; 0x02
    306e:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <sb_send_NewPrompt>
    3072:	95 c9       	rjmp	.-3286   	; 0x239e <_Z19handleSerialBusMsgsv+0x18>
    3074:	00 00       	nop
    3076:	c3 59       	subi	r28, 0x93	; 147
    3078:	df 4f       	sbci	r29, 0xFF	; 255
    307a:	cd bf       	out	0x3d, r28	; 61
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	df 91       	pop	r29
    3080:	cf 91       	pop	r28
    3082:	1f 91       	pop	r17
    3084:	0f 91       	pop	r16
    3086:	ff 90       	pop	r15
    3088:	ef 90       	pop	r14
    308a:	08 95       	ret

0000308c <_Z17handleLinkBusMsgsv>:
    308c:	ef 92       	push	r14
    308e:	ff 92       	push	r15
    3090:	0f 93       	push	r16
    3092:	1f 93       	push	r17
    3094:	cf 93       	push	r28
    3096:	df 93       	push	r29
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
    309c:	e3 97       	sbiw	r28, 0x33	; 51
    309e:	cd bf       	out	0x3d, r28	; 61
    30a0:	de bf       	out	0x3e, r29	; 62
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	89 83       	std	Y+1, r24	; 0x01
    30a6:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <_Z18nextFullLBRxBufferv>
    30aa:	8c 87       	std	Y+12, r24	; 0x0c
    30ac:	9d 87       	std	Y+13, r25	; 0x0d
    30ae:	21 e0       	ldi	r18, 0x01	; 1
    30b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    30b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    30b4:	89 2b       	or	r24, r25
    30b6:	09 f4       	brne	.+2      	; 0x30ba <_Z17handleLinkBusMsgsv+0x2e>
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	22 23       	and	r18, r18
    30bc:	09 f4       	brne	.+2      	; 0x30c0 <_Z17handleLinkBusMsgsv+0x34>
    30be:	8b c6       	rjmp	.+3350   	; 0x3dd6 <_Z17handleLinkBusMsgsv+0xd4a>
    30c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    30c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    30c4:	fc 01       	movw	r30, r24
    30c6:	81 81       	ldd	r24, Z+1	; 0x01
    30c8:	92 81       	ldd	r25, Z+2	; 0x02
    30ca:	8e 87       	std	Y+14, r24	; 0x0e
    30cc:	9f 87       	std	Y+15, r25	; 0x0f
    30ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    30d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    30d2:	82 38       	cpi	r24, 0x82	; 130
    30d4:	fe e1       	ldi	r31, 0x1E	; 30
    30d6:	9f 07       	cpc	r25, r31
    30d8:	09 f4       	brne	.+2      	; 0x30dc <_Z17handleLinkBusMsgsv+0x50>
    30da:	71 c0       	rjmp	.+226    	; 0x31be <_Z17handleLinkBusMsgsv+0x132>
    30dc:	83 38       	cpi	r24, 0x83	; 131
    30de:	2e e1       	ldi	r18, 0x1E	; 30
    30e0:	92 07       	cpc	r25, r18
    30e2:	30 f5       	brcc	.+76     	; 0x3130 <_Z17handleLinkBusMsgsv+0xa4>
    30e4:	81 36       	cpi	r24, 0x61	; 97
    30e6:	33 e0       	ldi	r19, 0x03	; 3
    30e8:	93 07       	cpc	r25, r19
    30ea:	09 f4       	brne	.+2      	; 0x30ee <_Z17handleLinkBusMsgsv+0x62>
    30ec:	de c4       	rjmp	.+2492   	; 0x3aaa <_Z17handleLinkBusMsgsv+0xa1e>
    30ee:	82 36       	cpi	r24, 0x62	; 98
    30f0:	e3 e0       	ldi	r30, 0x03	; 3
    30f2:	9e 07       	cpc	r25, r30
    30f4:	78 f4       	brcc	.+30     	; 0x3114 <_Z17handleLinkBusMsgsv+0x88>
    30f6:	85 31       	cpi	r24, 0x15	; 21
    30f8:	f3 e0       	ldi	r31, 0x03	; 3
    30fa:	9f 07       	cpc	r25, r31
    30fc:	09 f4       	brne	.+2      	; 0x3100 <_Z17handleLinkBusMsgsv+0x74>
    30fe:	1e c1       	rjmp	.+572    	; 0x333c <_Z17handleLinkBusMsgsv+0x2b0>
    3100:	8e 31       	cpi	r24, 0x1E	; 30
    3102:	23 e0       	ldi	r18, 0x03	; 3
    3104:	92 07       	cpc	r25, r18
    3106:	09 f4       	brne	.+2      	; 0x310a <_Z17handleLinkBusMsgsv+0x7e>
    3108:	45 c3       	rjmp	.+1674   	; 0x3794 <_Z17handleLinkBusMsgsv+0x708>
    310a:	84 35       	cpi	r24, 0x54	; 84
    310c:	91 05       	cpc	r25, r1
    310e:	09 f4       	brne	.+2      	; 0x3112 <_Z17handleLinkBusMsgsv+0x86>
    3110:	41 c4       	rjmp	.+2178   	; 0x3994 <_Z17handleLinkBusMsgsv+0x908>
    3112:	36 c6       	rjmp	.+3180   	; 0x3d80 <_Z17handleLinkBusMsgsv+0xcf4>
    3114:	8f 3a       	cpi	r24, 0xAF	; 175
    3116:	33 e0       	ldi	r19, 0x03	; 3
    3118:	93 07       	cpc	r25, r19
    311a:	d1 f1       	breq	.+116    	; 0x3190 <_Z17handleLinkBusMsgsv+0x104>
    311c:	86 3a       	cpi	r24, 0xA6	; 166
    311e:	ec e1       	ldi	r30, 0x1C	; 28
    3120:	9e 07       	cpc	r25, r30
    3122:	09 f4       	brne	.+2      	; 0x3126 <_Z17handleLinkBusMsgsv+0x9a>
    3124:	4d c5       	rjmp	.+2714   	; 0x3bc0 <_Z17handleLinkBusMsgsv+0xb34>
    3126:	84 38       	cpi	r24, 0x84	; 132
    3128:	93 40       	sbci	r25, 0x03	; 3
    312a:	09 f4       	brne	.+2      	; 0x312e <_Z17handleLinkBusMsgsv+0xa2>
    312c:	cd c1       	rjmp	.+922    	; 0x34c8 <_Z17handleLinkBusMsgsv+0x43c>
    312e:	28 c6       	rjmp	.+3152   	; 0x3d80 <_Z17handleLinkBusMsgsv+0xcf4>
    3130:	8a 39       	cpi	r24, 0x9A	; 154
    3132:	23 e2       	ldi	r18, 0x23	; 35
    3134:	92 07       	cpc	r25, r18
    3136:	09 f4       	brne	.+2      	; 0x313a <_Z17handleLinkBusMsgsv+0xae>
    3138:	41 c0       	rjmp	.+130    	; 0x31bc <_Z17handleLinkBusMsgsv+0x130>
    313a:	8b 39       	cpi	r24, 0x9B	; 155
    313c:	33 e2       	ldi	r19, 0x23	; 35
    313e:	93 07       	cpc	r25, r19
    3140:	78 f4       	brcc	.+30     	; 0x3160 <_Z17handleLinkBusMsgsv+0xd4>
    3142:	8d 3a       	cpi	r24, 0xAD	; 173
    3144:	e2 e2       	ldi	r30, 0x22	; 34
    3146:	9e 07       	cpc	r25, r30
    3148:	09 f4       	brne	.+2      	; 0x314c <_Z17handleLinkBusMsgsv+0xc0>
    314a:	96 c0       	rjmp	.+300    	; 0x3278 <_Z17handleLinkBusMsgsv+0x1ec>
    314c:	81 3c       	cpi	r24, 0xC1	; 193
    314e:	f2 e2       	ldi	r31, 0x22	; 34
    3150:	9f 07       	cpc	r25, r31
    3152:	09 f4       	brne	.+2      	; 0x3156 <_Z17handleLinkBusMsgsv+0xca>
    3154:	ee c0       	rjmp	.+476    	; 0x3332 <_Z17handleLinkBusMsgsv+0x2a6>
    3156:	81 3d       	cpi	r24, 0xD1	; 209
    3158:	9e 41       	sbci	r25, 0x1E	; 30
    315a:	09 f4       	brne	.+2      	; 0x315e <_Z17handleLinkBusMsgsv+0xd2>
    315c:	bd c4       	rjmp	.+2426   	; 0x3ad8 <_Z17handleLinkBusMsgsv+0xa4c>
    315e:	10 c6       	rjmp	.+3104   	; 0x3d80 <_Z17handleLinkBusMsgsv+0xcf4>
    3160:	80 3d       	cpi	r24, 0xD0	; 208
    3162:	33 e2       	ldi	r19, 0x23	; 35
    3164:	93 07       	cpc	r25, r19
    3166:	09 f4       	brne	.+2      	; 0x316a <_Z17handleLinkBusMsgsv+0xde>
    3168:	78 c3       	rjmp	.+1776   	; 0x385a <_Z17handleLinkBusMsgsv+0x7ce>
    316a:	81 3d       	cpi	r24, 0xD1	; 209
    316c:	e3 e2       	ldi	r30, 0x23	; 35
    316e:	9e 07       	cpc	r25, r30
    3170:	28 f4       	brcc	.+10     	; 0x317c <_Z17handleLinkBusMsgsv+0xf0>
    3172:	8f 3c       	cpi	r24, 0xCF	; 207
    3174:	93 42       	sbci	r25, 0x23	; 35
    3176:	09 f4       	brne	.+2      	; 0x317a <_Z17handleLinkBusMsgsv+0xee>
    3178:	eb c5       	rjmp	.+3030   	; 0x3d50 <_Z17handleLinkBusMsgsv+0xcc4>
    317a:	02 c6       	rjmp	.+3076   	; 0x3d80 <_Z17handleLinkBusMsgsv+0xcf4>
    317c:	87 3f       	cpi	r24, 0xF7	; 247
    317e:	23 e2       	ldi	r18, 0x23	; 35
    3180:	92 07       	cpc	r25, r18
    3182:	09 f4       	brne	.+2      	; 0x3186 <_Z17handleLinkBusMsgsv+0xfa>
    3184:	16 c2       	rjmp	.+1068   	; 0x35b2 <_Z17handleLinkBusMsgsv+0x526>
    3186:	8c 39       	cpi	r24, 0x9C	; 156
    3188:	94 42       	sbci	r25, 0x24	; 36
    318a:	09 f4       	brne	.+2      	; 0x318e <_Z17handleLinkBusMsgsv+0x102>
    318c:	f1 c5       	rjmp	.+3042   	; 0x3d70 <_Z17handleLinkBusMsgsv+0xce4>
    318e:	f8 c5       	rjmp	.+3056   	; 0x3d80 <_Z17handleLinkBusMsgsv+0xcf4>
    3190:	8c 85       	ldd	r24, Y+12	; 0x0c
    3192:	9d 85       	ldd	r25, Y+13	; 0x0d
    3194:	fc 01       	movw	r30, r24
    3196:	83 81       	ldd	r24, Z+3	; 0x03
    3198:	88 23       	and	r24, r24
    319a:	09 f4       	brne	.+2      	; 0x319e <_Z17handleLinkBusMsgsv+0x112>
    319c:	f7 c5       	rjmp	.+3054   	; 0x3d8c <_Z17handleLinkBusMsgsv+0xd00>
    319e:	8c 85       	ldd	r24, Y+12	; 0x0c
    31a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    31a2:	03 96       	adiw	r24, 0x03	; 3
    31a4:	0e 94 12 4a 	call	0x9424	; 0x9424 <atoi>
    31a8:	21 e0       	ldi	r18, 0x01	; 1
    31aa:	89 2b       	or	r24, r25
    31ac:	09 f4       	brne	.+2      	; 0x31b0 <_Z17handleLinkBusMsgsv+0x124>
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	28 8b       	std	Y+16, r18	; 0x10
    31b2:	0e 94 82 36 	call	0x6d04	; 0x6d04 <_Z15linkbus_disablev>
    31b6:	10 92 09 40 	sts	0x4009, r1	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    31ba:	e8 c5       	rjmp	.+3024   	; 0x3d8c <_Z17handleLinkBusMsgsv+0xd00>
    31bc:	ff cf       	rjmp	.-2      	; 0x31bc <_Z17handleLinkBusMsgsv+0x130>
    31be:	8c 85       	ldd	r24, Y+12	; 0x0c
    31c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    31c2:	fc 01       	movw	r30, r24
    31c4:	83 81       	ldd	r24, Z+3	; 0x03
    31c6:	89 8b       	std	Y+17, r24	; 0x11
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL13g_wifi_active>
    31ce:	89 89       	ldd	r24, Y+17	; 0x11
    31d0:	8a 35       	cpi	r24, 0x5A	; 90
    31d2:	21 f4       	brne	.+8      	; 0x31dc <_Z17handleLinkBusMsgsv+0x150>
    31d4:	88 e7       	ldi	r24, 0x78	; 120
    31d6:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    31da:	da c5       	rjmp	.+2996   	; 0x3d90 <_Z17handleLinkBusMsgsv+0xd04>
    31dc:	89 89       	ldd	r24, Y+17	; 0x11
    31de:	80 33       	cpi	r24, 0x30	; 48
    31e0:	b1 f5       	brne	.+108    	; 0x324e <_Z17handleLinkBusMsgsv+0x1c2>
    31e2:	80 91 fd 45 	lds	r24, 0x45FD	; 0x8045fd <g_waiting_for_next_event>
    31e6:	88 23       	and	r24, r24
    31e8:	39 f0       	breq	.+14     	; 0x31f8 <_Z17handleLinkBusMsgsv+0x16c>
    31ea:	48 ec       	ldi	r20, 0xC8	; 200
    31ec:	52 e4       	ldi	r21, 0x42	; 66
    31ee:	6a ec       	ldi	r22, 0xCA	; 202
    31f0:	72 e4       	ldi	r23, 0x42	; 66
    31f2:	83 e0       	ldi	r24, 0x03	; 3
    31f4:	0e 94 e5 36 	call	0x6dca	; 0x6dca <_Z11lb_send_msg13LBMessageTypePKcPc>
    31f8:	80 e0       	ldi	r24, 0x00	; 0
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	2b 2f       	mov	r18, r27
    3206:	2f 93       	push	r18
    3208:	2a 2f       	mov	r18, r26
    320a:	2f 93       	push	r18
    320c:	29 2f       	mov	r18, r25
    320e:	2f 93       	push	r18
    3210:	8f 93       	push	r24
    3212:	8e ec       	ldi	r24, 0xCE	; 206
    3214:	92 e4       	ldi	r25, 0x42	; 66
    3216:	89 2f       	mov	r24, r25
    3218:	8f 93       	push	r24
    321a:	8e ec       	ldi	r24, 0xCE	; 206
    321c:	92 e4       	ldi	r25, 0x42	; 66
    321e:	8f 93       	push	r24
    3220:	83 e8       	ldi	r24, 0x83	; 131
    3222:	95 e4       	ldi	r25, 0x45	; 69
    3224:	89 2f       	mov	r24, r25
    3226:	8f 93       	push	r24
    3228:	83 e8       	ldi	r24, 0x83	; 131
    322a:	95 e4       	ldi	r25, 0x45	; 69
    322c:	8f 93       	push	r24
    322e:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    3232:	2d b7       	in	r18, 0x3d	; 61
    3234:	3e b7       	in	r19, 0x3e	; 62
    3236:	28 5f       	subi	r18, 0xF8	; 248
    3238:	3f 4f       	sbci	r19, 0xFF	; 255
    323a:	cd bf       	out	0x3d, r28	; 61
    323c:	de bf       	out	0x3e, r29	; 62
    323e:	43 e8       	ldi	r20, 0x83	; 131
    3240:	55 e4       	ldi	r21, 0x45	; 69
    3242:	62 ed       	ldi	r22, 0xD2	; 210
    3244:	72 e4       	ldi	r23, 0x42	; 66
    3246:	83 e0       	ldi	r24, 0x03	; 3
    3248:	0e 94 e5 36 	call	0x6dca	; 0x6dca <_Z11lb_send_msg13LBMessageTypePKcPc>
    324c:	a1 c5       	rjmp	.+2882   	; 0x3d90 <_Z17handleLinkBusMsgsv+0xd04>
    324e:	89 89       	ldd	r24, Y+17	; 0x11
    3250:	83 33       	cpi	r24, 0x33	; 51
    3252:	09 f0       	breq	.+2      	; 0x3256 <_Z17handleLinkBusMsgsv+0x1ca>
    3254:	9d c5       	rjmp	.+2874   	; 0x3d90 <_Z17handleLinkBusMsgsv+0xd04>
    3256:	f8 94       	cli
    3258:	10 92 c1 45 	sts	0x45C1, r1	; 0x8045c1 <_ZL19g_wifi_enable_delay>
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    3262:	10 92 fd 45 	sts	0x45FD, r1	; 0x8045fd <g_waiting_for_next_event>
    3266:	10 92 fc 45 	sts	0x45FC, r1	; 0x8045fc <g_check_for_next_event>
    326a:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	80 93 c2 45 	sts	0x45C2, r24	; 0x8045c2 <_ZL20g_shutting_down_wifi>
    3274:	78 94       	sei
    3276:	8c c5       	rjmp	.+2840   	; 0x3d90 <_Z17handleLinkBusMsgsv+0xd04>
    3278:	8c 85       	ldd	r24, Y+12	; 0x0c
    327a:	9d 85       	ldd	r25, Y+13	; 0x0d
    327c:	fc 01       	movw	r30, r24
    327e:	83 81       	ldd	r24, Z+3	; 0x03
    3280:	88 23       	and	r24, r24
    3282:	09 f4       	brne	.+2      	; 0x3286 <_Z17handleLinkBusMsgsv+0x1fa>
    3284:	87 c5       	rjmp	.+2830   	; 0x3d94 <_Z17handleLinkBusMsgsv+0xd08>
    3286:	8c 85       	ldd	r24, Y+12	; 0x0c
    3288:	9d 85       	ldd	r25, Y+13	; 0x0d
    328a:	fc 01       	movw	r30, r24
    328c:	83 81       	ldd	r24, Z+3	; 0x03
    328e:	8d 34       	cpi	r24, 0x4D	; 77
    3290:	a9 f4       	brne	.+42     	; 0x32bc <_Z17handleLinkBusMsgsv+0x230>
    3292:	8c 85       	ldd	r24, Y+12	; 0x0c
    3294:	9d 85       	ldd	r25, Y+13	; 0x0d
    3296:	fc 01       	movw	r30, r24
    3298:	80 8d       	ldd	r24, Z+24	; 0x18
    329a:	88 23       	and	r24, r24
    329c:	79 f0       	breq	.+30     	; 0x32bc <_Z17handleLinkBusMsgsv+0x230>
    329e:	8c 85       	ldd	r24, Y+12	; 0x0c
    32a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    32a2:	48 96       	adiw	r24, 0x18	; 24
    32a4:	0e 94 12 4a 	call	0x9424	; 0x9424 <atoi>
    32a8:	80 93 2d 46 	sts	0x462D, r24	; 0x80462d <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    32ac:	90 93 2e 46 	sts	0x462E, r25	; 0x80462e <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    32b0:	80 91 2f 46 	lds	r24, 0x462F	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    32b4:	8f 5f       	subi	r24, 0xFF	; 255
    32b6:	80 93 2f 46 	sts	0x462F, r24	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    32ba:	09 c0       	rjmp	.+18     	; 0x32ce <_Z17handleLinkBusMsgsv+0x242>
    32bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    32be:	9d 85       	ldd	r25, Y+13	; 0x0d
    32c0:	03 96       	adiw	r24, 0x03	; 3
    32c2:	0e 94 12 4a 	call	0x9424	; 0x9424 <atoi>
    32c6:	80 93 2d 46 	sts	0x462D, r24	; 0x80462d <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    32ca:	90 93 2e 46 	sts	0x462E, r25	; 0x80462e <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    32ce:	60 e0       	ldi	r22, 0x00	; 0
    32d0:	70 e0       	ldi	r23, 0x00	; 0
    32d2:	8d e2       	ldi	r24, 0x2D	; 45
    32d4:	96 e4       	ldi	r25, 0x46	; 70
    32d6:	0e 94 d5 43 	call	0x87aa	; 0x87aa <_Z15txSetParametersPjPb>
    32da:	8a 8b       	std	Y+18, r24	; 0x12
    32dc:	8a 89       	ldd	r24, Y+18	; 0x12
    32de:	88 23       	and	r24, r24
    32e0:	19 f0       	breq	.+6      	; 0x32e8 <_Z17handleLinkBusMsgsv+0x25c>
    32e2:	8a 89       	ldd	r24, Y+18	; 0x12
    32e4:	80 93 b5 45 	sts	0x45B5, r24	; 0x8045b5 <_ZL17g_last_error_code>
    32e8:	80 91 2d 46 	lds	r24, 0x462D	; 0x80462d <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    32ec:	90 91 2e 46 	lds	r25, 0x462E	; 0x80462e <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    32f0:	29 2f       	mov	r18, r25
    32f2:	2f 93       	push	r18
    32f4:	8f 93       	push	r24
    32f6:	86 ed       	ldi	r24, 0xD6	; 214
    32f8:	92 e4       	ldi	r25, 0x42	; 66
    32fa:	89 2f       	mov	r24, r25
    32fc:	8f 93       	push	r24
    32fe:	86 ed       	ldi	r24, 0xD6	; 214
    3300:	92 e4       	ldi	r25, 0x42	; 66
    3302:	8f 93       	push	r24
    3304:	83 e8       	ldi	r24, 0x83	; 131
    3306:	95 e4       	ldi	r25, 0x45	; 69
    3308:	89 2f       	mov	r24, r25
    330a:	8f 93       	push	r24
    330c:	83 e8       	ldi	r24, 0x83	; 131
    330e:	95 e4       	ldi	r25, 0x45	; 69
    3310:	8f 93       	push	r24
    3312:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    3316:	0f 90       	pop	r0
    3318:	0f 90       	pop	r0
    331a:	0f 90       	pop	r0
    331c:	0f 90       	pop	r0
    331e:	0f 90       	pop	r0
    3320:	0f 90       	pop	r0
    3322:	43 e8       	ldi	r20, 0x83	; 131
    3324:	55 e4       	ldi	r21, 0x45	; 69
    3326:	6b ed       	ldi	r22, 0xDB	; 219
    3328:	72 e4       	ldi	r23, 0x42	; 66
    332a:	83 e0       	ldi	r24, 0x03	; 3
    332c:	0e 94 e5 36 	call	0x6dca	; 0x6dca <_Z11lb_send_msg13LBMessageTypePKcPc>
    3330:	31 c5       	rjmp	.+2658   	; 0x3d94 <_Z17handleLinkBusMsgsv+0xd08>
    3332:	8e e0       	ldi	r24, 0x0E	; 14
    3334:	96 e4       	ldi	r25, 0x46	; 70
    3336:	0e 94 1c 30 	call	0x6038	; 0x6038 <_ZN13EepromManager13saveAllEEPROMEv>
    333a:	3f c5       	rjmp	.+2686   	; 0x3dba <_Z17handleLinkBusMsgsv+0xd2e>
    333c:	8c 85       	ldd	r24, Y+12	; 0x0c
    333e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3340:	fc 01       	movw	r30, r24
    3342:	83 81       	ldd	r24, Z+3	; 0x03
    3344:	8b 8b       	std	Y+19, r24	; 0x13
    3346:	8b 89       	ldd	r24, Y+19	; 0x13
    3348:	81 33       	cpi	r24, 0x31	; 49
    334a:	21 f0       	breq	.+8      	; 0x3354 <_Z17handleLinkBusMsgsv+0x2c8>
    334c:	8b 89       	ldd	r24, Y+19	; 0x13
    334e:	82 33       	cpi	r24, 0x32	; 50
    3350:	09 f0       	breq	.+2      	; 0x3354 <_Z17handleLinkBusMsgsv+0x2c8>
    3352:	ae c0       	rjmp	.+348    	; 0x34b0 <_Z17handleLinkBusMsgsv+0x424>
    3354:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <_Z18txIsAntennaForBandv>
    3358:	98 2f       	mov	r25, r24
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	89 27       	eor	r24, r25
    335e:	88 23       	and	r24, r24
    3360:	41 f0       	breq	.+16     	; 0x3372 <_Z17handleLinkBusMsgsv+0x2e6>
    3362:	90 91 36 40 	lds	r25, 0x4036	; 0x804036 <g_tx_power_is_zero>
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	89 27       	eor	r24, r25
    336a:	88 23       	and	r24, r24
    336c:	11 f0       	breq	.+4      	; 0x3372 <_Z17handleLinkBusMsgsv+0x2e6>
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	01 c0       	rjmp	.+2      	; 0x3374 <_Z17handleLinkBusMsgsv+0x2e8>
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	88 23       	and	r24, r24
    3376:	21 f0       	breq	.+8      	; 0x3380 <_Z17handleLinkBusMsgsv+0x2f4>
    3378:	87 ef       	ldi	r24, 0xF7	; 247
    337a:	80 93 b5 45 	sts	0x45B5, r24	; 0x8045b5 <_ZL17g_last_error_code>
    337e:	a2 c0       	rjmp	.+324    	; 0x34c4 <_Z17handleLinkBusMsgsv+0x438>
    3380:	8b 89       	ldd	r24, Y+19	; 0x13
    3382:	81 33       	cpi	r24, 0x31	; 49
    3384:	09 f0       	breq	.+2      	; 0x3388 <_Z17handleLinkBusMsgsv+0x2fc>
    3386:	64 c0       	rjmp	.+200    	; 0x3450 <_Z17handleLinkBusMsgsv+0x3c4>
    3388:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <_Z18txIsAntennaForBandv>
    338c:	88 23       	and	r24, r24
    338e:	21 f4       	brne	.+8      	; 0x3398 <_Z17handleLinkBusMsgsv+0x30c>
    3390:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    3394:	88 23       	and	r24, r24
    3396:	11 f0       	breq	.+4      	; 0x339c <_Z17handleLinkBusMsgsv+0x310>
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	01 c0       	rjmp	.+2      	; 0x339e <_Z17handleLinkBusMsgsv+0x312>
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	88 23       	and	r24, r24
    33a0:	09 f4       	brne	.+2      	; 0x33a4 <_Z17handleLinkBusMsgsv+0x318>
    33a2:	52 c0       	rjmp	.+164    	; 0x3448 <_Z17handleLinkBusMsgsv+0x3bc>
    33a4:	f8 94       	cli
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	8c a7       	std	Y+44, r24	; 0x2c
    33aa:	ce 01       	movw	r24, r28
    33ac:	8c 96       	adiw	r24, 0x2c	; 44
    33ae:	40 e0       	ldi	r20, 0x00	; 0
    33b0:	50 e0       	ldi	r21, 0x00	; 0
    33b2:	bc 01       	movw	r22, r24
    33b4:	84 ec       	ldi	r24, 0xC4	; 196
    33b6:	95 e4       	ldi	r25, 0x45	; 69
    33b8:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_Z9makeMorsePcPbS0_>
    33bc:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    33c0:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_Z13throttleValueh>
    33c4:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    33c8:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    33cc:	78 94       	sei
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	a0 e0       	ldi	r26, 0x00	; 0
    33d4:	b0 e0       	ldi	r27, 0x00	; 0
    33d6:	80 93 f2 45 	sts	0x45F2, r24	; 0x8045f2 <g_event_start_time>
    33da:	90 93 f3 45 	sts	0x45F3, r25	; 0x8045f3 <g_event_start_time+0x1>
    33de:	a0 93 f4 45 	sts	0x45F4, r26	; 0x8045f4 <g_event_start_time+0x2>
    33e2:	b0 93 f5 45 	sts	0x45F5, r27	; 0x8045f5 <g_event_start_time+0x3>
    33e6:	8f ef       	ldi	r24, 0xFF	; 255
    33e8:	9f ef       	ldi	r25, 0xFF	; 255
    33ea:	dc 01       	movw	r26, r24
    33ec:	80 93 f6 45 	sts	0x45F6, r24	; 0x8045f6 <g_event_finish_time>
    33f0:	90 93 f7 45 	sts	0x45F7, r25	; 0x8045f7 <g_event_finish_time+0x1>
    33f4:	a0 93 f8 45 	sts	0x45F8, r26	; 0x8045f8 <g_event_finish_time+0x2>
    33f8:	b0 93 f9 45 	sts	0x45F9, r27	; 0x8045f9 <g_event_finish_time+0x3>
    33fc:	8f e0       	ldi	r24, 0x0F	; 15
    33fe:	97 e2       	ldi	r25, 0x27	; 39
    3400:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    3404:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    3408:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <g_off_air_seconds>
    340c:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <g_off_air_seconds+0x1>
    3410:	8f e0       	ldi	r24, 0x0F	; 15
    3412:	97 e2       	ldi	r25, 0x27	; 39
    3414:	a0 e0       	ldi	r26, 0x00	; 0
    3416:	b0 e0       	ldi	r27, 0x00	; 0
    3418:	80 93 ba 45 	sts	0x45BA, r24	; 0x8045ba <_ZL12g_on_the_air>
    341c:	90 93 bb 45 	sts	0x45BB, r25	; 0x8045bb <_ZL12g_on_the_air+0x1>
    3420:	a0 93 bc 45 	sts	0x45BC, r26	; 0x8045bc <_ZL12g_on_the_air+0x2>
    3424:	b0 93 bd 45 	sts	0x45BD, r27	; 0x8045bd <_ZL12g_on_the_air+0x3>
    3428:	8f ef       	ldi	r24, 0xFF	; 255
    342a:	9f ef       	ldi	r25, 0xFF	; 255
    342c:	80 93 be 45 	sts	0x45BE, r24	; 0x8045be <_ZL26g_sendID_seconds_countdown>
    3430:	90 93 bf 45 	sts	0x45BF, r25	; 0x8045bf <_ZL26g_sendID_seconds_countdown+0x1>
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	80 93 fb 45 	sts	0x45FB, r24	; 0x8045fb <g_event_commenced>
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	80 93 fa 45 	sts	0x45FA, r24	; 0x8045fa <g_event_enabled>
    3440:	8d ef       	ldi	r24, 0xFD	; 253
    3442:	80 93 b6 45 	sts	0x45B6, r24	; 0x8045b6 <_ZL18g_last_status_code>
    3446:	3e c0       	rjmp	.+124    	; 0x34c4 <_Z17handleLinkBusMsgsv+0x438>
    3448:	87 ef       	ldi	r24, 0xF7	; 247
    344a:	80 93 b5 45 	sts	0x45B5, r24	; 0x8045b5 <_ZL17g_last_error_code>
    344e:	3a c0       	rjmp	.+116    	; 0x34c4 <_Z17handleLinkBusMsgsv+0x438>
    3450:	8b 89       	ldd	r24, Y+19	; 0x13
    3452:	82 33       	cpi	r24, 0x32	; 50
    3454:	b9 f5       	brne	.+110    	; 0x34c4 <_Z17handleLinkBusMsgsv+0x438>
    3456:	80 91 2f 46 	lds	r24, 0x462F	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    345a:	8e 30       	cpi	r24, 0x0E	; 14
    345c:	20 f4       	brcc	.+8      	; 0x3466 <_Z17handleLinkBusMsgsv+0x3da>
    345e:	8d ec       	ldi	r24, 0xCD	; 205
    3460:	80 93 b5 45 	sts	0x45B5, r24	; 0x8045b5 <_ZL17g_last_error_code>
    3464:	2f c0       	rjmp	.+94     	; 0x34c4 <_Z17handleLinkBusMsgsv+0x438>
    3466:	1d a6       	std	Y+45, r1	; 0x2d
    3468:	ce 01       	movw	r24, r28
    346a:	8d 96       	adiw	r24, 0x2d	; 45
    346c:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <_Z11launchEventP2SC>
    3470:	80 93 30 46 	sts	0x4630, r24	; 0x804630 <_ZZ17handleLinkBusMsgsvE2ec>
    3474:	80 91 fe 45 	lds	r24, 0x45FE	; 0x8045fe <_ZL13g_go_to_sleep>
    3478:	88 23       	and	r24, r24
    347a:	31 f0       	breq	.+12     	; 0x3488 <_Z17handleLinkBusMsgsv+0x3fc>
    347c:	80 91 c3 45 	lds	r24, 0x45C3	; 0x8045c3 <_ZL11g_sleepType>
    3480:	88 23       	and	r24, r24
    3482:	11 f0       	breq	.+4      	; 0x3488 <_Z17handleLinkBusMsgsv+0x3fc>
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	01 c0       	rjmp	.+2      	; 0x348a <_Z17handleLinkBusMsgsv+0x3fe>
    3488:	80 e0       	ldi	r24, 0x00	; 0
    348a:	88 23       	and	r24, r24
    348c:	29 f0       	breq	.+10     	; 0x3498 <_Z17handleLinkBusMsgsv+0x40c>
    348e:	83 e0       	ldi	r24, 0x03	; 3
    3490:	80 93 c3 45 	sts	0x45C3, r24	; 0x8045c3 <_ZL11g_sleepType>
    3494:	10 92 fe 45 	sts	0x45FE, r1	; 0x8045fe <_ZL13g_go_to_sleep>
    3498:	8c e3       	ldi	r24, 0x3C	; 60
    349a:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    349e:	80 91 30 46 	lds	r24, 0x4630	; 0x804630 <_ZZ17handleLinkBusMsgsvE2ec>
    34a2:	88 23       	and	r24, r24
    34a4:	79 f4       	brne	.+30     	; 0x34c4 <_Z17handleLinkBusMsgsv+0x438>
    34a6:	8e e0       	ldi	r24, 0x0E	; 14
    34a8:	96 e4       	ldi	r25, 0x46	; 70
    34aa:	0e 94 1c 30 	call	0x6038	; 0x6038 <_ZN13EepromManager13saveAllEEPROMEv>
    34ae:	0a c0       	rjmp	.+20     	; 0x34c4 <_Z17handleLinkBusMsgsv+0x438>
    34b0:	8b 89       	ldd	r24, Y+19	; 0x13
    34b2:	80 33       	cpi	r24, 0x30	; 48
    34b4:	09 f0       	breq	.+2      	; 0x34b8 <_Z17handleLinkBusMsgsv+0x42c>
    34b6:	70 c4       	rjmp	.+2272   	; 0x3d98 <_Z17handleLinkBusMsgsv+0xd0c>
    34b8:	10 92 2f 46 	sts	0x462F, r1	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    34bc:	8c ee       	ldi	r24, 0xEC	; 236
    34be:	80 93 b6 45 	sts	0x45B6, r24	; 0x8045b6 <_ZL18g_last_status_code>
    34c2:	6a c4       	rjmp	.+2260   	; 0x3d98 <_Z17handleLinkBusMsgsv+0xd0c>
    34c4:	00 00       	nop
    34c6:	68 c4       	rjmp	.+2256   	; 0x3d98 <_Z17handleLinkBusMsgsv+0xd0c>
    34c8:	1a 82       	std	Y+2, r1	; 0x02
    34ca:	1b 82       	std	Y+3, r1	; 0x03
    34cc:	1c 82       	std	Y+4, r1	; 0x04
    34ce:	1d 82       	std	Y+5, r1	; 0x05
    34d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    34d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    34d4:	fc 01       	movw	r30, r24
    34d6:	83 81       	ldd	r24, Z+3	; 0x03
    34d8:	83 35       	cpi	r24, 0x53	; 83
    34da:	c1 f5       	brne	.+112    	; 0x354c <_Z17handleLinkBusMsgsv+0x4c0>
    34dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    34de:	9d 85       	ldd	r25, Y+13	; 0x0d
    34e0:	fc 01       	movw	r30, r24
    34e2:	80 8d       	ldd	r24, Z+24	; 0x18
    34e4:	88 23       	and	r24, r24
    34e6:	59 f0       	breq	.+22     	; 0x34fe <_Z17handleLinkBusMsgsv+0x472>
    34e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    34ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    34ec:	48 96       	adiw	r24, 0x18	; 24
    34ee:	0e 94 30 4a 	call	0x9460	; 0x9460 <atol>
    34f2:	dc 01       	movw	r26, r24
    34f4:	cb 01       	movw	r24, r22
    34f6:	8a 83       	std	Y+2, r24	; 0x02
    34f8:	9b 83       	std	Y+3, r25	; 0x03
    34fa:	ac 83       	std	Y+4, r26	; 0x04
    34fc:	bd 83       	std	Y+5, r27	; 0x05
    34fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3500:	9b 81       	ldd	r25, Y+3	; 0x03
    3502:	ac 81       	ldd	r26, Y+4	; 0x04
    3504:	bd 81       	ldd	r27, Y+5	; 0x05
    3506:	89 2b       	or	r24, r25
    3508:	8a 2b       	or	r24, r26
    350a:	8b 2b       	or	r24, r27
    350c:	09 f4       	brne	.+2      	; 0x3510 <_Z17handleLinkBusMsgsv+0x484>
    350e:	46 c4       	rjmp	.+2188   	; 0x3d9c <_Z17handleLinkBusMsgsv+0xd10>
    3510:	8a 81       	ldd	r24, Y+2	; 0x02
    3512:	9b 81       	ldd	r25, Y+3	; 0x03
    3514:	ac 81       	ldd	r26, Y+4	; 0x04
    3516:	bd 81       	ldd	r27, Y+5	; 0x05
    3518:	80 93 f2 45 	sts	0x45F2, r24	; 0x8045f2 <g_event_start_time>
    351c:	90 93 f3 45 	sts	0x45F3, r25	; 0x8045f3 <g_event_start_time+0x1>
    3520:	a0 93 f4 45 	sts	0x45F4, r26	; 0x8045f4 <g_event_start_time+0x2>
    3524:	b0 93 f5 45 	sts	0x45F5, r27	; 0x8045f5 <g_event_start_time+0x3>
    3528:	f8 94       	cli
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <ds3231_get_epoch>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	bc 01       	movw	r22, r24
    3538:	cd 01       	movw	r24, r26
    353a:	0e 94 24 02 	call	0x448	; 0x448 <set_system_time>
    353e:	78 94       	sei
    3540:	80 91 2f 46 	lds	r24, 0x462F	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3544:	8f 5f       	subi	r24, 0xFF	; 255
    3546:	80 93 2f 46 	sts	0x462F, r24	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    354a:	28 c4       	rjmp	.+2128   	; 0x3d9c <_Z17handleLinkBusMsgsv+0xd10>
    354c:	8c 85       	ldd	r24, Y+12	; 0x0c
    354e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3550:	fc 01       	movw	r30, r24
    3552:	83 81       	ldd	r24, Z+3	; 0x03
    3554:	86 34       	cpi	r24, 0x46	; 70
    3556:	09 f0       	breq	.+2      	; 0x355a <_Z17handleLinkBusMsgsv+0x4ce>
    3558:	21 c4       	rjmp	.+2114   	; 0x3d9c <_Z17handleLinkBusMsgsv+0xd10>
    355a:	8c 85       	ldd	r24, Y+12	; 0x0c
    355c:	9d 85       	ldd	r25, Y+13	; 0x0d
    355e:	fc 01       	movw	r30, r24
    3560:	80 8d       	ldd	r24, Z+24	; 0x18
    3562:	88 23       	and	r24, r24
    3564:	59 f0       	breq	.+22     	; 0x357c <_Z17handleLinkBusMsgsv+0x4f0>
    3566:	8c 85       	ldd	r24, Y+12	; 0x0c
    3568:	9d 85       	ldd	r25, Y+13	; 0x0d
    356a:	48 96       	adiw	r24, 0x18	; 24
    356c:	0e 94 30 4a 	call	0x9460	; 0x9460 <atol>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	8a 83       	std	Y+2, r24	; 0x02
    3576:	9b 83       	std	Y+3, r25	; 0x03
    3578:	ac 83       	std	Y+4, r26	; 0x04
    357a:	bd 83       	std	Y+5, r27	; 0x05
    357c:	8a 81       	ldd	r24, Y+2	; 0x02
    357e:	9b 81       	ldd	r25, Y+3	; 0x03
    3580:	ac 81       	ldd	r26, Y+4	; 0x04
    3582:	bd 81       	ldd	r27, Y+5	; 0x05
    3584:	89 2b       	or	r24, r25
    3586:	8a 2b       	or	r24, r26
    3588:	8b 2b       	or	r24, r27
    358a:	09 f4       	brne	.+2      	; 0x358e <_Z17handleLinkBusMsgsv+0x502>
    358c:	07 c4       	rjmp	.+2062   	; 0x3d9c <_Z17handleLinkBusMsgsv+0xd10>
    358e:	8a 81       	ldd	r24, Y+2	; 0x02
    3590:	9b 81       	ldd	r25, Y+3	; 0x03
    3592:	ac 81       	ldd	r26, Y+4	; 0x04
    3594:	bd 81       	ldd	r27, Y+5	; 0x05
    3596:	80 93 f6 45 	sts	0x45F6, r24	; 0x8045f6 <g_event_finish_time>
    359a:	90 93 f7 45 	sts	0x45F7, r25	; 0x8045f7 <g_event_finish_time+0x1>
    359e:	a0 93 f8 45 	sts	0x45F8, r26	; 0x8045f8 <g_event_finish_time+0x2>
    35a2:	b0 93 f9 45 	sts	0x45F9, r27	; 0x8045f9 <g_event_finish_time+0x3>
    35a6:	80 91 2f 46 	lds	r24, 0x462F	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    35aa:	8f 5f       	subi	r24, 0xFF	; 255
    35ac:	80 93 2f 46 	sts	0x462F, r24	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    35b0:	f5 c3       	rjmp	.+2026   	; 0x3d9c <_Z17handleLinkBusMsgsv+0xd10>
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL13g_wifi_active>
    35b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    35ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    35bc:	fc 01       	movw	r30, r24
    35be:	80 81       	ld	r24, Z
    35c0:	81 30       	cpi	r24, 0x01	; 1
    35c2:	09 f0       	breq	.+2      	; 0x35c6 <_Z17handleLinkBusMsgsv+0x53a>
    35c4:	4b c0       	rjmp	.+150    	; 0x365c <_Z17handleLinkBusMsgsv+0x5d0>
    35c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    35c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    35ca:	fc 01       	movw	r30, r24
    35cc:	83 81       	ldd	r24, Z+3	; 0x03
    35ce:	88 23       	and	r24, r24
    35d0:	d1 f0       	breq	.+52     	; 0x3606 <_Z17handleLinkBusMsgsv+0x57a>
    35d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    35d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    35d6:	03 96       	adiw	r24, 0x03	; 3
    35d8:	44 e1       	ldi	r20, 0x14	; 20
    35da:	50 e0       	ldi	r21, 0x00	; 0
    35dc:	bc 01       	movw	r22, r24
    35de:	83 e8       	ldi	r24, 0x83	; 131
    35e0:	95 e4       	ldi	r25, 0x45	; 69
    35e2:	0e 94 7a 4a 	call	0x94f4	; 0x94f4 <strncpy>
    35e6:	60 e0       	ldi	r22, 0x00	; 0
    35e8:	83 e8       	ldi	r24, 0x83	; 131
    35ea:	95 e4       	ldi	r25, 0x45	; 69
    35ec:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <ds3231_set_date_time>
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <ds3231_get_epoch>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	bc 01       	movw	r22, r24
    35fe:	cd 01       	movw	r24, r26
    3600:	0e 94 24 02 	call	0x448	; 0x448 <set_system_time>
    3604:	cd c3       	rjmp	.+1946   	; 0x3da0 <_Z17handleLinkBusMsgsv+0xd14>
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	2b 2f       	mov	r18, r27
    3614:	2f 93       	push	r18
    3616:	2a 2f       	mov	r18, r26
    3618:	2f 93       	push	r18
    361a:	29 2f       	mov	r18, r25
    361c:	2f 93       	push	r18
    361e:	8f 93       	push	r24
    3620:	8e ec       	ldi	r24, 0xCE	; 206
    3622:	92 e4       	ldi	r25, 0x42	; 66
    3624:	89 2f       	mov	r24, r25
    3626:	8f 93       	push	r24
    3628:	8e ec       	ldi	r24, 0xCE	; 206
    362a:	92 e4       	ldi	r25, 0x42	; 66
    362c:	8f 93       	push	r24
    362e:	83 e8       	ldi	r24, 0x83	; 131
    3630:	95 e4       	ldi	r25, 0x45	; 69
    3632:	89 2f       	mov	r24, r25
    3634:	8f 93       	push	r24
    3636:	83 e8       	ldi	r24, 0x83	; 131
    3638:	95 e4       	ldi	r25, 0x45	; 69
    363a:	8f 93       	push	r24
    363c:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    3640:	2d b7       	in	r18, 0x3d	; 61
    3642:	3e b7       	in	r19, 0x3e	; 62
    3644:	28 5f       	subi	r18, 0xF8	; 248
    3646:	3f 4f       	sbci	r19, 0xFF	; 255
    3648:	cd bf       	out	0x3d, r28	; 61
    364a:	de bf       	out	0x3e, r29	; 62
    364c:	43 e8       	ldi	r20, 0x83	; 131
    364e:	55 e4       	ldi	r21, 0x45	; 69
    3650:	62 ed       	ldi	r22, 0xD2	; 210
    3652:	72 e4       	ldi	r23, 0x42	; 66
    3654:	83 e0       	ldi	r24, 0x03	; 3
    3656:	0e 94 e5 36 	call	0x6dca	; 0x6dca <_Z11lb_send_msg13LBMessageTypePKcPc>
    365a:	a2 c3       	rjmp	.+1860   	; 0x3da0 <_Z17handleLinkBusMsgsv+0xd14>
    365c:	8c 85       	ldd	r24, Y+12	; 0x0c
    365e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3660:	fc 01       	movw	r30, r24
    3662:	80 81       	ld	r24, Z
    3664:	82 30       	cpi	r24, 0x02	; 2
    3666:	09 f0       	breq	.+2      	; 0x366a <_Z17handleLinkBusMsgsv+0x5de>
    3668:	9b c3       	rjmp	.+1846   	; 0x3da0 <_Z17handleLinkBusMsgsv+0xd14>
    366a:	8c 85       	ldd	r24, Y+12	; 0x0c
    366c:	9d 85       	ldd	r25, Y+13	; 0x0d
    366e:	fc 01       	movw	r30, r24
    3670:	83 81       	ldd	r24, Z+3	; 0x03
    3672:	88 35       	cpi	r24, 0x58	; 88
    3674:	c9 f5       	brne	.+114    	; 0x36e8 <_Z17handleLinkBusMsgsv+0x65c>
    3676:	1c 8a       	std	Y+20, r1	; 0x14
    3678:	8c 85       	ldd	r24, Y+12	; 0x0c
    367a:	9d 85       	ldd	r25, Y+13	; 0x0d
    367c:	fc 01       	movw	r30, r24
    367e:	80 8d       	ldd	r24, Z+24	; 0x18
    3680:	88 23       	and	r24, r24
    3682:	51 f0       	breq	.+20     	; 0x3698 <_Z17handleLinkBusMsgsv+0x60c>
    3684:	8c 85       	ldd	r24, Y+12	; 0x0c
    3686:	9d 85       	ldd	r25, Y+13	; 0x0d
    3688:	48 96       	adiw	r24, 0x18	; 24
    368a:	0e 94 12 4a 	call	0x9424	; 0x9424 <atoi>
    368e:	8c 8b       	std	Y+20, r24	; 0x14
    3690:	8c 89       	ldd	r24, Y+20	; 0x14
    3692:	0e 94 e4 2d 	call	0x5bc8	; 0x5bc8 <ds3231_set_aging>
    3696:	84 c3       	rjmp	.+1800   	; 0x3da0 <_Z17handleLinkBusMsgsv+0xd14>
    3698:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <ds3231_get_aging>
    369c:	8c 8b       	std	Y+20, r24	; 0x14
    369e:	8c 89       	ldd	r24, Y+20	; 0x14
    36a0:	08 2e       	mov	r0, r24
    36a2:	00 0c       	add	r0, r0
    36a4:	99 0b       	sbc	r25, r25
    36a6:	29 2f       	mov	r18, r25
    36a8:	2f 93       	push	r18
    36aa:	8f 93       	push	r24
    36ac:	8f ed       	ldi	r24, 0xDF	; 223
    36ae:	92 e4       	ldi	r25, 0x42	; 66
    36b0:	89 2f       	mov	r24, r25
    36b2:	8f 93       	push	r24
    36b4:	8f ed       	ldi	r24, 0xDF	; 223
    36b6:	92 e4       	ldi	r25, 0x42	; 66
    36b8:	8f 93       	push	r24
    36ba:	83 e8       	ldi	r24, 0x83	; 131
    36bc:	95 e4       	ldi	r25, 0x45	; 69
    36be:	89 2f       	mov	r24, r25
    36c0:	8f 93       	push	r24
    36c2:	83 e8       	ldi	r24, 0x83	; 131
    36c4:	95 e4       	ldi	r25, 0x45	; 69
    36c6:	8f 93       	push	r24
    36c8:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    36cc:	0f 90       	pop	r0
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	43 e8       	ldi	r20, 0x83	; 131
    36da:	55 e4       	ldi	r21, 0x45	; 69
    36dc:	62 ed       	ldi	r22, 0xD2	; 210
    36de:	72 e4       	ldi	r23, 0x42	; 66
    36e0:	83 e0       	ldi	r24, 0x03	; 3
    36e2:	0e 94 e5 36 	call	0x6dca	; 0x6dca <_Z11lb_send_msg13LBMessageTypePKcPc>
    36e6:	5c c3       	rjmp	.+1720   	; 0x3da0 <_Z17handleLinkBusMsgsv+0xd14>
    36e8:	80 e0       	ldi	r24, 0x00	; 0
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <ds3231_get_epoch>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	8d 8b       	std	Y+21, r24	; 0x15
    36f6:	9e 8b       	std	Y+22, r25	; 0x16
    36f8:	af 8b       	std	Y+23, r26	; 0x17
    36fa:	b8 8f       	std	Y+24, r27	; 0x18
    36fc:	8d 89       	ldd	r24, Y+21	; 0x15
    36fe:	9e 89       	ldd	r25, Y+22	; 0x16
    3700:	af 89       	ldd	r26, Y+23	; 0x17
    3702:	b8 8d       	ldd	r27, Y+24	; 0x18
    3704:	bc 01       	movw	r22, r24
    3706:	cd 01       	movw	r24, r26
    3708:	0e 94 24 02 	call	0x448	; 0x448 <set_system_time>
    370c:	80 91 31 46 	lds	r24, 0x4631	; 0x804631 <_ZZ17handleLinkBusMsgsvE8lastTime>
    3710:	90 91 32 46 	lds	r25, 0x4632	; 0x804632 <_ZZ17handleLinkBusMsgsvE8lastTime+0x1>
    3714:	a0 91 33 46 	lds	r26, 0x4633	; 0x804633 <_ZZ17handleLinkBusMsgsvE8lastTime+0x2>
    3718:	b0 91 34 46 	lds	r27, 0x4634	; 0x804634 <_ZZ17handleLinkBusMsgsvE8lastTime+0x3>
    371c:	2d 89       	ldd	r18, Y+21	; 0x15
    371e:	3e 89       	ldd	r19, Y+22	; 0x16
    3720:	4f 89       	ldd	r20, Y+23	; 0x17
    3722:	58 8d       	ldd	r21, Y+24	; 0x18
    3724:	28 17       	cp	r18, r24
    3726:	39 07       	cpc	r19, r25
    3728:	4a 07       	cpc	r20, r26
    372a:	5b 07       	cpc	r21, r27
    372c:	09 f4       	brne	.+2      	; 0x3730 <_Z17handleLinkBusMsgsv+0x6a4>
    372e:	38 c3       	rjmp	.+1648   	; 0x3da0 <_Z17handleLinkBusMsgsv+0xd14>
    3730:	88 8d       	ldd	r24, Y+24	; 0x18
    3732:	8f 93       	push	r24
    3734:	8f 89       	ldd	r24, Y+23	; 0x17
    3736:	8f 93       	push	r24
    3738:	8e 89       	ldd	r24, Y+22	; 0x16
    373a:	8f 93       	push	r24
    373c:	8d 89       	ldd	r24, Y+21	; 0x15
    373e:	8f 93       	push	r24
    3740:	8e ec       	ldi	r24, 0xCE	; 206
    3742:	92 e4       	ldi	r25, 0x42	; 66
    3744:	89 2f       	mov	r24, r25
    3746:	8f 93       	push	r24
    3748:	8e ec       	ldi	r24, 0xCE	; 206
    374a:	92 e4       	ldi	r25, 0x42	; 66
    374c:	8f 93       	push	r24
    374e:	83 e8       	ldi	r24, 0x83	; 131
    3750:	95 e4       	ldi	r25, 0x45	; 69
    3752:	89 2f       	mov	r24, r25
    3754:	8f 93       	push	r24
    3756:	83 e8       	ldi	r24, 0x83	; 131
    3758:	95 e4       	ldi	r25, 0x45	; 69
    375a:	8f 93       	push	r24
    375c:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    3760:	2d b7       	in	r18, 0x3d	; 61
    3762:	3e b7       	in	r19, 0x3e	; 62
    3764:	28 5f       	subi	r18, 0xF8	; 248
    3766:	3f 4f       	sbci	r19, 0xFF	; 255
    3768:	cd bf       	out	0x3d, r28	; 61
    376a:	de bf       	out	0x3e, r29	; 62
    376c:	43 e8       	ldi	r20, 0x83	; 131
    376e:	55 e4       	ldi	r21, 0x45	; 69
    3770:	62 ed       	ldi	r22, 0xD2	; 210
    3772:	72 e4       	ldi	r23, 0x42	; 66
    3774:	83 e0       	ldi	r24, 0x03	; 3
    3776:	0e 94 e5 36 	call	0x6dca	; 0x6dca <_Z11lb_send_msg13LBMessageTypePKcPc>
    377a:	8d 89       	ldd	r24, Y+21	; 0x15
    377c:	9e 89       	ldd	r25, Y+22	; 0x16
    377e:	af 89       	ldd	r26, Y+23	; 0x17
    3780:	b8 8d       	ldd	r27, Y+24	; 0x18
    3782:	80 93 31 46 	sts	0x4631, r24	; 0x804631 <_ZZ17handleLinkBusMsgsvE8lastTime>
    3786:	90 93 32 46 	sts	0x4632, r25	; 0x804632 <_ZZ17handleLinkBusMsgsvE8lastTime+0x1>
    378a:	a0 93 33 46 	sts	0x4633, r26	; 0x804633 <_ZZ17handleLinkBusMsgsvE8lastTime+0x2>
    378e:	b0 93 34 46 	sts	0x4634, r27	; 0x804634 <_ZZ17handleLinkBusMsgsvE8lastTime+0x3>
    3792:	06 c3       	rjmp	.+1548   	; 0x3da0 <_Z17handleLinkBusMsgsv+0xd14>
    3794:	80 91 2f 46 	lds	r24, 0x462F	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3798:	8f 5f       	subi	r24, 0xFF	; 255
    379a:	80 93 2f 46 	sts	0x462F, r24	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    379e:	8c 85       	ldd	r24, Y+12	; 0x0c
    37a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    37a2:	fc 01       	movw	r30, r24
    37a4:	83 81       	ldd	r24, Z+3	; 0x03
    37a6:	88 23       	and	r24, r24
    37a8:	81 f1       	breq	.+96     	; 0x380a <_Z17handleLinkBusMsgsv+0x77e>
    37aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    37ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    37ae:	03 96       	adiw	r24, 0x03	; 3
    37b0:	44 e1       	ldi	r20, 0x14	; 20
    37b2:	50 e0       	ldi	r21, 0x00	; 0
    37b4:	bc 01       	movw	r22, r24
    37b6:	89 ed       	ldi	r24, 0xD9	; 217
    37b8:	95 e4       	ldi	r25, 0x45	; 69
    37ba:	0e 94 7a 4a 	call	0x94f4	; 0x94f4 <strncpy>
    37be:	80 91 d9 45 	lds	r24, 0x45D9	; 0x8045d9 <g_messages_text+0x15>
    37c2:	88 23       	and	r24, r24
    37c4:	09 f4       	brne	.+2      	; 0x37c8 <_Z17handleLinkBusMsgsv+0x73c>
    37c6:	ee c2       	rjmp	.+1500   	; 0x3da4 <_Z17handleLinkBusMsgsv+0xd18>
    37c8:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    37cc:	88 2f       	mov	r24, r24
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	bc 01       	movw	r22, r24
    37d2:	89 ed       	ldi	r24, 0xD9	; 217
    37d4:	95 e4       	ldi	r25, 0x45	; 69
    37d6:	0e 94 46 39 	call	0x728c	; 0x728c <_Z26timeRequiredToSendStrAtWPMPcj>
    37da:	8c 50       	subi	r24, 0x0C	; 12
    37dc:	9e 4f       	sbci	r25, 0xFE	; 254
    37de:	96 95       	lsr	r25
    37e0:	87 95       	ror	r24
    37e2:	96 95       	lsr	r25
    37e4:	87 95       	ror	r24
    37e6:	96 95       	lsr	r25
    37e8:	87 95       	ror	r24
    37ea:	9c 01       	movw	r18, r24
    37ec:	a5 ec       	ldi	r26, 0xC5	; 197
    37ee:	b0 e2       	ldi	r27, 0x20	; 32
    37f0:	0e 94 c8 48 	call	0x9190	; 0x9190 <__umulhisi3>
    37f4:	92 95       	swap	r25
    37f6:	82 95       	swap	r24
    37f8:	8f 70       	andi	r24, 0x0F	; 15
    37fa:	89 27       	eor	r24, r25
    37fc:	9f 70       	andi	r25, 0x0F	; 15
    37fe:	89 27       	eor	r24, r25
    3800:	80 93 ee 45 	sts	0x45EE, r24	; 0x8045ee <g_time_needed_for_ID>
    3804:	90 93 ef 45 	sts	0x45EF, r25	; 0x8045ef <g_time_needed_for_ID+0x1>
    3808:	cd c2       	rjmp	.+1434   	; 0x3da4 <_Z17handleLinkBusMsgsv+0xd18>
    380a:	80 91 d9 45 	lds	r24, 0x45D9	; 0x8045d9 <g_messages_text+0x15>
    380e:	88 23       	and	r24, r24
    3810:	09 f4       	brne	.+2      	; 0x3814 <_Z17handleLinkBusMsgsv+0x788>
    3812:	c8 c2       	rjmp	.+1424   	; 0x3da4 <_Z17handleLinkBusMsgsv+0xd18>
    3814:	89 ed       	ldi	r24, 0xD9	; 217
    3816:	95 e4       	ldi	r25, 0x45	; 69
    3818:	89 2f       	mov	r24, r25
    381a:	8f 93       	push	r24
    381c:	89 ed       	ldi	r24, 0xD9	; 217
    381e:	95 e4       	ldi	r25, 0x45	; 69
    3820:	8f 93       	push	r24
    3822:	84 ee       	ldi	r24, 0xE4	; 228
    3824:	92 e4       	ldi	r25, 0x42	; 66
    3826:	89 2f       	mov	r24, r25
    3828:	8f 93       	push	r24
    382a:	84 ee       	ldi	r24, 0xE4	; 228
    382c:	92 e4       	ldi	r25, 0x42	; 66
    382e:	8f 93       	push	r24
    3830:	83 e8       	ldi	r24, 0x83	; 131
    3832:	95 e4       	ldi	r25, 0x45	; 69
    3834:	89 2f       	mov	r24, r25
    3836:	8f 93       	push	r24
    3838:	83 e8       	ldi	r24, 0x83	; 131
    383a:	95 e4       	ldi	r25, 0x45	; 69
    383c:	8f 93       	push	r24
    383e:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    3842:	0f 90       	pop	r0
    3844:	0f 90       	pop	r0
    3846:	0f 90       	pop	r0
    3848:	0f 90       	pop	r0
    384a:	0f 90       	pop	r0
    384c:	0f 90       	pop	r0
    384e:	83 e8       	ldi	r24, 0x83	; 131
    3850:	95 e4       	ldi	r25, 0x45	; 69
    3852:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <_Z12lb_send_textPc>
    3856:	19 82       	std	Y+1, r1	; 0x01
    3858:	a5 c2       	rjmp	.+1354   	; 0x3da4 <_Z17handleLinkBusMsgsv+0xd18>
    385a:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    385e:	89 8f       	std	Y+25, r24	; 0x19
    3860:	8c 85       	ldd	r24, Y+12	; 0x0c
    3862:	9d 85       	ldd	r25, Y+13	; 0x0d
    3864:	fc 01       	movw	r30, r24
    3866:	83 81       	ldd	r24, Z+3	; 0x03
    3868:	89 34       	cpi	r24, 0x49	; 73
    386a:	09 f0       	breq	.+2      	; 0x386e <_Z17handleLinkBusMsgsv+0x7e2>
    386c:	4f c0       	rjmp	.+158    	; 0x390c <_Z17handleLinkBusMsgsv+0x880>
    386e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3870:	9d 85       	ldd	r25, Y+13	; 0x0d
    3872:	fc 01       	movw	r30, r24
    3874:	80 8d       	ldd	r24, Z+24	; 0x18
    3876:	88 23       	and	r24, r24
    3878:	09 f4       	brne	.+2      	; 0x387c <_Z17handleLinkBusMsgsv+0x7f0>
    387a:	96 c2       	rjmp	.+1324   	; 0x3da8 <_Z17handleLinkBusMsgsv+0xd1c>
    387c:	8c 85       	ldd	r24, Y+12	; 0x0c
    387e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3880:	48 96       	adiw	r24, 0x18	; 24
    3882:	0e 94 30 4a 	call	0x9460	; 0x9460 <atol>
    3886:	dc 01       	movw	r26, r24
    3888:	cb 01       	movw	r24, r22
    388a:	89 8f       	std	Y+25, r24	; 0x19
    388c:	89 8d       	ldd	r24, Y+25	; 0x19
    388e:	8a 8f       	std	Y+26, r24	; 0x1a
    3890:	85 e0       	ldi	r24, 0x05	; 5
    3892:	8b 8f       	std	Y+27, r24	; 0x1b
    3894:	84 e1       	ldi	r24, 0x14	; 20
    3896:	8c 8f       	std	Y+28, r24	; 0x1c
    3898:	9a 8d       	ldd	r25, Y+26	; 0x1a
    389a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    389c:	89 17       	cp	r24, r25
    389e:	40 f0       	brcs	.+16     	; 0x38b0 <_Z17handleLinkBusMsgsv+0x824>
    38a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    38a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38a4:	98 17       	cp	r25, r24
    38a6:	10 f4       	brcc	.+4      	; 0x38ac <_Z17handleLinkBusMsgsv+0x820>
    38a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38aa:	03 c0       	rjmp	.+6      	; 0x38b2 <_Z17handleLinkBusMsgsv+0x826>
    38ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38ae:	01 c0       	rjmp	.+2      	; 0x38b2 <_Z17handleLinkBusMsgsv+0x826>
    38b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38b2:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
    38b6:	80 91 2f 46 	lds	r24, 0x462F	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    38ba:	8f 5f       	subi	r24, 0xFF	; 255
    38bc:	80 93 2f 46 	sts	0x462F, r24	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    38c0:	80 91 d9 45 	lds	r24, 0x45D9	; 0x8045d9 <g_messages_text+0x15>
    38c4:	88 23       	and	r24, r24
    38c6:	09 f4       	brne	.+2      	; 0x38ca <_Z17handleLinkBusMsgsv+0x83e>
    38c8:	6f c2       	rjmp	.+1246   	; 0x3da8 <_Z17handleLinkBusMsgsv+0xd1c>
    38ca:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    38ce:	88 2f       	mov	r24, r24
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	bc 01       	movw	r22, r24
    38d4:	89 ed       	ldi	r24, 0xD9	; 217
    38d6:	95 e4       	ldi	r25, 0x45	; 69
    38d8:	0e 94 46 39 	call	0x728c	; 0x728c <_Z26timeRequiredToSendStrAtWPMPcj>
    38dc:	8c 50       	subi	r24, 0x0C	; 12
    38de:	9e 4f       	sbci	r25, 0xFE	; 254
    38e0:	96 95       	lsr	r25
    38e2:	87 95       	ror	r24
    38e4:	96 95       	lsr	r25
    38e6:	87 95       	ror	r24
    38e8:	96 95       	lsr	r25
    38ea:	87 95       	ror	r24
    38ec:	9c 01       	movw	r18, r24
    38ee:	a5 ec       	ldi	r26, 0xC5	; 197
    38f0:	b0 e2       	ldi	r27, 0x20	; 32
    38f2:	0e 94 c8 48 	call	0x9190	; 0x9190 <__umulhisi3>
    38f6:	92 95       	swap	r25
    38f8:	82 95       	swap	r24
    38fa:	8f 70       	andi	r24, 0x0F	; 15
    38fc:	89 27       	eor	r24, r25
    38fe:	9f 70       	andi	r25, 0x0F	; 15
    3900:	89 27       	eor	r24, r25
    3902:	80 93 ee 45 	sts	0x45EE, r24	; 0x8045ee <g_time_needed_for_ID>
    3906:	90 93 ef 45 	sts	0x45EF, r25	; 0x8045ef <g_time_needed_for_ID+0x1>
    390a:	4e c2       	rjmp	.+1180   	; 0x3da8 <_Z17handleLinkBusMsgsv+0xd1c>
    390c:	8c 85       	ldd	r24, Y+12	; 0x0c
    390e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3910:	fc 01       	movw	r30, r24
    3912:	83 81       	ldd	r24, Z+3	; 0x03
    3914:	80 35       	cpi	r24, 0x50	; 80
    3916:	09 f0       	breq	.+2      	; 0x391a <_Z17handleLinkBusMsgsv+0x88e>
    3918:	47 c2       	rjmp	.+1166   	; 0x3da8 <_Z17handleLinkBusMsgsv+0xd1c>
    391a:	8c 85       	ldd	r24, Y+12	; 0x0c
    391c:	9d 85       	ldd	r25, Y+13	; 0x0d
    391e:	fc 01       	movw	r30, r24
    3920:	80 8d       	ldd	r24, Z+24	; 0x18
    3922:	88 23       	and	r24, r24
    3924:	09 f4       	brne	.+2      	; 0x3928 <_Z17handleLinkBusMsgsv+0x89c>
    3926:	40 c2       	rjmp	.+1152   	; 0x3da8 <_Z17handleLinkBusMsgsv+0xd1c>
    3928:	8c 85       	ldd	r24, Y+12	; 0x0c
    392a:	9d 85       	ldd	r25, Y+13	; 0x0d
    392c:	48 96       	adiw	r24, 0x18	; 24
    392e:	0e 94 30 4a 	call	0x9460	; 0x9460 <atol>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	89 8f       	std	Y+25, r24	; 0x19
    3938:	89 8d       	ldd	r24, Y+25	; 0x19
    393a:	8d 8f       	std	Y+29, r24	; 0x1d
    393c:	85 e0       	ldi	r24, 0x05	; 5
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	8e 8f       	std	Y+30, r24	; 0x1e
    3942:	9f 8f       	std	Y+31, r25	; 0x1f
    3944:	84 e1       	ldi	r24, 0x14	; 20
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	88 a3       	std	Y+32, r24	; 0x20
    394a:	99 a3       	std	Y+33, r25	; 0x21
    394c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    394e:	28 2f       	mov	r18, r24
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	88 a1       	ldd	r24, Y+32	; 0x20
    3954:	99 a1       	ldd	r25, Y+33	; 0x21
    3956:	82 17       	cp	r24, r18
    3958:	93 07       	cpc	r25, r19
    395a:	54 f0       	brlt	.+20     	; 0x3970 <_Z17handleLinkBusMsgsv+0x8e4>
    395c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    395e:	88 2f       	mov	r24, r24
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	2e 8d       	ldd	r18, Y+30	; 0x1e
    3964:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3966:	82 17       	cp	r24, r18
    3968:	93 07       	cpc	r25, r19
    396a:	24 f4       	brge	.+8      	; 0x3974 <_Z17handleLinkBusMsgsv+0x8e8>
    396c:	c9 01       	movw	r24, r18
    396e:	02 c0       	rjmp	.+4      	; 0x3974 <_Z17handleLinkBusMsgsv+0x8e8>
    3970:	88 a1       	ldd	r24, Y+32	; 0x20
    3972:	99 a1       	ldd	r25, Y+33	; 0x21
    3974:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
    3978:	80 91 2f 46 	lds	r24, 0x462F	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    397c:	8f 5f       	subi	r24, 0xFF	; 255
    397e:	80 93 2f 46 	sts	0x462F, r24	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3982:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    3986:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_Z13throttleValueh>
    398a:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    398e:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    3992:	0a c2       	rjmp	.+1044   	; 0x3da8 <_Z17handleLinkBusMsgsv+0xd1c>
    3994:	1a a2       	std	Y+34, r1	; 0x22
    3996:	1b a2       	std	Y+35, r1	; 0x23
    3998:	8c 85       	ldd	r24, Y+12	; 0x0c
    399a:	9d 85       	ldd	r25, Y+13	; 0x0d
    399c:	fc 01       	movw	r30, r24
    399e:	83 81       	ldd	r24, Z+3	; 0x03
    39a0:	80 33       	cpi	r24, 0x30	; 48
    39a2:	e1 f4       	brne	.+56     	; 0x39dc <_Z17handleLinkBusMsgsv+0x950>
    39a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    39a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    39a8:	fc 01       	movw	r30, r24
    39aa:	80 8d       	ldd	r24, Z+24	; 0x18
    39ac:	88 23       	and	r24, r24
    39ae:	09 f4       	brne	.+2      	; 0x39b2 <_Z17handleLinkBusMsgsv+0x926>
    39b0:	fd c1       	rjmp	.+1018   	; 0x3dac <_Z17handleLinkBusMsgsv+0xd20>
    39b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    39b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    39b6:	48 96       	adiw	r24, 0x18	; 24
    39b8:	0e 94 30 4a 	call	0x9460	; 0x9460 <atol>
    39bc:	dc 01       	movw	r26, r24
    39be:	cb 01       	movw	r24, r22
    39c0:	8a a3       	std	Y+34, r24	; 0x22
    39c2:	9b a3       	std	Y+35, r25	; 0x23
    39c4:	8a a1       	ldd	r24, Y+34	; 0x22
    39c6:	9b a1       	ldd	r25, Y+35	; 0x23
    39c8:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    39cc:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
    39d0:	80 91 2f 46 	lds	r24, 0x462F	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    39d4:	8f 5f       	subi	r24, 0xFF	; 255
    39d6:	80 93 2f 46 	sts	0x462F, r24	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    39da:	e8 c1       	rjmp	.+976    	; 0x3dac <_Z17handleLinkBusMsgsv+0xd20>
    39dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    39de:	9d 85       	ldd	r25, Y+13	; 0x0d
    39e0:	fc 01       	movw	r30, r24
    39e2:	83 81       	ldd	r24, Z+3	; 0x03
    39e4:	81 33       	cpi	r24, 0x31	; 49
    39e6:	e1 f4       	brne	.+56     	; 0x3a20 <_Z17handleLinkBusMsgsv+0x994>
    39e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    39ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    39ec:	fc 01       	movw	r30, r24
    39ee:	80 8d       	ldd	r24, Z+24	; 0x18
    39f0:	88 23       	and	r24, r24
    39f2:	09 f4       	brne	.+2      	; 0x39f6 <_Z17handleLinkBusMsgsv+0x96a>
    39f4:	db c1       	rjmp	.+950    	; 0x3dac <_Z17handleLinkBusMsgsv+0xd20>
    39f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    39f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    39fa:	48 96       	adiw	r24, 0x18	; 24
    39fc:	0e 94 30 4a 	call	0x9460	; 0x9460 <atol>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	8a a3       	std	Y+34, r24	; 0x22
    3a06:	9b a3       	std	Y+35, r25	; 0x23
    3a08:	8a a1       	ldd	r24, Y+34	; 0x22
    3a0a:	9b a1       	ldd	r25, Y+35	; 0x23
    3a0c:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    3a10:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    3a14:	80 91 2f 46 	lds	r24, 0x462F	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3a18:	8f 5f       	subi	r24, 0xFF	; 255
    3a1a:	80 93 2f 46 	sts	0x462F, r24	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3a1e:	c6 c1       	rjmp	.+908    	; 0x3dac <_Z17handleLinkBusMsgsv+0xd20>
    3a20:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a22:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a24:	fc 01       	movw	r30, r24
    3a26:	83 81       	ldd	r24, Z+3	; 0x03
    3a28:	89 34       	cpi	r24, 0x49	; 73
    3a2a:	e1 f4       	brne	.+56     	; 0x3a64 <_Z17handleLinkBusMsgsv+0x9d8>
    3a2c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a2e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a30:	fc 01       	movw	r30, r24
    3a32:	80 8d       	ldd	r24, Z+24	; 0x18
    3a34:	88 23       	and	r24, r24
    3a36:	09 f4       	brne	.+2      	; 0x3a3a <_Z17handleLinkBusMsgsv+0x9ae>
    3a38:	b9 c1       	rjmp	.+882    	; 0x3dac <_Z17handleLinkBusMsgsv+0xd20>
    3a3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a3e:	48 96       	adiw	r24, 0x18	; 24
    3a40:	0e 94 30 4a 	call	0x9460	; 0x9460 <atol>
    3a44:	dc 01       	movw	r26, r24
    3a46:	cb 01       	movw	r24, r22
    3a48:	8a a3       	std	Y+34, r24	; 0x22
    3a4a:	9b a3       	std	Y+35, r25	; 0x23
    3a4c:	8a a1       	ldd	r24, Y+34	; 0x22
    3a4e:	9b a1       	ldd	r25, Y+35	; 0x23
    3a50:	80 93 11 40 	sts	0x4011, r24	; 0x804011 <g_ID_period_seconds>
    3a54:	90 93 12 40 	sts	0x4012, r25	; 0x804012 <g_ID_period_seconds+0x1>
    3a58:	80 91 2f 46 	lds	r24, 0x462F	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3a5c:	8f 5f       	subi	r24, 0xFF	; 255
    3a5e:	80 93 2f 46 	sts	0x462F, r24	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3a62:	a4 c1       	rjmp	.+840    	; 0x3dac <_Z17handleLinkBusMsgsv+0xd20>
    3a64:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a66:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a68:	fc 01       	movw	r30, r24
    3a6a:	83 81       	ldd	r24, Z+3	; 0x03
    3a6c:	84 34       	cpi	r24, 0x44	; 68
    3a6e:	09 f0       	breq	.+2      	; 0x3a72 <_Z17handleLinkBusMsgsv+0x9e6>
    3a70:	9d c1       	rjmp	.+826    	; 0x3dac <_Z17handleLinkBusMsgsv+0xd20>
    3a72:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a74:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a76:	fc 01       	movw	r30, r24
    3a78:	80 8d       	ldd	r24, Z+24	; 0x18
    3a7a:	88 23       	and	r24, r24
    3a7c:	09 f4       	brne	.+2      	; 0x3a80 <_Z17handleLinkBusMsgsv+0x9f4>
    3a7e:	96 c1       	rjmp	.+812    	; 0x3dac <_Z17handleLinkBusMsgsv+0xd20>
    3a80:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a82:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a84:	48 96       	adiw	r24, 0x18	; 24
    3a86:	0e 94 30 4a 	call	0x9460	; 0x9460 <atol>
    3a8a:	dc 01       	movw	r26, r24
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	8a a3       	std	Y+34, r24	; 0x22
    3a90:	9b a3       	std	Y+35, r25	; 0x23
    3a92:	8a a1       	ldd	r24, Y+34	; 0x22
    3a94:	9b a1       	ldd	r25, Y+35	; 0x23
    3a96:	80 93 f0 45 	sts	0x45F0, r24	; 0x8045f0 <g_intra_cycle_delay_time>
    3a9a:	90 93 f1 45 	sts	0x45F1, r25	; 0x8045f1 <g_intra_cycle_delay_time+0x1>
    3a9e:	80 91 2f 46 	lds	r24, 0x462F	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3aa2:	8f 5f       	subi	r24, 0xFF	; 255
    3aa4:	80 93 2f 46 	sts	0x462F, r24	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3aa8:	81 c1       	rjmp	.+770    	; 0x3dac <_Z17handleLinkBusMsgsv+0xd20>
    3aaa:	8c 85       	ldd	r24, Y+12	; 0x0c
    3aac:	9d 85       	ldd	r25, Y+13	; 0x0d
    3aae:	fc 01       	movw	r30, r24
    3ab0:	83 81       	ldd	r24, Z+3	; 0x03
    3ab2:	88 23       	and	r24, r24
    3ab4:	09 f4       	brne	.+2      	; 0x3ab8 <_Z17handleLinkBusMsgsv+0xa2c>
    3ab6:	7c c1       	rjmp	.+760    	; 0x3db0 <_Z17handleLinkBusMsgsv+0xd24>
    3ab8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3aba:	9d 85       	ldd	r25, Y+13	; 0x0d
    3abc:	03 96       	adiw	r24, 0x03	; 3
    3abe:	44 e1       	ldi	r20, 0x14	; 20
    3ac0:	50 e0       	ldi	r21, 0x00	; 0
    3ac2:	bc 01       	movw	r22, r24
    3ac4:	84 ec       	ldi	r24, 0xC4	; 196
    3ac6:	95 e4       	ldi	r25, 0x45	; 69
    3ac8:	0e 94 7a 4a 	call	0x94f4	; 0x94f4 <strncpy>
    3acc:	80 91 2f 46 	lds	r24, 0x462F	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3ad0:	8f 5f       	subi	r24, 0xFF	; 255
    3ad2:	80 93 2f 46 	sts	0x462F, r24	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3ad6:	6c c1       	rjmp	.+728    	; 0x3db0 <_Z17handleLinkBusMsgsv+0xd24>
    3ad8:	1e 82       	std	Y+6, r1	; 0x06
    3ada:	1f 82       	std	Y+7, r1	; 0x07
    3adc:	18 86       	std	Y+8, r1	; 0x08
    3ade:	19 86       	std	Y+9, r1	; 0x09
    3ae0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ae2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	83 81       	ldd	r24, Z+3	; 0x03
    3ae8:	88 23       	and	r24, r24
    3aea:	99 f1       	breq	.+102    	; 0x3b52 <_Z17handleLinkBusMsgsv+0xac6>
    3aec:	8c 85       	ldd	r24, Y+12	; 0x0c
    3aee:	9d 85       	ldd	r25, Y+13	; 0x0d
    3af0:	03 96       	adiw	r24, 0x03	; 3
    3af2:	0e 94 30 4a 	call	0x9460	; 0x9460 <atol>
    3af6:	dc 01       	movw	r26, r24
    3af8:	cb 01       	movw	r24, r22
    3afa:	80 93 35 46 	sts	0x4635, r24	; 0x804635 <_ZZ17handleLinkBusMsgsvE1f>
    3afe:	90 93 36 46 	sts	0x4636, r25	; 0x804636 <_ZZ17handleLinkBusMsgsvE1f+0x1>
    3b02:	a0 93 37 46 	sts	0x4637, r26	; 0x804637 <_ZZ17handleLinkBusMsgsvE1f+0x2>
    3b06:	b0 93 38 46 	sts	0x4638, r27	; 0x804638 <_ZZ17handleLinkBusMsgsvE1f+0x3>
    3b0a:	80 91 35 46 	lds	r24, 0x4635	; 0x804635 <_ZZ17handleLinkBusMsgsvE1f>
    3b0e:	90 91 36 46 	lds	r25, 0x4636	; 0x804636 <_ZZ17handleLinkBusMsgsvE1f+0x1>
    3b12:	a0 91 37 46 	lds	r26, 0x4637	; 0x804637 <_ZZ17handleLinkBusMsgsvE1f+0x2>
    3b16:	b0 91 38 46 	lds	r27, 0x4638	; 0x804638 <_ZZ17handleLinkBusMsgsvE1f+0x3>
    3b1a:	8e a7       	std	Y+46, r24	; 0x2e
    3b1c:	9f a7       	std	Y+47, r25	; 0x2f
    3b1e:	a8 ab       	std	Y+48, r26	; 0x30
    3b20:	b9 ab       	std	Y+49, r27	; 0x31
    3b22:	ce 01       	movw	r24, r28
    3b24:	8e 96       	adiw	r24, 0x2e	; 46
    3b26:	61 e0       	ldi	r22, 0x01	; 1
    3b28:	0e 94 74 43 	call	0x86e8	; 0x86e8 <_Z14txSetFrequencyPmb>
    3b2c:	98 2f       	mov	r25, r24
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	89 27       	eor	r24, r25
    3b32:	88 23       	and	r24, r24
    3b34:	b1 f0       	breq	.+44     	; 0x3b62 <_Z17handleLinkBusMsgsv+0xad6>
    3b36:	8e a5       	ldd	r24, Y+46	; 0x2e
    3b38:	9f a5       	ldd	r25, Y+47	; 0x2f
    3b3a:	a8 a9       	ldd	r26, Y+48	; 0x30
    3b3c:	b9 a9       	ldd	r27, Y+49	; 0x31
    3b3e:	8e 83       	std	Y+6, r24	; 0x06
    3b40:	9f 83       	std	Y+7, r25	; 0x07
    3b42:	a8 87       	std	Y+8, r26	; 0x08
    3b44:	b9 87       	std	Y+9, r27	; 0x09
    3b46:	80 91 2f 46 	lds	r24, 0x462F	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b4a:	8f 5f       	subi	r24, 0xFF	; 255
    3b4c:	80 93 2f 46 	sts	0x462F, r24	; 0x80462f <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    3b50:	08 c0       	rjmp	.+16     	; 0x3b62 <_Z17handleLinkBusMsgsv+0xad6>
    3b52:	0e 94 a6 43 	call	0x874c	; 0x874c <_Z14txGetFrequencyv>
    3b56:	dc 01       	movw	r26, r24
    3b58:	cb 01       	movw	r24, r22
    3b5a:	8e 83       	std	Y+6, r24	; 0x06
    3b5c:	9f 83       	std	Y+7, r25	; 0x07
    3b5e:	a8 87       	std	Y+8, r26	; 0x08
    3b60:	b9 87       	std	Y+9, r27	; 0x09
    3b62:	8e 81       	ldd	r24, Y+6	; 0x06
    3b64:	9f 81       	ldd	r25, Y+7	; 0x07
    3b66:	a8 85       	ldd	r26, Y+8	; 0x08
    3b68:	b9 85       	ldd	r27, Y+9	; 0x09
    3b6a:	89 2b       	or	r24, r25
    3b6c:	8a 2b       	or	r24, r26
    3b6e:	8b 2b       	or	r24, r27
    3b70:	09 f4       	brne	.+2      	; 0x3b74 <_Z17handleLinkBusMsgsv+0xae8>
    3b72:	20 c1       	rjmp	.+576    	; 0x3db4 <_Z17handleLinkBusMsgsv+0xd28>
    3b74:	89 85       	ldd	r24, Y+9	; 0x09
    3b76:	8f 93       	push	r24
    3b78:	88 85       	ldd	r24, Y+8	; 0x08
    3b7a:	8f 93       	push	r24
    3b7c:	8f 81       	ldd	r24, Y+7	; 0x07
    3b7e:	8f 93       	push	r24
    3b80:	8e 81       	ldd	r24, Y+6	; 0x06
    3b82:	8f 93       	push	r24
    3b84:	8d ee       	ldi	r24, 0xED	; 237
    3b86:	92 e4       	ldi	r25, 0x42	; 66
    3b88:	89 2f       	mov	r24, r25
    3b8a:	8f 93       	push	r24
    3b8c:	8d ee       	ldi	r24, 0xED	; 237
    3b8e:	92 e4       	ldi	r25, 0x42	; 66
    3b90:	8f 93       	push	r24
    3b92:	83 e8       	ldi	r24, 0x83	; 131
    3b94:	95 e4       	ldi	r25, 0x45	; 69
    3b96:	89 2f       	mov	r24, r25
    3b98:	8f 93       	push	r24
    3b9a:	83 e8       	ldi	r24, 0x83	; 131
    3b9c:	95 e4       	ldi	r25, 0x45	; 69
    3b9e:	8f 93       	push	r24
    3ba0:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    3ba4:	2d b7       	in	r18, 0x3d	; 61
    3ba6:	3e b7       	in	r19, 0x3e	; 62
    3ba8:	28 5f       	subi	r18, 0xF8	; 248
    3baa:	3f 4f       	sbci	r19, 0xFF	; 255
    3bac:	cd bf       	out	0x3d, r28	; 61
    3bae:	de bf       	out	0x3e, r29	; 62
    3bb0:	43 e8       	ldi	r20, 0x83	; 131
    3bb2:	55 e4       	ldi	r21, 0x45	; 69
    3bb4:	62 ef       	ldi	r22, 0xF2	; 242
    3bb6:	72 e4       	ldi	r23, 0x42	; 66
    3bb8:	83 e0       	ldi	r24, 0x03	; 3
    3bba:	0e 94 e5 36 	call	0x6dca	; 0x6dca <_Z11lb_send_msg13LBMessageTypePKcPc>
    3bbe:	fa c0       	rjmp	.+500    	; 0x3db4 <_Z17handleLinkBusMsgsv+0xd28>
    3bc0:	80 91 04 46 	lds	r24, 0x4604	; 0x804604 <_ZL22g_lastConversionResult>
    3bc4:	90 91 05 46 	lds	r25, 0x4605	; 0x804605 <_ZL22g_lastConversionResult+0x1>
    3bc8:	21 e0       	ldi	r18, 0x01	; 1
    3bca:	8d 38       	cpi	r24, 0x8D	; 141
    3bcc:	92 40       	sbci	r25, 0x02	; 2
    3bce:	08 f4       	brcc	.+2      	; 0x3bd2 <_Z17handleLinkBusMsgsv+0xb46>
    3bd0:	20 e0       	ldi	r18, 0x00	; 0
    3bd2:	22 23       	and	r18, r18
    3bd4:	09 f4       	brne	.+2      	; 0x3bd8 <_Z17handleLinkBusMsgsv+0xb4c>
    3bd6:	7c c0       	rjmp	.+248    	; 0x3cd0 <_Z17handleLinkBusMsgsv+0xc44>
    3bd8:	80 91 04 46 	lds	r24, 0x4604	; 0x804604 <_ZL22g_lastConversionResult>
    3bdc:	90 91 05 46 	lds	r25, 0x4605	; 0x804605 <_ZL22g_lastConversionResult+0x1>
    3be0:	cc 01       	movw	r24, r24
    3be2:	a0 e0       	ldi	r26, 0x00	; 0
    3be4:	b0 e0       	ldi	r27, 0x00	; 0
    3be6:	9c 01       	movw	r18, r24
    3be8:	ad 01       	movw	r20, r26
    3bea:	60 ea       	ldi	r22, 0xA0	; 160
    3bec:	78 e6       	ldi	r23, 0x68	; 104
    3bee:	86 e0       	ldi	r24, 0x06	; 6
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	0e 94 46 48 	call	0x908c	; 0x908c <__mulsi3>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	7c 01       	movw	r14, r24
    3bfc:	8d 01       	movw	r16, r26
    3bfe:	ed e7       	ldi	r30, 0x7D	; 125
    3c00:	fe 1a       	sub	r15, r30
    3c02:	0c 40       	sbci	r16, 0x0C	; 12
    3c04:	1e 4f       	sbci	r17, 0xFE	; 254
    3c06:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <g_battery_empty_mV>
    3c0a:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <g_battery_empty_mV+0x1>
    3c0e:	cc 01       	movw	r24, r24
    3c10:	a0 e0       	ldi	r26, 0x00	; 0
    3c12:	b0 e0       	ldi	r27, 0x00	; 0
    3c14:	9c 01       	movw	r18, r24
    3c16:	ad 01       	movw	r20, r26
    3c18:	64 e6       	ldi	r22, 0x64	; 100
    3c1a:	70 e7       	ldi	r23, 0x70	; 112
    3c1c:	8e ef       	ldi	r24, 0xFE	; 254
    3c1e:	9f ef       	ldi	r25, 0xFF	; 255
    3c20:	0e 94 46 48 	call	0x908c	; 0x908c <__mulsi3>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	e8 0e       	add	r14, r24
    3c2a:	f9 1e       	adc	r15, r25
    3c2c:	0a 1f       	adc	r16, r26
    3c2e:	1b 1f       	adc	r17, r27
    3c30:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <g_battery_empty_mV>
    3c34:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <g_battery_empty_mV+0x1>
    3c38:	cc 01       	movw	r24, r24
    3c3a:	a0 e0       	ldi	r26, 0x00	; 0
    3c3c:	b0 e0       	ldi	r27, 0x00	; 0
    3c3e:	28 e6       	ldi	r18, 0x68	; 104
    3c40:	30 e1       	ldi	r19, 0x10	; 16
    3c42:	40 e0       	ldi	r20, 0x00	; 0
    3c44:	50 e0       	ldi	r21, 0x00	; 0
    3c46:	28 1b       	sub	r18, r24
    3c48:	39 0b       	sbc	r19, r25
    3c4a:	4a 0b       	sbc	r20, r26
    3c4c:	5b 0b       	sbc	r21, r27
    3c4e:	8f ef       	ldi	r24, 0xFF	; 255
    3c50:	93 e0       	ldi	r25, 0x03	; 3
    3c52:	dc 01       	movw	r26, r24
    3c54:	0e 94 de 48 	call	0x91bc	; 0x91bc <__muluhisi3>
    3c58:	9b 01       	movw	r18, r22
    3c5a:	ac 01       	movw	r20, r24
    3c5c:	c8 01       	movw	r24, r16
    3c5e:	b7 01       	movw	r22, r14
    3c60:	0e 94 a0 48 	call	0x9140	; 0x9140 <__divmodsi4>
    3c64:	da 01       	movw	r26, r20
    3c66:	c9 01       	movw	r24, r18
    3c68:	8c a3       	std	Y+36, r24	; 0x24
    3c6a:	9d a3       	std	Y+37, r25	; 0x25
    3c6c:	ae a3       	std	Y+38, r26	; 0x26
    3c6e:	bf a3       	std	Y+39, r27	; 0x27
    3c70:	18 a6       	std	Y+40, r1	; 0x28
    3c72:	19 a6       	std	Y+41, r1	; 0x29
    3c74:	84 e6       	ldi	r24, 0x64	; 100
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	8a a7       	std	Y+42, r24	; 0x2a
    3c7a:	9b a7       	std	Y+43, r25	; 0x2b
    3c7c:	8a a5       	ldd	r24, Y+42	; 0x2a
    3c7e:	9b a5       	ldd	r25, Y+43	; 0x2b
    3c80:	9c 01       	movw	r18, r24
    3c82:	99 0f       	add	r25, r25
    3c84:	44 0b       	sbc	r20, r20
    3c86:	55 0b       	sbc	r21, r21
    3c88:	8c a1       	ldd	r24, Y+36	; 0x24
    3c8a:	9d a1       	ldd	r25, Y+37	; 0x25
    3c8c:	ae a1       	ldd	r26, Y+38	; 0x26
    3c8e:	bf a1       	ldd	r27, Y+39	; 0x27
    3c90:	28 17       	cp	r18, r24
    3c92:	39 07       	cpc	r19, r25
    3c94:	4a 07       	cpc	r20, r26
    3c96:	5b 07       	cpc	r21, r27
    3c98:	3c f4       	brge	.+14     	; 0x3ca8 <_Z17handleLinkBusMsgsv+0xc1c>
    3c9a:	8a a5       	ldd	r24, Y+42	; 0x2a
    3c9c:	9b a5       	ldd	r25, Y+43	; 0x2b
    3c9e:	09 2e       	mov	r0, r25
    3ca0:	00 0c       	add	r0, r0
    3ca2:	aa 0b       	sbc	r26, r26
    3ca4:	bb 0b       	sbc	r27, r27
    3ca6:	11 c0       	rjmp	.+34     	; 0x3cca <_Z17handleLinkBusMsgsv+0xc3e>
    3ca8:	88 a5       	ldd	r24, Y+40	; 0x28
    3caa:	99 a5       	ldd	r25, Y+41	; 0x29
    3cac:	09 2e       	mov	r0, r25
    3cae:	00 0c       	add	r0, r0
    3cb0:	aa 0b       	sbc	r26, r26
    3cb2:	bb 0b       	sbc	r27, r27
    3cb4:	2c a1       	ldd	r18, Y+36	; 0x24
    3cb6:	3d a1       	ldd	r19, Y+37	; 0x25
    3cb8:	4e a1       	ldd	r20, Y+38	; 0x26
    3cba:	5f a1       	ldd	r21, Y+39	; 0x27
    3cbc:	82 17       	cp	r24, r18
    3cbe:	93 07       	cpc	r25, r19
    3cc0:	a4 07       	cpc	r26, r20
    3cc2:	b5 07       	cpc	r27, r21
    3cc4:	14 f4       	brge	.+4      	; 0x3cca <_Z17handleLinkBusMsgsv+0xc3e>
    3cc6:	da 01       	movw	r26, r20
    3cc8:	c9 01       	movw	r24, r18
    3cca:	8a 87       	std	Y+10, r24	; 0x0a
    3ccc:	9b 87       	std	Y+11, r25	; 0x0b
    3cce:	2f c0       	rjmp	.+94     	; 0x3d2e <_Z17handleLinkBusMsgsv+0xca2>
    3cd0:	80 91 08 46 	lds	r24, 0x4608	; 0x804608 <_ZL22g_lastConversionResult+0x4>
    3cd4:	90 91 09 46 	lds	r25, 0x4609	; 0x804609 <_ZL22g_lastConversionResult+0x5>
    3cd8:	9c 01       	movw	r18, r24
    3cda:	40 e0       	ldi	r20, 0x00	; 0
    3cdc:	50 e0       	ldi	r21, 0x00	; 0
    3cde:	da 01       	movw	r26, r20
    3ce0:	c9 01       	movw	r24, r18
    3ce2:	88 0f       	add	r24, r24
    3ce4:	99 1f       	adc	r25, r25
    3ce6:	aa 1f       	adc	r26, r26
    3ce8:	bb 1f       	adc	r27, r27
    3cea:	88 0f       	add	r24, r24
    3cec:	99 1f       	adc	r25, r25
    3cee:	aa 1f       	adc	r26, r26
    3cf0:	bb 1f       	adc	r27, r27
    3cf2:	88 0f       	add	r24, r24
    3cf4:	99 1f       	adc	r25, r25
    3cf6:	aa 1f       	adc	r26, r26
    3cf8:	bb 1f       	adc	r27, r27
    3cfa:	82 1b       	sub	r24, r18
    3cfc:	93 0b       	sbc	r25, r19
    3cfe:	a4 0b       	sbc	r26, r20
    3d00:	b5 0b       	sbc	r27, r21
    3d02:	88 0f       	add	r24, r24
    3d04:	99 1f       	adc	r25, r25
    3d06:	aa 1f       	adc	r26, r26
    3d08:	bb 1f       	adc	r27, r27
    3d0a:	8a 5c       	subi	r24, 0xCA	; 202
    3d0c:	9e 4f       	sbci	r25, 0xFE	; 254
    3d0e:	af 4f       	sbci	r26, 0xFF	; 255
    3d10:	bf 4f       	sbci	r27, 0xFF	; 255
    3d12:	24 e6       	ldi	r18, 0x64	; 100
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	40 e0       	ldi	r20, 0x00	; 0
    3d18:	50 e0       	ldi	r21, 0x00	; 0
    3d1a:	bc 01       	movw	r22, r24
    3d1c:	cd 01       	movw	r24, r26
    3d1e:	0e 94 a0 48 	call	0x9140	; 0x9140 <__divmodsi4>
    3d22:	da 01       	movw	r26, r20
    3d24:	c9 01       	movw	r24, r18
    3d26:	80 5f       	subi	r24, 0xF0	; 240
    3d28:	98 4d       	sbci	r25, 0xD8	; 216
    3d2a:	8a 87       	std	Y+10, r24	; 0x0a
    3d2c:	9b 87       	std	Y+11, r25	; 0x0b
    3d2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d30:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d32:	66 ef       	ldi	r22, 0xF6	; 246
    3d34:	72 e4       	ldi	r23, 0x42	; 66
    3d36:	0e 94 0d 37 	call	0x6e1a	; 0x6e1a <_Z16lb_broadcast_numjPKc>
    3d3a:	80 e0       	ldi	r24, 0x00	; 0
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <ds3231_get_epoch>
    3d42:	dc 01       	movw	r26, r24
    3d44:	cb 01       	movw	r24, r22
    3d46:	bc 01       	movw	r22, r24
    3d48:	cd 01       	movw	r24, r26
    3d4a:	0e 94 24 02 	call	0x448	; 0x448 <set_system_time>
    3d4e:	35 c0       	rjmp	.+106    	; 0x3dba <_Z17handleLinkBusMsgsv+0xd2e>
    3d50:	ce 01       	movw	r24, r28
    3d52:	c2 96       	adiw	r24, 0x32	; 50
    3d54:	0e 94 c2 2c 	call	0x5984	; 0x5984 <ds3231_get_temp>
    3d58:	98 2f       	mov	r25, r24
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	89 27       	eor	r24, r25
    3d5e:	88 23       	and	r24, r24
    3d60:	59 f1       	breq	.+86     	; 0x3db8 <_Z17handleLinkBusMsgsv+0xd2c>
    3d62:	8a a9       	ldd	r24, Y+50	; 0x32
    3d64:	9b a9       	ldd	r25, Y+51	; 0x33
    3d66:	6b ef       	ldi	r22, 0xFB	; 251
    3d68:	72 e4       	ldi	r23, 0x42	; 66
    3d6a:	0e 94 0d 37 	call	0x6e1a	; 0x6e1a <_Z16lb_broadcast_numjPKc>
    3d6e:	24 c0       	rjmp	.+72     	; 0x3db8 <_Z17handleLinkBusMsgsv+0xd2c>
    3d70:	44 e6       	ldi	r20, 0x64	; 100
    3d72:	50 e4       	ldi	r21, 0x40	; 64
    3d74:	60 e0       	ldi	r22, 0x00	; 0
    3d76:	73 e4       	ldi	r23, 0x43	; 67
    3d78:	83 e0       	ldi	r24, 0x03	; 3
    3d7a:	0e 94 e5 36 	call	0x6dca	; 0x6dca <_Z11lb_send_msg13LBMessageTypePKcPc>
    3d7e:	1d c0       	rjmp	.+58     	; 0x3dba <_Z17handleLinkBusMsgsv+0xd2e>
    3d80:	0e 94 1a 36 	call	0x6c34	; 0x6c34 <_Z16linkbus_reset_rxv>
    3d84:	8e ec       	ldi	r24, 0xCE	; 206
    3d86:	80 93 b5 45 	sts	0x45B5, r24	; 0x8045b5 <_ZL17g_last_error_code>
    3d8a:	17 c0       	rjmp	.+46     	; 0x3dba <_Z17handleLinkBusMsgsv+0xd2e>
    3d8c:	00 00       	nop
    3d8e:	15 c0       	rjmp	.+42     	; 0x3dba <_Z17handleLinkBusMsgsv+0xd2e>
    3d90:	00 00       	nop
    3d92:	13 c0       	rjmp	.+38     	; 0x3dba <_Z17handleLinkBusMsgsv+0xd2e>
    3d94:	00 00       	nop
    3d96:	11 c0       	rjmp	.+34     	; 0x3dba <_Z17handleLinkBusMsgsv+0xd2e>
    3d98:	00 00       	nop
    3d9a:	0f c0       	rjmp	.+30     	; 0x3dba <_Z17handleLinkBusMsgsv+0xd2e>
    3d9c:	00 00       	nop
    3d9e:	0d c0       	rjmp	.+26     	; 0x3dba <_Z17handleLinkBusMsgsv+0xd2e>
    3da0:	00 00       	nop
    3da2:	0b c0       	rjmp	.+22     	; 0x3dba <_Z17handleLinkBusMsgsv+0xd2e>
    3da4:	00 00       	nop
    3da6:	09 c0       	rjmp	.+18     	; 0x3dba <_Z17handleLinkBusMsgsv+0xd2e>
    3da8:	00 00       	nop
    3daa:	07 c0       	rjmp	.+14     	; 0x3dba <_Z17handleLinkBusMsgsv+0xd2e>
    3dac:	00 00       	nop
    3dae:	05 c0       	rjmp	.+10     	; 0x3dba <_Z17handleLinkBusMsgsv+0xd2e>
    3db0:	00 00       	nop
    3db2:	03 c0       	rjmp	.+6      	; 0x3dba <_Z17handleLinkBusMsgsv+0xd2e>
    3db4:	00 00       	nop
    3db6:	01 c0       	rjmp	.+2      	; 0x3dba <_Z17handleLinkBusMsgsv+0xd2e>
    3db8:	00 00       	nop
    3dba:	8c 85       	ldd	r24, Y+12	; 0x0c
    3dbc:	9d 85       	ldd	r25, Y+13	; 0x0d
    3dbe:	fc 01       	movw	r30, r24
    3dc0:	11 82       	std	Z+1, r1	; 0x01
    3dc2:	12 82       	std	Z+2, r1	; 0x02
    3dc4:	89 81       	ldd	r24, Y+1	; 0x01
    3dc6:	88 23       	and	r24, r24
    3dc8:	09 f4       	brne	.+2      	; 0x3dcc <_Z17handleLinkBusMsgsv+0xd40>
    3dca:	6d c9       	rjmp	.-3366   	; 0x30a6 <_Z17handleLinkBusMsgsv+0x1a>
    3dcc:	84 e0       	ldi	r24, 0x04	; 4
    3dce:	93 e4       	ldi	r25, 0x43	; 67
    3dd0:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <_Z12lb_send_textPc>
    3dd4:	68 c9       	rjmp	.-3376   	; 0x30a6 <_Z17handleLinkBusMsgsv+0x1a>
    3dd6:	00 00       	nop
    3dd8:	e3 96       	adiw	r28, 0x33	; 51
    3dda:	cd bf       	out	0x3d, r28	; 61
    3ddc:	de bf       	out	0x3e, r29	; 62
    3dde:	df 91       	pop	r29
    3de0:	cf 91       	pop	r28
    3de2:	1f 91       	pop	r17
    3de4:	0f 91       	pop	r16
    3de6:	ff 90       	pop	r15
    3de8:	ef 90       	pop	r14
    3dea:	08 95       	ret

00003dec <_Z12eventEnabledv>:
    3dec:	ef 92       	push	r14
    3dee:	ff 92       	push	r15
    3df0:	0f 93       	push	r16
    3df2:	1f 93       	push	r17
    3df4:	cf 93       	push	r28
    3df6:	df 93       	push	r29
    3df8:	cd b7       	in	r28, 0x3d	; 61
    3dfa:	de b7       	in	r29, 0x3e	; 62
    3dfc:	29 97       	sbiw	r28, 0x09	; 9
    3dfe:	cd bf       	out	0x3d, r28	; 61
    3e00:	de bf       	out	0x3e, r29	; 62
    3e02:	20 91 f2 45 	lds	r18, 0x45F2	; 0x8045f2 <g_event_start_time>
    3e06:	30 91 f3 45 	lds	r19, 0x45F3	; 0x8045f3 <g_event_start_time+0x1>
    3e0a:	40 91 f4 45 	lds	r20, 0x45F4	; 0x8045f4 <g_event_start_time+0x2>
    3e0e:	50 91 f5 45 	lds	r21, 0x45F5	; 0x8045f5 <g_event_start_time+0x3>
    3e12:	80 91 f6 45 	lds	r24, 0x45F6	; 0x8045f6 <g_event_finish_time>
    3e16:	90 91 f7 45 	lds	r25, 0x45F7	; 0x8045f7 <g_event_finish_time+0x1>
    3e1a:	a0 91 f8 45 	lds	r26, 0x45F8	; 0x8045f8 <g_event_finish_time+0x2>
    3e1e:	b0 91 f9 45 	lds	r27, 0x45F9	; 0x8045f9 <g_event_finish_time+0x3>
    3e22:	bc 01       	movw	r22, r24
    3e24:	cd 01       	movw	r24, r26
    3e26:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <_Z7timeDifmm>
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	89 83       	std	Y+1, r24	; 0x01
    3e30:	9a 83       	std	Y+2, r25	; 0x02
    3e32:	ab 83       	std	Y+3, r26	; 0x03
    3e34:	bc 83       	std	Y+4, r27	; 0x04
    3e36:	21 e0       	ldi	r18, 0x01	; 1
    3e38:	89 81       	ldd	r24, Y+1	; 0x01
    3e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e3c:	ab 81       	ldd	r26, Y+3	; 0x03
    3e3e:	bc 81       	ldd	r27, Y+4	; 0x04
    3e40:	18 16       	cp	r1, r24
    3e42:	19 06       	cpc	r1, r25
    3e44:	1a 06       	cpc	r1, r26
    3e46:	1b 06       	cpc	r1, r27
    3e48:	0c f0       	brlt	.+2      	; 0x3e4c <_Z12eventEnabledv+0x60>
    3e4a:	20 e0       	ldi	r18, 0x00	; 0
    3e4c:	2d 83       	std	Y+5, r18	; 0x05
    3e4e:	ce 01       	movw	r24, r28
    3e50:	06 96       	adiw	r24, 0x06	; 6
    3e52:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    3e56:	20 91 f6 45 	lds	r18, 0x45F6	; 0x8045f6 <g_event_finish_time>
    3e5a:	30 91 f7 45 	lds	r19, 0x45F7	; 0x8045f7 <g_event_finish_time+0x1>
    3e5e:	40 91 f8 45 	lds	r20, 0x45F8	; 0x8045f8 <g_event_finish_time+0x2>
    3e62:	50 91 f9 45 	lds	r21, 0x45F9	; 0x8045f9 <g_event_finish_time+0x3>
    3e66:	8e 81       	ldd	r24, Y+6	; 0x06
    3e68:	9f 81       	ldd	r25, Y+7	; 0x07
    3e6a:	a8 85       	ldd	r26, Y+8	; 0x08
    3e6c:	b9 85       	ldd	r27, Y+9	; 0x09
    3e6e:	bc 01       	movw	r22, r24
    3e70:	cd 01       	movw	r24, r26
    3e72:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <_Z7timeDifmm>
    3e76:	dc 01       	movw	r26, r24
    3e78:	cb 01       	movw	r24, r22
    3e7a:	89 83       	std	Y+1, r24	; 0x01
    3e7c:	9a 83       	std	Y+2, r25	; 0x02
    3e7e:	ab 83       	std	Y+3, r26	; 0x03
    3e80:	bc 83       	std	Y+4, r27	; 0x04
    3e82:	89 81       	ldd	r24, Y+1	; 0x01
    3e84:	9a 81       	ldd	r25, Y+2	; 0x02
    3e86:	ab 81       	ldd	r26, Y+3	; 0x03
    3e88:	bc 81       	ldd	r27, Y+4	; 0x04
    3e8a:	bb 23       	and	r27, r27
    3e8c:	2c f0       	brlt	.+10     	; 0x3e98 <_Z12eventEnabledv+0xac>
    3e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e90:	88 23       	and	r24, r24
    3e92:	11 f0       	breq	.+4      	; 0x3e98 <_Z12eventEnabledv+0xac>
    3e94:	80 e0       	ldi	r24, 0x00	; 0
    3e96:	4a c0       	rjmp	.+148    	; 0x3f2c <_Z12eventEnabledv+0x140>
    3e98:	20 91 f2 45 	lds	r18, 0x45F2	; 0x8045f2 <g_event_start_time>
    3e9c:	30 91 f3 45 	lds	r19, 0x45F3	; 0x8045f3 <g_event_start_time+0x1>
    3ea0:	40 91 f4 45 	lds	r20, 0x45F4	; 0x8045f4 <g_event_start_time+0x2>
    3ea4:	50 91 f5 45 	lds	r21, 0x45F5	; 0x8045f5 <g_event_start_time+0x3>
    3ea8:	8e 81       	ldd	r24, Y+6	; 0x06
    3eaa:	9f 81       	ldd	r25, Y+7	; 0x07
    3eac:	a8 85       	ldd	r26, Y+8	; 0x08
    3eae:	b9 85       	ldd	r27, Y+9	; 0x09
    3eb0:	bc 01       	movw	r22, r24
    3eb2:	cd 01       	movw	r24, r26
    3eb4:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <_Z7timeDifmm>
    3eb8:	dc 01       	movw	r26, r24
    3eba:	cb 01       	movw	r24, r22
    3ebc:	89 83       	std	Y+1, r24	; 0x01
    3ebe:	9a 83       	std	Y+2, r25	; 0x02
    3ec0:	ab 83       	std	Y+3, r26	; 0x03
    3ec2:	bc 83       	std	Y+4, r27	; 0x04
    3ec4:	89 81       	ldd	r24, Y+1	; 0x01
    3ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec8:	ab 81       	ldd	r26, Y+3	; 0x03
    3eca:	bc 81       	ldd	r27, Y+4	; 0x04
    3ecc:	84 3c       	cpi	r24, 0xC4	; 196
    3ece:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed0:	af 4f       	sbci	r26, 0xFF	; 255
    3ed2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ed4:	64 f0       	brlt	.+24     	; 0x3eee <_Z12eventEnabledv+0x102>
    3ed6:	10 92 c3 45 	sts	0x45C3, r1	; 0x8045c3 <_ZL11g_sleepType>
    3eda:	10 92 17 40 	sts	0x4017, r1	; 0x804017 <_ZL18g_seconds_to_sleep>
    3ede:	10 92 18 40 	sts	0x4018, r1	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    3ee2:	10 92 19 40 	sts	0x4019, r1	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    3ee6:	10 92 1a 40 	sts	0x401A, r1	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	1f c0       	rjmp	.+62     	; 0x3f2c <_Z12eventEnabledv+0x140>
    3eee:	24 ec       	ldi	r18, 0xC4	; 196
    3ef0:	3f ef       	ldi	r19, 0xFF	; 255
    3ef2:	4f ef       	ldi	r20, 0xFF	; 255
    3ef4:	5f ef       	ldi	r21, 0xFF	; 255
    3ef6:	89 81       	ldd	r24, Y+1	; 0x01
    3ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    3efa:	ab 81       	ldd	r26, Y+3	; 0x03
    3efc:	bc 81       	ldd	r27, Y+4	; 0x04
    3efe:	79 01       	movw	r14, r18
    3f00:	8a 01       	movw	r16, r20
    3f02:	e8 1a       	sub	r14, r24
    3f04:	f9 0a       	sbc	r15, r25
    3f06:	0a 0b       	sbc	r16, r26
    3f08:	1b 0b       	sbc	r17, r27
    3f0a:	d8 01       	movw	r26, r16
    3f0c:	c7 01       	movw	r24, r14
    3f0e:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    3f12:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    3f16:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    3f1a:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    3f1e:	81 e0       	ldi	r24, 0x01	; 1
    3f20:	80 93 c3 45 	sts	0x45C3, r24	; 0x8045c3 <_ZL11g_sleepType>
    3f24:	81 e0       	ldi	r24, 0x01	; 1
    3f26:	80 93 fe 45 	sts	0x45FE, r24	; 0x8045fe <_ZL13g_go_to_sleep>
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	29 96       	adiw	r28, 0x09	; 9
    3f2e:	cd bf       	out	0x3d, r28	; 61
    3f30:	de bf       	out	0x3e, r29	; 62
    3f32:	df 91       	pop	r29
    3f34:	cf 91       	pop	r28
    3f36:	1f 91       	pop	r17
    3f38:	0f 91       	pop	r16
    3f3a:	ff 90       	pop	r15
    3f3c:	ef 90       	pop	r14
    3f3e:	08 95       	ret

00003f40 <_Z13throttleValueh>:
    3f40:	85 31       	cpi	r24, 0x15	; 21
    3f42:	4c f4       	brge	.+18     	; 0x3f56 <_Z13throttleValueh+0x16>
    3f44:	28 2f       	mov	r18, r24
    3f46:	88 0f       	add	r24, r24
    3f48:	33 0b       	sbc	r19, r19
    3f4a:	25 30       	cpi	r18, 0x05	; 5
    3f4c:	31 05       	cpc	r19, r1
    3f4e:	2c f4       	brge	.+10     	; 0x3f5a <_Z13throttleValueh+0x1a>
    3f50:	25 e0       	ldi	r18, 0x05	; 5
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	02 c0       	rjmp	.+4      	; 0x3f5a <_Z13throttleValueh+0x1a>
    3f56:	24 e1       	ldi	r18, 0x14	; 20
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	40 e0       	ldi	r20, 0x00	; 0
    3f5e:	50 e0       	ldi	r21, 0x00	; 0
    3f60:	62 ec       	ldi	r22, 0xC2	; 194
    3f62:	71 e0       	ldi	r23, 0x01	; 1
    3f64:	80 e0       	ldi	r24, 0x00	; 0
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	0e 94 a0 48 	call	0x9140	; 0x9140 <__divmodsi4>
    3f6c:	ca 01       	movw	r24, r20
    3f6e:	b9 01       	movw	r22, r18
    3f70:	0e 94 24 47 	call	0x8e48	; 0x8e48 <__floatsisf>
    3f74:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <__fixunssfsi>
    3f78:	cb 01       	movw	r24, r22
    3f7a:	08 95       	ret

00003f7c <_Z11launchEventP2SC>:
    3f7c:	cf 93       	push	r28
    3f7e:	df 93       	push	r29
    3f80:	00 d0       	rcall	.+0      	; 0x3f82 <_Z11launchEventP2SC+0x6>
    3f82:	1f 92       	push	r1
    3f84:	cd b7       	in	r28, 0x3d	; 61
    3f86:	de b7       	in	r29, 0x3e	; 62
    3f88:	8a 83       	std	Y+2, r24	; 0x02
    3f8a:	9b 83       	std	Y+3, r25	; 0x03
    3f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3f90:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <_Z33activateEventUsingCurrentSettingsP2SC>
    3f94:	89 83       	std	Y+1, r24	; 0x01
    3f96:	8a 81       	ldd	r24, Y+2	; 0x02
    3f98:	9b 81       	ldd	r25, Y+3	; 0x03
    3f9a:	fc 01       	movw	r30, r24
    3f9c:	80 81       	ld	r24, Z
    3f9e:	88 23       	and	r24, r24
    3fa0:	31 f0       	breq	.+12     	; 0x3fae <_Z11launchEventP2SC+0x32>
    3fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    3fa6:	fc 01       	movw	r30, r24
    3fa8:	80 81       	ld	r24, Z
    3faa:	80 93 b6 45 	sts	0x45B6, r24	; 0x8045b6 <_ZL18g_last_status_code>
    3fae:	89 81       	ldd	r24, Y+1	; 0x01
    3fb0:	88 23       	and	r24, r24
    3fb2:	21 f0       	breq	.+8      	; 0x3fbc <_Z11launchEventP2SC+0x40>
    3fb4:	89 81       	ldd	r24, Y+1	; 0x01
    3fb6:	80 93 b5 45 	sts	0x45B5, r24	; 0x8045b5 <_ZL17g_last_error_code>
    3fba:	04 c0       	rjmp	.+8      	; 0x3fc4 <_Z11launchEventP2SC+0x48>
    3fbc:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <_Z12eventEnabledv>
    3fc0:	80 93 fa 45 	sts	0x45FA, r24	; 0x8045fa <g_event_enabled>
    3fc4:	89 81       	ldd	r24, Y+1	; 0x01
    3fc6:	23 96       	adiw	r28, 0x03	; 3
    3fc8:	cd bf       	out	0x3d, r28	; 61
    3fca:	de bf       	out	0x3e, r29	; 62
    3fcc:	df 91       	pop	r29
    3fce:	cf 91       	pop	r28
    3fd0:	08 95       	ret

00003fd2 <_Z33activateEventUsingCurrentSettingsP2SC>:
    3fd2:	cf 92       	push	r12
    3fd4:	df 92       	push	r13
    3fd6:	ef 92       	push	r14
    3fd8:	ff 92       	push	r15
    3fda:	0f 93       	push	r16
    3fdc:	1f 93       	push	r17
    3fde:	cf 93       	push	r28
    3fe0:	df 93       	push	r29
    3fe2:	1f 92       	push	r1
    3fe4:	cd b7       	in	r28, 0x3d	; 61
    3fe6:	de b7       	in	r29, 0x3e	; 62
    3fe8:	40 91 f2 45 	lds	r20, 0x45F2	; 0x8045f2 <g_event_start_time>
    3fec:	50 91 f3 45 	lds	r21, 0x45F3	; 0x8045f3 <g_event_start_time+0x1>
    3ff0:	60 91 f4 45 	lds	r22, 0x45F4	; 0x8045f4 <g_event_start_time+0x2>
    3ff4:	70 91 f5 45 	lds	r23, 0x45F5	; 0x8045f5 <g_event_start_time+0x3>
    3ff8:	45 2b       	or	r20, r21
    3ffa:	46 2b       	or	r20, r22
    3ffc:	47 2b       	or	r20, r23
    3ffe:	09 f4       	brne	.+2      	; 0x4002 <__DATA_REGION_LENGTH__+0x2>
    4000:	91 c1       	rjmp	.+802    	; 0x4324 <__DATA_REGION_LENGTH__+0x324>
    4002:	00 91 f2 45 	lds	r16, 0x45F2	; 0x8045f2 <g_event_start_time>
    4006:	10 91 f3 45 	lds	r17, 0x45F3	; 0x8045f3 <g_event_start_time+0x1>
    400a:	20 91 f4 45 	lds	r18, 0x45F4	; 0x8045f4 <g_event_start_time+0x2>
    400e:	30 91 f5 45 	lds	r19, 0x45F5	; 0x8045f5 <g_event_start_time+0x3>
    4012:	40 91 f6 45 	lds	r20, 0x45F6	; 0x8045f6 <g_event_finish_time>
    4016:	50 91 f7 45 	lds	r21, 0x45F7	; 0x8045f7 <g_event_finish_time+0x1>
    401a:	60 91 f8 45 	lds	r22, 0x45F8	; 0x8045f8 <g_event_finish_time+0x2>
    401e:	70 91 f9 45 	lds	r23, 0x45F9	; 0x8045f9 <g_event_finish_time+0x3>
    4022:	04 17       	cp	r16, r20
    4024:	15 07       	cpc	r17, r21
    4026:	26 07       	cpc	r18, r22
    4028:	37 07       	cpc	r19, r23
    402a:	08 f0       	brcs	.+2      	; 0x402e <__DATA_REGION_LENGTH__+0x2e>
    402c:	7d c1       	rjmp	.+762    	; 0x4328 <__DATA_REGION_LENGTH__+0x328>
    402e:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    4032:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4036:	23 2b       	or	r18, r19
    4038:	09 f4       	brne	.+2      	; 0x403c <__DATA_REGION_LENGTH__+0x3c>
    403a:	78 c1       	rjmp	.+752    	; 0x432c <__DATA_REGION_LENGTH__+0x32c>
    403c:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    4040:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    4044:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    4048:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    404c:	24 0f       	add	r18, r20
    404e:	35 1f       	adc	r19, r21
    4050:	40 91 f0 45 	lds	r20, 0x45F0	; 0x8045f0 <g_intra_cycle_delay_time>
    4054:	50 91 f1 45 	lds	r21, 0x45F1	; 0x8045f1 <g_intra_cycle_delay_time+0x1>
    4058:	24 17       	cp	r18, r20
    405a:	35 07       	cpc	r19, r21
    405c:	0c f4       	brge	.+2      	; 0x4060 <__DATA_REGION_LENGTH__+0x60>
    405e:	68 c1       	rjmp	.+720    	; 0x4330 <__DATA_REGION_LENGTH__+0x330>
    4060:	20 91 c4 45 	lds	r18, 0x45C4	; 0x8045c4 <g_messages_text>
    4064:	22 23       	and	r18, r18
    4066:	09 f4       	brne	.+2      	; 0x406a <__DATA_REGION_LENGTH__+0x6a>
    4068:	65 c1       	rjmp	.+714    	; 0x4334 <__DATA_REGION_LENGTH__+0x334>
    406a:	20 91 0c 40 	lds	r18, 0x400C	; 0x80400c <g_pattern_codespeed>
    406e:	22 23       	and	r18, r18
    4070:	09 f4       	brne	.+2      	; 0x4074 <__DATA_REGION_LENGTH__+0x74>
    4072:	62 c1       	rjmp	.+708    	; 0x4338 <__DATA_REGION_LENGTH__+0x338>
    4074:	8c 01       	movw	r16, r24
    4076:	80 91 d9 45 	lds	r24, 0x45D9	; 0x8045d9 <g_messages_text+0x15>
    407a:	88 23       	and	r24, r24
    407c:	19 f1       	breq	.+70     	; 0x40c4 <__DATA_REGION_LENGTH__+0xc4>
    407e:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    4082:	88 23       	and	r24, r24
    4084:	41 f0       	breq	.+16     	; 0x4096 <__DATA_REGION_LENGTH__+0x96>
    4086:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    408a:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    408e:	89 2b       	or	r24, r25
    4090:	21 f4       	brne	.+8      	; 0x409a <__DATA_REGION_LENGTH__+0x9a>
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	03 c0       	rjmp	.+6      	; 0x409c <__DATA_REGION_LENGTH__+0x9c>
    4096:	81 e0       	ldi	r24, 0x01	; 1
    4098:	01 c0       	rjmp	.+2      	; 0x409c <__DATA_REGION_LENGTH__+0x9c>
    409a:	80 e0       	ldi	r24, 0x00	; 0
    409c:	81 11       	cpse	r24, r1
    409e:	4e c1       	rjmp	.+668    	; 0x433c <__DATA_REGION_LENGTH__+0x33c>
    40a0:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    40a4:	70 e0       	ldi	r23, 0x00	; 0
    40a6:	89 ed       	ldi	r24, 0xD9	; 217
    40a8:	95 e4       	ldi	r25, 0x45	; 69
    40aa:	0e 94 46 39 	call	0x728c	; 0x728c <_Z26timeRequiredToSendStrAtWPMPcj>
    40ae:	8c 50       	subi	r24, 0x0C	; 12
    40b0:	9e 4f       	sbci	r25, 0xFE	; 254
    40b2:	68 ee       	ldi	r22, 0xE8	; 232
    40b4:	73 e0       	ldi	r23, 0x03	; 3
    40b6:	0e 94 56 48 	call	0x90ac	; 0x90ac <__udivmodhi4>
    40ba:	60 93 ee 45 	sts	0x45EE, r22	; 0x8045ee <g_time_needed_for_ID>
    40be:	70 93 ef 45 	sts	0x45EF, r23	; 0x8045ef <g_time_needed_for_ID+0x1>
    40c2:	04 c0       	rjmp	.+8      	; 0x40cc <__DATA_REGION_LENGTH__+0xcc>
    40c4:	10 92 ee 45 	sts	0x45EE, r1	; 0x8045ee <g_time_needed_for_ID>
    40c8:	10 92 ef 45 	sts	0x45EF, r1	; 0x8045ef <g_time_needed_for_ID+0x1>
    40cc:	80 e0       	ldi	r24, 0x00	; 0
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	0e 94 7e 05 	call	0xafc	; 0xafc <time>
    40d4:	c0 90 f6 45 	lds	r12, 0x45F6	; 0x8045f6 <g_event_finish_time>
    40d8:	d0 90 f7 45 	lds	r13, 0x45F7	; 0x8045f7 <g_event_finish_time+0x1>
    40dc:	e0 90 f8 45 	lds	r14, 0x45F8	; 0x8045f8 <g_event_finish_time+0x2>
    40e0:	f0 90 f9 45 	lds	r15, 0x45F9	; 0x8045f9 <g_event_finish_time+0x3>
    40e4:	c6 16       	cp	r12, r22
    40e6:	d7 06       	cpc	r13, r23
    40e8:	e8 06       	cpc	r14, r24
    40ea:	f9 06       	cpc	r15, r25
    40ec:	48 f4       	brcc	.+18     	; 0x4100 <__DATA_REGION_LENGTH__+0x100>
    40ee:	01 15       	cp	r16, r1
    40f0:	11 05       	cpc	r17, r1
    40f2:	09 f4       	brne	.+2      	; 0x40f6 <__DATA_REGION_LENGTH__+0xf6>
    40f4:	25 c1       	rjmp	.+586    	; 0x4340 <__DATA_REGION_LENGTH__+0x340>
    40f6:	8a ef       	ldi	r24, 0xFA	; 250
    40f8:	f8 01       	movw	r30, r16
    40fa:	80 83       	st	Z, r24
    40fc:	80 e0       	ldi	r24, 0x00	; 0
    40fe:	21 c1       	rjmp	.+578    	; 0x4342 <__DATA_REGION_LENGTH__+0x342>
    4100:	20 91 f2 45 	lds	r18, 0x45F2	; 0x8045f2 <g_event_start_time>
    4104:	30 91 f3 45 	lds	r19, 0x45F3	; 0x8045f3 <g_event_start_time+0x1>
    4108:	40 91 f4 45 	lds	r20, 0x45F4	; 0x8045f4 <g_event_start_time+0x2>
    410c:	50 91 f5 45 	lds	r21, 0x45F5	; 0x8045f5 <g_event_start_time+0x3>
    4110:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <_Z7timeDifmm>
    4114:	99 23       	and	r25, r25
    4116:	0c f4       	brge	.+2      	; 0x411a <__DATA_REGION_LENGTH__+0x11a>
    4118:	f2 c0       	rjmp	.+484    	; 0x42fe <__DATA_REGION_LENGTH__+0x2fe>
    411a:	e0 90 0d 40 	lds	r14, 0x400D	; 0x80400d <g_on_air_seconds>
    411e:	f0 90 0e 40 	lds	r15, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4122:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    4126:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    412a:	e2 0e       	add	r14, r18
    412c:	f3 1e       	adc	r15, r19
    412e:	97 01       	movw	r18, r14
    4130:	0f 2c       	mov	r0, r15
    4132:	00 0c       	add	r0, r0
    4134:	44 0b       	sbc	r20, r20
    4136:	55 0b       	sbc	r21, r21
    4138:	0e 94 a0 48 	call	0x9140	; 0x9140 <__divmodsi4>
    413c:	20 91 f0 45 	lds	r18, 0x45F0	; 0x8045f0 <g_intra_cycle_delay_time>
    4140:	30 91 f1 45 	lds	r19, 0x45F1	; 0x8045f1 <g_intra_cycle_delay_time+0x1>
    4144:	c9 01       	movw	r24, r18
    4146:	86 1b       	sub	r24, r22
    4148:	97 0b       	sbc	r25, r23
    414a:	18 16       	cp	r1, r24
    414c:	19 06       	cpc	r1, r25
    414e:	0c f4       	brge	.+2      	; 0x4152 <__DATA_REGION_LENGTH__+0x152>
    4150:	84 c0       	rjmp	.+264    	; 0x425a <__DATA_REGION_LENGTH__+0x25a>
    4152:	22 27       	eor	r18, r18
    4154:	33 27       	eor	r19, r19
    4156:	28 1b       	sub	r18, r24
    4158:	39 0b       	sbc	r19, r25
    415a:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    415e:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4162:	24 17       	cp	r18, r20
    4164:	35 07       	cpc	r19, r21
    4166:	ac f1       	brlt	.+106    	; 0x41d2 <__DATA_REGION_LENGTH__+0x1d2>
    4168:	8e 0d       	add	r24, r14
    416a:	9f 1d       	adc	r25, r15
    416c:	91 95       	neg	r25
    416e:	81 95       	neg	r24
    4170:	91 09       	sbc	r25, r1
    4172:	09 2e       	mov	r0, r25
    4174:	00 0c       	add	r0, r0
    4176:	aa 0b       	sbc	r26, r26
    4178:	bb 0b       	sbc	r27, r27
    417a:	80 93 ba 45 	sts	0x45BA, r24	; 0x8045ba <_ZL12g_on_the_air>
    417e:	90 93 bb 45 	sts	0x45BB, r25	; 0x8045bb <_ZL12g_on_the_air+0x1>
    4182:	a0 93 bc 45 	sts	0x45BC, r26	; 0x8045bc <_ZL12g_on_the_air+0x2>
    4186:	b0 93 bd 45 	sts	0x45BD, r27	; 0x8045bd <_ZL12g_on_the_air+0x3>
    418a:	01 15       	cp	r16, r1
    418c:	11 05       	cpc	r17, r1
    418e:	19 f0       	breq	.+6      	; 0x4196 <__DATA_REGION_LENGTH__+0x196>
    4190:	8e ef       	ldi	r24, 0xFE	; 254
    4192:	f8 01       	movw	r30, r16
    4194:	80 83       	st	Z, r24
    4196:	80 91 fa 45 	lds	r24, 0x45FA	; 0x8045fa <g_event_enabled>
    419a:	81 11       	cpse	r24, r1
    419c:	8a c0       	rjmp	.+276    	; 0x42b2 <__DATA_REGION_LENGTH__+0x2b2>
    419e:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    41a2:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    41a6:	40 91 ba 45 	lds	r20, 0x45BA	; 0x8045ba <_ZL12g_on_the_air>
    41aa:	50 91 bb 45 	lds	r21, 0x45BB	; 0x8045bb <_ZL12g_on_the_air+0x1>
    41ae:	60 91 bc 45 	lds	r22, 0x45BC	; 0x8045bc <_ZL12g_on_the_air+0x2>
    41b2:	70 91 bd 45 	lds	r23, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x3>
    41b6:	20 91 ee 45 	lds	r18, 0x45EE	; 0x8045ee <g_time_needed_for_ID>
    41ba:	30 91 ef 45 	lds	r19, 0x45EF	; 0x8045ef <g_time_needed_for_ID+0x1>
    41be:	84 1b       	sub	r24, r20
    41c0:	95 0b       	sbc	r25, r21
    41c2:	82 1b       	sub	r24, r18
    41c4:	93 0b       	sbc	r25, r19
    41c6:	80 93 be 45 	sts	0x45BE, r24	; 0x8045be <_ZL26g_sendID_seconds_countdown>
    41ca:	90 93 bf 45 	sts	0x45BF, r25	; 0x8045bf <_ZL26g_sendID_seconds_countdown+0x1>
    41ce:	80 e0       	ldi	r24, 0x00	; 0
    41d0:	77 c0       	rjmp	.+238    	; 0x42c0 <__DATA_REGION_LENGTH__+0x2c0>
    41d2:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    41d6:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    41da:	82 0f       	add	r24, r18
    41dc:	93 1f       	adc	r25, r19
    41de:	09 2e       	mov	r0, r25
    41e0:	00 0c       	add	r0, r0
    41e2:	aa 0b       	sbc	r26, r26
    41e4:	bb 0b       	sbc	r27, r27
    41e6:	80 93 ba 45 	sts	0x45BA, r24	; 0x8045ba <_ZL12g_on_the_air>
    41ea:	90 93 bb 45 	sts	0x45BB, r25	; 0x8045bb <_ZL12g_on_the_air+0x1>
    41ee:	a0 93 bc 45 	sts	0x45BC, r26	; 0x8045bc <_ZL12g_on_the_air+0x2>
    41f2:	b0 93 bd 45 	sts	0x45BD, r27	; 0x8045bd <_ZL12g_on_the_air+0x3>
    41f6:	01 15       	cp	r16, r1
    41f8:	11 05       	cpc	r17, r1
    41fa:	19 f0       	breq	.+6      	; 0x4202 <__DATA_REGION_LENGTH__+0x202>
    41fc:	8d ef       	ldi	r24, 0xFD	; 253
    41fe:	f8 01       	movw	r30, r16
    4200:	80 83       	st	Z, r24
    4202:	80 91 fa 45 	lds	r24, 0x45FA	; 0x8045fa <g_event_enabled>
    4206:	81 11       	cpse	r24, r1
    4208:	56 c0       	rjmp	.+172    	; 0x42b6 <__DATA_REGION_LENGTH__+0x2b6>
    420a:	80 91 ee 45 	lds	r24, 0x45EE	; 0x8045ee <g_time_needed_for_ID>
    420e:	90 91 ef 45 	lds	r25, 0x45EF	; 0x8045ef <g_time_needed_for_ID+0x1>
    4212:	a0 e0       	ldi	r26, 0x00	; 0
    4214:	b0 e0       	ldi	r27, 0x00	; 0
    4216:	40 91 ba 45 	lds	r20, 0x45BA	; 0x8045ba <_ZL12g_on_the_air>
    421a:	50 91 bb 45 	lds	r21, 0x45BB	; 0x8045bb <_ZL12g_on_the_air+0x1>
    421e:	60 91 bc 45 	lds	r22, 0x45BC	; 0x8045bc <_ZL12g_on_the_air+0x2>
    4222:	70 91 bd 45 	lds	r23, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x3>
    4226:	84 17       	cp	r24, r20
    4228:	95 07       	cpc	r25, r21
    422a:	a6 07       	cpc	r26, r22
    422c:	b7 07       	cpc	r27, r23
    422e:	0c f0       	brlt	.+2      	; 0x4232 <__DATA_REGION_LENGTH__+0x232>
    4230:	44 c0       	rjmp	.+136    	; 0x42ba <__DATA_REGION_LENGTH__+0x2ba>
    4232:	80 91 ba 45 	lds	r24, 0x45BA	; 0x8045ba <_ZL12g_on_the_air>
    4236:	90 91 bb 45 	lds	r25, 0x45BB	; 0x8045bb <_ZL12g_on_the_air+0x1>
    423a:	a0 91 bc 45 	lds	r26, 0x45BC	; 0x8045bc <_ZL12g_on_the_air+0x2>
    423e:	b0 91 bd 45 	lds	r27, 0x45BD	; 0x8045bd <_ZL12g_on_the_air+0x3>
    4242:	20 91 ee 45 	lds	r18, 0x45EE	; 0x8045ee <g_time_needed_for_ID>
    4246:	30 91 ef 45 	lds	r19, 0x45EF	; 0x8045ef <g_time_needed_for_ID+0x1>
    424a:	82 1b       	sub	r24, r18
    424c:	93 0b       	sbc	r25, r19
    424e:	80 93 be 45 	sts	0x45BE, r24	; 0x8045be <_ZL26g_sendID_seconds_countdown>
    4252:	90 93 bf 45 	sts	0x45BF, r25	; 0x8045bf <_ZL26g_sendID_seconds_countdown+0x1>
    4256:	81 e0       	ldi	r24, 0x01	; 1
    4258:	33 c0       	rjmp	.+102    	; 0x42c0 <__DATA_REGION_LENGTH__+0x2c0>
    425a:	44 27       	eor	r20, r20
    425c:	55 27       	eor	r21, r21
    425e:	48 1b       	sub	r20, r24
    4260:	59 0b       	sbc	r21, r25
    4262:	05 2e       	mov	r0, r21
    4264:	00 0c       	add	r0, r0
    4266:	66 0b       	sbc	r22, r22
    4268:	77 0b       	sbc	r23, r23
    426a:	40 93 ba 45 	sts	0x45BA, r20	; 0x8045ba <_ZL12g_on_the_air>
    426e:	50 93 bb 45 	sts	0x45BB, r21	; 0x8045bb <_ZL12g_on_the_air+0x1>
    4272:	60 93 bc 45 	sts	0x45BC, r22	; 0x8045bc <_ZL12g_on_the_air+0x2>
    4276:	70 93 bd 45 	sts	0x45BD, r23	; 0x8045bd <_ZL12g_on_the_air+0x3>
    427a:	01 15       	cp	r16, r1
    427c:	11 05       	cpc	r17, r1
    427e:	19 f0       	breq	.+6      	; 0x4286 <__DATA_REGION_LENGTH__+0x286>
    4280:	2e ef       	ldi	r18, 0xFE	; 254
    4282:	f8 01       	movw	r30, r16
    4284:	20 83       	st	Z, r18
    4286:	20 91 fa 45 	lds	r18, 0x45FA	; 0x8045fa <g_event_enabled>
    428a:	21 11       	cpse	r18, r1
    428c:	18 c0       	rjmp	.+48     	; 0x42be <__DATA_REGION_LENGTH__+0x2be>
    428e:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    4292:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    4296:	82 0f       	add	r24, r18
    4298:	93 1f       	adc	r25, r19
    429a:	20 91 ee 45 	lds	r18, 0x45EE	; 0x8045ee <g_time_needed_for_ID>
    429e:	30 91 ef 45 	lds	r19, 0x45EF	; 0x8045ef <g_time_needed_for_ID+0x1>
    42a2:	82 1b       	sub	r24, r18
    42a4:	93 0b       	sbc	r25, r19
    42a6:	80 93 be 45 	sts	0x45BE, r24	; 0x8045be <_ZL26g_sendID_seconds_countdown>
    42aa:	90 93 bf 45 	sts	0x45BF, r25	; 0x8045bf <_ZL26g_sendID_seconds_countdown+0x1>
    42ae:	80 e0       	ldi	r24, 0x00	; 0
    42b0:	07 c0       	rjmp	.+14     	; 0x42c0 <__DATA_REGION_LENGTH__+0x2c0>
    42b2:	80 e0       	ldi	r24, 0x00	; 0
    42b4:	05 c0       	rjmp	.+10     	; 0x42c0 <__DATA_REGION_LENGTH__+0x2c0>
    42b6:	81 e0       	ldi	r24, 0x01	; 1
    42b8:	03 c0       	rjmp	.+6      	; 0x42c0 <__DATA_REGION_LENGTH__+0x2c0>
    42ba:	81 e0       	ldi	r24, 0x01	; 1
    42bc:	01 c0       	rjmp	.+2      	; 0x42c0 <__DATA_REGION_LENGTH__+0x2c0>
    42be:	80 e0       	ldi	r24, 0x00	; 0
    42c0:	88 23       	and	r24, r24
    42c2:	b1 f0       	breq	.+44     	; 0x42f0 <__DATA_REGION_LENGTH__+0x2f0>
    42c4:	f8 94       	cli
    42c6:	81 e0       	ldi	r24, 0x01	; 1
    42c8:	89 83       	std	Y+1, r24	; 0x01
    42ca:	40 e0       	ldi	r20, 0x00	; 0
    42cc:	50 e0       	ldi	r21, 0x00	; 0
    42ce:	be 01       	movw	r22, r28
    42d0:	6f 5f       	subi	r22, 0xFF	; 255
    42d2:	7f 4f       	sbci	r23, 0xFF	; 255
    42d4:	84 ec       	ldi	r24, 0xC4	; 196
    42d6:	95 e4       	ldi	r25, 0x45	; 69
    42d8:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_Z9makeMorsePcPbS0_>
    42dc:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    42e0:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_Z13throttleValueh>
    42e4:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    42e8:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    42ec:	78 94       	sei
    42ee:	03 c0       	rjmp	.+6      	; 0x42f6 <__DATA_REGION_LENGTH__+0x2f6>
    42f0:	80 e0       	ldi	r24, 0x00	; 0
    42f2:	0e 94 b3 43 	call	0x8766	; 0x8766 <_Z14keyTransmitterb>
    42f6:	81 e0       	ldi	r24, 0x01	; 1
    42f8:	80 93 fb 45 	sts	0x45FB, r24	; 0x8045fb <g_event_commenced>
    42fc:	09 c0       	rjmp	.+18     	; 0x4310 <__DATA_REGION_LENGTH__+0x310>
    42fe:	01 15       	cp	r16, r1
    4300:	11 05       	cpc	r17, r1
    4302:	19 f0       	breq	.+6      	; 0x430a <__DATA_REGION_LENGTH__+0x30a>
    4304:	8f ef       	ldi	r24, 0xFF	; 255
    4306:	f8 01       	movw	r30, r16
    4308:	80 83       	st	Z, r24
    430a:	80 e0       	ldi	r24, 0x00	; 0
    430c:	0e 94 b3 43 	call	0x8766	; 0x8766 <_Z14keyTransmitterb>
    4310:	10 92 fd 45 	sts	0x45FD, r1	; 0x8045fd <g_waiting_for_next_event>
    4314:	8a e5       	ldi	r24, 0x5A	; 90
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    431c:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    4320:	80 e0       	ldi	r24, 0x00	; 0
    4322:	0f c0       	rjmp	.+30     	; 0x4342 <__DATA_REGION_LENGTH__+0x342>
    4324:	8c ec       	ldi	r24, 0xCC	; 204
    4326:	0d c0       	rjmp	.+26     	; 0x4342 <__DATA_REGION_LENGTH__+0x342>
    4328:	8d ec       	ldi	r24, 0xCD	; 205
    432a:	0b c0       	rjmp	.+22     	; 0x4342 <__DATA_REGION_LENGTH__+0x342>
    432c:	8b ec       	ldi	r24, 0xCB	; 203
    432e:	09 c0       	rjmp	.+18     	; 0x4342 <__DATA_REGION_LENGTH__+0x342>
    4330:	8a ec       	ldi	r24, 0xCA	; 202
    4332:	07 c0       	rjmp	.+14     	; 0x4342 <__DATA_REGION_LENGTH__+0x342>
    4334:	89 ec       	ldi	r24, 0xC9	; 201
    4336:	05 c0       	rjmp	.+10     	; 0x4342 <__DATA_REGION_LENGTH__+0x342>
    4338:	88 ec       	ldi	r24, 0xC8	; 200
    433a:	03 c0       	rjmp	.+6      	; 0x4342 <__DATA_REGION_LENGTH__+0x342>
    433c:	87 ec       	ldi	r24, 0xC7	; 199
    433e:	01 c0       	rjmp	.+2      	; 0x4342 <__DATA_REGION_LENGTH__+0x342>
    4340:	80 e0       	ldi	r24, 0x00	; 0
    4342:	0f 90       	pop	r0
    4344:	df 91       	pop	r29
    4346:	cf 91       	pop	r28
    4348:	1f 91       	pop	r17
    434a:	0f 91       	pop	r16
    434c:	ff 90       	pop	r15
    434e:	ef 90       	pop	r14
    4350:	df 90       	pop	r13
    4352:	cf 90       	pop	r12
    4354:	08 95       	ret

00004356 <_Z18antennaIsConnectedv>:
    4356:	81 e0       	ldi	r24, 0x01	; 1
    4358:	08 95       	ret

0000435a <_Z13startEventNow19EventActionSource_t>:
	
}


void startEventNow(EventActionSource_t activationSource)
{
    435a:	cf 93       	push	r28
    435c:	c8 2f       	mov	r28, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    435e:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <_Z23clockConfigurationCheckv>

	cli();
    4362:	f8 94       	cli
	if(activationSource == POWER_UP)
    4364:	c1 11       	cpse	r28, r1
    4366:	0e c0       	rjmp	.+28     	; 0x4384 <_Z13startEventNow19EventActionSource_t+0x2a>
	{
		if(conf == CONFIGURATION_ERROR)
    4368:	82 30       	cpi	r24, 0x02	; 2
    436a:	31 f4       	brne	.+12     	; 0x4378 <_Z13startEventNow19EventActionSource_t+0x1e>
		{
			setupForFox(NULL, START_NOTHING);
    436c:	60 e0       	ldi	r22, 0x00	; 0
    436e:	80 e0       	ldi	r24, 0x00	; 0
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>
    4376:	3f c0       	rjmp	.+126    	; 0x43f6 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    4378:	63 e0       	ldi	r22, 0x03	; 3
    437a:	80 e0       	ldi	r24, 0x00	; 0
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>
    4382:	39 c0       	rjmp	.+114    	; 0x43f6 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
	}
	else if(activationSource == PROGRAMMATIC)
    4384:	c2 30       	cpi	r28, 0x02	; 2
    4386:	d1 f4       	brne	.+52     	; 0x43bc <_Z13startEventNow19EventActionSource_t+0x62>
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* Start immediately */
    4388:	82 30       	cpi	r24, 0x02	; 2
    438a:	31 f4       	brne	.+12     	; 0x4398 <_Z13startEventNow19EventActionSource_t+0x3e>
		{
			setupForFox(NULL, START_EVENT_NOW);
    438c:	61 e0       	ldi	r22, 0x01	; 1
    438e:	80 e0       	ldi	r24, 0x00	; 0
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>
    4396:	2f c0       	rjmp	.+94     	; 0x43f6 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else if((conf == WAITING_FOR_START) || (conf == SCHEDULED_EVENT_WILL_NEVER_RUN) || (conf == SCHEDULED_EVENT_DID_NOT_START)) /* Start immediately */
    4398:	81 30       	cpi	r24, 0x01	; 1
    439a:	21 f0       	breq	.+8      	; 0x43a4 <_Z13startEventNow19EventActionSource_t+0x4a>
    439c:	84 30       	cpi	r24, 0x04	; 4
    439e:	11 f0       	breq	.+4      	; 0x43a4 <_Z13startEventNow19EventActionSource_t+0x4a>
    43a0:	83 30       	cpi	r24, 0x03	; 3
    43a2:	31 f4       	brne	.+12     	; 0x43b0 <_Z13startEventNow19EventActionSource_t+0x56>
		{
			setupForFox(NULL, START_EVENT_NOW);
    43a4:	61 e0       	ldi	r22, 0x01	; 1
    43a6:	80 e0       	ldi	r24, 0x00	; 0
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>
    43ae:	23 c0       	rjmp	.+70     	; 0x43f6 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else                                                                                                                        /*if((conf == EVENT_IN_PROGRESS) */
		{
			setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                                  /* Let the RTC start the event */
    43b0:	63 e0       	ldi	r22, 0x03	; 3
    43b2:	80 e0       	ldi	r24, 0x00	; 0
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>
    43ba:	1d c0       	rjmp	.+58     	; 0x43f6 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
	}
	else                                                                                                                            /* PUSHBUTTON */
	{
		if(conf == CONFIGURATION_ERROR)                                                                                             /* No scheduled event */
    43bc:	82 30       	cpi	r24, 0x02	; 2
    43be:	31 f4       	brne	.+12     	; 0x43cc <_Z13startEventNow19EventActionSource_t+0x72>
		{
			setupForFox(NULL, START_EVENT_NOW);
    43c0:	61 e0       	ldi	r22, 0x01	; 1
    43c2:	80 e0       	ldi	r24, 0x00	; 0
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>
    43ca:	15 c0       	rjmp	.+42     	; 0x43f6 <_Z13startEventNow19EventActionSource_t+0x9c>
		}
		else                                                                                                                        /* if(buttonActivated) */
		{
			if(conf == WAITING_FOR_START)
    43cc:	81 30       	cpi	r24, 0x01	; 1
    43ce:	31 f4       	brne	.+12     	; 0x43dc <_Z13startEventNow19EventActionSource_t+0x82>
			{
				setupForFox(NULL, START_TRANSMISSIONS_NOW);                                                                         /* Start transmitting! */
    43d0:	62 e0       	ldi	r22, 0x02	; 2
    43d2:	80 e0       	ldi	r24, 0x00	; 0
    43d4:	90 e0       	ldi	r25, 0x00	; 0
    43d6:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>
    43da:	0d c0       	rjmp	.+26     	; 0x43f6 <_Z13startEventNow19EventActionSource_t+0x9c>
			}
			else if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    43dc:	84 30       	cpi	r24, 0x04	; 4
    43de:	31 f4       	brne	.+12     	; 0x43ec <_Z13startEventNow19EventActionSource_t+0x92>
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* rtc starts the event */
    43e0:	63 e0       	ldi	r22, 0x03	; 3
    43e2:	80 e0       	ldi	r24, 0x00	; 0
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>
    43ea:	05 c0       	rjmp	.+10     	; 0x43f6 <_Z13startEventNow19EventActionSource_t+0x9c>
			}
			else                                                                                                                    /* Event should be running now */
			{
				setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);                                                              /* start the running event */
    43ec:	63 e0       	ldi	r22, 0x03	; 3
    43ee:	80 e0       	ldi	r24, 0x00	; 0
    43f0:	90 e0       	ldi	r25, 0x00	; 0
    43f2:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>
			}
		}
	}

// 	g_LED_enunciating = false;
	sei();
    43f6:	78 94       	sei
}
    43f8:	cf 91       	pop	r28
    43fa:	08 95       	ret

000043fc <_Z12stopEventNow19EventActionSource_t>:

void stopEventNow(EventActionSource_t activationSource)
{
    43fc:	cf 93       	push	r28
    43fe:	df 93       	push	r29
    4400:	d8 2f       	mov	r29, r24
	ConfigurationState_t conf = clockConfigurationCheck();
    4402:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <_Z23clockConfigurationCheckv>
    4406:	c8 2f       	mov	r28, r24

	cli();
    4408:	f8 94       	cli

	if(activationSource == PROGRAMMATIC)
    440a:	d2 30       	cpi	r29, 0x02	; 2
    440c:	31 f4       	brne	.+12     	; 0x441a <_Z12stopEventNow19EventActionSource_t+0x1e>
	{
		setupForFox(NULL, START_NOTHING);
    440e:	60 e0       	ldi	r22, 0x00	; 0
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>
    4418:	14 c0       	rjmp	.+40     	; 0x4442 <_Z12stopEventNow19EventActionSource_t+0x46>
	}
	else    /* if(activationSource == PUSHBUTTON) */
	{
		if(conf == WAITING_FOR_START)
    441a:	81 30       	cpi	r24, 0x01	; 1
    441c:	29 f4       	brne	.+10     	; 0x4428 <_Z12stopEventNow19EventActionSource_t+0x2c>
		{
			setupForFox(NULL, START_TRANSMISSIONS_NOW);
    441e:	62 e0       	ldi	r22, 0x02	; 2
    4420:	80 e0       	ldi	r24, 0x00	; 0
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>
		}
		if(conf == SCHEDULED_EVENT_WILL_NEVER_RUN)
    4428:	c4 30       	cpi	r28, 0x04	; 4
    442a:	31 f4       	brne	.+12     	; 0x4438 <_Z12stopEventNow19EventActionSource_t+0x3c>
		{
			setupForFox(NULL, START_NOTHING);
    442c:	60 e0       	ldi	r22, 0x00	; 0
    442e:	80 e0       	ldi	r24, 0x00	; 0
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>
    4436:	05 c0       	rjmp	.+10     	; 0x4442 <_Z12stopEventNow19EventActionSource_t+0x46>
		}
		else    /*if(conf == CONFIGURATION_ERROR) */
		{
			setupForFox(NULL, START_NOTHING);
    4438:	60 e0       	ldi	r22, 0x00	; 0
    443a:	80 e0       	ldi	r24, 0x00	; 0
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>

// 	if(g_sync_pin_stable == STABLE_LOW)
// 	{
// 		digitalWrite(PIN_LED, OFF); /*  LED Off */
// 	}
}
    4442:	df 91       	pop	r29
    4444:	cf 91       	pop	r28
    4446:	08 95       	ret

00004448 <_Z18startEventUsingRTCv>:

void startEventUsingRTC(void)
{
    4448:	8f 92       	push	r8
    444a:	9f 92       	push	r9
    444c:	af 92       	push	r10
    444e:	bf 92       	push	r11
    4450:	ef 92       	push	r14
    4452:	ff 92       	push	r15
    4454:	0f 93       	push	r16
    4456:	1f 93       	push	r17
	g_current_epoch = ds3231_get_epoch(null);
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <ds3231_get_epoch>
    4460:	60 93 20 46 	sts	0x4620, r22	; 0x804620 <g_current_epoch>
    4464:	70 93 21 46 	sts	0x4621, r23	; 0x804621 <g_current_epoch+0x1>
    4468:	80 93 22 46 	sts	0x4622, r24	; 0x804622 <g_current_epoch+0x2>
    446c:	90 93 23 46 	sts	0x4623, r25	; 0x804623 <g_current_epoch+0x3>
	ConfigurationState_t state = clockConfigurationCheck();
    4470:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <_Z23clockConfigurationCheckv>

	if(state != CONFIGURATION_ERROR)
    4474:	82 30       	cpi	r24, 0x02	; 2
    4476:	09 f4       	brne	.+2      	; 0x447a <_Z18startEventUsingRTCv+0x32>
    4478:	54 c0       	rjmp	.+168    	; 0x4522 <_Z18startEventUsingRTCv+0xda>
	{
		setupForFox(NULL, START_EVENT_WITH_STARTFINISH_TIMES);
    447a:	63 e0       	ldi	r22, 0x03	; 3
    447c:	80 e0       	ldi	r24, 0x00	; 0
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	0e 94 9c 22 	call	0x4538	; 0x4538 <_Z11setupForFoxP5Fox_t13EventAction_t>
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    4484:	20 91 0f 46 	lds	r18, 0x460F	; 0x80460f <g_event_start_epoch>
    4488:	30 91 10 46 	lds	r19, 0x4610	; 0x804610 <g_event_start_epoch+0x1>
    448c:	40 91 11 46 	lds	r20, 0x4611	; 0x804611 <g_event_start_epoch+0x2>
    4490:	50 91 12 46 	lds	r21, 0x4612	; 0x804612 <g_event_start_epoch+0x3>
    4494:	60 91 20 46 	lds	r22, 0x4620	; 0x804620 <g_current_epoch>
    4498:	70 91 21 46 	lds	r23, 0x4621	; 0x804621 <g_current_epoch+0x1>
    449c:	80 91 22 46 	lds	r24, 0x4622	; 0x804622 <g_current_epoch+0x2>
    44a0:	90 91 23 46 	lds	r25, 0x4623	; 0x804623 <g_current_epoch+0x3>
    44a4:	0f 2e       	mov	r0, r31
    44a6:	f6 e9       	ldi	r31, 0x96	; 150
    44a8:	ef 2e       	mov	r14, r31
    44aa:	f2 e4       	ldi	r31, 0x42	; 66
    44ac:	ff 2e       	mov	r15, r31
    44ae:	f0 2d       	mov	r31, r0
    44b0:	03 ea       	ldi	r16, 0xA3	; 163
    44b2:	12 e4       	ldi	r17, 0x42	; 66
    44b4:	0e 94 41 25 	call	0x4a82	; 0x4a82 <_Z14reportTimeTillmmPKcS0_>

		if(g_event_start_epoch < g_current_epoch)
    44b8:	60 91 0f 46 	lds	r22, 0x460F	; 0x80460f <g_event_start_epoch>
    44bc:	70 91 10 46 	lds	r23, 0x4610	; 0x804610 <g_event_start_epoch+0x1>
    44c0:	80 91 11 46 	lds	r24, 0x4611	; 0x804611 <g_event_start_epoch+0x2>
    44c4:	90 91 12 46 	lds	r25, 0x4612	; 0x804612 <g_event_start_epoch+0x3>
    44c8:	80 90 20 46 	lds	r8, 0x4620	; 0x804620 <g_current_epoch>
    44cc:	90 90 21 46 	lds	r9, 0x4621	; 0x804621 <g_current_epoch+0x1>
    44d0:	a0 90 22 46 	lds	r10, 0x4622	; 0x804622 <g_current_epoch+0x2>
    44d4:	b0 90 23 46 	lds	r11, 0x4623	; 0x804623 <g_current_epoch+0x3>
    44d8:	68 15       	cp	r22, r8
    44da:	79 05       	cpc	r23, r9
    44dc:	8a 05       	cpc	r24, r10
    44de:	9b 05       	cpc	r25, r11
    44e0:	88 f4       	brcc	.+34     	; 0x4504 <_Z18startEventUsingRTCv+0xbc>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    44e2:	20 91 13 46 	lds	r18, 0x4613	; 0x804613 <g_event_finish_epoch>
    44e6:	30 91 14 46 	lds	r19, 0x4614	; 0x804614 <g_event_finish_epoch+0x1>
    44ea:	40 91 15 46 	lds	r20, 0x4615	; 0x804615 <g_event_finish_epoch+0x2>
    44ee:	50 91 16 46 	lds	r21, 0x4616	; 0x804616 <g_event_finish_epoch+0x3>
    44f2:	e1 2c       	mov	r14, r1
    44f4:	f1 2c       	mov	r15, r1
    44f6:	07 eb       	ldi	r16, 0xB7	; 183
    44f8:	12 e4       	ldi	r17, 0x42	; 66
    44fa:	c5 01       	movw	r24, r10
    44fc:	b4 01       	movw	r22, r8
    44fe:	0e 94 41 25 	call	0x4a82	; 0x4a82 <_Z14reportTimeTillmmPKcS0_>
    4502:	11 c0       	rjmp	.+34     	; 0x4526 <_Z18startEventUsingRTCv+0xde>
		}
		else
		{
			reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    4504:	20 91 13 46 	lds	r18, 0x4613	; 0x804613 <g_event_finish_epoch>
    4508:	30 91 14 46 	lds	r19, 0x4614	; 0x804614 <g_event_finish_epoch+0x1>
    450c:	40 91 15 46 	lds	r20, 0x4615	; 0x804615 <g_event_finish_epoch+0x2>
    4510:	50 91 16 46 	lds	r21, 0x4616	; 0x804616 <g_event_finish_epoch+0x3>
    4514:	e1 2c       	mov	r14, r1
    4516:	f1 2c       	mov	r15, r1
    4518:	0f ea       	ldi	r16, 0xAF	; 175
    451a:	12 e4       	ldi	r17, 0x42	; 66
    451c:	0e 94 41 25 	call	0x4a82	; 0x4a82 <_Z14reportTimeTillmmPKcS0_>
    4520:	02 c0       	rjmp	.+4      	; 0x4526 <_Z18startEventUsingRTCv+0xde>
		}
	}
	else
	{
		reportConfigErrors();
    4522:	0e 94 d6 26 	call	0x4dac	; 0x4dac <_Z18reportConfigErrorsv>
	}
}
    4526:	1f 91       	pop	r17
    4528:	0f 91       	pop	r16
    452a:	ff 90       	pop	r15
    452c:	ef 90       	pop	r14
    452e:	bf 90       	pop	r11
    4530:	af 90       	pop	r10
    4532:	9f 90       	pop	r9
    4534:	8f 90       	pop	r8
    4536:	08 95       	ret

00004538 <_Z11setupForFoxP5Fox_t13EventAction_t>:



void setupForFox(Fox_t* fox, EventAction_t action)
{
    4538:	1f 93       	push	r17
    453a:	cf 93       	push	r28
    453c:	df 93       	push	r29
    453e:	1f 92       	push	r1
    4540:	cd b7       	in	r28, 0x3d	; 61
    4542:	de b7       	in	r29, 0x3e	; 62
    4544:	16 2f       	mov	r17, r22
	bool patternNotSet = true;
	
	if(fox)
    4546:	00 97       	sbiw	r24, 0x00	; 0
    4548:	31 f0       	breq	.+12     	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
	{
		if(*fox != INVALID_FOX)
    454a:	fc 01       	movw	r30, r24
    454c:	80 81       	ld	r24, Z
    454e:	82 31       	cpi	r24, 0x12	; 18
    4550:	11 f0       	breq	.+4      	; 0x4556 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
		{
			g_fox = *fox;
    4552:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
		}
	}

 	g_current_epoch = ds3231_get_epoch(null);
    4556:	80 e0       	ldi	r24, 0x00	; 0
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <ds3231_get_epoch>
    455e:	60 93 20 46 	sts	0x4620, r22	; 0x804620 <g_current_epoch>
    4562:	70 93 21 46 	sts	0x4621, r23	; 0x804621 <g_current_epoch+0x1>
    4566:	80 93 22 46 	sts	0x4622, r24	; 0x804622 <g_current_epoch+0x2>
    456a:	90 93 23 46 	sts	0x4623, r25	; 0x804623 <g_current_epoch+0x3>

	cli();
    456e:	f8 94       	cli
	
	g_event_commenced = false;					/* get things running immediately */
    4570:	10 92 fb 45 	sts	0x45FB, r1	; 0x8045fb <g_event_commenced>
	g_event_enabled = false;					/* get things running immediately */
    4574:	10 92 fa 45 	sts	0x45FA, r1	; 0x8045fa <g_event_enabled>

	switch(g_fox)
    4578:	e0 91 1b 40 	lds	r30, 0x401B	; 0x80401b <g_fox>
    457c:	8e 2f       	mov	r24, r30
    457e:	90 e0       	ldi	r25, 0x00	; 0
    4580:	fc 01       	movw	r30, r24
    4582:	31 97       	sbiw	r30, 0x01	; 1
    4584:	e1 31       	cpi	r30, 0x11	; 17
    4586:	f1 05       	cpc	r31, r1
    4588:	08 f0       	brcs	.+2      	; 0x458c <_Z11setupForFoxP5Fox_t13EventAction_t+0x54>
    458a:	1e c1       	rjmp	.+572    	; 0x47c8 <_Z11setupForFoxP5Fox_t13EventAction_t+0x290>
    458c:	ec 58       	subi	r30, 0x8C	; 140
    458e:	ff 4f       	sbci	r31, 0xFF	; 255
    4590:	0c 94 bf 48 	jmp	0x917e	; 0x917e <__tablejump2__>
	{
		case FOX_1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOE");
    4594:	e4 ec       	ldi	r30, 0xC4	; 196
    4596:	f5 e4       	ldi	r31, 0x45	; 69
    4598:	8d e4       	ldi	r24, 0x4D	; 77
    459a:	9f e4       	ldi	r25, 0x4F	; 79
    459c:	80 83       	st	Z, r24
    459e:	91 83       	std	Z+1, r25	; 0x01
    45a0:	85 e4       	ldi	r24, 0x45	; 69
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	82 83       	std	Z+2, r24	; 0x02
    45a6:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    45a8:	80 e0       	ldi	r24, 0x00	; 0
    45aa:	01 c0       	rjmp	.+2      	; 0x45ae <_Z11setupForFoxP5Fox_t13EventAction_t+0x76>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    45ac:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_2:
		{
			if(patternNotSet)
    45ae:	88 23       	and	r24, r24
    45b0:	69 f0       	breq	.+26     	; 0x45cc <_Z11setupForFoxP5Fox_t13EventAction_t+0x94>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOI");
    45b2:	e4 ec       	ldi	r30, 0xC4	; 196
    45b4:	f5 e4       	ldi	r31, 0x45	; 69
    45b6:	8d e4       	ldi	r24, 0x4D	; 77
    45b8:	9f e4       	ldi	r25, 0x4F	; 79
    45ba:	80 83       	st	Z, r24
    45bc:	91 83       	std	Z+1, r25	; 0x01
    45be:	89 e4       	ldi	r24, 0x49	; 73
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	82 83       	std	Z+2, r24	; 0x02
    45c4:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    45c6:	80 e0       	ldi	r24, 0x00	; 0
    45c8:	01 c0       	rjmp	.+2      	; 0x45cc <_Z11setupForFoxP5Fox_t13EventAction_t+0x94>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    45ca:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_3:
		{
			if(patternNotSet)
    45cc:	88 23       	and	r24, r24
    45ce:	69 f0       	breq	.+26     	; 0x45ea <_Z11setupForFoxP5Fox_t13EventAction_t+0xb2>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOS");
    45d0:	e4 ec       	ldi	r30, 0xC4	; 196
    45d2:	f5 e4       	ldi	r31, 0x45	; 69
    45d4:	8d e4       	ldi	r24, 0x4D	; 77
    45d6:	9f e4       	ldi	r25, 0x4F	; 79
    45d8:	80 83       	st	Z, r24
    45da:	91 83       	std	Z+1, r25	; 0x01
    45dc:	83 e5       	ldi	r24, 0x53	; 83
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	82 83       	std	Z+2, r24	; 0x02
    45e2:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    45e4:	80 e0       	ldi	r24, 0x00	; 0
    45e6:	01 c0       	rjmp	.+2      	; 0x45ea <_Z11setupForFoxP5Fox_t13EventAction_t+0xb2>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    45e8:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_4:
		{
			if(patternNotSet)
    45ea:	88 23       	and	r24, r24
    45ec:	69 f0       	breq	.+26     	; 0x4608 <_Z11setupForFoxP5Fox_t13EventAction_t+0xd0>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOH");
    45ee:	e4 ec       	ldi	r30, 0xC4	; 196
    45f0:	f5 e4       	ldi	r31, 0x45	; 69
    45f2:	8d e4       	ldi	r24, 0x4D	; 77
    45f4:	9f e4       	ldi	r25, 0x4F	; 79
    45f6:	80 83       	st	Z, r24
    45f8:	91 83       	std	Z+1, r25	; 0x01
    45fa:	88 e4       	ldi	r24, 0x48	; 72
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	82 83       	std	Z+2, r24	; 0x02
    4600:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    4602:	80 e0       	ldi	r24, 0x00	; 0
    4604:	01 c0       	rjmp	.+2      	; 0x4608 <_Z11setupForFoxP5Fox_t13EventAction_t+0xd0>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4606:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		case FOX_5:
		{
			/* Set the Morse code pattern and speed */
			if(patternNotSet)
    4608:	88 23       	and	r24, r24
    460a:	51 f0       	breq	.+20     	; 0x4620 <_Z11setupForFoxP5Fox_t13EventAction_t+0xe8>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MO5");
    460c:	e4 ec       	ldi	r30, 0xC4	; 196
    460e:	f5 e4       	ldi	r31, 0x45	; 69
    4610:	8d e4       	ldi	r24, 0x4D	; 77
    4612:	9f e4       	ldi	r25, 0x4F	; 79
    4614:	80 83       	st	Z, r24
    4616:	91 83       	std	Z+1, r25	; 0x01
    4618:	85 e3       	ldi	r24, 0x35	; 53
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	82 83       	std	Z+2, r24	; 0x02
    461e:	93 83       	std	Z+3, r25	; 0x03
			}
			
			bool repeat = true;
    4620:	81 e0       	ldi	r24, 0x01	; 1
    4622:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    4624:	40 e0       	ldi	r20, 0x00	; 0
    4626:	50 e0       	ldi	r21, 0x00	; 0
    4628:	be 01       	movw	r22, r28
    462a:	6f 5f       	subi	r22, 0xFF	; 255
    462c:	7f 4f       	sbci	r23, 0xFF	; 255
    462e:	84 ec       	ldi	r24, 0xC4	; 196
    4630:	95 e4       	ldi	r25, 0x45	; 69
    4632:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_Z9makeMorsePcPbS0_>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    4636:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    463a:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_Z13throttleValueh>
    463e:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    4642:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_on_air_seconds = 60;						/* on period is very long */
    4646:	8c e3       	ldi	r24, 0x3C	; 60
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    464e:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 240;                    /* off period is very short */
    4652:	80 ef       	ldi	r24, 0xF0	; 240
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    465a:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    465e:	d4 c0       	rjmp	.+424    	; 0x4808 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2d0>

		case SPRINT_S1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "ME");
    4660:	e4 ec       	ldi	r30, 0xC4	; 196
    4662:	f5 e4       	ldi	r31, 0x45	; 69
    4664:	8d e4       	ldi	r24, 0x4D	; 77
    4666:	95 e4       	ldi	r25, 0x45	; 69
    4668:	80 83       	st	Z, r24
    466a:	91 83       	std	Z+1, r25	; 0x01
    466c:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    466e:	80 e0       	ldi	r24, 0x00	; 0
    4670:	01 c0       	rjmp	.+2      	; 0x4674 <_Z11setupForFoxP5Fox_t13EventAction_t+0x13c>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4672:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_S2:
		{
			if(patternNotSet)
    4674:	88 23       	and	r24, r24
    4676:	51 f0       	breq	.+20     	; 0x468c <_Z11setupForFoxP5Fox_t13EventAction_t+0x154>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MI");
    4678:	e4 ec       	ldi	r30, 0xC4	; 196
    467a:	f5 e4       	ldi	r31, 0x45	; 69
    467c:	8d e4       	ldi	r24, 0x4D	; 77
    467e:	99 e4       	ldi	r25, 0x49	; 73
    4680:	80 83       	st	Z, r24
    4682:	91 83       	std	Z+1, r25	; 0x01
    4684:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4686:	80 e0       	ldi	r24, 0x00	; 0
    4688:	01 c0       	rjmp	.+2      	; 0x468c <_Z11setupForFoxP5Fox_t13EventAction_t+0x154>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    468a:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_S3:
		{
			if(patternNotSet)
    468c:	88 23       	and	r24, r24
    468e:	51 f0       	breq	.+20     	; 0x46a4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x16c>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MS");
    4690:	e4 ec       	ldi	r30, 0xC4	; 196
    4692:	f5 e4       	ldi	r31, 0x45	; 69
    4694:	8d e4       	ldi	r24, 0x4D	; 77
    4696:	93 e5       	ldi	r25, 0x53	; 83
    4698:	80 83       	st	Z, r24
    469a:	91 83       	std	Z+1, r25	; 0x01
    469c:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	01 c0       	rjmp	.+2      	; 0x46a4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x16c>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    46a2:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_S4:
		{
			if(patternNotSet)
    46a4:	88 23       	and	r24, r24
    46a6:	51 f0       	breq	.+20     	; 0x46bc <_Z11setupForFoxP5Fox_t13EventAction_t+0x184>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MH");
    46a8:	e4 ec       	ldi	r30, 0xC4	; 196
    46aa:	f5 e4       	ldi	r31, 0x45	; 69
    46ac:	8d e4       	ldi	r24, 0x4D	; 77
    46ae:	98 e4       	ldi	r25, 0x48	; 72
    46b0:	80 83       	st	Z, r24
    46b2:	91 83       	std	Z+1, r25	; 0x01
    46b4:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    46b6:	80 e0       	ldi	r24, 0x00	; 0
    46b8:	01 c0       	rjmp	.+2      	; 0x46bc <_Z11setupForFoxP5Fox_t13EventAction_t+0x184>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    46ba:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		case SPRINT_S5:
		{
			{
				if(patternNotSet)
    46bc:	88 23       	and	r24, r24
    46be:	39 f0       	breq	.+14     	; 0x46ce <_Z11setupForFoxP5Fox_t13EventAction_t+0x196>
				{
					sprintf(g_messages_text[PATTERN_TEXT], "M5");
    46c0:	e4 ec       	ldi	r30, 0xC4	; 196
    46c2:	f5 e4       	ldi	r31, 0x45	; 69
    46c4:	8d e4       	ldi	r24, 0x4D	; 77
    46c6:	95 e3       	ldi	r25, 0x35	; 53
    46c8:	80 83       	st	Z, r24
    46ca:	91 83       	std	Z+1, r25	; 0x01
    46cc:	12 82       	std	Z+2, r1	; 0x02
				}
			}
			
			bool repeat = true;
    46ce:	81 e0       	ldi	r24, 0x01	; 1
    46d0:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    46d2:	40 e0       	ldi	r20, 0x00	; 0
    46d4:	50 e0       	ldi	r21, 0x00	; 0
    46d6:	be 01       	movw	r22, r28
    46d8:	6f 5f       	subi	r22, 0xFF	; 255
    46da:	7f 4f       	sbci	r23, 0xFF	; 255
    46dc:	84 ec       	ldi	r24, 0xC4	; 196
    46de:	95 e4       	ldi	r25, 0x45	; 69
    46e0:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_Z9makeMorsePcPbS0_>
			g_pattern_codespeed = 8;
    46e4:	88 e0       	ldi	r24, 0x08	; 8
    46e6:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    46ea:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    46ee:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_Z13throttleValueh>
    46f2:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    46f6:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_on_air_seconds = 12;						/* on period is very long */
    46fa:	8c e0       	ldi	r24, 0x0C	; 12
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    4702:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 48;						/* off period is very short */
    4706:	80 e3       	ldi	r24, 0x30	; 48
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    470e:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    4712:	7a c0       	rjmp	.+244    	; 0x4808 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2d0>

		case SPRINT_F1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OE");
    4714:	e4 ec       	ldi	r30, 0xC4	; 196
    4716:	f5 e4       	ldi	r31, 0x45	; 69
    4718:	8f e4       	ldi	r24, 0x4F	; 79
    471a:	95 e4       	ldi	r25, 0x45	; 69
    471c:	80 83       	st	Z, r24
    471e:	91 83       	std	Z+1, r25	; 0x01
    4720:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4722:	80 e0       	ldi	r24, 0x00	; 0
    4724:	01 c0       	rjmp	.+2      	; 0x4728 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1f0>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4726:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F2:
		{
			if(patternNotSet)
    4728:	88 23       	and	r24, r24
    472a:	51 f0       	breq	.+20     	; 0x4740 <_Z11setupForFoxP5Fox_t13EventAction_t+0x208>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OI");
    472c:	e4 ec       	ldi	r30, 0xC4	; 196
    472e:	f5 e4       	ldi	r31, 0x45	; 69
    4730:	8f e4       	ldi	r24, 0x4F	; 79
    4732:	99 e4       	ldi	r25, 0x49	; 73
    4734:	80 83       	st	Z, r24
    4736:	91 83       	std	Z+1, r25	; 0x01
    4738:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    473a:	80 e0       	ldi	r24, 0x00	; 0
    473c:	01 c0       	rjmp	.+2      	; 0x4740 <_Z11setupForFoxP5Fox_t13EventAction_t+0x208>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    473e:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F3:
		{
			if(patternNotSet)
    4740:	88 23       	and	r24, r24
    4742:	51 f0       	breq	.+20     	; 0x4758 <_Z11setupForFoxP5Fox_t13EventAction_t+0x220>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OS");
    4744:	e4 ec       	ldi	r30, 0xC4	; 196
    4746:	f5 e4       	ldi	r31, 0x45	; 69
    4748:	8f e4       	ldi	r24, 0x4F	; 79
    474a:	93 e5       	ldi	r25, 0x53	; 83
    474c:	80 83       	st	Z, r24
    474e:	91 83       	std	Z+1, r25	; 0x01
    4750:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    4752:	80 e0       	ldi	r24, 0x00	; 0
    4754:	01 c0       	rjmp	.+2      	; 0x4758 <_Z11setupForFoxP5Fox_t13EventAction_t+0x220>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    4756:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case SPRINT_F4:
		{
			if(patternNotSet)
    4758:	88 23       	and	r24, r24
    475a:	51 f0       	breq	.+20     	; 0x4770 <_Z11setupForFoxP5Fox_t13EventAction_t+0x238>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "OH");
    475c:	e4 ec       	ldi	r30, 0xC4	; 196
    475e:	f5 e4       	ldi	r31, 0x45	; 69
    4760:	8f e4       	ldi	r24, 0x4F	; 79
    4762:	98 e4       	ldi	r25, 0x48	; 72
    4764:	80 83       	st	Z, r24
    4766:	91 83       	std	Z+1, r25	; 0x01
    4768:	12 82       	std	Z+2, r1	; 0x02
				patternNotSet = false;
    476a:	80 e0       	ldi	r24, 0x00	; 0
    476c:	01 c0       	rjmp	.+2      	; 0x4770 <_Z11setupForFoxP5Fox_t13EventAction_t+0x238>



void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    476e:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		case SPRINT_F5:
		{
			{
				if(patternNotSet)
    4770:	88 23       	and	r24, r24
    4772:	39 f0       	breq	.+14     	; 0x4782 <_Z11setupForFoxP5Fox_t13EventAction_t+0x24a>
				{
					sprintf(g_messages_text[PATTERN_TEXT], "O5");
    4774:	e4 ec       	ldi	r30, 0xC4	; 196
    4776:	f5 e4       	ldi	r31, 0x45	; 69
    4778:	8f e4       	ldi	r24, 0x4F	; 79
    477a:	95 e3       	ldi	r25, 0x35	; 53
    477c:	80 83       	st	Z, r24
    477e:	91 83       	std	Z+1, r25	; 0x01
    4780:	12 82       	std	Z+2, r1	; 0x02
				}
			}
			
			bool repeat = true;
    4782:	81 e0       	ldi	r24, 0x01	; 1
    4784:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    4786:	40 e0       	ldi	r20, 0x00	; 0
    4788:	50 e0       	ldi	r21, 0x00	; 0
    478a:	be 01       	movw	r22, r28
    478c:	6f 5f       	subi	r22, 0xFF	; 255
    478e:	7f 4f       	sbci	r23, 0xFF	; 255
    4790:	84 ec       	ldi	r24, 0xC4	; 196
    4792:	95 e4       	ldi	r25, 0x45	; 69
    4794:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_Z9makeMorsePcPbS0_>
			g_pattern_codespeed = 15;
    4798:	8f e0       	ldi	r24, 0x0F	; 15
    479a:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    479e:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    47a2:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_Z13throttleValueh>
    47a6:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    47aa:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_on_air_seconds = 12;						/* on period is very long */
    47ae:	8c e0       	ldi	r24, 0x0C	; 12
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    47b6:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 48;						/* off period is very short */
    47ba:	80 e3       	ldi	r24, 0x30	; 48
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    47c2:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
    47c6:	20 c0       	rjmp	.+64     	; 0x4808 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2d0>

		/* case BEACON:
		 * case SPECTATOR: */
		default:
		{
			bool repeat = true;
    47c8:	81 e0       	ldi	r24, 0x01	; 1
    47ca:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    47cc:	40 e0       	ldi	r20, 0x00	; 0
    47ce:	50 e0       	ldi	r21, 0x00	; 0
    47d0:	be 01       	movw	r22, r28
    47d2:	6f 5f       	subi	r22, 0xFF	; 255
    47d4:	7f 4f       	sbci	r23, 0xFF	; 255
    47d6:	84 ec       	ldi	r24, 0xC4	; 196
    47d8:	95 e4       	ldi	r25, 0x45	; 69
    47da:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_Z9makeMorsePcPbS0_>
			g_pattern_codespeed = 8;
    47de:	88 e0       	ldi	r24, 0x08	; 8
    47e0:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    47e4:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    47e8:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_Z13throttleValueh>
    47ec:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    47f0:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_on_air_seconds = 60;						/* on period is very long */
    47f4:	8c e3       	ldi	r24, 0x3C	; 60
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    47fc:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 0;						/* off period is very short */
    4800:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <g_off_air_seconds>
    4804:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <g_off_air_seconds+0x1>
		}
		break;
	}

	if(action == START_NOTHING)
    4808:	11 11       	cpse	r17, r1
    480a:	0a c0       	rjmp	.+20     	; 0x4820 <_Z11setupForFoxP5Fox_t13EventAction_t+0x2e8>
	{
		g_event_commenced = false;                   /* get things running immediately */
    480c:	10 92 fb 45 	sts	0x45FB, r1	; 0x8045fb <g_event_commenced>
		g_event_enabled = false;                     /* get things running immediately */
    4810:	10 92 fa 45 	sts	0x45FA, r1	; 0x8045fa <g_event_enabled>

 		g_use_rtc_for_startstop = false;
    4814:	10 92 24 46 	sts	0x4624, r1	; 0x804624 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = true;
    4818:	81 e0       	ldi	r24, 0x01	; 1
    481a:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
    481e:	48 c0       	rjmp	.+144    	; 0x48b0 <_Z11setupForFoxP5Fox_t13EventAction_t+0x378>
	}
	else if(action == START_EVENT_NOW)
    4820:	11 30       	cpi	r17, 0x01	; 1
    4822:	51 f4       	brne	.+20     	; 0x4838 <_Z11setupForFoxP5Fox_t13EventAction_t+0x300>
	{
// 		g_seconds_since_sync = 0;                   /* Total elapsed time since synchronization */
 		g_use_rtc_for_startstop = false;
    4824:	10 92 24 46 	sts	0x4624, r1	; 0x804624 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = false;
    4828:	10 92 1c 40 	sts	0x401C, r1	; 0x80401c <g_transmissions_disabled>
		g_event_commenced = true;					/* get things running immediately */
    482c:	81 e0       	ldi	r24, 0x01	; 1
    482e:	80 93 fb 45 	sts	0x45FB, r24	; 0x8045fb <g_event_commenced>
		g_event_enabled = true;						/* get things running immediately */
    4832:	80 93 fa 45 	sts	0x45FA, r24	; 0x8045fa <g_event_enabled>
    4836:	3c c0       	rjmp	.+120    	; 0x48b0 <_Z11setupForFoxP5Fox_t13EventAction_t+0x378>
	}
	else if(action == START_TRANSMISSIONS_NOW)                                  /* Immediately start transmitting, regardless RTC or time slot */
    4838:	12 30       	cpi	r17, 0x02	; 2
    483a:	a9 f5       	brne	.+106    	; 0x48a6 <_Z11setupForFoxP5Fox_t13EventAction_t+0x36e>
	{
		bool repeat = true;
    483c:	11 e0       	ldi	r17, 0x01	; 1
    483e:	19 83       	std	Y+1, r17	; 0x01
		makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    4840:	40 e0       	ldi	r20, 0x00	; 0
    4842:	50 e0       	ldi	r21, 0x00	; 0
    4844:	be 01       	movw	r22, r28
    4846:	6f 5f       	subi	r22, 0xFF	; 255
    4848:	7f 4f       	sbci	r23, 0xFF	; 255
    484a:	84 ec       	ldi	r24, 0xC4	; 196
    484c:	95 e4       	ldi	r25, 0x45	; 69
    484e:	0e 94 50 38 	call	0x70a0	; 0x70a0 <_Z9makeMorsePcPbS0_>
		g_code_throttle = throttleValue(g_pattern_codespeed);
    4852:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    4856:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_Z13throttleValueh>
    485a:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    485e:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

// 		g_event_start_time = 1;                     /* have it start a long time ago */
// 		g_event_finish_time = MAX_TIME;             /* run for a long long time */
		g_on_the_air = g_on_air_seconds;			/* start out transmitting */
    4862:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    4866:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    486a:	09 2e       	mov	r0, r25
    486c:	00 0c       	add	r0, r0
    486e:	aa 0b       	sbc	r26, r26
    4870:	bb 0b       	sbc	r27, r27
    4872:	80 93 ba 45 	sts	0x45BA, r24	; 0x8045ba <_ZL12g_on_the_air>
    4876:	90 93 bb 45 	sts	0x45BB, r25	; 0x8045bb <_ZL12g_on_the_air+0x1>
    487a:	a0 93 bc 45 	sts	0x45BC, r26	; 0x8045bc <_ZL12g_on_the_air+0x2>
    487e:	b0 93 bd 45 	sts	0x45BD, r27	; 0x8045bd <_ZL12g_on_the_air+0x3>
		g_sendID_seconds_countdown = 60;			/* wait a long time to send the ID */
    4882:	8c e3       	ldi	r24, 0x3C	; 60
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	80 93 be 45 	sts	0x45BE, r24	; 0x8045be <_ZL26g_sendID_seconds_countdown>
    488a:	90 93 bf 45 	sts	0x45BF, r25	; 0x8045bf <_ZL26g_sendID_seconds_countdown+0x1>
		g_event_commenced = true;                   /* get things running immediately */
    488e:	10 93 fb 45 	sts	0x45FB, r17	; 0x8045fb <g_event_commenced>
		g_event_enabled = true;                     /* get things running immediately */
    4892:	10 93 fa 45 	sts	0x45FA, r17	; 0x8045fa <g_event_enabled>
		g_last_status_code = STATUS_CODE_EVENT_STARTED_NOW_TRANSMITTING;
    4896:	8d ef       	ldi	r24, 0xFD	; 253
    4898:	80 93 b6 45 	sts	0x45B6, r24	; 0x8045b6 <_ZL18g_last_status_code>
		
// 		g_seconds_since_sync = (g_fox_counter - 1) * g_on_air_interval_seconds; /* Total elapsed time since start of event */
 		g_use_rtc_for_startstop = false;
    489c:	10 92 24 46 	sts	0x4624, r1	; 0x804624 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = false;
    48a0:	10 92 1c 40 	sts	0x401C, r1	; 0x80401c <g_transmissions_disabled>
    48a4:	05 c0       	rjmp	.+10     	; 0x48b0 <_Z11setupForFoxP5Fox_t13EventAction_t+0x378>
 		}
 		else                                                                /* event starts in the future */
 		{
 		}
 
 		g_use_rtc_for_startstop = true;
    48a6:	81 e0       	ldi	r24, 0x01	; 1
    48a8:	80 93 24 46 	sts	0x4624, r24	; 0x804624 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = true;
    48ac:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
// 	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
// 	g_sendAMmodulation = false;
// 	g_LED_enunciating = false;
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */

	sei();
    48b0:	78 94       	sei
}
    48b2:	0f 90       	pop	r0
    48b4:	df 91       	pop	r29
    48b6:	cf 91       	pop	r28
    48b8:	1f 91       	pop	r17
    48ba:	08 95       	ret

000048bc <_Z18validateTimeStringPcPma>:

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
    48bc:	4f 92       	push	r4
    48be:	5f 92       	push	r5
    48c0:	6f 92       	push	r6
    48c2:	7f 92       	push	r7
    48c4:	af 92       	push	r10
    48c6:	bf 92       	push	r11
    48c8:	cf 92       	push	r12
    48ca:	df 92       	push	r13
    48cc:	ef 92       	push	r14
    48ce:	ff 92       	push	r15
    48d0:	0f 93       	push	r16
    48d2:	1f 93       	push	r17
    48d4:	cf 93       	push	r28
    48d6:	df 93       	push	r29
    48d8:	8c 01       	movw	r16, r24
    48da:	a4 2e       	mov	r10, r20
	time_t valid = 0;
	int len = strlen(str);
    48dc:	fc 01       	movw	r30, r24
    48de:	01 90       	ld	r0, Z+
    48e0:	00 20       	and	r0, r0
    48e2:	e9 f7       	brne	.-6      	; 0x48de <_Z18validateTimeStringPcPma+0x22>
    48e4:	31 97       	sbiw	r30, 0x01	; 1
    48e6:	ef 01       	movw	r28, r30
    48e8:	c8 1b       	sub	r28, r24
    48ea:	d9 0b       	sbc	r29, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
    48ec:	26 e4       	ldi	r18, 0x46	; 70
    48ee:	6f 30       	cpi	r22, 0x0F	; 15
    48f0:	72 07       	cpc	r23, r18
    48f2:	e1 f4       	brne	.+56     	; 0x492c <_Z18validateTimeStringPcPma+0x70>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    48f4:	c0 90 20 46 	lds	r12, 0x4620	; 0x804620 <g_current_epoch>
    48f8:	d0 90 21 46 	lds	r13, 0x4621	; 0x804621 <g_current_epoch+0x1>
    48fc:	e0 90 22 46 	lds	r14, 0x4622	; 0x804622 <g_current_epoch+0x2>
    4900:	f0 90 23 46 	lds	r15, 0x4623	; 0x804623 <g_current_epoch+0x3>
    4904:	c1 14       	cp	r12, r1
    4906:	86 e6       	ldi	r24, 0x66	; 102
    4908:	d8 06       	cpc	r13, r24
    490a:	8e ee       	ldi	r24, 0xEE	; 238
    490c:	e8 06       	cpc	r14, r24
    490e:	8f e5       	ldi	r24, 0x5F	; 95
    4910:	f8 06       	cpc	r15, r24
    4912:	50 f5       	brcc	.+84     	; 0x4968 <_Z18validateTimeStringPcPma+0xac>
		validationType = 1;
    4914:	bb 24       	eor	r11, r11
    4916:	b3 94       	inc	r11
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    4918:	0f 2e       	mov	r0, r31
    491a:	c1 2c       	mov	r12, r1
    491c:	f6 e6       	ldi	r31, 0x66	; 102
    491e:	df 2e       	mov	r13, r31
    4920:	fe ee       	ldi	r31, 0xEE	; 238
    4922:	ef 2e       	mov	r14, r31
    4924:	ff e5       	ldi	r31, 0x5F	; 95
    4926:	ff 2e       	mov	r15, r31
    4928:	f0 2d       	mov	r31, r0
    492a:	2f c0       	rjmp	.+94     	; 0x498a <_Z18validateTimeStringPcPma+0xce>
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
    492c:	63 51       	subi	r22, 0x13	; 19
    492e:	76 44       	sbci	r23, 0x46	; 70
    4930:	f1 f4       	brne	.+60     	; 0x496e <_Z18validateTimeStringPcPma+0xb2>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    4932:	c0 90 0f 46 	lds	r12, 0x460F	; 0x80460f <g_event_start_epoch>
    4936:	d0 90 10 46 	lds	r13, 0x4610	; 0x804610 <g_event_start_epoch+0x1>
    493a:	e0 90 11 46 	lds	r14, 0x4611	; 0x804611 <g_event_start_epoch+0x2>
    493e:	f0 90 12 46 	lds	r15, 0x4612	; 0x804612 <g_event_start_epoch+0x3>
    4942:	80 91 20 46 	lds	r24, 0x4620	; 0x804620 <g_current_epoch>
    4946:	90 91 21 46 	lds	r25, 0x4621	; 0x804621 <g_current_epoch+0x1>
    494a:	a0 91 22 46 	lds	r26, 0x4622	; 0x804622 <g_current_epoch+0x2>
    494e:	b0 91 23 46 	lds	r27, 0x4623	; 0x804623 <g_current_epoch+0x3>
    4952:	c8 16       	cp	r12, r24
    4954:	d9 06       	cpc	r13, r25
    4956:	ea 06       	cpc	r14, r26
    4958:	fb 06       	cpc	r15, r27
    495a:	a0 f4       	brcc	.+40     	; 0x4984 <_Z18validateTimeStringPcPma+0xc8>
    495c:	6c 01       	movw	r12, r24
    495e:	7d 01       	movw	r14, r26
		validationType = 2;
    4960:	68 94       	set
    4962:	bb 24       	eor	r11, r11
    4964:	b1 f8       	bld	r11, 1
    4966:	11 c0       	rjmp	.+34     	; 0x498a <_Z18validateTimeStringPcPma+0xce>
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
    4968:	bb 24       	eor	r11, r11
    496a:	b3 94       	inc	r11
    496c:	0e c0       	rjmp	.+28     	; 0x498a <_Z18validateTimeStringPcPma+0xce>
time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    496e:	b1 2c       	mov	r11, r1

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    4970:	0f 2e       	mov	r0, r31
    4972:	c1 2c       	mov	r12, r1
    4974:	f6 e6       	ldi	r31, 0x66	; 102
    4976:	df 2e       	mov	r13, r31
    4978:	fe ee       	ldi	r31, 0xEE	; 238
    497a:	ef 2e       	mov	r14, r31
    497c:	ff e5       	ldi	r31, 0x5F	; 95
    497e:	ff 2e       	mov	r15, r31
    4980:	f0 2d       	mov	r31, r0
    4982:	03 c0       	rjmp	.+6      	; 0x498a <_Z18validateTimeStringPcPma+0xce>
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
    4984:	68 94       	set
    4986:	bb 24       	eor	r11, r11
    4988:	b1 f8       	bld	r11, 1
	}
	
	if(len == 10)
    498a:	ca 30       	cpi	r28, 0x0A	; 10
    498c:	d1 05       	cpc	r29, r1
    498e:	39 f4       	brne	.+14     	; 0x499e <_Z18validateTimeStringPcPma+0xe2>
	{
		str[10] = '0';
    4990:	80 e3       	ldi	r24, 0x30	; 48
    4992:	f8 01       	movw	r30, r16
    4994:	82 87       	std	Z+10, r24	; 0x0a
		str[11] = '0';
    4996:	83 87       	std	Z+11, r24	; 0x0b
		str[12] = '\0';
    4998:	14 86       	std	Z+12, r1	; 0x0c
		len = 12;
    499a:	cc e0       	ldi	r28, 0x0C	; 12
    499c:	d0 e0       	ldi	r29, 0x00	; 0
	}

	if((len == 12) && (only_digits(str)))
    499e:	cc 30       	cpi	r28, 0x0C	; 12
    49a0:	d1 05       	cpc	r29, r1
    49a2:	21 f4       	brne	.+8      	; 0x49ac <_Z18validateTimeStringPcPma+0xf0>
    49a4:	c8 01       	movw	r24, r16
    49a6:	0e 94 f9 45 	call	0x8bf2	; 0x8bf2 <_Z11only_digitsPc>
    49aa:	01 c0       	rjmp	.+2      	; 0x49ae <_Z18validateTimeStringPcPma+0xf2>
    49ac:	80 e0       	ldi	r24, 0x00	; 0
    49ae:	88 23       	and	r24, r24
    49b0:	09 f4       	brne	.+2      	; 0x49b4 <_Z18validateTimeStringPcPma+0xf8>
    49b2:	4b c0       	rjmp	.+150    	; 0x4a4a <_Z18validateTimeStringPcPma+0x18e>
	{
		time_t ep = RTC_String2Epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    49b4:	b8 01       	movw	r22, r16
    49b6:	80 e0       	ldi	r24, 0x00	; 0
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	0e 94 1f 2c 	call	0x583e	; 0x583e <RTC_String2Epoch>
    49be:	2b 01       	movw	r4, r22
    49c0:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    49c2:	aa 2d       	mov	r26, r10
    49c4:	aa 0c       	add	r10, r10
    49c6:	bb 0b       	sbc	r27, r27
    49c8:	20 e1       	ldi	r18, 0x10	; 16
    49ca:	3e e0       	ldi	r19, 0x0E	; 14
    49cc:	0e 94 d7 48 	call	0x91ae	; 0x91ae <__usmulhisi3>
    49d0:	64 0d       	add	r22, r4
    49d2:	75 1d       	adc	r23, r5
    49d4:	86 1d       	adc	r24, r6
    49d6:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    49d8:	c6 16       	cp	r12, r22
    49da:	d7 06       	cpc	r13, r23
    49dc:	e8 06       	cpc	r14, r24
    49de:	f9 06       	cpc	r15, r25
    49e0:	08 f4       	brcc	.+2      	; 0x49e4 <_Z18validateTimeStringPcPma+0x128>
    49e2:	40 c0       	rjmp	.+128    	; 0x4a64 <_Z18validateTimeStringPcPma+0x1a8>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    49e4:	f1 e0       	ldi	r31, 0x01	; 1
    49e6:	bf 12       	cpse	r11, r31
    49e8:	08 c0       	rjmp	.+16     	; 0x49fa <_Z18validateTimeStringPcPma+0x13e>
			{
				sb_send_string(TEXT_ERR_START_IN_PAST_TXT);
    49ea:	8a e0       	ldi	r24, 0x0A	; 10
    49ec:	93 e4       	ldi	r25, 0x43	; 67
    49ee:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    49f2:	60 e0       	ldi	r22, 0x00	; 0
    49f4:	70 e0       	ldi	r23, 0x00	; 0
    49f6:	cb 01       	movw	r24, r22
    49f8:	35 c0       	rjmp	.+106    	; 0x4a64 <_Z18validateTimeStringPcPma+0x1a8>
		{
			if(validationType == 1)         /* start time validation */
			{
				sb_send_string(TEXT_ERR_START_IN_PAST_TXT);
			}
			else if(validationType == 2)    /* finish time validation */
    49fa:	22 e0       	ldi	r18, 0x02	; 2
    49fc:	b2 12       	cpse	r11, r18
    49fe:	1d c0       	rjmp	.+58     	; 0x4a3a <_Z18validateTimeStringPcPma+0x17e>
			{
				if(ep < g_current_epoch)
    4a00:	00 91 20 46 	lds	r16, 0x4620	; 0x804620 <g_current_epoch>
    4a04:	10 91 21 46 	lds	r17, 0x4621	; 0x804621 <g_current_epoch+0x1>
    4a08:	20 91 22 46 	lds	r18, 0x4622	; 0x804622 <g_current_epoch+0x2>
    4a0c:	30 91 23 46 	lds	r19, 0x4623	; 0x804623 <g_current_epoch+0x3>
    4a10:	60 17       	cp	r22, r16
    4a12:	71 07       	cpc	r23, r17
    4a14:	82 07       	cpc	r24, r18
    4a16:	93 07       	cpc	r25, r19
    4a18:	40 f4       	brcc	.+16     	; 0x4a2a <_Z18validateTimeStringPcPma+0x16e>
				{
					sb_send_string(TEXT_ERR_FINISH_IN_PAST_TXT);
    4a1a:	8f e1       	ldi	r24, 0x1F	; 31
    4a1c:	93 e4       	ldi	r25, 0x43	; 67
    4a1e:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4a22:	60 e0       	ldi	r22, 0x00	; 0
    4a24:	70 e0       	ldi	r23, 0x00	; 0
    4a26:	cb 01       	movw	r24, r22
    4a28:	1d c0       	rjmp	.+58     	; 0x4a64 <_Z18validateTimeStringPcPma+0x1a8>
				{
					sb_send_string(TEXT_ERR_FINISH_IN_PAST_TXT);
				}
				else
				{
					sb_send_string(TEXT_ERR_FINISH_BEFORE_START_TXT);
    4a2a:	85 e3       	ldi	r24, 0x35	; 53
    4a2c:	93 e4       	ldi	r25, 0x43	; 67
    4a2e:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4a32:	60 e0       	ldi	r22, 0x00	; 0
    4a34:	70 e0       	ldi	r23, 0x00	; 0
    4a36:	cb 01       	movw	r24, r22
    4a38:	15 c0       	rjmp	.+42     	; 0x4a64 <_Z18validateTimeStringPcPma+0x1a8>
					sb_send_string(TEXT_ERR_FINISH_BEFORE_START_TXT);
				}
			}
			else    /* current time validation */
			{
				sb_send_string(TEXT_ERR_TIME_IN_PAST_TXT);
    4a3a:	80 e5       	ldi	r24, 0x50	; 80
    4a3c:	93 e4       	ldi	r25, 0x43	; 67
    4a3e:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4a42:	60 e0       	ldi	r22, 0x00	; 0
    4a44:	70 e0       	ldi	r23, 0x00	; 0
    4a46:	cb 01       	movw	r24, r22
    4a48:	0d c0       	rjmp	.+26     	; 0x4a64 <_Z18validateTimeStringPcPma+0x1a8>
			{
				sb_send_string(TEXT_ERR_TIME_IN_PAST_TXT);
			}
		}
	}
	else if(len)
    4a4a:	cd 2b       	or	r28, r29
    4a4c:	41 f0       	breq	.+16     	; 0x4a5e <_Z18validateTimeStringPcPma+0x1a2>
	{
		sb_send_string(TEXT_ERR_INVALID_TIME_TXT);
    4a4e:	84 e6       	ldi	r24, 0x64	; 100
    4a50:	93 e4       	ldi	r25, 0x43	; 67
    4a52:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    4a56:	60 e0       	ldi	r22, 0x00	; 0
    4a58:	70 e0       	ldi	r23, 0x00	; 0
    4a5a:	cb 01       	movw	r24, r22
    4a5c:	03 c0       	rjmp	.+6      	; 0x4a64 <_Z18validateTimeStringPcPma+0x1a8>
    4a5e:	60 e0       	ldi	r22, 0x00	; 0
    4a60:	70 e0       	ldi	r23, 0x00	; 0
    4a62:	cb 01       	movw	r24, r22
	{
		sb_send_string(TEXT_ERR_INVALID_TIME_TXT);
	}

	return(valid);
}
    4a64:	df 91       	pop	r29
    4a66:	cf 91       	pop	r28
    4a68:	1f 91       	pop	r17
    4a6a:	0f 91       	pop	r16
    4a6c:	ff 90       	pop	r15
    4a6e:	ef 90       	pop	r14
    4a70:	df 90       	pop	r13
    4a72:	cf 90       	pop	r12
    4a74:	bf 90       	pop	r11
    4a76:	af 90       	pop	r10
    4a78:	7f 90       	pop	r7
    4a7a:	6f 90       	pop	r6
    4a7c:	5f 90       	pop	r5
    4a7e:	4f 90       	pop	r4
    4a80:	08 95       	ret

00004a82 <_Z14reportTimeTillmmPKcS0_>:


bool reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    4a82:	2f 92       	push	r2
    4a84:	3f 92       	push	r3
    4a86:	4f 92       	push	r4
    4a88:	5f 92       	push	r5
    4a8a:	6f 92       	push	r6
    4a8c:	7f 92       	push	r7
    4a8e:	8f 92       	push	r8
    4a90:	9f 92       	push	r9
    4a92:	af 92       	push	r10
    4a94:	bf 92       	push	r11
    4a96:	cf 92       	push	r12
    4a98:	df 92       	push	r13
    4a9a:	ef 92       	push	r14
    4a9c:	ff 92       	push	r15
    4a9e:	0f 93       	push	r16
    4aa0:	1f 93       	push	r17
    4aa2:	cf 93       	push	r28
    4aa4:	df 93       	push	r29
    4aa6:	cd b7       	in	r28, 0x3d	; 61
    4aa8:	de b7       	in	r29, 0x3e	; 62
    4aaa:	2c 97       	sbiw	r28, 0x0c	; 12
    4aac:	cd bf       	out	0x3d, r28	; 61
    4aae:	de bf       	out	0x3e, r29	; 62
    4ab0:	2b 01       	movw	r4, r22
    4ab2:	3c 01       	movw	r6, r24
    4ab4:	49 01       	movw	r8, r18
    4ab6:	5a 01       	movw	r10, r20
	bool failure = false;

	if(from >= until)   /* Negative time */
    4ab8:	62 17       	cp	r22, r18
    4aba:	73 07       	cpc	r23, r19
    4abc:	84 07       	cpc	r24, r20
    4abe:	95 07       	cpc	r25, r21
    4ac0:	48 f0       	brcs	.+18     	; 0x4ad4 <_Z14reportTimeTillmmPKcS0_+0x52>
	{
		failure = true;
		if(failMsg)
    4ac2:	e1 14       	cp	r14, r1
    4ac4:	f1 04       	cpc	r15, r1
    4ac6:	09 f4       	brne	.+2      	; 0x4aca <_Z14reportTimeTillmmPKcS0_+0x48>
    4ac8:	fd c0       	rjmp	.+506    	; 0x4cc4 <_Z14reportTimeTillmmPKcS0_+0x242>
		{
			sb_send_string((char*)failMsg);
    4aca:	c7 01       	movw	r24, r14
    4acc:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
{
	bool failure = false;

	if(from >= until)   /* Negative time */
	{
		failure = true;
    4ad0:	81 e0       	ldi	r24, 0x01	; 1
    4ad2:	f9 c0       	rjmp	.+498    	; 0x4cc6 <_Z14reportTimeTillmmPKcS0_+0x244>
			sb_send_string((char*)failMsg);
		}
	}
	else
	{
		if(prefix)
    4ad4:	01 15       	cp	r16, r1
    4ad6:	11 05       	cpc	r17, r1
    4ad8:	19 f0       	breq	.+6      	; 0x4ae0 <_Z14reportTimeTillmmPKcS0_+0x5e>
		{
			sb_send_string((char*)prefix);
    4ada:	c8 01       	movw	r24, r16
    4adc:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
		}
		time_t dif = until - from;
    4ae0:	75 01       	movw	r14, r10
    4ae2:	64 01       	movw	r12, r8
    4ae4:	c4 18       	sub	r12, r4
    4ae6:	d5 08       	sbc	r13, r5
    4ae8:	e6 08       	sbc	r14, r6
    4aea:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    4aec:	c7 01       	movw	r24, r14
    4aee:	b6 01       	movw	r22, r12
    4af0:	20 e8       	ldi	r18, 0x80	; 128
    4af2:	33 e3       	ldi	r19, 0x33	; 51
    4af4:	41 ee       	ldi	r20, 0xE1	; 225
    4af6:	51 e0       	ldi	r21, 0x01	; 1
    4af8:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    4afc:	29 01       	movw	r4, r18
    4afe:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    4b00:	44 27       	eor	r20, r20
    4b02:	55 27       	eor	r21, r21
    4b04:	60 e8       	ldi	r22, 0x80	; 128
    4b06:	73 e3       	ldi	r23, 0x33	; 51
    4b08:	81 ee       	ldi	r24, 0xE1	; 225
    4b0a:	91 e0       	ldi	r25, 0x01	; 1
    4b0c:	0e 94 46 48 	call	0x908c	; 0x908c <__mulsi3>
    4b10:	c6 1a       	sub	r12, r22
    4b12:	d7 0a       	sbc	r13, r23
    4b14:	e8 0a       	sbc	r14, r24
    4b16:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    4b18:	c7 01       	movw	r24, r14
    4b1a:	b6 01       	movw	r22, r12
    4b1c:	20 e8       	ldi	r18, 0x80	; 128
    4b1e:	31 e5       	ldi	r19, 0x51	; 81
    4b20:	41 e0       	ldi	r20, 0x01	; 1
    4b22:	50 e0       	ldi	r21, 0x00	; 0
    4b24:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    4b28:	49 01       	movw	r8, r18
    4b2a:	5a 01       	movw	r10, r20
    4b2c:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    4b2e:	44 27       	eor	r20, r20
    4b30:	55 27       	eor	r21, r21
    4b32:	60 e8       	ldi	r22, 0x80	; 128
    4b34:	71 e5       	ldi	r23, 0x51	; 81
    4b36:	81 e0       	ldi	r24, 0x01	; 1
    4b38:	90 e0       	ldi	r25, 0x00	; 0
    4b3a:	0e 94 46 48 	call	0x908c	; 0x908c <__mulsi3>
    4b3e:	c6 1a       	sub	r12, r22
    4b40:	d7 0a       	sbc	r13, r23
    4b42:	e8 0a       	sbc	r14, r24
    4b44:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    4b46:	c7 01       	movw	r24, r14
    4b48:	b6 01       	movw	r22, r12
    4b4a:	20 e1       	ldi	r18, 0x10	; 16
    4b4c:	3e e0       	ldi	r19, 0x0E	; 14
    4b4e:	40 e0       	ldi	r20, 0x00	; 0
    4b50:	50 e0       	ldi	r21, 0x00	; 0
    4b52:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    4b56:	29 83       	std	Y+1, r18	; 0x01
    4b58:	3a 83       	std	Y+2, r19	; 0x02
    4b5a:	4b 83       	std	Y+3, r20	; 0x03
    4b5c:	5c 83       	std	Y+4, r21	; 0x04
    4b5e:	29 81       	ldd	r18, Y+1	; 0x01
    4b60:	3a 81       	ldd	r19, Y+2	; 0x02
    4b62:	29 87       	std	Y+9, r18	; 0x09
    4b64:	3a 87       	std	Y+10, r19	; 0x0a
		hold -= (hours * HOUR);
    4b66:	29 81       	ldd	r18, Y+1	; 0x01
    4b68:	3a 81       	ldd	r19, Y+2	; 0x02
    4b6a:	4b 81       	ldd	r20, Y+3	; 0x03
    4b6c:	5c 81       	ldd	r21, Y+4	; 0x04
    4b6e:	44 27       	eor	r20, r20
    4b70:	55 27       	eor	r21, r21
    4b72:	a0 e1       	ldi	r26, 0x10	; 16
    4b74:	be e0       	ldi	r27, 0x0E	; 14
    4b76:	0e 94 de 48 	call	0x91bc	; 0x91bc <__muluhisi3>
    4b7a:	c6 1a       	sub	r12, r22
    4b7c:	d7 0a       	sbc	r13, r23
    4b7e:	e8 0a       	sbc	r14, r24
    4b80:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    4b82:	c7 01       	movw	r24, r14
    4b84:	b6 01       	movw	r22, r12
    4b86:	2c e3       	ldi	r18, 0x3C	; 60
    4b88:	30 e0       	ldi	r19, 0x00	; 0
    4b8a:	40 e0       	ldi	r20, 0x00	; 0
    4b8c:	50 e0       	ldi	r21, 0x00	; 0
    4b8e:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    4b92:	2d 83       	std	Y+5, r18	; 0x05
    4b94:	3e 83       	std	Y+6, r19	; 0x06
    4b96:	4f 83       	std	Y+7, r20	; 0x07
    4b98:	58 87       	std	Y+8, r21	; 0x08
    4b9a:	0d 81       	ldd	r16, Y+5	; 0x05
    4b9c:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    4b9e:	2c e3       	ldi	r18, 0x3C	; 60
    4ba0:	20 9f       	mul	r18, r16
    4ba2:	c0 01       	movw	r24, r0
    4ba4:	21 9f       	mul	r18, r17
    4ba6:	90 0d       	add	r25, r0
    4ba8:	11 24       	eor	r1, r1
    4baa:	a6 01       	movw	r20, r12
    4bac:	48 1b       	sub	r20, r24
    4bae:	59 0b       	sbc	r21, r25
    4bb0:	4b 87       	std	Y+11, r20	; 0x0b
    4bb2:	5c 87       	std	Y+12, r21	; 0x0c

		g_tempStr[0] = '\0';
    4bb4:	10 92 83 45 	sts	0x4583, r1	; 0x804583 <_ZL9g_tempStr>

		if(years)
    4bb8:	41 14       	cp	r4, r1
    4bba:	51 04       	cpc	r5, r1
    4bbc:	b1 f0       	breq	.+44     	; 0x4bea <_Z14reportTimeTillmmPKcS0_+0x168>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    4bbe:	5f 92       	push	r5
    4bc0:	4f 92       	push	r4
    4bc2:	88 e7       	ldi	r24, 0x78	; 120
    4bc4:	93 e4       	ldi	r25, 0x43	; 67
    4bc6:	9f 93       	push	r25
    4bc8:	8f 93       	push	r24
    4bca:	83 e8       	ldi	r24, 0x83	; 131
    4bcc:	95 e4       	ldi	r25, 0x45	; 69
    4bce:	9f 93       	push	r25
    4bd0:	8f 93       	push	r24
    4bd2:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
			sb_send_string(g_tempStr);
    4bd6:	83 e8       	ldi	r24, 0x83	; 131
    4bd8:	95 e4       	ldi	r25, 0x45	; 69
    4bda:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    4bde:	0f 90       	pop	r0
    4be0:	0f 90       	pop	r0
    4be2:	0f 90       	pop	r0
    4be4:	0f 90       	pop	r0
    4be6:	0f 90       	pop	r0
    4be8:	0f 90       	pop	r0
		}

		if(days)
    4bea:	23 28       	or	r2, r3
    4bec:	b1 f0       	breq	.+44     	; 0x4c1a <_Z14reportTimeTillmmPKcS0_+0x198>
		{
			sprintf(g_tempStr, "%d days ", days);
    4bee:	9f 92       	push	r9
    4bf0:	8f 92       	push	r8
    4bf2:	80 e8       	ldi	r24, 0x80	; 128
    4bf4:	93 e4       	ldi	r25, 0x43	; 67
    4bf6:	9f 93       	push	r25
    4bf8:	8f 93       	push	r24
    4bfa:	83 e8       	ldi	r24, 0x83	; 131
    4bfc:	95 e4       	ldi	r25, 0x45	; 69
    4bfe:	9f 93       	push	r25
    4c00:	8f 93       	push	r24
    4c02:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
			sb_send_string(g_tempStr);
    4c06:	83 e8       	ldi	r24, 0x83	; 131
    4c08:	95 e4       	ldi	r25, 0x45	; 69
    4c0a:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    4c0e:	0f 90       	pop	r0
    4c10:	0f 90       	pop	r0
    4c12:	0f 90       	pop	r0
    4c14:	0f 90       	pop	r0
    4c16:	0f 90       	pop	r0
    4c18:	0f 90       	pop	r0
		}

		if(hours)
    4c1a:	89 85       	ldd	r24, Y+9	; 0x09
    4c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c1e:	89 2b       	or	r24, r25
    4c20:	c1 f0       	breq	.+48     	; 0x4c52 <_Z14reportTimeTillmmPKcS0_+0x1d0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    4c22:	9a 81       	ldd	r25, Y+2	; 0x02
    4c24:	9f 93       	push	r25
    4c26:	e9 81       	ldd	r30, Y+1	; 0x01
    4c28:	ef 93       	push	r30
    4c2a:	89 e8       	ldi	r24, 0x89	; 137
    4c2c:	93 e4       	ldi	r25, 0x43	; 67
    4c2e:	9f 93       	push	r25
    4c30:	8f 93       	push	r24
    4c32:	83 e8       	ldi	r24, 0x83	; 131
    4c34:	95 e4       	ldi	r25, 0x45	; 69
    4c36:	9f 93       	push	r25
    4c38:	8f 93       	push	r24
    4c3a:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
			sb_send_string(g_tempStr);
    4c3e:	83 e8       	ldi	r24, 0x83	; 131
    4c40:	95 e4       	ldi	r25, 0x45	; 69
    4c42:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    4c46:	0f 90       	pop	r0
    4c48:	0f 90       	pop	r0
    4c4a:	0f 90       	pop	r0
    4c4c:	0f 90       	pop	r0
    4c4e:	0f 90       	pop	r0
    4c50:	0f 90       	pop	r0
		}

		if(minutes)
    4c52:	01 2b       	or	r16, r17
    4c54:	c1 f0       	breq	.+48     	; 0x4c86 <_Z14reportTimeTillmmPKcS0_+0x204>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    4c56:	fe 81       	ldd	r31, Y+6	; 0x06
    4c58:	ff 93       	push	r31
    4c5a:	2d 81       	ldd	r18, Y+5	; 0x05
    4c5c:	2f 93       	push	r18
    4c5e:	81 e9       	ldi	r24, 0x91	; 145
    4c60:	93 e4       	ldi	r25, 0x43	; 67
    4c62:	9f 93       	push	r25
    4c64:	8f 93       	push	r24
    4c66:	83 e8       	ldi	r24, 0x83	; 131
    4c68:	95 e4       	ldi	r25, 0x45	; 69
    4c6a:	9f 93       	push	r25
    4c6c:	8f 93       	push	r24
    4c6e:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
			sb_send_string(g_tempStr);
    4c72:	83 e8       	ldi	r24, 0x83	; 131
    4c74:	95 e4       	ldi	r25, 0x45	; 69
    4c76:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    4c7a:	0f 90       	pop	r0
    4c7c:	0f 90       	pop	r0
    4c7e:	0f 90       	pop	r0
    4c80:	0f 90       	pop	r0
    4c82:	0f 90       	pop	r0
    4c84:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    4c86:	3c 85       	ldd	r19, Y+12	; 0x0c
    4c88:	3f 93       	push	r19
    4c8a:	4b 85       	ldd	r20, Y+11	; 0x0b
    4c8c:	4f 93       	push	r20
    4c8e:	89 e9       	ldi	r24, 0x99	; 153
    4c90:	93 e4       	ldi	r25, 0x43	; 67
    4c92:	9f 93       	push	r25
    4c94:	8f 93       	push	r24
    4c96:	83 e8       	ldi	r24, 0x83	; 131
    4c98:	95 e4       	ldi	r25, 0x45	; 69
    4c9a:	9f 93       	push	r25
    4c9c:	8f 93       	push	r24
    4c9e:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
		sb_send_string(g_tempStr);
    4ca2:	83 e8       	ldi	r24, 0x83	; 131
    4ca4:	95 e4       	ldi	r25, 0x45	; 69
    4ca6:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>

		sb_send_NewLine();
    4caa:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <sb_send_NewLine>
		g_tempStr[0] = '\0';
    4cae:	e3 e8       	ldi	r30, 0x83	; 131
    4cb0:	f5 e4       	ldi	r31, 0x45	; 69
    4cb2:	10 82       	st	Z, r1
    4cb4:	0f 90       	pop	r0
    4cb6:	0f 90       	pop	r0
    4cb8:	0f 90       	pop	r0
    4cba:	0f 90       	pop	r0
    4cbc:	0f 90       	pop	r0
    4cbe:	0f 90       	pop	r0
}


bool reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	bool failure = false;
    4cc0:	80 e0       	ldi	r24, 0x00	; 0
    4cc2:	01 c0       	rjmp	.+2      	; 0x4cc6 <_Z14reportTimeTillmmPKcS0_+0x244>

	if(from >= until)   /* Negative time */
	{
		failure = true;
    4cc4:	81 e0       	ldi	r24, 0x01	; 1
		sb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    4cc6:	2c 96       	adiw	r28, 0x0c	; 12
    4cc8:	cd bf       	out	0x3d, r28	; 61
    4cca:	de bf       	out	0x3e, r29	; 62
    4ccc:	df 91       	pop	r29
    4cce:	cf 91       	pop	r28
    4cd0:	1f 91       	pop	r17
    4cd2:	0f 91       	pop	r16
    4cd4:	ff 90       	pop	r15
    4cd6:	ef 90       	pop	r14
    4cd8:	df 90       	pop	r13
    4cda:	cf 90       	pop	r12
    4cdc:	bf 90       	pop	r11
    4cde:	af 90       	pop	r10
    4ce0:	9f 90       	pop	r9
    4ce2:	8f 90       	pop	r8
    4ce4:	7f 90       	pop	r7
    4ce6:	6f 90       	pop	r6
    4ce8:	5f 90       	pop	r5
    4cea:	4f 90       	pop	r4
    4cec:	3f 90       	pop	r3
    4cee:	2f 90       	pop	r2
    4cf0:	08 95       	ret

00004cf2 <_Z23clockConfigurationCheckv>:



ConfigurationState_t clockConfigurationCheck(void)
{
    4cf2:	0f 93       	push	r16
    4cf4:	1f 93       	push	r17
	if((g_event_finish_epoch < MINIMUM_EPOCH) || (g_event_start_epoch < MINIMUM_EPOCH) || (g_current_epoch < MINIMUM_EPOCH))
    4cf6:	80 91 13 46 	lds	r24, 0x4613	; 0x804613 <g_event_finish_epoch>
    4cfa:	90 91 14 46 	lds	r25, 0x4614	; 0x804614 <g_event_finish_epoch+0x1>
    4cfe:	a0 91 15 46 	lds	r26, 0x4615	; 0x804615 <g_event_finish_epoch+0x2>
    4d02:	b0 91 16 46 	lds	r27, 0x4616	; 0x804616 <g_event_finish_epoch+0x3>
    4d06:	81 15       	cp	r24, r1
    4d08:	26 e6       	ldi	r18, 0x66	; 102
    4d0a:	92 07       	cpc	r25, r18
    4d0c:	2e ee       	ldi	r18, 0xEE	; 238
    4d0e:	a2 07       	cpc	r26, r18
    4d10:	2f e5       	ldi	r18, 0x5F	; 95
    4d12:	b2 07       	cpc	r27, r18
    4d14:	d8 f1       	brcs	.+118    	; 0x4d8c <_Z23clockConfigurationCheckv+0x9a>
    4d16:	40 91 0f 46 	lds	r20, 0x460F	; 0x80460f <g_event_start_epoch>
    4d1a:	50 91 10 46 	lds	r21, 0x4610	; 0x804610 <g_event_start_epoch+0x1>
    4d1e:	60 91 11 46 	lds	r22, 0x4611	; 0x804611 <g_event_start_epoch+0x2>
    4d22:	70 91 12 46 	lds	r23, 0x4612	; 0x804612 <g_event_start_epoch+0x3>
    4d26:	41 15       	cp	r20, r1
    4d28:	e6 e6       	ldi	r30, 0x66	; 102
    4d2a:	5e 07       	cpc	r21, r30
    4d2c:	ee ee       	ldi	r30, 0xEE	; 238
    4d2e:	6e 07       	cpc	r22, r30
    4d30:	ef e5       	ldi	r30, 0x5F	; 95
    4d32:	7e 07       	cpc	r23, r30
    4d34:	68 f1       	brcs	.+90     	; 0x4d90 <_Z23clockConfigurationCheckv+0x9e>
    4d36:	00 91 20 46 	lds	r16, 0x4620	; 0x804620 <g_current_epoch>
    4d3a:	10 91 21 46 	lds	r17, 0x4621	; 0x804621 <g_current_epoch+0x1>
    4d3e:	20 91 22 46 	lds	r18, 0x4622	; 0x804622 <g_current_epoch+0x2>
    4d42:	30 91 23 46 	lds	r19, 0x4623	; 0x804623 <g_current_epoch+0x3>
    4d46:	01 15       	cp	r16, r1
    4d48:	e6 e6       	ldi	r30, 0x66	; 102
    4d4a:	1e 07       	cpc	r17, r30
    4d4c:	ee ee       	ldi	r30, 0xEE	; 238
    4d4e:	2e 07       	cpc	r18, r30
    4d50:	ef e5       	ldi	r30, 0x5F	; 95
    4d52:	3e 07       	cpc	r19, r30
    4d54:	f8 f0       	brcs	.+62     	; 0x4d94 <_Z23clockConfigurationCheckv+0xa2>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_event_finish_epoch <= g_event_start_epoch) /* Event configured to finish before it started */
    4d56:	48 17       	cp	r20, r24
    4d58:	59 07       	cpc	r21, r25
    4d5a:	6a 07       	cpc	r22, r26
    4d5c:	7b 07       	cpc	r23, r27
    4d5e:	e0 f4       	brcc	.+56     	; 0x4d98 <_Z23clockConfigurationCheckv+0xa6>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_current_epoch > g_event_finish_epoch)  /* The scheduled event is over */
    4d60:	80 17       	cp	r24, r16
    4d62:	91 07       	cpc	r25, r17
    4d64:	a2 07       	cpc	r26, r18
    4d66:	b3 07       	cpc	r27, r19
    4d68:	c8 f0       	brcs	.+50     	; 0x4d9c <_Z23clockConfigurationCheckv+0xaa>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_current_epoch > g_event_start_epoch)       /* Event should be running */
    4d6a:	40 17       	cp	r20, r16
    4d6c:	51 07       	cpc	r21, r17
    4d6e:	62 07       	cpc	r22, r18
    4d70:	73 07       	cpc	r23, r19
    4d72:	30 f4       	brcc	.+12     	; 0x4d80 <_Z23clockConfigurationCheckv+0x8e>
	{
		if(g_transmissions_disabled)
    4d74:	80 91 1c 40 	lds	r24, 0x401C	; 0x80401c <g_transmissions_disabled>
    4d78:	88 23       	and	r24, r24
    4d7a:	91 f0       	breq	.+36     	; 0x4da0 <_Z23clockConfigurationCheckv+0xae>
		{
			return(SCHEDULED_EVENT_DID_NOT_START);  /* Event scheduled to be running isn't */
    4d7c:	83 e0       	ldi	r24, 0x03	; 3
    4d7e:	13 c0       	rjmp	.+38     	; 0x4da6 <_Z23clockConfigurationCheckv+0xb4>
		else
		{
			return(EVENT_IN_PROGRESS);              /* Event is running, so clock settings don't matter */
		}
	}
	else if(!g_use_rtc_for_startstop)
    4d80:	80 91 24 46 	lds	r24, 0x4624	; 0x804624 <g_use_rtc_for_startstop>
    4d84:	81 11       	cpse	r24, r1
    4d86:	0e c0       	rjmp	.+28     	; 0x4da4 <_Z23clockConfigurationCheckv+0xb2>
	{
		return(SCHEDULED_EVENT_WILL_NEVER_RUN);
    4d88:	84 e0       	ldi	r24, 0x04	; 4
    4d8a:	0d c0       	rjmp	.+26     	; 0x4da6 <_Z23clockConfigurationCheckv+0xb4>

ConfigurationState_t clockConfigurationCheck(void)
{
	if((g_event_finish_epoch < MINIMUM_EPOCH) || (g_event_start_epoch < MINIMUM_EPOCH) || (g_current_epoch < MINIMUM_EPOCH))
	{
		return(CONFIGURATION_ERROR);
    4d8c:	82 e0       	ldi	r24, 0x02	; 2
    4d8e:	0b c0       	rjmp	.+22     	; 0x4da6 <_Z23clockConfigurationCheckv+0xb4>
    4d90:	82 e0       	ldi	r24, 0x02	; 2
    4d92:	09 c0       	rjmp	.+18     	; 0x4da6 <_Z23clockConfigurationCheckv+0xb4>
    4d94:	82 e0       	ldi	r24, 0x02	; 2
    4d96:	07 c0       	rjmp	.+14     	; 0x4da6 <_Z23clockConfigurationCheckv+0xb4>
	}

	if(g_event_finish_epoch <= g_event_start_epoch) /* Event configured to finish before it started */
	{
		return(CONFIGURATION_ERROR);
    4d98:	82 e0       	ldi	r24, 0x02	; 2
    4d9a:	05 c0       	rjmp	.+10     	; 0x4da6 <_Z23clockConfigurationCheckv+0xb4>
	}

	if(g_current_epoch > g_event_finish_epoch)  /* The scheduled event is over */
	{
		return(CONFIGURATION_ERROR);
    4d9c:	82 e0       	ldi	r24, 0x02	; 2
    4d9e:	03 c0       	rjmp	.+6      	; 0x4da6 <_Z23clockConfigurationCheckv+0xb4>
		{
			return(SCHEDULED_EVENT_DID_NOT_START);  /* Event scheduled to be running isn't */
		}
		else
		{
			return(EVENT_IN_PROGRESS);              /* Event is running, so clock settings don't matter */
    4da0:	85 e0       	ldi	r24, 0x05	; 5
    4da2:	01 c0       	rjmp	.+2      	; 0x4da6 <_Z23clockConfigurationCheckv+0xb4>
	else if(!g_use_rtc_for_startstop)
	{
		return(SCHEDULED_EVENT_WILL_NEVER_RUN);
	}

	return(WAITING_FOR_START);  /* Future event hasn't started yet */
    4da4:	81 e0       	ldi	r24, 0x01	; 1
}
    4da6:	1f 91       	pop	r17
    4da8:	0f 91       	pop	r16
    4daa:	08 95       	ret

00004dac <_Z18reportConfigErrorsv>:

void reportConfigErrors(void)
{
	g_current_epoch = ds3231_get_epoch(null);
    4dac:	80 e0       	ldi	r24, 0x00	; 0
    4dae:	90 e0       	ldi	r25, 0x00	; 0
    4db0:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <ds3231_get_epoch>
    4db4:	60 93 20 46 	sts	0x4620, r22	; 0x804620 <g_current_epoch>
    4db8:	70 93 21 46 	sts	0x4621, r23	; 0x804621 <g_current_epoch+0x1>
    4dbc:	80 93 22 46 	sts	0x4622, r24	; 0x804622 <g_current_epoch+0x2>
    4dc0:	90 93 23 46 	sts	0x4623, r25	; 0x804623 <g_current_epoch+0x3>

	if(g_messages_text[STATION_ID][0] == '\0')
    4dc4:	80 91 d9 45 	lds	r24, 0x45D9	; 0x8045d9 <g_messages_text+0x15>
    4dc8:	81 11       	cpse	r24, r1
    4dca:	04 c0       	rjmp	.+8      	; 0x4dd4 <_Z18reportConfigErrorsv+0x28>
	{
		sb_send_string(TEXT_SET_ID_TXT);
    4dcc:	80 ea       	ldi	r24, 0xA0	; 160
    4dce:	93 e4       	ldi	r25, 0x43	; 67
    4dd0:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    4dd4:	80 91 20 46 	lds	r24, 0x4620	; 0x804620 <g_current_epoch>
    4dd8:	90 91 21 46 	lds	r25, 0x4621	; 0x804621 <g_current_epoch+0x1>
    4ddc:	a0 91 22 46 	lds	r26, 0x4622	; 0x804622 <g_current_epoch+0x2>
    4de0:	b0 91 23 46 	lds	r27, 0x4623	; 0x804623 <g_current_epoch+0x3>
    4de4:	81 15       	cp	r24, r1
    4de6:	96 46       	sbci	r25, 0x66	; 102
    4de8:	ae 4e       	sbci	r26, 0xEE	; 238
    4dea:	bf 45       	sbci	r27, 0x5F	; 95
    4dec:	20 f4       	brcc	.+8      	; 0x4df6 <_Z18reportConfigErrorsv+0x4a>
	{
		sb_send_string(TEXT_SET_TIME_TXT);
    4dee:	81 ec       	ldi	r24, 0xC1	; 193
    4df0:	93 e4       	ldi	r25, 0x43	; 67
    4df2:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    4df6:	40 91 13 46 	lds	r20, 0x4613	; 0x804613 <g_event_finish_epoch>
    4dfa:	50 91 14 46 	lds	r21, 0x4614	; 0x804614 <g_event_finish_epoch+0x1>
    4dfe:	60 91 15 46 	lds	r22, 0x4615	; 0x804615 <g_event_finish_epoch+0x2>
    4e02:	70 91 16 46 	lds	r23, 0x4616	; 0x804616 <g_event_finish_epoch+0x3>
    4e06:	80 91 20 46 	lds	r24, 0x4620	; 0x804620 <g_current_epoch>
    4e0a:	90 91 21 46 	lds	r25, 0x4621	; 0x804621 <g_current_epoch+0x1>
    4e0e:	a0 91 22 46 	lds	r26, 0x4622	; 0x804622 <g_current_epoch+0x2>
    4e12:	b0 91 23 46 	lds	r27, 0x4623	; 0x804623 <g_current_epoch+0x3>
    4e16:	48 17       	cp	r20, r24
    4e18:	59 07       	cpc	r21, r25
    4e1a:	6a 07       	cpc	r22, r26
    4e1c:	7b 07       	cpc	r23, r27
    4e1e:	b0 f4       	brcc	.+44     	; 0x4e4c <_Z18reportConfigErrorsv+0xa0>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    4e20:	40 91 0f 46 	lds	r20, 0x460F	; 0x80460f <g_event_start_epoch>
    4e24:	50 91 10 46 	lds	r21, 0x4610	; 0x804610 <g_event_start_epoch+0x1>
    4e28:	60 91 11 46 	lds	r22, 0x4611	; 0x804611 <g_event_start_epoch+0x2>
    4e2c:	70 91 12 46 	lds	r23, 0x4612	; 0x804612 <g_event_start_epoch+0x3>
    4e30:	48 17       	cp	r20, r24
    4e32:	59 07       	cpc	r21, r25
    4e34:	6a 07       	cpc	r22, r26
    4e36:	7b 07       	cpc	r23, r27
    4e38:	20 f4       	brcc	.+8      	; 0x4e42 <_Z18reportConfigErrorsv+0x96>
		{
			sb_send_string(TEXT_SET_START_TXT);
    4e3a:	89 ee       	ldi	r24, 0xE9	; 233
    4e3c:	93 e4       	ldi	r25, 0x43	; 67
    4e3e:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
		}

		sb_send_string(TEXT_SET_FINISH_TXT);
    4e42:	8f e0       	ldi	r24, 0x0F	; 15
    4e44:	94 e4       	ldi	r25, 0x44	; 68
    4e46:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    4e4a:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    4e4c:	40 91 0f 46 	lds	r20, 0x460F	; 0x80460f <g_event_start_epoch>
    4e50:	50 91 10 46 	lds	r21, 0x4610	; 0x804610 <g_event_start_epoch+0x1>
    4e54:	60 91 11 46 	lds	r22, 0x4611	; 0x804611 <g_event_start_epoch+0x2>
    4e58:	70 91 12 46 	lds	r23, 0x4612	; 0x804612 <g_event_start_epoch+0x3>
    4e5c:	48 17       	cp	r20, r24
    4e5e:	59 07       	cpc	r21, r25
    4e60:	6a 07       	cpc	r22, r26
    4e62:	7b 07       	cpc	r23, r27
    4e64:	70 f4       	brcc	.+28     	; 0x4e82 <_Z18reportConfigErrorsv+0xd6>
	{
		if(g_event_start_epoch < MINIMUM_EPOCH)     /* Start in invalid */
    4e66:	41 15       	cp	r20, r1
    4e68:	56 46       	sbci	r21, 0x66	; 102
    4e6a:	6e 4e       	sbci	r22, 0xEE	; 238
    4e6c:	7f 45       	sbci	r23, 0x5F	; 95
    4e6e:	28 f4       	brcc	.+10     	; 0x4e7a <_Z18reportConfigErrorsv+0xce>
		{
			sb_send_string(TEXT_SET_START_TXT);
    4e70:	89 ee       	ldi	r24, 0xE9	; 233
    4e72:	93 e4       	ldi	r25, 0x43	; 67
    4e74:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    4e78:	08 95       	ret
		}
		else
		{
			sb_send_string((char*)"Event running...\n");
    4e7a:	86 e3       	ldi	r24, 0x36	; 54
    4e7c:	94 e4       	ldi	r25, 0x44	; 68
    4e7e:	0e 94 08 3b 	call	0x7610	; 0x7610 <sb_send_string>
    4e82:	08 95       	ret

00004e84 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
}
    4e84:	0f 93       	push	r16
    4e86:	1f 93       	push	r17
    4e88:	cf 93       	push	r28
    4e8a:	df 93       	push	r29
    4e8c:	ec 01       	movw	r28, r24
    4e8e:	8b 01       	movw	r16, r22
    4e90:	01 97       	sbiw	r24, 0x01	; 1
    4e92:	39 f4       	brne	.+14     	; 0x4ea2 <_Z41__static_initialization_and_destruction_0ii+0x1e>
    4e94:	6f 3f       	cpi	r22, 0xFF	; 255
    4e96:	7f 4f       	sbci	r23, 0xFF	; 255
    4e98:	21 f4       	brne	.+8      	; 0x4ea2 <_Z41__static_initialization_and_destruction_0ii+0x1e>
//static volatile bool g_adcUpdated[NUMBER_OF_POLLED_ADC_CHANNELS] = { false, false, false, false, false };
static volatile uint16_t g_lastConversionResult[NUMBER_OF_POLLED_ADC_CHANNELS];

extern Goertzel g_goertzel;

EepromManager g_ee_mgr;
    4e9a:	8e e0       	ldi	r24, 0x0E	; 14
    4e9c:	96 e4       	ldi	r25, 0x46	; 70
    4e9e:	0e 94 57 2f 	call	0x5eae	; 0x5eae <_ZN13EepromManagerC1Ev>
    4ea2:	cd 2b       	or	r28, r29
    4ea4:	39 f4       	brne	.+14     	; 0x4eb4 <_Z41__static_initialization_and_destruction_0ii+0x30>
    4ea6:	0f 3f       	cpi	r16, 0xFF	; 255
    4ea8:	1f 4f       	sbci	r17, 0xFF	; 255
    4eaa:	21 f4       	brne	.+8      	; 0x4eb4 <_Z41__static_initialization_and_destruction_0ii+0x30>
    4eac:	8e e0       	ldi	r24, 0x0E	; 14
    4eae:	96 e4       	ldi	r25, 0x46	; 70
    4eb0:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <_ZN13EepromManagerD1Ev>
		else
		{
			sb_send_string((char*)"Event running...\n");
		}
	}
}
    4eb4:	df 91       	pop	r29
    4eb6:	cf 91       	pop	r28
    4eb8:	1f 91       	pop	r17
    4eba:	0f 91       	pop	r16
    4ebc:	08 95       	ret

00004ebe <_GLOBAL__sub_I_g_battery_type>:
    4ebe:	6f ef       	ldi	r22, 0xFF	; 255
    4ec0:	7f ef       	ldi	r23, 0xFF	; 255
    4ec2:	81 e0       	ldi	r24, 0x01	; 1
    4ec4:	90 e0       	ldi	r25, 0x00	; 0
    4ec6:	0e 94 42 27 	call	0x4e84	; 0x4e84 <_Z41__static_initialization_and_destruction_0ii>
    4eca:	08 95       	ret

00004ecc <_GLOBAL__sub_D_g_battery_type>:
    4ecc:	6f ef       	ldi	r22, 0xFF	; 255
    4ece:	7f ef       	ldi	r23, 0xFF	; 255
    4ed0:	80 e0       	ldi	r24, 0x00	; 0
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	0e 94 42 27 	call	0x4e84	; 0x4e84 <_Z41__static_initialization_and_destruction_0ii>
    4ed8:	08 95       	ret

00004eda <_ZL9PORT_initv>:
	}
	
	ADC0.MUXPOS = holdMux; /* Restore ADC registers */
	
	return(temperature_in_C);
}
    4eda:	e0 e6       	ldi	r30, 0x60	; 96
    4edc:	f4 e0       	ldi	r31, 0x04	; 4
    4ede:	82 89       	ldd	r24, Z+18	; 0x12
    4ee0:	88 7f       	andi	r24, 0xF8	; 248
    4ee2:	82 8b       	std	Z+18, r24	; 0x12
    4ee4:	82 89       	ldd	r24, Z+18	; 0x12
    4ee6:	84 60       	ori	r24, 0x04	; 4
    4ee8:	82 8b       	std	Z+18, r24	; 0x12
    4eea:	83 89       	ldd	r24, Z+19	; 0x13
    4eec:	88 7f       	andi	r24, 0xF8	; 248
    4eee:	83 8b       	std	Z+19, r24	; 0x13
    4ef0:	83 89       	ldd	r24, Z+19	; 0x13
    4ef2:	84 60       	ori	r24, 0x04	; 4
    4ef4:	83 8b       	std	Z+19, r24	; 0x13
    4ef6:	84 89       	ldd	r24, Z+20	; 0x14
    4ef8:	88 7f       	andi	r24, 0xF8	; 248
    4efa:	84 8b       	std	Z+20, r24	; 0x14
    4efc:	84 89       	ldd	r24, Z+20	; 0x14
    4efe:	84 60       	ori	r24, 0x04	; 4
    4f00:	84 8b       	std	Z+20, r24	; 0x14
    4f02:	85 89       	ldd	r24, Z+21	; 0x15
    4f04:	88 7f       	andi	r24, 0xF8	; 248
    4f06:	85 8b       	std	Z+21, r24	; 0x15
    4f08:	85 89       	ldd	r24, Z+21	; 0x15
    4f0a:	84 60       	ori	r24, 0x04	; 4
    4f0c:	85 8b       	std	Z+21, r24	; 0x15
    4f0e:	82 89       	ldd	r24, Z+18	; 0x12
    4f10:	87 7f       	andi	r24, 0xF7	; 247
    4f12:	82 8b       	std	Z+18, r24	; 0x12
    4f14:	83 89       	ldd	r24, Z+19	; 0x13
    4f16:	87 7f       	andi	r24, 0xF7	; 247
    4f18:	83 8b       	std	Z+19, r24	; 0x13
    4f1a:	84 89       	ldd	r24, Z+20	; 0x14
    4f1c:	87 7f       	andi	r24, 0xF7	; 247
    4f1e:	84 8b       	std	Z+20, r24	; 0x14
    4f20:	85 89       	ldd	r24, Z+21	; 0x15
    4f22:	87 7f       	andi	r24, 0xF7	; 247
    4f24:	85 8b       	std	Z+21, r24	; 0x15
    4f26:	08 95       	ret

00004f28 <_ZL10VREF0_initv>:
    4f28:	81 e0       	ldi	r24, 0x01	; 1
    4f2a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    4f2e:	08 95       	ret

00004f30 <_ZL9ADC0_initb>:
    4f30:	9a e0       	ldi	r25, 0x0A	; 10
    4f32:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
    4f36:	88 23       	and	r24, r24
    4f38:	41 f0       	breq	.+16     	; 0x4f4a <_ZL9ADC0_initb+0x1a>
    4f3a:	e0 e0       	ldi	r30, 0x00	; 0
    4f3c:	f6 e0       	ldi	r31, 0x06	; 6
    4f3e:	83 e0       	ldi	r24, 0x03	; 3
    4f40:	80 83       	st	Z, r24
    4f42:	81 e0       	ldi	r24, 0x01	; 1
    4f44:	84 87       	std	Z+12, r24	; 0x0c
    4f46:	82 87       	std	Z+10, r24	; 0x0a
    4f48:	08 95       	ret
    4f4a:	e0 e0       	ldi	r30, 0x00	; 0
    4f4c:	f6 e0       	ldi	r31, 0x06	; 6
    4f4e:	81 e0       	ldi	r24, 0x01	; 1
    4f50:	80 83       	st	Z, r24
    4f52:	14 86       	std	Z+12, r1	; 0x0c
    4f54:	08 95       	ret

00004f56 <_ZL16ADC0_SYSTEM_initb>:
    4f56:	cf 93       	push	r28
    4f58:	c8 2f       	mov	r28, r24
    4f5a:	0e 94 6d 27 	call	0x4eda	; 0x4eda <_ZL9PORT_initv>
    4f5e:	0e 94 94 27 	call	0x4f28	; 0x4f28 <_ZL10VREF0_initv>
    4f62:	8c 2f       	mov	r24, r28
    4f64:	0e 94 98 27 	call	0x4f30	; 0x4f30 <_ZL9ADC0_initb>
    4f68:	81 e0       	ldi	r24, 0x01	; 1
    4f6a:	80 93 3a 46 	sts	0x463A, r24	; 0x80463a <_ZL17g_adc_initialized>
    4f6e:	cf 91       	pop	r28
    4f70:	08 95       	ret

00004f72 <_ZL20ADC0_SYSTEM_shutdownv>:
    4f72:	e0 e0       	ldi	r30, 0x00	; 0
    4f74:	f6 e0       	ldi	r31, 0x06	; 6
    4f76:	14 86       	std	Z+12, r1	; 0x0c
    4f78:	10 82       	st	Z, r1
    4f7a:	10 92 3a 46 	sts	0x463A, r1	; 0x80463a <_ZL17g_adc_initialized>
    4f7e:	08 95       	ret

00004f80 <_Z41__static_initialization_and_destruction_0ii>:
    4f80:	ef 92       	push	r14
    4f82:	ff 92       	push	r15
    4f84:	0f 93       	push	r16
    4f86:	1f 93       	push	r17
    4f88:	cf 93       	push	r28
    4f8a:	df 93       	push	r29
    4f8c:	ec 01       	movw	r28, r24
    4f8e:	7b 01       	movw	r14, r22
    4f90:	01 97       	sbiw	r24, 0x01	; 1
    4f92:	79 f4       	brne	.+30     	; 0x4fb2 <_Z41__static_initialization_and_destruction_0ii+0x32>
    4f94:	6f 3f       	cpi	r22, 0xFF	; 255
    4f96:	7f 4f       	sbci	r23, 0xFF	; 255
    4f98:	61 f4       	brne	.+24     	; 0x4fb2 <_Z41__static_initialization_and_destruction_0ii+0x32>
    4f9a:	00 e0       	ldi	r16, 0x00	; 0
    4f9c:	10 e4       	ldi	r17, 0x40	; 64
    4f9e:	2c eb       	ldi	r18, 0xBC	; 188
    4fa0:	36 e4       	ldi	r19, 0x46	; 70
    4fa2:	40 e0       	ldi	r20, 0x00	; 0
    4fa4:	50 e0       	ldi	r21, 0x00	; 0
    4fa6:	69 e4       	ldi	r22, 0x49	; 73
    4fa8:	73 e4       	ldi	r23, 0x43	; 67
    4faa:	89 e3       	ldi	r24, 0x39	; 57
    4fac:	96 e4       	ldi	r25, 0x46	; 70
    4fae:	0e 94 a4 32 	call	0x6548	; 0x6548 <_ZN8GoertzelC1Eff>
    4fb2:	cd 2b       	or	r28, r29
    4fb4:	39 f4       	brne	.+14     	; 0x4fc4 <_Z41__static_initialization_and_destruction_0ii+0x44>
    4fb6:	ef 20       	and	r14, r15
    4fb8:	e0 94       	com	r14
    4fba:	21 f4       	brne	.+8      	; 0x4fc4 <_Z41__static_initialization_and_destruction_0ii+0x44>
    4fbc:	89 e3       	ldi	r24, 0x39	; 57
    4fbe:	96 e4       	ldi	r25, 0x46	; 70
    4fc0:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <_ZN8GoertzelD1Ev>
    4fc4:	df 91       	pop	r29
    4fc6:	cf 91       	pop	r28
    4fc8:	1f 91       	pop	r17
    4fca:	0f 91       	pop	r16
    4fcc:	ff 90       	pop	r15
    4fce:	ef 90       	pop	r14
    4fd0:	08 95       	ret

00004fd2 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>:
    4fd2:	83 30       	cpi	r24, 0x03	; 3
    4fd4:	c9 f0       	breq	.+50     	; 0x5008 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x36>
    4fd6:	28 f4       	brcc	.+10     	; 0x4fe2 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x10>
    4fd8:	81 30       	cpi	r24, 0x01	; 1
    4fda:	41 f0       	breq	.+16     	; 0x4fec <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x1a>
    4fdc:	82 30       	cpi	r24, 0x02	; 2
    4fde:	69 f0       	breq	.+26     	; 0x4ffa <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x28>
    4fe0:	28 c0       	rjmp	.+80     	; 0x5032 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x60>
    4fe2:	84 30       	cpi	r24, 0x04	; 4
    4fe4:	c1 f0       	breq	.+48     	; 0x5016 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x44>
    4fe6:	85 30       	cpi	r24, 0x05	; 5
    4fe8:	e9 f0       	breq	.+58     	; 0x5024 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x52>
    4fea:	23 c0       	rjmp	.+70     	; 0x5032 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x60>
    4fec:	81 e0       	ldi	r24, 0x01	; 1
    4fee:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <_ZL16ADC0_SYSTEM_initb>
    4ff2:	82 e0       	ldi	r24, 0x02	; 2
    4ff4:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    4ff8:	08 95       	ret
    4ffa:	80 e0       	ldi	r24, 0x00	; 0
    4ffc:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <_ZL16ADC0_SYSTEM_initb>
    5000:	83 e0       	ldi	r24, 0x03	; 3
    5002:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    5006:	08 95       	ret
    5008:	80 e0       	ldi	r24, 0x00	; 0
    500a:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <_ZL16ADC0_SYSTEM_initb>
    500e:	84 e0       	ldi	r24, 0x04	; 4
    5010:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    5014:	08 95       	ret
    5016:	80 e0       	ldi	r24, 0x00	; 0
    5018:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <_ZL16ADC0_SYSTEM_initb>
    501c:	85 e0       	ldi	r24, 0x05	; 5
    501e:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    5022:	08 95       	ret
    5024:	80 e0       	ldi	r24, 0x00	; 0
    5026:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <_ZL16ADC0_SYSTEM_initb>
    502a:	82 e4       	ldi	r24, 0x42	; 66
    502c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    5030:	08 95       	ret
    5032:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <_ZL20ADC0_SYSTEM_shutdownv>
    5036:	08 95       	ret

00005038 <_Z9ADC0_readv>:
    5038:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
    503c:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
    5040:	08 95       	ret

00005042 <__vector_24>:
	ADC0.CTRLA = ADC_RESSEL_12BIT_gc; /* Turn off ADC leaving 12-bit resolution set */
	g_adc_initialized = false;
}

ISR(ADC0_RESRDY_vect)
{
    5042:	1f 92       	push	r1
    5044:	0f 92       	push	r0
    5046:	0f b6       	in	r0, 0x3f	; 63
    5048:	0f 92       	push	r0
    504a:	11 24       	eor	r1, r1
    504c:	0b b6       	in	r0, 0x3b	; 59
    504e:	0f 92       	push	r0
    5050:	2f 93       	push	r18
    5052:	3f 93       	push	r19
    5054:	4f 93       	push	r20
    5056:	5f 93       	push	r21
    5058:	6f 93       	push	r22
    505a:	7f 93       	push	r23
    505c:	8f 93       	push	r24
    505e:	9f 93       	push	r25
    5060:	af 93       	push	r26
    5062:	bf 93       	push	r27
    5064:	ef 93       	push	r30
    5066:	ff 93       	push	r31
	/* Clear the interrupt flag by reading the result */
	int val = ADC0_read();
    5068:	0e 94 1c 28 	call	0x5038	; 0x5038 <_Z9ADC0_readv>
//	LED_toggle_level();
	if(g_goertzel.DataPoint(val))
    506c:	bc 01       	movw	r22, r24
    506e:	89 e3       	ldi	r24, 0x39	; 57
    5070:	96 e4       	ldi	r25, 0x46	; 70
    5072:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <_ZN8Goertzel9DataPointEi>
    5076:	81 11       	cpse	r24, r1
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
    5078:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <__TEXT_REGION_LENGTH__+0x7e060c>
	}
    507c:	ff 91       	pop	r31
    507e:	ef 91       	pop	r30
    5080:	bf 91       	pop	r27
    5082:	af 91       	pop	r26
    5084:	9f 91       	pop	r25
    5086:	8f 91       	pop	r24
    5088:	7f 91       	pop	r23
    508a:	6f 91       	pop	r22
    508c:	5f 91       	pop	r21
    508e:	4f 91       	pop	r20
    5090:	3f 91       	pop	r19
    5092:	2f 91       	pop	r18
    5094:	0f 90       	pop	r0
    5096:	0b be       	out	0x3b, r0	; 59
    5098:	0f 90       	pop	r0
    509a:	0f be       	out	0x3f, r0	; 63
    509c:	0f 90       	pop	r0
    509e:	1f 90       	pop	r1
    50a0:	18 95       	reti

000050a2 <_GLOBAL__sub_I_g_activeADCChannel>:
    50a2:	6f ef       	ldi	r22, 0xFF	; 255
    50a4:	7f ef       	ldi	r23, 0xFF	; 255
    50a6:	81 e0       	ldi	r24, 0x01	; 1
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <_Z41__static_initialization_and_destruction_0ii>
    50ae:	08 95       	ret

000050b0 <_GLOBAL__sub_D_g_activeADCChannel>:
    50b0:	6f ef       	ldi	r22, 0xFF	; 255
    50b2:	7f ef       	ldi	r23, 0xFF	; 255
    50b4:	80 e0       	ldi	r24, 0x00	; 0
    50b6:	90 e0       	ldi	r25, 0x00	; 0
    50b8:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <_Z41__static_initialization_and_destruction_0ii>
    50bc:	08 95       	ret

000050be <_Z10fet_driverb>:
{
} //~binio

void fet_driver(bool state)
{
	if(state == ON)
    50be:	88 23       	and	r24, r24
    50c0:	21 f0       	breq	.+8      	; 0x50ca <_Z10fet_driverb+0xc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    50c2:	81 b1       	in	r24, 0x01	; 1
    50c4:	88 60       	ori	r24, 0x08	; 8
    50c6:	81 b9       	out	0x01, r24	; 1
    50c8:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
    50ca:	81 b1       	in	r24, 0x01	; 1
    50cc:	87 7f       	andi	r24, 0xF7	; 247
    50ce:	81 b9       	out	0x01, r24	; 1
    50d0:	08 95       	ret

000050d2 <_Z10wifi_powerb>:
}


void wifi_power(bool state)
{
	if(state == ON)
    50d2:	88 23       	and	r24, r24
    50d4:	21 f0       	breq	.+8      	; 0x50de <_Z10wifi_powerb+0xc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    50d6:	81 b1       	in	r24, 0x01	; 1
    50d8:	80 62       	ori	r24, 0x20	; 32
    50da:	81 b9       	out	0x01, r24	; 1
    50dc:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
    50de:	81 b1       	in	r24, 0x01	; 1
    50e0:	8f 7d       	andi	r24, 0xDF	; 223
    50e2:	81 b9       	out	0x01, r24	; 1
    50e4:	08 95       	ret

000050e6 <_Z10wifi_resetb>:
	}
}

void wifi_reset(bool state)
{
	if(state == ON)
    50e6:	88 23       	and	r24, r24
    50e8:	21 f0       	breq	.+8      	; 0x50f2 <_Z10wifi_resetb+0xc>
    50ea:	81 b1       	in	r24, 0x01	; 1
    50ec:	8f 7b       	andi	r24, 0xBF	; 191
    50ee:	81 b9       	out	0x01, r24	; 1
    50f0:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    50f2:	81 b1       	in	r24, 0x01	; 1
    50f4:	80 64       	ori	r24, 0x40	; 64
    50f6:	81 b9       	out	0x01, r24	; 1
    50f8:	08 95       	ret

000050fa <_Z11wifiPresentv>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTD_get_pin_level(const uint8_t pin)
{
	return VPORTD.IN & (1 << pin);
    50fa:	8e b1       	in	r24, 0x0e	; 14
    50fc:	90 e0       	ldi	r25, 0x00	; 0
    50fe:	88 0f       	add	r24, r24
    5100:	89 2f       	mov	r24, r25
    5102:	88 1f       	adc	r24, r24
    5104:	99 0b       	sbc	r25, r25
}

bool wifiPresent(void)
{
	return(PORTD_get_pin_level(WIFI_MODULE_DETECT));
}
    5106:	81 70       	andi	r24, 0x01	; 1
    5108:	08 95       	ret

0000510a <__vector_29>:

/**
Handle switch closure interrupts
*/
ISR(PORTC_PORT_vect)
{
    510a:	1f 92       	push	r1
    510c:	0f 92       	push	r0
    510e:	0f b6       	in	r0, 0x3f	; 63
    5110:	0f 92       	push	r0
    5112:	11 24       	eor	r1, r1
    5114:	8f 93       	push	r24
    5116:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTC.INTFLAGS & (1 << SWITCH))
    5118:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    511c:	88 23       	and	r24, r24
    511e:	4c f4       	brge	.+18     	; 0x5132 <__vector_29+0x28>
	{
		count++;
    5120:	80 91 3d 46 	lds	r24, 0x463D	; 0x80463d <_ZZ11__vector_29E5count>
    5124:	90 91 3e 46 	lds	r25, 0x463E	; 0x80463e <_ZZ11__vector_29E5count+0x1>
    5128:	01 96       	adiw	r24, 0x01	; 1
    512a:	80 93 3d 46 	sts	0x463D, r24	; 0x80463d <_ZZ11__vector_29E5count>
    512e:	90 93 3e 46 	sts	0x463E, r25	; 0x80463e <_ZZ11__vector_29E5count+0x1>
	}
	
	if(PORTC.INTFLAGS & (1 << X32KHZ_SQUAREWAVE))
    5132:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    5136:	84 ff       	sbrs	r24, 4
    5138:	09 c0       	rjmp	.+18     	; 0x514c <__vector_29+0x42>
	{
		count++;
    513a:	80 91 3d 46 	lds	r24, 0x463D	; 0x80463d <_ZZ11__vector_29E5count>
    513e:	90 91 3e 46 	lds	r25, 0x463E	; 0x80463e <_ZZ11__vector_29E5count+0x1>
    5142:	01 96       	adiw	r24, 0x01	; 1
    5144:	80 93 3d 46 	sts	0x463D, r24	; 0x80463d <_ZZ11__vector_29E5count>
    5148:	90 93 3e 46 	sts	0x463E, r25	; 0x80463e <_ZZ11__vector_29E5count+0x1>
	}
	
	PORTC.INTFLAGS = 0xFF; /* Clear all flags */
    514c:	8f ef       	ldi	r24, 0xFF	; 255
    514e:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
}
    5152:	9f 91       	pop	r25
    5154:	8f 91       	pop	r24
    5156:	0f 90       	pop	r0
    5158:	0f be       	out	0x3f, r0	; 63
    515a:	0f 90       	pop	r0
    515c:	1f 90       	pop	r1
    515e:	18 95       	reti

00005160 <__vector_6>:

/**

*/
ISR(PORTA_PORT_vect)
{
    5160:	1f 92       	push	r1
    5162:	0f 92       	push	r0
    5164:	0f b6       	in	r0, 0x3f	; 63
    5166:	0f 92       	push	r0
    5168:	11 24       	eor	r1, r1
    516a:	8f 93       	push	r24
    516c:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTA.INTFLAGS & (1 << RTC_SQW))
    516e:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    5172:	82 ff       	sbrs	r24, 2
    5174:	09 c0       	rjmp	.+18     	; 0x5188 <__vector_6+0x28>
	{
		count++;
    5176:	80 91 3b 46 	lds	r24, 0x463B	; 0x80463b <_ZZ10__vector_6E5count>
    517a:	90 91 3c 46 	lds	r25, 0x463C	; 0x80463c <_ZZ10__vector_6E5count+0x1>
    517e:	01 96       	adiw	r24, 0x01	; 1
    5180:	80 93 3b 46 	sts	0x463B, r24	; 0x80463b <_ZZ10__vector_6E5count>
    5184:	90 93 3c 46 	sts	0x463C, r25	; 0x80463c <_ZZ10__vector_6E5count+0x1>
	}
	
	if(PORTA.INTFLAGS & (1 << ANT_CONNECT_INT))
    5188:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    518c:	84 ff       	sbrs	r24, 4
    518e:	09 c0       	rjmp	.+18     	; 0x51a2 <__vector_6+0x42>
	{
		count++;
    5190:	80 91 3b 46 	lds	r24, 0x463B	; 0x80463b <_ZZ10__vector_6E5count>
    5194:	90 91 3c 46 	lds	r25, 0x463C	; 0x80463c <_ZZ10__vector_6E5count+0x1>
    5198:	01 96       	adiw	r24, 0x01	; 1
    519a:	80 93 3b 46 	sts	0x463B, r24	; 0x80463b <_ZZ10__vector_6E5count>
    519e:	90 93 3c 46 	sts	0x463C, r25	; 0x80463c <_ZZ10__vector_6E5count+0x1>
	}	
	
	PORTA.INTFLAGS = 0xFF; /* Clear all flags */
    51a2:	8f ef       	ldi	r24, 0xFF	; 255
    51a4:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
}
    51a8:	9f 91       	pop	r25
    51aa:	8f 91       	pop	r24
    51ac:	0f 90       	pop	r0
    51ae:	0f be       	out	0x3f, r0	; 63
    51b0:	0f 90       	pop	r0
    51b2:	1f 90       	pop	r1
    51b4:	18 95       	reti

000051b6 <_Z10BINIO_initv>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    51b6:	80 b1       	in	r24, 0x00	; 0
    51b8:	8b 7f       	andi	r24, 0xFB	; 251
    51ba:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    51bc:	e2 e1       	ldi	r30, 0x12	; 18
    51be:	f4 e0       	ldi	r31, 0x04	; 4
    51c0:	80 81       	ld	r24, Z
    51c2:	88 7f       	andi	r24, 0xF8	; 248
    51c4:	82 60       	ori	r24, 0x02	; 2
    51c6:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    51c8:	80 b1       	in	r24, 0x00	; 0
    51ca:	88 60       	ori	r24, 0x08	; 8
    51cc:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    51ce:	81 b1       	in	r24, 0x01	; 1
    51d0:	87 7f       	andi	r24, 0xF7	; 247
    51d2:	81 b9       	out	0x01, r24	; 1
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    51d4:	80 b1       	in	r24, 0x00	; 0
    51d6:	8f 7e       	andi	r24, 0xEF	; 239
    51d8:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    51da:	e4 e1       	ldi	r30, 0x14	; 20
    51dc:	f4 e0       	ldi	r31, 0x04	; 4
    51de:	80 81       	ld	r24, Z
    51e0:	88 60       	ori	r24, 0x08	; 8
    51e2:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    51e4:	80 81       	ld	r24, Z
    51e6:	88 7f       	andi	r24, 0xF8	; 248
    51e8:	83 60       	ori	r24, 0x03	; 3
    51ea:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    51ec:	80 b1       	in	r24, 0x00	; 0
    51ee:	80 62       	ori	r24, 0x20	; 32
    51f0:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    51f2:	81 b1       	in	r24, 0x01	; 1
    51f4:	8f 7d       	andi	r24, 0xDF	; 223
    51f6:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    51f8:	80 b1       	in	r24, 0x00	; 0
    51fa:	80 64       	ori	r24, 0x40	; 64
    51fc:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    51fe:	81 b1       	in	r24, 0x01	; 1
    5200:	8f 7b       	andi	r24, 0xBF	; 191
    5202:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    5204:	80 b1       	in	r24, 0x00	; 0
    5206:	80 68       	ori	r24, 0x80	; 128
    5208:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    520a:	81 b1       	in	r24, 0x01	; 1
    520c:	8f 77       	andi	r24, 0x7F	; 127
    520e:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    5210:	84 b1       	in	r24, 0x04	; 4
    5212:	81 60       	ori	r24, 0x01	; 1
    5214:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    5216:	85 b1       	in	r24, 0x05	; 5
    5218:	8e 7f       	andi	r24, 0xFE	; 254
    521a:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    521c:	84 b1       	in	r24, 0x04	; 4
    521e:	82 60       	ori	r24, 0x02	; 2
    5220:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    5222:	85 b1       	in	r24, 0x05	; 5
    5224:	8d 7f       	andi	r24, 0xFD	; 253
    5226:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    5228:	84 b1       	in	r24, 0x04	; 4
    522a:	80 61       	ori	r24, 0x10	; 16
    522c:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    522e:	85 b1       	in	r24, 0x05	; 5
    5230:	8f 7e       	andi	r24, 0xEF	; 239
    5232:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    5234:	84 b1       	in	r24, 0x04	; 4
    5236:	80 62       	ori	r24, 0x20	; 32
    5238:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    523a:	85 b1       	in	r24, 0x05	; 5
    523c:	8f 7d       	andi	r24, 0xDF	; 223
    523e:	85 b9       	out	0x05, r24	; 5
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    5240:	88 b1       	in	r24, 0x08	; 8
    5242:	8f 7e       	andi	r24, 0xEF	; 239
    5244:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    5246:	88 b1       	in	r24, 0x08	; 8
    5248:	80 62       	ori	r24, 0x20	; 32
    524a:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    524c:	89 b1       	in	r24, 0x09	; 9
    524e:	8f 7d       	andi	r24, 0xDF	; 223
    5250:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    5252:	88 b1       	in	r24, 0x08	; 8
    5254:	80 64       	ori	r24, 0x40	; 64
    5256:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    5258:	89 b1       	in	r24, 0x09	; 9
    525a:	8f 7b       	andi	r24, 0xBF	; 191
    525c:	89 b9       	out	0x09, r24	; 9
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    525e:	88 b1       	in	r24, 0x08	; 8
    5260:	8f 77       	andi	r24, 0x7F	; 127
    5262:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    5264:	e7 e5       	ldi	r30, 0x57	; 87
    5266:	f4 e0       	ldi	r31, 0x04	; 4
    5268:	80 81       	ld	r24, Z
    526a:	88 60       	ori	r24, 0x08	; 8
    526c:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    526e:	80 81       	ld	r24, Z
    5270:	88 7f       	andi	r24, 0xF8	; 248
    5272:	83 60       	ori	r24, 0x03	; 3
    5274:	80 83       	st	Z, r24
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    5276:	8c b1       	in	r24, 0x0c	; 12
    5278:	8e 7f       	andi	r24, 0xFE	; 254
    527a:	8c b9       	out	0x0c, r24	; 12
    527c:	8c b1       	in	r24, 0x0c	; 12
    527e:	8d 7f       	andi	r24, 0xFD	; 253
    5280:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    5282:	a1 e7       	ldi	r26, 0x71	; 113
    5284:	b4 e0       	ldi	r27, 0x04	; 4
    5286:	8c 91       	ld	r24, X
    5288:	88 60       	ori	r24, 0x08	; 8
    528a:	8c 93       	st	X, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    528c:	8c 91       	ld	r24, X
    528e:	88 7f       	andi	r24, 0xF8	; 248
    5290:	83 60       	ori	r24, 0x03	; 3
    5292:	8c 93       	st	X, r24
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    5294:	8c b1       	in	r24, 0x0c	; 12
    5296:	8f 77       	andi	r24, 0x7F	; 127
    5298:	8c b9       	out	0x0c, r24	; 12
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    529a:	80 81       	ld	r24, Z
    529c:	87 7f       	andi	r24, 0xF7	; 247
    529e:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTE + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    52a0:	e0 e9       	ldi	r30, 0x90	; 144
    52a2:	f4 e0       	ldi	r31, 0x04	; 4
    52a4:	80 81       	ld	r24, Z
    52a6:	88 60       	ori	r24, 0x08	; 8
    52a8:	80 83       	st	Z, r24
    52aa:	e1 e9       	ldi	r30, 0x91	; 145
    52ac:	f4 e0       	ldi	r31, 0x04	; 4
    52ae:	80 81       	ld	r24, Z
    52b0:	88 60       	ori	r24, 0x08	; 8
    52b2:	80 83       	st	Z, r24
    52b4:	e2 e9       	ldi	r30, 0x92	; 146
    52b6:	f4 e0       	ldi	r31, 0x04	; 4
    52b8:	80 81       	ld	r24, Z
    52ba:	88 60       	ori	r24, 0x08	; 8
    52bc:	80 83       	st	Z, r24
    52be:	e3 e9       	ldi	r30, 0x93	; 147
    52c0:	f4 e0       	ldi	r31, 0x04	; 4
    52c2:	80 81       	ld	r24, Z
    52c4:	88 60       	ori	r24, 0x08	; 8
    52c6:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    52c8:	e2 eb       	ldi	r30, 0xB2	; 178
    52ca:	f4 e0       	ldi	r31, 0x04	; 4
    52cc:	80 81       	ld	r24, Z
    52ce:	88 60       	ori	r24, 0x08	; 8
    52d0:	80 83       	st	Z, r24
    52d2:	e3 eb       	ldi	r30, 0xB3	; 179
    52d4:	f4 e0       	ldi	r31, 0x04	; 4
    52d6:	80 81       	ld	r24, Z
    52d8:	88 60       	ori	r24, 0x08	; 8
    52da:	80 83       	st	Z, r24
    52dc:	e4 eb       	ldi	r30, 0xB4	; 180
    52de:	f4 e0       	ldi	r31, 0x04	; 4
    52e0:	80 81       	ld	r24, Z
    52e2:	88 60       	ori	r24, 0x08	; 8
    52e4:	80 83       	st	Z, r24
    52e6:	e5 eb       	ldi	r30, 0xB5	; 181
    52e8:	f4 e0       	ldi	r31, 0x04	; 4
    52ea:	80 81       	ld	r24, Z
    52ec:	88 60       	ori	r24, 0x08	; 8
    52ee:	80 83       	st	Z, r24
    52f0:	08 95       	ret

000052f2 <BOD_init>:
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */
    52f2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    52f6:	80 e0       	ldi	r24, 0x00	; 0
    52f8:	08 95       	ret

000052fa <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    52fa:	44 e2       	ldi	r20, 0x24	; 36
    52fc:	68 ed       	ldi	r22, 0xD8	; 216
    52fe:	88 e6       	ldi	r24, 0x68	; 104
    5300:	90 e0       	ldi	r25, 0x00	; 0
    5302:	0e 94 75 39 	call	0x72ea	; 0x72ea <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    5306:	80 e0       	ldi	r24, 0x00	; 0
    5308:	08 95       	ret

0000530a <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
    530a:	78 94       	sei

	return 0;
}
    530c:	80 e0       	ldi	r24, 0x00	; 0
    530e:	08 95       	ret

00005310 <_ZL9VREF_initv>:
static void VREF_init(void)
{
//	VREF.DAC0REF = VREF_REFSEL_2V048_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	VREF.DAC0REF = VREF_REFSEL_2V500_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	| VREF_ALWAYSON_bm;    /* Set the Voltage Reference in Always On mode */
	VREF.DAC0REF = VREF_REFSEL_2V500_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
    5310:	83 e0       	ldi	r24, 0x03	; 3
    5312:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
	/* Wait VREF start-up time */
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
    5316:	6a e0       	ldi	r22, 0x0A	; 10
    5318:	70 e0       	ldi	r23, 0x00	; 0
    531a:	80 e0       	ldi	r24, 0x00	; 0
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	0e 94 b6 42 	call	0x856c	; 0x856c <util_delay_ms>
    5322:	81 11       	cpse	r24, r1
    5324:	f8 cf       	rjmp	.-16     	; 0x5316 <_ZL9VREF_initv+0x6>
}
    5326:	08 95       	ret

00005328 <_Z11DAC0_setValj>:
}

void DAC0_setVal(uint16_t value)
{
	/* Store the two LSbs in DAC0.DATAL */
	DAC0.DATAL = (value & LSB_MASK) << 6;
    5328:	28 2f       	mov	r18, r24
    532a:	22 95       	swap	r18
    532c:	22 0f       	add	r18, r18
    532e:	22 0f       	add	r18, r18
    5330:	20 7c       	andi	r18, 0xC0	; 192
    5332:	e0 ea       	ldi	r30, 0xA0	; 160
    5334:	f6 e0       	ldi	r31, 0x06	; 6
    5336:	22 83       	std	Z+2, r18	; 0x02
	/* Store the eight MSbs in DAC0.DATAH */
	DAC0.DATAH = value >> 2;
    5338:	96 95       	lsr	r25
    533a:	87 95       	ror	r24
    533c:	96 95       	lsr	r25
    533e:	87 95       	ror	r24
    5340:	83 83       	std	Z+3, r24	; 0x03
    5342:	08 95       	ret

00005344 <_Z9DAC0_initv>:
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
}

void DAC0_init(void)
{
	VREF_init();
    5344:	0e 94 88 29 	call	0x5310	; 0x5310 <_ZL9VREF_initv>
	/* Disable digital input buffer */
	PORTD.PIN6CTRL &= ~PORT_ISC_gm;
    5348:	e0 e6       	ldi	r30, 0x60	; 96
    534a:	f4 e0       	ldi	r31, 0x04	; 4
    534c:	86 89       	ldd	r24, Z+22	; 0x16
    534e:	88 7f       	andi	r24, 0xF8	; 248
    5350:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    5352:	86 89       	ldd	r24, Z+22	; 0x16
    5354:	84 60       	ori	r24, 0x04	; 4
    5356:	86 8b       	std	Z+22, r24	; 0x16
	/* Disable pull-up resistor */
	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
    5358:	86 89       	ldd	r24, Z+22	; 0x16
    535a:	87 7f       	andi	r24, 0xF7	; 247
    535c:	86 8b       	std	Z+22, r24	; 0x16
	DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
	| DAC_OUTEN_bm           /* Enable output buffer */
	| DAC_RUNSTDBY_bm;       /* Enable Run in Standby mode */
    535e:	81 ec       	ldi	r24, 0xC1	; 193
    5360:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
	
	DAC0_setVal(DAC_DEFAULT_VALUE);
    5364:	80 e0       	ldi	r24, 0x00	; 0
    5366:	90 e0       	ldi	r25, 0x00	; 0
    5368:	0e 94 94 29 	call	0x5328	; 0x5328 <_Z11DAC0_setValj>
    536c:	08 95       	ret

0000536e <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    536e:	80 e0       	ldi	r24, 0x00	; 0
    5370:	88 30       	cpi	r24, 0x08	; 8
    5372:	48 f4       	brcc	.+18     	; 0x5386 <mcu_init+0x18>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5374:	e8 2f       	mov	r30, r24
    5376:	f0 e0       	ldi	r31, 0x00	; 0
    5378:	e0 5f       	subi	r30, 0xF0	; 240
    537a:	fb 4f       	sbci	r31, 0xFB	; 251
    537c:	90 81       	ld	r25, Z
    537e:	98 60       	ori	r25, 0x08	; 8
    5380:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    5382:	8f 5f       	subi	r24, 0xFF	; 255
    5384:	f5 cf       	rjmp	.-22     	; 0x5370 <mcu_init+0x2>
    5386:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5388:	88 30       	cpi	r24, 0x08	; 8
    538a:	48 f4       	brcc	.+18     	; 0x539e <mcu_init+0x30>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    538c:	e8 2f       	mov	r30, r24
    538e:	f0 e0       	ldi	r31, 0x00	; 0
    5390:	e0 5d       	subi	r30, 0xD0	; 208
    5392:	fb 4f       	sbci	r31, 0xFB	; 251
    5394:	90 81       	ld	r25, Z
    5396:	98 60       	ori	r25, 0x08	; 8
    5398:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    539a:	8f 5f       	subi	r24, 0xFF	; 255
    539c:	f5 cf       	rjmp	.-22     	; 0x5388 <mcu_init+0x1a>
    539e:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    53a0:	88 30       	cpi	r24, 0x08	; 8
    53a2:	48 f4       	brcc	.+18     	; 0x53b6 <mcu_init+0x48>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    53a4:	e8 2f       	mov	r30, r24
    53a6:	f0 e0       	ldi	r31, 0x00	; 0
    53a8:	e0 5b       	subi	r30, 0xB0	; 176
    53aa:	fb 4f       	sbci	r31, 0xFB	; 251
    53ac:	90 81       	ld	r25, Z
    53ae:	98 60       	ori	r25, 0x08	; 8
    53b0:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    53b2:	8f 5f       	subi	r24, 0xFF	; 255
    53b4:	f5 cf       	rjmp	.-22     	; 0x53a0 <mcu_init+0x32>
    53b6:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    53b8:	88 30       	cpi	r24, 0x08	; 8
    53ba:	48 f4       	brcc	.+18     	; 0x53ce <mcu_init+0x60>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    53bc:	e8 2f       	mov	r30, r24
    53be:	f0 e0       	ldi	r31, 0x00	; 0
    53c0:	e0 59       	subi	r30, 0x90	; 144
    53c2:	fb 4f       	sbci	r31, 0xFB	; 251
    53c4:	90 81       	ld	r25, Z
    53c6:	98 60       	ori	r25, 0x08	; 8
    53c8:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    53ca:	8f 5f       	subi	r24, 0xFF	; 255
    53cc:	f5 cf       	rjmp	.-22     	; 0x53b8 <mcu_init+0x4a>
    53ce:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    53d0:	88 30       	cpi	r24, 0x08	; 8
    53d2:	48 f4       	brcc	.+18     	; 0x53e6 <mcu_init+0x78>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    53d4:	e8 2f       	mov	r30, r24
    53d6:	f0 e0       	ldi	r31, 0x00	; 0
    53d8:	e0 57       	subi	r30, 0x70	; 112
    53da:	fb 4f       	sbci	r31, 0xFB	; 251
    53dc:	90 81       	ld	r25, Z
    53de:	98 60       	ori	r25, 0x08	; 8
    53e0:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    53e2:	8f 5f       	subi	r24, 0xFF	; 255
    53e4:	f5 cf       	rjmp	.-22     	; 0x53d0 <mcu_init+0x62>
    53e6:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    53e8:	88 30       	cpi	r24, 0x08	; 8
    53ea:	48 f4       	brcc	.+18     	; 0x53fe <mcu_init+0x90>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    53ec:	e8 2f       	mov	r30, r24
    53ee:	f0 e0       	ldi	r31, 0x00	; 0
    53f0:	e0 55       	subi	r30, 0x50	; 80
    53f2:	fb 4f       	sbci	r31, 0xFB	; 251
    53f4:	90 81       	ld	r25, Z
    53f6:	98 60       	ori	r25, 0x08	; 8
    53f8:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    53fa:	8f 5f       	subi	r24, 0xFF	; 255
    53fc:	f5 cf       	rjmp	.-22     	; 0x53e8 <mcu_init+0x7a>
    53fe:	08 95       	ret

00005400 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    5400:	0e 94 b7 29 	call	0x536e	; 0x536e <mcu_init>

	CLKCTRL_init(); /* Set CPU clock speed appropriately */
    5404:	0e 94 7d 29 	call	0x52fa	; 0x52fa <CLKCTRL_init>
	TIMERB_init(); /* Timers must be initialized before utility_delay functions will work */
    5408:	0e 94 99 42 	call	0x8532	; 0x8532 <TIMERB_init>
	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
    540c:	0e 94 85 29 	call	0x530a	; 0x530a <CPUINT_init>
	BINIO_init();
    5410:	0e 94 db 28 	call	0x51b6	; 0x51b6 <_Z10BINIO_initv>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    5414:	88 b1       	in	r24, 0x08	; 8
    5416:	80 64       	ori	r24, 0x40	; 64
    5418:	88 b9       	out	0x08, r24	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    541a:	89 b1       	in	r24, 0x09	; 9
    541c:	80 64       	ori	r24, 0x40	; 64
    541e:	89 b9       	out	0x09, r24	; 9

	LED_set_dir(PORT_DIR_OUT);
	LED_set_level(OFF);

	SLPCTRL_init();
    5420:	0e 94 97 42 	call	0x852e	; 0x852e <SLPCTRL_init>
	
	DAC0_init();
    5424:	0e 94 a2 29 	call	0x5344	; 0x5344 <_Z9DAC0_initv>

	linkbus_init(LB_BAUD, LINKBUS_USART);
    5428:	44 e0       	ldi	r20, 0x04	; 4
    542a:	60 e8       	ldi	r22, 0x80	; 128
    542c:	75 e2       	ldi	r23, 0x25	; 37
    542e:	80 e0       	ldi	r24, 0x00	; 0
    5430:	90 e0       	ldi	r25, 0x00	; 0
    5432:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <_Z12linkbus_initm14USART_Number_t>
	serialbus_init(SB_BAUD, SERIALBUS_USART);
    5436:	41 e0       	ldi	r20, 0x01	; 1
    5438:	60 e8       	ldi	r22, 0x80	; 128
    543a:	75 e2       	ldi	r23, 0x25	; 37
    543c:	80 e0       	ldi	r24, 0x00	; 0
    543e:	90 e0       	ldi	r25, 0x00	; 0
    5440:	0e 94 7b 3a 	call	0x74f6	; 0x74f6 <serialbus_init>

	BOD_init();
    5444:	0e 94 79 29 	call	0x52f2	; 0x52f2 <BOD_init>
    5448:	08 95       	ret

0000544a <_Z7bcd2dech>:
		
		data[0] = enable ? 0x00:0x04;	
		while(tries-- && (failure = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_CONTROL, data, 1) != 1)));
		
		return(failure);
	}
    544a:	28 2f       	mov	r18, r24
    544c:	30 e0       	ldi	r19, 0x00	; 0
    544e:	35 95       	asr	r19
    5450:	27 95       	ror	r18
    5452:	35 95       	asr	r19
    5454:	27 95       	ror	r18
    5456:	35 95       	asr	r19
    5458:	27 95       	ror	r18
    545a:	35 95       	asr	r19
    545c:	27 95       	ror	r18
    545e:	22 0f       	add	r18, r18
    5460:	92 2f       	mov	r25, r18
    5462:	99 0f       	add	r25, r25
    5464:	99 0f       	add	r25, r25
    5466:	29 0f       	add	r18, r25
    5468:	8f 70       	andi	r24, 0x0F	; 15
    546a:	82 0f       	add	r24, r18
    546c:	08 95       	ret

0000546e <_Z7dec2bcdh>:
    546e:	2d ec       	ldi	r18, 0xCD	; 205
    5470:	82 9f       	mul	r24, r18
    5472:	21 2d       	mov	r18, r1
    5474:	11 24       	eor	r1, r1
    5476:	92 2f       	mov	r25, r18
    5478:	96 95       	lsr	r25
    547a:	96 95       	lsr	r25
    547c:	96 95       	lsr	r25
    547e:	99 0f       	add	r25, r25
    5480:	39 2f       	mov	r19, r25
    5482:	33 0f       	add	r19, r19
    5484:	33 0f       	add	r19, r19
    5486:	93 0f       	add	r25, r19
    5488:	89 1b       	sub	r24, r25
    548a:	98 2f       	mov	r25, r24
    548c:	26 95       	lsr	r18
    548e:	26 95       	lsr	r18
    5490:	26 95       	lsr	r18
    5492:	80 e1       	ldi	r24, 0x10	; 16
    5494:	28 9f       	mul	r18, r24
    5496:	90 01       	movw	r18, r0
    5498:	11 24       	eor	r1, r1
    549a:	89 2f       	mov	r24, r25
    549c:	82 2b       	or	r24, r18
    549e:	08 95       	ret

000054a0 <_Z8char2bcdPc>:
    54a0:	fc 01       	movw	r30, r24
    54a2:	20 81       	ld	r18, Z
    54a4:	81 81       	ldd	r24, Z+1	; 0x01
    54a6:	f0 e1       	ldi	r31, 0x10	; 16
    54a8:	2f 9f       	mul	r18, r31
    54aa:	80 0d       	add	r24, r0
    54ac:	11 24       	eor	r1, r1
    54ae:	80 53       	subi	r24, 0x30	; 48
    54b0:	08 95       	ret

000054b2 <_Z14epoch_from_ltmP2tm>:
    54b2:	cf 92       	push	r12
    54b4:	df 92       	push	r13
    54b6:	ef 92       	push	r14
    54b8:	ff 92       	push	r15
    54ba:	fc 01       	movw	r30, r24
    54bc:	80 81       	ld	r24, Z
    54be:	21 81       	ldd	r18, Z+1	; 0x01
    54c0:	08 2e       	mov	r0, r24
    54c2:	00 0c       	add	r0, r0
    54c4:	99 0b       	sbc	r25, r25
    54c6:	ac 01       	movw	r20, r24
    54c8:	3c e3       	ldi	r19, 0x3C	; 60
    54ca:	23 02       	muls	r18, r19
    54cc:	40 0d       	add	r20, r0
    54ce:	51 1d       	adc	r21, r1
    54d0:	11 24       	eor	r1, r1
    54d2:	a2 81       	ldd	r26, Z+2	; 0x02
    54d4:	0a 2e       	mov	r0, r26
    54d6:	00 0c       	add	r0, r0
    54d8:	bb 0b       	sbc	r27, r27
    54da:	20 e1       	ldi	r18, 0x10	; 16
    54dc:	3e e0       	ldi	r19, 0x0E	; 14
    54de:	0e 94 d7 48 	call	0x91ae	; 0x91ae <__usmulhisi3>
    54e2:	6a 01       	movw	r12, r20
    54e4:	55 0f       	add	r21, r21
    54e6:	ee 08       	sbc	r14, r14
    54e8:	ff 08       	sbc	r15, r15
    54ea:	c6 0e       	add	r12, r22
    54ec:	d7 1e       	adc	r13, r23
    54ee:	e8 1e       	adc	r14, r24
    54f0:	f9 1e       	adc	r15, r25
    54f2:	a0 85       	ldd	r26, Z+8	; 0x08
    54f4:	b1 85       	ldd	r27, Z+9	; 0x09
    54f6:	20 e8       	ldi	r18, 0x80	; 128
    54f8:	31 e5       	ldi	r19, 0x51	; 81
    54fa:	41 e0       	ldi	r20, 0x01	; 1
    54fc:	50 e0       	ldi	r21, 0x00	; 0
    54fe:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <__mulshisi3>
    5502:	c6 0e       	add	r12, r22
    5504:	d7 1e       	adc	r13, r23
    5506:	e8 1e       	adc	r14, r24
    5508:	f9 1e       	adc	r15, r25
    550a:	06 80       	ldd	r0, Z+6	; 0x06
    550c:	f7 81       	ldd	r31, Z+7	; 0x07
    550e:	e0 2d       	mov	r30, r0
    5510:	df 01       	movw	r26, r30
    5512:	a6 54       	subi	r26, 0x46	; 70
    5514:	b1 09       	sbc	r27, r1
    5516:	20 e8       	ldi	r18, 0x80	; 128
    5518:	33 e3       	ldi	r19, 0x33	; 51
    551a:	41 ee       	ldi	r20, 0xE1	; 225
    551c:	51 e0       	ldi	r21, 0x01	; 1
    551e:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <__mulshisi3>
    5522:	c6 0e       	add	r12, r22
    5524:	d7 1e       	adc	r13, r23
    5526:	e8 1e       	adc	r14, r24
    5528:	f9 1e       	adc	r15, r25
    552a:	cf 01       	movw	r24, r30
    552c:	85 54       	subi	r24, 0x45	; 69
    552e:	91 09       	sbc	r25, r1
    5530:	dc 01       	movw	r26, r24
    5532:	0a f4       	brpl	.+2      	; 0x5536 <_Z14epoch_from_ltmP2tm+0x84>
    5534:	13 96       	adiw	r26, 0x03	; 3
    5536:	b5 95       	asr	r27
    5538:	a7 95       	ror	r26
    553a:	b5 95       	asr	r27
    553c:	a7 95       	ror	r26
    553e:	20 e8       	ldi	r18, 0x80	; 128
    5540:	31 e5       	ldi	r19, 0x51	; 81
    5542:	41 e0       	ldi	r20, 0x01	; 1
    5544:	50 e0       	ldi	r21, 0x00	; 0
    5546:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <__mulshisi3>
    554a:	c6 0e       	add	r12, r22
    554c:	d7 1e       	adc	r13, r23
    554e:	e8 1e       	adc	r14, r24
    5550:	f9 1e       	adc	r15, r25
    5552:	cf 01       	movw	r24, r30
    5554:	01 97       	sbiw	r24, 0x01	; 1
    5556:	64 e6       	ldi	r22, 0x64	; 100
    5558:	70 e0       	ldi	r23, 0x00	; 0
    555a:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
    555e:	db 01       	movw	r26, r22
    5560:	20 e8       	ldi	r18, 0x80	; 128
    5562:	3e ea       	ldi	r19, 0xAE	; 174
    5564:	4e ef       	ldi	r20, 0xFE	; 254
    5566:	5f ef       	ldi	r21, 0xFF	; 255
    5568:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <__mulshisi3>
    556c:	c6 0e       	add	r12, r22
    556e:	d7 1e       	adc	r13, r23
    5570:	e8 1e       	adc	r14, r24
    5572:	f9 1e       	adc	r15, r25
    5574:	cf 01       	movw	r24, r30
    5576:	85 5d       	subi	r24, 0xD5	; 213
    5578:	9e 4f       	sbci	r25, 0xFE	; 254
    557a:	60 e9       	ldi	r22, 0x90	; 144
    557c:	71 e0       	ldi	r23, 0x01	; 1
    557e:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
    5582:	db 01       	movw	r26, r22
    5584:	20 e8       	ldi	r18, 0x80	; 128
    5586:	31 e5       	ldi	r19, 0x51	; 81
    5588:	41 e0       	ldi	r20, 0x01	; 1
    558a:	50 e0       	ldi	r21, 0x00	; 0
    558c:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <__mulshisi3>
    5590:	6c 0d       	add	r22, r12
    5592:	7d 1d       	adc	r23, r13
    5594:	8e 1d       	adc	r24, r14
    5596:	9f 1d       	adc	r25, r15
    5598:	ff 90       	pop	r15
    559a:	ef 90       	pop	r14
    559c:	df 90       	pop	r13
    559e:	cf 90       	pop	r12
    55a0:	08 95       	ret

000055a2 <ds3231_get_epoch>:
    55a2:	4f 92       	push	r4
    55a4:	5f 92       	push	r5
    55a6:	6f 92       	push	r6
    55a8:	7f 92       	push	r7
    55aa:	8f 92       	push	r8
    55ac:	9f 92       	push	r9
    55ae:	af 92       	push	r10
    55b0:	bf 92       	push	r11
    55b2:	cf 92       	push	r12
    55b4:	df 92       	push	r13
    55b6:	ef 92       	push	r14
    55b8:	ff 92       	push	r15
    55ba:	0f 93       	push	r16
    55bc:	1f 93       	push	r17
    55be:	cf 93       	push	r28
    55c0:	df 93       	push	r29
    55c2:	cd b7       	in	r28, 0x3d	; 61
    55c4:	de b7       	in	r29, 0x3e	; 62
    55c6:	63 97       	sbiw	r28, 0x13	; 19
    55c8:	cd bf       	out	0x3d, r28	; 61
    55ca:	de bf       	out	0x3e, r29	; 62
    55cc:	7c 01       	movw	r14, r24
    55ce:	fe 01       	movw	r30, r28
    55d0:	31 96       	adiw	r30, 0x01	; 1
    55d2:	87 e0       	ldi	r24, 0x07	; 7
    55d4:	df 01       	movw	r26, r30
    55d6:	1d 92       	st	X+, r1
    55d8:	8a 95       	dec	r24
    55da:	e9 f7       	brne	.-6      	; 0x55d6 <ds3231_get_epoch+0x34>
    55dc:	8a e0       	ldi	r24, 0x0A	; 10
    55de:	1f ef       	ldi	r17, 0xFF	; 255
    55e0:	18 0f       	add	r17, r24
    55e2:	88 23       	and	r24, r24
    55e4:	81 f0       	breq	.+32     	; 0x5606 <ds3231_get_epoch+0x64>
    55e6:	27 e0       	ldi	r18, 0x07	; 7
    55e8:	ae 01       	movw	r20, r28
    55ea:	4f 5f       	subi	r20, 0xFF	; 255
    55ec:	5f 4f       	sbci	r21, 0xFF	; 255
    55ee:	60 e0       	ldi	r22, 0x00	; 0
    55f0:	80 ed       	ldi	r24, 0xD0	; 208
    55f2:	0e 94 23 34 	call	0x6846	; 0x6846 <I2C_0_GetData>
    55f6:	01 e0       	ldi	r16, 0x01	; 1
    55f8:	87 30       	cpi	r24, 0x07	; 7
    55fa:	09 f4       	brne	.+2      	; 0x55fe <ds3231_get_epoch+0x5c>
    55fc:	00 e0       	ldi	r16, 0x00	; 0
    55fe:	87 30       	cpi	r24, 0x07	; 7
    5600:	21 f0       	breq	.+8      	; 0x560a <ds3231_get_epoch+0x68>
    5602:	91 e0       	ldi	r25, 0x01	; 1
    5604:	03 c0       	rjmp	.+6      	; 0x560c <ds3231_get_epoch+0x6a>
    5606:	90 e0       	ldi	r25, 0x00	; 0
    5608:	01 c0       	rjmp	.+2      	; 0x560c <ds3231_get_epoch+0x6a>
    560a:	90 e0       	ldi	r25, 0x00	; 0
    560c:	81 2f       	mov	r24, r17
    560e:	91 11       	cpse	r25, r1
    5610:	e6 cf       	rjmp	.-52     	; 0x55de <ds3231_get_epoch+0x3c>
    5612:	01 11       	cpse	r16, r1
    5614:	f3 c0       	rjmp	.+486    	; 0x57fc <ds3231_get_epoch+0x25a>
    5616:	fe 01       	movw	r30, r28
    5618:	38 96       	adiw	r30, 0x08	; 8
    561a:	8c e0       	ldi	r24, 0x0C	; 12
    561c:	df 01       	movw	r26, r30
    561e:	1d 92       	st	X+, r1
    5620:	8a 95       	dec	r24
    5622:	e9 f7       	brne	.-6      	; 0x561e <ds3231_get_epoch+0x7c>
    5624:	2f 81       	ldd	r18, Y+7	; 0x07
    5626:	82 2f       	mov	r24, r18
    5628:	8f 70       	andi	r24, 0x0F	; 15
    562a:	a8 2e       	mov	r10, r24
    562c:	b1 2c       	mov	r11, r1
    562e:	c5 01       	movw	r24, r10
    5630:	8c 59       	subi	r24, 0x9C	; 156
    5632:	9f 4f       	sbci	r25, 0xFF	; 255
    5634:	22 95       	swap	r18
    5636:	2f 70       	andi	r18, 0x0F	; 15
    5638:	30 e0       	ldi	r19, 0x00	; 0
    563a:	59 01       	movw	r10, r18
    563c:	aa 0c       	add	r10, r10
    563e:	bb 1c       	adc	r11, r11
    5640:	22 0f       	add	r18, r18
    5642:	33 1f       	adc	r19, r19
    5644:	22 0f       	add	r18, r18
    5646:	33 1f       	adc	r19, r19
    5648:	22 0f       	add	r18, r18
    564a:	33 1f       	adc	r19, r19
    564c:	2a 0d       	add	r18, r10
    564e:	3b 1d       	adc	r19, r11
    5650:	5c 01       	movw	r10, r24
    5652:	a2 0e       	add	r10, r18
    5654:	b3 1e       	adc	r11, r19
    5656:	65 01       	movw	r12, r10
    5658:	b4 e9       	ldi	r27, 0x94	; 148
    565a:	cb 1a       	sub	r12, r27
    565c:	b8 ef       	ldi	r27, 0xF8	; 248
    565e:	db 0a       	sbc	r13, r27
    5660:	8e 81       	ldd	r24, Y+6	; 0x06
    5662:	98 2f       	mov	r25, r24
    5664:	9f 70       	andi	r25, 0x0F	; 15
    5666:	82 95       	swap	r24
    5668:	8f 70       	andi	r24, 0x0F	; 15
    566a:	88 0f       	add	r24, r24
    566c:	98 2e       	mov	r9, r24
    566e:	99 0c       	add	r9, r9
    5670:	99 0c       	add	r9, r9
    5672:	89 0d       	add	r24, r9
    5674:	98 2e       	mov	r9, r24
    5676:	99 0e       	add	r9, r25
    5678:	ed 81       	ldd	r30, Y+5	; 0x05
    567a:	8e 2f       	mov	r24, r30
    567c:	8f 70       	andi	r24, 0x0F	; 15
    567e:	e2 95       	swap	r30
    5680:	ef 70       	andi	r30, 0x0F	; 15
    5682:	ee 0f       	add	r30, r30
    5684:	8e 2e       	mov	r8, r30
    5686:	88 0c       	add	r8, r8
    5688:	88 0c       	add	r8, r8
    568a:	e8 0d       	add	r30, r8
    568c:	8e 2e       	mov	r8, r30
    568e:	88 0e       	add	r8, r24
    5690:	11 e0       	ldi	r17, 0x01	; 1
    5692:	19 15       	cp	r17, r9
    5694:	60 f4       	brcc	.+24     	; 0x56ae <ds3231_get_epoch+0x10c>
    5696:	61 2f       	mov	r22, r17
    5698:	c6 01       	movw	r24, r12
    569a:	0e 94 17 02 	call	0x42e	; 0x42e <month_length>
    569e:	28 89       	ldd	r18, Y+16	; 0x10
    56a0:	39 89       	ldd	r19, Y+17	; 0x11
    56a2:	28 0f       	add	r18, r24
    56a4:	31 1d       	adc	r19, r1
    56a6:	28 8b       	std	Y+16, r18	; 0x10
    56a8:	39 8b       	std	Y+17, r19	; 0x11
    56aa:	1f 5f       	subi	r17, 0xFF	; 255
    56ac:	f2 cf       	rjmp	.-28     	; 0x5692 <ds3231_get_epoch+0xf0>
    56ae:	e8 2d       	mov	r30, r8
    56b0:	88 0c       	add	r8, r8
    56b2:	ff 0b       	sbc	r31, r31
    56b4:	31 97       	sbiw	r30, 0x01	; 1
    56b6:	88 89       	ldd	r24, Y+16	; 0x10
    56b8:	99 89       	ldd	r25, Y+17	; 0x11
    56ba:	e8 0f       	add	r30, r24
    56bc:	f9 1f       	adc	r31, r25
    56be:	29 81       	ldd	r18, Y+1	; 0x01
    56c0:	42 2f       	mov	r20, r18
    56c2:	42 95       	swap	r20
    56c4:	4f 70       	andi	r20, 0x0F	; 15
    56c6:	44 0f       	add	r20, r20
    56c8:	94 2f       	mov	r25, r20
    56ca:	99 0f       	add	r25, r25
    56cc:	99 0f       	add	r25, r25
    56ce:	84 2f       	mov	r24, r20
    56d0:	89 0f       	add	r24, r25
    56d2:	42 2f       	mov	r20, r18
    56d4:	4f 70       	andi	r20, 0x0F	; 15
    56d6:	48 0f       	add	r20, r24
    56d8:	3a 81       	ldd	r19, Y+2	; 0x02
    56da:	23 2f       	mov	r18, r19
    56dc:	22 95       	swap	r18
    56de:	2f 70       	andi	r18, 0x0F	; 15
    56e0:	22 0f       	add	r18, r18
    56e2:	92 2f       	mov	r25, r18
    56e4:	99 0f       	add	r25, r25
    56e6:	99 0f       	add	r25, r25
    56e8:	82 2f       	mov	r24, r18
    56ea:	89 0f       	add	r24, r25
    56ec:	23 2f       	mov	r18, r19
    56ee:	2f 70       	andi	r18, 0x0F	; 15
    56f0:	28 0f       	add	r18, r24
    56f2:	3b 81       	ldd	r19, Y+3	; 0x03
    56f4:	53 2f       	mov	r21, r19
    56f6:	50 72       	andi	r21, 0x20	; 32
    56f8:	83 2f       	mov	r24, r19
    56fa:	90 e0       	ldi	r25, 0x00	; 0
    56fc:	95 95       	asr	r25
    56fe:	87 95       	ror	r24
    5700:	95 95       	asr	r25
    5702:	87 95       	ror	r24
    5704:	95 95       	asr	r25
    5706:	87 95       	ror	r24
    5708:	95 95       	asr	r25
    570a:	87 95       	ror	r24
    570c:	81 70       	andi	r24, 0x01	; 1
    570e:	88 0f       	add	r24, r24
    5710:	a8 2f       	mov	r26, r24
    5712:	aa 0f       	add	r26, r26
    5714:	aa 0f       	add	r26, r26
    5716:	8a 0f       	add	r24, r26
    5718:	a3 2f       	mov	r26, r19
    571a:	af 70       	andi	r26, 0x0F	; 15
    571c:	a8 0f       	add	r26, r24
    571e:	36 ff       	sbrs	r19, 6
    5720:	04 c0       	rjmp	.+8      	; 0x572a <ds3231_get_epoch+0x188>
    5722:	55 23       	and	r21, r21
    5724:	21 f0       	breq	.+8      	; 0x572e <ds3231_get_epoch+0x18c>
    5726:	a4 5f       	subi	r26, 0xF4	; 244
    5728:	02 c0       	rjmp	.+4      	; 0x572e <ds3231_get_epoch+0x18c>
    572a:	51 11       	cpse	r21, r1
    572c:	ac 5e       	subi	r26, 0xEC	; 236
    572e:	04 2e       	mov	r0, r20
    5730:	00 0c       	add	r0, r0
    5732:	55 0b       	sbc	r21, r21
    5734:	8c e3       	ldi	r24, 0x3C	; 60
    5736:	28 02       	muls	r18, r24
    5738:	40 0d       	add	r20, r0
    573a:	51 1d       	adc	r21, r1
    573c:	11 24       	eor	r1, r1
    573e:	0a 2e       	mov	r0, r26
    5740:	00 0c       	add	r0, r0
    5742:	bb 0b       	sbc	r27, r27
    5744:	20 e1       	ldi	r18, 0x10	; 16
    5746:	3e e0       	ldi	r19, 0x0E	; 14
    5748:	0e 94 d7 48 	call	0x91ae	; 0x91ae <__usmulhisi3>
    574c:	2a 01       	movw	r4, r20
    574e:	55 0f       	add	r21, r21
    5750:	66 08       	sbc	r6, r6
    5752:	77 08       	sbc	r7, r7
    5754:	46 0e       	add	r4, r22
    5756:	57 1e       	adc	r5, r23
    5758:	68 1e       	adc	r6, r24
    575a:	79 1e       	adc	r7, r25
    575c:	df 01       	movw	r26, r30
    575e:	20 e8       	ldi	r18, 0x80	; 128
    5760:	31 e5       	ldi	r19, 0x51	; 81
    5762:	41 e0       	ldi	r20, 0x01	; 1
    5764:	50 e0       	ldi	r21, 0x00	; 0
    5766:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <__mulshisi3>
    576a:	46 0e       	add	r4, r22
    576c:	57 1e       	adc	r5, r23
    576e:	68 1e       	adc	r6, r24
    5770:	79 1e       	adc	r7, r25
    5772:	d5 01       	movw	r26, r10
    5774:	a6 54       	subi	r26, 0x46	; 70
    5776:	b1 09       	sbc	r27, r1
    5778:	20 e8       	ldi	r18, 0x80	; 128
    577a:	33 e3       	ldi	r19, 0x33	; 51
    577c:	41 ee       	ldi	r20, 0xE1	; 225
    577e:	51 e0       	ldi	r21, 0x01	; 1
    5780:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <__mulshisi3>
    5784:	46 0e       	add	r4, r22
    5786:	57 1e       	adc	r5, r23
    5788:	68 1e       	adc	r6, r24
    578a:	79 1e       	adc	r7, r25
    578c:	c5 01       	movw	r24, r10
    578e:	85 54       	subi	r24, 0x45	; 69
    5790:	91 09       	sbc	r25, r1
    5792:	dc 01       	movw	r26, r24
    5794:	0a f4       	brpl	.+2      	; 0x5798 <ds3231_get_epoch+0x1f6>
    5796:	13 96       	adiw	r26, 0x03	; 3
    5798:	b5 95       	asr	r27
    579a:	a7 95       	ror	r26
    579c:	b5 95       	asr	r27
    579e:	a7 95       	ror	r26
    57a0:	20 e8       	ldi	r18, 0x80	; 128
    57a2:	31 e5       	ldi	r19, 0x51	; 81
    57a4:	41 e0       	ldi	r20, 0x01	; 1
    57a6:	50 e0       	ldi	r21, 0x00	; 0
    57a8:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <__mulshisi3>
    57ac:	46 0e       	add	r4, r22
    57ae:	57 1e       	adc	r5, r23
    57b0:	68 1e       	adc	r6, r24
    57b2:	79 1e       	adc	r7, r25
    57b4:	c5 01       	movw	r24, r10
    57b6:	01 97       	sbiw	r24, 0x01	; 1
    57b8:	64 e6       	ldi	r22, 0x64	; 100
    57ba:	70 e0       	ldi	r23, 0x00	; 0
    57bc:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
    57c0:	db 01       	movw	r26, r22
    57c2:	20 e8       	ldi	r18, 0x80	; 128
    57c4:	3e ea       	ldi	r19, 0xAE	; 174
    57c6:	4e ef       	ldi	r20, 0xFE	; 254
    57c8:	5f ef       	ldi	r21, 0xFF	; 255
    57ca:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <__mulshisi3>
    57ce:	46 0e       	add	r4, r22
    57d0:	57 1e       	adc	r5, r23
    57d2:	68 1e       	adc	r6, r24
    57d4:	79 1e       	adc	r7, r25
    57d6:	c5 01       	movw	r24, r10
    57d8:	85 5d       	subi	r24, 0xD5	; 213
    57da:	9e 4f       	sbci	r25, 0xFE	; 254
    57dc:	60 e9       	ldi	r22, 0x90	; 144
    57de:	71 e0       	ldi	r23, 0x01	; 1
    57e0:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <__divmodhi4>
    57e4:	db 01       	movw	r26, r22
    57e6:	20 e8       	ldi	r18, 0x80	; 128
    57e8:	31 e5       	ldi	r19, 0x51	; 81
    57ea:	41 e0       	ldi	r20, 0x01	; 1
    57ec:	50 e0       	ldi	r21, 0x00	; 0
    57ee:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <__mulshisi3>
    57f2:	64 0d       	add	r22, r4
    57f4:	75 1d       	adc	r23, r5
    57f6:	86 1d       	adc	r24, r6
    57f8:	97 1d       	adc	r25, r7
    57fa:	03 c0       	rjmp	.+6      	; 0x5802 <ds3231_get_epoch+0x260>
    57fc:	60 e0       	ldi	r22, 0x00	; 0
    57fe:	70 e0       	ldi	r23, 0x00	; 0
    5800:	cb 01       	movw	r24, r22
    5802:	e1 14       	cp	r14, r1
    5804:	f1 04       	cpc	r15, r1
    5806:	39 f0       	breq	.+14     	; 0x5816 <ds3231_get_epoch+0x274>
    5808:	00 23       	and	r16, r16
    580a:	11 f0       	breq	.+4      	; 0x5810 <ds3231_get_epoch+0x26e>
    580c:	2c ef       	ldi	r18, 0xFC	; 252
    580e:	01 c0       	rjmp	.+2      	; 0x5812 <ds3231_get_epoch+0x270>
    5810:	20 e0       	ldi	r18, 0x00	; 0
    5812:	d7 01       	movw	r26, r14
    5814:	2c 93       	st	X, r18
    5816:	63 96       	adiw	r28, 0x13	; 19
    5818:	cd bf       	out	0x3d, r28	; 61
    581a:	de bf       	out	0x3e, r29	; 62
    581c:	df 91       	pop	r29
    581e:	cf 91       	pop	r28
    5820:	1f 91       	pop	r17
    5822:	0f 91       	pop	r16
    5824:	ff 90       	pop	r15
    5826:	ef 90       	pop	r14
    5828:	df 90       	pop	r13
    582a:	cf 90       	pop	r12
    582c:	bf 90       	pop	r11
    582e:	af 90       	pop	r10
    5830:	9f 90       	pop	r9
    5832:	8f 90       	pop	r8
    5834:	7f 90       	pop	r7
    5836:	6f 90       	pop	r6
    5838:	5f 90       	pop	r5
    583a:	4f 90       	pop	r4
    583c:	08 95       	ret

0000583e <RTC_String2Epoch>:
    583e:	7f 92       	push	r7
    5840:	8f 92       	push	r8
    5842:	9f 92       	push	r9
    5844:	af 92       	push	r10
    5846:	bf 92       	push	r11
    5848:	cf 92       	push	r12
    584a:	df 92       	push	r13
    584c:	ef 92       	push	r14
    584e:	ff 92       	push	r15
    5850:	0f 93       	push	r16
    5852:	1f 93       	push	r17
    5854:	cf 93       	push	r28
    5856:	df 93       	push	r29
    5858:	cd b7       	in	r28, 0x3d	; 61
    585a:	de b7       	in	r29, 0x3e	; 62
    585c:	2c 97       	sbiw	r28, 0x0c	; 12
    585e:	cd bf       	out	0x3d, r28	; 61
    5860:	de bf       	out	0x3e, r29	; 62
    5862:	6c 01       	movw	r12, r24
    5864:	8b 01       	movw	r16, r22
    5866:	fe 01       	movw	r30, r28
    5868:	31 96       	adiw	r30, 0x01	; 1
    586a:	8c e0       	ldi	r24, 0x0C	; 12
    586c:	df 01       	movw	r26, r30
    586e:	1d 92       	st	X+, r1
    5870:	8a 95       	dec	r24
    5872:	e9 f7       	brne	.-6      	; 0x586e <RTC_String2Epoch+0x30>
    5874:	61 15       	cp	r22, r1
    5876:	71 05       	cpc	r23, r1
    5878:	09 f4       	brne	.+2      	; 0x587c <RTC_String2Epoch+0x3e>
    587a:	63 c0       	rjmp	.+198    	; 0x5942 <RTC_String2Epoch+0x104>
    587c:	cb 01       	movw	r24, r22
    587e:	0a 96       	adiw	r24, 0x0a	; 10
    5880:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <_Z8char2bcdPc>
    5884:	a8 2e       	mov	r10, r24
    5886:	c8 01       	movw	r24, r16
    5888:	08 96       	adiw	r24, 0x08	; 8
    588a:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <_Z8char2bcdPc>
    588e:	b8 2e       	mov	r11, r24
    5890:	c8 01       	movw	r24, r16
    5892:	06 96       	adiw	r24, 0x06	; 6
    5894:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <_Z8char2bcdPc>
    5898:	f8 2e       	mov	r15, r24
    589a:	c8 01       	movw	r24, r16
    589c:	04 96       	adiw	r24, 0x04	; 4
    589e:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <_Z8char2bcdPc>
    58a2:	88 2e       	mov	r8, r24
    58a4:	c8 01       	movw	r24, r16
    58a6:	02 96       	adiw	r24, 0x02	; 2
    58a8:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <_Z8char2bcdPc>
    58ac:	78 2e       	mov	r7, r24
    58ae:	c8 01       	movw	r24, r16
    58b0:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <_Z8char2bcdPc>
    58b4:	18 2f       	mov	r17, r24
    58b6:	8f 2d       	mov	r24, r15
    58b8:	0e 94 25 2a 	call	0x544a	; 0x544a <_Z7bcd2dech>
    58bc:	98 2e       	mov	r9, r24
    58be:	81 2f       	mov	r24, r17
    58c0:	0e 94 25 2a 	call	0x544a	; 0x544a <_Z7bcd2dech>
    58c4:	e8 2e       	mov	r14, r24
    58c6:	f1 2c       	mov	r15, r1
    58c8:	c7 01       	movw	r24, r14
    58ca:	8c 59       	subi	r24, 0x9C	; 156
    58cc:	9f 4f       	sbci	r25, 0xFF	; 255
    58ce:	8f 83       	std	Y+7, r24	; 0x07
    58d0:	98 87       	std	Y+8, r25	; 0x08
    58d2:	b0 e3       	ldi	r27, 0x30	; 48
    58d4:	eb 1a       	sub	r14, r27
    58d6:	b8 ef       	ldi	r27, 0xF8	; 248
    58d8:	fb 0a       	sbc	r15, r27
    58da:	87 2d       	mov	r24, r7
    58dc:	0e 94 25 2a 	call	0x544a	; 0x544a <_Z7bcd2dech>
    58e0:	08 2f       	mov	r16, r24
    58e2:	8f ef       	ldi	r24, 0xFF	; 255
    58e4:	80 0f       	add	r24, r16
    58e6:	8e 83       	std	Y+6, r24	; 0x06
    58e8:	88 2d       	mov	r24, r8
    58ea:	0e 94 25 2a 	call	0x544a	; 0x544a <_Z7bcd2dech>
    58ee:	8c 83       	std	Y+4, r24	; 0x04
    58f0:	11 e0       	ldi	r17, 0x01	; 1
    58f2:	10 17       	cp	r17, r16
    58f4:	60 f4       	brcc	.+24     	; 0x590e <RTC_String2Epoch+0xd0>
    58f6:	61 2f       	mov	r22, r17
    58f8:	c7 01       	movw	r24, r14
    58fa:	0e 94 17 02 	call	0x42e	; 0x42e <month_length>
    58fe:	29 85       	ldd	r18, Y+9	; 0x09
    5900:	3a 85       	ldd	r19, Y+10	; 0x0a
    5902:	28 0f       	add	r18, r24
    5904:	31 1d       	adc	r19, r1
    5906:	29 87       	std	Y+9, r18	; 0x09
    5908:	3a 87       	std	Y+10, r19	; 0x0a
    590a:	1f 5f       	subi	r17, 0xFF	; 255
    590c:	f2 cf       	rjmp	.-28     	; 0x58f2 <RTC_String2Epoch+0xb4>
    590e:	8c 81       	ldd	r24, Y+4	; 0x04
    5910:	08 2e       	mov	r0, r24
    5912:	00 0c       	add	r0, r0
    5914:	99 0b       	sbc	r25, r25
    5916:	01 97       	sbiw	r24, 0x01	; 1
    5918:	29 85       	ldd	r18, Y+9	; 0x09
    591a:	3a 85       	ldd	r19, Y+10	; 0x0a
    591c:	82 0f       	add	r24, r18
    591e:	93 1f       	adc	r25, r19
    5920:	89 87       	std	Y+9, r24	; 0x09
    5922:	9a 87       	std	Y+10, r25	; 0x0a
    5924:	8a 2d       	mov	r24, r10
    5926:	0e 94 25 2a 	call	0x544a	; 0x544a <_Z7bcd2dech>
    592a:	18 2f       	mov	r17, r24
    592c:	8b 2d       	mov	r24, r11
    592e:	0e 94 25 2a 	call	0x544a	; 0x544a <_Z7bcd2dech>
    5932:	9b 82       	std	Y+3, r9	; 0x03
    5934:	8a 83       	std	Y+2, r24	; 0x02
    5936:	19 83       	std	Y+1, r17	; 0x01
    5938:	ce 01       	movw	r24, r28
    593a:	01 96       	adiw	r24, 0x01	; 1
    593c:	0e 94 59 2a 	call	0x54b2	; 0x54b2 <_Z14epoch_from_ltmP2tm>
    5940:	04 c0       	rjmp	.+8      	; 0x594a <RTC_String2Epoch+0x10c>
    5942:	80 e0       	ldi	r24, 0x00	; 0
    5944:	90 e0       	ldi	r25, 0x00	; 0
    5946:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <ds3231_get_epoch>
    594a:	c1 14       	cp	r12, r1
    594c:	d1 04       	cpc	r13, r1
    594e:	49 f0       	breq	.+18     	; 0x5962 <RTC_String2Epoch+0x124>
    5950:	21 e0       	ldi	r18, 0x01	; 1
    5952:	61 15       	cp	r22, r1
    5954:	71 05       	cpc	r23, r1
    5956:	81 05       	cpc	r24, r1
    5958:	91 05       	cpc	r25, r1
    595a:	09 f0       	breq	.+2      	; 0x595e <RTC_String2Epoch+0x120>
    595c:	20 e0       	ldi	r18, 0x00	; 0
    595e:	f6 01       	movw	r30, r12
    5960:	20 83       	st	Z, r18
    5962:	2c 96       	adiw	r28, 0x0c	; 12
    5964:	cd bf       	out	0x3d, r28	; 61
    5966:	de bf       	out	0x3e, r29	; 62
    5968:	df 91       	pop	r29
    596a:	cf 91       	pop	r28
    596c:	1f 91       	pop	r17
    596e:	0f 91       	pop	r16
    5970:	ff 90       	pop	r15
    5972:	ef 90       	pop	r14
    5974:	df 90       	pop	r13
    5976:	cf 90       	pop	r12
    5978:	bf 90       	pop	r11
    597a:	af 90       	pop	r10
    597c:	9f 90       	pop	r9
    597e:	8f 90       	pop	r8
    5980:	7f 90       	pop	r7
    5982:	08 95       	ret

00005984 <ds3231_get_temp>:
    5984:	ef 92       	push	r14
    5986:	ff 92       	push	r15
    5988:	1f 93       	push	r17
    598a:	cf 93       	push	r28
    598c:	df 93       	push	r29
    598e:	00 d0       	rcall	.+0      	; 0x5990 <ds3231_get_temp+0xc>
    5990:	cd b7       	in	r28, 0x3d	; 61
    5992:	de b7       	in	r29, 0x3e	; 62
    5994:	7c 01       	movw	r14, r24
    5996:	19 82       	std	Y+1, r1	; 0x01
    5998:	1a 82       	std	Y+2, r1	; 0x02
    599a:	8a e0       	ldi	r24, 0x0A	; 10
    599c:	1f ef       	ldi	r17, 0xFF	; 255
    599e:	18 0f       	add	r17, r24
    59a0:	88 23       	and	r24, r24
    59a2:	81 f0       	breq	.+32     	; 0x59c4 <ds3231_get_temp+0x40>
    59a4:	22 e0       	ldi	r18, 0x02	; 2
    59a6:	ae 01       	movw	r20, r28
    59a8:	4f 5f       	subi	r20, 0xFF	; 255
    59aa:	5f 4f       	sbci	r21, 0xFF	; 255
    59ac:	61 e1       	ldi	r22, 0x11	; 17
    59ae:	80 ed       	ldi	r24, 0xD0	; 208
    59b0:	0e 94 23 34 	call	0x6846	; 0x6846 <I2C_0_GetData>
    59b4:	21 e0       	ldi	r18, 0x01	; 1
    59b6:	82 30       	cpi	r24, 0x02	; 2
    59b8:	09 f4       	brne	.+2      	; 0x59bc <ds3231_get_temp+0x38>
    59ba:	20 e0       	ldi	r18, 0x00	; 0
    59bc:	82 30       	cpi	r24, 0x02	; 2
    59be:	21 f0       	breq	.+8      	; 0x59c8 <ds3231_get_temp+0x44>
    59c0:	91 e0       	ldi	r25, 0x01	; 1
    59c2:	03 c0       	rjmp	.+6      	; 0x59ca <ds3231_get_temp+0x46>
    59c4:	90 e0       	ldi	r25, 0x00	; 0
    59c6:	01 c0       	rjmp	.+2      	; 0x59ca <ds3231_get_temp+0x46>
    59c8:	90 e0       	ldi	r25, 0x00	; 0
    59ca:	81 2f       	mov	r24, r17
    59cc:	91 11       	cpse	r25, r1
    59ce:	e6 cf       	rjmp	.-52     	; 0x599c <ds3231_get_temp+0x18>
    59d0:	21 11       	cpse	r18, r1
    59d2:	09 c0       	rjmp	.+18     	; 0x59e6 <ds3231_get_temp+0x62>
    59d4:	89 81       	ldd	r24, Y+1	; 0x01
    59d6:	90 e0       	ldi	r25, 0x00	; 0
    59d8:	98 2f       	mov	r25, r24
    59da:	88 27       	eor	r24, r24
    59dc:	3a 81       	ldd	r19, Y+2	; 0x02
    59de:	83 2b       	or	r24, r19
    59e0:	f7 01       	movw	r30, r14
    59e2:	80 83       	st	Z, r24
    59e4:	91 83       	std	Z+1, r25	; 0x01
    59e6:	82 2f       	mov	r24, r18
    59e8:	0f 90       	pop	r0
    59ea:	0f 90       	pop	r0
    59ec:	df 91       	pop	r29
    59ee:	cf 91       	pop	r28
    59f0:	1f 91       	pop	r17
    59f2:	ff 90       	pop	r15
    59f4:	ef 90       	pop	r14
    59f6:	08 95       	ret

000059f8 <ds3231_set_date_time_arducon>:
    59f8:	ff 92       	push	r15
    59fa:	0f 93       	push	r16
    59fc:	1f 93       	push	r17
    59fe:	cf 93       	push	r28
    5a00:	df 93       	push	r29
    5a02:	cd b7       	in	r28, 0x3d	; 61
    5a04:	de b7       	in	r29, 0x3e	; 62
    5a06:	27 97       	sbiw	r28, 0x07	; 7
    5a08:	cd bf       	out	0x3d, r28	; 61
    5a0a:	de bf       	out	0x3e, r29	; 62
    5a0c:	fe 01       	movw	r30, r28
    5a0e:	31 96       	adiw	r30, 0x01	; 1
    5a10:	27 e0       	ldi	r18, 0x07	; 7
    5a12:	df 01       	movw	r26, r30
    5a14:	1d 92       	st	X+, r1
    5a16:	2a 95       	dec	r18
    5a18:	e9 f7       	brne	.-6      	; 0x5a14 <ds3231_set_date_time_arducon+0x1c>
    5a1a:	00 97       	sbiw	r24, 0x00	; 0
    5a1c:	09 f4       	brne	.+2      	; 0x5a20 <ds3231_set_date_time_arducon+0x28>
    5a1e:	3f c0       	rjmp	.+126    	; 0x5a9e <ds3231_set_date_time_arducon+0xa6>
    5a20:	f6 2e       	mov	r15, r22
    5a22:	8c 01       	movw	r16, r24
    5a24:	0a 96       	adiw	r24, 0x0a	; 10
    5a26:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <_Z8char2bcdPc>
    5a2a:	89 83       	std	Y+1, r24	; 0x01
    5a2c:	c8 01       	movw	r24, r16
    5a2e:	08 96       	adiw	r24, 0x08	; 8
    5a30:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <_Z8char2bcdPc>
    5a34:	8a 83       	std	Y+2, r24	; 0x02
    5a36:	c8 01       	movw	r24, r16
    5a38:	06 96       	adiw	r24, 0x06	; 6
    5a3a:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <_Z8char2bcdPc>
    5a3e:	8b 83       	std	Y+3, r24	; 0x03
    5a40:	c8 01       	movw	r24, r16
    5a42:	04 96       	adiw	r24, 0x04	; 4
    5a44:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <_Z8char2bcdPc>
    5a48:	8d 83       	std	Y+5, r24	; 0x05
    5a4a:	c8 01       	movw	r24, r16
    5a4c:	02 96       	adiw	r24, 0x02	; 2
    5a4e:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <_Z8char2bcdPc>
    5a52:	8e 83       	std	Y+6, r24	; 0x06
    5a54:	c8 01       	movw	r24, r16
    5a56:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <_Z8char2bcdPc>
    5a5a:	8f 83       	std	Y+7, r24	; 0x07
    5a5c:	31 e0       	ldi	r19, 0x01	; 1
    5a5e:	9a e0       	ldi	r25, 0x0A	; 10
    5a60:	1f ef       	ldi	r17, 0xFF	; 255
    5a62:	19 0f       	add	r17, r25
    5a64:	99 23       	and	r25, r25
    5a66:	a1 f0       	breq	.+40     	; 0x5a90 <ds3231_set_date_time_arducon+0x98>
    5a68:	6f 2d       	mov	r22, r15
    5a6a:	66 0f       	add	r22, r22
    5a6c:	66 0f       	add	r22, r22
    5a6e:	66 0f       	add	r22, r22
    5a70:	6f 19       	sub	r22, r15
    5a72:	27 e0       	ldi	r18, 0x07	; 7
    5a74:	ae 01       	movw	r20, r28
    5a76:	4f 5f       	subi	r20, 0xFF	; 255
    5a78:	5f 4f       	sbci	r21, 0xFF	; 255
    5a7a:	80 ed       	ldi	r24, 0xD0	; 208
    5a7c:	0e 94 e6 33 	call	0x67cc	; 0x67cc <I2C_0_SendData>
    5a80:	31 e0       	ldi	r19, 0x01	; 1
    5a82:	87 30       	cpi	r24, 0x07	; 7
    5a84:	09 f4       	brne	.+2      	; 0x5a88 <ds3231_set_date_time_arducon+0x90>
    5a86:	30 e0       	ldi	r19, 0x00	; 0
    5a88:	87 30       	cpi	r24, 0x07	; 7
    5a8a:	21 f0       	breq	.+8      	; 0x5a94 <ds3231_set_date_time_arducon+0x9c>
    5a8c:	21 e0       	ldi	r18, 0x01	; 1
    5a8e:	03 c0       	rjmp	.+6      	; 0x5a96 <ds3231_set_date_time_arducon+0x9e>
    5a90:	20 e0       	ldi	r18, 0x00	; 0
    5a92:	01 c0       	rjmp	.+2      	; 0x5a96 <ds3231_set_date_time_arducon+0x9e>
    5a94:	20 e0       	ldi	r18, 0x00	; 0
    5a96:	91 2f       	mov	r25, r17
    5a98:	21 11       	cpse	r18, r1
    5a9a:	e2 cf       	rjmp	.-60     	; 0x5a60 <ds3231_set_date_time_arducon+0x68>
    5a9c:	01 c0       	rjmp	.+2      	; 0x5aa0 <ds3231_set_date_time_arducon+0xa8>
    5a9e:	31 e0       	ldi	r19, 0x01	; 1
    5aa0:	83 2f       	mov	r24, r19
    5aa2:	27 96       	adiw	r28, 0x07	; 7
    5aa4:	cd bf       	out	0x3d, r28	; 61
    5aa6:	de bf       	out	0x3e, r29	; 62
    5aa8:	df 91       	pop	r29
    5aaa:	cf 91       	pop	r28
    5aac:	1f 91       	pop	r17
    5aae:	0f 91       	pop	r16
    5ab0:	ff 90       	pop	r15
    5ab2:	08 95       	ret

00005ab4 <ds3231_set_date_time>:
    5ab4:	0f 93       	push	r16
    5ab6:	1f 93       	push	r17
    5ab8:	cf 93       	push	r28
    5aba:	df 93       	push	r29
    5abc:	cd b7       	in	r28, 0x3d	; 61
    5abe:	de b7       	in	r29, 0x3e	; 62
    5ac0:	27 97       	sbiw	r28, 0x07	; 7
    5ac2:	cd bf       	out	0x3d, r28	; 61
    5ac4:	de bf       	out	0x3e, r29	; 62
    5ac6:	fc 01       	movw	r30, r24
    5ac8:	06 2f       	mov	r16, r22
    5aca:	81 e0       	ldi	r24, 0x01	; 1
    5acc:	8c 83       	std	Y+4, r24	; 0x04
    5ace:	82 89       	ldd	r24, Z+18	; 0x12
    5ad0:	20 ed       	ldi	r18, 0xD0	; 208
    5ad2:	28 0f       	add	r18, r24
    5ad4:	91 89       	ldd	r25, Z+17	; 0x11
    5ad6:	89 2f       	mov	r24, r25
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	c0 97       	sbiw	r24, 0x30	; 48
    5adc:	82 95       	swap	r24
    5ade:	92 95       	swap	r25
    5ae0:	90 7f       	andi	r25, 0xF0	; 240
    5ae2:	98 27       	eor	r25, r24
    5ae4:	80 7f       	andi	r24, 0xF0	; 240
    5ae6:	98 27       	eor	r25, r24
    5ae8:	82 2b       	or	r24, r18
    5aea:	89 83       	std	Y+1, r24	; 0x01
    5aec:	87 85       	ldd	r24, Z+15	; 0x0f
    5aee:	20 ed       	ldi	r18, 0xD0	; 208
    5af0:	28 0f       	add	r18, r24
    5af2:	96 85       	ldd	r25, Z+14	; 0x0e
    5af4:	89 2f       	mov	r24, r25
    5af6:	90 e0       	ldi	r25, 0x00	; 0
    5af8:	c0 97       	sbiw	r24, 0x30	; 48
    5afa:	82 95       	swap	r24
    5afc:	92 95       	swap	r25
    5afe:	90 7f       	andi	r25, 0xF0	; 240
    5b00:	98 27       	eor	r25, r24
    5b02:	80 7f       	andi	r24, 0xF0	; 240
    5b04:	98 27       	eor	r25, r24
    5b06:	82 2b       	or	r24, r18
    5b08:	8a 83       	std	Y+2, r24	; 0x02
    5b0a:	84 85       	ldd	r24, Z+12	; 0x0c
    5b0c:	20 ed       	ldi	r18, 0xD0	; 208
    5b0e:	28 0f       	add	r18, r24
    5b10:	93 85       	ldd	r25, Z+11	; 0x0b
    5b12:	89 2f       	mov	r24, r25
    5b14:	90 e0       	ldi	r25, 0x00	; 0
    5b16:	c0 97       	sbiw	r24, 0x30	; 48
    5b18:	82 95       	swap	r24
    5b1a:	92 95       	swap	r25
    5b1c:	90 7f       	andi	r25, 0xF0	; 240
    5b1e:	98 27       	eor	r25, r24
    5b20:	80 7f       	andi	r24, 0xF0	; 240
    5b22:	98 27       	eor	r25, r24
    5b24:	82 2b       	or	r24, r18
    5b26:	8b 83       	std	Y+3, r24	; 0x03
    5b28:	81 85       	ldd	r24, Z+9	; 0x09
    5b2a:	20 ed       	ldi	r18, 0xD0	; 208
    5b2c:	28 0f       	add	r18, r24
    5b2e:	90 85       	ldd	r25, Z+8	; 0x08
    5b30:	89 2f       	mov	r24, r25
    5b32:	90 e0       	ldi	r25, 0x00	; 0
    5b34:	c0 97       	sbiw	r24, 0x30	; 48
    5b36:	82 95       	swap	r24
    5b38:	92 95       	swap	r25
    5b3a:	90 7f       	andi	r25, 0xF0	; 240
    5b3c:	98 27       	eor	r25, r24
    5b3e:	80 7f       	andi	r24, 0xF0	; 240
    5b40:	98 27       	eor	r25, r24
    5b42:	82 2b       	or	r24, r18
    5b44:	8d 83       	std	Y+5, r24	; 0x05
    5b46:	86 81       	ldd	r24, Z+6	; 0x06
    5b48:	20 ed       	ldi	r18, 0xD0	; 208
    5b4a:	28 0f       	add	r18, r24
    5b4c:	95 81       	ldd	r25, Z+5	; 0x05
    5b4e:	89 2f       	mov	r24, r25
    5b50:	90 e0       	ldi	r25, 0x00	; 0
    5b52:	c0 97       	sbiw	r24, 0x30	; 48
    5b54:	82 95       	swap	r24
    5b56:	92 95       	swap	r25
    5b58:	90 7f       	andi	r25, 0xF0	; 240
    5b5a:	98 27       	eor	r25, r24
    5b5c:	80 7f       	andi	r24, 0xF0	; 240
    5b5e:	98 27       	eor	r25, r24
    5b60:	82 2b       	or	r24, r18
    5b62:	8e 83       	std	Y+6, r24	; 0x06
    5b64:	83 81       	ldd	r24, Z+3	; 0x03
    5b66:	20 ed       	ldi	r18, 0xD0	; 208
    5b68:	28 0f       	add	r18, r24
    5b6a:	92 81       	ldd	r25, Z+2	; 0x02
    5b6c:	89 2f       	mov	r24, r25
    5b6e:	90 e0       	ldi	r25, 0x00	; 0
    5b70:	c0 97       	sbiw	r24, 0x30	; 48
    5b72:	82 95       	swap	r24
    5b74:	92 95       	swap	r25
    5b76:	90 7f       	andi	r25, 0xF0	; 240
    5b78:	98 27       	eor	r25, r24
    5b7a:	80 7f       	andi	r24, 0xF0	; 240
    5b7c:	98 27       	eor	r25, r24
    5b7e:	82 2b       	or	r24, r18
    5b80:	8f 83       	std	Y+7, r24	; 0x07
    5b82:	8a e0       	ldi	r24, 0x0A	; 10
    5b84:	1f ef       	ldi	r17, 0xFF	; 255
    5b86:	18 0f       	add	r17, r24
    5b88:	88 23       	and	r24, r24
    5b8a:	81 f0       	breq	.+32     	; 0x5bac <ds3231_set_date_time+0xf8>
    5b8c:	60 2f       	mov	r22, r16
    5b8e:	66 0f       	add	r22, r22
    5b90:	66 0f       	add	r22, r22
    5b92:	66 0f       	add	r22, r22
    5b94:	60 1b       	sub	r22, r16
    5b96:	27 e0       	ldi	r18, 0x07	; 7
    5b98:	ae 01       	movw	r20, r28
    5b9a:	4f 5f       	subi	r20, 0xFF	; 255
    5b9c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b9e:	80 ed       	ldi	r24, 0xD0	; 208
    5ba0:	0e 94 e6 33 	call	0x67cc	; 0x67cc <I2C_0_SendData>
    5ba4:	88 23       	and	r24, r24
    5ba6:	21 f0       	breq	.+8      	; 0x5bb0 <ds3231_set_date_time+0xfc>
    5ba8:	91 e0       	ldi	r25, 0x01	; 1
    5baa:	03 c0       	rjmp	.+6      	; 0x5bb2 <ds3231_set_date_time+0xfe>
    5bac:	90 e0       	ldi	r25, 0x00	; 0
    5bae:	01 c0       	rjmp	.+2      	; 0x5bb2 <ds3231_set_date_time+0xfe>
    5bb0:	90 e0       	ldi	r25, 0x00	; 0
    5bb2:	81 2f       	mov	r24, r17
    5bb4:	91 11       	cpse	r25, r1
    5bb6:	e6 cf       	rjmp	.-52     	; 0x5b84 <ds3231_set_date_time+0xd0>
    5bb8:	27 96       	adiw	r28, 0x07	; 7
    5bba:	cd bf       	out	0x3d, r28	; 61
    5bbc:	de bf       	out	0x3e, r29	; 62
    5bbe:	df 91       	pop	r29
    5bc0:	cf 91       	pop	r28
    5bc2:	1f 91       	pop	r17
    5bc4:	0f 91       	pop	r16
    5bc6:	08 95       	ret

00005bc8 <ds3231_set_aging>:


	bool ds3231_set_aging(int8_t data_in)
	{
    5bc8:	1f 93       	push	r17
    5bca:	cf 93       	push	r28
    5bcc:	df 93       	push	r29
    5bce:	1f 92       	push	r1
    5bd0:	cd b7       	in	r28, 0x3d	; 61
    5bd2:	de b7       	in	r29, 0x3e	; 62
		uint8_t tries = 10; /* try several times in case of transient bus issues */
		bool failure;
		int8_t data[1];
		
		data[0] = data_in;
    5bd4:	89 83       	std	Y+1, r24	; 0x01
	}


	bool ds3231_set_aging(int8_t data_in)
	{
		uint8_t tries = 10; /* try several times in case of transient bus issues */
    5bd6:	8a e0       	ldi	r24, 0x0A	; 10
		bool failure;
		int8_t data[1];
		
		data[0] = data_in;
		while(tries-- && (failure = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) != 1)));
    5bd8:	1f ef       	ldi	r17, 0xFF	; 255
    5bda:	18 0f       	add	r17, r24
    5bdc:	88 23       	and	r24, r24
    5bde:	81 f0       	breq	.+32     	; 0x5c00 <ds3231_set_aging+0x38>
    5be0:	21 e0       	ldi	r18, 0x01	; 1
    5be2:	ae 01       	movw	r20, r28
    5be4:	4f 5f       	subi	r20, 0xFF	; 255
    5be6:	5f 4f       	sbci	r21, 0xFF	; 255
    5be8:	60 e1       	ldi	r22, 0x10	; 16
    5bea:	80 ed       	ldi	r24, 0xD0	; 208
    5bec:	0e 94 e6 33 	call	0x67cc	; 0x67cc <I2C_0_SendData>
    5bf0:	21 e0       	ldi	r18, 0x01	; 1
    5bf2:	81 30       	cpi	r24, 0x01	; 1
    5bf4:	09 f4       	brne	.+2      	; 0x5bf8 <ds3231_set_aging+0x30>
    5bf6:	20 e0       	ldi	r18, 0x00	; 0
    5bf8:	81 30       	cpi	r24, 0x01	; 1
    5bfa:	21 f0       	breq	.+8      	; 0x5c04 <ds3231_set_aging+0x3c>
    5bfc:	91 e0       	ldi	r25, 0x01	; 1
    5bfe:	03 c0       	rjmp	.+6      	; 0x5c06 <ds3231_set_aging+0x3e>
    5c00:	90 e0       	ldi	r25, 0x00	; 0
    5c02:	01 c0       	rjmp	.+2      	; 0x5c06 <ds3231_set_aging+0x3e>
    5c04:	90 e0       	ldi	r25, 0x00	; 0
    5c06:	81 2f       	mov	r24, r17
    5c08:	91 11       	cpse	r25, r1
    5c0a:	e6 cf       	rjmp	.-52     	; 0x5bd8 <ds3231_set_aging+0x10>
		return(failure);
	}
    5c0c:	82 2f       	mov	r24, r18
    5c0e:	0f 90       	pop	r0
    5c10:	df 91       	pop	r29
    5c12:	cf 91       	pop	r28
    5c14:	1f 91       	pop	r17
    5c16:	08 95       	ret

00005c18 <ds3231_get_aging>:


	int8_t ds3231_get_aging()
	{
    5c18:	1f 93       	push	r17
    5c1a:	cf 93       	push	r28
    5c1c:	df 93       	push	r29
    5c1e:	1f 92       	push	r1
    5c20:	cd b7       	in	r28, 0x3d	; 61
    5c22:	de b7       	in	r29, 0x3e	; 62
		uint8_t tries = 10; /* try several times in case of transient bus issues */
    5c24:	8a e0       	ldi	r24, 0x0A	; 10
		bool failure;
		int8_t data[1];
		
		while(tries-- && (failure = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) != 1)));
    5c26:	1f ef       	ldi	r17, 0xFF	; 255
    5c28:	18 0f       	add	r17, r24
    5c2a:	88 23       	and	r24, r24
    5c2c:	61 f0       	breq	.+24     	; 0x5c46 <ds3231_get_aging+0x2e>
    5c2e:	21 e0       	ldi	r18, 0x01	; 1
    5c30:	ae 01       	movw	r20, r28
    5c32:	4f 5f       	subi	r20, 0xFF	; 255
    5c34:	5f 4f       	sbci	r21, 0xFF	; 255
    5c36:	60 e1       	ldi	r22, 0x10	; 16
    5c38:	80 ed       	ldi	r24, 0xD0	; 208
    5c3a:	0e 94 23 34 	call	0x6846	; 0x6846 <I2C_0_GetData>
    5c3e:	81 30       	cpi	r24, 0x01	; 1
    5c40:	21 f0       	breq	.+8      	; 0x5c4a <ds3231_get_aging+0x32>
    5c42:	91 e0       	ldi	r25, 0x01	; 1
    5c44:	03 c0       	rjmp	.+6      	; 0x5c4c <ds3231_get_aging+0x34>
    5c46:	90 e0       	ldi	r25, 0x00	; 0
    5c48:	01 c0       	rjmp	.+2      	; 0x5c4c <ds3231_get_aging+0x34>
    5c4a:	90 e0       	ldi	r25, 0x00	; 0
    5c4c:	81 2f       	mov	r24, r17
    5c4e:	91 11       	cpse	r25, r1
    5c50:	ea cf       	rjmp	.-44     	; 0x5c26 <ds3231_get_aging+0xe>
		return(data[0]);
	}
    5c52:	89 81       	ldd	r24, Y+1	; 0x01
    5c54:	0f 90       	pop	r0
    5c56:	df 91       	pop	r29
    5c58:	cf 91       	pop	r28
    5c5a:	1f 91       	pop	r17
    5c5c:	08 95       	ret

00005c5e <ds3231_responding>:

	bool ds3231_responding()
	{
    5c5e:	1f 93       	push	r17
    5c60:	cf 93       	push	r28
    5c62:	df 93       	push	r29
    5c64:	1f 92       	push	r1
    5c66:	cd b7       	in	r28, 0x3d	; 61
    5c68:	de b7       	in	r29, 0x3e	; 62
		bool responseReceived = false;
		uint8_t tries = 10;
    5c6a:	9a e0       	ldi	r25, 0x0A	; 10
		return(data[0]);
	}

	bool ds3231_responding()
	{
		bool responseReceived = false;
    5c6c:	30 e0       	ldi	r19, 0x00	; 0
		uint8_t tries = 10;
		int8_t data[1];		
		while(tries-- && !(responseReceived = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) == 1)));
    5c6e:	1f ef       	ldi	r17, 0xFF	; 255
    5c70:	19 0f       	add	r17, r25
    5c72:	99 23       	and	r25, r25
    5c74:	81 f0       	breq	.+32     	; 0x5c96 <ds3231_responding+0x38>
    5c76:	21 e0       	ldi	r18, 0x01	; 1
    5c78:	ae 01       	movw	r20, r28
    5c7a:	4f 5f       	subi	r20, 0xFF	; 255
    5c7c:	5f 4f       	sbci	r21, 0xFF	; 255
    5c7e:	60 e1       	ldi	r22, 0x10	; 16
    5c80:	80 ed       	ldi	r24, 0xD0	; 208
    5c82:	0e 94 23 34 	call	0x6846	; 0x6846 <I2C_0_GetData>
    5c86:	31 e0       	ldi	r19, 0x01	; 1
    5c88:	81 30       	cpi	r24, 0x01	; 1
    5c8a:	09 f0       	breq	.+2      	; 0x5c8e <ds3231_responding+0x30>
    5c8c:	30 e0       	ldi	r19, 0x00	; 0
    5c8e:	81 30       	cpi	r24, 0x01	; 1
    5c90:	21 f0       	breq	.+8      	; 0x5c9a <ds3231_responding+0x3c>
    5c92:	21 e0       	ldi	r18, 0x01	; 1
    5c94:	03 c0       	rjmp	.+6      	; 0x5c9c <ds3231_responding+0x3e>
    5c96:	20 e0       	ldi	r18, 0x00	; 0
    5c98:	01 c0       	rjmp	.+2      	; 0x5c9c <ds3231_responding+0x3e>
    5c9a:	20 e0       	ldi	r18, 0x00	; 0
    5c9c:	91 2f       	mov	r25, r17
    5c9e:	21 11       	cpse	r18, r1
    5ca0:	e6 cf       	rjmp	.-52     	; 0x5c6e <ds3231_responding+0x10>
		return(responseReceived);
	}
    5ca2:	83 2f       	mov	r24, r19
    5ca4:	0f 90       	pop	r0
    5ca6:	df 91       	pop	r29
    5ca8:	cf 91       	pop	r28
    5caa:	1f 91       	pop	r17
    5cac:	08 95       	ret

00005cae <ds3231_init>:

time_t epoch_from_ltm(tm *ltm);

bool ds3231_init()
{
	I2C_0_Init();
    5cae:	0e 94 ca 33 	call	0x6794	; 0x6794 <I2C_0_Init>
	return (!ds3231_responding());
    5cb2:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <ds3231_responding>
}
    5cb6:	91 e0       	ldi	r25, 0x01	; 1
    5cb8:	89 27       	eor	r24, r25
    5cba:	08 95       	ret

00005cbc <ds3231_sync2nearestMinute>:

/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
bool ds3231_sync2nearestMinute()
{
    5cbc:	cf 92       	push	r12
    5cbe:	df 92       	push	r13
    5cc0:	ef 92       	push	r14
    5cc2:	ff 92       	push	r15
    5cc4:	0f 93       	push	r16
    5cc6:	1f 93       	push	r17
    5cc8:	cf 93       	push	r28
    5cca:	df 93       	push	r29
    5ccc:	cd b7       	in	r28, 0x3d	; 61
    5cce:	de b7       	in	r29, 0x3e	; 62
    5cd0:	28 97       	sbiw	r28, 0x08	; 8
    5cd2:	cd bf       	out	0x3d, r28	; 61
    5cd4:	de bf       	out	0x3e, r29	; 62
	uint8_t tries = 10; /* try several times in case of transient bus issues */
	bool err = false;
	uint8_t data[8] = { 0, 0, 0 };
    5cd6:	fe 01       	movw	r30, r28
    5cd8:	31 96       	adiw	r30, 0x01	; 1
    5cda:	88 e0       	ldi	r24, 0x08	; 8
    5cdc:	df 01       	movw	r26, r30
    5cde:	1d 92       	st	X+, r1
    5ce0:	8a 95       	dec	r24
    5ce2:	e9 f7       	brne	.-6      	; 0x5cde <ds3231_sync2nearestMinute+0x22>
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
bool ds3231_sync2nearestMinute()
{
	uint8_t tries = 10; /* try several times in case of transient bus issues */
	bool err = false;
    5ce4:	f1 2c       	mov	r15, r1
/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
bool ds3231_sync2nearestMinute()
{
	uint8_t tries = 10; /* try several times in case of transient bus issues */
    5ce6:	8a e0       	ldi	r24, 0x0A	; 10
	bool err = false;
	uint8_t data[8] = { 0, 0, 0 };
		
	while(tries-- && (err = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 3) != 3)));
    5ce8:	1f ef       	ldi	r17, 0xFF	; 255
    5cea:	18 0f       	add	r17, r24
    5cec:	88 23       	and	r24, r24
    5cee:	89 f0       	breq	.+34     	; 0x5d12 <ds3231_sync2nearestMinute+0x56>
    5cf0:	23 e0       	ldi	r18, 0x03	; 3
    5cf2:	ae 01       	movw	r20, r28
    5cf4:	4f 5f       	subi	r20, 0xFF	; 255
    5cf6:	5f 4f       	sbci	r21, 0xFF	; 255
    5cf8:	60 e0       	ldi	r22, 0x00	; 0
    5cfa:	80 ed       	ldi	r24, 0xD0	; 208
    5cfc:	0e 94 23 34 	call	0x6846	; 0x6846 <I2C_0_GetData>
    5d00:	ff 24       	eor	r15, r15
    5d02:	f3 94       	inc	r15
    5d04:	83 30       	cpi	r24, 0x03	; 3
    5d06:	09 f4       	brne	.+2      	; 0x5d0a <ds3231_sync2nearestMinute+0x4e>
    5d08:	f1 2c       	mov	r15, r1
    5d0a:	83 30       	cpi	r24, 0x03	; 3
    5d0c:	21 f0       	breq	.+8      	; 0x5d16 <ds3231_sync2nearestMinute+0x5a>
    5d0e:	01 e0       	ldi	r16, 0x01	; 1
    5d10:	03 c0       	rjmp	.+6      	; 0x5d18 <ds3231_sync2nearestMinute+0x5c>
    5d12:	00 e0       	ldi	r16, 0x00	; 0
    5d14:	01 c0       	rjmp	.+2      	; 0x5d18 <ds3231_sync2nearestMinute+0x5c>
    5d16:	00 e0       	ldi	r16, 0x00	; 0
    5d18:	81 2f       	mov	r24, r17
    5d1a:	01 11       	cpse	r16, r1
    5d1c:	e5 cf       	rjmp	.-54     	; 0x5ce8 <ds3231_sync2nearestMinute+0x2c>

	if(!err)
    5d1e:	f1 10       	cpse	r15, r1
    5d20:	82 c0       	rjmp	.+260    	; 0x5e26 <ds3231_sync2nearestMinute+0x16a>
		uint8_t hour10;
		uint8_t hour;
		bool am_pm;
		bool twelvehour;

		seconds = bcd2dec(data[0]);
    5d22:	89 81       	ldd	r24, Y+1	; 0x01
    5d24:	0e 94 25 2a 	call	0x544a	; 0x544a <_Z7bcd2dech>
    5d28:	d8 2e       	mov	r13, r24
		minutes = bcd2dec(data[1]);
    5d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    5d2c:	0e 94 25 2a 	call	0x544a	; 0x544a <_Z7bcd2dech>
		am_pm = ((data[2] >> 5) & 0x01);
    5d30:	9b 81       	ldd	r25, Y+3	; 0x03
    5d32:	49 2f       	mov	r20, r25
    5d34:	40 72       	andi	r20, 0x20	; 32
		hour10 = ((data[2] >> 4) & 0x01);
    5d36:	29 2f       	mov	r18, r25
    5d38:	30 e0       	ldi	r19, 0x00	; 0
    5d3a:	35 95       	asr	r19
    5d3c:	27 95       	ror	r18
    5d3e:	35 95       	asr	r19
    5d40:	27 95       	ror	r18
    5d42:	35 95       	asr	r19
    5d44:	27 95       	ror	r18
    5d46:	35 95       	asr	r19
    5d48:	27 95       	ror	r18
    5d4a:	21 70       	andi	r18, 0x01	; 1
		hour = (data[2] & 0x0f);
    5d4c:	39 2f       	mov	r19, r25
    5d4e:	3f 70       	andi	r19, 0x0F	; 15

		twelvehour = ((data[2] >> 6) & 0x01);

		if(!twelvehour && am_pm)
    5d50:	b9 2f       	mov	r27, r25
    5d52:	b0 74       	andi	r27, 0x40	; 64
    5d54:	cb 2e       	mov	r12, r27
    5d56:	96 fd       	sbrc	r25, 6
    5d58:	02 c0       	rjmp	.+4      	; 0x5d5e <ds3231_sync2nearestMinute+0xa2>
    5d5a:	41 11       	cpse	r20, r1
		{
			hour10 = 2;
    5d5c:	22 e0       	ldi	r18, 0x02	; 2
		}

		hours = 10 * hour10 + hour;
    5d5e:	22 0f       	add	r18, r18
    5d60:	e2 2e       	mov	r14, r18
    5d62:	ee 0c       	add	r14, r14
    5d64:	ee 0c       	add	r14, r14
    5d66:	2e 0d       	add	r18, r14
    5d68:	e2 2e       	mov	r14, r18
    5d6a:	e3 0e       	add	r14, r19

		if(seconds > 30)
    5d6c:	5e e1       	ldi	r21, 0x1E	; 30
    5d6e:	5d 15       	cp	r21, r13
    5d70:	60 f4       	brcc	.+24     	; 0x5d8a <ds3231_sync2nearestMinute+0xce>
		{
			minutes++;
    5d72:	8f 5f       	subi	r24, 0xFF	; 255

			if(minutes > 59)
    5d74:	8c 33       	cpi	r24, 0x3C	; 60
    5d76:	48 f0       	brcs	.+18     	; 0x5d8a <ds3231_sync2nearestMinute+0xce>
			{
				minutes = 0;
				hours++;
    5d78:	e3 94       	inc	r14

				if(hours > 23) /* Don't attempt to synchronize at midnight */
    5d7a:	87 e1       	ldi	r24, 0x17	; 23
    5d7c:	8e 15       	cp	r24, r14
    5d7e:	10 f0       	brcs	.+4      	; 0x5d84 <ds3231_sync2nearestMinute+0xc8>
		{
			minutes++;

			if(minutes > 59)
			{
				minutes = 0;
    5d80:	80 e0       	ldi	r24, 0x00	; 0
    5d82:	03 c0       	rjmp	.+6      	; 0x5d8a <ds3231_sync2nearestMinute+0xce>
    5d84:	80 e0       	ldi	r24, 0x00	; 0
				hours++;

				if(hours > 23) /* Don't attempt to synchronize at midnight */
				{
					err = true;
    5d86:	ff 24       	eor	r15, r15
    5d88:	f3 94       	inc	r15
				}
			}
		}

		if(!err)
    5d8a:	f1 10       	cpse	r15, r1
    5d8c:	4c c0       	rjmp	.+152    	; 0x5e26 <ds3231_sync2nearestMinute+0x16a>
		{
			data[0] = 0; /* seconds = 00 */
    5d8e:	19 82       	std	Y+1, r1	; 0x01
			data[1] = dec2bcd(minutes);
    5d90:	0e 94 37 2a 	call	0x546e	; 0x546e <_Z7dec2bcdh>
    5d94:	8a 83       	std	Y+2, r24	; 0x02
			data[2] = 0;
    5d96:	1b 82       	std	Y+3, r1	; 0x03

			if(twelvehour)
    5d98:	cc 20       	and	r12, r12
    5d9a:	71 f0       	breq	.+28     	; 0x5db8 <ds3231_sync2nearestMinute+0xfc>
			{
				data[2] |= 0x40; /* set  12-hour bit */
    5d9c:	80 e4       	ldi	r24, 0x40	; 64
    5d9e:	8b 83       	std	Y+3, r24	; 0x03

				if(hours >= 12)
    5da0:	9b e0       	ldi	r25, 0x0B	; 11
    5da2:	9e 15       	cp	r25, r14
    5da4:	10 f4       	brcc	.+4      	; 0x5daa <ds3231_sync2nearestMinute+0xee>
				{
					data[2] |= 0x20; /* set pm bit */
    5da6:	80 e6       	ldi	r24, 0x60	; 96
    5da8:	8b 83       	std	Y+3, r24	; 0x03
				}

				if(hours >= 10)
    5daa:	a9 e0       	ldi	r26, 0x09	; 9
    5dac:	ae 15       	cp	r26, r14
    5dae:	78 f4       	brcc	.+30     	; 0x5dce <ds3231_sync2nearestMinute+0x112>
				{
					data[2] |= 0x10;
    5db0:	8b 81       	ldd	r24, Y+3	; 0x03
    5db2:	80 61       	ori	r24, 0x10	; 16
    5db4:	8b 83       	std	Y+3, r24	; 0x03
    5db6:	0b c0       	rjmp	.+22     	; 0x5dce <ds3231_sync2nearestMinute+0x112>
				}
			}
			else
			{
				if(hours >= 20)
    5db8:	b3 e1       	ldi	r27, 0x13	; 19
    5dba:	be 15       	cp	r27, r14
    5dbc:	18 f4       	brcc	.+6      	; 0x5dc4 <ds3231_sync2nearestMinute+0x108>
				{
					data[2] |= 0x20; /* set 20 bit */
    5dbe:	80 e2       	ldi	r24, 0x20	; 32
    5dc0:	8b 83       	std	Y+3, r24	; 0x03
    5dc2:	05 c0       	rjmp	.+10     	; 0x5dce <ds3231_sync2nearestMinute+0x112>
				}
				else if(hours >= 10)
    5dc4:	59 e0       	ldi	r21, 0x09	; 9
    5dc6:	5e 15       	cp	r21, r14
    5dc8:	10 f4       	brcc	.+4      	; 0x5dce <ds3231_sync2nearestMinute+0x112>
				{
					data[2] |= 0x10; /* set 10 bit */
    5dca:	80 e1       	ldi	r24, 0x10	; 16
    5dcc:	8b 83       	std	Y+3, r24	; 0x03
				}
			}

			data[2] |= hours % 10;
    5dce:	8d ec       	ldi	r24, 0xCD	; 205
    5dd0:	e8 9e       	mul	r14, r24
    5dd2:	81 2d       	mov	r24, r1
    5dd4:	11 24       	eor	r1, r1
    5dd6:	86 95       	lsr	r24
    5dd8:	86 95       	lsr	r24
    5dda:	86 95       	lsr	r24
    5ddc:	88 0f       	add	r24, r24
    5dde:	98 2f       	mov	r25, r24
    5de0:	99 0f       	add	r25, r25
    5de2:	99 0f       	add	r25, r25
    5de4:	89 0f       	add	r24, r25
    5de6:	e8 1a       	sub	r14, r24
    5de8:	2b 81       	ldd	r18, Y+3	; 0x03
    5dea:	e2 2a       	or	r14, r18
    5dec:	eb 82       	std	Y+3, r14	; 0x03
			
			while(tries-- && (err = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 4) != 4)));
    5dee:	ee 24       	eor	r14, r14
    5df0:	ea 94       	dec	r14
    5df2:	e1 0e       	add	r14, r17
    5df4:	11 23       	and	r17, r17
    5df6:	89 f0       	breq	.+34     	; 0x5e1a <ds3231_sync2nearestMinute+0x15e>
    5df8:	24 e0       	ldi	r18, 0x04	; 4
    5dfa:	ae 01       	movw	r20, r28
    5dfc:	4f 5f       	subi	r20, 0xFF	; 255
    5dfe:	5f 4f       	sbci	r21, 0xFF	; 255
    5e00:	60 e0       	ldi	r22, 0x00	; 0
    5e02:	80 ed       	ldi	r24, 0xD0	; 208
    5e04:	0e 94 e6 33 	call	0x67cc	; 0x67cc <I2C_0_SendData>
    5e08:	ff 24       	eor	r15, r15
    5e0a:	f3 94       	inc	r15
    5e0c:	84 30       	cpi	r24, 0x04	; 4
    5e0e:	09 f4       	brne	.+2      	; 0x5e12 <ds3231_sync2nearestMinute+0x156>
    5e10:	f1 2c       	mov	r15, r1
    5e12:	84 30       	cpi	r24, 0x04	; 4
    5e14:	21 f0       	breq	.+8      	; 0x5e1e <ds3231_sync2nearestMinute+0x162>
    5e16:	81 e0       	ldi	r24, 0x01	; 1
    5e18:	03 c0       	rjmp	.+6      	; 0x5e20 <ds3231_sync2nearestMinute+0x164>
    5e1a:	80 2f       	mov	r24, r16
    5e1c:	01 c0       	rjmp	.+2      	; 0x5e20 <ds3231_sync2nearestMinute+0x164>
    5e1e:	80 2f       	mov	r24, r16
    5e20:	1e 2d       	mov	r17, r14
    5e22:	81 11       	cpse	r24, r1
    5e24:	e4 cf       	rjmp	.-56     	; 0x5dee <ds3231_sync2nearestMinute+0x132>
		}
	}

	return err;
}
    5e26:	8f 2d       	mov	r24, r15
    5e28:	28 96       	adiw	r28, 0x08	; 8
    5e2a:	cd bf       	out	0x3d, r28	; 61
    5e2c:	de bf       	out	0x3e, r29	; 62
    5e2e:	df 91       	pop	r29
    5e30:	cf 91       	pop	r28
    5e32:	1f 91       	pop	r17
    5e34:	0f 91       	pop	r16
    5e36:	ff 90       	pop	r15
    5e38:	ef 90       	pop	r14
    5e3a:	df 90       	pop	r13
    5e3c:	cf 90       	pop	r12
    5e3e:	08 95       	ret

00005e40 <convertEpochToTimeString>:
/**
 *   Converts an epoch (seconds since 1900)  into a string with format "yymmddhhmmss"
 */
#define THIRTY_YEARS 946684800
char* convertEpochToTimeString(time_t epoch, char* buf, size_t size)
 {
    5e40:	ef 92       	push	r14
    5e42:	ff 92       	push	r15
    5e44:	0f 93       	push	r16
    5e46:	1f 93       	push	r17
    5e48:	cf 93       	push	r28
    5e4a:	df 93       	push	r29
    5e4c:	cd b7       	in	r28, 0x3d	; 61
    5e4e:	de b7       	in	r29, 0x3e	; 62
    5e50:	60 97       	sbiw	r28, 0x10	; 16
    5e52:	cd bf       	out	0x3d, r28	; 61
    5e54:	de bf       	out	0x3e, r29	; 62
    5e56:	8a 01       	movw	r16, r20
    5e58:	79 01       	movw	r14, r18
    struct tm  ts;
	time_t t = epoch - THIRTY_YEARS;
    5e5a:	dc 01       	movw	r26, r24
    5e5c:	cb 01       	movw	r24, r22
    5e5e:	80 58       	subi	r24, 0x80	; 128
    5e60:	93 44       	sbci	r25, 0x43	; 67
    5e62:	ad 46       	sbci	r26, 0x6D	; 109
    5e64:	b8 43       	sbci	r27, 0x38	; 56
    5e66:	8d 87       	std	Y+13, r24	; 0x0d
    5e68:	9e 87       	std	Y+14, r25	; 0x0e
    5e6a:	af 87       	std	Y+15, r26	; 0x0f
    5e6c:	b8 8b       	std	Y+16, r27	; 0x10

    // Format time, "ddd yyyy-mm-dd hh:mm:ss zzz"
    ts = *localtime(&t);
    5e6e:	ce 01       	movw	r24, r28
    5e70:	0d 96       	adiw	r24, 0x0d	; 13
    5e72:	0e 94 c0 01 	call	0x380	; 0x380 <localtime>
    5e76:	fc 01       	movw	r30, r24
    5e78:	9c e0       	ldi	r25, 0x0C	; 12
    5e7a:	de 01       	movw	r26, r28
    5e7c:	11 96       	adiw	r26, 0x01	; 1
    5e7e:	01 90       	ld	r0, Z+
    5e80:	0d 92       	st	X+, r0
    5e82:	9a 95       	dec	r25
    5e84:	e1 f7       	brne	.-8      	; 0x5e7e <convertEpochToTimeString+0x3e>
    strftime(buf, size, "%a %Y-%m-%d %H:%M:%S", &ts);
    5e86:	9e 01       	movw	r18, r28
    5e88:	2f 5f       	subi	r18, 0xFF	; 255
    5e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    5e8c:	4b e8       	ldi	r20, 0x8B	; 139
    5e8e:	54 e4       	ldi	r21, 0x44	; 68
    5e90:	b7 01       	movw	r22, r14
    5e92:	c8 01       	movw	r24, r16
    5e94:	0e 94 69 02 	call	0x4d2	; 0x4d2 <strftime>
   return buf;
 }
    5e98:	c8 01       	movw	r24, r16
    5e9a:	60 96       	adiw	r28, 0x10	; 16
    5e9c:	cd bf       	out	0x3d, r28	; 61
    5e9e:	de bf       	out	0x3e, r29	; 62
    5ea0:	df 91       	pop	r29
    5ea2:	cf 91       	pop	r28
    5ea4:	1f 91       	pop	r17
    5ea6:	0f 91       	pop	r16
    5ea8:	ff 90       	pop	r15
    5eaa:	ef 90       	pop	r14
    5eac:	08 95       	ret

00005eae <_ZN13EepromManagerC1Ev>:
extern uint16_t g_80m_power_level_mW;

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
    5eae:	08 95       	ret

00005eb0 <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
    5eb0:	08 95       	ret

00005eb2 <_Z21avr_eeprom_write_bytejh>:
#include <avr/io.h>

typedef uint16_t eeprom_addr_t;

// to write
void avr_eeprom_write_byte(eeprom_addr_t index, uint8_t in) {
    5eb2:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    5eb4:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    5eb8:	91 fd       	sbrc	r25, 1
    5eba:	fc cf       	rjmp	.-8      	; 0x5eb4 <_Z21avr_eeprom_write_bytejh+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    5ebc:	8d e9       	ldi	r24, 0x9D	; 157
    5ebe:	93 e1       	ldi	r25, 0x13	; 19
    5ec0:	84 bf       	out	0x34, r24	; 52
    5ec2:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint8_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    5ec6:	f9 01       	movw	r30, r18
    5ec8:	fc 5e       	subi	r31, 0xEC	; 236
    5eca:	60 83       	st	Z, r22
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    5ecc:	90 e0       	ldi	r25, 0x00	; 0
    5ece:	84 bf       	out	0x34, r24	; 52
    5ed0:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    5ed4:	08 95       	ret

00005ed6 <_Z21avr_eeprom_write_wordjj>:
}

void avr_eeprom_write_word(eeprom_addr_t index, uint16_t in) {
    5ed6:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    5ed8:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    5edc:	91 fd       	sbrc	r25, 1
    5ede:	fc cf       	rjmp	.-8      	; 0x5ed8 <_Z21avr_eeprom_write_wordjj+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    5ee0:	8d e9       	ldi	r24, 0x9D	; 157
    5ee2:	93 e1       	ldi	r25, 0x13	; 19
    5ee4:	84 bf       	out	0x34, r24	; 52
    5ee6:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint16_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    5eea:	f9 01       	movw	r30, r18
    5eec:	fc 5e       	subi	r31, 0xEC	; 236
    5eee:	60 83       	st	Z, r22
    5ef0:	71 83       	std	Z+1, r23	; 0x01
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    5ef2:	90 e0       	ldi	r25, 0x00	; 0
    5ef4:	84 bf       	out	0x34, r24	; 52
    5ef6:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    5efa:	08 95       	ret

00005efc <_Z22avr_eeprom_write_dwordjm>:
}

void avr_eeprom_write_dword(eeprom_addr_t index, uint32_t in) {
    5efc:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    5efe:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    5f02:	91 fd       	sbrc	r25, 1
    5f04:	fc cf       	rjmp	.-8      	; 0x5efe <_Z22avr_eeprom_write_dwordjm+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    5f06:	8d e9       	ldi	r24, 0x9D	; 157
    5f08:	93 e1       	ldi	r25, 0x13	; 19
    5f0a:	84 bf       	out	0x34, r24	; 52
    5f0c:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint32_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    5f10:	f9 01       	movw	r30, r18
    5f12:	fc 5e       	subi	r31, 0xEC	; 236
    5f14:	40 83       	st	Z, r20
    5f16:	51 83       	std	Z+1, r21	; 0x01
    5f18:	62 83       	std	Z+2, r22	; 0x02
    5f1a:	73 83       	std	Z+3, r23	; 0x03
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    5f1c:	90 e0       	ldi	r25, 0x00	; 0
    5f1e:	84 bf       	out	0x34, r24	; 52
    5f20:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    5f24:	08 95       	ret

00005f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
}

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
    5f26:	0f 93       	push	r16
    5f28:	1f 93       	push	r17
    5f2a:	cf 93       	push	r28
    5f2c:	df 93       	push	r29
	if(!val)
    5f2e:	41 15       	cp	r20, r1
    5f30:	51 05       	cpc	r21, r1
    5f32:	09 f4       	brne	.+2      	; 0x5f36 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
    5f34:	7c c0       	rjmp	.+248    	; 0x602e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
	{
		return;
	}

	switch(v)
    5f36:	86 2f       	mov	r24, r22
    5f38:	90 e0       	ldi	r25, 0x00	; 0
    5f3a:	84 33       	cpi	r24, 0x34	; 52
    5f3c:	91 05       	cpc	r25, r1
    5f3e:	08 f0       	brcs	.+2      	; 0x5f42 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x1c>
    5f40:	76 c0       	rjmp	.+236    	; 0x602e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
    5f42:	ea 01       	movw	r28, r20
    5f44:	fc 01       	movw	r30, r24
    5f46:	eb 57       	subi	r30, 0x7B	; 123
    5f48:	ff 4f       	sbci	r31, 0xFF	; 255
    5f4a:	0c 94 bf 48 	jmp	0x917e	; 0x917e <__tablejump2__>
	{
		case Frequency:
		{
			avr_eeprom_write_dword(Frequency, *(uint32_t*)val);
    5f4e:	48 81       	ld	r20, Y
    5f50:	59 81       	ldd	r21, Y+1	; 0x01
    5f52:	6a 81       	ldd	r22, Y+2	; 0x02
    5f54:	7b 81       	ldd	r23, Y+3	; 0x03
    5f56:	8b e2       	ldi	r24, 0x2B	; 43
    5f58:	90 e0       	ldi	r25, 0x00	; 0
    5f5a:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    5f5e:	67 c0       	rjmp	.+206    	; 0x602e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case RTTY_offset:
		{
			avr_eeprom_write_dword(RTTY_offset, *(uint32_t*)val);
    5f60:	48 81       	ld	r20, Y
    5f62:	59 81       	ldd	r21, Y+1	; 0x01
    5f64:	6a 81       	ldd	r22, Y+2	; 0x02
    5f66:	7b 81       	ldd	r23, Y+3	; 0x03
    5f68:	8f e2       	ldi	r24, 0x2F	; 47
    5f6a:	90 e0       	ldi	r25, 0x00	; 0
    5f6c:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    5f70:	5e c0       	rjmp	.+188    	; 0x602e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case RF_Power:
		{
			avr_eeprom_write_word(RF_Power, *(uint32_t*)val);			
    5f72:	68 81       	ld	r22, Y
    5f74:	79 81       	ldd	r23, Y+1	; 0x01
    5f76:	83 e3       	ldi	r24, 0x33	; 51
    5f78:	90 e0       	ldi	r25, 0x00	; 0
    5f7a:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <_Z21avr_eeprom_write_wordjj>
		}
		break;
    5f7e:	57 c0       	rjmp	.+174    	; 0x602e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
    5f80:	8a 01       	movw	r16, r20
    5f82:	0f 5f       	subi	r16, 0xFF	; 255
    5f84:	1f 4f       	sbci	r17, 0xFF	; 255
    5f86:	68 81       	ld	r22, Y
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;
    5f88:	8a e0       	ldi	r24, 0x0A	; 10
    5f8a:	90 e0       	ldi	r25, 0x00	; 0

			while(c)
    5f8c:	66 23       	and	r22, r22
    5f8e:	51 f0       	breq	.+20     	; 0x5fa4 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x7e>
			{
				avr_eeprom_write_byte(j++, c);
    5f90:	ec 01       	movw	r28, r24
    5f92:	21 96       	adiw	r28, 0x01	; 1
    5f94:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <_Z21avr_eeprom_write_bytejh>
				c = *char_addr++;
    5f98:	f8 01       	movw	r30, r16
    5f9a:	60 81       	ld	r22, Z
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;

			while(c)
			{
				avr_eeprom_write_byte(j++, c);
    5f9c:	ce 01       	movw	r24, r28
				c = *char_addr++;
    5f9e:	0f 5f       	subi	r16, 0xFF	; 255
    5fa0:	1f 4f       	sbci	r17, 0xFF	; 255
			char* char_addr = (char*)val;
			char c = *char_addr++;
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;

			while(c)
    5fa2:	f4 cf       	rjmp	.-24     	; 0x5f8c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x66>
			{
				avr_eeprom_write_byte(j++, c);
				c = *char_addr++;
			}

			avr_eeprom_write_byte(j, 0);
    5fa4:	60 e0       	ldi	r22, 0x00	; 0
    5fa6:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    5faa:	41 c0       	rjmp	.+130    	; 0x602e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
    5fac:	8a 01       	movw	r16, r20
    5fae:	0f 5f       	subi	r16, 0xFF	; 255
    5fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    5fb2:	68 81       	ld	r22, Y
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
    5fb4:	8f e1       	ldi	r24, 0x1F	; 31
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
    5fb6:	66 23       	and	r22, r22
    5fb8:	59 f0       	breq	.+22     	; 0x5fd0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				avr_eeprom_write_byte(j++, c);
    5fba:	c1 e0       	ldi	r28, 0x01	; 1
    5fbc:	c8 0f       	add	r28, r24
    5fbe:	90 e0       	ldi	r25, 0x00	; 0
    5fc0:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <_Z21avr_eeprom_write_bytejh>
				c = *uint8_addr++;
    5fc4:	f8 01       	movw	r30, r16
    5fc6:	60 81       	ld	r22, Z
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
			{
				avr_eeprom_write_byte(j++, c);
    5fc8:	8c 2f       	mov	r24, r28
				c = *uint8_addr++;
    5fca:	0f 5f       	subi	r16, 0xFF	; 255
    5fcc:	1f 4f       	sbci	r17, 0xFF	; 255
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
    5fce:	f3 cf       	rjmp	.-26     	; 0x5fb6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x90>
			{
				avr_eeprom_write_byte(j++, c);
				c = *uint8_addr++;
			}

			avr_eeprom_write_byte(j, 0);
    5fd0:	60 e0       	ldi	r22, 0x00	; 0
    5fd2:	90 e0       	ldi	r25, 0x00	; 0
    5fd4:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    5fd8:	2a c0       	rjmp	.+84     	; 0x602e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Id_codespeed:
		{
			avr_eeprom_write_byte(Id_codespeed, *(uint8_t*)val);
    5fda:	68 81       	ld	r22, Y
    5fdc:	88 e2       	ldi	r24, 0x28	; 40
    5fde:	90 e0       	ldi	r25, 0x00	; 0
    5fe0:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    5fe4:	24 c0       	rjmp	.+72     	; 0x602e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Fox_setting:
		{
			avr_eeprom_write_byte(Fox_setting, *(uint8_t*)val);
    5fe6:	68 81       	ld	r22, Y
    5fe8:	89 e2       	ldi	r24, 0x29	; 41
    5fea:	90 e0       	ldi	r25, 0x00	; 0
    5fec:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    5ff0:	1e c0       	rjmp	.+60     	; 0x602e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Event_start_epoch:
		{
			avr_eeprom_write_dword(Event_start_epoch, *(uint32_t*)val);
    5ff2:	48 81       	ld	r20, Y
    5ff4:	59 81       	ldd	r21, Y+1	; 0x01
    5ff6:	6a 81       	ldd	r22, Y+2	; 0x02
    5ff8:	7b 81       	ldd	r23, Y+3	; 0x03
    5ffa:	82 e0       	ldi	r24, 0x02	; 2
    5ffc:	90 e0       	ldi	r25, 0x00	; 0
    5ffe:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    6002:	15 c0       	rjmp	.+42     	; 0x602e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Event_finish_epoch:
		{
			avr_eeprom_write_dword(Event_finish_epoch, *(uint32_t*)val);
    6004:	48 81       	ld	r20, Y
    6006:	59 81       	ldd	r21, Y+1	; 0x01
    6008:	6a 81       	ldd	r22, Y+2	; 0x02
    600a:	7b 81       	ldd	r23, Y+3	; 0x03
    600c:	86 e0       	ldi	r24, 0x06	; 6
    600e:	90 e0       	ldi	r25, 0x00	; 0
    6010:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    6014:	0c c0       	rjmp	.+24     	; 0x602e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Utc_offset:
		{
			avr_eeprom_write_byte(Utc_offset, *(uint8_t*)val);
    6016:	68 81       	ld	r22, Y
    6018:	8a e2       	ldi	r24, 0x2A	; 42
    601a:	90 e0       	ldi	r25, 0x00	; 0
    601c:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <_Z21avr_eeprom_write_bytejh>
		}
		break;
    6020:	06 c0       	rjmp	.+12     	; 0x602e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Eeprom_initialization_flag:
		{
			avr_eeprom_write_word(Eeprom_initialization_flag, *(uint16_t*)val);
    6022:	68 81       	ld	r22, Y
    6024:	79 81       	ldd	r23, Y+1	; 0x01
    6026:	80 e0       	ldi	r24, 0x00	; 0
    6028:	90 e0       	ldi	r25, 0x00	; 0
    602a:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <_Z21avr_eeprom_write_wordjj>
		{

		}
		break;
	}
}
    602e:	df 91       	pop	r29
    6030:	cf 91       	pop	r28
    6032:	1f 91       	pop	r17
    6034:	0f 91       	pop	r16
    6036:	08 95       	ret

00006038 <_ZN13EepromManager13saveAllEEPROMEv>:

/** 
 * Store any changed EEPROM variables
 */
void EepromManager::saveAllEEPROM(void)
{
    6038:	ef 92       	push	r14
    603a:	ff 92       	push	r15
    603c:	0f 93       	push	r16
    603e:	1f 93       	push	r17
    6040:	cf 93       	push	r28
    6042:	df 93       	push	r29
    6044:	7c 01       	movw	r14, r24
	uint16_t i;
	
	if(g_id_codespeed != eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)))
    6046:	88 e2       	ldi	r24, 0x28	; 40
    6048:	90 e0       	ldi	r25, 0x00	; 0
    604a:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <eeprom_read_byte>
    604e:	90 91 0b 40 	lds	r25, 0x400B	; 0x80400b <g_id_codespeed>
    6052:	89 17       	cp	r24, r25
    6054:	31 f0       	breq	.+12     	; 0x6062 <_ZN13EepromManager13saveAllEEPROMEv+0x2a>
	{
		updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    6056:	4b e0       	ldi	r20, 0x0B	; 11
    6058:	50 e4       	ldi	r21, 0x40	; 64
    605a:	68 e2       	ldi	r22, 0x28	; 40
    605c:	c7 01       	movw	r24, r14
    605e:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_fox != eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)))
    6062:	89 e2       	ldi	r24, 0x29	; 41
    6064:	90 e0       	ldi	r25, 0x00	; 0
    6066:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <eeprom_read_byte>
    606a:	90 91 1b 40 	lds	r25, 0x401B	; 0x80401b <g_fox>
    606e:	89 17       	cp	r24, r25
    6070:	31 f0       	breq	.+12     	; 0x607e <_ZN13EepromManager13saveAllEEPROMEv+0x46>
	{
		updateEEPROMVar(Fox_setting, (void*)&g_fox);
    6072:	4b e1       	ldi	r20, 0x1B	; 27
    6074:	50 e4       	ldi	r21, 0x40	; 64
    6076:	69 e2       	ldi	r22, 0x29	; 41
    6078:	c7 01       	movw	r24, r14
    607a:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_event_start_epoch != eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch)))
    607e:	82 e0       	ldi	r24, 0x02	; 2
    6080:	90 e0       	ldi	r25, 0x00	; 0
    6082:	0e 94 8b 4d 	call	0x9b16	; 0x9b16 <eeprom_read_dword>
    6086:	00 91 0f 46 	lds	r16, 0x460F	; 0x80460f <g_event_start_epoch>
    608a:	10 91 10 46 	lds	r17, 0x4610	; 0x804610 <g_event_start_epoch+0x1>
    608e:	20 91 11 46 	lds	r18, 0x4611	; 0x804611 <g_event_start_epoch+0x2>
    6092:	30 91 12 46 	lds	r19, 0x4612	; 0x804612 <g_event_start_epoch+0x3>
    6096:	60 17       	cp	r22, r16
    6098:	71 07       	cpc	r23, r17
    609a:	82 07       	cpc	r24, r18
    609c:	93 07       	cpc	r25, r19
    609e:	31 f0       	breq	.+12     	; 0x60ac <_ZN13EepromManager13saveAllEEPROMEv+0x74>
	{
		updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    60a0:	4f e0       	ldi	r20, 0x0F	; 15
    60a2:	56 e4       	ldi	r21, 0x46	; 70
    60a4:	62 e0       	ldi	r22, 0x02	; 2
    60a6:	c7 01       	movw	r24, r14
    60a8:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_event_finish_epoch != eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch)))
    60ac:	86 e0       	ldi	r24, 0x06	; 6
    60ae:	90 e0       	ldi	r25, 0x00	; 0
    60b0:	0e 94 8b 4d 	call	0x9b16	; 0x9b16 <eeprom_read_dword>
    60b4:	00 91 13 46 	lds	r16, 0x4613	; 0x804613 <g_event_finish_epoch>
    60b8:	10 91 14 46 	lds	r17, 0x4614	; 0x804614 <g_event_finish_epoch+0x1>
    60bc:	20 91 15 46 	lds	r18, 0x4615	; 0x804615 <g_event_finish_epoch+0x2>
    60c0:	30 91 16 46 	lds	r19, 0x4616	; 0x804616 <g_event_finish_epoch+0x3>
    60c4:	60 17       	cp	r22, r16
    60c6:	71 07       	cpc	r23, r17
    60c8:	82 07       	cpc	r24, r18
    60ca:	93 07       	cpc	r25, r19
    60cc:	31 f0       	breq	.+12     	; 0x60da <_ZN13EepromManager13saveAllEEPROMEv+0xa2>
	{
		updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    60ce:	43 e1       	ldi	r20, 0x13	; 19
    60d0:	56 e4       	ldi	r21, 0x46	; 70
    60d2:	66 e0       	ldi	r22, 0x06	; 6
    60d4:	c7 01       	movw	r24, r14
    60d6:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_utc_offset != eeprom_read_byte(&(EepromManager::ee_vars.utc_offset)))
    60da:	c0 91 17 46 	lds	r28, 0x4617	; 0x804617 <g_utc_offset>
    60de:	0c 2e       	mov	r0, r28
    60e0:	00 0c       	add	r0, r0
    60e2:	dd 0b       	sbc	r29, r29
    60e4:	8a e2       	ldi	r24, 0x2A	; 42
    60e6:	90 e0       	ldi	r25, 0x00	; 0
    60e8:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <eeprom_read_byte>
    60ec:	90 e0       	ldi	r25, 0x00	; 0
    60ee:	c8 17       	cp	r28, r24
    60f0:	d9 07       	cpc	r29, r25
    60f2:	31 f0       	breq	.+12     	; 0x6100 <_ZN13EepromManager13saveAllEEPROMEv+0xc8>
	{
		updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
    60f4:	47 e1       	ldi	r20, 0x17	; 23
    60f6:	56 e4       	ldi	r21, 0x46	; 70
    60f8:	6a e2       	ldi	r22, 0x2A	; 42
    60fa:	c7 01       	movw	r24, r14
    60fc:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    6100:	c0 e0       	ldi	r28, 0x00	; 0
    6102:	d0 e0       	ldi	r29, 0x00	; 0
    6104:	c4 31       	cpi	r28, 0x14	; 20
    6106:	d1 05       	cpc	r29, r1
    6108:	a0 f4       	brcc	.+40     	; 0x6132 <_ZN13EepromManager13saveAllEEPROMEv+0xfa>
	{
		if(g_messages_text[STATION_ID][i] != (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i]))))
    610a:	fe 01       	movw	r30, r28
    610c:	ec 53       	subi	r30, 0x3C	; 60
    610e:	fa 4b       	sbci	r31, 0xBA	; 186
    6110:	15 89       	ldd	r17, Z+21	; 0x15
    6112:	ce 01       	movw	r24, r28
    6114:	86 5f       	subi	r24, 0xF6	; 246
    6116:	9f 4f       	sbci	r25, 0xFF	; 255
    6118:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <eeprom_read_byte>
    611c:	18 17       	cp	r17, r24
    611e:	39 f0       	breq	.+14     	; 0x612e <_ZN13EepromManager13saveAllEEPROMEv+0xf6>
		{
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    6120:	49 ed       	ldi	r20, 0xD9	; 217
    6122:	55 e4       	ldi	r21, 0x45	; 69
    6124:	6a e0       	ldi	r22, 0x0A	; 10
    6126:	c7 01       	movw	r24, r14
    6128:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
			break;
    612c:	02 c0       	rjmp	.+4      	; 0x6132 <_ZN13EepromManager13saveAllEEPROMEv+0xfa>
	if(g_utc_offset != eeprom_read_byte(&(EepromManager::ee_vars.utc_offset)))
	{
		updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
	}
	
	for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    612e:	21 96       	adiw	r28, 0x01	; 1
    6130:	e9 cf       	rjmp	.-46     	; 0x6104 <_ZN13EepromManager13saveAllEEPROMEv+0xcc>
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
			break;
		}
	}

	for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    6132:	c0 e0       	ldi	r28, 0x00	; 0
    6134:	d0 e0       	ldi	r29, 0x00	; 0
    6136:	c8 30       	cpi	r28, 0x08	; 8
    6138:	d1 05       	cpc	r29, r1
    613a:	a0 f4       	brcc	.+40     	; 0x6164 <_ZN13EepromManager13saveAllEEPROMEv+0x12c>
	{
		if(g_unlockCode[i] != (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i]))))
    613c:	fe 01       	movw	r30, r28
    613e:	e8 5e       	subi	r30, 0xE8	; 232
    6140:	f9 4b       	sbci	r31, 0xB9	; 185
    6142:	10 81       	ld	r17, Z
    6144:	ce 01       	movw	r24, r28
    6146:	81 5e       	subi	r24, 0xE1	; 225
    6148:	9f 4f       	sbci	r25, 0xFF	; 255
    614a:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <eeprom_read_byte>
    614e:	18 17       	cp	r17, r24
    6150:	39 f0       	breq	.+14     	; 0x6160 <_ZN13EepromManager13saveAllEEPROMEv+0x128>
		{
			updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    6152:	48 e1       	ldi	r20, 0x18	; 24
    6154:	56 e4       	ldi	r21, 0x46	; 70
    6156:	6f e1       	ldi	r22, 0x1F	; 31
    6158:	c7 01       	movw	r24, r14
    615a:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
			break;
    615e:	02 c0       	rjmp	.+4      	; 0x6164 <_ZN13EepromManager13saveAllEEPROMEv+0x12c>
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
			break;
		}
	}

	for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    6160:	21 96       	adiw	r28, 0x01	; 1
    6162:	e9 cf       	rjmp	.-46     	; 0x6136 <_ZN13EepromManager13saveAllEEPROMEv+0xfe>
			updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
			break;
		}
	}
	
	if(g_80m_frequency != eeprom_read_dword(&(EepromManager::ee_vars.frequency)))
    6164:	8b e2       	ldi	r24, 0x2B	; 43
    6166:	90 e0       	ldi	r25, 0x00	; 0
    6168:	0e 94 8b 4d 	call	0x9b16	; 0x9b16 <eeprom_read_dword>
    616c:	00 91 2c 40 	lds	r16, 0x402C	; 0x80402c <g_80m_frequency>
    6170:	10 91 2d 40 	lds	r17, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    6174:	20 91 2e 40 	lds	r18, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    6178:	30 91 2f 40 	lds	r19, 0x402F	; 0x80402f <g_80m_frequency+0x3>
    617c:	60 17       	cp	r22, r16
    617e:	71 07       	cpc	r23, r17
    6180:	82 07       	cpc	r24, r18
    6182:	93 07       	cpc	r25, r19
    6184:	31 f0       	breq	.+12     	; 0x6192 <_ZN13EepromManager13saveAllEEPROMEv+0x15a>
	{
		updateEEPROMVar(Frequency, (void*)&g_80m_frequency);
    6186:	4c e2       	ldi	r20, 0x2C	; 44
    6188:	50 e4       	ldi	r21, 0x40	; 64
    618a:	6b e2       	ldi	r22, 0x2B	; 43
    618c:	c7 01       	movw	r24, r14
    618e:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_rtty_offset != eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset)))
    6192:	8f e2       	ldi	r24, 0x2F	; 47
    6194:	90 e0       	ldi	r25, 0x00	; 0
    6196:	0e 94 8b 4d 	call	0x9b16	; 0x9b16 <eeprom_read_dword>
    619a:	00 91 32 40 	lds	r16, 0x4032	; 0x804032 <g_rtty_offset>
    619e:	10 91 33 40 	lds	r17, 0x4033	; 0x804033 <g_rtty_offset+0x1>
    61a2:	20 91 34 40 	lds	r18, 0x4034	; 0x804034 <g_rtty_offset+0x2>
    61a6:	30 91 35 40 	lds	r19, 0x4035	; 0x804035 <g_rtty_offset+0x3>
    61aa:	60 17       	cp	r22, r16
    61ac:	71 07       	cpc	r23, r17
    61ae:	82 07       	cpc	r24, r18
    61b0:	93 07       	cpc	r25, r19
    61b2:	31 f0       	breq	.+12     	; 0x61c0 <_ZN13EepromManager13saveAllEEPROMEv+0x188>
	{
		updateEEPROMVar(RTTY_offset, (void*)&g_rtty_offset);
    61b4:	42 e3       	ldi	r20, 0x32	; 50
    61b6:	50 e4       	ldi	r21, 0x40	; 64
    61b8:	6f e2       	ldi	r22, 0x2F	; 47
    61ba:	c7 01       	movw	r24, r14
    61bc:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_80m_power_level_mW != eeprom_read_word(&(EepromManager::ee_vars.rf_power)))
    61c0:	83 e3       	ldi	r24, 0x33	; 51
    61c2:	90 e0       	ldi	r25, 0x00	; 0
    61c4:	0e 94 92 4d 	call	0x9b24	; 0x9b24 <eeprom_read_word>
    61c8:	20 91 30 40 	lds	r18, 0x4030	; 0x804030 <g_80m_power_level_mW>
    61cc:	30 91 31 40 	lds	r19, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
    61d0:	82 17       	cp	r24, r18
    61d2:	93 07       	cpc	r25, r19
    61d4:	31 f0       	breq	.+12     	; 0x61e2 <_ZN13EepromManager13saveAllEEPROMEv+0x1aa>
	{
		updateEEPROMVar(RF_Power, (void*)&g_80m_power_level_mW);
    61d6:	40 e3       	ldi	r20, 0x30	; 48
    61d8:	50 e4       	ldi	r21, 0x40	; 64
    61da:	63 e3       	ldi	r22, 0x33	; 51
    61dc:	c7 01       	movw	r24, r14
    61de:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
}
    61e2:	df 91       	pop	r29
    61e4:	cf 91       	pop	r28
    61e6:	1f 91       	pop	r17
    61e8:	0f 91       	pop	r16
    61ea:	ff 90       	pop	r15
    61ec:	ef 90       	pop	r14
    61ee:	08 95       	ret

000061f0 <_ZN13EepromManager11readNonVolsEv>:


bool EepromManager::readNonVols(void)
{
    61f0:	cf 93       	push	r28
    61f2:	df 93       	push	r29
	bool failure = true;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(0);
    61f4:	80 e0       	ldi	r24, 0x00	; 0
    61f6:	90 e0       	ldi	r25, 0x00	; 0
    61f8:	0e 94 92 4d 	call	0x9b24	; 0x9b24 <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
    61fc:	8e 3c       	cpi	r24, 0xCE	; 206
    61fe:	91 05       	cpc	r25, r1
    6200:	09 f0       	breq	.+2      	; 0x6204 <_ZN13EepromManager11readNonVolsEv+0x14>
    6202:	dc c0       	rjmp	.+440    	; 0x63bc <_ZN13EepromManager11readNonVolsEv+0x1cc>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
    6204:	88 e2       	ldi	r24, 0x28	; 40
    6206:	90 e0       	ldi	r25, 0x00	; 0
    6208:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <eeprom_read_byte>
    620c:	85 31       	cpi	r24, 0x15	; 21
    620e:	20 f4       	brcc	.+8      	; 0x6218 <_ZN13EepromManager11readNonVolsEv+0x28>
    6210:	85 30       	cpi	r24, 0x05	; 5
    6212:	18 f4       	brcc	.+6      	; 0x621a <_ZN13EepromManager11readNonVolsEv+0x2a>
    6214:	85 e0       	ldi	r24, 0x05	; 5
    6216:	01 c0       	rjmp	.+2      	; 0x621a <_ZN13EepromManager11readNonVolsEv+0x2a>
    6218:	84 e1       	ldi	r24, 0x14	; 20
    621a:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
    621e:	89 e2       	ldi	r24, 0x29	; 41
    6220:	90 e0       	ldi	r25, 0x00	; 0
    6222:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <eeprom_read_byte>
    6226:	82 31       	cpi	r24, 0x12	; 18
    6228:	08 f0       	brcs	.+2      	; 0x622c <_ZN13EepromManager11readNonVolsEv+0x3c>
    622a:	81 e1       	ldi	r24, 0x11	; 17
    622c:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
    6230:	82 e0       	ldi	r24, 0x02	; 2
    6232:	90 e0       	ldi	r25, 0x00	; 0
    6234:	0e 94 8b 4d 	call	0x9b16	; 0x9b16 <eeprom_read_dword>
    6238:	60 93 0f 46 	sts	0x460F, r22	; 0x80460f <g_event_start_epoch>
    623c:	70 93 10 46 	sts	0x4610, r23	; 0x804610 <g_event_start_epoch+0x1>
    6240:	80 93 11 46 	sts	0x4611, r24	; 0x804611 <g_event_start_epoch+0x2>
    6244:	90 93 12 46 	sts	0x4612, r25	; 0x804612 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
    6248:	86 e0       	ldi	r24, 0x06	; 6
    624a:	90 e0       	ldi	r25, 0x00	; 0
    624c:	0e 94 8b 4d 	call	0x9b16	; 0x9b16 <eeprom_read_dword>
    6250:	60 93 13 46 	sts	0x4613, r22	; 0x804613 <g_event_finish_epoch>
    6254:	70 93 14 46 	sts	0x4614, r23	; 0x804614 <g_event_finish_epoch+0x1>
    6258:	80 93 15 46 	sts	0x4615, r24	; 0x804615 <g_event_finish_epoch+0x2>
    625c:	90 93 16 46 	sts	0x4616, r25	; 0x804616 <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
    6260:	8a e2       	ldi	r24, 0x2A	; 42
    6262:	90 e0       	ldi	r25, 0x00	; 0
    6264:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <eeprom_read_byte>
    6268:	80 93 17 46 	sts	0x4617, r24	; 0x804617 <g_utc_offset>

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    626c:	c0 e0       	ldi	r28, 0x00	; 0
    626e:	d0 e0       	ldi	r29, 0x00	; 0
    6270:	c4 31       	cpi	r28, 0x14	; 20
    6272:	d1 05       	cpc	r29, r1
    6274:	58 f4       	brcc	.+22     	; 0x628c <_ZN13EepromManager11readNonVolsEv+0x9c>
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
    6276:	ce 01       	movw	r24, r28
    6278:	86 5f       	subi	r24, 0xF6	; 246
    627a:	9f 4f       	sbci	r25, 0xFF	; 255
    627c:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <eeprom_read_byte>
    6280:	fe 01       	movw	r30, r28
    6282:	ec 53       	subi	r30, 0x3C	; 60
    6284:	fa 4b       	sbci	r31, 0xBA	; 186
    6286:	85 8b       	std	Z+21, r24	; 0x15
			if(!g_messages_text[STATION_ID][i])
    6288:	81 11       	cpse	r24, r1
    628a:	03 c0       	rjmp	.+6      	; 0x6292 <_ZN13EepromManager11readNonVolsEv+0xa2>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    628c:	c0 e0       	ldi	r28, 0x00	; 0
    628e:	d0 e0       	ldi	r29, 0x00	; 0
    6290:	02 c0       	rjmp	.+4      	; 0x6296 <_ZN13EepromManager11readNonVolsEv+0xa6>
    6292:	21 96       	adiw	r28, 0x01	; 1
    6294:	ed cf       	rjmp	.-38     	; 0x6270 <_ZN13EepromManager11readNonVolsEv+0x80>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    6296:	c8 30       	cpi	r28, 0x08	; 8
    6298:	d1 05       	cpc	r29, r1
    629a:	68 f4       	brcc	.+26     	; 0x62b6 <_ZN13EepromManager11readNonVolsEv+0xc6>
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
    629c:	ce 01       	movw	r24, r28
    629e:	81 5e       	subi	r24, 0xE1	; 225
    62a0:	9f 4f       	sbci	r25, 0xFF	; 255
    62a2:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <eeprom_read_byte>
    62a6:	fe 01       	movw	r30, r28
    62a8:	e8 5e       	subi	r30, 0xE8	; 232
    62aa:	f9 4b       	sbci	r31, 0xB9	; 185
    62ac:	80 83       	st	Z, r24
			if(!g_unlockCode[i])
    62ae:	88 23       	and	r24, r24
    62b0:	11 f0       	breq	.+4      	; 0x62b6 <_ZN13EepromManager11readNonVolsEv+0xc6>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    62b2:	21 96       	adiw	r28, 0x01	; 1
    62b4:	f0 cf       	rjmp	.-32     	; 0x6296 <_ZN13EepromManager11readNonVolsEv+0xa6>
			{
				break;
			}
		}
		
		g_80m_frequency = CLAMP(TX_MINIMUM_80M_FREQUENCY, eeprom_read_dword(&(EepromManager::ee_vars.frequency)), TX_MAXIMUM_80M_FREQUENCY);
    62b6:	8b e2       	ldi	r24, 0x2B	; 43
    62b8:	90 e0       	ldi	r25, 0x00	; 0
    62ba:	0e 94 8b 4d 	call	0x9b16	; 0x9b16 <eeprom_read_dword>
    62be:	61 30       	cpi	r22, 0x01	; 1
    62c0:	29 e0       	ldi	r18, 0x09	; 9
    62c2:	72 07       	cpc	r23, r18
    62c4:	2d e3       	ldi	r18, 0x3D	; 61
    62c6:	82 07       	cpc	r24, r18
    62c8:	91 05       	cpc	r25, r1
    62ca:	60 f4       	brcc	.+24     	; 0x62e4 <_ZN13EepromManager11readNonVolsEv+0xf4>
    62cc:	60 3e       	cpi	r22, 0xE0	; 224
    62ce:	27 e6       	ldi	r18, 0x67	; 103
    62d0:	72 07       	cpc	r23, r18
    62d2:	25 e3       	ldi	r18, 0x35	; 53
    62d4:	82 07       	cpc	r24, r18
    62d6:	91 05       	cpc	r25, r1
    62d8:	50 f4       	brcc	.+20     	; 0x62ee <_ZN13EepromManager11readNonVolsEv+0xfe>
    62da:	40 ee       	ldi	r20, 0xE0	; 224
    62dc:	37 e6       	ldi	r19, 0x67	; 103
    62de:	25 e3       	ldi	r18, 0x35	; 53
    62e0:	80 e0       	ldi	r24, 0x00	; 0
    62e2:	09 c0       	rjmp	.+18     	; 0x62f6 <_ZN13EepromManager11readNonVolsEv+0x106>
    62e4:	40 e0       	ldi	r20, 0x00	; 0
    62e6:	39 e0       	ldi	r19, 0x09	; 9
    62e8:	2d e3       	ldi	r18, 0x3D	; 61
    62ea:	80 e0       	ldi	r24, 0x00	; 0
    62ec:	04 c0       	rjmp	.+8      	; 0x62f6 <_ZN13EepromManager11readNonVolsEv+0x106>
    62ee:	46 2f       	mov	r20, r22
    62f0:	37 2f       	mov	r19, r23
    62f2:	28 2f       	mov	r18, r24
    62f4:	89 2f       	mov	r24, r25
    62f6:	40 93 2c 40 	sts	0x402C, r20	; 0x80402c <g_80m_frequency>
    62fa:	30 93 2d 40 	sts	0x402D, r19	; 0x80402d <g_80m_frequency+0x1>
    62fe:	20 93 2e 40 	sts	0x402E, r18	; 0x80402e <g_80m_frequency+0x2>
    6302:	80 93 2f 40 	sts	0x402F, r24	; 0x80402f <g_80m_frequency+0x3>
		g_rtty_offset =eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset));
    6306:	8f e2       	ldi	r24, 0x2F	; 47
    6308:	90 e0       	ldi	r25, 0x00	; 0
    630a:	0e 94 8b 4d 	call	0x9b16	; 0x9b16 <eeprom_read_dword>
    630e:	60 93 32 40 	sts	0x4032, r22	; 0x804032 <g_rtty_offset>
    6312:	70 93 33 40 	sts	0x4033, r23	; 0x804033 <g_rtty_offset+0x1>
    6316:	80 93 34 40 	sts	0x4034, r24	; 0x804034 <g_rtty_offset+0x2>
    631a:	90 93 35 40 	sts	0x4035, r25	; 0x804035 <g_rtty_offset+0x3>
		g_80m_power_level_mW = CLAMP(MIN_RF_POWER_MW, eeprom_read_word(&(EepromManager::ee_vars.rf_power)), MAX_TX_POWER_80M_MW);
    631e:	83 e3       	ldi	r24, 0x33	; 51
    6320:	90 e0       	ldi	r25, 0x00	; 0
    6322:	0e 94 92 4d 	call	0x9b24	; 0x9b24 <eeprom_read_word>
    6326:	89 38       	cpi	r24, 0x89	; 137
    6328:	23 e1       	ldi	r18, 0x13	; 19
    632a:	92 07       	cpc	r25, r18
    632c:	18 f0       	brcs	.+6      	; 0x6334 <_ZN13EepromManager11readNonVolsEv+0x144>
    632e:	28 e8       	ldi	r18, 0x88	; 136
    6330:	83 e1       	ldi	r24, 0x13	; 19
    6332:	02 c0       	rjmp	.+4      	; 0x6338 <_ZN13EepromManager11readNonVolsEv+0x148>
    6334:	28 2f       	mov	r18, r24
    6336:	89 2f       	mov	r24, r25
    6338:	20 93 30 40 	sts	0x4030, r18	; 0x804030 <g_80m_power_level_mW>
    633c:	80 93 31 40 	sts	0x4031, r24	; 0x804031 <g_80m_power_level_mW+0x1>

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
    6340:	80 91 0f 46 	lds	r24, 0x460F	; 0x80460f <g_event_start_epoch>
    6344:	90 91 10 46 	lds	r25, 0x4610	; 0x804610 <g_event_start_epoch+0x1>
    6348:	a0 91 11 46 	lds	r26, 0x4611	; 0x804611 <g_event_start_epoch+0x2>
    634c:	b0 91 12 46 	lds	r27, 0x4612	; 0x804612 <g_event_start_epoch+0x3>
    6350:	89 2b       	or	r24, r25
    6352:	8a 2b       	or	r24, r26
    6354:	8b 2b       	or	r24, r27
    6356:	b9 f0       	breq	.+46     	; 0x6386 <_ZN13EepromManager11readNonVolsEv+0x196>
    6358:	40 91 13 46 	lds	r20, 0x4613	; 0x804613 <g_event_finish_epoch>
    635c:	50 91 14 46 	lds	r21, 0x4614	; 0x804614 <g_event_finish_epoch+0x1>
    6360:	60 91 15 46 	lds	r22, 0x4615	; 0x804615 <g_event_finish_epoch+0x2>
    6364:	70 91 16 46 	lds	r23, 0x4616	; 0x804616 <g_event_finish_epoch+0x3>
    6368:	80 91 0f 46 	lds	r24, 0x460F	; 0x80460f <g_event_start_epoch>
    636c:	90 91 10 46 	lds	r25, 0x4610	; 0x804610 <g_event_start_epoch+0x1>
    6370:	a0 91 11 46 	lds	r26, 0x4611	; 0x804611 <g_event_start_epoch+0x2>
    6374:	b0 91 12 46 	lds	r27, 0x4612	; 0x804612 <g_event_start_epoch+0x3>
    6378:	84 17       	cp	r24, r20
    637a:	95 07       	cpc	r25, r21
    637c:	a6 07       	cpc	r26, r22
    637e:	b7 07       	cpc	r27, r23
    6380:	20 f4       	brcc	.+8      	; 0x638a <_ZN13EepromManager11readNonVolsEv+0x19a>
    6382:	80 e0       	ldi	r24, 0x00	; 0
    6384:	03 c0       	rjmp	.+6      	; 0x638c <_ZN13EepromManager11readNonVolsEv+0x19c>
    6386:	80 e0       	ldi	r24, 0x00	; 0
    6388:	01 c0       	rjmp	.+2      	; 0x638c <_ZN13EepromManager11readNonVolsEv+0x19c>
    638a:	81 e0       	ldi	r24, 0x01	; 1
    638c:	88 23       	and	r24, r24
    638e:	c1 f0       	breq	.+48     	; 0x63c0 <_ZN13EepromManager11readNonVolsEv+0x1d0>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
    6390:	80 91 0f 46 	lds	r24, 0x460F	; 0x80460f <g_event_start_epoch>
    6394:	90 91 10 46 	lds	r25, 0x4610	; 0x804610 <g_event_start_epoch+0x1>
    6398:	a0 91 11 46 	lds	r26, 0x4611	; 0x804611 <g_event_start_epoch+0x2>
    639c:	b0 91 12 46 	lds	r27, 0x4612	; 0x804612 <g_event_start_epoch+0x3>
    63a0:	80 58       	subi	r24, 0x80	; 128
    63a2:	9e 4a       	sbci	r25, 0xAE	; 174
    63a4:	ae 4f       	sbci	r26, 0xFE	; 254
    63a6:	bf 4f       	sbci	r27, 0xFF	; 255
    63a8:	80 93 13 46 	sts	0x4613, r24	; 0x804613 <g_event_finish_epoch>
    63ac:	90 93 14 46 	sts	0x4614, r25	; 0x804614 <g_event_finish_epoch+0x1>
    63b0:	a0 93 15 46 	sts	0x4615, r26	; 0x804615 <g_event_finish_epoch+0x2>
    63b4:	b0 93 16 46 	sts	0x4616, r27	; 0x804616 <g_event_finish_epoch+0x3>
		}

		failure = false;
    63b8:	80 e0       	ldi	r24, 0x00	; 0
    63ba:	03 c0       	rjmp	.+6      	; 0x63c2 <_ZN13EepromManager11readNonVolsEv+0x1d2>
}


bool EepromManager::readNonVols(void)
{
	bool failure = true;
    63bc:	81 e0       	ldi	r24, 0x01	; 1
    63be:	01 c0       	rjmp	.+2      	; 0x63c2 <_ZN13EepromManager11readNonVolsEv+0x1d2>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = false;
    63c0:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
    63c2:	df 91       	pop	r29
    63c4:	cf 91       	pop	r28
    63c6:	08 95       	ret

000063c8 <_ZN13EepromManager20initializeEEPROMVarsEv>:

/*
 * Set volatile variables to their values stored in EEPROM
 */
	bool EepromManager::initializeEEPROMVars(void)
	{
    63c8:	ef 92       	push	r14
    63ca:	ff 92       	push	r15
    63cc:	0f 93       	push	r16
    63ce:	1f 93       	push	r17
    63d0:	cf 93       	push	r28
    63d2:	df 93       	push	r29
		bool err = false;
		uint16_t i, j;

		uint16_t initialization_flag = eeprom_read_word(0);
    63d4:	80 e0       	ldi	r24, 0x00	; 0
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	0e 94 92 4d 	call	0x9b24	; 0x9b24 <eeprom_read_word>

		if(initialization_flag != EEPROM_INITIALIZED_FLAG)
    63dc:	8e 3c       	cpi	r24, 0xCE	; 206
    63de:	91 05       	cpc	r25, r1
    63e0:	09 f4       	brne	.+2      	; 0x63e4 <_ZN13EepromManager20initializeEEPROMVarsEv+0x1c>
    63e2:	aa c0       	rjmp	.+340    	; 0x6538 <_ZN13EepromManager20initializeEEPROMVarsEv+0x170>
		{
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    63e4:	84 e1       	ldi	r24, 0x14	; 20
    63e6:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
			avr_eeprom_write_byte(Id_codespeed, g_id_codespeed);
    63ea:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    63ee:	88 e2       	ldi	r24, 0x28	; 40
    63f0:	90 e0       	ldi	r25, 0x00	; 0
    63f2:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <_Z21avr_eeprom_write_bytejh>

			g_fox = EEPROM_FOX_SETTING_DEFAULT;
    63f6:	81 e0       	ldi	r24, 0x01	; 1
    63f8:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
			avr_eeprom_write_byte(Fox_setting, g_fox);
    63fc:	60 91 1b 40 	lds	r22, 0x401B	; 0x80401b <g_fox>
    6400:	89 e2       	ldi	r24, 0x29	; 41
    6402:	90 e0       	ldi	r25, 0x00	; 0
    6404:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <_Z21avr_eeprom_write_bytejh>

			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    6408:	10 92 0f 46 	sts	0x460F, r1	; 0x80460f <g_event_start_epoch>
    640c:	10 92 10 46 	sts	0x4610, r1	; 0x804610 <g_event_start_epoch+0x1>
    6410:	10 92 11 46 	sts	0x4611, r1	; 0x804611 <g_event_start_epoch+0x2>
    6414:	10 92 12 46 	sts	0x4612, r1	; 0x804612 <g_event_start_epoch+0x3>
			avr_eeprom_write_dword(Event_start_epoch, g_event_start_epoch);
    6418:	40 91 0f 46 	lds	r20, 0x460F	; 0x80460f <g_event_start_epoch>
    641c:	50 91 10 46 	lds	r21, 0x4610	; 0x804610 <g_event_start_epoch+0x1>
    6420:	60 91 11 46 	lds	r22, 0x4611	; 0x804611 <g_event_start_epoch+0x2>
    6424:	70 91 12 46 	lds	r23, 0x4612	; 0x804612 <g_event_start_epoch+0x3>
    6428:	82 e0       	ldi	r24, 0x02	; 2
    642a:	90 e0       	ldi	r25, 0x00	; 0
    642c:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <_Z22avr_eeprom_write_dwordjm>

			g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
    6430:	10 92 13 46 	sts	0x4613, r1	; 0x804613 <g_event_finish_epoch>
    6434:	10 92 14 46 	sts	0x4614, r1	; 0x804614 <g_event_finish_epoch+0x1>
    6438:	10 92 15 46 	sts	0x4615, r1	; 0x804615 <g_event_finish_epoch+0x2>
    643c:	10 92 16 46 	sts	0x4616, r1	; 0x804616 <g_event_finish_epoch+0x3>
			avr_eeprom_write_dword(Event_finish_epoch, g_event_finish_epoch);
    6440:	40 91 13 46 	lds	r20, 0x4613	; 0x804613 <g_event_finish_epoch>
    6444:	50 91 14 46 	lds	r21, 0x4614	; 0x804614 <g_event_finish_epoch+0x1>
    6448:	60 91 15 46 	lds	r22, 0x4615	; 0x804615 <g_event_finish_epoch+0x2>
    644c:	70 91 16 46 	lds	r23, 0x4616	; 0x804616 <g_event_finish_epoch+0x3>
    6450:	86 e0       	ldi	r24, 0x06	; 6
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <_Z22avr_eeprom_write_dwordjm>

			g_utc_offset = EEPROM_UTC_OFFSET_DEFAULT;
    6458:	10 92 17 46 	sts	0x4617, r1	; 0x804617 <g_utc_offset>
			avr_eeprom_write_byte(Utc_offset, (uint8_t)g_utc_offset);
    645c:	60 91 17 46 	lds	r22, 0x4617	; 0x804617 <g_utc_offset>
    6460:	8a e2       	ldi	r24, 0x2A	; 42
    6462:	90 e0       	ldi	r25, 0x00	; 0
    6464:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <_Z21avr_eeprom_write_bytejh>

			g_messages_text[STATION_ID][0] = '\0';
    6468:	10 92 d9 45 	sts	0x45D9, r1	; 0x8045d9 <g_messages_text+0x15>
			avr_eeprom_write_byte(StationID_text, 0);
    646c:	60 e0       	ldi	r22, 0x00	; 0
    646e:	8a e0       	ldi	r24, 0x0A	; 10
    6470:	90 e0       	ldi	r25, 0x00	; 0
    6472:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <_Z21avr_eeprom_write_bytejh>

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
    6476:	e0 ea       	ldi	r30, 0xA0	; 160
    6478:	f4 e4       	ldi	r31, 0x44	; 68
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    647a:	c0 e0       	ldi	r28, 0x00	; 0
    647c:	d0 e0       	ldi	r29, 0x00	; 0

			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
    647e:	8f e1       	ldi	r24, 0x1F	; 31
    6480:	90 e0       	ldi	r25, 0x00	; 0
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    6482:	c4 30       	cpi	r28, 0x04	; 4
    6484:	d1 05       	cpc	r29, r1
    6486:	90 f4       	brcc	.+36     	; 0x64ac <_ZN13EepromManager20initializeEEPROMVarsEv+0xe4>
			{
				g_unlockCode[j] = *v;
    6488:	df 01       	movw	r26, r30
    648a:	2d 91       	ld	r18, X+
    648c:	8d 01       	movw	r16, r26
    648e:	de 01       	movw	r26, r28
    6490:	a8 5e       	subi	r26, 0xE8	; 232
    6492:	b9 4b       	sbci	r27, 0xB9	; 185
    6494:	2c 93       	st	X, r18
				avr_eeprom_write_byte(i++, *v++);
    6496:	60 81       	ld	r22, Z
    6498:	7c 01       	movw	r14, r24
    649a:	bf ef       	ldi	r27, 0xFF	; 255
    649c:	eb 1a       	sub	r14, r27
    649e:	fb 0a       	sbc	r15, r27
    64a0:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <_Z21avr_eeprom_write_bytejh>
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    64a4:	21 96       	adiw	r28, 0x01	; 1
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
    64a6:	f8 01       	movw	r30, r16
    64a8:	c7 01       	movw	r24, r14
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    64aa:	eb cf       	rjmp	.-42     	; 0x6482 <_ZN13EepromManager20initializeEEPROMVarsEv+0xba>
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
			}

			avr_eeprom_write_byte(i, 0);
    64ac:	60 e0       	ldi	r22, 0x00	; 0
    64ae:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <_Z21avr_eeprom_write_bytejh>
			g_unlockCode[j] = '\0';
    64b2:	c8 5e       	subi	r28, 0xE8	; 232
    64b4:	d9 4b       	sbci	r29, 0xB9	; 185
    64b6:	18 82       	st	Y, r1
			
			g_80m_frequency = EEPROM_TX_80M_FREQUENCY_DEFAULT;
    64b8:	80 e2       	ldi	r24, 0x20	; 32
    64ba:	94 e0       	ldi	r25, 0x04	; 4
    64bc:	a6 e3       	ldi	r26, 0x36	; 54
    64be:	b0 e0       	ldi	r27, 0x00	; 0
    64c0:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <g_80m_frequency>
    64c4:	90 93 2d 40 	sts	0x402D, r25	; 0x80402d <g_80m_frequency+0x1>
    64c8:	a0 93 2e 40 	sts	0x402E, r26	; 0x80402e <g_80m_frequency+0x2>
    64cc:	b0 93 2f 40 	sts	0x402F, r27	; 0x80402f <g_80m_frequency+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    64d0:	40 e2       	ldi	r20, 0x20	; 32
    64d2:	54 e0       	ldi	r21, 0x04	; 4
    64d4:	66 e3       	ldi	r22, 0x36	; 54
    64d6:	70 e0       	ldi	r23, 0x00	; 0
    64d8:	8b e2       	ldi	r24, 0x2B	; 43
    64da:	90 e0       	ldi	r25, 0x00	; 0
    64dc:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <_Z22avr_eeprom_write_dwordjm>

			g_rtty_offset = EEPROM_RTTY_OFFSET_FREQUENCY_DEFAULT;
    64e0:	8a ea       	ldi	r24, 0xAA	; 170
    64e2:	90 e0       	ldi	r25, 0x00	; 0
    64e4:	a0 e0       	ldi	r26, 0x00	; 0
    64e6:	b0 e0       	ldi	r27, 0x00	; 0
    64e8:	80 93 32 40 	sts	0x4032, r24	; 0x804032 <g_rtty_offset>
    64ec:	90 93 33 40 	sts	0x4033, r25	; 0x804033 <g_rtty_offset+0x1>
    64f0:	a0 93 34 40 	sts	0x4034, r26	; 0x804034 <g_rtty_offset+0x2>
    64f4:	b0 93 35 40 	sts	0x4035, r27	; 0x804035 <g_rtty_offset+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    64f8:	40 91 2c 40 	lds	r20, 0x402C	; 0x80402c <g_80m_frequency>
    64fc:	50 91 2d 40 	lds	r21, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    6500:	60 91 2e 40 	lds	r22, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    6504:	70 91 2f 40 	lds	r23, 0x402F	; 0x80402f <g_80m_frequency+0x3>
    6508:	8b e2       	ldi	r24, 0x2B	; 43
    650a:	90 e0       	ldi	r25, 0x00	; 0
    650c:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <_Z22avr_eeprom_write_dwordjm>

			g_80m_power_level_mW = EEPROM_TX_80M_POWER_MW_DEFAULT;
    6510:	84 ef       	ldi	r24, 0xF4	; 244
    6512:	91 e0       	ldi	r25, 0x01	; 1
    6514:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <g_80m_power_level_mW>
    6518:	90 93 31 40 	sts	0x4031, r25	; 0x804031 <g_80m_power_level_mW+0x1>
			avr_eeprom_write_dword(RF_Power, g_80m_power_level_mW);
    651c:	44 ef       	ldi	r20, 0xF4	; 244
    651e:	51 e0       	ldi	r21, 0x01	; 1
    6520:	60 e0       	ldi	r22, 0x00	; 0
    6522:	70 e0       	ldi	r23, 0x00	; 0
    6524:	83 e3       	ldi	r24, 0x33	; 51
    6526:	90 e0       	ldi	r25, 0x00	; 0
    6528:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <_Z22avr_eeprom_write_dwordjm>

			/* Done */

			avr_eeprom_write_word(0, EEPROM_INITIALIZED_FLAG);
    652c:	6e ec       	ldi	r22, 0xCE	; 206
    652e:	70 e0       	ldi	r23, 0x00	; 0
    6530:	80 e0       	ldi	r24, 0x00	; 0
    6532:	90 e0       	ldi	r25, 0x00	; 0
    6534:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <_Z21avr_eeprom_write_wordjj>
		}
		
		return(err);
	}
    6538:	80 e0       	ldi	r24, 0x00	; 0
    653a:	df 91       	pop	r29
    653c:	cf 91       	pop	r28
    653e:	1f 91       	pop	r17
    6540:	0f 91       	pop	r16
    6542:	ff 90       	pop	r15
    6544:	ef 90       	pop	r14
    6546:	08 95       	ret

00006548 <_ZN8GoertzelC1Eff>:
		highValueCount++;
	}

	Q2 = Q1;
	Q1 = Q0;
}
    6548:	ef 92       	push	r14
    654a:	ff 92       	push	r15
    654c:	0f 93       	push	r16
    654e:	1f 93       	push	r17
    6550:	cf 93       	push	r28
    6552:	df 93       	push	r29
    6554:	e4 2e       	mov	r14, r20
    6556:	f5 2e       	mov	r15, r21
    6558:	d6 2f       	mov	r29, r22
    655a:	c7 2f       	mov	r28, r23
    655c:	00 93 46 46 	sts	0x4646, r16	; 0x804646 <_SAMPLING_FREQUENCY>
    6560:	10 93 47 46 	sts	0x4647, r17	; 0x804647 <_SAMPLING_FREQUENCY+0x1>
    6564:	20 93 48 46 	sts	0x4648, r18	; 0x804648 <_SAMPLING_FREQUENCY+0x2>
    6568:	30 93 49 46 	sts	0x4649, r19	; 0x804649 <_SAMPLING_FREQUENCY+0x3>
    656c:	20 e0       	ldi	r18, 0x00	; 0
    656e:	30 e0       	ldi	r19, 0x00	; 0
    6570:	41 e5       	ldi	r20, 0x51	; 81
    6572:	53 e4       	ldi	r21, 0x43	; 67
    6574:	6e 2d       	mov	r22, r14
    6576:	7f 2d       	mov	r23, r15
    6578:	8d 2f       	mov	r24, r29
    657a:	9c 2f       	mov	r25, r28
    657c:	0e 94 d4 47 	call	0x8fa8	; 0x8fa8 <__gesf2>
    6580:	18 16       	cp	r1, r24
    6582:	8c f0       	brlt	.+34     	; 0x65a6 <_ZN8GoertzelC1Eff+0x5e>
    6584:	20 e0       	ldi	r18, 0x00	; 0
    6586:	30 e0       	ldi	r19, 0x00	; 0
    6588:	48 ec       	ldi	r20, 0xC8	; 200
    658a:	52 e4       	ldi	r21, 0x42	; 66
    658c:	6e 2d       	mov	r22, r14
    658e:	7f 2d       	mov	r23, r15
    6590:	8d 2f       	mov	r24, r29
    6592:	9c 2f       	mov	r25, r28
    6594:	0e 94 75 46 	call	0x8cea	; 0x8cea <__cmpsf2>
    6598:	88 23       	and	r24, r24
    659a:	4c f4       	brge	.+18     	; 0x65ae <_ZN8GoertzelC1Eff+0x66>
    659c:	e1 2c       	mov	r14, r1
    659e:	f1 2c       	mov	r15, r1
    65a0:	d8 ec       	ldi	r29, 0xC8	; 200
    65a2:	c2 e4       	ldi	r28, 0x42	; 66
    65a4:	04 c0       	rjmp	.+8      	; 0x65ae <_ZN8GoertzelC1Eff+0x66>
    65a6:	e1 2c       	mov	r14, r1
    65a8:	f1 2c       	mov	r15, r1
    65aa:	d1 e5       	ldi	r29, 0x51	; 81
    65ac:	c3 e4       	ldi	r28, 0x43	; 67
    65ae:	6e 2d       	mov	r22, r14
    65b0:	7f 2d       	mov	r23, r15
    65b2:	8d 2f       	mov	r24, r29
    65b4:	9c 2f       	mov	r25, r28
    65b6:	0e 94 ec 46 	call	0x8dd8	; 0x8dd8 <__fixsfsi>
    65ba:	60 93 44 46 	sts	0x4644, r22	; 0x804644 <_N>
    65be:	70 93 45 46 	sts	0x4645, r23	; 0x804645 <_N+0x1>
    65c2:	80 91 44 46 	lds	r24, 0x4644	; 0x804644 <_N>
    65c6:	90 91 45 46 	lds	r25, 0x4645	; 0x804645 <_N+0x1>
    65ca:	88 0f       	add	r24, r24
    65cc:	99 1f       	adc	r25, r25
    65ce:	0e 94 f1 48 	call	0x91e2	; 0x91e2 <malloc>
    65d2:	80 93 3f 46 	sts	0x463F, r24	; 0x80463f <testData>
    65d6:	90 93 40 46 	sts	0x4640, r25	; 0x804640 <testData+0x1>
    65da:	df 91       	pop	r29
    65dc:	cf 91       	pop	r28
    65de:	1f 91       	pop	r17
    65e0:	0f 91       	pop	r16
    65e2:	ff 90       	pop	r15
    65e4:	ef 90       	pop	r14
    65e6:	08 95       	ret

000065e8 <_ZN8GoertzelD1Ev>:
    65e8:	80 91 3f 46 	lds	r24, 0x463F	; 0x80463f <testData>
    65ec:	90 91 40 46 	lds	r25, 0x4640	; 0x804640 <testData+0x1>
    65f0:	0e 94 89 49 	call	0x9312	; 0x9312 <free>
    65f4:	08 95       	ret

000065f6 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
    65f6:	80 91 41 46 	lds	r24, 0x4641	; 0x804641 <_samplesReady>
    65fa:	88 23       	and	r24, r24
    65fc:	19 f0       	breq	.+6      	; 0x6604 <_ZN8Goertzel9DataPointEi+0xe>
	{
		return(_samplesReady);
    65fe:	80 91 41 46 	lds	r24, 0x4641	; 0x804641 <_samplesReady>
    6602:	08 95       	ret
	}

	testData[_index] = data;
    6604:	e0 91 42 46 	lds	r30, 0x4642	; 0x804642 <_index>
    6608:	f0 91 43 46 	lds	r31, 0x4643	; 0x804643 <_index+0x1>
    660c:	ee 0f       	add	r30, r30
    660e:	ff 1f       	adc	r31, r31
    6610:	80 91 3f 46 	lds	r24, 0x463F	; 0x80463f <testData>
    6614:	90 91 40 46 	lds	r25, 0x4640	; 0x804640 <testData+0x1>
    6618:	e8 0f       	add	r30, r24
    661a:	f9 1f       	adc	r31, r25
    661c:	60 83       	st	Z, r22
    661e:	71 83       	std	Z+1, r23	; 0x01
	_index++;
    6620:	80 91 42 46 	lds	r24, 0x4642	; 0x804642 <_index>
    6624:	90 91 43 46 	lds	r25, 0x4643	; 0x804643 <_index+0x1>
    6628:	01 96       	adiw	r24, 0x01	; 1
    662a:	80 93 42 46 	sts	0x4642, r24	; 0x804642 <_index>
    662e:	90 93 43 46 	sts	0x4643, r25	; 0x804643 <_index+0x1>
	if(_index >= _N)
    6632:	20 91 42 46 	lds	r18, 0x4642	; 0x804642 <_index>
    6636:	30 91 43 46 	lds	r19, 0x4643	; 0x804643 <_index+0x1>
    663a:	80 91 44 46 	lds	r24, 0x4644	; 0x804644 <_N>
    663e:	90 91 45 46 	lds	r25, 0x4645	; 0x804645 <_N+0x1>
    6642:	28 17       	cp	r18, r24
    6644:	39 07       	cpc	r19, r25
    6646:	3c f0       	brlt	.+14     	; 0x6656 <_ZN8Goertzel9DataPointEi+0x60>
	{
		_index = 0;
    6648:	10 92 42 46 	sts	0x4642, r1	; 0x804642 <_index>
    664c:	10 92 43 46 	sts	0x4643, r1	; 0x804643 <_index+0x1>
		_samplesReady = true;
    6650:	81 e0       	ldi	r24, 0x01	; 1
    6652:	80 93 41 46 	sts	0x4641, r24	; 0x804641 <_samplesReady>
	}

	return(_samplesReady);
    6656:	80 91 41 46 	lds	r24, 0x4641	; 0x804641 <_samplesReady>
}
    665a:	08 95       	ret

0000665c <_ZL11i2c_0_WaitWv>:
	return retVal;
}

void I2C_0_EndSession(void)
{
	TWI0.MCTRLB = TWI_MCMD_STOP_gc;
    665c:	8c e2       	ldi	r24, 0x2C	; 44
    665e:	91 e0       	ldi	r25, 0x01	; 1
    6660:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    6664:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    6668:	80 e0       	ldi	r24, 0x00	; 0
    666a:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    666e:	90 7c       	andi	r25, 0xC0	; 192
    6670:	31 f0       	breq	.+12     	; 0x667e <_ZL11i2c_0_WaitWv+0x22>
    6672:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    6676:	84 fd       	sbrc	r24, 4
    6678:	07 c0       	rjmp	.+14     	; 0x6688 <_ZL11i2c_0_WaitWv+0x2c>
    667a:	81 e0       	ldi	r24, 0x01	; 1
    667c:	08 c0       	rjmp	.+16     	; 0x668e <_ZL11i2c_0_WaitWv+0x32>
    667e:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    6682:	9c 70       	andi	r25, 0x0C	; 12
    6684:	19 f4       	brne	.+6      	; 0x668c <_ZL11i2c_0_WaitWv+0x30>
    6686:	03 c0       	rjmp	.+6      	; 0x668e <_ZL11i2c_0_WaitWv+0x32>
    6688:	82 e0       	ldi	r24, 0x02	; 2
    668a:	01 c0       	rjmp	.+2      	; 0x668e <_ZL11i2c_0_WaitWv+0x32>
    668c:	84 e0       	ldi	r24, 0x04	; 4
    668e:	81 11       	cpse	r24, r1
    6690:	08 c0       	rjmp	.+16     	; 0x66a2 <_ZL11i2c_0_WaitWv+0x46>
    6692:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    6696:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    669a:	23 2b       	or	r18, r19
    669c:	21 f4       	brne	.+8      	; 0x66a6 <_ZL11i2c_0_WaitWv+0x4a>
    669e:	90 e0       	ldi	r25, 0x00	; 0
    66a0:	03 c0       	rjmp	.+6      	; 0x66a8 <_ZL11i2c_0_WaitWv+0x4c>
    66a2:	90 e0       	ldi	r25, 0x00	; 0
    66a4:	01 c0       	rjmp	.+2      	; 0x66a8 <_ZL11i2c_0_WaitWv+0x4c>
    66a6:	91 e0       	ldi	r25, 0x01	; 1
    66a8:	91 11       	cpse	r25, r1
    66aa:	df cf       	rjmp	.-66     	; 0x666a <_ZL11i2c_0_WaitWv+0xe>
    66ac:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    66b0:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    66b4:	23 2b       	or	r18, r19
    66b6:	09 f4       	brne	.+2      	; 0x66ba <_ZL11i2c_0_WaitWv+0x5e>
    66b8:	84 e0       	ldi	r24, 0x04	; 4
    66ba:	08 95       	ret

000066bc <_ZL11i2c_0_WaitRv>:
    66bc:	88 ec       	ldi	r24, 0xC8	; 200
    66be:	90 e0       	ldi	r25, 0x00	; 0
    66c0:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    66c4:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    66c8:	80 e0       	ldi	r24, 0x00	; 0
    66ca:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    66ce:	90 7c       	andi	r25, 0xC0	; 192
    66d0:	29 f4       	brne	.+10     	; 0x66dc <_ZL11i2c_0_WaitRv+0x20>
    66d2:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    66d6:	9c 70       	andi	r25, 0x0C	; 12
    66d8:	19 f4       	brne	.+6      	; 0x66e0 <_ZL11i2c_0_WaitRv+0x24>
    66da:	03 c0       	rjmp	.+6      	; 0x66e2 <_ZL11i2c_0_WaitRv+0x26>
    66dc:	83 e0       	ldi	r24, 0x03	; 3
    66de:	01 c0       	rjmp	.+2      	; 0x66e2 <_ZL11i2c_0_WaitRv+0x26>
    66e0:	84 e0       	ldi	r24, 0x04	; 4
    66e2:	81 11       	cpse	r24, r1
    66e4:	08 c0       	rjmp	.+16     	; 0x66f6 <_ZL11i2c_0_WaitRv+0x3a>
    66e6:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    66ea:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    66ee:	23 2b       	or	r18, r19
    66f0:	21 f4       	brne	.+8      	; 0x66fa <_ZL11i2c_0_WaitRv+0x3e>
    66f2:	90 e0       	ldi	r25, 0x00	; 0
    66f4:	03 c0       	rjmp	.+6      	; 0x66fc <_ZL11i2c_0_WaitRv+0x40>
    66f6:	90 e0       	ldi	r25, 0x00	; 0
    66f8:	01 c0       	rjmp	.+2      	; 0x66fc <_ZL11i2c_0_WaitRv+0x40>
    66fa:	91 e0       	ldi	r25, 0x01	; 1
    66fc:	91 11       	cpse	r25, r1
    66fe:	e5 cf       	rjmp	.-54     	; 0x66ca <_ZL11i2c_0_WaitRv+0xe>
    6700:	08 95       	ret

00006702 <_ZL11i2c_1_WaitWv>:
    6702:	88 ec       	ldi	r24, 0xC8	; 200
    6704:	90 e0       	ldi	r25, 0x00	; 0
    6706:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c1_timeout_ticks>
    670a:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    670e:	80 e0       	ldi	r24, 0x00	; 0
    6710:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    6714:	29 2f       	mov	r18, r25
    6716:	20 7c       	andi	r18, 0xC0	; 192
    6718:	21 f0       	breq	.+8      	; 0x6722 <_ZL11i2c_1_WaitWv+0x20>
    671a:	94 fd       	sbrc	r25, 4
    671c:	05 c0       	rjmp	.+10     	; 0x6728 <_ZL11i2c_1_WaitWv+0x26>
    671e:	81 e0       	ldi	r24, 0x01	; 1
    6720:	06 c0       	rjmp	.+12     	; 0x672e <_ZL11i2c_1_WaitWv+0x2c>
    6722:	9c 70       	andi	r25, 0x0C	; 12
    6724:	19 f4       	brne	.+6      	; 0x672c <_ZL11i2c_1_WaitWv+0x2a>
    6726:	03 c0       	rjmp	.+6      	; 0x672e <_ZL11i2c_1_WaitWv+0x2c>
    6728:	82 e0       	ldi	r24, 0x02	; 2
    672a:	01 c0       	rjmp	.+2      	; 0x672e <_ZL11i2c_1_WaitWv+0x2c>
    672c:	84 e0       	ldi	r24, 0x04	; 4
    672e:	81 11       	cpse	r24, r1
    6730:	08 c0       	rjmp	.+16     	; 0x6742 <_ZL11i2c_1_WaitWv+0x40>
    6732:	20 91 1e 40 	lds	r18, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    6736:	30 91 1f 40 	lds	r19, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    673a:	23 2b       	or	r18, r19
    673c:	21 f4       	brne	.+8      	; 0x6746 <_ZL11i2c_1_WaitWv+0x44>
    673e:	90 e0       	ldi	r25, 0x00	; 0
    6740:	03 c0       	rjmp	.+6      	; 0x6748 <_ZL11i2c_1_WaitWv+0x46>
    6742:	90 e0       	ldi	r25, 0x00	; 0
    6744:	01 c0       	rjmp	.+2      	; 0x6748 <_ZL11i2c_1_WaitWv+0x46>
    6746:	91 e0       	ldi	r25, 0x01	; 1
    6748:	91 11       	cpse	r25, r1
    674a:	e2 cf       	rjmp	.-60     	; 0x6710 <_ZL11i2c_1_WaitWv+0xe>
    674c:	08 95       	ret

0000674e <_ZL11I2C_1_WaitRv>:
    674e:	88 ec       	ldi	r24, 0xC8	; 200
    6750:	90 e0       	ldi	r25, 0x00	; 0
    6752:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    6756:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    675a:	80 e0       	ldi	r24, 0x00	; 0
    675c:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    6760:	90 7c       	andi	r25, 0xC0	; 192
    6762:	29 f4       	brne	.+10     	; 0x676e <_ZL11I2C_1_WaitRv+0x20>
    6764:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    6768:	9c 70       	andi	r25, 0x0C	; 12
    676a:	19 f4       	brne	.+6      	; 0x6772 <_ZL11I2C_1_WaitRv+0x24>
    676c:	03 c0       	rjmp	.+6      	; 0x6774 <_ZL11I2C_1_WaitRv+0x26>
    676e:	83 e0       	ldi	r24, 0x03	; 3
    6770:	01 c0       	rjmp	.+2      	; 0x6774 <_ZL11I2C_1_WaitRv+0x26>
    6772:	84 e0       	ldi	r24, 0x04	; 4
    6774:	81 11       	cpse	r24, r1
    6776:	08 c0       	rjmp	.+16     	; 0x6788 <_ZL11I2C_1_WaitRv+0x3a>
    6778:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    677c:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    6780:	23 2b       	or	r18, r19
    6782:	21 f4       	brne	.+8      	; 0x678c <_ZL11I2C_1_WaitRv+0x3e>
    6784:	90 e0       	ldi	r25, 0x00	; 0
    6786:	03 c0       	rjmp	.+6      	; 0x678e <_ZL11I2C_1_WaitRv+0x40>
    6788:	90 e0       	ldi	r25, 0x00	; 0
    678a:	01 c0       	rjmp	.+2      	; 0x678e <_ZL11I2C_1_WaitRv+0x40>
    678c:	91 e0       	ldi	r25, 0x01	; 1
    678e:	91 11       	cpse	r25, r1
    6790:	e5 cf       	rjmp	.-54     	; 0x675c <_ZL11I2C_1_WaitRv+0xe>
    6792:	08 95       	ret

00006794 <I2C_0_Init>:
    6794:	e0 ee       	ldi	r30, 0xE0	; 224
    6796:	f5 e0       	ldi	r31, 0x05	; 5
    6798:	85 81       	ldd	r24, Z+5	; 0x05
    679a:	8a 70       	andi	r24, 0x0A	; 10
    679c:	85 83       	std	Z+5, r24	; 0x05
    679e:	85 81       	ldd	r24, Z+5	; 0x05
    67a0:	82 60       	ori	r24, 0x02	; 2
    67a2:	85 83       	std	Z+5, r24	; 0x05
    67a4:	e0 e0       	ldi	r30, 0x00	; 0
    67a6:	f9 e0       	ldi	r31, 0x09	; 9
    67a8:	8f e6       	ldi	r24, 0x6F	; 111
    67aa:	86 83       	std	Z+6, r24	; 0x06
    67ac:	81 e0       	ldi	r24, 0x01	; 1
    67ae:	83 83       	std	Z+3, r24	; 0x03
    67b0:	17 82       	std	Z+7, r1	; 0x07
    67b2:	10 86       	std	Z+8, r1	; 0x08
    67b4:	85 83       	std	Z+5, r24	; 0x05
    67b6:	e2 e5       	ldi	r30, 0x52	; 82
    67b8:	f4 e0       	ldi	r31, 0x04	; 4
    67ba:	80 81       	ld	r24, Z
    67bc:	88 60       	ori	r24, 0x08	; 8
    67be:	80 83       	st	Z, r24
    67c0:	e3 e5       	ldi	r30, 0x53	; 83
    67c2:	f4 e0       	ldi	r31, 0x04	; 4
    67c4:	80 81       	ld	r24, Z
    67c6:	88 60       	ori	r24, 0x08	; 8
    67c8:	80 83       	st	Z, r24
    67ca:	08 95       	ret

000067cc <I2C_0_SendData>:
    67cc:	ff 92       	push	r15
    67ce:	0f 93       	push	r16
    67d0:	1f 93       	push	r17
    67d2:	cf 93       	push	r28
    67d4:	df 93       	push	r29
    67d6:	c6 2f       	mov	r28, r22
    67d8:	8a 01       	movw	r16, r20
    67da:	d2 2f       	mov	r29, r18
    67dc:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    67e0:	0e 94 2e 33 	call	0x665c	; 0x665c <_ZL11i2c_0_WaitWv>
    67e4:	81 30       	cpi	r24, 0x01	; 1
    67e6:	f1 f4       	brne	.+60     	; 0x6824 <I2C_0_SendData+0x58>
    67e8:	c0 93 08 09 	sts	0x0908, r28	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    67ec:	0e 94 2e 33 	call	0x665c	; 0x665c <_ZL11i2c_0_WaitWv>
    67f0:	81 30       	cpi	r24, 0x01	; 1
    67f2:	d1 f4       	brne	.+52     	; 0x6828 <I2C_0_SendData+0x5c>
    67f4:	dd 23       	and	r29, r29
    67f6:	d1 f0       	breq	.+52     	; 0x682c <I2C_0_SendData+0x60>
    67f8:	01 15       	cp	r16, r1
    67fa:	11 05       	cpc	r17, r1
    67fc:	c9 f0       	breq	.+50     	; 0x6830 <I2C_0_SendData+0x64>
    67fe:	c0 e0       	ldi	r28, 0x00	; 0
    6800:	ff 24       	eor	r15, r15
    6802:	fa 94       	dec	r15
    6804:	fd 0e       	add	r15, r29
    6806:	dd 23       	and	r29, r29
    6808:	a9 f0       	breq	.+42     	; 0x6834 <I2C_0_SendData+0x68>
    680a:	f8 01       	movw	r30, r16
    680c:	80 81       	ld	r24, Z
    680e:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    6812:	0e 94 2e 33 	call	0x665c	; 0x665c <_ZL11i2c_0_WaitWv>
    6816:	81 30       	cpi	r24, 0x01	; 1
    6818:	79 f4       	brne	.+30     	; 0x6838 <I2C_0_SendData+0x6c>
    681a:	cf 5f       	subi	r28, 0xFF	; 255
    681c:	0f 5f       	subi	r16, 0xFF	; 255
    681e:	1f 4f       	sbci	r17, 0xFF	; 255
    6820:	df 2d       	mov	r29, r15
    6822:	ee cf       	rjmp	.-36     	; 0x6800 <I2C_0_SendData+0x34>
    6824:	8f ef       	ldi	r24, 0xFF	; 255
    6826:	09 c0       	rjmp	.+18     	; 0x683a <I2C_0_SendData+0x6e>
    6828:	8f ef       	ldi	r24, 0xFF	; 255
    682a:	07 c0       	rjmp	.+14     	; 0x683a <I2C_0_SendData+0x6e>
    682c:	80 e0       	ldi	r24, 0x00	; 0
    682e:	05 c0       	rjmp	.+10     	; 0x683a <I2C_0_SendData+0x6e>
    6830:	80 e0       	ldi	r24, 0x00	; 0
    6832:	03 c0       	rjmp	.+6      	; 0x683a <I2C_0_SendData+0x6e>
    6834:	8c 2f       	mov	r24, r28
    6836:	01 c0       	rjmp	.+2      	; 0x683a <I2C_0_SendData+0x6e>
    6838:	8c 2f       	mov	r24, r28
    683a:	df 91       	pop	r29
    683c:	cf 91       	pop	r28
    683e:	1f 91       	pop	r17
    6840:	0f 91       	pop	r16
    6842:	ff 90       	pop	r15
    6844:	08 95       	ret

00006846 <I2C_0_GetData>:
    6846:	ef 92       	push	r14
    6848:	ff 92       	push	r15
    684a:	1f 93       	push	r17
    684c:	cf 93       	push	r28
    684e:	df 93       	push	r29
    6850:	c8 2f       	mov	r28, r24
    6852:	d6 2f       	mov	r29, r22
    6854:	7a 01       	movw	r14, r20
    6856:	12 2f       	mov	r17, r18
    6858:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    685c:	0e 94 2e 33 	call	0x665c	; 0x665c <_ZL11i2c_0_WaitWv>
    6860:	81 30       	cpi	r24, 0x01	; 1
    6862:	61 f5       	brne	.+88     	; 0x68bc <I2C_0_GetData+0x76>
    6864:	d0 93 08 09 	sts	0x0908, r29	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    6868:	0e 94 2e 33 	call	0x665c	; 0x665c <_ZL11i2c_0_WaitWv>
    686c:	81 30       	cpi	r24, 0x01	; 1
    686e:	41 f5       	brne	.+80     	; 0x68c0 <I2C_0_GetData+0x7a>
    6870:	c1 60       	ori	r28, 0x01	; 1
    6872:	c0 93 07 09 	sts	0x0907, r28	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    6876:	0e 94 2e 33 	call	0x665c	; 0x665c <_ZL11i2c_0_WaitWv>
    687a:	81 30       	cpi	r24, 0x01	; 1
    687c:	19 f5       	brne	.+70     	; 0x68c4 <I2C_0_GetData+0x7e>
    687e:	11 23       	and	r17, r17
    6880:	19 f1       	breq	.+70     	; 0x68c8 <I2C_0_GetData+0x82>
    6882:	e1 14       	cp	r14, r1
    6884:	f1 04       	cpc	r15, r1
    6886:	11 f1       	breq	.+68     	; 0x68cc <I2C_0_GetData+0x86>
    6888:	c0 e0       	ldi	r28, 0x00	; 0
    688a:	df ef       	ldi	r29, 0xFF	; 255
    688c:	d1 0f       	add	r29, r17
    688e:	11 23       	and	r17, r17
    6890:	f9 f0       	breq	.+62     	; 0x68d0 <I2C_0_GetData+0x8a>
    6892:	0e 94 5e 33 	call	0x66bc	; 0x66bc <_ZL11i2c_0_WaitRv>
    6896:	83 30       	cpi	r24, 0x03	; 3
    6898:	e9 f4       	brne	.+58     	; 0x68d4 <I2C_0_GetData+0x8e>
    689a:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    689e:	f7 01       	movw	r30, r14
    68a0:	80 83       	st	Z, r24
    68a2:	d1 11       	cpse	r29, r1
    68a4:	02 c0       	rjmp	.+4      	; 0x68aa <I2C_0_GetData+0x64>
    68a6:	87 e0       	ldi	r24, 0x07	; 7
    68a8:	01 c0       	rjmp	.+2      	; 0x68ac <I2C_0_GetData+0x66>
    68aa:	82 e0       	ldi	r24, 0x02	; 2
    68ac:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
    68b0:	cf 5f       	subi	r28, 0xFF	; 255
    68b2:	ff ef       	ldi	r31, 0xFF	; 255
    68b4:	ef 1a       	sub	r14, r31
    68b6:	ff 0a       	sbc	r15, r31
    68b8:	1d 2f       	mov	r17, r29
    68ba:	e7 cf       	rjmp	.-50     	; 0x688a <I2C_0_GetData+0x44>
    68bc:	8f ef       	ldi	r24, 0xFF	; 255
    68be:	0b c0       	rjmp	.+22     	; 0x68d6 <I2C_0_GetData+0x90>
    68c0:	8f ef       	ldi	r24, 0xFF	; 255
    68c2:	09 c0       	rjmp	.+18     	; 0x68d6 <I2C_0_GetData+0x90>
    68c4:	8f ef       	ldi	r24, 0xFF	; 255
    68c6:	07 c0       	rjmp	.+14     	; 0x68d6 <I2C_0_GetData+0x90>
    68c8:	80 e0       	ldi	r24, 0x00	; 0
    68ca:	05 c0       	rjmp	.+10     	; 0x68d6 <I2C_0_GetData+0x90>
    68cc:	80 e0       	ldi	r24, 0x00	; 0
    68ce:	03 c0       	rjmp	.+6      	; 0x68d6 <I2C_0_GetData+0x90>
    68d0:	8c 2f       	mov	r24, r28
    68d2:	01 c0       	rjmp	.+2      	; 0x68d6 <I2C_0_GetData+0x90>
    68d4:	8c 2f       	mov	r24, r28
    68d6:	df 91       	pop	r29
    68d8:	cf 91       	pop	r28
    68da:	1f 91       	pop	r17
    68dc:	ff 90       	pop	r15
    68de:	ef 90       	pop	r14
    68e0:	08 95       	ret

000068e2 <I2C_1_Init>:


void I2C_1_Init(void)
{
	/* Select I2C pins PB2/PB3 */
	PORTMUX.TWIROUTEA &= 0x03;
    68e2:	e0 ee       	ldi	r30, 0xE0	; 224
    68e4:	f5 e0       	ldi	r31, 0x05	; 5
    68e6:	85 81       	ldd	r24, Z+5	; 0x05
    68e8:	83 70       	andi	r24, 0x03	; 3
    68ea:	85 83       	std	Z+5, r24	; 0x05
	PORTMUX.TWIROUTEA |= 0x08;
    68ec:	85 81       	ldd	r24, Z+5	; 0x05
    68ee:	88 60       	ori	r24, 0x08	; 8
    68f0:	85 83       	std	Z+5, r24	; 0x05
	
	/* Host Baud Rate Control */
	TWI1.MBAUD = TWI_BAUD((I2C_SCL_FREQ), 0.3);
    68f2:	e0 e2       	ldi	r30, 0x20	; 32
    68f4:	f9 e0       	ldi	r31, 0x09	; 9
    68f6:	8f e6       	ldi	r24, 0x6F	; 111
    68f8:	86 83       	std	Z+6, r24	; 0x06
	
	/* Enable TWI */
	TWI1.MCTRLA = TWI_ENABLE_bm;
    68fa:	81 e0       	ldi	r24, 0x01	; 1
    68fc:	83 83       	std	Z+3, r24	; 0x03
	
	/* Initialize the address register */
	TWI1.MADDR = 0x00;
    68fe:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI1.MDATA = 0x00;
    6900:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI1.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    6902:	85 83       	std	Z+5, r24	; 0x05
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    6904:	e2 e3       	ldi	r30, 0x32	; 50
    6906:	f4 e0       	ldi	r31, 0x04	; 4
    6908:	80 81       	ld	r24, Z
    690a:	88 60       	ori	r24, 0x08	; 8
    690c:	80 83       	st	Z, r24
    690e:	e3 e3       	ldi	r30, 0x33	; 51
    6910:	f4 e0       	ldi	r31, 0x04	; 4
    6912:	80 81       	ld	r24, Z
    6914:	88 60       	ori	r24, 0x08	; 8
    6916:	80 83       	st	Z, r24
    6918:	08 95       	ret

0000691a <I2C_1_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_1_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    691a:	ff 92       	push	r15
    691c:	0f 93       	push	r16
    691e:	1f 93       	push	r17
    6920:	cf 93       	push	r28
    6922:	df 93       	push	r29
    6924:	c6 2f       	mov	r28, r22
    6926:	8a 01       	movw	r16, r20
    6928:	d2 2f       	mov	r29, r18
	uint8_t retVal = (uint8_t) - 1;
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
    692a:	8e 7f       	andi	r24, 0xFE	; 254
    692c:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    6930:	0e 94 81 33 	call	0x6702	; 0x6702 <_ZL11i2c_1_WaitWv>
    6934:	81 30       	cpi	r24, 0x01	; 1
    6936:	f1 f4       	brne	.+60     	; 0x6974 <I2C_1_SendData+0x5a>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    6938:	c0 93 28 09 	sts	0x0928, r28	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    693c:	0e 94 81 33 	call	0x6702	; 0x6702 <_ZL11i2c_1_WaitWv>
    6940:	81 30       	cpi	r24, 0x01	; 1
    6942:	d1 f4       	brne	.+52     	; 0x6978 <I2C_1_SendData+0x5e>
	{
		return retVal;
	}	

	retVal = 0;
	if((len != 0) && (pData != null))
    6944:	dd 23       	and	r29, r29
    6946:	d1 f0       	breq	.+52     	; 0x697c <I2C_1_SendData+0x62>
    6948:	01 15       	cp	r16, r1
    694a:	11 05       	cpc	r17, r1
    694c:	c9 f0       	breq	.+50     	; 0x6980 <I2C_1_SendData+0x66>
    694e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    6950:	ff 24       	eor	r15, r15
    6952:	fa 94       	dec	r15
    6954:	fd 0e       	add	r15, r29
    6956:	dd 23       	and	r29, r29
    6958:	a9 f0       	breq	.+42     	; 0x6984 <I2C_1_SendData+0x6a>
		{
			TWI1.MDATA = *pData;
    695a:	f8 01       	movw	r30, r16
    695c:	80 81       	ld	r24, Z
    695e:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
			if(i2c_1_WaitW() == I2C_ACKED)
    6962:	0e 94 81 33 	call	0x6702	; 0x6702 <_ZL11i2c_1_WaitWv>
    6966:	81 30       	cpi	r24, 0x01	; 1
    6968:	79 f4       	brne	.+30     	; 0x6988 <I2C_1_SendData+0x6e>
			{
				retVal++;
    696a:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    696c:	0f 5f       	subi	r16, 0xFF	; 255
    696e:	1f 4f       	sbci	r17, 0xFF	; 255
	}	

	retVal = 0;
	if((len != 0) && (pData != null))
	{
		while(len--)
    6970:	df 2d       	mov	r29, r15
    6972:	ee cf       	rjmp	.-36     	; 0x6950 <I2C_1_SendData+0x36>
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6974:	8f ef       	ldi	r24, 0xFF	; 255
    6976:	09 c0       	rjmp	.+18     	; 0x698a <I2C_1_SendData+0x70>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6978:	8f ef       	ldi	r24, 0xFF	; 255
    697a:	07 c0       	rjmp	.+14     	; 0x698a <I2C_1_SendData+0x70>
	}	

	retVal = 0;
    697c:	80 e0       	ldi	r24, 0x00	; 0
    697e:	05 c0       	rjmp	.+10     	; 0x698a <I2C_1_SendData+0x70>
    6980:	80 e0       	ldi	r24, 0x00	; 0
    6982:	03 c0       	rjmp	.+6      	; 0x698a <I2C_1_SendData+0x70>
    6984:	8c 2f       	mov	r24, r28
    6986:	01 c0       	rjmp	.+2      	; 0x698a <I2C_1_SendData+0x70>
    6988:	8c 2f       	mov	r24, r28
			}
		}
	}
	
	return retVal;
}
    698a:	df 91       	pop	r29
    698c:	cf 91       	pop	r28
    698e:	1f 91       	pop	r17
    6990:	0f 91       	pop	r16
    6992:	ff 90       	pop	r15
    6994:	08 95       	ret

00006996 <I2C_1_GetData>:


/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_1_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    6996:	ef 92       	push	r14
    6998:	ff 92       	push	r15
    699a:	1f 93       	push	r17
    699c:	cf 93       	push	r28
    699e:	df 93       	push	r29
    69a0:	c8 2f       	mov	r28, r24
    69a2:	d6 2f       	mov	r29, r22
    69a4:	7a 01       	movw	r14, r20
    69a6:	12 2f       	mov	r17, r18
	uint8_t retVal = (uint8_t) -1;
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
    69a8:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    69ac:	0e 94 81 33 	call	0x6702	; 0x6702 <_ZL11i2c_1_WaitWv>
    69b0:	81 30       	cpi	r24, 0x01	; 1
    69b2:	61 f5       	brne	.+88     	; 0x6a0c <I2C_1_GetData+0x76>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    69b4:	d0 93 28 09 	sts	0x0928, r29	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    69b8:	0e 94 81 33 	call	0x6702	; 0x6702 <_ZL11i2c_1_WaitWv>
    69bc:	81 30       	cpi	r24, 0x01	; 1
    69be:	41 f5       	brne	.+80     	; 0x6a10 <I2C_1_GetData+0x7a>
	{
		return retVal;
	}
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
    69c0:	c1 60       	ori	r28, 0x01	; 1
    69c2:	c0 93 27 09 	sts	0x0927, r28	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    69c6:	0e 94 81 33 	call	0x6702	; 0x6702 <_ZL11i2c_1_WaitWv>
    69ca:	81 30       	cpi	r24, 0x01	; 1
    69cc:	19 f5       	brne	.+70     	; 0x6a14 <I2C_1_GetData+0x7e>
	{
		return retVal;	
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
    69ce:	11 23       	and	r17, r17
    69d0:	19 f1       	breq	.+70     	; 0x6a18 <I2C_1_GetData+0x82>
    69d2:	e1 14       	cp	r14, r1
    69d4:	f1 04       	cpc	r15, r1
    69d6:	11 f1       	breq	.+68     	; 0x6a1c <I2C_1_GetData+0x86>
    69d8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    69da:	df ef       	ldi	r29, 0xFF	; 255
    69dc:	d1 0f       	add	r29, r17
    69de:	11 23       	and	r17, r17
    69e0:	f9 f0       	breq	.+62     	; 0x6a20 <I2C_1_GetData+0x8a>
		{
			if(I2C_1_WaitR() == I2C_READY)
    69e2:	0e 94 a7 33 	call	0x674e	; 0x674e <_ZL11I2C_1_WaitRv>
    69e6:	83 30       	cpi	r24, 0x03	; 3
    69e8:	e9 f4       	brne	.+58     	; 0x6a24 <I2C_1_GetData+0x8e>
			{
				*pData = TWI1.MDATA;
    69ea:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
    69ee:	f7 01       	movw	r30, r14
    69f0:	80 83       	st	Z, r24
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    69f2:	d1 11       	cpse	r29, r1
    69f4:	02 c0       	rjmp	.+4      	; 0x69fa <I2C_1_GetData+0x64>
    69f6:	87 e0       	ldi	r24, 0x07	; 7
    69f8:	01 c0       	rjmp	.+2      	; 0x69fc <I2C_1_GetData+0x66>
    69fa:	82 e0       	ldi	r24, 0x02	; 2
    69fc:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <__TEXT_REGION_LENGTH__+0x7e0924>
				retVal++;
    6a00:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    6a02:	ff ef       	ldi	r31, 0xFF	; 255
    6a04:	ef 1a       	sub	r14, r31
    6a06:	ff 0a       	sbc	r15, r31
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
	{
		while(len--)
    6a08:	1d 2f       	mov	r17, r29
    6a0a:	e7 cf       	rjmp	.-50     	; 0x69da <I2C_1_GetData+0x44>
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6a0c:	8f ef       	ldi	r24, 0xFF	; 255
    6a0e:	0b c0       	rjmp	.+22     	; 0x6a26 <I2C_1_GetData+0x90>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    6a10:	8f ef       	ldi	r24, 0xFF	; 255
    6a12:	09 c0       	rjmp	.+18     	; 0x6a26 <I2C_1_GetData+0x90>
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;	
    6a14:	8f ef       	ldi	r24, 0xFF	; 255
    6a16:	07 c0       	rjmp	.+14     	; 0x6a26 <I2C_1_GetData+0x90>
	}
	
	retVal = 0;
    6a18:	80 e0       	ldi	r24, 0x00	; 0
    6a1a:	05 c0       	rjmp	.+10     	; 0x6a26 <I2C_1_GetData+0x90>
    6a1c:	80 e0       	ldi	r24, 0x00	; 0
    6a1e:	03 c0       	rjmp	.+6      	; 0x6a26 <I2C_1_GetData+0x90>
    6a20:	8c 2f       	mov	r24, r28
    6a22:	01 c0       	rjmp	.+2      	; 0x6a26 <I2C_1_GetData+0x90>
    6a24:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
    6a26:	df 91       	pop	r29
    6a28:	cf 91       	pop	r28
    6a2a:	1f 91       	pop	r17
    6a2c:	ff 90       	pop	r15
    6a2e:	ef 90       	pop	r14
    6a30:	08 95       	ret

00006a32 <_ZL21USART4_initializationm>:


void lb_send_sync(void)
{
	sprintf(g_tempMsgBuff, ".....");
	lb_send_text(g_tempMsgBuff);
    6a32:	20 b3       	in	r18, 0x10	; 16
    6a34:	2d 7f       	andi	r18, 0xFD	; 253
    6a36:	20 bb       	out	0x10, r18	; 16
    6a38:	e1 e9       	ldi	r30, 0x91	; 145
    6a3a:	f4 e0       	ldi	r31, 0x04	; 4
    6a3c:	20 81       	ld	r18, Z
    6a3e:	27 7f       	andi	r18, 0xF7	; 247
    6a40:	20 83       	st	Z, r18
    6a42:	20 b3       	in	r18, 0x10	; 16
    6a44:	21 60       	ori	r18, 0x01	; 1
    6a46:	20 bb       	out	0x10, r18	; 16
    6a48:	21 b3       	in	r18, 0x11	; 17
    6a4a:	21 60       	ori	r18, 0x01	; 1
    6a4c:	21 bb       	out	0x11, r18	; 17
    6a4e:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <USART4_init>
    6a52:	08 95       	ret

00006a54 <_ZL21USART1_initializationm>:
    6a54:	28 b1       	in	r18, 0x08	; 8
    6a56:	2d 7f       	andi	r18, 0xFD	; 253
    6a58:	28 b9       	out	0x08, r18	; 8
    6a5a:	e1 e5       	ldi	r30, 0x51	; 81
    6a5c:	f4 e0       	ldi	r31, 0x04	; 4
    6a5e:	20 81       	ld	r18, Z
    6a60:	27 7f       	andi	r18, 0xF7	; 247
    6a62:	20 83       	st	Z, r18
    6a64:	28 b1       	in	r18, 0x08	; 8
    6a66:	21 60       	ori	r18, 0x01	; 1
    6a68:	28 b9       	out	0x08, r18	; 8
    6a6a:	29 b1       	in	r18, 0x09	; 9
    6a6c:	21 60       	ori	r18, 0x01	; 1
    6a6e:	29 b9       	out	0x09, r18	; 9
    6a70:	0e 94 82 45 	call	0x8b04	; 0x8b04 <USART1_init>
    6a74:	08 95       	ret

00006a76 <_ZL16linkbus_start_txv>:
    6a76:	cf 93       	push	r28
    6a78:	c0 91 9a 47 	lds	r28, 0x479A	; 0x80479a <_ZL17linkbus_tx_active>
    6a7c:	81 e0       	ldi	r24, 0x01	; 1
    6a7e:	c8 27       	eor	r28, r24
    6a80:	59 f0       	breq	.+22     	; 0x6a98 <_ZL16linkbus_start_txv+0x22>
    6a82:	80 93 9a 47 	sts	0x479A, r24	; 0x80479a <_ZL17linkbus_tx_active>
    6a86:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6a8a:	81 11       	cpse	r24, r1
    6a8c:	03 c0       	rjmp	.+6      	; 0x6a94 <_ZL16linkbus_start_txv+0x1e>
    6a8e:	0e 94 d8 45 	call	0x8bb0	; 0x8bb0 <USART4_enable_tx>
    6a92:	02 c0       	rjmp	.+4      	; 0x6a98 <_ZL16linkbus_start_txv+0x22>
    6a94:	0e 94 a4 45 	call	0x8b48	; 0x8b48 <USART1_enable_tx>
    6a98:	8c 2f       	mov	r24, r28
    6a9a:	cf 91       	pop	r28
    6a9c:	08 95       	ret

00006a9e <_Z18nextFullLBTxBufferv>:
    6a9e:	90 e0       	ldi	r25, 0x00	; 0
    6aa0:	80 91 4d 46 	lds	r24, 0x464D	; 0x80464d <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    6aa4:	28 2f       	mov	r18, r24
    6aa6:	30 e0       	ldi	r19, 0x00	; 0
    6aa8:	42 e3       	ldi	r20, 0x32	; 50
    6aaa:	42 9f       	mul	r20, r18
    6aac:	f0 01       	movw	r30, r0
    6aae:	43 9f       	mul	r20, r19
    6ab0:	f0 0d       	add	r31, r0
    6ab2:	11 24       	eor	r1, r1
    6ab4:	ee 52       	subi	r30, 0x2E	; 46
    6ab6:	f9 4b       	sbci	r31, 0xB9	; 185
    6ab8:	40 81       	ld	r20, Z
    6aba:	41 11       	cpse	r20, r1
    6abc:	0b c0       	rjmp	.+22     	; 0x6ad4 <_Z18nextFullLBTxBufferv+0x36>
    6abe:	9f 5f       	subi	r25, 0xFF	; 255
    6ac0:	94 30       	cpi	r25, 0x04	; 4
    6ac2:	50 f4       	brcc	.+20     	; 0x6ad8 <_Z18nextFullLBTxBufferv+0x3a>
    6ac4:	8f 5f       	subi	r24, 0xFF	; 255
    6ac6:	80 93 4d 46 	sts	0x464D, r24	; 0x80464d <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    6aca:	84 30       	cpi	r24, 0x04	; 4
    6acc:	48 f3       	brcs	.-46     	; 0x6aa0 <_Z18nextFullLBTxBufferv+0x2>
    6ace:	10 92 4d 46 	sts	0x464D, r1	; 0x80464d <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    6ad2:	e6 cf       	rjmp	.-52     	; 0x6aa0 <_Z18nextFullLBTxBufferv+0x2>
    6ad4:	81 e0       	ldi	r24, 0x01	; 1
    6ad6:	01 c0       	rjmp	.+2      	; 0x6ada <_Z18nextFullLBTxBufferv+0x3c>
    6ad8:	80 e0       	ldi	r24, 0x00	; 0
    6ada:	88 23       	and	r24, r24
    6adc:	49 f0       	breq	.+18     	; 0x6af0 <_Z18nextFullLBTxBufferv+0x52>
    6ade:	42 e3       	ldi	r20, 0x32	; 50
    6ae0:	42 9f       	mul	r20, r18
    6ae2:	c0 01       	movw	r24, r0
    6ae4:	43 9f       	mul	r20, r19
    6ae6:	90 0d       	add	r25, r0
    6ae8:	11 24       	eor	r1, r1
    6aea:	8e 52       	subi	r24, 0x2E	; 46
    6aec:	99 4b       	sbci	r25, 0xB9	; 185
    6aee:	08 95       	ret
    6af0:	80 e0       	ldi	r24, 0x00	; 0
    6af2:	90 e0       	ldi	r25, 0x00	; 0
    6af4:	08 95       	ret

00006af6 <_Z19nextEmptyLBTxBufferv>:
    6af6:	90 e0       	ldi	r25, 0x00	; 0
    6af8:	80 91 4c 46 	lds	r24, 0x464C	; 0x80464c <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    6afc:	28 2f       	mov	r18, r24
    6afe:	30 e0       	ldi	r19, 0x00	; 0
    6b00:	42 e3       	ldi	r20, 0x32	; 50
    6b02:	42 9f       	mul	r20, r18
    6b04:	f0 01       	movw	r30, r0
    6b06:	43 9f       	mul	r20, r19
    6b08:	f0 0d       	add	r31, r0
    6b0a:	11 24       	eor	r1, r1
    6b0c:	ee 52       	subi	r30, 0x2E	; 46
    6b0e:	f9 4b       	sbci	r31, 0xB9	; 185
    6b10:	40 81       	ld	r20, Z
    6b12:	44 23       	and	r20, r20
    6b14:	59 f0       	breq	.+22     	; 0x6b2c <_Z19nextEmptyLBTxBufferv+0x36>
    6b16:	9f 5f       	subi	r25, 0xFF	; 255
    6b18:	94 30       	cpi	r25, 0x04	; 4
    6b1a:	50 f4       	brcc	.+20     	; 0x6b30 <_Z19nextEmptyLBTxBufferv+0x3a>
    6b1c:	8f 5f       	subi	r24, 0xFF	; 255
    6b1e:	80 93 4c 46 	sts	0x464C, r24	; 0x80464c <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    6b22:	84 30       	cpi	r24, 0x04	; 4
    6b24:	48 f3       	brcs	.-46     	; 0x6af8 <_Z19nextEmptyLBTxBufferv+0x2>
    6b26:	10 92 4c 46 	sts	0x464C, r1	; 0x80464c <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    6b2a:	e6 cf       	rjmp	.-52     	; 0x6af8 <_Z19nextEmptyLBTxBufferv+0x2>
    6b2c:	81 e0       	ldi	r24, 0x01	; 1
    6b2e:	01 c0       	rjmp	.+2      	; 0x6b32 <_Z19nextEmptyLBTxBufferv+0x3c>
    6b30:	80 e0       	ldi	r24, 0x00	; 0
    6b32:	88 23       	and	r24, r24
    6b34:	49 f0       	breq	.+18     	; 0x6b48 <_Z19nextEmptyLBTxBufferv+0x52>
    6b36:	42 e3       	ldi	r20, 0x32	; 50
    6b38:	42 9f       	mul	r20, r18
    6b3a:	c0 01       	movw	r24, r0
    6b3c:	43 9f       	mul	r20, r19
    6b3e:	90 0d       	add	r25, r0
    6b40:	11 24       	eor	r1, r1
    6b42:	8e 52       	subi	r24, 0x2E	; 46
    6b44:	99 4b       	sbci	r25, 0xB9	; 185
    6b46:	08 95       	ret
    6b48:	80 e0       	ldi	r24, 0x00	; 0
    6b4a:	90 e0       	ldi	r25, 0x00	; 0
    6b4c:	08 95       	ret

00006b4e <_Z19nextEmptyLBRxBufferv>:
    6b4e:	90 e0       	ldi	r25, 0x00	; 0
    6b50:	80 91 4b 46 	lds	r24, 0x464B	; 0x80464b <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    6b54:	28 2f       	mov	r18, r24
    6b56:	30 e0       	ldi	r19, 0x00	; 0
    6b58:	42 e4       	ldi	r20, 0x42	; 66
    6b5a:	42 9f       	mul	r20, r18
    6b5c:	f0 01       	movw	r30, r0
    6b5e:	43 9f       	mul	r20, r19
    6b60:	f0 0d       	add	r31, r0
    6b62:	11 24       	eor	r1, r1
    6b64:	e2 5b       	subi	r30, 0xB2	; 178
    6b66:	f9 4b       	sbci	r31, 0xB9	; 185
    6b68:	41 81       	ldd	r20, Z+1	; 0x01
    6b6a:	52 81       	ldd	r21, Z+2	; 0x02
    6b6c:	45 2b       	or	r20, r21
    6b6e:	59 f0       	breq	.+22     	; 0x6b86 <_Z19nextEmptyLBRxBufferv+0x38>
    6b70:	9f 5f       	subi	r25, 0xFF	; 255
    6b72:	92 30       	cpi	r25, 0x02	; 2
    6b74:	50 f4       	brcc	.+20     	; 0x6b8a <_Z19nextEmptyLBRxBufferv+0x3c>
    6b76:	8f 5f       	subi	r24, 0xFF	; 255
    6b78:	80 93 4b 46 	sts	0x464B, r24	; 0x80464b <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    6b7c:	82 30       	cpi	r24, 0x02	; 2
    6b7e:	40 f3       	brcs	.-48     	; 0x6b50 <_Z19nextEmptyLBRxBufferv+0x2>
    6b80:	10 92 4b 46 	sts	0x464B, r1	; 0x80464b <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    6b84:	e5 cf       	rjmp	.-54     	; 0x6b50 <_Z19nextEmptyLBRxBufferv+0x2>
    6b86:	81 e0       	ldi	r24, 0x01	; 1
    6b88:	01 c0       	rjmp	.+2      	; 0x6b8c <_Z19nextEmptyLBRxBufferv+0x3e>
    6b8a:	80 e0       	ldi	r24, 0x00	; 0
    6b8c:	88 23       	and	r24, r24
    6b8e:	49 f0       	breq	.+18     	; 0x6ba2 <_Z19nextEmptyLBRxBufferv+0x54>
    6b90:	42 e4       	ldi	r20, 0x42	; 66
    6b92:	42 9f       	mul	r20, r18
    6b94:	c0 01       	movw	r24, r0
    6b96:	43 9f       	mul	r20, r19
    6b98:	90 0d       	add	r25, r0
    6b9a:	11 24       	eor	r1, r1
    6b9c:	82 5b       	subi	r24, 0xB2	; 178
    6b9e:	99 4b       	sbci	r25, 0xB9	; 185
    6ba0:	08 95       	ret
    6ba2:	80 e0       	ldi	r24, 0x00	; 0
    6ba4:	90 e0       	ldi	r25, 0x00	; 0
    6ba6:	08 95       	ret

00006ba8 <_Z18nextFullLBRxBufferv>:
    6ba8:	90 e0       	ldi	r25, 0x00	; 0
    6baa:	80 91 4a 46 	lds	r24, 0x464A	; 0x80464a <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    6bae:	28 2f       	mov	r18, r24
    6bb0:	30 e0       	ldi	r19, 0x00	; 0
    6bb2:	42 e4       	ldi	r20, 0x42	; 66
    6bb4:	42 9f       	mul	r20, r18
    6bb6:	f0 01       	movw	r30, r0
    6bb8:	43 9f       	mul	r20, r19
    6bba:	f0 0d       	add	r31, r0
    6bbc:	11 24       	eor	r1, r1
    6bbe:	e2 5b       	subi	r30, 0xB2	; 178
    6bc0:	f9 4b       	sbci	r31, 0xB9	; 185
    6bc2:	41 81       	ldd	r20, Z+1	; 0x01
    6bc4:	52 81       	ldd	r21, Z+2	; 0x02
    6bc6:	45 2b       	or	r20, r21
    6bc8:	59 f4       	brne	.+22     	; 0x6be0 <_Z18nextFullLBRxBufferv+0x38>
    6bca:	9f 5f       	subi	r25, 0xFF	; 255
    6bcc:	92 30       	cpi	r25, 0x02	; 2
    6bce:	50 f4       	brcc	.+20     	; 0x6be4 <_Z18nextFullLBRxBufferv+0x3c>
    6bd0:	8f 5f       	subi	r24, 0xFF	; 255
    6bd2:	80 93 4a 46 	sts	0x464A, r24	; 0x80464a <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    6bd6:	82 30       	cpi	r24, 0x02	; 2
    6bd8:	40 f3       	brcs	.-48     	; 0x6baa <_Z18nextFullLBRxBufferv+0x2>
    6bda:	10 92 4a 46 	sts	0x464A, r1	; 0x80464a <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    6bde:	e5 cf       	rjmp	.-54     	; 0x6baa <_Z18nextFullLBRxBufferv+0x2>
    6be0:	81 e0       	ldi	r24, 0x01	; 1
    6be2:	01 c0       	rjmp	.+2      	; 0x6be6 <_Z18nextFullLBRxBufferv+0x3e>
    6be4:	80 e0       	ldi	r24, 0x00	; 0
    6be6:	88 23       	and	r24, r24
    6be8:	49 f0       	breq	.+18     	; 0x6bfc <_Z18nextFullLBRxBufferv+0x54>
    6bea:	42 e4       	ldi	r20, 0x42	; 66
    6bec:	42 9f       	mul	r20, r18
    6bee:	c0 01       	movw	r24, r0
    6bf0:	43 9f       	mul	r20, r19
    6bf2:	90 0d       	add	r25, r0
    6bf4:	11 24       	eor	r1, r1
    6bf6:	82 5b       	subi	r24, 0xB2	; 178
    6bf8:	99 4b       	sbci	r25, 0xB9	; 185
    6bfa:	08 95       	ret
    6bfc:	80 e0       	ldi	r24, 0x00	; 0
    6bfe:	90 e0       	ldi	r25, 0x00	; 0
    6c00:	08 95       	ret

00006c02 <_Z19linkbusTxInProgressv>:
    6c02:	80 91 9a 47 	lds	r24, 0x479A	; 0x80479a <_ZL17linkbus_tx_active>
    6c06:	08 95       	ret

00006c08 <_Z14linkbus_end_txv>:
    6c08:	80 91 9a 47 	lds	r24, 0x479A	; 0x80479a <_ZL17linkbus_tx_active>
    6c0c:	88 23       	and	r24, r24
    6c0e:	89 f0       	breq	.+34     	; 0x6c32 <_Z14linkbus_end_txv+0x2a>
    6c10:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6c14:	81 11       	cpse	r24, r1
    6c16:	06 c0       	rjmp	.+12     	; 0x6c24 <_Z14linkbus_end_txv+0x1c>
    6c18:	e0 e8       	ldi	r30, 0x80	; 128
    6c1a:	f8 e0       	ldi	r31, 0x08	; 8
    6c1c:	85 81       	ldd	r24, Z+5	; 0x05
    6c1e:	8f 7d       	andi	r24, 0xDF	; 223
    6c20:	85 83       	std	Z+5, r24	; 0x05
    6c22:	05 c0       	rjmp	.+10     	; 0x6c2e <_Z14linkbus_end_txv+0x26>
    6c24:	e0 e2       	ldi	r30, 0x20	; 32
    6c26:	f8 e0       	ldi	r31, 0x08	; 8
    6c28:	85 81       	ldd	r24, Z+5	; 0x05
    6c2a:	8f 7d       	andi	r24, 0xDF	; 223
    6c2c:	85 83       	std	Z+5, r24	; 0x05
    6c2e:	10 92 9a 47 	sts	0x479A, r1	; 0x80479a <_ZL17linkbus_tx_active>
    6c32:	08 95       	ret

00006c34 <_Z16linkbus_reset_rxv>:
    6c34:	cf 93       	push	r28
    6c36:	df 93       	push	r29
    6c38:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6c3c:	81 11       	cpse	r24, r1
    6c3e:	14 c0       	rjmp	.+40     	; 0x6c68 <_Z16linkbus_reset_rxv+0x34>
    6c40:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <__TEXT_REGION_LENGTH__+0x7e0886>
    6c44:	88 23       	and	r24, r24
    6c46:	1c f5       	brge	.+70     	; 0x6c8e <_Z16linkbus_reset_rxv+0x5a>
    6c48:	e0 e8       	ldi	r30, 0x80	; 128
    6c4a:	f8 e0       	ldi	r31, 0x08	; 8
    6c4c:	86 81       	ldd	r24, Z+6	; 0x06
    6c4e:	8f 77       	andi	r24, 0x7F	; 127
    6c50:	86 83       	std	Z+6, r24	; 0x06
    6c52:	84 e8       	ldi	r24, 0x84	; 132
    6c54:	ae e4       	ldi	r26, 0x4E	; 78
    6c56:	b6 e4       	ldi	r27, 0x46	; 70
    6c58:	ed 01       	movw	r28, r26
    6c5a:	19 92       	st	Y+, r1
    6c5c:	8a 95       	dec	r24
    6c5e:	e9 f7       	brne	.-6      	; 0x6c5a <_Z16linkbus_reset_rxv+0x26>
    6c60:	86 81       	ldd	r24, Z+6	; 0x06
    6c62:	80 68       	ori	r24, 0x80	; 128
    6c64:	86 83       	std	Z+6, r24	; 0x06
    6c66:	13 c0       	rjmp	.+38     	; 0x6c8e <_Z16linkbus_reset_rxv+0x5a>
    6c68:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x7e0826>
    6c6c:	88 23       	and	r24, r24
    6c6e:	7c f4       	brge	.+30     	; 0x6c8e <_Z16linkbus_reset_rxv+0x5a>
    6c70:	e0 e2       	ldi	r30, 0x20	; 32
    6c72:	f8 e0       	ldi	r31, 0x08	; 8
    6c74:	86 81       	ldd	r24, Z+6	; 0x06
    6c76:	8f 77       	andi	r24, 0x7F	; 127
    6c78:	86 83       	std	Z+6, r24	; 0x06
    6c7a:	84 e8       	ldi	r24, 0x84	; 132
    6c7c:	ae e4       	ldi	r26, 0x4E	; 78
    6c7e:	b6 e4       	ldi	r27, 0x46	; 70
    6c80:	ed 01       	movw	r28, r26
    6c82:	19 92       	st	Y+, r1
    6c84:	8a 95       	dec	r24
    6c86:	e9 f7       	brne	.-6      	; 0x6c82 <_Z16linkbus_reset_rxv+0x4e>
    6c88:	86 81       	ldd	r24, Z+6	; 0x06
    6c8a:	80 68       	ori	r24, 0x80	; 128
    6c8c:	86 83       	std	Z+6, r24	; 0x06
    6c8e:	df 91       	pop	r29
    6c90:	cf 91       	pop	r28
    6c92:	08 95       	ret

00006c94 <_Z12linkbus_initm14USART_Number_t>:
    6c94:	cf 92       	push	r12
    6c96:	df 92       	push	r13
    6c98:	ef 92       	push	r14
    6c9a:	ff 92       	push	r15
    6c9c:	cf 93       	push	r28
    6c9e:	6b 01       	movw	r12, r22
    6ca0:	7c 01       	movw	r14, r24
    6ca2:	84 e8       	ldi	r24, 0x84	; 132
    6ca4:	ee e4       	ldi	r30, 0x4E	; 78
    6ca6:	f6 e4       	ldi	r31, 0x46	; 70
    6ca8:	df 01       	movw	r26, r30
    6caa:	1d 92       	st	X+, r1
    6cac:	8a 95       	dec	r24
    6cae:	e9 f7       	brne	.-6      	; 0x6caa <_Z12linkbus_initm14USART_Number_t+0x16>
    6cb0:	80 e0       	ldi	r24, 0x00	; 0
    6cb2:	90 e0       	ldi	r25, 0x00	; 0
    6cb4:	84 30       	cpi	r24, 0x04	; 4
    6cb6:	91 05       	cpc	r25, r1
    6cb8:	5c f4       	brge	.+22     	; 0x6cd0 <_Z12linkbus_initm14USART_Number_t+0x3c>
    6cba:	22 e3       	ldi	r18, 0x32	; 50
    6cbc:	28 9f       	mul	r18, r24
    6cbe:	f0 01       	movw	r30, r0
    6cc0:	29 9f       	mul	r18, r25
    6cc2:	f0 0d       	add	r31, r0
    6cc4:	11 24       	eor	r1, r1
    6cc6:	ee 52       	subi	r30, 0x2E	; 46
    6cc8:	f9 4b       	sbci	r31, 0xB9	; 185
    6cca:	10 82       	st	Z, r1
    6ccc:	01 96       	adiw	r24, 0x01	; 1
    6cce:	f2 cf       	rjmp	.-28     	; 0x6cb4 <_Z12linkbus_initm14USART_Number_t+0x20>
    6cd0:	46 30       	cpi	r20, 0x06	; 6
    6cd2:	21 f4       	brne	.+8      	; 0x6cdc <_Z12linkbus_initm14USART_Number_t+0x48>
    6cd4:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6cd8:	87 30       	cpi	r24, 0x07	; 7
    6cda:	61 f4       	brne	.+24     	; 0x6cf4 <_Z12linkbus_initm14USART_Number_t+0x60>
    6cdc:	c4 2f       	mov	r28, r20
    6cde:	c7 01       	movw	r24, r14
    6ce0:	b6 01       	movw	r22, r12
    6ce2:	41 11       	cpse	r20, r1
    6ce4:	03 c0       	rjmp	.+6      	; 0x6cec <_Z12linkbus_initm14USART_Number_t+0x58>
    6ce6:	0e 94 19 35 	call	0x6a32	; 0x6a32 <_ZL21USART4_initializationm>
    6cea:	02 c0       	rjmp	.+4      	; 0x6cf0 <_Z12linkbus_initm14USART_Number_t+0x5c>
    6cec:	0e 94 2a 35 	call	0x6a54	; 0x6a54 <_ZL21USART1_initializationm>
    6cf0:	c0 93 22 40 	sts	0x4022, r28	; 0x804022 <g_linkbus_usart_number>
    6cf4:	10 92 23 40 	sts	0x4023, r1	; 0x804023 <_ZL14g_bus_disabled>
    6cf8:	cf 91       	pop	r28
    6cfa:	ff 90       	pop	r15
    6cfc:	ef 90       	pop	r14
    6cfe:	df 90       	pop	r13
    6d00:	cf 90       	pop	r12
    6d02:	08 95       	ret

00006d04 <_Z15linkbus_disablev>:
    6d04:	81 e0       	ldi	r24, 0x01	; 1
    6d06:	80 93 23 40 	sts	0x4023, r24	; 0x804023 <_ZL14g_bus_disabled>
    6d0a:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    6d0e:	84 30       	cpi	r24, 0x04	; 4
    6d10:	19 f4       	brne	.+6      	; 0x6d18 <_Z15linkbus_disablev+0x14>
    6d12:	0e 94 e1 45 	call	0x8bc2	; 0x8bc2 <USART4_disable>
    6d16:	02 c0       	rjmp	.+4      	; 0x6d1c <_Z15linkbus_disablev+0x18>
    6d18:	0e 94 ad 45 	call	0x8b5a	; 0x8b5a <USART1_disable>
    6d1c:	0e 94 04 36 	call	0x6c08	; 0x6c08 <_Z14linkbus_end_txv>
    6d20:	84 e8       	ldi	r24, 0x84	; 132
    6d22:	ee e4       	ldi	r30, 0x4E	; 78
    6d24:	f6 e4       	ldi	r31, 0x46	; 70
    6d26:	df 01       	movw	r26, r30
    6d28:	1d 92       	st	X+, r1
    6d2a:	8a 95       	dec	r24
    6d2c:	e9 f7       	brne	.-6      	; 0x6d28 <_Z15linkbus_disablev+0x24>
    6d2e:	80 e0       	ldi	r24, 0x00	; 0
    6d30:	84 30       	cpi	r24, 0x04	; 4
    6d32:	48 f4       	brcc	.+18     	; 0x6d46 <_Z15linkbus_disablev+0x42>
    6d34:	b2 e3       	ldi	r27, 0x32	; 50
    6d36:	8b 9f       	mul	r24, r27
    6d38:	f0 01       	movw	r30, r0
    6d3a:	11 24       	eor	r1, r1
    6d3c:	ee 52       	subi	r30, 0x2E	; 46
    6d3e:	f9 4b       	sbci	r31, 0xB9	; 185
    6d40:	10 82       	st	Z, r1
    6d42:	8f 5f       	subi	r24, 0xFF	; 255
    6d44:	f5 cf       	rjmp	.-22     	; 0x6d30 <_Z15linkbus_disablev+0x2c>
    6d46:	08 95       	ret

00006d48 <_Z12lb_send_textPc>:
    6d48:	ef 92       	push	r14
    6d4a:	ff 92       	push	r15
    6d4c:	1f 93       	push	r17
    6d4e:	cf 93       	push	r28
    6d50:	df 93       	push	r29
    6d52:	10 91 23 40 	lds	r17, 0x4023	; 0x804023 <_ZL14g_bus_disabled>
    6d56:	11 11       	cpse	r17, r1
    6d58:	2d c0       	rjmp	.+90     	; 0x6db4 <_Z12lb_send_textPc+0x6c>
    6d5a:	00 97       	sbiw	r24, 0x00	; 0
    6d5c:	69 f1       	breq	.+90     	; 0x6db8 <_Z12lb_send_textPc+0x70>
    6d5e:	7c 01       	movw	r14, r24
    6d60:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <_Z19nextEmptyLBTxBufferv>
    6d64:	c8 ec       	ldi	r28, 0xC8	; 200
    6d66:	d0 e0       	ldi	r29, 0x00	; 0
    6d68:	00 97       	sbiw	r24, 0x00	; 0
    6d6a:	a1 f4       	brne	.+40     	; 0x6d94 <_Z12lb_send_textPc+0x4c>
    6d6c:	20 97       	sbiw	r28, 0x00	; 0
    6d6e:	91 f0       	breq	.+36     	; 0x6d94 <_Z12lb_send_textPc+0x4c>
    6d70:	0e 94 01 36 	call	0x6c02	; 0x6c02 <_Z19linkbusTxInProgressv>
    6d74:	88 23       	and	r24, r24
    6d76:	21 f0       	breq	.+8      	; 0x6d80 <_Z12lb_send_textPc+0x38>
    6d78:	20 97       	sbiw	r28, 0x00	; 0
    6d7a:	19 f4       	brne	.+6      	; 0x6d82 <_Z12lb_send_textPc+0x3a>
    6d7c:	81 2f       	mov	r24, r17
    6d7e:	01 c0       	rjmp	.+2      	; 0x6d82 <_Z12lb_send_textPc+0x3a>
    6d80:	81 2f       	mov	r24, r17
    6d82:	88 23       	and	r24, r24
    6d84:	21 f0       	breq	.+8      	; 0x6d8e <_Z12lb_send_textPc+0x46>
    6d86:	20 97       	sbiw	r28, 0x00	; 0
    6d88:	99 f3       	breq	.-26     	; 0x6d70 <_Z12lb_send_textPc+0x28>
    6d8a:	21 97       	sbiw	r28, 0x01	; 1
    6d8c:	f1 cf       	rjmp	.-30     	; 0x6d70 <_Z12lb_send_textPc+0x28>
    6d8e:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <_Z19nextEmptyLBTxBufferv>
    6d92:	ea cf       	rjmp	.-44     	; 0x6d68 <_Z12lb_send_textPc+0x20>
    6d94:	00 97       	sbiw	r24, 0x00	; 0
    6d96:	91 f0       	breq	.+36     	; 0x6dbc <_Z12lb_send_textPc+0x74>
    6d98:	ff 92       	push	r15
    6d9a:	ef 92       	push	r14
    6d9c:	9f 93       	push	r25
    6d9e:	8f 93       	push	r24
    6da0:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    6da4:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <_ZL16linkbus_start_txv>
    6da8:	0f 90       	pop	r0
    6daa:	0f 90       	pop	r0
    6dac:	0f 90       	pop	r0
    6dae:	0f 90       	pop	r0
    6db0:	80 e0       	ldi	r24, 0x00	; 0
    6db2:	05 c0       	rjmp	.+10     	; 0x6dbe <_Z12lb_send_textPc+0x76>
    6db4:	81 e0       	ldi	r24, 0x01	; 1
    6db6:	03 c0       	rjmp	.+6      	; 0x6dbe <_Z12lb_send_textPc+0x76>
    6db8:	81 e0       	ldi	r24, 0x01	; 1
    6dba:	01 c0       	rjmp	.+2      	; 0x6dbe <_Z12lb_send_textPc+0x76>
    6dbc:	81 e0       	ldi	r24, 0x01	; 1
    6dbe:	df 91       	pop	r29
    6dc0:	cf 91       	pop	r28
    6dc2:	1f 91       	pop	r17
    6dc4:	ff 90       	pop	r15
    6dc6:	ef 90       	pop	r14
    6dc8:	08 95       	ret

00006dca <_Z11lb_send_msg13LBMessageTypePKcPc>:
    6dca:	83 30       	cpi	r24, 0x03	; 3
    6dcc:	29 f0       	breq	.+10     	; 0x6dd8 <_Z11lb_send_msg13LBMessageTypePKcPc+0xe>
    6dce:	82 30       	cpi	r24, 0x02	; 2
    6dd0:	31 f0       	breq	.+12     	; 0x6dde <_Z11lb_send_msg13LBMessageTypePKcPc+0x14>
    6dd2:	9b e3       	ldi	r25, 0x3B	; 59
    6dd4:	84 e2       	ldi	r24, 0x24	; 36
    6dd6:	05 c0       	rjmp	.+10     	; 0x6de2 <_Z11lb_send_msg13LBMessageTypePKcPc+0x18>
    6dd8:	9b e3       	ldi	r25, 0x3B	; 59
    6dda:	81 e2       	ldi	r24, 0x21	; 33
    6ddc:	02 c0       	rjmp	.+4      	; 0x6de2 <_Z11lb_send_msg13LBMessageTypePKcPc+0x18>
    6dde:	9f e3       	ldi	r25, 0x3F	; 63
    6de0:	84 e2       	ldi	r24, 0x24	; 36
    6de2:	1f 92       	push	r1
    6de4:	9f 93       	push	r25
    6de6:	5f 93       	push	r21
    6de8:	4f 93       	push	r20
    6dea:	7f 93       	push	r23
    6dec:	6f 93       	push	r22
    6dee:	1f 92       	push	r1
    6df0:	8f 93       	push	r24
    6df2:	85 ea       	ldi	r24, 0xA5	; 165
    6df4:	94 e4       	ldi	r25, 0x44	; 68
    6df6:	9f 93       	push	r25
    6df8:	8f 93       	push	r24
    6dfa:	8b e9       	ldi	r24, 0x9B	; 155
    6dfc:	97 e4       	ldi	r25, 0x47	; 71
    6dfe:	9f 93       	push	r25
    6e00:	8f 93       	push	r24
    6e02:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    6e06:	8b e9       	ldi	r24, 0x9B	; 155
    6e08:	97 e4       	ldi	r25, 0x47	; 71
    6e0a:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <_Z12lb_send_textPc>
    6e0e:	8d b7       	in	r24, 0x3d	; 61
    6e10:	9e b7       	in	r25, 0x3e	; 62
    6e12:	0c 96       	adiw	r24, 0x0c	; 12
    6e14:	8d bf       	out	0x3d, r24	; 61
    6e16:	9e bf       	out	0x3e, r25	; 62
    6e18:	08 95       	ret

00006e1a <_Z16lb_broadcast_numjPKc>:
}


void lb_broadcast_num(uint16_t data, const char* str)
{
    6e1a:	0f 93       	push	r16
    6e1c:	1f 93       	push	r17
    6e1e:	cf 93       	push	r28
    6e20:	df 93       	push	r29
    6e22:	cd b7       	in	r28, 0x3d	; 61
    6e24:	de b7       	in	r29, 0x3e	; 62
    6e26:	26 97       	sbiw	r28, 0x06	; 6
    6e28:	cd bf       	out	0x3d, r28	; 61
    6e2a:	de bf       	out	0x3e, r29	; 62
    6e2c:	8b 01       	movw	r16, r22
	char t[6] = "\0";
    6e2e:	20 91 48 44 	lds	r18, 0x4448	; 0x804448 <g_80m_power_table+0x411>
    6e32:	30 91 49 44 	lds	r19, 0x4449	; 0x804449 <g_80m_power_table+0x412>
    6e36:	29 83       	std	Y+1, r18	; 0x01
    6e38:	3a 83       	std	Y+2, r19	; 0x02
    6e3a:	fe 01       	movw	r30, r28
    6e3c:	33 96       	adiw	r30, 0x03	; 3
    6e3e:	24 e0       	ldi	r18, 0x04	; 4
    6e40:	df 01       	movw	r26, r30
    6e42:	1d 92       	st	X+, r1
    6e44:	2a 95       	dec	r18
    6e46:	e9 f7       	brne	.-6      	; 0x6e42 <_Z16lb_broadcast_numjPKc+0x28>

	sprintf(t, "%u", data);
    6e48:	9f 93       	push	r25
    6e4a:	8f 93       	push	r24
    6e4c:	85 eb       	ldi	r24, 0xB5	; 181
    6e4e:	94 e4       	ldi	r25, 0x44	; 68
    6e50:	9f 93       	push	r25
    6e52:	8f 93       	push	r24
    6e54:	ce 01       	movw	r24, r28
    6e56:	01 96       	adiw	r24, 0x01	; 1
    6e58:	9f 93       	push	r25
    6e5a:	8f 93       	push	r24
    6e5c:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
	g_tempMsgBuff[0] = '\0';
    6e60:	10 92 9b 47 	sts	0x479B, r1	; 0x80479b <_ZL13g_tempMsgBuff>

	if(str)
    6e64:	0f 90       	pop	r0
    6e66:	0f 90       	pop	r0
    6e68:	0f 90       	pop	r0
    6e6a:	0f 90       	pop	r0
    6e6c:	0f 90       	pop	r0
    6e6e:	0f 90       	pop	r0
    6e70:	01 15       	cp	r16, r1
    6e72:	11 05       	cpc	r17, r1
    6e74:	91 f0       	breq	.+36     	; 0x6e9a <_Z16lb_broadcast_numjPKc+0x80>
	{
		sprintf(g_tempMsgBuff, "%s,%s;", str, t);
    6e76:	ce 01       	movw	r24, r28
    6e78:	01 96       	adiw	r24, 0x01	; 1
    6e7a:	9f 93       	push	r25
    6e7c:	8f 93       	push	r24
    6e7e:	1f 93       	push	r17
    6e80:	0f 93       	push	r16
    6e82:	88 eb       	ldi	r24, 0xB8	; 184
    6e84:	94 e4       	ldi	r25, 0x44	; 68
    6e86:	9f 93       	push	r25
    6e88:	8f 93       	push	r24
    6e8a:	8b e9       	ldi	r24, 0x9B	; 155
    6e8c:	97 e4       	ldi	r25, 0x47	; 71
    6e8e:	9f 93       	push	r25
    6e90:	8f 93       	push	r24
    6e92:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>
    6e96:	cd bf       	out	0x3d, r28	; 61
    6e98:	de bf       	out	0x3e, r29	; 62
	}

	if(g_tempMsgBuff[0]) lb_send_text(g_tempMsgBuff);
    6e9a:	80 91 9b 47 	lds	r24, 0x479B	; 0x80479b <_ZL13g_tempMsgBuff>
    6e9e:	88 23       	and	r24, r24
    6ea0:	21 f0       	breq	.+8      	; 0x6eaa <_Z16lb_broadcast_numjPKc+0x90>
    6ea2:	8b e9       	ldi	r24, 0x9B	; 155
    6ea4:	97 e4       	ldi	r25, 0x47	; 71
    6ea6:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <_Z12lb_send_textPc>
}
    6eaa:	26 96       	adiw	r28, 0x06	; 6
    6eac:	cd bf       	out	0x3d, r28	; 61
    6eae:	de bf       	out	0x3e, r29	; 62
    6eb0:	df 91       	pop	r29
    6eb2:	cf 91       	pop	r28
    6eb4:	1f 91       	pop	r17
    6eb6:	0f 91       	pop	r16
    6eb8:	08 95       	ret

00006eba <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    6eba:	90 e0       	ldi	r25, 0x00	; 0
    6ebc:	fc 01       	movw	r30, r24
    6ebe:	b0 97       	sbiw	r30, 0x20	; 32
    6ec0:	ed 35       	cpi	r30, 0x5D	; 93
    6ec2:	f1 05       	cpc	r31, r1
    6ec4:	08 f0       	brcs	.+2      	; 0x6ec8 <_Z12getMorseCharc+0xe>
    6ec6:	e8 c0       	rjmp	.+464    	; 0x7098 <_Z12getMorseCharc+0x1de>
    6ec8:	e7 54       	subi	r30, 0x47	; 71
    6eca:	ff 4f       	sbci	r31, 0xFF	; 255
    6ecc:	0c 94 bf 48 	jmp	0x917e	; 0x917e <__tablejump2__>
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    6ed0:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 2;
    6ed2:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    6ed4:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    6ed6:	08 95       	ret

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    6ed8:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 4;
    6eda:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    6edc:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6ede:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    6ee0:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
    6ee2:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    6ee4:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6ee6:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    6ee8:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
    6eea:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    6eec:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    6eee:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    6ef0:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
    6ef2:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 1;
    6ef4:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
    6ef6:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    6ef8:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
    6efa:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    6efc:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6efe:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    6f00:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
    6f02:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    6f04:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6f06:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    6f08:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
    6f0a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 7;
    6f0c:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    6f0e:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    6f10:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
    6f12:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 3;
    6f14:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    6f16:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    6f18:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
    6f1a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    6f1c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    6f1e:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    6f20:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
    6f22:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    6f24:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6f26:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    6f28:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
    6f2a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    6f2c:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6f2e:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    6f30:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
    6f32:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 7;
    6f34:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    6f36:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    6f38:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
    6f3a:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    6f3c:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    6f3e:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    6f40:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
    6f42:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 11;
    6f44:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6f46:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    6f48:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
    6f4a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    6f4c:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6f4e:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    6f50:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
    6f52:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    6f54:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    6f56:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    6f58:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
    6f5a:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    6f5c:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    6f5e:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    6f60:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
    6f62:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 5;
    6f64:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    6f66:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    6f68:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
    6f6a:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 3;
    6f6c:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    6f6e:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    6f70:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
    6f72:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    6f74:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    6f76:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    6f78:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
    6f7a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    6f7c:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6f7e:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    6f80:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
    6f82:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    6f84:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6f86:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    6f88:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
    6f8a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    6f8c:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6f8e:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    6f90:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
    6f92:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    6f94:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    6f96:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    6f98:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
    6f9a:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    6f9c:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6f9e:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    6fa0:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    6fa2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    6fa4:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    6fa6:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    6fa8:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
    6faa:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    6fac:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    6fae:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    6fb0:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
    6fb2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    6fb4:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    6fb6:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    6fb8:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
    6fba:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    6fbc:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    6fbe:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    6fc0:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
    6fc2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    6fc4:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6fc6:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    6fc8:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
    6fca:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 9;
    6fcc:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    6fce:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    6fd0:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
    6fd2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    6fd4:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    6fd6:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    6fd8:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
    6fda:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    6fdc:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    6fde:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    6fe0:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
    6fe2:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    6fe4:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    6fe6:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    6fe8:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
    6fea:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    6fec:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    6fee:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    6ff0:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
    6ff2:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    6ff4:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    6ff6:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    6ff8:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
    6ffa:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    6ffc:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    6ffe:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    7000:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
    7002:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    7004:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    7006:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    7008:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
    700a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    700c:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    700e:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    7010:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
    7012:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    7014:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    7016:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    7018:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
    701a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    701c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    701e:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    7020:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
    7022:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    7024:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    7026:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    7028:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
    702a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    702c:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    702e:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    7030:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
    7032:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    7034:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    7036:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    7038:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
    703a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    703c:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    703e:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    7040:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
    7042:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 12;
    7044:	8c e0       	ldi	r24, 0x0C	; 12
		}
		break;
    7046:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    7048:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
    704a:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    704c:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    704e:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    7050:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
    7052:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    7054:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    7056:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    7058:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
    705a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    705c:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    705e:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    7060:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
    7062:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    7064:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    7066:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    7068:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
    706a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    706c:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    706e:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    7070:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
    7072:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
    7074:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    7076:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    7078:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
    707a:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    707c:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    707e:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    7080:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
    7082:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    7084:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;
    7086:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    7088:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
    708a:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    708c:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    708e:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    7090:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    7092:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    7094:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    7096:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    7098:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
    709a:	70 e0       	ldi	r23, 0x00	; 0
			morse.lengthInElements = 0;
    709c:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}

	return( morse);
}
    709e:	08 95       	ret

000070a0 <_Z9makeMorsePcPbS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a bool indicating whether a CW carrier should be sent
 *  Pass in a pointer to a bool in the second and third arguments:
 */
bool makeMorse(char* s, bool* repeating, bool* finished)
{
    70a0:	cf 93       	push	r28
    70a2:	df 93       	push	r29
    70a4:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static bool completedString = false;
	static bool carrierOn = false;
	static bool holdKeyDown = false;

	if(s)   /* load a new NULL-terminated string to send */
    70a6:	00 97       	sbiw	r24, 0x00	; 0
    70a8:	b1 f1       	breq	.+108    	; 0x7116 <_Z9makeMorsePcPbS0_+0x76>
	{
		holdKeyDown = false;
    70aa:	10 92 d8 47 	sts	0x47D8, r1	; 0x8047d8 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>

		if(repeating)
    70ae:	61 15       	cp	r22, r1
    70b0:	71 05       	cpc	r23, r1
    70b2:	21 f0       	breq	.+8      	; 0x70bc <_Z9makeMorsePcPbS0_+0x1c>
		{
			repeat = *repeating;
    70b4:	db 01       	movw	r26, r22
    70b6:	2c 91       	ld	r18, X
    70b8:	20 93 25 40 	sts	0x4025, r18	; 0x804025 <_ZZ9makeMorsePcPbS0_E6repeat>
		}

		if(*s)
    70bc:	fc 01       	movw	r30, r24
    70be:	20 81       	ld	r18, Z
    70c0:	22 23       	and	r18, r18
    70c2:	d9 f0       	breq	.+54     	; 0x70fa <_Z9makeMorsePcPbS0_+0x5a>
		{
			str = s;
    70c4:	80 93 d6 47 	sts	0x47D6, r24	; 0x8047d6 <_ZZ9makeMorsePcPbS0_E3str>
    70c8:	90 93 d7 47 	sts	0x47D7, r25	; 0x8047d7 <_ZZ9makeMorsePcPbS0_E3str+0x1>
			c = ' ';
    70cc:	80 e2       	ldi	r24, 0x20	; 32
    70ce:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
			morseInProgress = getMorseChar(*str);
    70d2:	82 2f       	mov	r24, r18
    70d4:	0e 94 5d 37 	call	0x6eba	; 0x6eba <_Z12getMorseCharc>
    70d8:	60 93 d3 47 	sts	0x47D3, r22	; 0x8047d3 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    70dc:	70 93 d4 47 	sts	0x47D4, r23	; 0x8047d4 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    70e0:	80 93 d5 47 	sts	0x47D5, r24	; 0x8047d5 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x2>
			charIndex = 0;
    70e4:	10 92 d2 47 	sts	0x47D2, r1	; 0x8047d2 <_ZZ9makeMorsePcPbS0_E9charIndex>
			symbolIndex = 0;
    70e8:	10 92 d1 47 	sts	0x47D1, r1	; 0x8047d1 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
			elementIndex = 0;
    70ec:	10 92 d0 47 	sts	0x47D0, r1	; 0x8047d0 <_ZZ9makeMorsePcPbS0_E12elementIndex>
			addedSpace = 0;
    70f0:	10 92 cf 47 	sts	0x47CF, r1	; 0x8047cf <_ZZ9makeMorsePcPbS0_E10addedSpace>
			completedString = false;
    70f4:	10 92 ce 47 	sts	0x47CE, r1	; 0x8047ce <_ZZ9makeMorsePcPbS0_E15completedString>
    70f8:	0a c0       	rjmp	.+20     	; 0x710e <_Z9makeMorsePcPbS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    70fa:	10 92 d6 47 	sts	0x47D6, r1	; 0x8047d6 <_ZZ9makeMorsePcPbS0_E3str>
    70fe:	10 92 d7 47 	sts	0x47D7, r1	; 0x8047d7 <_ZZ9makeMorsePcPbS0_E3str+0x1>
			completedString = true;
    7102:	81 e0       	ldi	r24, 0x01	; 1
    7104:	80 93 ce 47 	sts	0x47CE, r24	; 0x8047ce <_ZZ9makeMorsePcPbS0_E15completedString>
			if(finished)
    7108:	20 97       	sbiw	r28, 0x00	; 0
    710a:	09 f0       	breq	.+2      	; 0x710e <_Z9makeMorsePcPbS0_+0x6e>
			{
				*finished = true;
    710c:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    710e:	10 92 cd 47 	sts	0x47CD, r1	; 0x8047cd <_ZZ9makeMorsePcPbS0_E9carrierOn>
		return( OFF);
    7112:	80 e0       	ldi	r24, 0x00	; 0
    7114:	b8 c0       	rjmp	.+368    	; 0x7286 <_Z9makeMorsePcPbS0_+0x1e6>
	}
	else if(str)
    7116:	e0 91 d6 47 	lds	r30, 0x47D6	; 0x8047d6 <_ZZ9makeMorsePcPbS0_E3str>
    711a:	f0 91 d7 47 	lds	r31, 0x47D7	; 0x8047d7 <_ZZ9makeMorsePcPbS0_E3str+0x1>
    711e:	30 97       	sbiw	r30, 0x00	; 0
    7120:	09 f4       	brne	.+2      	; 0x7124 <_Z9makeMorsePcPbS0_+0x84>
    7122:	a4 c0       	rjmp	.+328    	; 0x726c <_Z9makeMorsePcPbS0_+0x1cc>
	{
		if(repeating)
    7124:	61 15       	cp	r22, r1
    7126:	71 05       	cpc	r23, r1
    7128:	21 f0       	breq	.+8      	; 0x7132 <_Z9makeMorsePcPbS0_+0x92>
		{
			*repeating = repeat;
    712a:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPbS0_E6repeat>
    712e:	db 01       	movw	r26, r22
    7130:	8c 93       	st	X, r24
		}

		if(completedString)
    7132:	80 91 ce 47 	lds	r24, 0x47CE	; 0x8047ce <_ZZ9makeMorsePcPbS0_E15completedString>
    7136:	88 23       	and	r24, r24
    7138:	49 f0       	breq	.+18     	; 0x714c <_Z9makeMorsePcPbS0_+0xac>
		{
			if(finished)
    713a:	20 97       	sbiw	r28, 0x00	; 0
    713c:	09 f4       	brne	.+2      	; 0x7140 <_Z9makeMorsePcPbS0_+0xa0>
    713e:	a2 c0       	rjmp	.+324    	; 0x7284 <_Z9makeMorsePcPbS0_+0x1e4>
			{
				*finished = true;
    7140:	81 e0       	ldi	r24, 0x01	; 1
    7142:	88 83       	st	Y, r24
				holdKeyDown = false;
    7144:	10 92 d8 47 	sts	0x47D8, r1	; 0x8047d8 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
			}
			return( OFF);
    7148:	80 e0       	ldi	r24, 0x00	; 0
    714a:	9d c0       	rjmp	.+314    	; 0x7286 <_Z9makeMorsePcPbS0_+0x1e6>
		}

		if(elementIndex)
    714c:	80 91 d0 47 	lds	r24, 0x47D0	; 0x8047d0 <_ZZ9makeMorsePcPbS0_E12elementIndex>
    7150:	88 23       	and	r24, r24
    7152:	21 f0       	breq	.+8      	; 0x715c <_Z9makeMorsePcPbS0_+0xbc>
		{
			elementIndex--;
    7154:	81 50       	subi	r24, 0x01	; 1
    7156:	80 93 d0 47 	sts	0x47D0, r24	; 0x8047d0 <_ZZ9makeMorsePcPbS0_E12elementIndex>
    715a:	7e c0       	rjmp	.+252    	; 0x7258 <_Z9makeMorsePcPbS0_+0x1b8>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    715c:	80 91 cd 47 	lds	r24, 0x47CD	; 0x8047cd <_ZZ9makeMorsePcPbS0_E9carrierOn>
    7160:	88 23       	and	r24, r24
    7162:	81 f0       	breq	.+32     	; 0x7184 <_Z9makeMorsePcPbS0_+0xe4>
    7164:	80 91 d8 47 	lds	r24, 0x47D8	; 0x8047d8 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    7168:	81 11       	cpse	r24, r1
    716a:	0c c0       	rjmp	.+24     	; 0x7184 <_Z9makeMorsePcPbS0_+0xe4>
		{
			carrierOn = false;
    716c:	10 92 cd 47 	sts	0x47CD, r1	; 0x8047cd <_ZZ9makeMorsePcPbS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    7170:	80 91 cf 47 	lds	r24, 0x47CF	; 0x8047cf <_ZZ9makeMorsePcPbS0_E10addedSpace>
    7174:	88 23       	and	r24, r24
    7176:	09 f4       	brne	.+2      	; 0x717a <_Z9makeMorsePcPbS0_+0xda>
    7178:	6f c0       	rjmp	.+222    	; 0x7258 <_Z9makeMorsePcPbS0_+0x1b8>
			{
				elementIndex = addedSpace;
    717a:	80 93 d0 47 	sts	0x47D0, r24	; 0x8047d0 <_ZZ9makeMorsePcPbS0_E12elementIndex>
				addedSpace = 0;
    717e:	10 92 cf 47 	sts	0x47CF, r1	; 0x8047cf <_ZZ9makeMorsePcPbS0_E10addedSpace>
    7182:	6a c0       	rjmp	.+212    	; 0x7258 <_Z9makeMorsePcPbS0_+0x1b8>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    7184:	90 91 d4 47 	lds	r25, 0x47D4	; 0x8047d4 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    7188:	80 91 d1 47 	lds	r24, 0x47D1	; 0x8047d1 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    718c:	89 17       	cp	r24, r25
    718e:	90 f1       	brcs	.+100    	; 0x71f4 <_Z9makeMorsePcPbS0_+0x154>
			{
				c = (*(str + ++charIndex));
    7190:	80 91 d2 47 	lds	r24, 0x47D2	; 0x8047d2 <_ZZ9makeMorsePcPbS0_E9charIndex>
    7194:	8f 5f       	subi	r24, 0xFF	; 255
    7196:	80 93 d2 47 	sts	0x47D2, r24	; 0x8047d2 <_ZZ9makeMorsePcPbS0_E9charIndex>
    719a:	df 01       	movw	r26, r30
    719c:	a8 0f       	add	r26, r24
    719e:	b1 1d       	adc	r27, r1
    71a0:	8c 91       	ld	r24, X
    71a2:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>

				if(!c)  /* wrap to beginning of text */
    71a6:	81 11       	cpse	r24, r1
    71a8:	19 c0       	rjmp	.+50     	; 0x71dc <_Z9makeMorsePcPbS0_+0x13c>
				{
					if(repeat)
    71aa:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPbS0_E6repeat>
    71ae:	88 23       	and	r24, r24
    71b0:	31 f0       	breq	.+12     	; 0x71be <_Z9makeMorsePcPbS0_+0x11e>
					{
						c = *str;
    71b2:	80 81       	ld	r24, Z
    71b4:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
						charIndex = 0;
    71b8:	10 92 d2 47 	sts	0x47D2, r1	; 0x8047d2 <_ZZ9makeMorsePcPbS0_E9charIndex>
    71bc:	0f c0       	rjmp	.+30     	; 0x71dc <_Z9makeMorsePcPbS0_+0x13c>
					}
					else
					{
						str = NULL;
    71be:	10 92 d6 47 	sts	0x47D6, r1	; 0x8047d6 <_ZZ9makeMorsePcPbS0_E3str>
    71c2:	10 92 d7 47 	sts	0x47D7, r1	; 0x8047d7 <_ZZ9makeMorsePcPbS0_E3str+0x1>
						carrierOn = OFF;
    71c6:	10 92 cd 47 	sts	0x47CD, r1	; 0x8047cd <_ZZ9makeMorsePcPbS0_E9carrierOn>
						completedString = true;
    71ca:	91 e0       	ldi	r25, 0x01	; 1
    71cc:	90 93 ce 47 	sts	0x47CE, r25	; 0x8047ce <_ZZ9makeMorsePcPbS0_E15completedString>
						if(finished)
    71d0:	20 97       	sbiw	r28, 0x00	; 0
    71d2:	09 f0       	breq	.+2      	; 0x71d6 <_Z9makeMorsePcPbS0_+0x136>
						{
							*finished = true;
    71d4:	98 83       	st	Y, r25
						}
						holdKeyDown = false;
    71d6:	10 92 d8 47 	sts	0x47D8, r1	; 0x8047d8 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
						return( OFF );
    71da:	55 c0       	rjmp	.+170    	; 0x7286 <_Z9makeMorsePcPbS0_+0x1e6>
					}
				}

				morseInProgress = getMorseChar(c);
    71dc:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
    71e0:	0e 94 5d 37 	call	0x6eba	; 0x6eba <_Z12getMorseCharc>
    71e4:	60 93 d3 47 	sts	0x47D3, r22	; 0x8047d3 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    71e8:	70 93 d4 47 	sts	0x47D4, r23	; 0x8047d4 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    71ec:	80 93 d5 47 	sts	0x47D5, r24	; 0x8047d5 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    71f0:	10 92 d1 47 	sts	0x47D1, r1	; 0x8047d1 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    71f4:	80 91 d3 47 	lds	r24, 0x47D3	; 0x8047d3 <_ZZ9makeMorsePcPbS0_E15morseInProgress>
    71f8:	8d 3f       	cpi	r24, 0xFD	; 253
    71fa:	f8 f4       	brcc	.+62     	; 0x723a <_Z9makeMorsePcPbS0_+0x19a>
			{
				bool isDah = morseInProgress.pattern & (1 << symbolIndex++);
    71fc:	30 91 d1 47 	lds	r19, 0x47D1	; 0x8047d1 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    7200:	21 e0       	ldi	r18, 0x01	; 1
    7202:	23 0f       	add	r18, r19
    7204:	20 93 d1 47 	sts	0x47D1, r18	; 0x8047d1 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
    7208:	90 e0       	ldi	r25, 0x00	; 0
    720a:	02 c0       	rjmp	.+4      	; 0x7210 <_Z9makeMorsePcPbS0_+0x170>
    720c:	95 95       	asr	r25
    720e:	87 95       	ror	r24
    7210:	3a 95       	dec	r19
    7212:	e2 f7       	brpl	.-8      	; 0x720c <_Z9makeMorsePcPbS0_+0x16c>

				if(isDah)
    7214:	80 ff       	sbrs	r24, 0
    7216:	04 c0       	rjmp	.+8      	; 0x7220 <_Z9makeMorsePcPbS0_+0x180>
				{
					elementIndex = 2;
    7218:	82 e0       	ldi	r24, 0x02	; 2
    721a:	80 93 d0 47 	sts	0x47D0, r24	; 0x8047d0 <_ZZ9makeMorsePcPbS0_E12elementIndex>
    721e:	02 c0       	rjmp	.+4      	; 0x7224 <_Z9makeMorsePcPbS0_+0x184>
				}
				else
				{
					elementIndex = 0;
    7220:	10 92 d0 47 	sts	0x47D0, r1	; 0x8047d0 <_ZZ9makeMorsePcPbS0_E12elementIndex>
				}

				carrierOn = true;
    7224:	81 e0       	ldi	r24, 0x01	; 1
    7226:	80 93 cd 47 	sts	0x47CD, r24	; 0x8047cd <_ZZ9makeMorsePcPbS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    722a:	80 91 d4 47 	lds	r24, 0x47D4	; 0x8047d4 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
    722e:	28 17       	cp	r18, r24
    7230:	98 f0       	brcs	.+38     	; 0x7258 <_Z9makeMorsePcPbS0_+0x1b8>
				{
					addedSpace = 2;
    7232:	82 e0       	ldi	r24, 0x02	; 2
    7234:	80 93 cf 47 	sts	0x47CF, r24	; 0x8047cf <_ZZ9makeMorsePcPbS0_E10addedSpace>
    7238:	0f c0       	rjmp	.+30     	; 0x7258 <_Z9makeMorsePcPbS0_+0x1b8>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    723a:	80 91 d4 47 	lds	r24, 0x47D4	; 0x8047d4 <_ZZ9makeMorsePcPbS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    723e:	9f ef       	ldi	r25, 0xFF	; 255
    7240:	90 93 d1 47 	sts	0x47D1, r25	; 0x8047d1 <_ZZ9makeMorsePcPbS0_E11symbolIndex>
				carrierOn = false;
    7244:	10 92 cd 47 	sts	0x47CD, r1	; 0x8047cd <_ZZ9makeMorsePcPbS0_E9carrierOn>
				if(sym >= 4 )
    7248:	84 30       	cpi	r24, 0x04	; 4
    724a:	20 f0       	brcs	.+8      	; 0x7254 <_Z9makeMorsePcPbS0_+0x1b4>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    724c:	84 50       	subi	r24, 0x04	; 4
    724e:	80 93 d0 47 	sts	0x47D0, r24	; 0x8047d0 <_ZZ9makeMorsePcPbS0_E12elementIndex>
    7252:	02 c0       	rjmp	.+4      	; 0x7258 <_Z9makeMorsePcPbS0_+0x1b8>
				}
				else
				{
					elementIndex = 0;
    7254:	10 92 d0 47 	sts	0x47D0, r1	; 0x8047d0 <_ZZ9makeMorsePcPbS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    7258:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPbS0_E1c>
    725c:	8c 33       	cpi	r24, 0x3C	; 60
    725e:	21 f4       	brne	.+8      	; 0x7268 <_Z9makeMorsePcPbS0_+0x1c8>
		{
			holdKeyDown = true;
    7260:	81 e0       	ldi	r24, 0x01	; 1
    7262:	80 93 d8 47 	sts	0x47D8, r24	; 0x8047d8 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    7266:	02 c0       	rjmp	.+4      	; 0x726c <_Z9makeMorsePcPbS0_+0x1cc>
		}
		else
		{
			holdKeyDown = false;
    7268:	10 92 d8 47 	sts	0x47D8, r1	; 0x8047d8 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
		}
	}

	if(finished)
    726c:	20 97       	sbiw	r28, 0x00	; 0
    726e:	19 f0       	breq	.+6      	; 0x7276 <_Z9makeMorsePcPbS0_+0x1d6>
	{
		*finished = completedString;
    7270:	80 91 ce 47 	lds	r24, 0x47CE	; 0x8047ce <_ZZ9makeMorsePcPbS0_E15completedString>
    7274:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    7276:	80 91 d8 47 	lds	r24, 0x47D8	; 0x8047d8 <_ZZ9makeMorsePcPbS0_E11holdKeyDown>
    727a:	81 11       	cpse	r24, r1
    727c:	04 c0       	rjmp	.+8      	; 0x7286 <_Z9makeMorsePcPbS0_+0x1e6>
	{
		return(true);
	}
	else
	{
		return( carrierOn);
    727e:	80 91 cd 47 	lds	r24, 0x47CD	; 0x8047cd <_ZZ9makeMorsePcPbS0_E9carrierOn>
    7282:	01 c0       	rjmp	.+2      	; 0x7286 <_Z9makeMorsePcPbS0_+0x1e6>
			if(finished)
			{
				*finished = true;
				holdKeyDown = false;
			}
			return( OFF);
    7284:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return( carrierOn);
	}
}
    7286:	df 91       	pop	r29
    7288:	cf 91       	pop	r28
    728a:	08 95       	ret

0000728c <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    728c:	cf 92       	push	r12
    728e:	df 92       	push	r13
    7290:	ef 92       	push	r14
    7292:	ff 92       	push	r15
    7294:	1f 93       	push	r17
    7296:	cf 93       	push	r28
    7298:	df 93       	push	r29
    729a:	6c 01       	movw	r12, r24
    729c:	7b 01       	movw	r14, r22
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    729e:	c0 e0       	ldi	r28, 0x00	; 0
    72a0:	d0 e0       	ldi	r29, 0x00	; 0
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    72a2:	10 e0       	ldi	r17, 0x00	; 0
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    72a4:	c4 31       	cpi	r28, 0x14	; 20
    72a6:	d1 05       	cpc	r29, r1
    72a8:	74 f4       	brge	.+28     	; 0x72c6 <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
	{
		c = str[i];
    72aa:	f6 01       	movw	r30, r12
    72ac:	ec 0f       	add	r30, r28
    72ae:	fd 1f       	adc	r31, r29
    72b0:	80 81       	ld	r24, Z
		if(!c)
    72b2:	88 23       	and	r24, r24
    72b4:	41 f0       	breq	.+16     	; 0x72c6 <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
		{
			break;
		}
		m = getMorseChar(c);
    72b6:	0e 94 5d 37 	call	0x6eba	; 0x6eba <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    72ba:	6d 3f       	cpi	r22, 0xFD	; 253
    72bc:	08 f4       	brcc	.+2      	; 0x72c0 <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
		{
			elements += 3;
    72be:	1d 5f       	subi	r17, 0xFD	; 253
		}
		elements += m.lengthInElements;
    72c0:	18 0f       	add	r17, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    72c2:	21 96       	adiw	r28, 0x01	; 1
    72c4:	ef cf       	rjmp	.-34     	; 0x72a4 <_Z26timeRequiredToSendStrAtWPMPcj+0x18>
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    72c6:	80 eb       	ldi	r24, 0xB0	; 176
    72c8:	94 e0       	ldi	r25, 0x04	; 4
    72ca:	b7 01       	movw	r22, r14
    72cc:	0e 94 56 48 	call	0x90ac	; 0x90ac <__udivmodhi4>
}
    72d0:	16 9f       	mul	r17, r22
    72d2:	c0 01       	movw	r24, r0
    72d4:	17 9f       	mul	r17, r23
    72d6:	90 0d       	add	r25, r0
    72d8:	11 24       	eor	r1, r1
    72da:	df 91       	pop	r29
    72dc:	cf 91       	pop	r28
    72de:	1f 91       	pop	r17
    72e0:	ff 90       	pop	r15
    72e2:	ef 90       	pop	r14
    72e4:	df 90       	pop	r13
    72e6:	cf 90       	pop	r12
    72e8:	08 95       	ret

000072ea <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    72ea:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    72ec:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    72ee:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    72f0:	40 83       	st	Z, r20
	ret                             // Return to caller
    72f2:	08 95       	ret

000072f4 <_ZL21USART4_initializationm>:
	}
	
	serialbus_end_tx();
	memset(rx_buffer, 0, sizeof(rx_buffer));

	for(bufferIndex=0; bufferIndex<SERIALBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
    72f4:	20 b3       	in	r18, 0x10	; 16
    72f6:	2d 7f       	andi	r18, 0xFD	; 253
    72f8:	20 bb       	out	0x10, r18	; 16
    72fa:	e1 e9       	ldi	r30, 0x91	; 145
    72fc:	f4 e0       	ldi	r31, 0x04	; 4
    72fe:	20 81       	ld	r18, Z
    7300:	27 7f       	andi	r18, 0xF7	; 247
    7302:	20 83       	st	Z, r18
    7304:	20 b3       	in	r18, 0x10	; 16
    7306:	21 60       	ori	r18, 0x01	; 1
    7308:	20 bb       	out	0x10, r18	; 16
    730a:	21 b3       	in	r18, 0x11	; 17
    730c:	21 60       	ori	r18, 0x01	; 1
    730e:	21 bb       	out	0x11, r18	; 17
    7310:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <USART4_init>
    7314:	08 95       	ret

00007316 <_ZL21USART1_initializationm>:
    7316:	28 b1       	in	r18, 0x08	; 8
    7318:	2d 7f       	andi	r18, 0xFD	; 253
    731a:	28 b9       	out	0x08, r18	; 8
    731c:	e1 e5       	ldi	r30, 0x51	; 81
    731e:	f4 e0       	ldi	r31, 0x04	; 4
    7320:	20 81       	ld	r18, Z
    7322:	27 7f       	andi	r18, 0xF7	; 247
    7324:	20 83       	st	Z, r18
    7326:	28 b1       	in	r18, 0x08	; 8
    7328:	21 60       	ori	r18, 0x01	; 1
    732a:	28 b9       	out	0x08, r18	; 8
    732c:	29 b1       	in	r18, 0x09	; 9
    732e:	21 60       	ori	r18, 0x01	; 1
    7330:	29 b9       	out	0x09, r18	; 9
    7332:	0e 94 82 45 	call	0x8b04	; 0x8b04 <USART1_init>
    7336:	08 95       	ret

00007338 <nextFullSBTxBuffer>:
    7338:	90 e0       	ldi	r25, 0x00	; 0
    733a:	80 91 dc 47 	lds	r24, 0x47DC	; 0x8047dc <_ZZ18nextFullSBTxBufferE11bufferIndex>
    733e:	28 2f       	mov	r18, r24
    7340:	30 e0       	ldi	r19, 0x00	; 0
    7342:	49 e2       	ldi	r20, 0x29	; 41
    7344:	42 9f       	mul	r20, r18
    7346:	f0 01       	movw	r30, r0
    7348:	43 9f       	mul	r20, r19
    734a:	f0 0d       	add	r31, r0
    734c:	11 24       	eor	r1, r1
    734e:	e5 5a       	subi	r30, 0xA5	; 165
    7350:	f7 4b       	sbci	r31, 0xB7	; 183
    7352:	40 81       	ld	r20, Z
    7354:	41 11       	cpse	r20, r1
    7356:	0b c0       	rjmp	.+22     	; 0x736e <nextFullSBTxBuffer+0x36>
    7358:	9f 5f       	subi	r25, 0xFF	; 255
    735a:	93 30       	cpi	r25, 0x03	; 3
    735c:	50 f4       	brcc	.+20     	; 0x7372 <nextFullSBTxBuffer+0x3a>
    735e:	8f 5f       	subi	r24, 0xFF	; 255
    7360:	80 93 dc 47 	sts	0x47DC, r24	; 0x8047dc <_ZZ18nextFullSBTxBufferE11bufferIndex>
    7364:	83 30       	cpi	r24, 0x03	; 3
    7366:	48 f3       	brcs	.-46     	; 0x733a <nextFullSBTxBuffer+0x2>
    7368:	10 92 dc 47 	sts	0x47DC, r1	; 0x8047dc <_ZZ18nextFullSBTxBufferE11bufferIndex>
    736c:	e6 cf       	rjmp	.-52     	; 0x733a <nextFullSBTxBuffer+0x2>
    736e:	81 e0       	ldi	r24, 0x01	; 1
    7370:	01 c0       	rjmp	.+2      	; 0x7374 <nextFullSBTxBuffer+0x3c>
    7372:	80 e0       	ldi	r24, 0x00	; 0
    7374:	88 23       	and	r24, r24
    7376:	49 f0       	breq	.+18     	; 0x738a <nextFullSBTxBuffer+0x52>
    7378:	49 e2       	ldi	r20, 0x29	; 41
    737a:	42 9f       	mul	r20, r18
    737c:	c0 01       	movw	r24, r0
    737e:	43 9f       	mul	r20, r19
    7380:	90 0d       	add	r25, r0
    7382:	11 24       	eor	r1, r1
    7384:	85 5a       	subi	r24, 0xA5	; 165
    7386:	97 4b       	sbci	r25, 0xB7	; 183
    7388:	08 95       	ret
    738a:	80 e0       	ldi	r24, 0x00	; 0
    738c:	90 e0       	ldi	r25, 0x00	; 0
    738e:	08 95       	ret

00007390 <nextEmptySBTxBuffer>:
    7390:	90 e0       	ldi	r25, 0x00	; 0
    7392:	80 91 db 47 	lds	r24, 0x47DB	; 0x8047db <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    7396:	28 2f       	mov	r18, r24
    7398:	30 e0       	ldi	r19, 0x00	; 0
    739a:	49 e2       	ldi	r20, 0x29	; 41
    739c:	42 9f       	mul	r20, r18
    739e:	f0 01       	movw	r30, r0
    73a0:	43 9f       	mul	r20, r19
    73a2:	f0 0d       	add	r31, r0
    73a4:	11 24       	eor	r1, r1
    73a6:	e5 5a       	subi	r30, 0xA5	; 165
    73a8:	f7 4b       	sbci	r31, 0xB7	; 183
    73aa:	40 81       	ld	r20, Z
    73ac:	44 23       	and	r20, r20
    73ae:	59 f0       	breq	.+22     	; 0x73c6 <nextEmptySBTxBuffer+0x36>
    73b0:	9f 5f       	subi	r25, 0xFF	; 255
    73b2:	93 30       	cpi	r25, 0x03	; 3
    73b4:	50 f4       	brcc	.+20     	; 0x73ca <nextEmptySBTxBuffer+0x3a>
    73b6:	8f 5f       	subi	r24, 0xFF	; 255
    73b8:	80 93 db 47 	sts	0x47DB, r24	; 0x8047db <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    73bc:	83 30       	cpi	r24, 0x03	; 3
    73be:	48 f3       	brcs	.-46     	; 0x7392 <nextEmptySBTxBuffer+0x2>
    73c0:	10 92 db 47 	sts	0x47DB, r1	; 0x8047db <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    73c4:	e6 cf       	rjmp	.-52     	; 0x7392 <nextEmptySBTxBuffer+0x2>
    73c6:	81 e0       	ldi	r24, 0x01	; 1
    73c8:	01 c0       	rjmp	.+2      	; 0x73cc <nextEmptySBTxBuffer+0x3c>
    73ca:	80 e0       	ldi	r24, 0x00	; 0
    73cc:	88 23       	and	r24, r24
    73ce:	49 f0       	breq	.+18     	; 0x73e2 <nextEmptySBTxBuffer+0x52>
    73d0:	49 e2       	ldi	r20, 0x29	; 41
    73d2:	42 9f       	mul	r20, r18
    73d4:	c0 01       	movw	r24, r0
    73d6:	43 9f       	mul	r20, r19
    73d8:	90 0d       	add	r25, r0
    73da:	11 24       	eor	r1, r1
    73dc:	85 5a       	subi	r24, 0xA5	; 165
    73de:	97 4b       	sbci	r25, 0xB7	; 183
    73e0:	08 95       	ret
    73e2:	80 e0       	ldi	r24, 0x00	; 0
    73e4:	90 e0       	ldi	r25, 0x00	; 0
    73e6:	08 95       	ret

000073e8 <nextEmptySBRxBuffer>:
    73e8:	90 e0       	ldi	r25, 0x00	; 0
    73ea:	80 91 da 47 	lds	r24, 0x47DA	; 0x8047da <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    73ee:	28 2f       	mov	r18, r24
    73f0:	30 e0       	ldi	r19, 0x00	; 0
    73f2:	4f e3       	ldi	r20, 0x3F	; 63
    73f4:	42 9f       	mul	r20, r18
    73f6:	f0 01       	movw	r30, r0
    73f8:	43 9f       	mul	r20, r19
    73fa:	f0 0d       	add	r31, r0
    73fc:	11 24       	eor	r1, r1
    73fe:	e3 52       	subi	r30, 0x23	; 35
    7400:	f8 4b       	sbci	r31, 0xB8	; 184
    7402:	41 81       	ldd	r20, Z+1	; 0x01
    7404:	52 81       	ldd	r21, Z+2	; 0x02
    7406:	45 2b       	or	r20, r21
    7408:	59 f0       	breq	.+22     	; 0x7420 <nextEmptySBRxBuffer+0x38>
    740a:	9f 5f       	subi	r25, 0xFF	; 255
    740c:	92 30       	cpi	r25, 0x02	; 2
    740e:	50 f4       	brcc	.+20     	; 0x7424 <nextEmptySBRxBuffer+0x3c>
    7410:	8f 5f       	subi	r24, 0xFF	; 255
    7412:	80 93 da 47 	sts	0x47DA, r24	; 0x8047da <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    7416:	82 30       	cpi	r24, 0x02	; 2
    7418:	40 f3       	brcs	.-48     	; 0x73ea <nextEmptySBRxBuffer+0x2>
    741a:	10 92 da 47 	sts	0x47DA, r1	; 0x8047da <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    741e:	e5 cf       	rjmp	.-54     	; 0x73ea <nextEmptySBRxBuffer+0x2>
    7420:	81 e0       	ldi	r24, 0x01	; 1
    7422:	01 c0       	rjmp	.+2      	; 0x7426 <nextEmptySBRxBuffer+0x3e>
    7424:	80 e0       	ldi	r24, 0x00	; 0
    7426:	88 23       	and	r24, r24
    7428:	49 f0       	breq	.+18     	; 0x743c <nextEmptySBRxBuffer+0x54>
    742a:	4f e3       	ldi	r20, 0x3F	; 63
    742c:	42 9f       	mul	r20, r18
    742e:	c0 01       	movw	r24, r0
    7430:	43 9f       	mul	r20, r19
    7432:	90 0d       	add	r25, r0
    7434:	11 24       	eor	r1, r1
    7436:	83 52       	subi	r24, 0x23	; 35
    7438:	98 4b       	sbci	r25, 0xB8	; 184
    743a:	08 95       	ret
    743c:	80 e0       	ldi	r24, 0x00	; 0
    743e:	90 e0       	ldi	r25, 0x00	; 0
    7440:	08 95       	ret

00007442 <nextFullSBRxBuffer>:
    7442:	90 e0       	ldi	r25, 0x00	; 0
    7444:	80 91 d9 47 	lds	r24, 0x47D9	; 0x8047d9 <_ZZ18nextFullSBRxBufferE11bufferIndex>
    7448:	28 2f       	mov	r18, r24
    744a:	30 e0       	ldi	r19, 0x00	; 0
    744c:	4f e3       	ldi	r20, 0x3F	; 63
    744e:	42 9f       	mul	r20, r18
    7450:	f0 01       	movw	r30, r0
    7452:	43 9f       	mul	r20, r19
    7454:	f0 0d       	add	r31, r0
    7456:	11 24       	eor	r1, r1
    7458:	e3 52       	subi	r30, 0x23	; 35
    745a:	f8 4b       	sbci	r31, 0xB8	; 184
    745c:	41 81       	ldd	r20, Z+1	; 0x01
    745e:	52 81       	ldd	r21, Z+2	; 0x02
    7460:	45 2b       	or	r20, r21
    7462:	59 f4       	brne	.+22     	; 0x747a <nextFullSBRxBuffer+0x38>
    7464:	9f 5f       	subi	r25, 0xFF	; 255
    7466:	92 30       	cpi	r25, 0x02	; 2
    7468:	50 f4       	brcc	.+20     	; 0x747e <nextFullSBRxBuffer+0x3c>
    746a:	8f 5f       	subi	r24, 0xFF	; 255
    746c:	80 93 d9 47 	sts	0x47D9, r24	; 0x8047d9 <_ZZ18nextFullSBRxBufferE11bufferIndex>
    7470:	82 30       	cpi	r24, 0x02	; 2
    7472:	40 f3       	brcs	.-48     	; 0x7444 <nextFullSBRxBuffer+0x2>
    7474:	10 92 d9 47 	sts	0x47D9, r1	; 0x8047d9 <_ZZ18nextFullSBRxBufferE11bufferIndex>
    7478:	e5 cf       	rjmp	.-54     	; 0x7444 <nextFullSBRxBuffer+0x2>
    747a:	81 e0       	ldi	r24, 0x01	; 1
    747c:	01 c0       	rjmp	.+2      	; 0x7480 <nextFullSBRxBuffer+0x3e>
    747e:	80 e0       	ldi	r24, 0x00	; 0
    7480:	88 23       	and	r24, r24
    7482:	49 f0       	breq	.+18     	; 0x7496 <nextFullSBRxBuffer+0x54>
    7484:	4f e3       	ldi	r20, 0x3F	; 63
    7486:	42 9f       	mul	r20, r18
    7488:	c0 01       	movw	r24, r0
    748a:	43 9f       	mul	r20, r19
    748c:	90 0d       	add	r25, r0
    748e:	11 24       	eor	r1, r1
    7490:	83 52       	subi	r24, 0x23	; 35
    7492:	98 4b       	sbci	r25, 0xB8	; 184
    7494:	08 95       	ret
    7496:	80 e0       	ldi	r24, 0x00	; 0
    7498:	90 e0       	ldi	r25, 0x00	; 0
    749a:	08 95       	ret

0000749c <serialbusTxInProgress>:
    749c:	80 91 d6 48 	lds	r24, 0x48D6	; 0x8048d6 <_ZL19serialbus_tx_active>
    74a0:	08 95       	ret

000074a2 <_Z18serialbus_start_txv>:
    74a2:	cf 93       	push	r28
    74a4:	c0 91 d6 48 	lds	r28, 0x48D6	; 0x8048d6 <_ZL19serialbus_tx_active>
    74a8:	81 e0       	ldi	r24, 0x01	; 1
    74aa:	c8 27       	eor	r28, r24
    74ac:	59 f0       	breq	.+22     	; 0x74c4 <_Z18serialbus_start_txv+0x22>
    74ae:	80 93 d6 48 	sts	0x48D6, r24	; 0x8048d6 <_ZL19serialbus_tx_active>
    74b2:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    74b6:	81 11       	cpse	r24, r1
    74b8:	03 c0       	rjmp	.+6      	; 0x74c0 <_Z18serialbus_start_txv+0x1e>
    74ba:	0e 94 d8 45 	call	0x8bb0	; 0x8bb0 <USART4_enable_tx>
    74be:	02 c0       	rjmp	.+4      	; 0x74c4 <_Z18serialbus_start_txv+0x22>
    74c0:	0e 94 a4 45 	call	0x8b48	; 0x8b48 <USART1_enable_tx>
    74c4:	8c 2f       	mov	r24, r28
    74c6:	cf 91       	pop	r28
    74c8:	08 95       	ret

000074ca <serialbus_end_tx>:
    74ca:	80 91 d6 48 	lds	r24, 0x48D6	; 0x8048d6 <_ZL19serialbus_tx_active>
    74ce:	88 23       	and	r24, r24
    74d0:	89 f0       	breq	.+34     	; 0x74f4 <serialbus_end_tx+0x2a>
    74d2:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    74d6:	84 30       	cpi	r24, 0x04	; 4
    74d8:	31 f4       	brne	.+12     	; 0x74e6 <serialbus_end_tx+0x1c>
    74da:	e0 e8       	ldi	r30, 0x80	; 128
    74dc:	f8 e0       	ldi	r31, 0x08	; 8
    74de:	85 81       	ldd	r24, Z+5	; 0x05
    74e0:	8f 7d       	andi	r24, 0xDF	; 223
    74e2:	85 83       	std	Z+5, r24	; 0x05
    74e4:	05 c0       	rjmp	.+10     	; 0x74f0 <serialbus_end_tx+0x26>
    74e6:	e0 e2       	ldi	r30, 0x20	; 32
    74e8:	f8 e0       	ldi	r31, 0x08	; 8
    74ea:	85 81       	ldd	r24, Z+5	; 0x05
    74ec:	8f 7d       	andi	r24, 0xDF	; 223
    74ee:	85 83       	std	Z+5, r24	; 0x05
    74f0:	10 92 d6 48 	sts	0x48D6, r1	; 0x8048d6 <_ZL19serialbus_tx_active>
    74f4:	08 95       	ret

000074f6 <serialbus_init>:
    74f6:	cf 93       	push	r28
    74f8:	2e e7       	ldi	r18, 0x7E	; 126
    74fa:	ed ed       	ldi	r30, 0xDD	; 221
    74fc:	f7 e4       	ldi	r31, 0x47	; 71
    74fe:	df 01       	movw	r26, r30
    7500:	1d 92       	st	X+, r1
    7502:	2a 95       	dec	r18
    7504:	e9 f7       	brne	.-6      	; 0x7500 <serialbus_init+0xa>
    7506:	a0 e0       	ldi	r26, 0x00	; 0
    7508:	b0 e0       	ldi	r27, 0x00	; 0
    750a:	a3 30       	cpi	r26, 0x03	; 3
    750c:	b1 05       	cpc	r27, r1
    750e:	5c f4       	brge	.+22     	; 0x7526 <serialbus_init+0x30>
    7510:	29 e2       	ldi	r18, 0x29	; 41
    7512:	2a 9f       	mul	r18, r26
    7514:	f0 01       	movw	r30, r0
    7516:	2b 9f       	mul	r18, r27
    7518:	f0 0d       	add	r31, r0
    751a:	11 24       	eor	r1, r1
    751c:	e5 5a       	subi	r30, 0xA5	; 165
    751e:	f7 4b       	sbci	r31, 0xB7	; 183
    7520:	10 82       	st	Z, r1
    7522:	11 96       	adiw	r26, 0x01	; 1
    7524:	f2 cf       	rjmp	.-28     	; 0x750a <serialbus_init+0x14>
    7526:	46 30       	cpi	r20, 0x06	; 6
    7528:	21 f4       	brne	.+8      	; 0x7532 <serialbus_init+0x3c>
    752a:	20 91 27 40 	lds	r18, 0x4027	; 0x804027 <g_serialbus_usart_number>
    752e:	27 30       	cpi	r18, 0x07	; 7
    7530:	51 f4       	brne	.+20     	; 0x7546 <serialbus_init+0x50>
    7532:	c4 2f       	mov	r28, r20
    7534:	44 30       	cpi	r20, 0x04	; 4
    7536:	19 f4       	brne	.+6      	; 0x753e <serialbus_init+0x48>
    7538:	0e 94 7a 39 	call	0x72f4	; 0x72f4 <_ZL21USART4_initializationm>
    753c:	02 c0       	rjmp	.+4      	; 0x7542 <serialbus_init+0x4c>
    753e:	0e 94 8b 39 	call	0x7316	; 0x7316 <_ZL21USART1_initializationm>
    7542:	c0 93 27 40 	sts	0x4027, r28	; 0x804027 <g_serialbus_usart_number>
    7546:	10 92 26 40 	sts	0x4026, r1	; 0x804026 <_ZL14g_bus_disabled>
    754a:	cf 91       	pop	r28
    754c:	08 95       	ret

0000754e <_Z19serialbus_send_textPc>:
	}
}


bool serialbus_send_text(char* text)
{
    754e:	ef 92       	push	r14
    7550:	ff 92       	push	r15
    7552:	1f 93       	push	r17
    7554:	cf 93       	push	r28
    7556:	df 93       	push	r29
	bool err = true;
	uint16_t tries = 200;

	if(g_bus_disabled)
    7558:	10 91 26 40 	lds	r17, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    755c:	11 11       	cpse	r17, r1
    755e:	2d c0       	rjmp	.+90     	; 0x75ba <_Z19serialbus_send_textPc+0x6c>
	{
		return( err);
	}

	if(text)
    7560:	00 97       	sbiw	r24, 0x00	; 0
    7562:	69 f1       	breq	.+90     	; 0x75be <_Z19serialbus_send_textPc+0x70>
    7564:	7c 01       	movw	r14, r24
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();
    7566:	0e 94 c8 39 	call	0x7390	; 0x7390 <nextEmptySBTxBuffer>


bool serialbus_send_text(char* text)
{
	bool err = true;
	uint16_t tries = 200;
    756a:	c8 ec       	ldi	r28, 0xC8	; 200
    756c:	d0 e0       	ldi	r29, 0x00	; 0

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    756e:	00 97       	sbiw	r24, 0x00	; 0
    7570:	a1 f4       	brne	.+40     	; 0x759a <_Z19serialbus_send_textPc+0x4c>
    7572:	20 97       	sbiw	r28, 0x00	; 0
    7574:	91 f0       	breq	.+36     	; 0x759a <_Z19serialbus_send_textPc+0x4c>
		{
			while(serialbusTxInProgress() && tries)
    7576:	0e 94 4e 3a 	call	0x749c	; 0x749c <serialbusTxInProgress>
    757a:	88 23       	and	r24, r24
    757c:	21 f0       	breq	.+8      	; 0x7586 <_Z19serialbus_send_textPc+0x38>
    757e:	20 97       	sbiw	r28, 0x00	; 0
    7580:	19 f4       	brne	.+6      	; 0x7588 <_Z19serialbus_send_textPc+0x3a>
    7582:	81 2f       	mov	r24, r17
    7584:	01 c0       	rjmp	.+2      	; 0x7588 <_Z19serialbus_send_textPc+0x3a>
    7586:	81 2f       	mov	r24, r17
    7588:	88 23       	and	r24, r24
    758a:	21 f0       	breq	.+8      	; 0x7594 <_Z19serialbus_send_textPc+0x46>
			{
				if(tries)
    758c:	20 97       	sbiw	r28, 0x00	; 0
    758e:	99 f3       	breq	.-26     	; 0x7576 <_Z19serialbus_send_textPc+0x28>
				{
					tries--;    /* wait until transmit finishes */
    7590:	21 97       	sbiw	r28, 0x01	; 1
    7592:	f1 cf       	rjmp	.-30     	; 0x7576 <_Z19serialbus_send_textPc+0x28>
				}
			}
			buff = nextEmptySBTxBuffer();
    7594:	0e 94 c8 39 	call	0x7390	; 0x7390 <nextEmptySBTxBuffer>

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    7598:	ea cf       	rjmp	.-44     	; 0x756e <_Z19serialbus_send_textPc+0x20>
				}
			}
			buff = nextEmptySBTxBuffer();
		}

		if(buff)
    759a:	00 97       	sbiw	r24, 0x00	; 0
    759c:	91 f0       	breq	.+36     	; 0x75c2 <_Z19serialbus_send_textPc+0x74>
		{
			sprintf(*buff, text);
    759e:	ff 92       	push	r15
    75a0:	ef 92       	push	r14
    75a2:	9f 93       	push	r25
    75a4:	8f 93       	push	r24
    75a6:	0e 94 a6 4a 	call	0x954c	; 0x954c <sprintf>

			serialbus_start_tx();
    75aa:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <_Z18serialbus_start_txv>
    75ae:	0f 90       	pop	r0
    75b0:	0f 90       	pop	r0
    75b2:	0f 90       	pop	r0
    75b4:	0f 90       	pop	r0
			err = false;
    75b6:	80 e0       	ldi	r24, 0x00	; 0
    75b8:	05 c0       	rjmp	.+10     	; 0x75c4 <_Z19serialbus_send_textPc+0x76>
	bool err = true;
	uint16_t tries = 200;

	if(g_bus_disabled)
	{
		return( err);
    75ba:	81 e0       	ldi	r24, 0x01	; 1
    75bc:	03 c0       	rjmp	.+6      	; 0x75c4 <_Z19serialbus_send_textPc+0x76>
}


bool serialbus_send_text(char* text)
{
	bool err = true;
    75be:	81 e0       	ldi	r24, 0x01	; 1
    75c0:	01 c0       	rjmp	.+2      	; 0x75c4 <_Z19serialbus_send_textPc+0x76>
    75c2:	81 e0       	ldi	r24, 0x01	; 1
			err = false;
		}
	}

	return(err);
}
    75c4:	df 91       	pop	r29
    75c6:	cf 91       	pop	r28
    75c8:	1f 91       	pop	r17
    75ca:	ff 90       	pop	r15
    75cc:	ef 90       	pop	r14
    75ce:	08 95       	ret

000075d0 <sb_send_NewPrompt>:
 *  Support for creating and sending various Terminal Mode Serialbus messages is provided below.
 ************************************************************************************/

void sb_send_NewPrompt(void)
{
	if(g_bus_disabled)
    75d0:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    75d4:	81 11       	cpse	r24, r1
    75d6:	06 c0       	rjmp	.+12     	; 0x75e4 <sb_send_NewPrompt+0x14>
	{
		return;
	}

	while(serialbus_send_text((char*)textPrompt))
    75d8:	8f eb       	ldi	r24, 0xBF	; 191
    75da:	94 e4       	ldi	r25, 0x44	; 68
    75dc:	0e 94 a7 3a 	call	0x754e	; 0x754e <_Z19serialbus_send_textPc>
    75e0:	81 11       	cpse	r24, r1
    75e2:	fa cf       	rjmp	.-12     	; 0x75d8 <sb_send_NewPrompt+0x8>
    75e4:	08 95       	ret

000075e6 <sb_send_NewLine>:
	}
}

void sb_send_NewLine(void)
{
	if(g_bus_disabled)
    75e6:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    75ea:	81 11       	cpse	r24, r1
    75ec:	04 c0       	rjmp	.+8      	; 0x75f6 <sb_send_NewLine+0x10>
	{
		return;
	}
	serialbus_send_text((char*)crlf);
    75ee:	82 ec       	ldi	r24, 0xC2	; 194
    75f0:	94 e4       	ldi	r25, 0x44	; 68
    75f2:	0e 94 a7 3a 	call	0x754e	; 0x754e <_Z19serialbus_send_textPc>
    75f6:	08 95       	ret

000075f8 <sb_echo_char>:
}

void sb_echo_char(uint8_t c)
{
	if(g_bus_disabled)
    75f8:	90 91 26 40 	lds	r25, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    75fc:	91 11       	cpse	r25, r1
    75fe:	07 c0       	rjmp	.+14     	; 0x760e <sb_echo_char+0x16>
	{
		return;
	}
	g_tempMsgBuff[0] = c;
    7600:	e7 ed       	ldi	r30, 0xD7	; 215
    7602:	f8 e4       	ldi	r31, 0x48	; 72
    7604:	80 83       	st	Z, r24
	g_tempMsgBuff[1] = '\0';
    7606:	11 82       	std	Z+1, r1	; 0x01
	serialbus_send_text(g_tempMsgBuff);
    7608:	cf 01       	movw	r24, r30
    760a:	0e 94 a7 3a 	call	0x754e	; 0x754e <_Z19serialbus_send_textPc>
    760e:	08 95       	ret

00007610 <sb_send_string>:
}

bool sb_send_string(char* str)
{
    7610:	af 92       	push	r10
    7612:	bf 92       	push	r11
    7614:	cf 92       	push	r12
    7616:	df 92       	push	r13
    7618:	ef 92       	push	r14
    761a:	ff 92       	push	r15
    761c:	0f 93       	push	r16
    761e:	1f 93       	push	r17
    7620:	cf 93       	push	r28
    7622:	df 93       	push	r29
	bool err = false;
	uint16_t length, lengthToSend, lengthSent=0;
	bool done = false;

	if(g_bus_disabled)
    7624:	d0 91 26 40 	lds	r29, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    7628:	d1 11       	cpse	r29, r1
    762a:	40 c0       	rjmp	.+128    	; 0x76ac <sb_send_string+0x9c>
	{
		return( true);
	}

	if(str == NULL)
    762c:	00 97       	sbiw	r24, 0x00	; 0
    762e:	d9 f1       	breq	.+118    	; 0x76a6 <sb_send_string+0x96>
	{
		return( true);
	}

	if(!*str)
    7630:	fc 01       	movw	r30, r24
    7632:	20 81       	ld	r18, Z
    7634:	22 23       	and	r18, r18
    7636:	c9 f1       	breq	.+114    	; 0x76aa <sb_send_string+0x9a>
    7638:	5c 01       	movw	r10, r24
	{
		return(true);
	}

	length = strlen(str);
    763a:	01 90       	ld	r0, Z+
    763c:	00 20       	and	r0, r0
    763e:	e9 f7       	brne	.-6      	; 0x763a <sb_send_string+0x2a>
    7640:	31 97       	sbiw	r30, 0x01	; 1
    7642:	6f 01       	movw	r12, r30
    7644:	c8 1a       	sub	r12, r24
    7646:	d9 0a       	sbc	r13, r25
}

bool sb_send_string(char* str)
{
	bool err = false;
	uint16_t length, lengthToSend, lengthSent=0;
    7648:	e1 2c       	mov	r14, r1
    764a:	f1 2c       	mov	r15, r1

	length = strlen(str);

	do
	{
		lengthToSend = MIN(length-lengthSent, (uint16_t)SERIALBUS_MAX_TX_MSG_LENGTH);
    764c:	86 01       	movw	r16, r12
    764e:	0e 19       	sub	r16, r14
    7650:	1f 09       	sbc	r17, r15
    7652:	09 32       	cpi	r16, 0x29	; 41
    7654:	11 05       	cpc	r17, r1
    7656:	10 f0       	brcs	.+4      	; 0x765c <sb_send_string+0x4c>
    7658:	09 e2       	ldi	r16, 0x29	; 41
    765a:	10 e0       	ldi	r17, 0x00	; 0
		strncpy(g_tempMsgBuff, &str[lengthSent], lengthToSend);
    765c:	a8 01       	movw	r20, r16
    765e:	b5 01       	movw	r22, r10
    7660:	6e 0d       	add	r22, r14
    7662:	7f 1d       	adc	r23, r15
    7664:	87 ed       	ldi	r24, 0xD7	; 215
    7666:	98 e4       	ldi	r25, 0x48	; 72
    7668:	0e 94 7a 4a 	call	0x94f4	; 0x94f4 <strncpy>
		if(lengthToSend < SERIALBUS_MAX_TX_MSG_LENGTH)
    766c:	09 32       	cpi	r16, 0x29	; 41
    766e:	11 05       	cpc	r17, r1
    7670:	20 f4       	brcc	.+8      	; 0x767a <sb_send_string+0x6a>
		{
			g_tempMsgBuff[lengthToSend] = '\0';
    7672:	f8 01       	movw	r30, r16
    7674:	e9 52       	subi	r30, 0x29	; 41
    7676:	f7 4b       	sbci	r31, 0xB7	; 183
    7678:	10 82       	st	Z, r1
		}
		while((err = serialbus_send_text(g_tempMsgBuff)))
    767a:	87 ed       	ldi	r24, 0xD7	; 215
    767c:	98 e4       	ldi	r25, 0x48	; 72
    767e:	0e 94 a7 3a 	call	0x754e	; 0x754e <_Z19serialbus_send_textPc>
    7682:	c8 2f       	mov	r28, r24
    7684:	81 11       	cpse	r24, r1
    7686:	f9 cf       	rjmp	.-14     	; 0x767a <sb_send_string+0x6a>
		{
			;
		}
		while(!err && serialbusTxInProgress())
    7688:	c1 11       	cpse	r28, r1
    768a:	03 c0       	rjmp	.+6      	; 0x7692 <sb_send_string+0x82>
    768c:	0e 94 4e 3a 	call	0x749c	; 0x749c <serialbusTxInProgress>
    7690:	01 c0       	rjmp	.+2      	; 0x7694 <sb_send_string+0x84>
    7692:	8d 2f       	mov	r24, r29
    7694:	81 11       	cpse	r24, r1
    7696:	f8 cf       	rjmp	.-16     	; 0x7688 <sb_send_string+0x78>
		{
			;
		}
		
		lengthSent += lengthToSend;
    7698:	e0 0e       	add	r14, r16
    769a:	f1 1e       	adc	r15, r17
		done = lengthSent >= length;
	}while(!done);
    769c:	ec 14       	cp	r14, r12
    769e:	fd 04       	cpc	r15, r13
    76a0:	a8 f2       	brcs	.-86     	; 0x764c <sb_send_string+0x3c>

	return( err);
    76a2:	dc 2f       	mov	r29, r28
    76a4:	03 c0       	rjmp	.+6      	; 0x76ac <sb_send_string+0x9c>
		return( true);
	}

	if(str == NULL)
	{
		return( true);
    76a6:	d1 e0       	ldi	r29, 0x01	; 1
    76a8:	01 c0       	rjmp	.+2      	; 0x76ac <sb_send_string+0x9c>
	}

	if(!*str)
	{
		return(true);
    76aa:	d1 e0       	ldi	r29, 0x01	; 1
		lengthSent += lengthToSend;
		done = lengthSent >= length;
	}while(!done);

	return( err);
}
    76ac:	8d 2f       	mov	r24, r29
    76ae:	df 91       	pop	r29
    76b0:	cf 91       	pop	r28
    76b2:	1f 91       	pop	r17
    76b4:	0f 91       	pop	r16
    76b6:	ff 90       	pop	r15
    76b8:	ef 90       	pop	r14
    76ba:	df 90       	pop	r13
    76bc:	cf 90       	pop	r12
    76be:	bf 90       	pop	r11
    76c0:	af 90       	pop	r10
    76c2:	08 95       	ret

000076c4 <_Z13reduce_by_gcdPmS_>:
 *
 */
	void si5351_set_vcoB_freq(Frequency_Hz freq_VCO)
	{
		freqVCOB = freq_VCO;
		set_pll(freq_VCO, SI5351_PLLB);
    76c4:	4f 92       	push	r4
    76c6:	5f 92       	push	r5
    76c8:	6f 92       	push	r6
    76ca:	7f 92       	push	r7
    76cc:	8f 92       	push	r8
    76ce:	9f 92       	push	r9
    76d0:	af 92       	push	r10
    76d2:	bf 92       	push	r11
    76d4:	cf 92       	push	r12
    76d6:	df 92       	push	r13
    76d8:	ef 92       	push	r14
    76da:	ff 92       	push	r15
    76dc:	0f 93       	push	r16
    76de:	1f 93       	push	r17
    76e0:	cf 93       	push	r28
    76e2:	df 93       	push	r29
    76e4:	8c 01       	movw	r16, r24
    76e6:	eb 01       	movw	r28, r22
    76e8:	fc 01       	movw	r30, r24
    76ea:	40 80       	ld	r4, Z
    76ec:	51 80       	ldd	r5, Z+1	; 0x01
    76ee:	62 80       	ldd	r6, Z+2	; 0x02
    76f0:	73 80       	ldd	r7, Z+3	; 0x03
    76f2:	88 80       	ld	r8, Y
    76f4:	99 80       	ldd	r9, Y+1	; 0x01
    76f6:	aa 80       	ldd	r10, Y+2	; 0x02
    76f8:	bb 80       	ldd	r11, Y+3	; 0x03
    76fa:	41 14       	cp	r4, r1
    76fc:	51 04       	cpc	r5, r1
    76fe:	61 04       	cpc	r6, r1
    7700:	71 04       	cpc	r7, r1
    7702:	e1 f1       	breq	.+120    	; 0x777c <_Z13reduce_by_gcdPmS_+0xb8>
    7704:	81 14       	cp	r8, r1
    7706:	91 04       	cpc	r9, r1
    7708:	a1 04       	cpc	r10, r1
    770a:	b1 04       	cpc	r11, r1
    770c:	b9 f1       	breq	.+110    	; 0x777c <_Z13reduce_by_gcdPmS_+0xb8>
    770e:	c3 01       	movw	r24, r6
    7710:	b2 01       	movw	r22, r4
    7712:	a5 01       	movw	r20, r10
    7714:	94 01       	movw	r18, r8
    7716:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    771a:	6b 01       	movw	r12, r22
    771c:	7c 01       	movw	r14, r24
    771e:	c1 14       	cp	r12, r1
    7720:	d1 04       	cpc	r13, r1
    7722:	e1 04       	cpc	r14, r1
    7724:	f1 04       	cpc	r15, r1
    7726:	69 f0       	breq	.+26     	; 0x7742 <_Z13reduce_by_gcdPmS_+0x7e>
    7728:	c5 01       	movw	r24, r10
    772a:	b4 01       	movw	r22, r8
    772c:	a7 01       	movw	r20, r14
    772e:	96 01       	movw	r18, r12
    7730:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    7734:	46 01       	movw	r8, r12
    7736:	57 01       	movw	r10, r14
    7738:	c6 2e       	mov	r12, r22
    773a:	d7 2e       	mov	r13, r23
    773c:	e8 2e       	mov	r14, r24
    773e:	f9 2e       	mov	r15, r25
    7740:	ee cf       	rjmp	.-36     	; 0x771e <_Z13reduce_by_gcdPmS_+0x5a>
    7742:	f2 e0       	ldi	r31, 0x02	; 2
    7744:	8f 16       	cp	r8, r31
    7746:	91 04       	cpc	r9, r1
    7748:	a1 04       	cpc	r10, r1
    774a:	b1 04       	cpc	r11, r1
    774c:	b8 f0       	brcs	.+46     	; 0x777c <_Z13reduce_by_gcdPmS_+0xb8>
    774e:	c3 01       	movw	r24, r6
    7750:	b2 01       	movw	r22, r4
    7752:	a5 01       	movw	r20, r10
    7754:	94 01       	movw	r18, r8
    7756:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    775a:	f8 01       	movw	r30, r16
    775c:	20 83       	st	Z, r18
    775e:	31 83       	std	Z+1, r19	; 0x01
    7760:	42 83       	std	Z+2, r20	; 0x02
    7762:	53 83       	std	Z+3, r21	; 0x03
    7764:	68 81       	ld	r22, Y
    7766:	79 81       	ldd	r23, Y+1	; 0x01
    7768:	8a 81       	ldd	r24, Y+2	; 0x02
    776a:	9b 81       	ldd	r25, Y+3	; 0x03
    776c:	a5 01       	movw	r20, r10
    776e:	94 01       	movw	r18, r8
    7770:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    7774:	28 83       	st	Y, r18
    7776:	39 83       	std	Y+1, r19	; 0x01
    7778:	4a 83       	std	Y+2, r20	; 0x02
    777a:	5b 83       	std	Y+3, r21	; 0x03
    777c:	df 91       	pop	r29
    777e:	cf 91       	pop	r28
    7780:	1f 91       	pop	r17
    7782:	0f 91       	pop	r16
    7784:	ff 90       	pop	r15
    7786:	ef 90       	pop	r14
    7788:	df 90       	pop	r13
    778a:	cf 90       	pop	r12
    778c:	bf 90       	pop	r11
    778e:	af 90       	pop	r10
    7790:	9f 90       	pop	r9
    7792:	8f 90       	pop	r8
    7794:	7f 90       	pop	r7
    7796:	6f 90       	pop	r6
    7798:	5f 90       	pop	r5
    779a:	4f 90       	pop	r4
    779c:	08 95       	ret

0000779e <_Z8pll_calcmP13u_si5351_regs>:
    779e:	4f 92       	push	r4
    77a0:	5f 92       	push	r5
    77a2:	6f 92       	push	r6
    77a4:	7f 92       	push	r7
    77a6:	8f 92       	push	r8
    77a8:	9f 92       	push	r9
    77aa:	af 92       	push	r10
    77ac:	bf 92       	push	r11
    77ae:	cf 92       	push	r12
    77b0:	df 92       	push	r13
    77b2:	ef 92       	push	r14
    77b4:	ff 92       	push	r15
    77b6:	0f 93       	push	r16
    77b8:	1f 93       	push	r17
    77ba:	cf 93       	push	r28
    77bc:	df 93       	push	r29
    77be:	cd b7       	in	r28, 0x3d	; 61
    77c0:	de b7       	in	r29, 0x3e	; 62
    77c2:	28 97       	sbiw	r28, 0x08	; 8
    77c4:	cd bf       	out	0x3d, r28	; 61
    77c6:	de bf       	out	0x3e, r29	; 62
    77c8:	8a 01       	movw	r16, r20
    77ca:	80 90 28 40 	lds	r8, 0x4028	; 0x804028 <_ZL9xtal_freq>
    77ce:	90 90 29 40 	lds	r9, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    77d2:	a0 90 2a 40 	lds	r10, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    77d6:	b0 90 2b 40 	lds	r11, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    77da:	a5 01       	movw	r20, r10
    77dc:	94 01       	movw	r18, r8
    77de:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    77e2:	69 01       	movw	r12, r18
    77e4:	7a 01       	movw	r14, r20
    77e6:	69 83       	std	Y+1, r22	; 0x01
    77e8:	7a 83       	std	Y+2, r23	; 0x02
    77ea:	8b 83       	std	Y+3, r24	; 0x03
    77ec:	9c 83       	std	Y+4, r25	; 0x04
    77ee:	8d 82       	std	Y+5, r8	; 0x05
    77f0:	9e 82       	std	Y+6, r9	; 0x06
    77f2:	af 82       	std	Y+7, r10	; 0x07
    77f4:	b8 86       	std	Y+8, r11	; 0x08
    77f6:	be 01       	movw	r22, r28
    77f8:	6b 5f       	subi	r22, 0xFB	; 251
    77fa:	7f 4f       	sbci	r23, 0xFF	; 255
    77fc:	ce 01       	movw	r24, r28
    77fe:	01 96       	adiw	r24, 0x01	; 1
    7800:	0e 94 62 3b 	call	0x76c4	; 0x76c4 <_Z13reduce_by_gcdPmS_>
    7804:	89 80       	ldd	r8, Y+1	; 0x01
    7806:	9a 80       	ldd	r9, Y+2	; 0x02
    7808:	ab 80       	ldd	r10, Y+3	; 0x03
    780a:	bc 80       	ldd	r11, Y+4	; 0x04
    780c:	88 0c       	add	r8, r8
    780e:	99 1c       	adc	r9, r9
    7810:	aa 1c       	adc	r10, r10
    7812:	bb 1c       	adc	r11, r11
    7814:	88 0c       	add	r8, r8
    7816:	99 1c       	adc	r9, r9
    7818:	aa 1c       	adc	r10, r10
    781a:	bb 1c       	adc	r11, r11
    781c:	88 0c       	add	r8, r8
    781e:	99 1c       	adc	r9, r9
    7820:	aa 1c       	adc	r10, r10
    7822:	bb 1c       	adc	r11, r11
    7824:	88 0c       	add	r8, r8
    7826:	99 1c       	adc	r9, r9
    7828:	aa 1c       	adc	r10, r10
    782a:	bb 1c       	adc	r11, r11
    782c:	88 0c       	add	r8, r8
    782e:	99 1c       	adc	r9, r9
    7830:	aa 1c       	adc	r10, r10
    7832:	bb 1c       	adc	r11, r11
    7834:	88 0c       	add	r8, r8
    7836:	99 1c       	adc	r9, r9
    7838:	aa 1c       	adc	r10, r10
    783a:	bb 1c       	adc	r11, r11
    783c:	88 0c       	add	r8, r8
    783e:	99 1c       	adc	r9, r9
    7840:	aa 1c       	adc	r10, r10
    7842:	bb 1c       	adc	r11, r11
    7844:	4d 80       	ldd	r4, Y+5	; 0x05
    7846:	5e 80       	ldd	r5, Y+6	; 0x06
    7848:	6f 80       	ldd	r6, Y+7	; 0x07
    784a:	78 84       	ldd	r7, Y+8	; 0x08
    784c:	c5 01       	movw	r24, r10
    784e:	b4 01       	movw	r22, r8
    7850:	a3 01       	movw	r20, r6
    7852:	92 01       	movw	r18, r4
    7854:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    7858:	cc 0c       	add	r12, r12
    785a:	dd 1c       	adc	r13, r13
    785c:	ee 1c       	adc	r14, r14
    785e:	ff 1c       	adc	r15, r15
    7860:	cc 0c       	add	r12, r12
    7862:	dd 1c       	adc	r13, r13
    7864:	ee 1c       	adc	r14, r14
    7866:	ff 1c       	adc	r15, r15
    7868:	cc 0c       	add	r12, r12
    786a:	dd 1c       	adc	r13, r13
    786c:	ee 1c       	adc	r14, r14
    786e:	ff 1c       	adc	r15, r15
    7870:	cc 0c       	add	r12, r12
    7872:	dd 1c       	adc	r13, r13
    7874:	ee 1c       	adc	r14, r14
    7876:	ff 1c       	adc	r15, r15
    7878:	cc 0c       	add	r12, r12
    787a:	dd 1c       	adc	r13, r13
    787c:	ee 1c       	adc	r14, r14
    787e:	ff 1c       	adc	r15, r15
    7880:	cc 0c       	add	r12, r12
    7882:	dd 1c       	adc	r13, r13
    7884:	ee 1c       	adc	r14, r14
    7886:	ff 1c       	adc	r15, r15
    7888:	cc 0c       	add	r12, r12
    788a:	dd 1c       	adc	r13, r13
    788c:	ee 1c       	adc	r14, r14
    788e:	ff 1c       	adc	r15, r15
    7890:	c2 0e       	add	r12, r18
    7892:	d3 1e       	adc	r13, r19
    7894:	e4 1e       	adc	r14, r20
    7896:	f5 1e       	adc	r15, r21
    7898:	82 e0       	ldi	r24, 0x02	; 2
    789a:	d8 1a       	sub	r13, r24
    789c:	e1 08       	sbc	r14, r1
    789e:	f1 08       	sbc	r15, r1
    78a0:	f8 01       	movw	r30, r16
    78a2:	c0 82       	st	Z, r12
    78a4:	d1 82       	std	Z+1, r13	; 0x01
    78a6:	e2 82       	std	Z+2, r14	; 0x02
    78a8:	f3 82       	std	Z+3, r15	; 0x03
    78aa:	c3 01       	movw	r24, r6
    78ac:	b2 01       	movw	r22, r4
    78ae:	0e 94 46 48 	call	0x908c	; 0x908c <__mulsi3>
    78b2:	86 1a       	sub	r8, r22
    78b4:	97 0a       	sbc	r9, r23
    78b6:	a8 0a       	sbc	r10, r24
    78b8:	b9 0a       	sbc	r11, r25
    78ba:	84 82       	std	Z+4, r8	; 0x04
    78bc:	95 82       	std	Z+5, r9	; 0x05
    78be:	a6 82       	std	Z+6, r10	; 0x06
    78c0:	b7 82       	std	Z+7, r11	; 0x07
    78c2:	40 86       	std	Z+8, r4	; 0x08
    78c4:	51 86       	std	Z+9, r5	; 0x09
    78c6:	62 86       	std	Z+10, r6	; 0x0a
    78c8:	73 86       	std	Z+11, r7	; 0x0b
    78ca:	80 e0       	ldi	r24, 0x00	; 0
    78cc:	28 96       	adiw	r28, 0x08	; 8
    78ce:	cd bf       	out	0x3d, r28	; 61
    78d0:	de bf       	out	0x3e, r29	; 62
    78d2:	df 91       	pop	r29
    78d4:	cf 91       	pop	r28
    78d6:	1f 91       	pop	r17
    78d8:	0f 91       	pop	r16
    78da:	ff 90       	pop	r15
    78dc:	ef 90       	pop	r14
    78de:	df 90       	pop	r13
    78e0:	cf 90       	pop	r12
    78e2:	bf 90       	pop	r11
    78e4:	af 90       	pop	r10
    78e6:	9f 90       	pop	r9
    78e8:	8f 90       	pop	r8
    78ea:	7f 90       	pop	r7
    78ec:	6f 90       	pop	r6
    78ee:	5f 90       	pop	r5
    78f0:	4f 90       	pop	r4
    78f2:	08 95       	ret

000078f4 <_Z15multisynth_calcmP13u_si5351_regsPbS1_>:
    78f4:	2f 92       	push	r2
    78f6:	3f 92       	push	r3
    78f8:	4f 92       	push	r4
    78fa:	5f 92       	push	r5
    78fc:	6f 92       	push	r6
    78fe:	7f 92       	push	r7
    7900:	8f 92       	push	r8
    7902:	9f 92       	push	r9
    7904:	af 92       	push	r10
    7906:	bf 92       	push	r11
    7908:	cf 92       	push	r12
    790a:	df 92       	push	r13
    790c:	ef 92       	push	r14
    790e:	ff 92       	push	r15
    7910:	0f 93       	push	r16
    7912:	1f 93       	push	r17
    7914:	cf 93       	push	r28
    7916:	df 93       	push	r29
    7918:	cd b7       	in	r28, 0x3d	; 61
    791a:	de b7       	in	r29, 0x3e	; 62
    791c:	25 97       	sbiw	r28, 0x05	; 5
    791e:	cd bf       	out	0x3d, r28	; 61
    7920:	de bf       	out	0x3e, r29	; 62
    7922:	2b 01       	movw	r4, r22
    7924:	3c 01       	movw	r6, r24
    7926:	4a 83       	std	Y+2, r20	; 0x02
    7928:	5b 83       	std	Y+3, r21	; 0x03
    792a:	18 01       	movw	r2, r16
    792c:	81 e0       	ldi	r24, 0x01	; 1
    792e:	f9 01       	movw	r30, r18
    7930:	80 83       	st	Z, r24
    7932:	f0 e8       	ldi	r31, 0x80	; 128
    7934:	4f 16       	cp	r4, r31
    7936:	f1 ed       	ldi	r31, 0xD1	; 209
    7938:	5f 06       	cpc	r5, r31
    793a:	f0 ef       	ldi	r31, 0xF0	; 240
    793c:	6f 06       	cpc	r6, r31
    793e:	f8 e0       	ldi	r31, 0x08	; 8
    7940:	7f 06       	cpc	r7, r31
    7942:	d0 f0       	brcs	.+52     	; 0x7978 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x84>
    7944:	c3 01       	movw	r24, r6
    7946:	b2 01       	movw	r22, r4
    7948:	66 0f       	add	r22, r22
    794a:	77 1f       	adc	r23, r23
    794c:	88 1f       	adc	r24, r24
    794e:	99 1f       	adc	r25, r25
    7950:	66 0f       	add	r22, r22
    7952:	77 1f       	adc	r23, r23
    7954:	88 1f       	adc	r24, r24
    7956:	99 1f       	adc	r25, r25
    7958:	c1 2c       	mov	r12, r1
    795a:	d1 2c       	mov	r13, r1
    795c:	76 01       	movw	r14, r12
    795e:	68 94       	set
    7960:	c2 f8       	bld	r12, 2
    7962:	48 c0       	rjmp	.+144    	; 0x79f4 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x100>
    7964:	21 e0       	ldi	r18, 0x01	; 1
    7966:	2d 83       	std	Y+5, r18	; 0x05
    7968:	0d c0       	rjmp	.+26     	; 0x7984 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x90>
    796a:	69 01       	movw	r12, r18
    796c:	7a 01       	movw	r14, r20
    796e:	31 e0       	ldi	r19, 0x01	; 1
    7970:	39 83       	std	Y+1, r19	; 0x01
    7972:	81 e0       	ldi	r24, 0x01	; 1
    7974:	8d 83       	std	Y+5, r24	; 0x05
    7976:	06 c0       	rjmp	.+12     	; 0x7984 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x90>
    7978:	1c 82       	std	Y+4, r1	; 0x04
    797a:	19 82       	std	Y+1, r1	; 0x01
    797c:	1d 82       	std	Y+5, r1	; 0x05
    797e:	c1 2c       	mov	r12, r1
    7980:	d1 2c       	mov	r13, r1
    7982:	76 01       	movw	r14, r12
    7984:	8d 80       	ldd	r8, Y+5	; 0x05
    7986:	81 10       	cpse	r8, r1
    7988:	28 c0       	rjmp	.+80     	; 0x79da <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0xe6>
    798a:	9c 80       	ldd	r9, Y+4	; 0x04
    798c:	a9 2d       	mov	r26, r9
    798e:	b0 e0       	ldi	r27, 0x00	; 0
    7990:	a3 01       	movw	r20, r6
    7992:	92 01       	movw	r18, r4
    7994:	0e 94 de 48 	call	0x91bc	; 0x91bc <__muluhisi3>
    7998:	00 e0       	ldi	r16, 0x00	; 0
    799a:	19 ee       	ldi	r17, 0xE9	; 233
    799c:	24 ea       	ldi	r18, 0xA4	; 164
    799e:	35 e3       	ldi	r19, 0x35	; 53
    79a0:	48 01       	movw	r8, r16
    79a2:	59 01       	movw	r10, r18
    79a4:	86 1a       	sub	r8, r22
    79a6:	97 0a       	sbc	r9, r23
    79a8:	a8 0a       	sbc	r10, r24
    79aa:	b9 0a       	sbc	r11, r25
    79ac:	c5 01       	movw	r24, r10
    79ae:	b4 01       	movw	r22, r8
    79b0:	2c 81       	ldd	r18, Y+4	; 0x04
    79b2:	2e 5f       	subi	r18, 0xFE	; 254
    79b4:	2c 83       	std	Y+4, r18	; 0x04
    79b6:	81 14       	cp	r8, r1
    79b8:	36 e4       	ldi	r19, 0x46	; 70
    79ba:	93 06       	cpc	r9, r19
    79bc:	33 ec       	ldi	r19, 0xC3	; 195
    79be:	a3 06       	cpc	r10, r19
    79c0:	33 e2       	ldi	r19, 0x23	; 35
    79c2:	b3 06       	cpc	r11, r19
    79c4:	78 f2       	brcs	.-98     	; 0x7964 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x70>
    79c6:	a3 01       	movw	r20, r6
    79c8:	92 01       	movw	r18, r4
    79ca:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    79ce:	24 30       	cpi	r18, 0x04	; 4
    79d0:	31 05       	cpc	r19, r1
    79d2:	41 05       	cpc	r20, r1
    79d4:	51 05       	cpc	r21, r1
    79d6:	48 f6       	brcc	.-110    	; 0x796a <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x76>
    79d8:	d5 cf       	rjmp	.-86     	; 0x7984 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x90>
    79da:	89 80       	ldd	r8, Y+1	; 0x01
    79dc:	88 20       	and	r8, r8
    79de:	39 f0       	breq	.+14     	; 0x79ee <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0xfa>
    79e0:	a7 01       	movw	r20, r14
    79e2:	96 01       	movw	r18, r12
    79e4:	c3 01       	movw	r24, r6
    79e6:	b2 01       	movw	r22, r4
    79e8:	0e 94 46 48 	call	0x908c	; 0x908c <__mulsi3>
    79ec:	03 c0       	rjmp	.+6      	; 0x79f4 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x100>
    79ee:	60 e0       	ldi	r22, 0x00	; 0
    79f0:	70 e0       	ldi	r23, 0x00	; 0
    79f2:	cb 01       	movw	r24, r22
    79f4:	21 e0       	ldi	r18, 0x01	; 1
    79f6:	34 e0       	ldi	r19, 0x04	; 4
    79f8:	c3 16       	cp	r12, r19
    79fa:	d1 04       	cpc	r13, r1
    79fc:	e1 04       	cpc	r14, r1
    79fe:	f1 04       	cpc	r15, r1
    7a00:	09 f0       	breq	.+2      	; 0x7a04 <_Z15multisynth_calcmP13u_si5351_regsPbS1_+0x110>
    7a02:	20 e0       	ldi	r18, 0x00	; 0
    7a04:	f1 01       	movw	r30, r2
    7a06:	20 83       	st	Z, r18
    7a08:	cc 0c       	add	r12, r12
    7a0a:	dd 1c       	adc	r13, r13
    7a0c:	ee 1c       	adc	r14, r14
    7a0e:	ff 1c       	adc	r15, r15
    7a10:	cc 0c       	add	r12, r12
    7a12:	dd 1c       	adc	r13, r13
    7a14:	ee 1c       	adc	r14, r14
    7a16:	ff 1c       	adc	r15, r15
    7a18:	cc 0c       	add	r12, r12
    7a1a:	dd 1c       	adc	r13, r13
    7a1c:	ee 1c       	adc	r14, r14
    7a1e:	ff 1c       	adc	r15, r15
    7a20:	cc 0c       	add	r12, r12
    7a22:	dd 1c       	adc	r13, r13
    7a24:	ee 1c       	adc	r14, r14
    7a26:	ff 1c       	adc	r15, r15
    7a28:	cc 0c       	add	r12, r12
    7a2a:	dd 1c       	adc	r13, r13
    7a2c:	ee 1c       	adc	r14, r14
    7a2e:	ff 1c       	adc	r15, r15
    7a30:	cc 0c       	add	r12, r12
    7a32:	dd 1c       	adc	r13, r13
    7a34:	ee 1c       	adc	r14, r14
    7a36:	ff 1c       	adc	r15, r15
    7a38:	cc 0c       	add	r12, r12
    7a3a:	dd 1c       	adc	r13, r13
    7a3c:	ee 1c       	adc	r14, r14
    7a3e:	ff 1c       	adc	r15, r15
    7a40:	f2 e0       	ldi	r31, 0x02	; 2
    7a42:	df 1a       	sub	r13, r31
    7a44:	e1 08       	sbc	r14, r1
    7a46:	f1 08       	sbc	r15, r1
    7a48:	ea 81       	ldd	r30, Y+2	; 0x02
    7a4a:	fb 81       	ldd	r31, Y+3	; 0x03
    7a4c:	c0 82       	st	Z, r12
    7a4e:	d1 82       	std	Z+1, r13	; 0x01
    7a50:	e2 82       	std	Z+2, r14	; 0x02
    7a52:	f3 82       	std	Z+3, r15	; 0x03
    7a54:	14 82       	std	Z+4, r1	; 0x04
    7a56:	15 82       	std	Z+5, r1	; 0x05
    7a58:	16 82       	std	Z+6, r1	; 0x06
    7a5a:	17 82       	std	Z+7, r1	; 0x07
    7a5c:	01 e0       	ldi	r16, 0x01	; 1
    7a5e:	10 e0       	ldi	r17, 0x00	; 0
    7a60:	20 e0       	ldi	r18, 0x00	; 0
    7a62:	30 e0       	ldi	r19, 0x00	; 0
    7a64:	00 87       	std	Z+8, r16	; 0x08
    7a66:	11 87       	std	Z+9, r17	; 0x09
    7a68:	22 87       	std	Z+10, r18	; 0x0a
    7a6a:	33 87       	std	Z+11, r19	; 0x0b
    7a6c:	25 96       	adiw	r28, 0x05	; 5
    7a6e:	cd bf       	out	0x3d, r28	; 61
    7a70:	de bf       	out	0x3e, r29	; 62
    7a72:	df 91       	pop	r29
    7a74:	cf 91       	pop	r28
    7a76:	1f 91       	pop	r17
    7a78:	0f 91       	pop	r16
    7a7a:	ff 90       	pop	r15
    7a7c:	ef 90       	pop	r14
    7a7e:	df 90       	pop	r13
    7a80:	cf 90       	pop	r12
    7a82:	bf 90       	pop	r11
    7a84:	af 90       	pop	r10
    7a86:	9f 90       	pop	r9
    7a88:	8f 90       	pop	r8
    7a8a:	7f 90       	pop	r7
    7a8c:	6f 90       	pop	r6
    7a8e:	5f 90       	pop	r5
    7a90:	4f 90       	pop	r4
    7a92:	3f 90       	pop	r3
    7a94:	2f 90       	pop	r2
    7a96:	08 95       	ret

00007a98 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>:
    7a98:	2f 92       	push	r2
    7a9a:	3f 92       	push	r3
    7a9c:	4f 92       	push	r4
    7a9e:	5f 92       	push	r5
    7aa0:	6f 92       	push	r6
    7aa2:	7f 92       	push	r7
    7aa4:	8f 92       	push	r8
    7aa6:	9f 92       	push	r9
    7aa8:	af 92       	push	r10
    7aaa:	bf 92       	push	r11
    7aac:	cf 92       	push	r12
    7aae:	df 92       	push	r13
    7ab0:	ef 92       	push	r14
    7ab2:	ff 92       	push	r15
    7ab4:	0f 93       	push	r16
    7ab6:	1f 93       	push	r17
    7ab8:	cf 93       	push	r28
    7aba:	df 93       	push	r29
    7abc:	cd b7       	in	r28, 0x3d	; 61
    7abe:	de b7       	in	r29, 0x3e	; 62
    7ac0:	62 97       	sbiw	r28, 0x12	; 18
    7ac2:	cd bf       	out	0x3d, r28	; 61
    7ac4:	de bf       	out	0x3e, r29	; 62
    7ac6:	4b 01       	movw	r8, r22
    7ac8:	5c 01       	movw	r10, r24
    7aca:	1a 01       	movw	r2, r20
    7acc:	29 8b       	std	Y+17, r18	; 0x11
    7ace:	3a 8b       	std	Y+18, r19	; 0x12
    7ad0:	60 91 18 49 	lds	r22, 0x4918	; 0x804918 <_ZL8freqVCOB>
    7ad4:	70 91 19 49 	lds	r23, 0x4919	; 0x804919 <_ZL8freqVCOB+0x1>
    7ad8:	80 91 1a 49 	lds	r24, 0x491A	; 0x80491a <_ZL8freqVCOB+0x2>
    7adc:	90 91 1b 49 	lds	r25, 0x491B	; 0x80491b <_ZL8freqVCOB+0x3>
    7ae0:	a5 01       	movw	r20, r10
    7ae2:	94 01       	movw	r18, r8
    7ae4:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    7ae8:	29 87       	std	Y+9, r18	; 0x09
    7aea:	3a 87       	std	Y+10, r19	; 0x0a
    7aec:	4b 87       	std	Y+11, r20	; 0x0b
    7aee:	5c 87       	std	Y+12, r21	; 0x0c
    7af0:	69 01       	movw	r12, r18
    7af2:	7a 01       	movw	r14, r20
    7af4:	69 83       	std	Y+1, r22	; 0x01
    7af6:	7a 83       	std	Y+2, r23	; 0x02
    7af8:	8b 83       	std	Y+3, r24	; 0x03
    7afa:	9c 83       	std	Y+4, r25	; 0x04
    7afc:	8d 82       	std	Y+5, r8	; 0x05
    7afe:	9e 82       	std	Y+6, r9	; 0x06
    7b00:	af 82       	std	Y+7, r10	; 0x07
    7b02:	b8 86       	std	Y+8, r11	; 0x08
    7b04:	be 01       	movw	r22, r28
    7b06:	6b 5f       	subi	r22, 0xFB	; 251
    7b08:	7f 4f       	sbci	r23, 0xFF	; 255
    7b0a:	ce 01       	movw	r24, r28
    7b0c:	01 96       	adiw	r24, 0x01	; 1
    7b0e:	0e 94 62 3b 	call	0x76c4	; 0x76c4 <_Z13reduce_by_gcdPmS_>
    7b12:	80 91 18 49 	lds	r24, 0x4918	; 0x804918 <_ZL8freqVCOB>
    7b16:	90 91 19 49 	lds	r25, 0x4919	; 0x804919 <_ZL8freqVCOB+0x1>
    7b1a:	a0 91 1a 49 	lds	r26, 0x491A	; 0x80491a <_ZL8freqVCOB+0x2>
    7b1e:	b0 91 1b 49 	lds	r27, 0x491B	; 0x80491b <_ZL8freqVCOB+0x3>
    7b22:	8d 87       	std	Y+13, r24	; 0x0d
    7b24:	9e 87       	std	Y+14, r25	; 0x0e
    7b26:	af 87       	std	Y+15, r26	; 0x0f
    7b28:	b8 8b       	std	Y+16, r27	; 0x10
    7b2a:	4d 80       	ldd	r4, Y+5	; 0x05
    7b2c:	5e 80       	ldd	r5, Y+6	; 0x06
    7b2e:	6f 80       	ldd	r6, Y+7	; 0x07
    7b30:	78 84       	ldd	r7, Y+8	; 0x08
    7b32:	29 85       	ldd	r18, Y+9	; 0x09
    7b34:	3a 85       	ldd	r19, Y+10	; 0x0a
    7b36:	4b 85       	ldd	r20, Y+11	; 0x0b
    7b38:	5c 85       	ldd	r21, Y+12	; 0x0c
    7b3a:	c3 01       	movw	r24, r6
    7b3c:	b2 01       	movw	r22, r4
    7b3e:	0e 94 46 48 	call	0x908c	; 0x908c <__mulsi3>
    7b42:	89 80       	ldd	r8, Y+1	; 0x01
    7b44:	9a 80       	ldd	r9, Y+2	; 0x02
    7b46:	ab 80       	ldd	r10, Y+3	; 0x03
    7b48:	bc 80       	ldd	r11, Y+4	; 0x04
    7b4a:	9b 01       	movw	r18, r22
    7b4c:	ac 01       	movw	r20, r24
    7b4e:	28 0d       	add	r18, r8
    7b50:	39 1d       	adc	r19, r9
    7b52:	4a 1d       	adc	r20, r10
    7b54:	5b 1d       	adc	r21, r11
    7b56:	6d 85       	ldd	r22, Y+13	; 0x0d
    7b58:	7e 85       	ldd	r23, Y+14	; 0x0e
    7b5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    7b5c:	98 89       	ldd	r25, Y+16	; 0x10
    7b5e:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    7b62:	ca 01       	movw	r24, r20
    7b64:	b9 01       	movw	r22, r18
    7b66:	a3 01       	movw	r20, r6
    7b68:	92 01       	movw	r18, r4
    7b6a:	0e 94 46 48 	call	0x908c	; 0x908c <__mulsi3>
    7b6e:	6d 87       	std	Y+13, r22	; 0x0d
    7b70:	7e 87       	std	Y+14, r23	; 0x0e
    7b72:	8f 87       	std	Y+15, r24	; 0x0f
    7b74:	98 8b       	std	Y+16, r25	; 0x10
    7b76:	89 28       	or	r8, r9
    7b78:	8a 28       	or	r8, r10
    7b7a:	8b 28       	or	r8, r11
    7b7c:	29 f4       	brne	.+10     	; 0x7b88 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf0>
    7b7e:	99 85       	ldd	r25, Y+9	; 0x09
    7b80:	90 ff       	sbrs	r25, 0
    7b82:	04 c0       	rjmp	.+8      	; 0x7b8c <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf4>
    7b84:	80 e0       	ldi	r24, 0x00	; 0
    7b86:	03 c0       	rjmp	.+6      	; 0x7b8e <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf6>
    7b88:	80 e0       	ldi	r24, 0x00	; 0
    7b8a:	01 c0       	rjmp	.+2      	; 0x7b8e <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0xf6>
    7b8c:	81 e0       	ldi	r24, 0x01	; 1
    7b8e:	a9 89       	ldd	r26, Y+17	; 0x11
    7b90:	ba 89       	ldd	r27, Y+18	; 0x12
    7b92:	8c 93       	st	X, r24
    7b94:	b4 e0       	ldi	r27, 0x04	; 4
    7b96:	cb 16       	cp	r12, r27
    7b98:	d1 04       	cpc	r13, r1
    7b9a:	e1 04       	cpc	r14, r1
    7b9c:	f1 04       	cpc	r15, r1
    7b9e:	09 f0       	breq	.+2      	; 0x7ba2 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x10a>
    7ba0:	80 e0       	ldi	r24, 0x00	; 0
    7ba2:	f8 01       	movw	r30, r16
    7ba4:	80 83       	st	Z, r24
    7ba6:	88 23       	and	r24, r24
    7ba8:	a1 f0       	breq	.+40     	; 0x7bd2 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x13a>
    7baa:	d1 01       	movw	r26, r2
    7bac:	1d 92       	st	X+, r1
    7bae:	1d 92       	st	X+, r1
    7bb0:	1d 92       	st	X+, r1
    7bb2:	1c 92       	st	X, r1
    7bb4:	13 97       	sbiw	r26, 0x03	; 3
    7bb6:	f1 01       	movw	r30, r2
    7bb8:	14 82       	std	Z+4, r1	; 0x04
    7bba:	15 82       	std	Z+5, r1	; 0x05
    7bbc:	16 82       	std	Z+6, r1	; 0x06
    7bbe:	17 82       	std	Z+7, r1	; 0x07
    7bc0:	81 e0       	ldi	r24, 0x01	; 1
    7bc2:	90 e0       	ldi	r25, 0x00	; 0
    7bc4:	a0 e0       	ldi	r26, 0x00	; 0
    7bc6:	b0 e0       	ldi	r27, 0x00	; 0
    7bc8:	80 87       	std	Z+8, r24	; 0x08
    7bca:	91 87       	std	Z+9, r25	; 0x09
    7bcc:	a2 87       	std	Z+10, r26	; 0x0a
    7bce:	b3 87       	std	Z+11, r27	; 0x0b
    7bd0:	69 c0       	rjmp	.+210    	; 0x7ca4 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_+0x20c>
    7bd2:	89 80       	ldd	r8, Y+1	; 0x01
    7bd4:	9a 80       	ldd	r9, Y+2	; 0x02
    7bd6:	ab 80       	ldd	r10, Y+3	; 0x03
    7bd8:	bc 80       	ldd	r11, Y+4	; 0x04
    7bda:	88 0c       	add	r8, r8
    7bdc:	99 1c       	adc	r9, r9
    7bde:	aa 1c       	adc	r10, r10
    7be0:	bb 1c       	adc	r11, r11
    7be2:	88 0c       	add	r8, r8
    7be4:	99 1c       	adc	r9, r9
    7be6:	aa 1c       	adc	r10, r10
    7be8:	bb 1c       	adc	r11, r11
    7bea:	88 0c       	add	r8, r8
    7bec:	99 1c       	adc	r9, r9
    7bee:	aa 1c       	adc	r10, r10
    7bf0:	bb 1c       	adc	r11, r11
    7bf2:	88 0c       	add	r8, r8
    7bf4:	99 1c       	adc	r9, r9
    7bf6:	aa 1c       	adc	r10, r10
    7bf8:	bb 1c       	adc	r11, r11
    7bfa:	88 0c       	add	r8, r8
    7bfc:	99 1c       	adc	r9, r9
    7bfe:	aa 1c       	adc	r10, r10
    7c00:	bb 1c       	adc	r11, r11
    7c02:	88 0c       	add	r8, r8
    7c04:	99 1c       	adc	r9, r9
    7c06:	aa 1c       	adc	r10, r10
    7c08:	bb 1c       	adc	r11, r11
    7c0a:	88 0c       	add	r8, r8
    7c0c:	99 1c       	adc	r9, r9
    7c0e:	aa 1c       	adc	r10, r10
    7c10:	bb 1c       	adc	r11, r11
    7c12:	4d 80       	ldd	r4, Y+5	; 0x05
    7c14:	5e 80       	ldd	r5, Y+6	; 0x06
    7c16:	6f 80       	ldd	r6, Y+7	; 0x07
    7c18:	78 84       	ldd	r7, Y+8	; 0x08
    7c1a:	c5 01       	movw	r24, r10
    7c1c:	b4 01       	movw	r22, r8
    7c1e:	a3 01       	movw	r20, r6
    7c20:	92 01       	movw	r18, r4
    7c22:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    7c26:	c9 84       	ldd	r12, Y+9	; 0x09
    7c28:	da 84       	ldd	r13, Y+10	; 0x0a
    7c2a:	eb 84       	ldd	r14, Y+11	; 0x0b
    7c2c:	fc 84       	ldd	r15, Y+12	; 0x0c
    7c2e:	cc 0c       	add	r12, r12
    7c30:	dd 1c       	adc	r13, r13
    7c32:	ee 1c       	adc	r14, r14
    7c34:	ff 1c       	adc	r15, r15
    7c36:	cc 0c       	add	r12, r12
    7c38:	dd 1c       	adc	r13, r13
    7c3a:	ee 1c       	adc	r14, r14
    7c3c:	ff 1c       	adc	r15, r15
    7c3e:	cc 0c       	add	r12, r12
    7c40:	dd 1c       	adc	r13, r13
    7c42:	ee 1c       	adc	r14, r14
    7c44:	ff 1c       	adc	r15, r15
    7c46:	cc 0c       	add	r12, r12
    7c48:	dd 1c       	adc	r13, r13
    7c4a:	ee 1c       	adc	r14, r14
    7c4c:	ff 1c       	adc	r15, r15
    7c4e:	cc 0c       	add	r12, r12
    7c50:	dd 1c       	adc	r13, r13
    7c52:	ee 1c       	adc	r14, r14
    7c54:	ff 1c       	adc	r15, r15
    7c56:	cc 0c       	add	r12, r12
    7c58:	dd 1c       	adc	r13, r13
    7c5a:	ee 1c       	adc	r14, r14
    7c5c:	ff 1c       	adc	r15, r15
    7c5e:	cc 0c       	add	r12, r12
    7c60:	dd 1c       	adc	r13, r13
    7c62:	ee 1c       	adc	r14, r14
    7c64:	ff 1c       	adc	r15, r15
    7c66:	c2 0e       	add	r12, r18
    7c68:	d3 1e       	adc	r13, r19
    7c6a:	e4 1e       	adc	r14, r20
    7c6c:	f5 1e       	adc	r15, r21
    7c6e:	f2 e0       	ldi	r31, 0x02	; 2
    7c70:	df 1a       	sub	r13, r31
    7c72:	e1 08       	sbc	r14, r1
    7c74:	f1 08       	sbc	r15, r1
    7c76:	d1 01       	movw	r26, r2
    7c78:	cd 92       	st	X+, r12
    7c7a:	dd 92       	st	X+, r13
    7c7c:	ed 92       	st	X+, r14
    7c7e:	fc 92       	st	X, r15
    7c80:	13 97       	sbiw	r26, 0x03	; 3
    7c82:	c3 01       	movw	r24, r6
    7c84:	b2 01       	movw	r22, r4
    7c86:	0e 94 46 48 	call	0x908c	; 0x908c <__mulsi3>
    7c8a:	86 1a       	sub	r8, r22
    7c8c:	97 0a       	sbc	r9, r23
    7c8e:	a8 0a       	sbc	r10, r24
    7c90:	b9 0a       	sbc	r11, r25
    7c92:	f1 01       	movw	r30, r2
    7c94:	84 82       	std	Z+4, r8	; 0x04
    7c96:	95 82       	std	Z+5, r9	; 0x05
    7c98:	a6 82       	std	Z+6, r10	; 0x06
    7c9a:	b7 82       	std	Z+7, r11	; 0x07
    7c9c:	40 86       	std	Z+8, r4	; 0x08
    7c9e:	51 86       	std	Z+9, r5	; 0x09
    7ca0:	62 86       	std	Z+10, r6	; 0x0a
    7ca2:	73 86       	std	Z+11, r7	; 0x0b
    7ca4:	6d 85       	ldd	r22, Y+13	; 0x0d
    7ca6:	7e 85       	ldd	r23, Y+14	; 0x0e
    7ca8:	8f 85       	ldd	r24, Y+15	; 0x0f
    7caa:	98 89       	ldd	r25, Y+16	; 0x10
    7cac:	62 96       	adiw	r28, 0x12	; 18
    7cae:	cd bf       	out	0x3d, r28	; 61
    7cb0:	de bf       	out	0x3e, r29	; 62
    7cb2:	df 91       	pop	r29
    7cb4:	cf 91       	pop	r28
    7cb6:	1f 91       	pop	r17
    7cb8:	0f 91       	pop	r16
    7cba:	ff 90       	pop	r15
    7cbc:	ef 90       	pop	r14
    7cbe:	df 90       	pop	r13
    7cc0:	cf 90       	pop	r12
    7cc2:	bf 90       	pop	r11
    7cc4:	af 90       	pop	r10
    7cc6:	9f 90       	pop	r9
    7cc8:	8f 90       	pop	r8
    7cca:	7f 90       	pop	r7
    7ccc:	6f 90       	pop	r6
    7cce:	5f 90       	pop	r5
    7cd0:	4f 90       	pop	r4
    7cd2:	3f 90       	pop	r3
    7cd4:	2f 90       	pop	r2
    7cd6:	08 95       	ret

00007cd8 <_Z17si5351_write_bulkhPhh>:
    7cd8:	ff 92       	push	r15
    7cda:	0f 93       	push	r16
    7cdc:	1f 93       	push	r17
    7cde:	cf 93       	push	r28
    7ce0:	df 93       	push	r29
    7ce2:	f8 2e       	mov	r15, r24
    7ce4:	8b 01       	movw	r16, r22
    7ce6:	d4 2f       	mov	r29, r20
    7ce8:	8a e0       	ldi	r24, 0x0A	; 10
    7cea:	cf ef       	ldi	r28, 0xFF	; 255
    7cec:	c8 0f       	add	r28, r24
    7cee:	88 23       	and	r24, r24
    7cf0:	71 f0       	breq	.+28     	; 0x7d0e <_Z17si5351_write_bulkhPhh+0x36>
    7cf2:	2d 2f       	mov	r18, r29
    7cf4:	a8 01       	movw	r20, r16
    7cf6:	6f 2d       	mov	r22, r15
    7cf8:	80 ec       	ldi	r24, 0xC0	; 192
    7cfa:	0e 94 8d 34 	call	0x691a	; 0x691a <I2C_1_SendData>
    7cfe:	21 e0       	ldi	r18, 0x01	; 1
    7d00:	d8 13       	cpse	r29, r24
    7d02:	01 c0       	rjmp	.+2      	; 0x7d06 <_Z17si5351_write_bulkhPhh+0x2e>
    7d04:	20 e0       	ldi	r18, 0x00	; 0
    7d06:	d8 17       	cp	r29, r24
    7d08:	21 f0       	breq	.+8      	; 0x7d12 <_Z17si5351_write_bulkhPhh+0x3a>
    7d0a:	91 e0       	ldi	r25, 0x01	; 1
    7d0c:	03 c0       	rjmp	.+6      	; 0x7d14 <_Z17si5351_write_bulkhPhh+0x3c>
    7d0e:	90 e0       	ldi	r25, 0x00	; 0
    7d10:	01 c0       	rjmp	.+2      	; 0x7d14 <_Z17si5351_write_bulkhPhh+0x3c>
    7d12:	90 e0       	ldi	r25, 0x00	; 0
    7d14:	8c 2f       	mov	r24, r28
    7d16:	91 11       	cpse	r25, r1
    7d18:	e8 cf       	rjmp	.-48     	; 0x7cea <_Z17si5351_write_bulkhPhh+0x12>
    7d1a:	82 2f       	mov	r24, r18
    7d1c:	df 91       	pop	r29
    7d1e:	cf 91       	pop	r28
    7d20:	1f 91       	pop	r17
    7d22:	0f 91       	pop	r16
    7d24:	ff 90       	pop	r15
    7d26:	08 95       	ret

00007d28 <_Z7set_pllm10si5351_pll>:
    7d28:	1f 93       	push	r17
    7d2a:	cf 93       	push	r28
    7d2c:	df 93       	push	r29
    7d2e:	cd b7       	in	r28, 0x3d	; 61
    7d30:	de b7       	in	r29, 0x3e	; 62
    7d32:	66 97       	sbiw	r28, 0x16	; 22
    7d34:	cd bf       	out	0x3d, r28	; 61
    7d36:	de bf       	out	0x3e, r29	; 62
    7d38:	14 2f       	mov	r17, r20
    7d3a:	ae 01       	movw	r20, r28
    7d3c:	4f 5f       	subi	r20, 0xFF	; 255
    7d3e:	5f 4f       	sbci	r21, 0xFF	; 255
    7d40:	0e 94 cf 3b 	call	0x779e	; 0x779e <_Z8pll_calcmP13u_si5351_regs>
    7d44:	81 11       	cpse	r24, r1
    7d46:	28 c0       	rjmp	.+80     	; 0x7d98 <_Z7set_pllm10si5351_pll+0x70>
    7d48:	8a 85       	ldd	r24, Y+10	; 0x0a
    7d4a:	8d 87       	std	Y+13, r24	; 0x0d
    7d4c:	89 85       	ldd	r24, Y+9	; 0x09
    7d4e:	8e 87       	std	Y+14, r24	; 0x0e
    7d50:	8b 81       	ldd	r24, Y+3	; 0x03
    7d52:	83 70       	andi	r24, 0x03	; 3
    7d54:	8f 87       	std	Y+15, r24	; 0x0f
    7d56:	8a 81       	ldd	r24, Y+2	; 0x02
    7d58:	88 8b       	std	Y+16, r24	; 0x10
    7d5a:	89 81       	ldd	r24, Y+1	; 0x01
    7d5c:	89 8b       	std	Y+17, r24	; 0x11
    7d5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    7d60:	8f 81       	ldd	r24, Y+7	; 0x07
    7d62:	8f 70       	andi	r24, 0x0F	; 15
    7d64:	20 e1       	ldi	r18, 0x10	; 16
    7d66:	92 9f       	mul	r25, r18
    7d68:	80 0d       	add	r24, r0
    7d6a:	11 24       	eor	r1, r1
    7d6c:	8a 8b       	std	Y+18, r24	; 0x12
    7d6e:	8e 81       	ldd	r24, Y+6	; 0x06
    7d70:	8b 8b       	std	Y+19, r24	; 0x13
    7d72:	8d 81       	ldd	r24, Y+5	; 0x05
    7d74:	8c 8b       	std	Y+20, r24	; 0x14
    7d76:	11 30       	cpi	r17, 0x01	; 1
    7d78:	41 f4       	brne	.+16     	; 0x7d8a <_Z7set_pllm10si5351_pll+0x62>
    7d7a:	48 e0       	ldi	r20, 0x08	; 8
    7d7c:	be 01       	movw	r22, r28
    7d7e:	63 5f       	subi	r22, 0xF3	; 243
    7d80:	7f 4f       	sbci	r23, 0xFF	; 255
    7d82:	8a e1       	ldi	r24, 0x1A	; 26
    7d84:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    7d88:	07 c0       	rjmp	.+14     	; 0x7d98 <_Z7set_pllm10si5351_pll+0x70>
    7d8a:	48 e0       	ldi	r20, 0x08	; 8
    7d8c:	be 01       	movw	r22, r28
    7d8e:	63 5f       	subi	r22, 0xF3	; 243
    7d90:	7f 4f       	sbci	r23, 0xFF	; 255
    7d92:	82 e2       	ldi	r24, 0x22	; 34
    7d94:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    7d98:	66 96       	adiw	r28, 0x16	; 22
    7d9a:	cd bf       	out	0x3d, r28	; 61
    7d9c:	de bf       	out	0x3e, r29	; 62
    7d9e:	df 91       	pop	r29
    7da0:	cf 91       	pop	r28
    7da2:	1f 91       	pop	r17
    7da4:	08 95       	ret

00007da6 <_Z16si5351_read_bulkhPhh>:
		while(tries-- && (fail = I2C_1_SendData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
		return(fail);
	}

	bool si5351_read_bulk(uint8_t regAddr, uint8_t *data, uint8_t bytes)
	{
    7da6:	ff 92       	push	r15
    7da8:	0f 93       	push	r16
    7daa:	1f 93       	push	r17
    7dac:	cf 93       	push	r28
    7dae:	df 93       	push	r29
    7db0:	f8 2e       	mov	r15, r24
    7db2:	8b 01       	movw	r16, r22
    7db4:	d4 2f       	mov	r29, r20
		uint8_t tries = 10;
    7db6:	8a e0       	ldi	r24, 0x0A	; 10
		bool fail;
		while(tries-- && (fail = I2C_1_GetData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes));
    7db8:	cf ef       	ldi	r28, 0xFF	; 255
    7dba:	c8 0f       	add	r28, r24
    7dbc:	88 23       	and	r24, r24
    7dbe:	71 f0       	breq	.+28     	; 0x7ddc <_Z16si5351_read_bulkhPhh+0x36>
    7dc0:	2d 2f       	mov	r18, r29
    7dc2:	a8 01       	movw	r20, r16
    7dc4:	6f 2d       	mov	r22, r15
    7dc6:	80 ec       	ldi	r24, 0xC0	; 192
    7dc8:	0e 94 cb 34 	call	0x6996	; 0x6996 <I2C_1_GetData>
    7dcc:	21 e0       	ldi	r18, 0x01	; 1
    7dce:	d8 13       	cpse	r29, r24
    7dd0:	01 c0       	rjmp	.+2      	; 0x7dd4 <_Z16si5351_read_bulkhPhh+0x2e>
    7dd2:	20 e0       	ldi	r18, 0x00	; 0
    7dd4:	d8 17       	cp	r29, r24
    7dd6:	21 f0       	breq	.+8      	; 0x7de0 <_Z16si5351_read_bulkhPhh+0x3a>
    7dd8:	91 e0       	ldi	r25, 0x01	; 1
    7dda:	03 c0       	rjmp	.+6      	; 0x7de2 <_Z16si5351_read_bulkhPhh+0x3c>
    7ddc:	90 e0       	ldi	r25, 0x00	; 0
    7dde:	01 c0       	rjmp	.+2      	; 0x7de2 <_Z16si5351_read_bulkhPhh+0x3c>
    7de0:	90 e0       	ldi	r25, 0x00	; 0
    7de2:	8c 2f       	mov	r24, r28
    7de4:	91 11       	cpse	r25, r1
    7de6:	e8 cf       	rjmp	.-48     	; 0x7db8 <_Z16si5351_read_bulkhPhh+0x12>
		return(fail);
	}
    7de8:	82 2f       	mov	r24, r18
    7dea:	df 91       	pop	r29
    7dec:	cf 91       	pop	r28
    7dee:	1f 91       	pop	r17
    7df0:	0f 91       	pop	r16
    7df2:	ff 90       	pop	r15
    7df4:	08 95       	ret

00007df6 <si5351_init>:
 * xtal_load_c - Crystal load capacitance.
 * ref_osc_freq - Crystal/reference oscillator frequency (Hz).
 *
 */
	bool si5351_init(Si5351_Xtal_load_pF xtal_load_c, Frequency_Hz ref_osc_freq)
	{
    7df6:	cf 92       	push	r12
    7df8:	df 92       	push	r13
    7dfa:	ef 92       	push	r14
    7dfc:	ff 92       	push	r15
    7dfe:	1f 93       	push	r17
    7e00:	cf 93       	push	r28
    7e02:	df 93       	push	r29
    7e04:	00 d0       	rcall	.+0      	; 0x7e06 <si5351_init+0x10>
    7e06:	cd b7       	in	r28, 0x3d	; 61
    7e08:	de b7       	in	r29, 0x3e	; 62
    7e0a:	18 2f       	mov	r17, r24
    7e0c:	6a 01       	movw	r12, r20
    7e0e:	7b 01       	movw	r14, r22
//		static bool err = false;
		uint8_t data[2];
		
#ifndef DEBUG_WITHOUT_I2C
			/* Start I2C comms */
			I2C_1_Init();
    7e10:	0e 94 71 34 	call	0x68e2	; 0x68e2 <I2C_1_Init>
			uint8_t result_val = 0x00;
			bool result = false;
#endif
		uint8_t reg_val;

		freqVCOB = 0;
    7e14:	10 92 18 49 	sts	0x4918, r1	; 0x804918 <_ZL8freqVCOB>
    7e18:	10 92 19 49 	sts	0x4919, r1	; 0x804919 <_ZL8freqVCOB+0x1>
    7e1c:	10 92 1a 49 	sts	0x491A, r1	; 0x80491a <_ZL8freqVCOB+0x2>
    7e20:	10 92 1b 49 	sts	0x491B, r1	; 0x80491b <_ZL8freqVCOB+0x3>
		xtal_freq = SI5351_XTAL_FREQ;
    7e24:	80 e4       	ldi	r24, 0x40	; 64
    7e26:	98 e7       	ldi	r25, 0x78	; 120
    7e28:	ad e7       	ldi	r26, 0x7D	; 125
    7e2a:	b1 e0       	ldi	r27, 0x01	; 1
    7e2c:	80 93 28 40 	sts	0x4028, r24	; 0x804028 <_ZL9xtal_freq>
    7e30:	90 93 29 40 	sts	0x4029, r25	; 0x804029 <_ZL9xtal_freq+0x1>
    7e34:	a0 93 2a 40 	sts	0x402A, r26	; 0x80402a <_ZL9xtal_freq+0x2>
    7e38:	b0 93 2b 40 	sts	0x402B, r27	; 0x80402b <_ZL9xtal_freq+0x3>
		enabledClocksMask = 0x00;
    7e3c:	10 92 17 49 	sts	0x4917, r1	; 0x804917 <_ZL17enabledClocksMask>

		/* Disable Outputs */
		/* Set CLKx_DIS high; Reg. 3 = 0xFF */
		data[0] = 0xFF;
    7e40:	8f ef       	ldi	r24, 0xFF	; 255
    7e42:	89 83       	std	Y+1, r24	; 0x01
		err = si5351_write_bulk(0x03, data, 1);
    7e44:	41 e0       	ldi	r20, 0x01	; 1
    7e46:	be 01       	movw	r22, r28
    7e48:	6f 5f       	subi	r22, 0xFF	; 255
    7e4a:	7f 4f       	sbci	r23, 0xFF	; 255
    7e4c:	83 e0       	ldi	r24, 0x03	; 3
    7e4e:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    7e52:	80 93 09 49 	sts	0x4909, r24	; 0x804909 <err>
		
		if(err) return err;
    7e56:	81 11       	cpse	r24, r1
    7e58:	76 c0       	rjmp	.+236    	; 0x7f46 <si5351_init+0x150>
		/* Power down clocks */
		data[0] = 0xCC;
    7e5a:	8c ec       	ldi	r24, 0xCC	; 204
    7e5c:	89 83       	std	Y+1, r24	; 0x01
		err |= si5351_write_bulk(0x10, data, 1);
    7e5e:	41 e0       	ldi	r20, 0x01	; 1
    7e60:	be 01       	movw	r22, r28
    7e62:	6f 5f       	subi	r22, 0xFF	; 255
    7e64:	7f 4f       	sbci	r23, 0xFF	; 255
    7e66:	80 e1       	ldi	r24, 0x10	; 16
    7e68:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    7e6c:	90 91 09 49 	lds	r25, 0x4909	; 0x804909 <err>
    7e70:	89 2b       	or	r24, r25
    7e72:	80 93 09 49 	sts	0x4909, r24	; 0x804909 <err>
		err |= si5351_write_bulk(0x11, data, 1);
    7e76:	41 e0       	ldi	r20, 0x01	; 1
    7e78:	be 01       	movw	r22, r28
    7e7a:	6f 5f       	subi	r22, 0xFF	; 255
    7e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    7e7e:	81 e1       	ldi	r24, 0x11	; 17
    7e80:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    7e84:	90 91 09 49 	lds	r25, 0x4909	; 0x804909 <err>
    7e88:	89 2b       	or	r24, r25
    7e8a:	80 93 09 49 	sts	0x4909, r24	; 0x804909 <err>
		err |= si5351_write_bulk(0x12, data, 1);
    7e8e:	41 e0       	ldi	r20, 0x01	; 1
    7e90:	be 01       	movw	r22, r28
    7e92:	6f 5f       	subi	r22, 0xFF	; 255
    7e94:	7f 4f       	sbci	r23, 0xFF	; 255
    7e96:	82 e1       	ldi	r24, 0x12	; 18
    7e98:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    7e9c:	90 91 09 49 	lds	r25, 0x4909	; 0x804909 <err>
    7ea0:	89 2b       	or	r24, r25
    7ea2:	80 93 09 49 	sts	0x4909, r24	; 0x804909 <err>

		/* Set crystal load capacitance */
		reg_val = 0x12; /* 0b010010 reserved value bits */
		reg_val |= xtal_load_c;
    7ea6:	12 61       	ori	r17, 0x12	; 18

		data[0] = reg_val;
    7ea8:	19 83       	std	Y+1, r17	; 0x01
		err |= si5351_write_bulk(SI5351_CRYSTAL_LOAD, data, 1);
    7eaa:	41 e0       	ldi	r20, 0x01	; 1
    7eac:	be 01       	movw	r22, r28
    7eae:	6f 5f       	subi	r22, 0xFF	; 255
    7eb0:	7f 4f       	sbci	r23, 0xFF	; 255
    7eb2:	87 eb       	ldi	r24, 0xB7	; 183
    7eb4:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    7eb8:	90 91 09 49 	lds	r25, 0x4909	; 0x804909 <err>
    7ebc:	89 2b       	or	r24, r25
    7ebe:	80 93 09 49 	sts	0x4909, r24	; 0x804909 <err>

		if(!ref_osc_freq)
    7ec2:	c1 14       	cp	r12, r1
    7ec4:	d1 04       	cpc	r13, r1
    7ec6:	e1 04       	cpc	r14, r1
    7ec8:	f1 04       	cpc	r15, r1
    7eca:	51 f4       	brne	.+20     	; 0x7ee0 <si5351_init+0xea>
		{
			ref_osc_freq = SI5351_XTAL_FREQ;
    7ecc:	0f 2e       	mov	r0, r31
    7ece:	f0 e4       	ldi	r31, 0x40	; 64
    7ed0:	cf 2e       	mov	r12, r31
    7ed2:	f8 e7       	ldi	r31, 0x78	; 120
    7ed4:	df 2e       	mov	r13, r31
    7ed6:	fd e7       	ldi	r31, 0x7D	; 125
    7ed8:	ef 2e       	mov	r14, r31
    7eda:	ff 24       	eor	r15, r15
    7edc:	f3 94       	inc	r15
    7ede:	f0 2d       	mov	r31, r0
		}

		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
    7ee0:	80 91 28 40 	lds	r24, 0x4028	; 0x804028 <_ZL9xtal_freq>
    7ee4:	90 91 29 40 	lds	r25, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    7ee8:	a0 91 2a 40 	lds	r26, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    7eec:	b0 91 2b 40 	lds	r27, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    7ef0:	c8 16       	cp	r12, r24
    7ef2:	d9 06       	cpc	r13, r25
    7ef4:	ea 06       	cpc	r14, r26
    7ef6:	fb 06       	cpc	r15, r27
    7ef8:	01 f1       	breq	.+64     	; 0x7f3a <si5351_init+0x144>
		{
			if(si5351_read_bulk(SI5351_PLL_INPUT_SOURCE, data, 1))
    7efa:	41 e0       	ldi	r20, 0x01	; 1
    7efc:	be 01       	movw	r22, r28
    7efe:	6f 5f       	subi	r22, 0xFF	; 255
    7f00:	7f 4f       	sbci	r23, 0xFF	; 255
    7f02:	8f e0       	ldi	r24, 0x0F	; 15
    7f04:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <_Z16si5351_read_bulkhPhh>
    7f08:	81 11       	cpse	r24, r1
    7f0a:	1d c0       	rjmp	.+58     	; 0x7f46 <si5351_init+0x150>
			{
				return true;
			}
			
			reg_val = data[0];
    7f0c:	89 81       	ldd	r24, Y+1	; 0x01

			/* Clear the bits first */
			reg_val &= ~(SI5351_CLKIN_DIV_MASK);
    7f0e:	8f 73       	andi	r24, 0x3F	; 63

			xtal_freq = ref_osc_freq;
    7f10:	c0 92 28 40 	sts	0x4028, r12	; 0x804028 <_ZL9xtal_freq>
    7f14:	d0 92 29 40 	sts	0x4029, r13	; 0x804029 <_ZL9xtal_freq+0x1>
    7f18:	e0 92 2a 40 	sts	0x402A, r14	; 0x80402a <_ZL9xtal_freq+0x2>
    7f1c:	f0 92 2b 40 	sts	0x402B, r15	; 0x80402b <_ZL9xtal_freq+0x3>
					reg_val |= SI5351_CLKIN_DIV_4;
				}

#endif  /* #ifndef DIVIDE_XTAL_FREQ_IF_NEEDED */

			data[0] = reg_val;
    7f20:	89 83       	std	Y+1, r24	; 0x01
			err |= si5351_write_bulk(SI5351_PLL_INPUT_SOURCE, data, 1);
    7f22:	41 e0       	ldi	r20, 0x01	; 1
    7f24:	be 01       	movw	r22, r28
    7f26:	6f 5f       	subi	r22, 0xFF	; 255
    7f28:	7f 4f       	sbci	r23, 0xFF	; 255
    7f2a:	8f e0       	ldi	r24, 0x0F	; 15
    7f2c:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    7f30:	90 91 09 49 	lds	r25, 0x4909	; 0x804909 <err>
    7f34:	89 2b       	or	r24, r25
    7f36:	80 93 09 49 	sts	0x4909, r24	; 0x804909 <err>
		}
		
		g_si5351_initialized = !err;
    7f3a:	80 91 09 49 	lds	r24, 0x4909	; 0x804909 <err>
    7f3e:	91 e0       	ldi	r25, 0x01	; 1
    7f40:	98 27       	eor	r25, r24
    7f42:	90 93 0a 49 	sts	0x490A, r25	; 0x80490a <g_si5351_initialized>

		return err;
	}
    7f46:	0f 90       	pop	r0
    7f48:	0f 90       	pop	r0
    7f4a:	df 91       	pop	r29
    7f4c:	cf 91       	pop	r28
    7f4e:	1f 91       	pop	r17
    7f50:	ff 90       	pop	r15
    7f52:	ef 90       	pop	r14
    7f54:	df 90       	pop	r13
    7f56:	cf 90       	pop	r12
    7f58:	08 95       	ret

00007f5a <si5351_clock_enable>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	EC si5351_clock_enable(Si5351_clock clk, bool enable)
	{
    7f5a:	0f 93       	push	r16
    7f5c:	1f 93       	push	r17
    7f5e:	cf 93       	push	r28
    7f60:	df 93       	push	r29
    7f62:	00 d0       	rcall	.+0      	; 0x7f64 <si5351_clock_enable+0xa>
    7f64:	cd b7       	in	r28, 0x3d	; 61
    7f66:	de b7       	in	r29, 0x3e	; 62
    7f68:	18 2f       	mov	r17, r24
    7f6a:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
    7f6c:	41 e0       	ldi	r20, 0x01	; 1
    7f6e:	be 01       	movw	r22, r28
    7f70:	6f 5f       	subi	r22, 0xFF	; 255
    7f72:	7f 4f       	sbci	r23, 0xFF	; 255
    7f74:	83 e0       	ldi	r24, 0x03	; 3
    7f76:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <_Z16si5351_read_bulkhPhh>
    7f7a:	81 11       	cpse	r24, r1
    7f7c:	23 c0       	rjmp	.+70     	; 0x7fc4 <si5351_clock_enable+0x6a>
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    7f7e:	99 81       	ldd	r25, Y+1	; 0x01

		if(enable)
    7f80:	00 23       	and	r16, r16
    7f82:	59 f0       	breq	.+22     	; 0x7f9a <si5351_clock_enable+0x40>
		{
			reg_val &= ~(1 << (uint8_t)clk);
    7f84:	21 e0       	ldi	r18, 0x01	; 1
    7f86:	30 e0       	ldi	r19, 0x00	; 0
    7f88:	02 c0       	rjmp	.+4      	; 0x7f8e <si5351_clock_enable+0x34>
    7f8a:	22 0f       	add	r18, r18
    7f8c:	33 1f       	adc	r19, r19
    7f8e:	1a 95       	dec	r17
    7f90:	e2 f7       	brpl	.-8      	; 0x7f8a <si5351_clock_enable+0x30>
    7f92:	82 2f       	mov	r24, r18
    7f94:	80 95       	com	r24
    7f96:	89 23       	and	r24, r25
    7f98:	09 c0       	rjmp	.+18     	; 0x7fac <si5351_clock_enable+0x52>
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    7f9a:	21 e0       	ldi	r18, 0x01	; 1
    7f9c:	30 e0       	ldi	r19, 0x00	; 0
    7f9e:	02 c0       	rjmp	.+4      	; 0x7fa4 <si5351_clock_enable+0x4a>
    7fa0:	22 0f       	add	r18, r18
    7fa2:	33 1f       	adc	r19, r19
    7fa4:	1a 95       	dec	r17
    7fa6:	e2 f7       	brpl	.-8      	; 0x7fa0 <si5351_clock_enable+0x46>
    7fa8:	89 2f       	mov	r24, r25
    7faa:	82 2b       	or	r24, r18
		}

		data[0] = reg_val;
    7fac:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;
    7fae:	41 e0       	ldi	r20, 0x01	; 1
    7fb0:	be 01       	movw	r22, r28
    7fb2:	6f 5f       	subi	r22, 0xFF	; 255
    7fb4:	7f 4f       	sbci	r23, 0xFF	; 255
    7fb6:	83 e0       	ldi	r24, 0x03	; 3
    7fb8:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    7fbc:	88 23       	and	r24, r24
    7fbe:	21 f0       	breq	.+8      	; 0x7fc8 <si5351_clock_enable+0x6e>
    7fc0:	8c ef       	ldi	r24, 0xFC	; 252
    7fc2:	03 c0       	rjmp	.+6      	; 0x7fca <si5351_clock_enable+0x70>
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
    7fc4:	8c ef       	ldi	r24, 0xFC	; 252
    7fc6:	01 c0       	rjmp	.+2      	; 0x7fca <si5351_clock_enable+0x70>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    7fc8:	80 e0       	ldi	r24, 0x00	; 0
	}
    7fca:	0f 90       	pop	r0
    7fcc:	0f 90       	pop	r0
    7fce:	df 91       	pop	r29
    7fd0:	cf 91       	pop	r28
    7fd2:	1f 91       	pop	r17
    7fd4:	0f 91       	pop	r16
    7fd6:	08 95       	ret

00007fd8 <si5351_drive_strength>:
 * clk - Clock output
 * drive - Desired drive level
 *
 */
	EC si5351_drive_strength(Si5351_clock clk, Si5351_drive drive)
	{
    7fd8:	0f 93       	push	r16
    7fda:	1f 93       	push	r17
    7fdc:	cf 93       	push	r28
    7fde:	df 93       	push	r29
    7fe0:	00 d0       	rcall	.+0      	; 0x7fe2 <si5351_drive_strength+0xa>
    7fe2:	cd b7       	in	r28, 0x3d	; 61
    7fe4:	de b7       	in	r29, 0x3e	; 62
    7fe6:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    7fe8:	10 e1       	ldi	r17, 0x10	; 16
    7fea:	18 0f       	add	r17, r24
    7fec:	41 e0       	ldi	r20, 0x01	; 1
    7fee:	be 01       	movw	r22, r28
    7ff0:	6f 5f       	subi	r22, 0xFF	; 255
    7ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    7ff4:	81 2f       	mov	r24, r17
    7ff6:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <_Z16si5351_read_bulkhPhh>
    7ffa:	81 11       	cpse	r24, r1
    7ffc:	1e c0       	rjmp	.+60     	; 0x803a <__RODATA_PM_OFFSET__+0x3a>
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    7ffe:	89 81       	ldd	r24, Y+1	; 0x01

		switch(drive)
    8000:	01 30       	cpi	r16, 0x01	; 1
    8002:	41 f0       	breq	.+16     	; 0x8014 <__RODATA_PM_OFFSET__+0x14>
    8004:	28 f0       	brcs	.+10     	; 0x8010 <__RODATA_PM_OFFSET__+0x10>
    8006:	02 30       	cpi	r16, 0x02	; 2
    8008:	41 f0       	breq	.+16     	; 0x801a <__RODATA_PM_OFFSET__+0x1a>
    800a:	03 30       	cpi	r16, 0x03	; 3
    800c:	49 f0       	breq	.+18     	; 0x8020 <__RODATA_PM_OFFSET__+0x20>
    800e:	09 c0       	rjmp	.+18     	; 0x8022 <__RODATA_PM_OFFSET__+0x22>
		{
			case SI5351_DRIVE_2MA:
			{
				reg_val &= ~(mask);
    8010:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x00;
			}
			break;
    8012:	07 c0       	rjmp	.+14     	; 0x8022 <__RODATA_PM_OFFSET__+0x22>

			case SI5351_DRIVE_4MA:
			{
				reg_val &= ~(mask);
    8014:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x01;
    8016:	81 60       	ori	r24, 0x01	; 1
			}
			break;
    8018:	04 c0       	rjmp	.+8      	; 0x8022 <__RODATA_PM_OFFSET__+0x22>

			case SI5351_DRIVE_6MA:
			{
				reg_val &= ~(mask);
    801a:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x02;
    801c:	82 60       	ori	r24, 0x02	; 2
			}
			break;
    801e:	01 c0       	rjmp	.+2      	; 0x8022 <__RODATA_PM_OFFSET__+0x22>

			case SI5351_DRIVE_8MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x03;
    8020:	83 60       	ori	r24, 0x03	; 3
			{
			}
			break;
		}

		data[0] = reg_val;
    8022:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    8024:	41 e0       	ldi	r20, 0x01	; 1
    8026:	be 01       	movw	r22, r28
    8028:	6f 5f       	subi	r22, 0xFF	; 255
    802a:	7f 4f       	sbci	r23, 0xFF	; 255
    802c:	81 2f       	mov	r24, r17
    802e:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    8032:	88 23       	and	r24, r24
    8034:	21 f0       	breq	.+8      	; 0x803e <__RODATA_PM_OFFSET__+0x3e>
    8036:	8b ef       	ldi	r24, 0xFB	; 251
    8038:	03 c0       	rjmp	.+6      	; 0x8040 <__RODATA_PM_OFFSET__+0x40>
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    803a:	8b ef       	ldi	r24, 0xFB	; 251
    803c:	01 c0       	rjmp	.+2      	; 0x8040 <__RODATA_PM_OFFSET__+0x40>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    803e:	80 e0       	ldi	r24, 0x00	; 0
	}
    8040:	0f 90       	pop	r0
    8042:	0f 90       	pop	r0
    8044:	df 91       	pop	r29
    8046:	cf 91       	pop	r28
    8048:	1f 91       	pop	r17
    804a:	0f 91       	pop	r16
    804c:	08 95       	ret

0000804e <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>:
 *
 * Set the desired PLL source for a multisynth.
 *
 */
	bool set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
	{
    804e:	0f 93       	push	r16
    8050:	1f 93       	push	r17
    8052:	cf 93       	push	r28
    8054:	df 93       	push	r29
    8056:	00 d0       	rcall	.+0      	; 0x8058 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0xa>
    8058:	cd b7       	in	r28, 0x3d	; 61
    805a:	de b7       	in	r29, 0x3e	; 62
    805c:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    805e:	10 e1       	ldi	r17, 0x10	; 16
    8060:	18 0f       	add	r17, r24
    8062:	41 e0       	ldi	r20, 0x01	; 1
    8064:	be 01       	movw	r22, r28
    8066:	6f 5f       	subi	r22, 0xFF	; 255
    8068:	7f 4f       	sbci	r23, 0xFF	; 255
    806a:	81 2f       	mov	r24, r17
    806c:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <_Z16si5351_read_bulkhPhh>
    8070:	81 11       	cpse	r24, r1
    8072:	10 c0       	rjmp	.+32     	; 0x8094 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x46>
		{
			return(true);
		}
		
		reg_val = data[0];
    8074:	89 81       	ldd	r24, Y+1	; 0x01

		if(pll == SI5351_PLLA)
    8076:	01 30       	cpi	r16, 0x01	; 1
    8078:	11 f4       	brne	.+4      	; 0x807e <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x30>
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
    807a:	8f 7d       	andi	r24, 0xDF	; 223
    807c:	03 c0       	rjmp	.+6      	; 0x8084 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		}
		else if(pll == SI5351_PLLB)
    807e:	02 30       	cpi	r16, 0x02	; 2
    8080:	09 f4       	brne	.+2      	; 0x8084 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
    8082:	80 62       	ori	r24, 0x20	; 32
		}

		data[0] = reg_val;
    8084:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    8086:	41 e0       	ldi	r20, 0x01	; 1
    8088:	be 01       	movw	r22, r28
    808a:	6f 5f       	subi	r22, 0xFF	; 255
    808c:	7f 4f       	sbci	r23, 0xFF	; 255
    808e:	81 2f       	mov	r24, r17
    8090:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
		{
			return(true);
		}
		
		return(false);
	}
    8094:	0f 90       	pop	r0
    8096:	0f 90       	pop	r0
    8098:	df 91       	pop	r29
    809a:	cf 91       	pop	r28
    809c:	1f 91       	pop	r17
    809e:	0f 91       	pop	r16
    80a0:	08 95       	ret

000080a2 <_Z16set_integer_mode12si5351_clockb>:
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
	bool set_integer_mode(Si5351_clock clk, bool enable)
	{
    80a2:	0f 93       	push	r16
    80a4:	1f 93       	push	r17
    80a6:	cf 93       	push	r28
    80a8:	df 93       	push	r29
    80aa:	00 d0       	rcall	.+0      	; 0x80ac <_Z16set_integer_mode12si5351_clockb+0xa>
    80ac:	cd b7       	in	r28, 0x3d	; 61
    80ae:	de b7       	in	r29, 0x3e	; 62
    80b0:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    80b2:	10 e1       	ldi	r17, 0x10	; 16
    80b4:	18 0f       	add	r17, r24
    80b6:	41 e0       	ldi	r20, 0x01	; 1
    80b8:	be 01       	movw	r22, r28
    80ba:	6f 5f       	subi	r22, 0xFF	; 255
    80bc:	7f 4f       	sbci	r23, 0xFF	; 255
    80be:	81 2f       	mov	r24, r17
    80c0:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <_Z16si5351_read_bulkhPhh>
    80c4:	81 11       	cpse	r24, r1
    80c6:	0e c0       	rjmp	.+28     	; 0x80e4 <_Z16set_integer_mode12si5351_clockb+0x42>
		{
			return(true);
		}
		
		reg_val = data[0];
    80c8:	89 81       	ldd	r24, Y+1	; 0x01

		if(enable)
    80ca:	00 23       	and	r16, r16
    80cc:	11 f0       	breq	.+4      	; 0x80d2 <_Z16set_integer_mode12si5351_clockb+0x30>
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
    80ce:	80 64       	ori	r24, 0x40	; 64
    80d0:	01 c0       	rjmp	.+2      	; 0x80d4 <_Z16set_integer_mode12si5351_clockb+0x32>
		}
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
    80d2:	8f 7b       	andi	r24, 0xBF	; 191
		}

		data[0] = reg_val;
    80d4:	89 83       	std	Y+1, r24	; 0x01
		return(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1));
    80d6:	41 e0       	ldi	r20, 0x01	; 1
    80d8:	be 01       	movw	r22, r28
    80da:	6f 5f       	subi	r22, 0xFF	; 255
    80dc:	7f 4f       	sbci	r23, 0xFF	; 255
    80de:	81 2f       	mov	r24, r17
    80e0:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
	}
    80e4:	0f 90       	pop	r0
    80e6:	0f 90       	pop	r0
    80e8:	df 91       	pop	r29
    80ea:	cf 91       	pop	r28
    80ec:	1f 91       	pop	r17
    80ee:	0f 91       	pop	r16
    80f0:	08 95       	ret

000080f2 <_Z6ms_div12si5351_clockhb>:


	bool ms_div(Si5351_clock clk, uint8_t r_div, bool div_by_4)
	{
    80f2:	ff 92       	push	r15
    80f4:	0f 93       	push	r16
    80f6:	1f 93       	push	r17
    80f8:	cf 93       	push	r28
    80fa:	df 93       	push	r29
    80fc:	00 d0       	rcall	.+0      	; 0x80fe <_Z6ms_div12si5351_clockhb+0xc>
    80fe:	cd b7       	in	r28, 0x3d	; 61
    8100:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val, reg_addr;
		uint8_t data[2];

		switch(clk)
    8102:	81 30       	cpi	r24, 0x01	; 1
    8104:	71 f0       	breq	.+28     	; 0x8122 <_Z6ms_div12si5351_clockhb+0x30>
    8106:	18 f0       	brcs	.+6      	; 0x810e <_Z6ms_div12si5351_clockhb+0x1c>
    8108:	82 30       	cpi	r24, 0x02	; 2
    810a:	31 f0       	breq	.+12     	; 0x8118 <_Z6ms_div12si5351_clockhb+0x26>
    810c:	2c c0       	rjmp	.+88     	; 0x8166 <_Z6ms_div12si5351_clockhb+0x74>
		{
			case SI5351_CLK0:
			{
				reg_addr = SI5351_CLK0_PARAMETERS + 2;
    810e:	0f 2e       	mov	r0, r31
    8110:	fc e2       	ldi	r31, 0x2C	; 44
    8112:	ff 2e       	mov	r15, r31
    8114:	f0 2d       	mov	r31, r0
    8116:	09 c0       	rjmp	.+18     	; 0x812a <_Z6ms_div12si5351_clockhb+0x38>
			}
			break;

			case SI5351_CLK2:
			{
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
    8118:	0f 2e       	mov	r0, r31
    811a:	fc e3       	ldi	r31, 0x3C	; 60
    811c:	ff 2e       	mov	r15, r31
    811e:	f0 2d       	mov	r31, r0
			}
			break;
    8120:	04 c0       	rjmp	.+8      	; 0x812a <_Z6ms_div12si5351_clockhb+0x38>
			}
			break;

			case SI5351_CLK1:
			{
				reg_addr = SI5351_CLK1_PARAMETERS + 2;
    8122:	0f 2e       	mov	r0, r31
    8124:	f4 e3       	ldi	r31, 0x34	; 52
    8126:	ff 2e       	mov	r15, r31
    8128:	f0 2d       	mov	r31, r0
    812a:	04 2f       	mov	r16, r20
    812c:	16 2f       	mov	r17, r22

			default:
				return(true);
		}

		if(si5351_read_bulk(reg_addr, data, 1))
    812e:	41 e0       	ldi	r20, 0x01	; 1
    8130:	be 01       	movw	r22, r28
    8132:	6f 5f       	subi	r22, 0xFF	; 255
    8134:	7f 4f       	sbci	r23, 0xFF	; 255
    8136:	8f 2d       	mov	r24, r15
    8138:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <_Z16si5351_read_bulkhPhh>
    813c:	81 11       	cpse	r24, r1
    813e:	14 c0       	rjmp	.+40     	; 0x8168 <_Z6ms_div12si5351_clockhb+0x76>
		{
			return(true);
		}
		
		reg_val = data[0];
    8140:	69 81       	ldd	r22, Y+1	; 0x01

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    8142:	86 2f       	mov	r24, r22
    8144:	83 78       	andi	r24, 0x83	; 131

		if(div_by_4)
    8146:	01 11       	cpse	r16, r1
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
    8148:	8c 60       	ori	r24, 0x0C	; 12
		else
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
    814a:	90 e1       	ldi	r25, 0x10	; 16
    814c:	19 9f       	mul	r17, r25
    814e:	b0 01       	movw	r22, r0
    8150:	11 24       	eor	r1, r1
    8152:	68 2b       	or	r22, r24

		data[0] = reg_val;
    8154:	69 83       	std	Y+1, r22	; 0x01
		return(si5351_write_bulk(reg_addr, data, 1));
    8156:	41 e0       	ldi	r20, 0x01	; 1
    8158:	be 01       	movw	r22, r28
    815a:	6f 5f       	subi	r22, 0xFF	; 255
    815c:	7f 4f       	sbci	r23, 0xFF	; 255
    815e:	8f 2d       	mov	r24, r15
    8160:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    8164:	01 c0       	rjmp	.+2      	; 0x8168 <_Z6ms_div12si5351_clockhb+0x76>
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
			}
			break;

			default:
				return(true);
    8166:	81 e0       	ldi	r24, 0x01	; 1

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);

		data[0] = reg_val;
		return(si5351_write_bulk(reg_addr, data, 1));
	}
    8168:	0f 90       	pop	r0
    816a:	0f 90       	pop	r0
    816c:	df 91       	pop	r29
    816e:	cf 91       	pop	r28
    8170:	1f 91       	pop	r17
    8172:	0f 91       	pop	r16
    8174:	ff 90       	pop	r15
    8176:	08 95       	ret

00008178 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>:
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
	bool set_multisynth_registers(Si5351_clock clk, Union_si5351_regs ms_reg, bool int_mode, uint8_t r_div, bool div_by_4)
	{
    8178:	8f 92       	push	r8
    817a:	af 92       	push	r10
    817c:	cf 92       	push	r12
    817e:	df 92       	push	r13
    8180:	ef 92       	push	r14
    8182:	ff 92       	push	r15
    8184:	0f 93       	push	r16
    8186:	1f 93       	push	r17
    8188:	cf 93       	push	r28
    818a:	df 93       	push	r29
    818c:	cd b7       	in	r28, 0x3d	; 61
    818e:	de b7       	in	r29, 0x3e	; 62
    8190:	69 97       	sbiw	r28, 0x19	; 25
    8192:	cd bf       	out	0x3d, r28	; 61
    8194:	de bf       	out	0x3e, r29	; 62
    8196:	f8 2e       	mov	r15, r24
    8198:	ce 86       	std	Y+14, r12	; 0x0e
    819a:	df 86       	std	Y+15, r13	; 0x0f
    819c:	e8 8a       	std	Y+16, r14	; 0x10
    819e:	0a 8b       	std	Y+18, r16	; 0x12
    81a0:	1b 8b       	std	Y+19, r17	; 0x13
    81a2:	2c 8b       	std	Y+20, r18	; 0x14
    81a4:	68 8f       	std	Y+24, r22	; 0x18
		uint8_t i = 0;
		uint8_t reg_val;
		uint8_t data[2];

		/* Registers 42-43 for CLK0; 50-51 for CLK1 */
		params[i++] = ms_reg.reg.p3_1;
    81a6:	59 83       	std	Y+1, r21	; 0x01
		params[i++] = ms_reg.reg.p3_0;
    81a8:	4a 83       	std	Y+2, r20	; 0x02

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read_bulk((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), data, 1))
    81aa:	88 0f       	add	r24, r24
    81ac:	88 0f       	add	r24, r24
    81ae:	88 0f       	add	r24, r24
    81b0:	41 e0       	ldi	r20, 0x01	; 1
    81b2:	be 01       	movw	r22, r28
    81b4:	64 5f       	subi	r22, 0xF4	; 244
    81b6:	7f 4f       	sbci	r23, 0xFF	; 255
    81b8:	84 5d       	subi	r24, 0xD4	; 212
    81ba:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <_Z16si5351_read_bulkhPhh>
    81be:	81 11       	cpse	r24, r1
    81c0:	48 c0       	rjmp	.+144    	; 0x8252 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
		{
			return(true);
		}
		
		reg_val = data[0];
    81c2:	8c 85       	ldd	r24, Y+12	; 0x0c

		reg_val &= 0xFC;    /*~(0x03); */
    81c4:	98 2f       	mov	r25, r24
    81c6:	9c 7f       	andi	r25, 0xFC	; 252
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    81c8:	88 89       	ldd	r24, Y+16	; 0x10
    81ca:	83 70       	andi	r24, 0x03	; 3
    81cc:	89 2b       	or	r24, r25
    81ce:	8b 83       	std	Y+3, r24	; 0x03

		/* Registers 45-46 for CLK0 */
		params[i++] = ms_reg.reg.p1_1;
    81d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    81d2:	8c 83       	std	Y+4, r24	; 0x04
		params[i++] = ms_reg.reg.p1_0;
    81d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    81d6:	8d 83       	std	Y+5, r24	; 0x05

		/* Register 47 for CLK0 */
		params[i] = (ms_reg.reg.p3_2 << 4);
    81d8:	98 8d       	ldd	r25, Y+24	; 0x18
		params[i++] += (ms_reg.reg.p2_2 & 0x0F);
    81da:	8c 89       	ldd	r24, Y+20	; 0x14
    81dc:	8f 70       	andi	r24, 0x0F	; 15
    81de:	20 e1       	ldi	r18, 0x10	; 16
    81e0:	92 9f       	mul	r25, r18
    81e2:	80 0d       	add	r24, r0
    81e4:	11 24       	eor	r1, r1
    81e6:	8e 83       	std	Y+6, r24	; 0x06

		/* Registers 48-49 for CLK0 */
		params[i++] = ms_reg.reg.p2_1;
    81e8:	8b 89       	ldd	r24, Y+19	; 0x13
    81ea:	8f 83       	std	Y+7, r24	; 0x07
		params[i++] = ms_reg.reg.p2_0;
    81ec:	8a 89       	ldd	r24, Y+18	; 0x12
    81ee:	88 87       	std	Y+8, r24	; 0x08

		/* Write the parameters */
		switch(clk)
    81f0:	81 e0       	ldi	r24, 0x01	; 1
    81f2:	f8 16       	cp	r15, r24
    81f4:	81 f0       	breq	.+32     	; 0x8216 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x9e>
    81f6:	f8 16       	cp	r15, r24
    81f8:	20 f0       	brcs	.+8      	; 0x8202 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0x8a>
    81fa:	22 e0       	ldi	r18, 0x02	; 2
    81fc:	f2 16       	cp	r15, r18
    81fe:	a9 f0       	breq	.+42     	; 0x822a <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xb2>
    8200:	1d c0       	rjmp	.+58     	; 0x823c <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
		{
			case SI5351_CLK0:
			{
				if(si5351_write_bulk(SI5351_CLK0_PARAMETERS, params, i))
    8202:	48 e0       	ldi	r20, 0x08	; 8
    8204:	be 01       	movw	r22, r28
    8206:	6f 5f       	subi	r22, 0xFF	; 255
    8208:	7f 4f       	sbci	r23, 0xFF	; 255
    820a:	8a e2       	ldi	r24, 0x2A	; 42
    820c:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    8210:	88 23       	and	r24, r24
    8212:	a1 f0       	breq	.+40     	; 0x823c <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
    8214:	1e c0       	rjmp	.+60     	; 0x8252 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			}
			break;

			case SI5351_CLK1:
			{
				if(si5351_write_bulk(SI5351_CLK1_PARAMETERS, params, i))
    8216:	48 e0       	ldi	r20, 0x08	; 8
    8218:	be 01       	movw	r22, r28
    821a:	6f 5f       	subi	r22, 0xFF	; 255
    821c:	7f 4f       	sbci	r23, 0xFF	; 255
    821e:	82 e3       	ldi	r24, 0x32	; 50
    8220:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    8224:	88 23       	and	r24, r24
    8226:	51 f0       	breq	.+20     	; 0x823c <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xc4>
    8228:	14 c0       	rjmp	.+40     	; 0x8252 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			}
			break;

			case SI5351_CLK2:
			{
				if(si5351_write_bulk(SI5351_CLK2_PARAMETERS, params, i))
    822a:	48 e0       	ldi	r20, 0x08	; 8
    822c:	be 01       	movw	r22, r28
    822e:	6f 5f       	subi	r22, 0xFF	; 255
    8230:	7f 4f       	sbci	r23, 0xFF	; 255
    8232:	8a e3       	ldi	r24, 0x3A	; 58
    8234:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    8238:	81 11       	cpse	r24, r1
    823a:	0b c0       	rjmp	.+22     	; 0x8252 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
			{
			}
			break;
		}

		if(set_integer_mode(clk, int_mode))
    823c:	6a 2d       	mov	r22, r10
    823e:	8f 2d       	mov	r24, r15
    8240:	0e 94 51 40 	call	0x80a2	; 0x80a2 <_Z16set_integer_mode12si5351_clockb>
    8244:	81 11       	cpse	r24, r1
    8246:	05 c0       	rjmp	.+10     	; 0x8252 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb+0xda>
		{
			return(true);
		}
		
		if(ms_div(clk, r_div, div_by_4))
    8248:	4e a1       	ldd	r20, Y+38	; 0x26
    824a:	68 2d       	mov	r22, r8
    824c:	8f 2d       	mov	r24, r15
    824e:	0e 94 79 40 	call	0x80f2	; 0x80f2 <_Z6ms_div12si5351_clockhb>
		{
			return(true);
		}
		
		return(false);
	}
    8252:	69 96       	adiw	r28, 0x19	; 25
    8254:	cd bf       	out	0x3d, r28	; 61
    8256:	de bf       	out	0x3e, r29	; 62
    8258:	df 91       	pop	r29
    825a:	cf 91       	pop	r28
    825c:	1f 91       	pop	r17
    825e:	0f 91       	pop	r16
    8260:	ff 90       	pop	r15
    8262:	ef 90       	pop	r14
    8264:	df 90       	pop	r13
    8266:	cf 90       	pop	r12
    8268:	af 90       	pop	r10
    826a:	8f 90       	pop	r8
    826c:	08 95       	ret

0000826e <si5351_set_freq>:
 *
 * Returns true on failure
 *
 */
	bool si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, bool clocksOff)
	{
    826e:	2f 92       	push	r2
    8270:	3f 92       	push	r3
    8272:	4f 92       	push	r4
    8274:	5f 92       	push	r5
    8276:	6f 92       	push	r6
    8278:	7f 92       	push	r7
    827a:	8f 92       	push	r8
    827c:	9f 92       	push	r9
    827e:	af 92       	push	r10
    8280:	bf 92       	push	r11
    8282:	cf 92       	push	r12
    8284:	df 92       	push	r13
    8286:	ef 92       	push	r14
    8288:	ff 92       	push	r15
    828a:	0f 93       	push	r16
    828c:	1f 93       	push	r17
    828e:	cf 93       	push	r28
    8290:	df 93       	push	r29
    8292:	cd b7       	in	r28, 0x3d	; 61
    8294:	de b7       	in	r29, 0x3e	; 62
    8296:	60 97       	sbiw	r28, 0x10	; 16
    8298:	cd bf       	out	0x3d, r28	; 61
    829a:	de bf       	out	0x3e, r29	; 62
    829c:	6b 01       	movw	r12, r22
    829e:	7c 01       	movw	r14, r24
    82a0:	b4 2e       	mov	r11, r20
    82a2:	72 2e       	mov	r7, r18
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
		Si5351_pll target_pll;
		uint8_t clock_ctrl_addr;
		uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
		bool int_mode = false;
    82a4:	1d 86       	std	Y+13, r1	; 0x0d
		bool div_by_4 = false;
    82a6:	1e 86       	std	Y+14, r1	; 0x0e
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    82a8:	10 91 0a 49 	lds	r17, 0x490A	; 0x80490a <g_si5351_initialized>
    82ac:	11 23       	and	r17, r17
    82ae:	09 f4       	brne	.+2      	; 0x82b2 <si5351_set_freq+0x44>
    82b0:	1e c1       	rjmp	.+572    	; 0x84ee <si5351_set_freq+0x280>
#endif

#ifdef PREVENT_UNACHIEVABLE_FREQUENCIES
			/* Prevent unachievable frequencies from being entered. The Si5351 will accept these, but some may result */
			/* in no clock output. */
			if(freq_Fout > 999999)
    82b2:	80 e4       	ldi	r24, 0x40	; 64
    82b4:	c8 16       	cp	r12, r24
    82b6:	82 e4       	ldi	r24, 0x42	; 66
    82b8:	d8 06       	cpc	r13, r24
    82ba:	8f e0       	ldi	r24, 0x0F	; 15
    82bc:	e8 06       	cpc	r14, r24
    82be:	f1 04       	cpc	r15, r1
    82c0:	70 f0       	brcs	.+28     	; 0x82de <si5351_set_freq+0x70>
			{
				freq_Fout /= 100;
    82c2:	c7 01       	movw	r24, r14
    82c4:	b6 01       	movw	r22, r12
    82c6:	24 e6       	ldi	r18, 0x64	; 100
    82c8:	30 e0       	ldi	r19, 0x00	; 0
    82ca:	40 e0       	ldi	r20, 0x00	; 0
    82cc:	50 e0       	ldi	r21, 0x00	; 0
    82ce:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
				freq_Fout *= 100;
    82d2:	a4 e6       	ldi	r26, 0x64	; 100
    82d4:	b0 e0       	ldi	r27, 0x00	; 0
    82d6:	0e 94 de 48 	call	0x91bc	; 0x91bc <__muluhisi3>
    82da:	6b 01       	movw	r12, r22
    82dc:	7c 01       	movw	r14, r24
		/* Determine which PLL to use: CLK0 gets PLLA, CLK1 and CLK2 get PLLB */
		/* The first of CLK1 or CLK2 to be configured, determines the VCO frequency used for PLLB. */
		/* The second of CLK1 or CLK2 to be configured will attempt to achieve Fout by adjusting the */
		/* Multisynth Divider values only. */
		/* Only good for Si5351A3 variant */
		switch(clk)
    82de:	81 e0       	ldi	r24, 0x01	; 1
    82e0:	b8 16       	cp	r11, r24
    82e2:	c9 f0       	breq	.+50     	; 0x8316 <si5351_set_freq+0xa8>
    82e4:	b8 16       	cp	r11, r24
    82e6:	20 f0       	brcs	.+8      	; 0x82f0 <si5351_set_freq+0x82>
    82e8:	82 e0       	ldi	r24, 0x02	; 2
    82ea:	b8 16       	cp	r11, r24
    82ec:	b1 f1       	breq	.+108    	; 0x835a <si5351_set_freq+0xec>
    82ee:	08 c1       	rjmp	.+528    	; 0x8500 <si5351_set_freq+0x292>
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
    82f0:	80 91 17 49 	lds	r24, 0x4917	; 0x804917 <_ZL17enabledClocksMask>
    82f4:	81 60       	ori	r24, 0x01	; 1
    82f6:	80 93 17 49 	sts	0x4917, r24	; 0x804917 <_ZL17enabledClocksMask>
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
    82fa:	c0 92 0b 49 	sts	0x490B, r12	; 0x80490b <_ZL9clock_out>
    82fe:	d0 92 0c 49 	sts	0x490C, r13	; 0x80490c <_ZL9clock_out+0x1>
    8302:	e0 92 0d 49 	sts	0x490D, r14	; 0x80490d <_ZL9clock_out+0x2>
    8306:	f0 92 0e 49 	sts	0x490E, r15	; 0x80490e <_ZL9clock_out+0x3>
		switch(clk)
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
				clock_ctrl_addr = 16;
    830a:	68 94       	set
    830c:	66 24       	eor	r6, r6
    830e:	64 f8       	bld	r6, 4
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
    8310:	99 24       	eor	r9, r9
    8312:	93 94       	inc	r9
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
			}
			break;
    8314:	43 c0       	rjmp	.+134    	; 0x839c <si5351_set_freq+0x12e>
			case SI5351_CLK1:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
    8316:	80 91 17 49 	lds	r24, 0x4917	; 0x804917 <_ZL17enabledClocksMask>
    831a:	82 60       	ori	r24, 0x02	; 2
    831c:	80 93 17 49 	sts	0x4917, r24	; 0x804917 <_ZL17enabledClocksMask>
				clock_ctrl_addr = 17;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFA;
    8320:	80 95       	com	r24
    8322:	8a 6f       	ori	r24, 0xFA	; 250
    8324:	8f 87       	std	Y+15, r24	; 0x0f
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    8326:	41 e0       	ldi	r20, 0x01	; 1
    8328:	be 01       	movw	r22, r28
    832a:	61 5f       	subi	r22, 0xF1	; 241
    832c:	7f 4f       	sbci	r23, 0xFF	; 255
    832e:	83 e0       	ldi	r24, 0x03	; 3
    8330:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    8334:	18 2f       	mov	r17, r24
    8336:	81 11       	cpse	r24, r1
    8338:	e3 c0       	rjmp	.+454    	; 0x8500 <si5351_set_freq+0x292>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
    833a:	c0 92 0f 49 	sts	0x490F, r12	; 0x80490f <_ZL9clock_out+0x4>
    833e:	d0 92 10 49 	sts	0x4910, r13	; 0x804910 <_ZL9clock_out+0x5>
    8342:	e0 92 11 49 	sts	0x4911, r14	; 0x804911 <_ZL9clock_out+0x6>
    8346:	f0 92 12 49 	sts	0x4912, r15	; 0x804912 <_ZL9clock_out+0x7>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
				clock_ctrl_addr = 17;
    834a:	0f 2e       	mov	r0, r31
    834c:	f1 e1       	ldi	r31, 0x11	; 17
    834e:	6f 2e       	mov	r6, r31
    8350:	f0 2d       	mov	r31, r0
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
    8352:	68 94       	set
    8354:	99 24       	eor	r9, r9
    8356:	91 f8       	bld	r9, 1
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
			}
			break;
    8358:	21 c0       	rjmp	.+66     	; 0x839c <si5351_set_freq+0x12e>
			case SI5351_CLK2:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
    835a:	80 91 17 49 	lds	r24, 0x4917	; 0x804917 <_ZL17enabledClocksMask>
    835e:	84 60       	ori	r24, 0x04	; 4
    8360:	80 93 17 49 	sts	0x4917, r24	; 0x804917 <_ZL17enabledClocksMask>
				clock_ctrl_addr = 18;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFC; /* only disable CLK2 */
    8364:	80 95       	com	r24
    8366:	8c 6f       	ori	r24, 0xFC	; 252
    8368:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    836a:	41 e0       	ldi	r20, 0x01	; 1
    836c:	be 01       	movw	r22, r28
    836e:	61 5f       	subi	r22, 0xF1	; 241
    8370:	7f 4f       	sbci	r23, 0xFF	; 255
    8372:	83 e0       	ldi	r24, 0x03	; 3
    8374:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    8378:	18 2f       	mov	r17, r24
    837a:	81 11       	cpse	r24, r1
    837c:	c1 c0       	rjmp	.+386    	; 0x8500 <si5351_set_freq+0x292>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
    837e:	c0 92 13 49 	sts	0x4913, r12	; 0x804913 <_ZL9clock_out+0x8>
    8382:	d0 92 14 49 	sts	0x4914, r13	; 0x804914 <_ZL9clock_out+0x9>
    8386:	e0 92 15 49 	sts	0x4915, r14	; 0x804915 <_ZL9clock_out+0xa>
    838a:	f0 92 16 49 	sts	0x4916, r15	; 0x804916 <_ZL9clock_out+0xb>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
				clock_ctrl_addr = 18;
    838e:	0f 2e       	mov	r0, r31
    8390:	f2 e1       	ldi	r31, 0x12	; 18
    8392:	6f 2e       	mov	r6, r31
    8394:	f0 2d       	mov	r31, r0
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
    8396:	68 94       	set
    8398:	99 24       	eor	r9, r9
    839a:	91 f8       	bld	r9, 1
			Frequency_Hz freq_VCO_calc;
			Frequency_Hz fout_calc;
			int32_t f_err;
#endif

		if((target_pll == SI5351_PLLA) || !freqVCOB)
    839c:	81 e0       	ldi	r24, 0x01	; 1
    839e:	98 16       	cp	r9, r24
    83a0:	61 f0       	breq	.+24     	; 0x83ba <si5351_set_freq+0x14c>
    83a2:	80 91 18 49 	lds	r24, 0x4918	; 0x804918 <_ZL8freqVCOB>
    83a6:	90 91 19 49 	lds	r25, 0x4919	; 0x804919 <_ZL8freqVCOB+0x1>
    83aa:	a0 91 1a 49 	lds	r26, 0x491A	; 0x80491a <_ZL8freqVCOB+0x2>
    83ae:	b0 91 1b 49 	lds	r27, 0x491B	; 0x80491b <_ZL8freqVCOB+0x3>
    83b2:	89 2b       	or	r24, r25
    83b4:	8a 2b       	or	r24, r26
    83b6:	8b 2b       	or	r24, r27
    83b8:	81 f4       	brne	.+32     	; 0x83da <si5351_set_freq+0x16c>
		{
#ifdef DEBUGGING_ONLY
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4, &div);
#else
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    83ba:	8e 01       	movw	r16, r28
    83bc:	02 5f       	subi	r16, 0xF2	; 242
    83be:	1f 4f       	sbci	r17, 0xFF	; 255
    83c0:	9e 01       	movw	r18, r28
    83c2:	23 5f       	subi	r18, 0xF3	; 243
    83c4:	3f 4f       	sbci	r19, 0xFF	; 255
    83c6:	ae 01       	movw	r20, r28
    83c8:	4f 5f       	subi	r20, 0xFF	; 255
    83ca:	5f 4f       	sbci	r21, 0xFF	; 255
    83cc:	c7 01       	movw	r24, r14
    83ce:	b6 01       	movw	r22, r12
    83d0:	0e 94 7a 3c 	call	0x78f4	; 0x78f4 <_Z15multisynth_calcmP13u_si5351_regsPbS1_>
    83d4:	1b 01       	movw	r2, r22
    83d6:	2c 01       	movw	r4, r24
    83d8:	10 c0       	rjmp	.+32     	; 0x83fa <si5351_set_freq+0x18c>
		else
		{
#ifdef DEBUGGING_ONLY
				fout_calc = freq_Fout;  /* save the intended output frequency */
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    83da:	8e 01       	movw	r16, r28
    83dc:	02 5f       	subi	r16, 0xF2	; 242
    83de:	1f 4f       	sbci	r17, 0xFF	; 255
    83e0:	9e 01       	movw	r18, r28
    83e2:	23 5f       	subi	r18, 0xF3	; 243
    83e4:	3f 4f       	sbci	r19, 0xFF	; 255
    83e6:	ae 01       	movw	r20, r28
    83e8:	4f 5f       	subi	r20, 0xFF	; 255
    83ea:	5f 4f       	sbci	r21, 0xFF	; 255
    83ec:	c7 01       	movw	r24, r14
    83ee:	b6 01       	movw	r22, r12
    83f0:	0e 94 4c 3d 	call	0x7a98	; 0x7a98 <_Z19multisynth_estimatemP13u_si5351_regsPbS1_>
 *
 */
	bool si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, bool clocksOff)
	{
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
    83f4:	21 2c       	mov	r2, r1
    83f6:	31 2c       	mov	r3, r1
    83f8:	21 01       	movw	r4, r2
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
		}

		/* Set multisynth registers (MS must be set before PLL) */
		if(set_multisynth_registers_source(clk, target_pll))
    83fa:	69 2d       	mov	r22, r9
    83fc:	8b 2d       	mov	r24, r11
    83fe:	0e 94 27 40 	call	0x804e	; 0x804e <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>
    8402:	18 2f       	mov	r17, r24
    8404:	81 11       	cpse	r24, r1
    8406:	7c c0       	rjmp	.+248    	; 0x8500 <si5351_set_freq+0x292>
		{
			return(true);
		}
		
		if(set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4))
    8408:	8e 85       	ldd	r24, Y+14	; 0x0e
    840a:	ad 84       	ldd	r10, Y+13	; 0x0d
    840c:	8f 93       	push	r24
    840e:	81 2c       	mov	r8, r1
    8410:	c9 80       	ldd	r12, Y+1	; 0x01
    8412:	da 80       	ldd	r13, Y+2	; 0x02
    8414:	eb 80       	ldd	r14, Y+3	; 0x03
    8416:	fc 80       	ldd	r15, Y+4	; 0x04
    8418:	0d 81       	ldd	r16, Y+5	; 0x05
    841a:	1e 81       	ldd	r17, Y+6	; 0x06
    841c:	2f 81       	ldd	r18, Y+7	; 0x07
    841e:	38 85       	ldd	r19, Y+8	; 0x08
    8420:	49 85       	ldd	r20, Y+9	; 0x09
    8422:	5a 85       	ldd	r21, Y+10	; 0x0a
    8424:	6b 85       	ldd	r22, Y+11	; 0x0b
    8426:	7c 85       	ldd	r23, Y+12	; 0x0c
    8428:	8b 2d       	mov	r24, r11
    842a:	0e 94 bc 40 	call	0x8178	; 0x8178 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regsbhb>
    842e:	18 2f       	mov	r17, r24
    8430:	0f 90       	pop	r0
    8432:	81 11       	cpse	r24, r1
    8434:	65 c0       	rjmp	.+202    	; 0x8500 <si5351_set_freq+0x292>
				fout_calc = freq_VCO_calc / div;
			}

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
    8436:	21 14       	cp	r2, r1
    8438:	31 04       	cpc	r3, r1
    843a:	41 04       	cpc	r4, r1
    843c:	51 04       	cpc	r5, r1
    843e:	29 f0       	breq	.+10     	; 0x844a <si5351_set_freq+0x1dc>
			{
				set_pll(freq_VCO, target_pll);
    8440:	49 2d       	mov	r20, r9
    8442:	c2 01       	movw	r24, r4
    8444:	b1 01       	movw	r22, r2
    8446:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <_Z7set_pllm10si5351_pll>
/*	pll_reset(target_pll); */

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		if(clocksOff)
    844a:	77 20       	and	r7, r7
    844c:	69 f0       	breq	.+26     	; 0x8468 <si5351_set_freq+0x1fa>
		{
 			data[0] = enabledClocksMask;
    844e:	80 91 17 49 	lds	r24, 0x4917	; 0x804917 <_ZL17enabledClocksMask>
    8452:	8f 87       	std	Y+15, r24	; 0x0f
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
    8454:	41 e0       	ldi	r20, 0x01	; 1
    8456:	be 01       	movw	r22, r28
    8458:	61 5f       	subi	r22, 0xF1	; 241
    845a:	7f 4f       	sbci	r23, 0xFF	; 255
    845c:	83 e0       	ldi	r24, 0x03	; 3
    845e:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    8462:	88 23       	and	r24, r24
    8464:	71 f0       	breq	.+28     	; 0x8482 <si5351_set_freq+0x214>
    8466:	45 c0       	rjmp	.+138    	; 0x84f2 <si5351_set_freq+0x284>
				return true;
			} 
		}
		else
		{
 			data[0] = ~enabledClocksMask;
    8468:	80 91 17 49 	lds	r24, 0x4917	; 0x804917 <_ZL17enabledClocksMask>
    846c:	80 95       	com	r24
    846e:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
    8470:	41 e0       	ldi	r20, 0x01	; 1
    8472:	be 01       	movw	r22, r28
    8474:	61 5f       	subi	r22, 0xF1	; 241
    8476:	7f 4f       	sbci	r23, 0xFF	; 255
    8478:	83 e0       	ldi	r24, 0x03	; 3
    847a:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    847e:	81 11       	cpse	r24, r1
    8480:	3a c0       	rjmp	.+116    	; 0x84f6 <si5351_set_freq+0x288>
				return true;
			} 
		}

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
    8482:	81 e0       	ldi	r24, 0x01	; 1
    8484:	98 12       	cpse	r9, r24
    8486:	0b c0       	rjmp	.+22     	; 0x849e <si5351_set_freq+0x230>
		{
 			data[0] = 0x4C;
    8488:	8c e4       	ldi	r24, 0x4C	; 76
    848a:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    848c:	41 e0       	ldi	r20, 0x01	; 1
    848e:	be 01       	movw	r22, r28
    8490:	61 5f       	subi	r22, 0xF1	; 241
    8492:	7f 4f       	sbci	r23, 0xFF	; 255
    8494:	86 2d       	mov	r24, r6
    8496:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    849a:	18 2f       	mov	r17, r24
    849c:	31 c0       	rjmp	.+98     	; 0x8500 <si5351_set_freq+0x292>
			/*   o Integer mode set */
			/*   o Clock powered up */
		}
		else
		{
			if(int_mode)
    849e:	8d 85       	ldd	r24, Y+13	; 0x0d
    84a0:	88 23       	and	r24, r24
    84a2:	61 f0       	breq	.+24     	; 0x84bc <si5351_set_freq+0x24e>
			{
 				data[0] = 0x6C;
    84a4:	8c e6       	ldi	r24, 0x6C	; 108
    84a6:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    84a8:	41 e0       	ldi	r20, 0x01	; 1
    84aa:	be 01       	movw	r22, r28
    84ac:	61 5f       	subi	r22, 0xF1	; 241
    84ae:	7f 4f       	sbci	r23, 0xFF	; 255
    84b0:	86 2d       	mov	r24, r6
    84b2:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    84b6:	88 23       	and	r24, r24
    84b8:	61 f0       	breq	.+24     	; 0x84d2 <si5351_set_freq+0x264>
    84ba:	1f c0       	rjmp	.+62     	; 0x84fa <si5351_set_freq+0x28c>
				/*   o Integer mode set */
				/*   o Clock powered up */
			}
			else
			{
 				data[0] = 0x2C;
    84bc:	8c e2       	ldi	r24, 0x2C	; 44
    84be:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    84c0:	41 e0       	ldi	r20, 0x01	; 1
    84c2:	be 01       	movw	r22, r28
    84c4:	61 5f       	subi	r22, 0xF1	; 241
    84c6:	7f 4f       	sbci	r23, 0xFF	; 255
    84c8:	86 2d       	mov	r24, r6
    84ca:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <_Z17si5351_write_bulkhPhh>
    84ce:	81 11       	cpse	r24, r1
    84d0:	16 c0       	rjmp	.+44     	; 0x84fe <si5351_set_freq+0x290>
				/*   o PLLB is multisynth source */
				/*   o Integer mode cleared */
				/*   o Clock powered up */
			}

			if(freq_VCO)
    84d2:	21 14       	cp	r2, r1
    84d4:	31 04       	cpc	r3, r1
    84d6:	41 04       	cpc	r4, r1
    84d8:	51 04       	cpc	r5, r1
    84da:	91 f0       	breq	.+36     	; 0x8500 <si5351_set_freq+0x292>
			{
				freqVCOB = freq_VCO;
    84dc:	20 92 18 49 	sts	0x4918, r2	; 0x804918 <_ZL8freqVCOB>
    84e0:	30 92 19 49 	sts	0x4919, r3	; 0x804919 <_ZL8freqVCOB+0x1>
    84e4:	40 92 1a 49 	sts	0x491A, r4	; 0x80491a <_ZL8freqVCOB+0x2>
    84e8:	50 92 1b 49 	sts	0x491B, r5	; 0x80491b <_ZL8freqVCOB+0x3>
    84ec:	09 c0       	rjmp	.+18     	; 0x8500 <si5351_set_freq+0x292>
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    84ee:	11 e0       	ldi	r17, 0x01	; 1
    84f0:	07 c0       	rjmp	.+14     	; 0x8500 <si5351_set_freq+0x292>
		if(clocksOff)
		{
 			data[0] = enabledClocksMask;
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
			{
				return true;
    84f2:	18 2f       	mov	r17, r24
    84f4:	05 c0       	rjmp	.+10     	; 0x8500 <si5351_set_freq+0x292>
		else
		{
 			data[0] = ~enabledClocksMask;
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
			{
				return true;
    84f6:	18 2f       	mov	r17, r24
    84f8:	03 c0       	rjmp	.+6      	; 0x8500 <si5351_set_freq+0x292>
			if(int_mode)
			{
 				data[0] = 0x6C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    84fa:	18 2f       	mov	r17, r24
    84fc:	01 c0       	rjmp	.+2      	; 0x8500 <si5351_set_freq+0x292>
			else
			{
 				data[0] = 0x2C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    84fe:	18 2f       	mov	r17, r24
				freqVCOB = freq_VCO;
			}
		}

		return(false);
	}
    8500:	81 2f       	mov	r24, r17
    8502:	60 96       	adiw	r28, 0x10	; 16
    8504:	cd bf       	out	0x3d, r28	; 61
    8506:	de bf       	out	0x3e, r29	; 62
    8508:	df 91       	pop	r29
    850a:	cf 91       	pop	r28
    850c:	1f 91       	pop	r17
    850e:	0f 91       	pop	r16
    8510:	ff 90       	pop	r15
    8512:	ef 90       	pop	r14
    8514:	df 90       	pop	r13
    8516:	cf 90       	pop	r12
    8518:	bf 90       	pop	r11
    851a:	af 90       	pop	r10
    851c:	9f 90       	pop	r9
    851e:	8f 90       	pop	r8
    8520:	7f 90       	pop	r7
    8522:	6f 90       	pop	r6
    8524:	5f 90       	pop	r5
    8526:	4f 90       	pop	r4
    8528:	3f 90       	pop	r3
    852a:	2f 90       	pop	r2
    852c:	08 95       	ret

0000852e <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    852e:	80 e0       	ldi	r24, 0x00	; 0
    8530:	08 95       	ret

00008532 <TIMERB_init>:
 * \return Initialization status.
 */
int8_t TIMERB_init()
{
TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8532:	e0 e0       	ldi	r30, 0x00	; 0
    8534:	fb e0       	ldi	r31, 0x0B	; 11
    8536:	81 e0       	ldi	r24, 0x01	; 1
    8538:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB0.CCMP = 0x9C40;
    853a:	20 e4       	ldi	r18, 0x40	; 64
    853c:	3c e9       	ldi	r19, 0x9C	; 156
    853e:	24 87       	std	Z+12, r18	; 0x0c
    8540:	35 87       	std	Z+13, r19	; 0x0d

TCB0.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    8542:	93 e0       	ldi	r25, 0x03	; 3
    8544:	90 83       	st	Z, r25

TCB0.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    8546:	86 83       	std	Z+6, r24	; 0x06

/********************************************************************************/

TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8548:	e0 e1       	ldi	r30, 0x10	; 16
    854a:	fb e0       	ldi	r31, 0x0B	; 11
    854c:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB1.CCMP = 0x5DC0;
    854e:	40 ec       	ldi	r20, 0xC0	; 192
    8550:	5d e5       	ldi	r21, 0x5D	; 93
    8552:	44 87       	std	Z+12, r20	; 0x0c
    8554:	55 87       	std	Z+13, r21	; 0x0d

TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    8556:	80 83       	st	Z, r24

TCB1.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    8558:	86 83       	std	Z+6, r24	; 0x06


/********************************************************************************/

TCB3.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    855a:	e0 e3       	ldi	r30, 0x30	; 48
    855c:	fb e0       	ldi	r31, 0x0B	; 11
    855e:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB3.CCMP = 0x9C40;
    8560:	24 87       	std	Z+12, r18	; 0x0c
    8562:	35 87       	std	Z+13, r19	; 0x0d

TCB3.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    8564:	90 83       	st	Z, r25

TCB3.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    8566:	86 83       	std	Z+6, r24	; 0x06

	return 0;
}
    8568:	80 e0       	ldi	r24, 0x00	; 0
    856a:	08 95       	ret

0000856c <util_delay_ms>:


bool util_delay_ms(uint32_t delayValue)
{
    856c:	0f 93       	push	r16
    856e:	1f 93       	push	r17
	static uint32_t countdownValue=0;
	static bool counting = false;
	
	if(delayValue)
    8570:	61 15       	cp	r22, r1
    8572:	71 05       	cpc	r23, r1
    8574:	81 05       	cpc	r24, r1
    8576:	91 05       	cpc	r25, r1
    8578:	09 f4       	brne	.+2      	; 0x857c <util_delay_ms+0x10>
    857a:	67 c0       	rjmp	.+206    	; 0x864a <util_delay_ms+0xde>
	{
		if(counting)
    857c:	20 91 20 49 	lds	r18, 0x4920	; 0x804920 <_ZZ13util_delay_msE8counting>
    8580:	22 23       	and	r18, r18
    8582:	f1 f1       	breq	.+124    	; 0x8600 <util_delay_ms+0x94>
		{
			if(!g_ms_counter)
    8584:	00 91 21 49 	lds	r16, 0x4921	; 0x804921 <_ZL12g_ms_counter>
    8588:	10 91 22 49 	lds	r17, 0x4922	; 0x804922 <_ZL12g_ms_counter+0x1>
    858c:	20 91 23 49 	lds	r18, 0x4923	; 0x804923 <_ZL12g_ms_counter+0x2>
    8590:	30 91 24 49 	lds	r19, 0x4924	; 0x804924 <_ZL12g_ms_counter+0x3>
    8594:	01 2b       	or	r16, r17
    8596:	02 2b       	or	r16, r18
    8598:	03 2b       	or	r16, r19
    859a:	71 f4       	brne	.+28     	; 0x85b8 <util_delay_ms+0x4c>
			{
				TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
				| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    859c:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

				counting = false;
    85a0:	10 92 20 49 	sts	0x4920, r1	; 0x804920 <_ZZ13util_delay_msE8counting>
				countdownValue = 0;
    85a4:	10 92 1c 49 	sts	0x491C, r1	; 0x80491c <_ZZ13util_delay_msE14countdownValue>
    85a8:	10 92 1d 49 	sts	0x491D, r1	; 0x80491d <_ZZ13util_delay_msE14countdownValue+0x1>
    85ac:	10 92 1e 49 	sts	0x491E, r1	; 0x80491e <_ZZ13util_delay_msE14countdownValue+0x2>
    85b0:	10 92 1f 49 	sts	0x491F, r1	; 0x80491f <_ZZ13util_delay_msE14countdownValue+0x3>
				return(false); /* time expired */
    85b4:	80 e0       	ldi	r24, 0x00	; 0
    85b6:	62 c0       	rjmp	.+196    	; 0x867c <util_delay_ms+0x110>
			}
			else if(delayValue != countdownValue) /* countdown delay changed */
    85b8:	00 91 1c 49 	lds	r16, 0x491C	; 0x80491c <_ZZ13util_delay_msE14countdownValue>
    85bc:	10 91 1d 49 	lds	r17, 0x491D	; 0x80491d <_ZZ13util_delay_msE14countdownValue+0x1>
    85c0:	20 91 1e 49 	lds	r18, 0x491E	; 0x80491e <_ZZ13util_delay_msE14countdownValue+0x2>
    85c4:	30 91 1f 49 	lds	r19, 0x491F	; 0x80491f <_ZZ13util_delay_msE14countdownValue+0x3>
    85c8:	60 17       	cp	r22, r16
    85ca:	71 07       	cpc	r23, r17
    85cc:	82 07       	cpc	r24, r18
    85ce:	93 07       	cpc	r25, r19
    85d0:	09 f4       	brne	.+2      	; 0x85d4 <util_delay_ms+0x68>
    85d2:	51 c0       	rjmp	.+162    	; 0x8676 <util_delay_ms+0x10a>
			{
				TCB1.CNT = 0x0000;
    85d4:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    85d8:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
				countdownValue = delayValue;
    85dc:	60 93 1c 49 	sts	0x491C, r22	; 0x80491c <_ZZ13util_delay_msE14countdownValue>
    85e0:	70 93 1d 49 	sts	0x491D, r23	; 0x80491d <_ZZ13util_delay_msE14countdownValue+0x1>
    85e4:	80 93 1e 49 	sts	0x491E, r24	; 0x80491e <_ZZ13util_delay_msE14countdownValue+0x2>
    85e8:	90 93 1f 49 	sts	0x491F, r25	; 0x80491f <_ZZ13util_delay_msE14countdownValue+0x3>
				g_ms_counter = delayValue;
    85ec:	60 93 21 49 	sts	0x4921, r22	; 0x804921 <_ZL12g_ms_counter>
    85f0:	70 93 22 49 	sts	0x4922, r23	; 0x804922 <_ZL12g_ms_counter+0x1>
    85f4:	80 93 23 49 	sts	0x4923, r24	; 0x804923 <_ZL12g_ms_counter+0x2>
    85f8:	90 93 24 49 	sts	0x4924, r25	; 0x804924 <_ZL12g_ms_counter+0x3>
				return(false);
    85fc:	80 e0       	ldi	r24, 0x00	; 0
    85fe:	3e c0       	rjmp	.+124    	; 0x867c <util_delay_ms+0x110>
			}
		}
		else if(delayValue != countdownValue)
    8600:	00 91 1c 49 	lds	r16, 0x491C	; 0x80491c <_ZZ13util_delay_msE14countdownValue>
    8604:	10 91 1d 49 	lds	r17, 0x491D	; 0x80491d <_ZZ13util_delay_msE14countdownValue+0x1>
    8608:	20 91 1e 49 	lds	r18, 0x491E	; 0x80491e <_ZZ13util_delay_msE14countdownValue+0x2>
    860c:	30 91 1f 49 	lds	r19, 0x491F	; 0x80491f <_ZZ13util_delay_msE14countdownValue+0x3>
    8610:	60 17       	cp	r22, r16
    8612:	71 07       	cpc	r23, r17
    8614:	82 07       	cpc	r24, r18
    8616:	93 07       	cpc	r25, r19
    8618:	71 f1       	breq	.+92     	; 0x8676 <util_delay_ms+0x10a>
		{
			TCB1.CNT = 0x0000;
    861a:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    861e:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
			countdownValue = delayValue;
    8622:	60 93 1c 49 	sts	0x491C, r22	; 0x80491c <_ZZ13util_delay_msE14countdownValue>
    8626:	70 93 1d 49 	sts	0x491D, r23	; 0x80491d <_ZZ13util_delay_msE14countdownValue+0x1>
    862a:	80 93 1e 49 	sts	0x491E, r24	; 0x80491e <_ZZ13util_delay_msE14countdownValue+0x2>
    862e:	90 93 1f 49 	sts	0x491F, r25	; 0x80491f <_ZZ13util_delay_msE14countdownValue+0x3>
			g_ms_counter = delayValue;
    8632:	60 93 21 49 	sts	0x4921, r22	; 0x804921 <_ZL12g_ms_counter>
    8636:	70 93 22 49 	sts	0x4922, r23	; 0x804922 <_ZL12g_ms_counter+0x1>
    863a:	80 93 23 49 	sts	0x4923, r24	; 0x804923 <_ZL12g_ms_counter+0x2>
    863e:	90 93 24 49 	sts	0x4924, r25	; 0x804924 <_ZL12g_ms_counter+0x3>
			counting = true;
    8642:	81 e0       	ldi	r24, 0x01	; 1
    8644:	80 93 20 49 	sts	0x4920, r24	; 0x804920 <_ZZ13util_delay_msE8counting>
    8648:	16 c0       	rjmp	.+44     	; 0x8676 <util_delay_ms+0x10a>
		}
	}
	else
	{
		TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
		| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    864a:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

		counting = false;
    864e:	10 92 20 49 	sts	0x4920, r1	; 0x804920 <_ZZ13util_delay_msE8counting>
		countdownValue = 0;
    8652:	10 92 1c 49 	sts	0x491C, r1	; 0x80491c <_ZZ13util_delay_msE14countdownValue>
    8656:	10 92 1d 49 	sts	0x491D, r1	; 0x80491d <_ZZ13util_delay_msE14countdownValue+0x1>
    865a:	10 92 1e 49 	sts	0x491E, r1	; 0x80491e <_ZZ13util_delay_msE14countdownValue+0x2>
    865e:	10 92 1f 49 	sts	0x491F, r1	; 0x80491f <_ZZ13util_delay_msE14countdownValue+0x3>
		g_ms_counter = 0;
    8662:	10 92 21 49 	sts	0x4921, r1	; 0x804921 <_ZL12g_ms_counter>
    8666:	10 92 22 49 	sts	0x4922, r1	; 0x804922 <_ZL12g_ms_counter+0x1>
    866a:	10 92 23 49 	sts	0x4923, r1	; 0x804923 <_ZL12g_ms_counter+0x2>
    866e:	10 92 24 49 	sts	0x4924, r1	; 0x804924 <_ZL12g_ms_counter+0x3>
		return(false); /* timer reset */
    8672:	80 e0       	ldi	r24, 0x00	; 0
    8674:	03 c0       	rjmp	.+6      	; 0x867c <util_delay_ms+0x110>
	}
	
	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
	| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    8676:	81 e0       	ldi	r24, 0x01	; 1
    8678:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
	
	return(true);
}
    867c:	1f 91       	pop	r17
    867e:	0f 91       	pop	r16
    8680:	08 95       	ret

00008682 <__vector_13>:

/**
One millisecond utility counter based on CPU clock.
*/
ISR(TCB1_INT_vect)
{
    8682:	1f 92       	push	r1
    8684:	0f 92       	push	r0
    8686:	0f b6       	in	r0, 0x3f	; 63
    8688:	0f 92       	push	r0
    868a:	11 24       	eor	r1, r1
    868c:	8f 93       	push	r24
    868e:	9f 93       	push	r25
    8690:	af 93       	push	r26
    8692:	bf 93       	push	r27
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    8694:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    8698:	80 ff       	sbrs	r24, 0
    869a:	1d c0       	rjmp	.+58     	; 0x86d6 <__vector_13+0x54>
    {
		if(g_ms_counter) /* check for 1-second interval */
    869c:	80 91 21 49 	lds	r24, 0x4921	; 0x804921 <_ZL12g_ms_counter>
    86a0:	90 91 22 49 	lds	r25, 0x4922	; 0x804922 <_ZL12g_ms_counter+0x1>
    86a4:	a0 91 23 49 	lds	r26, 0x4923	; 0x804923 <_ZL12g_ms_counter+0x2>
    86a8:	b0 91 24 49 	lds	r27, 0x4924	; 0x804924 <_ZL12g_ms_counter+0x3>
    86ac:	00 97       	sbiw	r24, 0x00	; 0
    86ae:	a1 05       	cpc	r26, r1
    86b0:	b1 05       	cpc	r27, r1
    86b2:	61 f0       	breq	.+24     	; 0x86cc <__vector_13+0x4a>
		{
			g_ms_counter--;	
    86b4:	01 97       	sbiw	r24, 0x01	; 1
    86b6:	a1 09       	sbc	r26, r1
    86b8:	b1 09       	sbc	r27, r1
    86ba:	80 93 21 49 	sts	0x4921, r24	; 0x804921 <_ZL12g_ms_counter>
    86be:	90 93 22 49 	sts	0x4922, r25	; 0x804922 <_ZL12g_ms_counter+0x1>
    86c2:	a0 93 23 49 	sts	0x4923, r26	; 0x804923 <_ZL12g_ms_counter+0x2>
    86c6:	b0 93 24 49 	sts	0x4924, r27	; 0x804924 <_ZL12g_ms_counter+0x3>
    86ca:	02 c0       	rjmp	.+4      	; 0x86d0 <__vector_13+0x4e>
		}
		else
		{
			TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
			| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    86cc:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
		}

        TCB1.INTFLAGS = TCB_CAPT_bm; /* clear interrupt flag */
    86d0:	81 e0       	ldi	r24, 0x01	; 1
    86d2:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    }
}
    86d6:	bf 91       	pop	r27
    86d8:	af 91       	pop	r26
    86da:	9f 91       	pop	r25
    86dc:	8f 91       	pop	r24
    86de:	0f 90       	pop	r0
    86e0:	0f be       	out	0x3f, r0	; 63
    86e2:	0f 90       	pop	r0
    86e4:	1f 90       	pop	r1
    86e6:	18 95       	reti

000086e8 <_Z14txSetFrequencyPmb>:
 *       This function sets the VFO frequency (CLK0 of the Si5351) based on the intended frequency passed in by the parameter (freq),
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	bool txSetFrequency(Frequency_Hz *freq, bool leaveClockOff)
	{
    86e8:	0f 93       	push	r16
    86ea:	1f 93       	push	r17
    86ec:	cf 93       	push	r28
    86ee:	df 93       	push	r29
    86f0:	fc 01       	movw	r30, r24
    86f2:	46 2f       	mov	r20, r22
		bool err = false;

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
    86f4:	60 81       	ld	r22, Z
    86f6:	71 81       	ldd	r23, Z+1	; 0x01
    86f8:	82 81       	ldd	r24, Z+2	; 0x02
    86fa:	93 81       	ldd	r25, Z+3	; 0x03
    86fc:	8b 01       	movw	r16, r22
    86fe:	9c 01       	movw	r18, r24
    8700:	01 5e       	subi	r16, 0xE1	; 225
    8702:	17 46       	sbci	r17, 0x67	; 103
    8704:	25 43       	sbci	r18, 0x35	; 53
    8706:	31 09       	sbc	r19, r1
    8708:	0f 31       	cpi	r16, 0x1F	; 31
    870a:	11 4a       	sbci	r17, 0xA1	; 161
    870c:	27 40       	sbci	r18, 0x07	; 7
    870e:	31 05       	cpc	r19, r1
    8710:	a8 f4       	brcc	.+42     	; 0x873c <_Z14txSetFrequencyPmb+0x54>
    8712:	24 2f       	mov	r18, r20
    8714:	ef 01       	movw	r28, r30
		{
			if(si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff))
    8716:	41 e0       	ldi	r20, 0x01	; 1
    8718:	0e 94 37 41 	call	0x826e	; 0x826e <si5351_set_freq>
    871c:	81 11       	cpse	r24, r1
    871e:	10 c0       	rjmp	.+32     	; 0x8740 <_Z14txSetFrequencyPmb+0x58>
			{
				err = true; 
			}
			else
			{
				g_80m_frequency = *freq;
    8720:	88 81       	ld	r24, Y
    8722:	99 81       	ldd	r25, Y+1	; 0x01
    8724:	aa 81       	ldd	r26, Y+2	; 0x02
    8726:	bb 81       	ldd	r27, Y+3	; 0x03
    8728:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <g_80m_frequency>
    872c:	90 93 2d 40 	sts	0x402D, r25	; 0x80402d <g_80m_frequency+0x1>
    8730:	a0 93 2e 40 	sts	0x402E, r26	; 0x80402e <g_80m_frequency+0x2>
    8734:	b0 93 2f 40 	sts	0x402F, r27	; 0x80402f <g_80m_frequency+0x3>
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	bool txSetFrequency(Frequency_Hz *freq, bool leaveClockOff)
	{
		bool err = false;
    8738:	80 e0       	ldi	r24, 0x00	; 0
    873a:	03 c0       	rjmp	.+6      	; 0x8742 <_Z14txSetFrequencyPmb+0x5a>
    873c:	80 e0       	ldi	r24, 0x00	; 0
    873e:	01 c0       	rjmp	.+2      	; 0x8742 <_Z14txSetFrequencyPmb+0x5a>

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
		{
			if(si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff))
			{
				err = true; 
    8740:	81 e0       	ldi	r24, 0x01	; 1
				g_80m_frequency = *freq;
			}
		}

		return(err);
	}
    8742:	df 91       	pop	r29
    8744:	cf 91       	pop	r28
    8746:	1f 91       	pop	r17
    8748:	0f 91       	pop	r16
    874a:	08 95       	ret

0000874c <_Z14txGetFrequencyv>:

	Frequency_Hz txGetFrequency(void)
	{
		return( g_80m_frequency);
    874c:	60 91 2c 40 	lds	r22, 0x402C	; 0x80402c <g_80m_frequency>
    8750:	70 91 2d 40 	lds	r23, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    8754:	80 91 2e 40 	lds	r24, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    8758:	90 91 2f 40 	lds	r25, 0x402F	; 0x80402f <g_80m_frequency+0x3>
	}
    875c:	08 95       	ret

0000875e <_Z18powerToTransmitterb>:

	EC powerToTransmitter(bool on)
	{
		fet_driver(on);
    875e:	0e 94 5f 28 	call	0x50be	; 0x50be <_Z10fet_driverb>

		return(ERROR_CODE_NO_ERROR);
	}
    8762:	80 e0       	ldi	r24, 0x00	; 0
    8764:	08 95       	ret

00008766 <_Z14keyTransmitterb>:

	void keyTransmitter(bool on)
	{
		if(g_tx_initialized)
    8766:	90 91 25 49 	lds	r25, 0x4925	; 0x804925 <_ZL16g_tx_initialized>
    876a:	99 23       	and	r25, r25
    876c:	c1 f0       	breq	.+48     	; 0x879e <_Z14keyTransmitterb+0x38>
		{			
			if(on)
    876e:	88 23       	and	r24, r24
    8770:	71 f0       	breq	.+28     	; 0x878e <_Z14keyTransmitterb+0x28>
			{
				if(!g_transmitter_keyed)
    8772:	80 91 26 49 	lds	r24, 0x4926	; 0x804926 <_ZL19g_transmitter_keyed>
    8776:	81 11       	cpse	r24, r1
    8778:	12 c0       	rjmp	.+36     	; 0x879e <_Z14keyTransmitterb+0x38>
				{
					if(si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_ENABLED) == ERROR_CODE_NO_ERROR)
    877a:	61 e0       	ldi	r22, 0x01	; 1
    877c:	81 e0       	ldi	r24, 0x01	; 1
    877e:	0e 94 ad 3f 	call	0x7f5a	; 0x7f5a <si5351_clock_enable>
    8782:	81 11       	cpse	r24, r1
    8784:	0c c0       	rjmp	.+24     	; 0x879e <_Z14keyTransmitterb+0x38>
					{
						g_transmitter_keyed = true;
    8786:	81 e0       	ldi	r24, 0x01	; 1
    8788:	80 93 26 49 	sts	0x4926, r24	; 0x804926 <_ZL19g_transmitter_keyed>
    878c:	08 95       	ret
					}
				}
			}
			else
			{
				if(si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED) == ERROR_CODE_NO_ERROR)
    878e:	60 e0       	ldi	r22, 0x00	; 0
    8790:	81 e0       	ldi	r24, 0x01	; 1
    8792:	0e 94 ad 3f 	call	0x7f5a	; 0x7f5a <si5351_clock_enable>
    8796:	81 11       	cpse	r24, r1
    8798:	02 c0       	rjmp	.+4      	; 0x879e <_Z14keyTransmitterb+0x38>
				{
					g_transmitter_keyed = false;
    879a:	10 92 26 49 	sts	0x4926, r1	; 0x804926 <_ZL19g_transmitter_keyed>
    879e:	08 95       	ret

000087a0 <_Z12txGetPowerMwv>:
		}
	}

	uint16_t txGetPowerMw(void)
	{
		return( g_80m_power_level_mW);
    87a0:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <g_80m_power_level_mW>
    87a4:	90 91 31 40 	lds	r25, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
	}
    87a8:	08 95       	ret

000087aa <_Z15txSetParametersPjPb>:

	EC __attribute__((optimize("O0"))) txSetParameters(uint16_t* power_mW, bool* enableDriverPwr)
/*	EC txSetParameters(uint16_t* power_mW, bool* enableDriverPwr) */
	{
    87aa:	cf 93       	push	r28
    87ac:	df 93       	push	r29
    87ae:	cd b7       	in	r28, 0x3d	; 61
    87b0:	de b7       	in	r29, 0x3e	; 62
    87b2:	2b 97       	sbiw	r28, 0x0b	; 11
    87b4:	cd bf       	out	0x3d, r28	; 61
    87b6:	de bf       	out	0x3e, r29	; 62
    87b8:	88 87       	std	Y+8, r24	; 0x08
    87ba:	99 87       	std	Y+9, r25	; 0x09
    87bc:	6a 87       	std	Y+10, r22	; 0x0a
    87be:	7b 87       	std	Y+11, r23	; 0x0b
		bool err = false;
    87c0:	19 82       	std	Y+1, r1	; 0x01
		EC code = ERROR_CODE_NO_ERROR;
    87c2:	1a 82       	std	Y+2, r1	; 0x02
		uint16_t power = 0;
    87c4:	1b 82       	std	Y+3, r1	; 0x03
    87c6:	1c 82       	std	Y+4, r1	; 0x04

		if(power_mW != null)
    87c8:	88 85       	ldd	r24, Y+8	; 0x08
    87ca:	99 85       	ldd	r25, Y+9	; 0x09
    87cc:	89 2b       	or	r24, r25
    87ce:	09 f4       	brne	.+2      	; 0x87d2 <_Z15txSetParametersPjPb+0x28>
    87d0:	64 c0       	rjmp	.+200    	; 0x889a <_Z15txSetParametersPjPb+0xf0>
		{
			power = *power_mW;
    87d2:	88 85       	ldd	r24, Y+8	; 0x08
    87d4:	99 85       	ldd	r25, Y+9	; 0x09
    87d6:	fc 01       	movw	r30, r24
    87d8:	80 81       	ld	r24, Z
    87da:	91 81       	ldd	r25, Z+1	; 0x01
    87dc:	8b 83       	std	Y+3, r24	; 0x03
    87de:	9c 83       	std	Y+4, r25	; 0x04

			if(power <= MAX_TX_POWER_80M_MW)
    87e0:	8b 81       	ldd	r24, Y+3	; 0x03
    87e2:	9c 81       	ldd	r25, Y+4	; 0x04
    87e4:	89 38       	cpi	r24, 0x89	; 137
    87e6:	93 41       	sbci	r25, 0x13	; 19
    87e8:	08 f0       	brcs	.+2      	; 0x87ec <_Z15txSetParametersPjPb+0x42>
    87ea:	53 c0       	rjmp	.+166    	; 0x8892 <_Z15txSetParametersPjPb+0xe8>
			{
				uint8_t drainVoltageDAC, modLevelHigh, modLevelLow;
				code = txMilliwattsToSettings(&power, &drainVoltageDAC, &modLevelHigh, &modLevelLow);
    87ec:	9e 01       	movw	r18, r28
    87ee:	29 5f       	subi	r18, 0xF9	; 249
    87f0:	3f 4f       	sbci	r19, 0xFF	; 255
    87f2:	ae 01       	movw	r20, r28
    87f4:	4a 5f       	subi	r20, 0xFA	; 250
    87f6:	5f 4f       	sbci	r21, 0xFF	; 255
    87f8:	be 01       	movw	r22, r28
    87fa:	6b 5f       	subi	r22, 0xFB	; 251
    87fc:	7f 4f       	sbci	r23, 0xFF	; 255
    87fe:	ce 01       	movw	r24, r28
    8800:	03 96       	adiw	r24, 0x03	; 3
    8802:	0e 94 a8 44 	call	0x8950	; 0x8950 <_Z22txMilliwattsToSettingsPjPhS0_S0_>
    8806:	8a 83       	std	Y+2, r24	; 0x02
				err = (code == ERROR_CODE_SW_LOGIC_ERROR);
    8808:	81 e0       	ldi	r24, 0x01	; 1
    880a:	9a 81       	ldd	r25, Y+2	; 0x02
    880c:	9f 3c       	cpi	r25, 0xCF	; 207
    880e:	09 f0       	breq	.+2      	; 0x8812 <_Z15txSetParametersPjPb+0x68>
    8810:	80 e0       	ldi	r24, 0x00	; 0
    8812:	89 83       	std	Y+1, r24	; 0x01

				g_tx_power_is_zero = (power == 0);
    8814:	8b 81       	ldd	r24, Y+3	; 0x03
    8816:	9c 81       	ldd	r25, Y+4	; 0x04
    8818:	21 e0       	ldi	r18, 0x01	; 1
    881a:	89 2b       	or	r24, r25
    881c:	09 f0       	breq	.+2      	; 0x8820 <_Z15txSetParametersPjPb+0x76>
    881e:	20 e0       	ldi	r18, 0x00	; 0
    8820:	20 93 36 40 	sts	0x4036, r18	; 0x804036 <g_tx_power_is_zero>

				if(!err)
    8824:	99 81       	ldd	r25, Y+1	; 0x01
    8826:	81 e0       	ldi	r24, 0x01	; 1
    8828:	89 27       	eor	r24, r25
    882a:	88 23       	and	r24, r24
    882c:	51 f1       	breq	.+84     	; 0x8882 <_Z15txSetParametersPjPb+0xd8>
				{
					g_80m_power_level_mW = power;
    882e:	8b 81       	ldd	r24, Y+3	; 0x03
    8830:	9c 81       	ldd	r25, Y+4	; 0x04
    8832:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <g_80m_power_level_mW>
    8836:	90 93 31 40 	sts	0x4031, r25	; 0x804031 <g_80m_power_level_mW+0x1>

					if(txIsAntennaForBand())
    883a:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <_Z18txIsAntennaForBandv>
    883e:	88 23       	and	r24, r24
    8840:	31 f0       	breq	.+12     	; 0x884e <_Z15txSetParametersPjPb+0xa4>
					{
						DAC0_setVal(drainVoltageDAC);
    8842:	8d 81       	ldd	r24, Y+5	; 0x05
    8844:	88 2f       	mov	r24, r24
    8846:	90 e0       	ldi	r25, 0x00	; 0
    8848:	0e 94 94 29 	call	0x5328	; 0x5328 <_Z11DAC0_setValj>
    884c:	07 c0       	rjmp	.+14     	; 0x885c <_Z15txSetParametersPjPb+0xb2>
					}
					else
					{
						g_tx_power_is_zero = true;
    884e:	81 e0       	ldi	r24, 0x01	; 1
    8850:	80 93 36 40 	sts	0x4036, r24	; 0x804036 <g_tx_power_is_zero>
						err = true;
    8854:	81 e0       	ldi	r24, 0x01	; 1
    8856:	89 83       	std	Y+1, r24	; 0x01
						code = ERROR_CODE_NO_ANTENNA_PREVENTS_POWER_SETTING;
    8858:	86 ef       	ldi	r24, 0xF6	; 246
    885a:	8a 83       	std	Y+2, r24	; 0x02
					}

					if(g_tx_power_is_zero || (drainVoltageDAC == 0))
    885c:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    8860:	88 23       	and	r24, r24
    8862:	19 f4       	brne	.+6      	; 0x886a <_Z15txSetParametersPjPb+0xc0>
    8864:	8d 81       	ldd	r24, Y+5	; 0x05
    8866:	88 23       	and	r24, r24
    8868:	11 f4       	brne	.+4      	; 0x886e <_Z15txSetParametersPjPb+0xc4>
    886a:	81 e0       	ldi	r24, 0x01	; 1
    886c:	01 c0       	rjmp	.+2      	; 0x8870 <_Z15txSetParametersPjPb+0xc6>
    886e:	80 e0       	ldi	r24, 0x00	; 0
    8870:	88 23       	and	r24, r24
    8872:	21 f0       	breq	.+8      	; 0x887c <_Z15txSetParametersPjPb+0xd2>
					{
						powerToTransmitter(OFF); /* Turn off FET driver */
    8874:	80 e0       	ldi	r24, 0x00	; 0
    8876:	0e 94 af 43 	call	0x875e	; 0x875e <_Z18powerToTransmitterb>
    887a:	03 c0       	rjmp	.+6      	; 0x8882 <_Z15txSetParametersPjPb+0xd8>
					}
					else
					{
						powerToTransmitter(ON); /* Turn on FET driver */
    887c:	81 e0       	ldi	r24, 0x01	; 1
    887e:	0e 94 af 43 	call	0x875e	; 0x875e <_Z18powerToTransmitterb>
					}
				}

				*power_mW = power;
    8882:	2b 81       	ldd	r18, Y+3	; 0x03
    8884:	3c 81       	ldd	r19, Y+4	; 0x04
    8886:	88 85       	ldd	r24, Y+8	; 0x08
    8888:	99 85       	ldd	r25, Y+9	; 0x09
    888a:	fc 01       	movw	r30, r24
    888c:	20 83       	st	Z, r18
    888e:	31 83       	std	Z+1, r19	; 0x01
    8890:	04 c0       	rjmp	.+8      	; 0x889a <_Z15txSetParametersPjPb+0xf0>
			}
			else
			{
				err = true;
    8892:	81 e0       	ldi	r24, 0x01	; 1
    8894:	89 83       	std	Y+1, r24	; 0x01
				code = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    8896:	85 ef       	ldi	r24, 0xF5	; 245
    8898:	8a 83       	std	Y+2, r24	; 0x02
			}
		}

		if(!err)
    889a:	99 81       	ldd	r25, Y+1	; 0x01
    889c:	81 e0       	ldi	r24, 0x01	; 1
    889e:	89 27       	eor	r24, r25
    88a0:	88 23       	and	r24, r24
    88a2:	51 f0       	breq	.+20     	; 0x88b8 <_Z15txSetParametersPjPb+0x10e>
		{
			if(enableDriverPwr != NULL)
    88a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    88a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    88a8:	89 2b       	or	r24, r25
    88aa:	31 f0       	breq	.+12     	; 0x88b8 <_Z15txSetParametersPjPb+0x10e>
			{
				powerToTransmitter(*enableDriverPwr);
    88ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    88ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    88b0:	fc 01       	movw	r30, r24
    88b2:	80 81       	ld	r24, Z
    88b4:	0e 94 af 43 	call	0x875e	; 0x875e <_Z18powerToTransmitterb>
			}
		}

		return(code);
    88b8:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    88ba:	2b 96       	adiw	r28, 0x0b	; 11
    88bc:	cd bf       	out	0x3d, r28	; 61
    88be:	de bf       	out	0x3e, r29	; 62
    88c0:	df 91       	pop	r29
    88c2:	cf 91       	pop	r28
    88c4:	08 95       	ret

000088c6 <_Z16init_transmitterv>:


	EC init_transmitter(void)
	{
    88c6:	1f 93       	push	r17
    88c8:	cf 93       	push	r28
    88ca:	df 93       	push	r29
    88cc:	00 d0       	rcall	.+0      	; 0x88ce <_Z16init_transmitterv+0x8>
    88ce:	cd b7       	in	r28, 0x3d	; 61
    88d0:	de b7       	in	r29, 0x3e	; 62
		EC code;
		
		DAC0_init();
    88d2:	0e 94 a2 29 	call	0x5344	; 0x5344 <_Z9DAC0_initv>

		if((code = (EC)si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
    88d6:	40 e0       	ldi	r20, 0x00	; 0
    88d8:	50 e0       	ldi	r21, 0x00	; 0
    88da:	ba 01       	movw	r22, r20
    88dc:	80 e4       	ldi	r24, 0x40	; 64
    88de:	0e 94 fb 3e 	call	0x7df6	; 0x7df6 <si5351_init>
    88e2:	81 11       	cpse	r24, r1
    88e4:	2f c0       	rjmp	.+94     	; 0x8944 <_Z16init_transmitterv+0x7e>
		{
			return( code);
		}

		if((code = txSetParameters(NULL, NULL)))
    88e6:	60 e0       	ldi	r22, 0x00	; 0
    88e8:	70 e0       	ldi	r23, 0x00	; 0
    88ea:	80 e0       	ldi	r24, 0x00	; 0
    88ec:	90 e0       	ldi	r25, 0x00	; 0
    88ee:	0e 94 d5 43 	call	0x87aa	; 0x87aa <_Z15txSetParametersPjPb>
    88f2:	81 11       	cpse	r24, r1
    88f4:	27 c0       	rjmp	.+78     	; 0x8944 <_Z16init_transmitterv+0x7e>
		{
			return( code);
		}

		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
    88f6:	63 e0       	ldi	r22, 0x03	; 3
    88f8:	81 e0       	ldi	r24, 0x01	; 1
    88fa:	0e 94 ec 3f 	call	0x7fd8	; 0x7fd8 <si5351_drive_strength>
    88fe:	81 11       	cpse	r24, r1
    8900:	21 c0       	rjmp	.+66     	; 0x8944 <_Z16init_transmitterv+0x7e>
		{
			return( code);
		}
		
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    8902:	60 e0       	ldi	r22, 0x00	; 0
    8904:	81 e0       	ldi	r24, 0x01	; 1
    8906:	0e 94 ad 3f 	call	0x7f5a	; 0x7f5a <si5351_clock_enable>
    890a:	18 2f       	mov	r17, r24
    890c:	81 11       	cpse	r24, r1
    890e:	18 c0       	rjmp	.+48     	; 0x8940 <_Z16init_transmitterv+0x7a>
// 		if((code = si5351_clock_enable(TX_CLOCK_VHF_FM, SI5351_CLK_DISABLED)))
// 		{
// 			return( code);
// 		}

		uint16_t pwr_mW = g_80m_power_level_mW;
    8910:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <g_80m_power_level_mW>
    8914:	90 91 31 40 	lds	r25, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
    8918:	89 83       	std	Y+1, r24	; 0x01
    891a:	9a 83       	std	Y+2, r25	; 0x02
		if(txSetFrequency((Frequency_Hz*)&g_80m_frequency, true))
    891c:	61 e0       	ldi	r22, 0x01	; 1
    891e:	8c e2       	ldi	r24, 0x2C	; 44
    8920:	90 e4       	ldi	r25, 0x40	; 64
    8922:	0e 94 74 43 	call	0x86e8	; 0x86e8 <_Z14txSetFrequencyPmb>
    8926:	81 11       	cpse	r24, r1
    8928:	0c c0       	rjmp	.+24     	; 0x8942 <_Z16init_transmitterv+0x7c>
		{
			code = ERROR_CODE_RF_OSCILLATOR_ERROR;
		}
		else
		{
			txSetParameters(&pwr_mW, NULL);
    892a:	60 e0       	ldi	r22, 0x00	; 0
    892c:	70 e0       	ldi	r23, 0x00	; 0
    892e:	ce 01       	movw	r24, r28
    8930:	01 96       	adiw	r24, 0x01	; 1
    8932:	0e 94 d5 43 	call	0x87aa	; 0x87aa <_Z15txSetParametersPjPb>
			g_tx_initialized = true;
    8936:	81 e0       	ldi	r24, 0x01	; 1
    8938:	80 93 25 49 	sts	0x4925, r24	; 0x804925 <_ZL16g_tx_initialized>
		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
		{
			return( code);
		}
		
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    893c:	81 2f       	mov	r24, r17
    893e:	02 c0       	rjmp	.+4      	; 0x8944 <_Z16init_transmitterv+0x7e>
    8940:	01 c0       	rjmp	.+2      	; 0x8944 <_Z16init_transmitterv+0x7e>
// 		}

		uint16_t pwr_mW = g_80m_power_level_mW;
		if(txSetFrequency((Frequency_Hz*)&g_80m_frequency, true))
		{
			code = ERROR_CODE_RF_OSCILLATOR_ERROR;
    8942:	82 ed       	ldi	r24, 0xD2	; 210
			txSetParameters(&pwr_mW, NULL);
			g_tx_initialized = true;
		}

		return( code);
	}
    8944:	0f 90       	pop	r0
    8946:	0f 90       	pop	r0
    8948:	df 91       	pop	r29
    894a:	cf 91       	pop	r28
    894c:	1f 91       	pop	r17
    894e:	08 95       	ret

00008950 <_Z22txMilliwattsToSettingsPjPhS0_S0_>:


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
    8950:	cf 93       	push	r28
    8952:	df 93       	push	r29
    8954:	dc 01       	movw	r26, r24
	EC ec = ERROR_CODE_NO_ERROR;
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
    8956:	89 2b       	or	r24, r25
    8958:	09 f4       	brne	.+2      	; 0x895c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xc>
    895a:	b8 c0       	rjmp	.+368    	; 0x8acc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17c>
		return(ERROR_CODE_SW_LOGIC_ERROR);
	}

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
    895c:	ed 91       	ld	r30, X+
    895e:	fc 91       	ld	r31, X
    8960:	11 97       	sbiw	r26, 0x01	; 1
    8962:	e9 38       	cpi	r30, 0x89	; 137
    8964:	83 e1       	ldi	r24, 0x13	; 19
    8966:	f8 07       	cpc	r31, r24
    8968:	14 f4       	brge	.+4      	; 0x896e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x1e>
	}


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    896a:	80 e0       	ldi	r24, 0x00	; 0
    896c:	01 c0       	rjmp	.+2      	; 0x8970 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x20>

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
	{
		ec = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    896e:	85 ef       	ldi	r24, 0xF5	; 245
	}

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);
    8970:	e9 38       	cpi	r30, 0x89	; 137
    8972:	93 e1       	ldi	r25, 0x13	; 19
    8974:	f9 07       	cpc	r31, r25
    8976:	2c f4       	brge	.+10     	; 0x8982 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x32>
    8978:	ff 23       	and	r31, r31
    897a:	2c f4       	brge	.+10     	; 0x8986 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    897c:	e0 e0       	ldi	r30, 0x00	; 0
    897e:	f0 e0       	ldi	r31, 0x00	; 0
    8980:	02 c0       	rjmp	.+4      	; 0x8986 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    8982:	e8 e8       	ldi	r30, 0x88	; 136
    8984:	f3 e1       	ldi	r31, 0x13	; 19
    8986:	ef 01       	movw	r28, r30
    8988:	ed 93       	st	X+, r30
    898a:	fc 93       	st	X, r31
    898c:	11 97       	sbiw	r26, 0x01	; 1

	if(*powerMW < 5)
    898e:	e5 30       	cpi	r30, 0x05	; 5
    8990:	f1 05       	cpc	r31, r1
    8992:	20 f4       	brcc	.+8      	; 0x899c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x4c>
	{
		index = 0;
		*powerMW = 0;
    8994:	1d 92       	st	X+, r1
    8996:	1c 92       	st	X, r1

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);

	if(*powerMW < 5)
	{
		index = 0;
    8998:	e0 e0       	ldi	r30, 0x00	; 0
    899a:	8d c0       	rjmp	.+282    	; 0x8ab6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 0;
	}
	else if(*powerMW < 50)
    899c:	e2 33       	cpi	r30, 0x32	; 50
    899e:	f1 05       	cpc	r31, r1
    89a0:	30 f4       	brcc	.+12     	; 0x89ae <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x5e>
	{
		index = 1;
		*powerMW = 10;
    89a2:	ea e0       	ldi	r30, 0x0A	; 10
    89a4:	f0 e0       	ldi	r31, 0x00	; 0
    89a6:	ed 93       	st	X+, r30
    89a8:	fc 93       	st	X, r31
		index = 0;
		*powerMW = 0;
	}
	else if(*powerMW < 50)
	{
		index = 1;
    89aa:	e1 e0       	ldi	r30, 0x01	; 1
    89ac:	84 c0       	rjmp	.+264    	; 0x8ab6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 10;
	}
	else if(*powerMW < 150)
    89ae:	e6 39       	cpi	r30, 0x96	; 150
    89b0:	f1 05       	cpc	r31, r1
    89b2:	30 f4       	brcc	.+12     	; 0x89c0 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x70>
	{
		index = 2;
		*powerMW = 100;
    89b4:	e4 e6       	ldi	r30, 0x64	; 100
    89b6:	f0 e0       	ldi	r31, 0x00	; 0
    89b8:	ed 93       	st	X+, r30
    89ba:	fc 93       	st	X, r31
		index = 1;
		*powerMW = 10;
	}
	else if(*powerMW < 150)
	{
		index = 2;
    89bc:	e2 e0       	ldi	r30, 0x02	; 2
    89be:	7b c0       	rjmp	.+246    	; 0x8ab6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 100;
	}
	else if(*powerMW < 250)
    89c0:	ea 3f       	cpi	r30, 0xFA	; 250
    89c2:	f1 05       	cpc	r31, r1
    89c4:	30 f4       	brcc	.+12     	; 0x89d2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x82>
	{
		index = 3;
		*powerMW = 200;
    89c6:	e8 ec       	ldi	r30, 0xC8	; 200
    89c8:	f0 e0       	ldi	r31, 0x00	; 0
    89ca:	ed 93       	st	X+, r30
    89cc:	fc 93       	st	X, r31
		index = 2;
		*powerMW = 100;
	}
	else if(*powerMW < 250)
	{
		index = 3;
    89ce:	e3 e0       	ldi	r30, 0x03	; 3
    89d0:	72 c0       	rjmp	.+228    	; 0x8ab6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 200;
	}
	else if(*powerMW < 350)
    89d2:	ce 35       	cpi	r28, 0x5E	; 94
    89d4:	e1 e0       	ldi	r30, 0x01	; 1
    89d6:	de 07       	cpc	r29, r30
    89d8:	30 f4       	brcc	.+12     	; 0x89e6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x96>
	{
		index = 4;
		*powerMW = 300;
    89da:	ec e2       	ldi	r30, 0x2C	; 44
    89dc:	f1 e0       	ldi	r31, 0x01	; 1
    89de:	ed 93       	st	X+, r30
    89e0:	fc 93       	st	X, r31
		index = 3;
		*powerMW = 200;
	}
	else if(*powerMW < 350)
	{
		index = 4;
    89e2:	e4 e0       	ldi	r30, 0x04	; 4
    89e4:	68 c0       	rjmp	.+208    	; 0x8ab6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 300;
	}
	else if(*powerMW < 450)
    89e6:	c2 3c       	cpi	r28, 0xC2	; 194
    89e8:	f1 e0       	ldi	r31, 0x01	; 1
    89ea:	df 07       	cpc	r29, r31
    89ec:	30 f4       	brcc	.+12     	; 0x89fa <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xaa>
	{
		index = 5;
		*powerMW = 400;
    89ee:	e0 e9       	ldi	r30, 0x90	; 144
    89f0:	f1 e0       	ldi	r31, 0x01	; 1
    89f2:	ed 93       	st	X+, r30
    89f4:	fc 93       	st	X, r31
		index = 4;
		*powerMW = 300;
	}
	else if(*powerMW < 450)
	{
		index = 5;
    89f6:	e5 e0       	ldi	r30, 0x05	; 5
    89f8:	5e c0       	rjmp	.+188    	; 0x8ab6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 400;
	}
	else if(*powerMW < 550)
    89fa:	c6 32       	cpi	r28, 0x26	; 38
    89fc:	92 e0       	ldi	r25, 0x02	; 2
    89fe:	d9 07       	cpc	r29, r25
    8a00:	30 f4       	brcc	.+12     	; 0x8a0e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xbe>
	{
		index = 6;
		*powerMW = 500;
    8a02:	e4 ef       	ldi	r30, 0xF4	; 244
    8a04:	f1 e0       	ldi	r31, 0x01	; 1
    8a06:	ed 93       	st	X+, r30
    8a08:	fc 93       	st	X, r31
		index = 5;
		*powerMW = 400;
	}
	else if(*powerMW < 550)
	{
		index = 6;
    8a0a:	e6 e0       	ldi	r30, 0x06	; 6
    8a0c:	54 c0       	rjmp	.+168    	; 0x8ab6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 500;
	}
	else if(*powerMW < 650)
    8a0e:	ca 38       	cpi	r28, 0x8A	; 138
    8a10:	e2 e0       	ldi	r30, 0x02	; 2
    8a12:	de 07       	cpc	r29, r30
    8a14:	30 f4       	brcc	.+12     	; 0x8a22 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xd2>
	{
		index = 7;
		*powerMW = 600;
    8a16:	e8 e5       	ldi	r30, 0x58	; 88
    8a18:	f2 e0       	ldi	r31, 0x02	; 2
    8a1a:	ed 93       	st	X+, r30
    8a1c:	fc 93       	st	X, r31
		index = 6;
		*powerMW = 500;
	}
	else if(*powerMW < 650)
	{
		index = 7;
    8a1e:	e7 e0       	ldi	r30, 0x07	; 7
    8a20:	4a c0       	rjmp	.+148    	; 0x8ab6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 600;
	}
	else if(*powerMW < 900)
    8a22:	c4 38       	cpi	r28, 0x84	; 132
    8a24:	f3 e0       	ldi	r31, 0x03	; 3
    8a26:	df 07       	cpc	r29, r31
    8a28:	30 f4       	brcc	.+12     	; 0x8a36 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xe6>
	{
		index = 8;
		*powerMW = 800;
    8a2a:	e0 e2       	ldi	r30, 0x20	; 32
    8a2c:	f3 e0       	ldi	r31, 0x03	; 3
    8a2e:	ed 93       	st	X+, r30
    8a30:	fc 93       	st	X, r31
		index = 7;
		*powerMW = 600;
	}
	else if(*powerMW < 900)
	{
		index = 8;
    8a32:	e8 e0       	ldi	r30, 0x08	; 8
    8a34:	40 c0       	rjmp	.+128    	; 0x8ab6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
    8a36:	c2 3e       	cpi	r28, 0xE2	; 226
    8a38:	94 e0       	ldi	r25, 0x04	; 4
    8a3a:	d9 07       	cpc	r29, r25
    8a3c:	30 f4       	brcc	.+12     	; 0x8a4a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xfa>
	{
		index = 9;
		*powerMW = 1000;
    8a3e:	e8 ee       	ldi	r30, 0xE8	; 232
    8a40:	f3 e0       	ldi	r31, 0x03	; 3
    8a42:	ed 93       	st	X+, r30
    8a44:	fc 93       	st	X, r31
		index = 8;
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
	{
		index = 9;
    8a46:	e9 e0       	ldi	r30, 0x09	; 9
    8a48:	36 c0       	rjmp	.+108    	; 0x8ab6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
    8a4a:	c6 3d       	cpi	r28, 0xD6	; 214
    8a4c:	e6 e0       	ldi	r30, 0x06	; 6
    8a4e:	de 07       	cpc	r29, r30
    8a50:	30 f4       	brcc	.+12     	; 0x8a5e <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x10e>
	{
		index = 10;
		*powerMW = 1500;
    8a52:	ec ed       	ldi	r30, 0xDC	; 220
    8a54:	f5 e0       	ldi	r31, 0x05	; 5
    8a56:	ed 93       	st	X+, r30
    8a58:	fc 93       	st	X, r31
		index = 9;
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
	{
		index = 10;
    8a5a:	ea e0       	ldi	r30, 0x0A	; 10
    8a5c:	2c c0       	rjmp	.+88     	; 0x8ab6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
    8a5e:	ca 3c       	cpi	r28, 0xCA	; 202
    8a60:	f8 e0       	ldi	r31, 0x08	; 8
    8a62:	df 07       	cpc	r29, r31
    8a64:	30 f4       	brcc	.+12     	; 0x8a72 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x122>
	{
		index = 11;
		*powerMW = 2000;
    8a66:	e0 ed       	ldi	r30, 0xD0	; 208
    8a68:	f7 e0       	ldi	r31, 0x07	; 7
    8a6a:	ed 93       	st	X+, r30
    8a6c:	fc 93       	st	X, r31
		index = 10;
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
	{
		index = 11;
    8a6e:	eb e0       	ldi	r30, 0x0B	; 11
    8a70:	22 c0       	rjmp	.+68     	; 0x8ab6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
    8a72:	ce 3b       	cpi	r28, 0xBE	; 190
    8a74:	9a e0       	ldi	r25, 0x0A	; 10
    8a76:	d9 07       	cpc	r29, r25
    8a78:	30 f4       	brcc	.+12     	; 0x8a86 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x136>
	{
		index = 12;
		*powerMW = 2500;
    8a7a:	e4 ec       	ldi	r30, 0xC4	; 196
    8a7c:	f9 e0       	ldi	r31, 0x09	; 9
    8a7e:	ed 93       	st	X+, r30
    8a80:	fc 93       	st	X, r31
		index = 11;
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
	{
		index = 12;
    8a82:	ec e0       	ldi	r30, 0x0C	; 12
    8a84:	18 c0       	rjmp	.+48     	; 0x8ab6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
    8a86:	cc 3a       	cpi	r28, 0xAC	; 172
    8a88:	ed e0       	ldi	r30, 0x0D	; 13
    8a8a:	de 07       	cpc	r29, r30
    8a8c:	30 f4       	brcc	.+12     	; 0x8a9a <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x14a>
	{
		index = 13;
		*powerMW = 3000;
    8a8e:	e8 eb       	ldi	r30, 0xB8	; 184
    8a90:	fb e0       	ldi	r31, 0x0B	; 11
    8a92:	ed 93       	st	X+, r30
    8a94:	fc 93       	st	X, r31
		index = 12;
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
	{
		index = 13;
    8a96:	ed e0       	ldi	r30, 0x0D	; 13
    8a98:	0e c0       	rjmp	.+28     	; 0x8ab6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
    8a9a:	c4 39       	cpi	r28, 0x94	; 148
    8a9c:	d1 41       	sbci	r29, 0x11	; 17
    8a9e:	30 f4       	brcc	.+12     	; 0x8aac <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x15c>
	{
		index = 14;
		*powerMW = 4000;
    8aa0:	e0 ea       	ldi	r30, 0xA0	; 160
    8aa2:	ff e0       	ldi	r31, 0x0F	; 15
    8aa4:	ed 93       	st	X+, r30
    8aa6:	fc 93       	st	X, r31
		index = 13;
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
	{
		index = 14;
    8aa8:	ee e0       	ldi	r30, 0x0E	; 14
    8aaa:	05 c0       	rjmp	.+10     	; 0x8ab6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 4000;
	}
	else
	{
		index = 15;
		*powerMW = 5000;
    8aac:	e8 e8       	ldi	r30, 0x88	; 136
    8aae:	f3 e1       	ldi	r31, 0x13	; 19
    8ab0:	ed 93       	st	X+, r30
    8ab2:	fc 93       	st	X, r31
		index = 14;
		*powerMW = 4000;
	}
	else
	{
		index = 15;
    8ab4:	ef e0       	ldi	r30, 0x0F	; 15
		*powerMW = 5000;
	}

	*driveLevel = g_80m_power_table[index];
    8ab6:	f0 e0       	ldi	r31, 0x00	; 0
    8ab8:	e9 5c       	subi	r30, 0xC9	; 201
    8aba:	ff 4b       	sbci	r31, 0xBF	; 191
    8abc:	90 81       	ld	r25, Z
    8abe:	fb 01       	movw	r30, r22
    8ac0:	90 83       	st	Z, r25
	*modLevelHigh = 0;
    8ac2:	fa 01       	movw	r30, r20
    8ac4:	10 82       	st	Z, r1
	*modLevelLow = 0;
    8ac6:	f9 01       	movw	r30, r18
    8ac8:	10 82       	st	Z, r1
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
    8aca:	01 c0       	rjmp	.+2      	; 0x8ace <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17e>
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
	{
		return(ERROR_CODE_SW_LOGIC_ERROR);
    8acc:	8f ec       	ldi	r24, 0xCF	; 207
	*modLevelHigh = 0;
	*modLevelLow = 0;
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
}
    8ace:	df 91       	pop	r29
    8ad0:	cf 91       	pop	r28
    8ad2:	08 95       	ret

00008ad4 <_Z18txIsAntennaForBandv>:

/**
 */
bool __attribute__((optimize("O0"))) txIsAntennaForBand(void)
{
    8ad4:	cf 93       	push	r28
    8ad6:	df 93       	push	r29
    8ad8:	1f 92       	push	r1
    8ada:	cd b7       	in	r28, 0x3d	; 61
    8adc:	de b7       	in	r29, 0x3e	; 62
	bool result = false;
    8ade:	19 82       	std	Y+1, r1	; 0x01

	switch(g_antenna_connect_state)
    8ae0:	80 91 b9 45 	lds	r24, 0x45B9	; 0x8045b9 <g_antenna_connect_state>
    8ae4:	88 2f       	mov	r24, r24
    8ae6:	90 e0       	ldi	r25, 0x00	; 0
    8ae8:	02 97       	sbiw	r24, 0x02	; 2
    8aea:	09 f0       	breq	.+2      	; 0x8aee <_Z18txIsAntennaForBandv+0x1a>

		default:
		{

		}
		break;
    8aec:	03 c0       	rjmp	.+6      	; 0x8af4 <_Z18txIsAntennaForBandv+0x20>

	switch(g_antenna_connect_state)
	{
		case ANT_80M_CONNECTED:
		{
			result = true;
    8aee:	81 e0       	ldi	r24, 0x01	; 1
    8af0:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
    8af2:	00 00       	nop

		}
		break;
	}

	return( result);
    8af4:	89 81       	ldd	r24, Y+1	; 0x01
}
    8af6:	0f 90       	pop	r0
    8af8:	df 91       	pop	r29
    8afa:	cf 91       	pop	r28
    8afc:	08 95       	ret

00008afe <USART0_get_data>:
 *
 * \return Nothing
 */
void USART4_enable_rx()
{
	USART4.CTRLB |= USART_RXEN_bm;
    8afe:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7e0800>
    8b02:	08 95       	ret

00008b04 <USART1_init>:
    8b04:	0e 94 22 47 	call	0x8e44	; 0x8e44 <__floatunsisf>
    8b08:	20 e0       	ldi	r18, 0x00	; 0
    8b0a:	30 e0       	ldi	r19, 0x00	; 0
    8b0c:	40 e8       	ldi	r20, 0x80	; 128
    8b0e:	51 e4       	ldi	r21, 0x41	; 65
    8b10:	0e 94 d9 47 	call	0x8fb2	; 0x8fb2 <__mulsf3>
    8b14:	9b 01       	movw	r18, r22
    8b16:	ac 01       	movw	r20, r24
    8b18:	60 e0       	ldi	r22, 0x00	; 0
    8b1a:	74 e2       	ldi	r23, 0x24	; 36
    8b1c:	84 e7       	ldi	r24, 0x74	; 116
    8b1e:	9d e4       	ldi	r25, 0x4D	; 77
    8b20:	0e 94 7a 46 	call	0x8cf4	; 0x8cf4 <__divsf3>
    8b24:	20 e0       	ldi	r18, 0x00	; 0
    8b26:	30 e0       	ldi	r19, 0x00	; 0
    8b28:	40 e0       	ldi	r20, 0x00	; 0
    8b2a:	5f e3       	ldi	r21, 0x3F	; 63
    8b2c:	0e 94 09 46 	call	0x8c12	; 0x8c12 <__addsf3>
    8b30:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <__fixunssfsi>
    8b34:	e0 e2       	ldi	r30, 0x20	; 32
    8b36:	f8 e0       	ldi	r31, 0x08	; 8
    8b38:	60 87       	std	Z+8, r22	; 0x08
    8b3a:	71 87       	std	Z+9, r23	; 0x09
    8b3c:	80 e8       	ldi	r24, 0x80	; 128
    8b3e:	85 83       	std	Z+5, r24	; 0x05
    8b40:	80 ec       	ldi	r24, 0xC0	; 192
    8b42:	86 83       	std	Z+6, r24	; 0x06
    8b44:	80 e0       	ldi	r24, 0x00	; 0
    8b46:	08 95       	ret

00008b48 <USART1_enable_tx>:
    8b48:	e0 e2       	ldi	r30, 0x20	; 32
    8b4a:	f8 e0       	ldi	r31, 0x08	; 8
    8b4c:	86 81       	ldd	r24, Z+6	; 0x06
    8b4e:	80 64       	ori	r24, 0x40	; 64
    8b50:	86 83       	std	Z+6, r24	; 0x06
    8b52:	85 81       	ldd	r24, Z+5	; 0x05
    8b54:	80 62       	ori	r24, 0x20	; 32
    8b56:	85 83       	std	Z+5, r24	; 0x05
    8b58:	08 95       	ret

00008b5a <USART1_disable>:
    8b5a:	e0 e2       	ldi	r30, 0x20	; 32
    8b5c:	f8 e0       	ldi	r31, 0x08	; 8
    8b5e:	86 81       	ldd	r24, Z+6	; 0x06
    8b60:	8f 73       	andi	r24, 0x3F	; 63
    8b62:	86 83       	std	Z+6, r24	; 0x06
    8b64:	08 95       	ret

00008b66 <USART1_get_data>:
    8b66:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
    8b6a:	08 95       	ret

00008b6c <USART4_init>:
    8b6c:	0e 94 22 47 	call	0x8e44	; 0x8e44 <__floatunsisf>
    8b70:	20 e0       	ldi	r18, 0x00	; 0
    8b72:	30 e0       	ldi	r19, 0x00	; 0
    8b74:	40 e8       	ldi	r20, 0x80	; 128
    8b76:	51 e4       	ldi	r21, 0x41	; 65
    8b78:	0e 94 d9 47 	call	0x8fb2	; 0x8fb2 <__mulsf3>
    8b7c:	9b 01       	movw	r18, r22
    8b7e:	ac 01       	movw	r20, r24
    8b80:	60 e0       	ldi	r22, 0x00	; 0
    8b82:	74 e2       	ldi	r23, 0x24	; 36
    8b84:	84 e7       	ldi	r24, 0x74	; 116
    8b86:	9d e4       	ldi	r25, 0x4D	; 77
    8b88:	0e 94 7a 46 	call	0x8cf4	; 0x8cf4 <__divsf3>
    8b8c:	20 e0       	ldi	r18, 0x00	; 0
    8b8e:	30 e0       	ldi	r19, 0x00	; 0
    8b90:	40 e0       	ldi	r20, 0x00	; 0
    8b92:	5f e3       	ldi	r21, 0x3F	; 63
    8b94:	0e 94 09 46 	call	0x8c12	; 0x8c12 <__addsf3>
    8b98:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <__fixunssfsi>
    8b9c:	e0 e8       	ldi	r30, 0x80	; 128
    8b9e:	f8 e0       	ldi	r31, 0x08	; 8
    8ba0:	60 87       	std	Z+8, r22	; 0x08
    8ba2:	71 87       	std	Z+9, r23	; 0x09
    8ba4:	80 e8       	ldi	r24, 0x80	; 128
    8ba6:	85 83       	std	Z+5, r24	; 0x05
    8ba8:	80 ec       	ldi	r24, 0xC0	; 192
    8baa:	86 83       	std	Z+6, r24	; 0x06
    8bac:	80 e0       	ldi	r24, 0x00	; 0
    8bae:	08 95       	ret

00008bb0 <USART4_enable_tx>:
 *
 * \return Nothing
 */
void USART4_enable_tx()
{
	USART4.CTRLB |= USART_TXEN_bm;
    8bb0:	e0 e8       	ldi	r30, 0x80	; 128
    8bb2:	f8 e0       	ldi	r31, 0x08	; 8
    8bb4:	86 81       	ldd	r24, Z+6	; 0x06
    8bb6:	80 64       	ori	r24, 0x40	; 64
    8bb8:	86 83       	std	Z+6, r24	; 0x06
	USART4.CTRLA |= 1 << USART_DREIE_bp; /* Transmit Data Ready Interrupt Enable: enable */
    8bba:	85 81       	ldd	r24, Z+5	; 0x05
    8bbc:	80 62       	ori	r24, 0x20	; 32
    8bbe:	85 83       	std	Z+5, r24	; 0x05
    8bc0:	08 95       	ret

00008bc2 <USART4_disable>:
 *
 * \return Nothing
 */
void USART4_disable()
{
	USART4.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
    8bc2:	e0 e8       	ldi	r30, 0x80	; 128
    8bc4:	f8 e0       	ldi	r31, 0x08	; 8
    8bc6:	86 81       	ldd	r24, Z+6	; 0x06
    8bc8:	8f 73       	andi	r24, 0x3F	; 63
    8bca:	86 83       	std	Z+6, r24	; 0x06
    8bcc:	08 95       	ret

00008bce <USART4_get_data>:
 *
 * \return Data register from USART4 module
 */
uint8_t USART4_get_data()
{
	return USART4.RXDATAL;
    8bce:	80 91 80 08 	lds	r24, 0x0880	; 0x800880 <__TEXT_REGION_LENGTH__+0x7e0880>
}
    8bd2:	08 95       	ret

00008bd4 <_Z7timeDifmm>:
    (ltm.tm_year-70)*31536000L + ((ltm.tm_year-69)/4)*86400L -
    ((ltm.tm_year-1)/100)*86400L + ((ltm.tm_year+299)/400)*86400L;
  }

  return result;
}
    8bd4:	26 17       	cp	r18, r22
    8bd6:	37 07       	cpc	r19, r23
    8bd8:	48 07       	cpc	r20, r24
    8bda:	59 07       	cpc	r21, r25
    8bdc:	28 f4       	brcc	.+10     	; 0x8be8 <_Z7timeDifmm+0x14>
    8bde:	62 1b       	sub	r22, r18
    8be0:	73 0b       	sbc	r23, r19
    8be2:	84 0b       	sbc	r24, r20
    8be4:	95 0b       	sbc	r25, r21
    8be6:	08 95       	ret
    8be8:	62 1b       	sub	r22, r18
    8bea:	73 0b       	sbc	r23, r19
    8bec:	84 0b       	sbc	r24, r20
    8bee:	95 0b       	sbc	r25, r21
    8bf0:	08 95       	ret

00008bf2 <_Z11only_digitsPc>:

/** 
 * Checks a string to see if it contains only numerical characters
 */
bool only_digits(char *s)
{
    8bf2:	fc 01       	movw	r30, r24
	while(*s)
    8bf4:	20 81       	ld	r18, Z
    8bf6:	22 23       	and	r18, r18
    8bf8:	49 f0       	breq	.+18     	; 0x8c0c <_Z11only_digitsPc+0x1a>
	{
		if(isdigit(*s++) == 0)
    8bfa:	31 96       	adiw	r30, 0x01	; 1
    8bfc:	30 e0       	ldi	r19, 0x00	; 0
    8bfe:	20 53       	subi	r18, 0x30	; 48
    8c00:	31 09       	sbc	r19, r1
    8c02:	2a 30       	cpi	r18, 0x0A	; 10
    8c04:	31 05       	cpc	r19, r1
    8c06:	b0 f3       	brcs	.-20     	; 0x8bf4 <_Z11only_digitsPc+0x2>
		{
			return( false);
    8c08:	80 e0       	ldi	r24, 0x00	; 0
    8c0a:	08 95       	ret
		}
	}

	return( true);
    8c0c:	81 e0       	ldi	r24, 0x01	; 1
}
    8c0e:	08 95       	ret

00008c10 <__subsf3>:
    8c10:	50 58       	subi	r21, 0x80	; 128

00008c12 <__addsf3>:
    8c12:	bb 27       	eor	r27, r27
    8c14:	aa 27       	eor	r26, r26
    8c16:	0e 94 20 46 	call	0x8c40	; 0x8c40 <__addsf3x>
    8c1a:	0c 94 9a 47 	jmp	0x8f34	; 0x8f34 <__fp_round>
    8c1e:	0e 94 8c 47 	call	0x8f18	; 0x8f18 <__fp_pscA>
    8c22:	38 f0       	brcs	.+14     	; 0x8c32 <__addsf3+0x20>
    8c24:	0e 94 93 47 	call	0x8f26	; 0x8f26 <__fp_pscB>
    8c28:	20 f0       	brcs	.+8      	; 0x8c32 <__addsf3+0x20>
    8c2a:	39 f4       	brne	.+14     	; 0x8c3a <__addsf3+0x28>
    8c2c:	9f 3f       	cpi	r25, 0xFF	; 255
    8c2e:	19 f4       	brne	.+6      	; 0x8c36 <__addsf3+0x24>
    8c30:	26 f4       	brtc	.+8      	; 0x8c3a <__addsf3+0x28>
    8c32:	0c 94 89 47 	jmp	0x8f12	; 0x8f12 <__fp_nan>
    8c36:	0e f4       	brtc	.+2      	; 0x8c3a <__addsf3+0x28>
    8c38:	e0 95       	com	r30
    8c3a:	e7 fb       	bst	r30, 7
    8c3c:	0c 94 83 47 	jmp	0x8f06	; 0x8f06 <__fp_inf>

00008c40 <__addsf3x>:
    8c40:	e9 2f       	mov	r30, r25
    8c42:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <__fp_split3>
    8c46:	58 f3       	brcs	.-42     	; 0x8c1e <__addsf3+0xc>
    8c48:	ba 17       	cp	r27, r26
    8c4a:	62 07       	cpc	r22, r18
    8c4c:	73 07       	cpc	r23, r19
    8c4e:	84 07       	cpc	r24, r20
    8c50:	95 07       	cpc	r25, r21
    8c52:	20 f0       	brcs	.+8      	; 0x8c5c <__addsf3x+0x1c>
    8c54:	79 f4       	brne	.+30     	; 0x8c74 <__addsf3x+0x34>
    8c56:	a6 f5       	brtc	.+104    	; 0x8cc0 <__addsf3x+0x80>
    8c58:	0c 94 cd 47 	jmp	0x8f9a	; 0x8f9a <__fp_zero>
    8c5c:	0e f4       	brtc	.+2      	; 0x8c60 <__addsf3x+0x20>
    8c5e:	e0 95       	com	r30
    8c60:	0b 2e       	mov	r0, r27
    8c62:	ba 2f       	mov	r27, r26
    8c64:	a0 2d       	mov	r26, r0
    8c66:	0b 01       	movw	r0, r22
    8c68:	b9 01       	movw	r22, r18
    8c6a:	90 01       	movw	r18, r0
    8c6c:	0c 01       	movw	r0, r24
    8c6e:	ca 01       	movw	r24, r20
    8c70:	a0 01       	movw	r20, r0
    8c72:	11 24       	eor	r1, r1
    8c74:	ff 27       	eor	r31, r31
    8c76:	59 1b       	sub	r21, r25
    8c78:	99 f0       	breq	.+38     	; 0x8ca0 <__addsf3x+0x60>
    8c7a:	59 3f       	cpi	r21, 0xF9	; 249
    8c7c:	50 f4       	brcc	.+20     	; 0x8c92 <__addsf3x+0x52>
    8c7e:	50 3e       	cpi	r21, 0xE0	; 224
    8c80:	68 f1       	brcs	.+90     	; 0x8cdc <__addsf3x+0x9c>
    8c82:	1a 16       	cp	r1, r26
    8c84:	f0 40       	sbci	r31, 0x00	; 0
    8c86:	a2 2f       	mov	r26, r18
    8c88:	23 2f       	mov	r18, r19
    8c8a:	34 2f       	mov	r19, r20
    8c8c:	44 27       	eor	r20, r20
    8c8e:	58 5f       	subi	r21, 0xF8	; 248
    8c90:	f3 cf       	rjmp	.-26     	; 0x8c78 <__addsf3x+0x38>
    8c92:	46 95       	lsr	r20
    8c94:	37 95       	ror	r19
    8c96:	27 95       	ror	r18
    8c98:	a7 95       	ror	r26
    8c9a:	f0 40       	sbci	r31, 0x00	; 0
    8c9c:	53 95       	inc	r21
    8c9e:	c9 f7       	brne	.-14     	; 0x8c92 <__addsf3x+0x52>
    8ca0:	7e f4       	brtc	.+30     	; 0x8cc0 <__addsf3x+0x80>
    8ca2:	1f 16       	cp	r1, r31
    8ca4:	ba 0b       	sbc	r27, r26
    8ca6:	62 0b       	sbc	r22, r18
    8ca8:	73 0b       	sbc	r23, r19
    8caa:	84 0b       	sbc	r24, r20
    8cac:	ba f0       	brmi	.+46     	; 0x8cdc <__addsf3x+0x9c>
    8cae:	91 50       	subi	r25, 0x01	; 1
    8cb0:	a1 f0       	breq	.+40     	; 0x8cda <__addsf3x+0x9a>
    8cb2:	ff 0f       	add	r31, r31
    8cb4:	bb 1f       	adc	r27, r27
    8cb6:	66 1f       	adc	r22, r22
    8cb8:	77 1f       	adc	r23, r23
    8cba:	88 1f       	adc	r24, r24
    8cbc:	c2 f7       	brpl	.-16     	; 0x8cae <__addsf3x+0x6e>
    8cbe:	0e c0       	rjmp	.+28     	; 0x8cdc <__addsf3x+0x9c>
    8cc0:	ba 0f       	add	r27, r26
    8cc2:	62 1f       	adc	r22, r18
    8cc4:	73 1f       	adc	r23, r19
    8cc6:	84 1f       	adc	r24, r20
    8cc8:	48 f4       	brcc	.+18     	; 0x8cdc <__addsf3x+0x9c>
    8cca:	87 95       	ror	r24
    8ccc:	77 95       	ror	r23
    8cce:	67 95       	ror	r22
    8cd0:	b7 95       	ror	r27
    8cd2:	f7 95       	ror	r31
    8cd4:	9e 3f       	cpi	r25, 0xFE	; 254
    8cd6:	08 f0       	brcs	.+2      	; 0x8cda <__addsf3x+0x9a>
    8cd8:	b0 cf       	rjmp	.-160    	; 0x8c3a <__addsf3+0x28>
    8cda:	93 95       	inc	r25
    8cdc:	88 0f       	add	r24, r24
    8cde:	08 f0       	brcs	.+2      	; 0x8ce2 <__addsf3x+0xa2>
    8ce0:	99 27       	eor	r25, r25
    8ce2:	ee 0f       	add	r30, r30
    8ce4:	97 95       	ror	r25
    8ce6:	87 95       	ror	r24
    8ce8:	08 95       	ret

00008cea <__cmpsf2>:
    8cea:	0e 94 5f 47 	call	0x8ebe	; 0x8ebe <__fp_cmp>
    8cee:	08 f4       	brcc	.+2      	; 0x8cf2 <__cmpsf2+0x8>
    8cf0:	81 e0       	ldi	r24, 0x01	; 1
    8cf2:	08 95       	ret

00008cf4 <__divsf3>:
    8cf4:	0e 94 8e 46 	call	0x8d1c	; 0x8d1c <__divsf3x>
    8cf8:	0c 94 9a 47 	jmp	0x8f34	; 0x8f34 <__fp_round>
    8cfc:	0e 94 93 47 	call	0x8f26	; 0x8f26 <__fp_pscB>
    8d00:	58 f0       	brcs	.+22     	; 0x8d18 <__divsf3+0x24>
    8d02:	0e 94 8c 47 	call	0x8f18	; 0x8f18 <__fp_pscA>
    8d06:	40 f0       	brcs	.+16     	; 0x8d18 <__divsf3+0x24>
    8d08:	29 f4       	brne	.+10     	; 0x8d14 <__divsf3+0x20>
    8d0a:	5f 3f       	cpi	r21, 0xFF	; 255
    8d0c:	29 f0       	breq	.+10     	; 0x8d18 <__divsf3+0x24>
    8d0e:	0c 94 83 47 	jmp	0x8f06	; 0x8f06 <__fp_inf>
    8d12:	51 11       	cpse	r21, r1
    8d14:	0c 94 ce 47 	jmp	0x8f9c	; 0x8f9c <__fp_szero>
    8d18:	0c 94 89 47 	jmp	0x8f12	; 0x8f12 <__fp_nan>

00008d1c <__divsf3x>:
    8d1c:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <__fp_split3>
    8d20:	68 f3       	brcs	.-38     	; 0x8cfc <__divsf3+0x8>

00008d22 <__divsf3_pse>:
    8d22:	99 23       	and	r25, r25
    8d24:	b1 f3       	breq	.-20     	; 0x8d12 <__divsf3+0x1e>
    8d26:	55 23       	and	r21, r21
    8d28:	91 f3       	breq	.-28     	; 0x8d0e <__divsf3+0x1a>
    8d2a:	95 1b       	sub	r25, r21
    8d2c:	55 0b       	sbc	r21, r21
    8d2e:	bb 27       	eor	r27, r27
    8d30:	aa 27       	eor	r26, r26
    8d32:	62 17       	cp	r22, r18
    8d34:	73 07       	cpc	r23, r19
    8d36:	84 07       	cpc	r24, r20
    8d38:	38 f0       	brcs	.+14     	; 0x8d48 <__divsf3_pse+0x26>
    8d3a:	9f 5f       	subi	r25, 0xFF	; 255
    8d3c:	5f 4f       	sbci	r21, 0xFF	; 255
    8d3e:	22 0f       	add	r18, r18
    8d40:	33 1f       	adc	r19, r19
    8d42:	44 1f       	adc	r20, r20
    8d44:	aa 1f       	adc	r26, r26
    8d46:	a9 f3       	breq	.-22     	; 0x8d32 <__divsf3_pse+0x10>
    8d48:	35 d0       	rcall	.+106    	; 0x8db4 <__divsf3_pse+0x92>
    8d4a:	0e 2e       	mov	r0, r30
    8d4c:	3a f0       	brmi	.+14     	; 0x8d5c <__divsf3_pse+0x3a>
    8d4e:	e0 e8       	ldi	r30, 0x80	; 128
    8d50:	32 d0       	rcall	.+100    	; 0x8db6 <__divsf3_pse+0x94>
    8d52:	91 50       	subi	r25, 0x01	; 1
    8d54:	50 40       	sbci	r21, 0x00	; 0
    8d56:	e6 95       	lsr	r30
    8d58:	00 1c       	adc	r0, r0
    8d5a:	ca f7       	brpl	.-14     	; 0x8d4e <__divsf3_pse+0x2c>
    8d5c:	2b d0       	rcall	.+86     	; 0x8db4 <__divsf3_pse+0x92>
    8d5e:	fe 2f       	mov	r31, r30
    8d60:	29 d0       	rcall	.+82     	; 0x8db4 <__divsf3_pse+0x92>
    8d62:	66 0f       	add	r22, r22
    8d64:	77 1f       	adc	r23, r23
    8d66:	88 1f       	adc	r24, r24
    8d68:	bb 1f       	adc	r27, r27
    8d6a:	26 17       	cp	r18, r22
    8d6c:	37 07       	cpc	r19, r23
    8d6e:	48 07       	cpc	r20, r24
    8d70:	ab 07       	cpc	r26, r27
    8d72:	b0 e8       	ldi	r27, 0x80	; 128
    8d74:	09 f0       	breq	.+2      	; 0x8d78 <__divsf3_pse+0x56>
    8d76:	bb 0b       	sbc	r27, r27
    8d78:	80 2d       	mov	r24, r0
    8d7a:	bf 01       	movw	r22, r30
    8d7c:	ff 27       	eor	r31, r31
    8d7e:	93 58       	subi	r25, 0x83	; 131
    8d80:	5f 4f       	sbci	r21, 0xFF	; 255
    8d82:	3a f0       	brmi	.+14     	; 0x8d92 <__divsf3_pse+0x70>
    8d84:	9e 3f       	cpi	r25, 0xFE	; 254
    8d86:	51 05       	cpc	r21, r1
    8d88:	78 f0       	brcs	.+30     	; 0x8da8 <__divsf3_pse+0x86>
    8d8a:	0c 94 83 47 	jmp	0x8f06	; 0x8f06 <__fp_inf>
    8d8e:	0c 94 ce 47 	jmp	0x8f9c	; 0x8f9c <__fp_szero>
    8d92:	5f 3f       	cpi	r21, 0xFF	; 255
    8d94:	e4 f3       	brlt	.-8      	; 0x8d8e <__divsf3_pse+0x6c>
    8d96:	98 3e       	cpi	r25, 0xE8	; 232
    8d98:	d4 f3       	brlt	.-12     	; 0x8d8e <__divsf3_pse+0x6c>
    8d9a:	86 95       	lsr	r24
    8d9c:	77 95       	ror	r23
    8d9e:	67 95       	ror	r22
    8da0:	b7 95       	ror	r27
    8da2:	f7 95       	ror	r31
    8da4:	9f 5f       	subi	r25, 0xFF	; 255
    8da6:	c9 f7       	brne	.-14     	; 0x8d9a <__divsf3_pse+0x78>
    8da8:	88 0f       	add	r24, r24
    8daa:	91 1d       	adc	r25, r1
    8dac:	96 95       	lsr	r25
    8dae:	87 95       	ror	r24
    8db0:	97 f9       	bld	r25, 7
    8db2:	08 95       	ret
    8db4:	e1 e0       	ldi	r30, 0x01	; 1
    8db6:	66 0f       	add	r22, r22
    8db8:	77 1f       	adc	r23, r23
    8dba:	88 1f       	adc	r24, r24
    8dbc:	bb 1f       	adc	r27, r27
    8dbe:	62 17       	cp	r22, r18
    8dc0:	73 07       	cpc	r23, r19
    8dc2:	84 07       	cpc	r24, r20
    8dc4:	ba 07       	cpc	r27, r26
    8dc6:	20 f0       	brcs	.+8      	; 0x8dd0 <__divsf3_pse+0xae>
    8dc8:	62 1b       	sub	r22, r18
    8dca:	73 0b       	sbc	r23, r19
    8dcc:	84 0b       	sbc	r24, r20
    8dce:	ba 0b       	sbc	r27, r26
    8dd0:	ee 1f       	adc	r30, r30
    8dd2:	88 f7       	brcc	.-30     	; 0x8db6 <__divsf3_pse+0x94>
    8dd4:	e0 95       	com	r30
    8dd6:	08 95       	ret

00008dd8 <__fixsfsi>:
    8dd8:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <__fixunssfsi>
    8ddc:	68 94       	set
    8dde:	b1 11       	cpse	r27, r1
    8de0:	0c 94 ce 47 	jmp	0x8f9c	; 0x8f9c <__fp_szero>
    8de4:	08 95       	ret

00008de6 <__fixunssfsi>:
    8de6:	0e 94 b3 47 	call	0x8f66	; 0x8f66 <__fp_splitA>
    8dea:	88 f0       	brcs	.+34     	; 0x8e0e <__fixunssfsi+0x28>
    8dec:	9f 57       	subi	r25, 0x7F	; 127
    8dee:	98 f0       	brcs	.+38     	; 0x8e16 <__fixunssfsi+0x30>
    8df0:	b9 2f       	mov	r27, r25
    8df2:	99 27       	eor	r25, r25
    8df4:	b7 51       	subi	r27, 0x17	; 23
    8df6:	b0 f0       	brcs	.+44     	; 0x8e24 <__fixunssfsi+0x3e>
    8df8:	e1 f0       	breq	.+56     	; 0x8e32 <__fixunssfsi+0x4c>
    8dfa:	66 0f       	add	r22, r22
    8dfc:	77 1f       	adc	r23, r23
    8dfe:	88 1f       	adc	r24, r24
    8e00:	99 1f       	adc	r25, r25
    8e02:	1a f0       	brmi	.+6      	; 0x8e0a <__fixunssfsi+0x24>
    8e04:	ba 95       	dec	r27
    8e06:	c9 f7       	brne	.-14     	; 0x8dfa <__fixunssfsi+0x14>
    8e08:	14 c0       	rjmp	.+40     	; 0x8e32 <__fixunssfsi+0x4c>
    8e0a:	b1 30       	cpi	r27, 0x01	; 1
    8e0c:	91 f0       	breq	.+36     	; 0x8e32 <__fixunssfsi+0x4c>
    8e0e:	0e 94 cd 47 	call	0x8f9a	; 0x8f9a <__fp_zero>
    8e12:	b1 e0       	ldi	r27, 0x01	; 1
    8e14:	08 95       	ret
    8e16:	0c 94 cd 47 	jmp	0x8f9a	; 0x8f9a <__fp_zero>
    8e1a:	67 2f       	mov	r22, r23
    8e1c:	78 2f       	mov	r23, r24
    8e1e:	88 27       	eor	r24, r24
    8e20:	b8 5f       	subi	r27, 0xF8	; 248
    8e22:	39 f0       	breq	.+14     	; 0x8e32 <__fixunssfsi+0x4c>
    8e24:	b9 3f       	cpi	r27, 0xF9	; 249
    8e26:	cc f3       	brlt	.-14     	; 0x8e1a <__fixunssfsi+0x34>
    8e28:	86 95       	lsr	r24
    8e2a:	77 95       	ror	r23
    8e2c:	67 95       	ror	r22
    8e2e:	b3 95       	inc	r27
    8e30:	d9 f7       	brne	.-10     	; 0x8e28 <__fixunssfsi+0x42>
    8e32:	3e f4       	brtc	.+14     	; 0x8e42 <__fixunssfsi+0x5c>
    8e34:	90 95       	com	r25
    8e36:	80 95       	com	r24
    8e38:	70 95       	com	r23
    8e3a:	61 95       	neg	r22
    8e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    8e3e:	8f 4f       	sbci	r24, 0xFF	; 255
    8e40:	9f 4f       	sbci	r25, 0xFF	; 255
    8e42:	08 95       	ret

00008e44 <__floatunsisf>:
    8e44:	e8 94       	clt
    8e46:	09 c0       	rjmp	.+18     	; 0x8e5a <__floatsisf+0x12>

00008e48 <__floatsisf>:
    8e48:	97 fb       	bst	r25, 7
    8e4a:	3e f4       	brtc	.+14     	; 0x8e5a <__floatsisf+0x12>
    8e4c:	90 95       	com	r25
    8e4e:	80 95       	com	r24
    8e50:	70 95       	com	r23
    8e52:	61 95       	neg	r22
    8e54:	7f 4f       	sbci	r23, 0xFF	; 255
    8e56:	8f 4f       	sbci	r24, 0xFF	; 255
    8e58:	9f 4f       	sbci	r25, 0xFF	; 255
    8e5a:	99 23       	and	r25, r25
    8e5c:	a9 f0       	breq	.+42     	; 0x8e88 <__floatsisf+0x40>
    8e5e:	f9 2f       	mov	r31, r25
    8e60:	96 e9       	ldi	r25, 0x96	; 150
    8e62:	bb 27       	eor	r27, r27
    8e64:	93 95       	inc	r25
    8e66:	f6 95       	lsr	r31
    8e68:	87 95       	ror	r24
    8e6a:	77 95       	ror	r23
    8e6c:	67 95       	ror	r22
    8e6e:	b7 95       	ror	r27
    8e70:	f1 11       	cpse	r31, r1
    8e72:	f8 cf       	rjmp	.-16     	; 0x8e64 <__floatsisf+0x1c>
    8e74:	fa f4       	brpl	.+62     	; 0x8eb4 <__floatsisf+0x6c>
    8e76:	bb 0f       	add	r27, r27
    8e78:	11 f4       	brne	.+4      	; 0x8e7e <__floatsisf+0x36>
    8e7a:	60 ff       	sbrs	r22, 0
    8e7c:	1b c0       	rjmp	.+54     	; 0x8eb4 <__floatsisf+0x6c>
    8e7e:	6f 5f       	subi	r22, 0xFF	; 255
    8e80:	7f 4f       	sbci	r23, 0xFF	; 255
    8e82:	8f 4f       	sbci	r24, 0xFF	; 255
    8e84:	9f 4f       	sbci	r25, 0xFF	; 255
    8e86:	16 c0       	rjmp	.+44     	; 0x8eb4 <__floatsisf+0x6c>
    8e88:	88 23       	and	r24, r24
    8e8a:	11 f0       	breq	.+4      	; 0x8e90 <__floatsisf+0x48>
    8e8c:	96 e9       	ldi	r25, 0x96	; 150
    8e8e:	11 c0       	rjmp	.+34     	; 0x8eb2 <__floatsisf+0x6a>
    8e90:	77 23       	and	r23, r23
    8e92:	21 f0       	breq	.+8      	; 0x8e9c <__floatsisf+0x54>
    8e94:	9e e8       	ldi	r25, 0x8E	; 142
    8e96:	87 2f       	mov	r24, r23
    8e98:	76 2f       	mov	r23, r22
    8e9a:	05 c0       	rjmp	.+10     	; 0x8ea6 <__floatsisf+0x5e>
    8e9c:	66 23       	and	r22, r22
    8e9e:	71 f0       	breq	.+28     	; 0x8ebc <__floatsisf+0x74>
    8ea0:	96 e8       	ldi	r25, 0x86	; 134
    8ea2:	86 2f       	mov	r24, r22
    8ea4:	70 e0       	ldi	r23, 0x00	; 0
    8ea6:	60 e0       	ldi	r22, 0x00	; 0
    8ea8:	2a f0       	brmi	.+10     	; 0x8eb4 <__floatsisf+0x6c>
    8eaa:	9a 95       	dec	r25
    8eac:	66 0f       	add	r22, r22
    8eae:	77 1f       	adc	r23, r23
    8eb0:	88 1f       	adc	r24, r24
    8eb2:	da f7       	brpl	.-10     	; 0x8eaa <__floatsisf+0x62>
    8eb4:	88 0f       	add	r24, r24
    8eb6:	96 95       	lsr	r25
    8eb8:	87 95       	ror	r24
    8eba:	97 f9       	bld	r25, 7
    8ebc:	08 95       	ret

00008ebe <__fp_cmp>:
    8ebe:	99 0f       	add	r25, r25
    8ec0:	00 08       	sbc	r0, r0
    8ec2:	55 0f       	add	r21, r21
    8ec4:	aa 0b       	sbc	r26, r26
    8ec6:	e0 e8       	ldi	r30, 0x80	; 128
    8ec8:	fe ef       	ldi	r31, 0xFE	; 254
    8eca:	16 16       	cp	r1, r22
    8ecc:	17 06       	cpc	r1, r23
    8ece:	e8 07       	cpc	r30, r24
    8ed0:	f9 07       	cpc	r31, r25
    8ed2:	c0 f0       	brcs	.+48     	; 0x8f04 <__fp_cmp+0x46>
    8ed4:	12 16       	cp	r1, r18
    8ed6:	13 06       	cpc	r1, r19
    8ed8:	e4 07       	cpc	r30, r20
    8eda:	f5 07       	cpc	r31, r21
    8edc:	98 f0       	brcs	.+38     	; 0x8f04 <__fp_cmp+0x46>
    8ede:	62 1b       	sub	r22, r18
    8ee0:	73 0b       	sbc	r23, r19
    8ee2:	84 0b       	sbc	r24, r20
    8ee4:	95 0b       	sbc	r25, r21
    8ee6:	39 f4       	brne	.+14     	; 0x8ef6 <__fp_cmp+0x38>
    8ee8:	0a 26       	eor	r0, r26
    8eea:	61 f0       	breq	.+24     	; 0x8f04 <__fp_cmp+0x46>
    8eec:	23 2b       	or	r18, r19
    8eee:	24 2b       	or	r18, r20
    8ef0:	25 2b       	or	r18, r21
    8ef2:	21 f4       	brne	.+8      	; 0x8efc <__fp_cmp+0x3e>
    8ef4:	08 95       	ret
    8ef6:	0a 26       	eor	r0, r26
    8ef8:	09 f4       	brne	.+2      	; 0x8efc <__fp_cmp+0x3e>
    8efa:	a1 40       	sbci	r26, 0x01	; 1
    8efc:	a6 95       	lsr	r26
    8efe:	8f ef       	ldi	r24, 0xFF	; 255
    8f00:	81 1d       	adc	r24, r1
    8f02:	81 1d       	adc	r24, r1
    8f04:	08 95       	ret

00008f06 <__fp_inf>:
    8f06:	97 f9       	bld	r25, 7
    8f08:	9f 67       	ori	r25, 0x7F	; 127
    8f0a:	80 e8       	ldi	r24, 0x80	; 128
    8f0c:	70 e0       	ldi	r23, 0x00	; 0
    8f0e:	60 e0       	ldi	r22, 0x00	; 0
    8f10:	08 95       	ret

00008f12 <__fp_nan>:
    8f12:	9f ef       	ldi	r25, 0xFF	; 255
    8f14:	80 ec       	ldi	r24, 0xC0	; 192
    8f16:	08 95       	ret

00008f18 <__fp_pscA>:
    8f18:	00 24       	eor	r0, r0
    8f1a:	0a 94       	dec	r0
    8f1c:	16 16       	cp	r1, r22
    8f1e:	17 06       	cpc	r1, r23
    8f20:	18 06       	cpc	r1, r24
    8f22:	09 06       	cpc	r0, r25
    8f24:	08 95       	ret

00008f26 <__fp_pscB>:
    8f26:	00 24       	eor	r0, r0
    8f28:	0a 94       	dec	r0
    8f2a:	12 16       	cp	r1, r18
    8f2c:	13 06       	cpc	r1, r19
    8f2e:	14 06       	cpc	r1, r20
    8f30:	05 06       	cpc	r0, r21
    8f32:	08 95       	ret

00008f34 <__fp_round>:
    8f34:	09 2e       	mov	r0, r25
    8f36:	03 94       	inc	r0
    8f38:	00 0c       	add	r0, r0
    8f3a:	11 f4       	brne	.+4      	; 0x8f40 <__fp_round+0xc>
    8f3c:	88 23       	and	r24, r24
    8f3e:	52 f0       	brmi	.+20     	; 0x8f54 <__fp_round+0x20>
    8f40:	bb 0f       	add	r27, r27
    8f42:	40 f4       	brcc	.+16     	; 0x8f54 <__fp_round+0x20>
    8f44:	bf 2b       	or	r27, r31
    8f46:	11 f4       	brne	.+4      	; 0x8f4c <__fp_round+0x18>
    8f48:	60 ff       	sbrs	r22, 0
    8f4a:	04 c0       	rjmp	.+8      	; 0x8f54 <__fp_round+0x20>
    8f4c:	6f 5f       	subi	r22, 0xFF	; 255
    8f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    8f50:	8f 4f       	sbci	r24, 0xFF	; 255
    8f52:	9f 4f       	sbci	r25, 0xFF	; 255
    8f54:	08 95       	ret

00008f56 <__fp_split3>:
    8f56:	57 fd       	sbrc	r21, 7
    8f58:	90 58       	subi	r25, 0x80	; 128
    8f5a:	44 0f       	add	r20, r20
    8f5c:	55 1f       	adc	r21, r21
    8f5e:	59 f0       	breq	.+22     	; 0x8f76 <__fp_splitA+0x10>
    8f60:	5f 3f       	cpi	r21, 0xFF	; 255
    8f62:	71 f0       	breq	.+28     	; 0x8f80 <__fp_splitA+0x1a>
    8f64:	47 95       	ror	r20

00008f66 <__fp_splitA>:
    8f66:	88 0f       	add	r24, r24
    8f68:	97 fb       	bst	r25, 7
    8f6a:	99 1f       	adc	r25, r25
    8f6c:	61 f0       	breq	.+24     	; 0x8f86 <__fp_splitA+0x20>
    8f6e:	9f 3f       	cpi	r25, 0xFF	; 255
    8f70:	79 f0       	breq	.+30     	; 0x8f90 <__fp_splitA+0x2a>
    8f72:	87 95       	ror	r24
    8f74:	08 95       	ret
    8f76:	12 16       	cp	r1, r18
    8f78:	13 06       	cpc	r1, r19
    8f7a:	14 06       	cpc	r1, r20
    8f7c:	55 1f       	adc	r21, r21
    8f7e:	f2 cf       	rjmp	.-28     	; 0x8f64 <__fp_split3+0xe>
    8f80:	46 95       	lsr	r20
    8f82:	f1 df       	rcall	.-30     	; 0x8f66 <__fp_splitA>
    8f84:	08 c0       	rjmp	.+16     	; 0x8f96 <__fp_splitA+0x30>
    8f86:	16 16       	cp	r1, r22
    8f88:	17 06       	cpc	r1, r23
    8f8a:	18 06       	cpc	r1, r24
    8f8c:	99 1f       	adc	r25, r25
    8f8e:	f1 cf       	rjmp	.-30     	; 0x8f72 <__fp_splitA+0xc>
    8f90:	86 95       	lsr	r24
    8f92:	71 05       	cpc	r23, r1
    8f94:	61 05       	cpc	r22, r1
    8f96:	08 94       	sec
    8f98:	08 95       	ret

00008f9a <__fp_zero>:
    8f9a:	e8 94       	clt

00008f9c <__fp_szero>:
    8f9c:	bb 27       	eor	r27, r27
    8f9e:	66 27       	eor	r22, r22
    8fa0:	77 27       	eor	r23, r23
    8fa2:	cb 01       	movw	r24, r22
    8fa4:	97 f9       	bld	r25, 7
    8fa6:	08 95       	ret

00008fa8 <__gesf2>:
    8fa8:	0e 94 5f 47 	call	0x8ebe	; 0x8ebe <__fp_cmp>
    8fac:	08 f4       	brcc	.+2      	; 0x8fb0 <__gesf2+0x8>
    8fae:	8f ef       	ldi	r24, 0xFF	; 255
    8fb0:	08 95       	ret

00008fb2 <__mulsf3>:
    8fb2:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <__mulsf3x>
    8fb6:	0c 94 9a 47 	jmp	0x8f34	; 0x8f34 <__fp_round>
    8fba:	0e 94 8c 47 	call	0x8f18	; 0x8f18 <__fp_pscA>
    8fbe:	38 f0       	brcs	.+14     	; 0x8fce <__mulsf3+0x1c>
    8fc0:	0e 94 93 47 	call	0x8f26	; 0x8f26 <__fp_pscB>
    8fc4:	20 f0       	brcs	.+8      	; 0x8fce <__mulsf3+0x1c>
    8fc6:	95 23       	and	r25, r21
    8fc8:	11 f0       	breq	.+4      	; 0x8fce <__mulsf3+0x1c>
    8fca:	0c 94 83 47 	jmp	0x8f06	; 0x8f06 <__fp_inf>
    8fce:	0c 94 89 47 	jmp	0x8f12	; 0x8f12 <__fp_nan>
    8fd2:	11 24       	eor	r1, r1
    8fd4:	0c 94 ce 47 	jmp	0x8f9c	; 0x8f9c <__fp_szero>

00008fd8 <__mulsf3x>:
    8fd8:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <__fp_split3>
    8fdc:	70 f3       	brcs	.-36     	; 0x8fba <__mulsf3+0x8>

00008fde <__mulsf3_pse>:
    8fde:	95 9f       	mul	r25, r21
    8fe0:	c1 f3       	breq	.-16     	; 0x8fd2 <__mulsf3+0x20>
    8fe2:	95 0f       	add	r25, r21
    8fe4:	50 e0       	ldi	r21, 0x00	; 0
    8fe6:	55 1f       	adc	r21, r21
    8fe8:	62 9f       	mul	r22, r18
    8fea:	f0 01       	movw	r30, r0
    8fec:	72 9f       	mul	r23, r18
    8fee:	bb 27       	eor	r27, r27
    8ff0:	f0 0d       	add	r31, r0
    8ff2:	b1 1d       	adc	r27, r1
    8ff4:	63 9f       	mul	r22, r19
    8ff6:	aa 27       	eor	r26, r26
    8ff8:	f0 0d       	add	r31, r0
    8ffa:	b1 1d       	adc	r27, r1
    8ffc:	aa 1f       	adc	r26, r26
    8ffe:	64 9f       	mul	r22, r20
    9000:	66 27       	eor	r22, r22
    9002:	b0 0d       	add	r27, r0
    9004:	a1 1d       	adc	r26, r1
    9006:	66 1f       	adc	r22, r22
    9008:	82 9f       	mul	r24, r18
    900a:	22 27       	eor	r18, r18
    900c:	b0 0d       	add	r27, r0
    900e:	a1 1d       	adc	r26, r1
    9010:	62 1f       	adc	r22, r18
    9012:	73 9f       	mul	r23, r19
    9014:	b0 0d       	add	r27, r0
    9016:	a1 1d       	adc	r26, r1
    9018:	62 1f       	adc	r22, r18
    901a:	83 9f       	mul	r24, r19
    901c:	a0 0d       	add	r26, r0
    901e:	61 1d       	adc	r22, r1
    9020:	22 1f       	adc	r18, r18
    9022:	74 9f       	mul	r23, r20
    9024:	33 27       	eor	r19, r19
    9026:	a0 0d       	add	r26, r0
    9028:	61 1d       	adc	r22, r1
    902a:	23 1f       	adc	r18, r19
    902c:	84 9f       	mul	r24, r20
    902e:	60 0d       	add	r22, r0
    9030:	21 1d       	adc	r18, r1
    9032:	82 2f       	mov	r24, r18
    9034:	76 2f       	mov	r23, r22
    9036:	6a 2f       	mov	r22, r26
    9038:	11 24       	eor	r1, r1
    903a:	9f 57       	subi	r25, 0x7F	; 127
    903c:	50 40       	sbci	r21, 0x00	; 0
    903e:	9a f0       	brmi	.+38     	; 0x9066 <__mulsf3_pse+0x88>
    9040:	f1 f0       	breq	.+60     	; 0x907e <__mulsf3_pse+0xa0>
    9042:	88 23       	and	r24, r24
    9044:	4a f0       	brmi	.+18     	; 0x9058 <__mulsf3_pse+0x7a>
    9046:	ee 0f       	add	r30, r30
    9048:	ff 1f       	adc	r31, r31
    904a:	bb 1f       	adc	r27, r27
    904c:	66 1f       	adc	r22, r22
    904e:	77 1f       	adc	r23, r23
    9050:	88 1f       	adc	r24, r24
    9052:	91 50       	subi	r25, 0x01	; 1
    9054:	50 40       	sbci	r21, 0x00	; 0
    9056:	a9 f7       	brne	.-22     	; 0x9042 <__mulsf3_pse+0x64>
    9058:	9e 3f       	cpi	r25, 0xFE	; 254
    905a:	51 05       	cpc	r21, r1
    905c:	80 f0       	brcs	.+32     	; 0x907e <__mulsf3_pse+0xa0>
    905e:	0c 94 83 47 	jmp	0x8f06	; 0x8f06 <__fp_inf>
    9062:	0c 94 ce 47 	jmp	0x8f9c	; 0x8f9c <__fp_szero>
    9066:	5f 3f       	cpi	r21, 0xFF	; 255
    9068:	e4 f3       	brlt	.-8      	; 0x9062 <__mulsf3_pse+0x84>
    906a:	98 3e       	cpi	r25, 0xE8	; 232
    906c:	d4 f3       	brlt	.-12     	; 0x9062 <__mulsf3_pse+0x84>
    906e:	86 95       	lsr	r24
    9070:	77 95       	ror	r23
    9072:	67 95       	ror	r22
    9074:	b7 95       	ror	r27
    9076:	f7 95       	ror	r31
    9078:	e7 95       	ror	r30
    907a:	9f 5f       	subi	r25, 0xFF	; 255
    907c:	c1 f7       	brne	.-16     	; 0x906e <__mulsf3_pse+0x90>
    907e:	fe 2b       	or	r31, r30
    9080:	88 0f       	add	r24, r24
    9082:	91 1d       	adc	r25, r1
    9084:	96 95       	lsr	r25
    9086:	87 95       	ror	r24
    9088:	97 f9       	bld	r25, 7
    908a:	08 95       	ret

0000908c <__mulsi3>:
    908c:	db 01       	movw	r26, r22
    908e:	8f 93       	push	r24
    9090:	9f 93       	push	r25
    9092:	0e 94 de 48 	call	0x91bc	; 0x91bc <__muluhisi3>
    9096:	bf 91       	pop	r27
    9098:	af 91       	pop	r26
    909a:	a2 9f       	mul	r26, r18
    909c:	80 0d       	add	r24, r0
    909e:	91 1d       	adc	r25, r1
    90a0:	a3 9f       	mul	r26, r19
    90a2:	90 0d       	add	r25, r0
    90a4:	b2 9f       	mul	r27, r18
    90a6:	90 0d       	add	r25, r0
    90a8:	11 24       	eor	r1, r1
    90aa:	08 95       	ret

000090ac <__udivmodhi4>:
    90ac:	aa 1b       	sub	r26, r26
    90ae:	bb 1b       	sub	r27, r27
    90b0:	51 e1       	ldi	r21, 0x11	; 17
    90b2:	07 c0       	rjmp	.+14     	; 0x90c2 <__udivmodhi4_ep>

000090b4 <__udivmodhi4_loop>:
    90b4:	aa 1f       	adc	r26, r26
    90b6:	bb 1f       	adc	r27, r27
    90b8:	a6 17       	cp	r26, r22
    90ba:	b7 07       	cpc	r27, r23
    90bc:	10 f0       	brcs	.+4      	; 0x90c2 <__udivmodhi4_ep>
    90be:	a6 1b       	sub	r26, r22
    90c0:	b7 0b       	sbc	r27, r23

000090c2 <__udivmodhi4_ep>:
    90c2:	88 1f       	adc	r24, r24
    90c4:	99 1f       	adc	r25, r25
    90c6:	5a 95       	dec	r21
    90c8:	a9 f7       	brne	.-22     	; 0x90b4 <__udivmodhi4_loop>
    90ca:	80 95       	com	r24
    90cc:	90 95       	com	r25
    90ce:	bc 01       	movw	r22, r24
    90d0:	cd 01       	movw	r24, r26
    90d2:	08 95       	ret

000090d4 <__divmodhi4>:
    90d4:	97 fb       	bst	r25, 7
    90d6:	07 2e       	mov	r0, r23
    90d8:	16 f4       	brtc	.+4      	; 0x90de <__divmodhi4+0xa>
    90da:	00 94       	com	r0
    90dc:	07 d0       	rcall	.+14     	; 0x90ec <__divmodhi4_neg1>
    90de:	77 fd       	sbrc	r23, 7
    90e0:	09 d0       	rcall	.+18     	; 0x90f4 <__divmodhi4_neg2>
    90e2:	0e 94 56 48 	call	0x90ac	; 0x90ac <__udivmodhi4>
    90e6:	07 fc       	sbrc	r0, 7
    90e8:	05 d0       	rcall	.+10     	; 0x90f4 <__divmodhi4_neg2>
    90ea:	3e f4       	brtc	.+14     	; 0x90fa <__divmodhi4_exit>

000090ec <__divmodhi4_neg1>:
    90ec:	90 95       	com	r25
    90ee:	81 95       	neg	r24
    90f0:	9f 4f       	sbci	r25, 0xFF	; 255
    90f2:	08 95       	ret

000090f4 <__divmodhi4_neg2>:
    90f4:	70 95       	com	r23
    90f6:	61 95       	neg	r22
    90f8:	7f 4f       	sbci	r23, 0xFF	; 255

000090fa <__divmodhi4_exit>:
    90fa:	08 95       	ret

000090fc <__udivmodsi4>:
    90fc:	a1 e2       	ldi	r26, 0x21	; 33
    90fe:	1a 2e       	mov	r1, r26
    9100:	aa 1b       	sub	r26, r26
    9102:	bb 1b       	sub	r27, r27
    9104:	fd 01       	movw	r30, r26
    9106:	0d c0       	rjmp	.+26     	; 0x9122 <__udivmodsi4_ep>

00009108 <__udivmodsi4_loop>:
    9108:	aa 1f       	adc	r26, r26
    910a:	bb 1f       	adc	r27, r27
    910c:	ee 1f       	adc	r30, r30
    910e:	ff 1f       	adc	r31, r31
    9110:	a2 17       	cp	r26, r18
    9112:	b3 07       	cpc	r27, r19
    9114:	e4 07       	cpc	r30, r20
    9116:	f5 07       	cpc	r31, r21
    9118:	20 f0       	brcs	.+8      	; 0x9122 <__udivmodsi4_ep>
    911a:	a2 1b       	sub	r26, r18
    911c:	b3 0b       	sbc	r27, r19
    911e:	e4 0b       	sbc	r30, r20
    9120:	f5 0b       	sbc	r31, r21

00009122 <__udivmodsi4_ep>:
    9122:	66 1f       	adc	r22, r22
    9124:	77 1f       	adc	r23, r23
    9126:	88 1f       	adc	r24, r24
    9128:	99 1f       	adc	r25, r25
    912a:	1a 94       	dec	r1
    912c:	69 f7       	brne	.-38     	; 0x9108 <__udivmodsi4_loop>
    912e:	60 95       	com	r22
    9130:	70 95       	com	r23
    9132:	80 95       	com	r24
    9134:	90 95       	com	r25
    9136:	9b 01       	movw	r18, r22
    9138:	ac 01       	movw	r20, r24
    913a:	bd 01       	movw	r22, r26
    913c:	cf 01       	movw	r24, r30
    913e:	08 95       	ret

00009140 <__divmodsi4>:
    9140:	05 2e       	mov	r0, r21
    9142:	97 fb       	bst	r25, 7
    9144:	1e f4       	brtc	.+6      	; 0x914c <__divmodsi4+0xc>
    9146:	00 94       	com	r0
    9148:	0e 94 b7 48 	call	0x916e	; 0x916e <__negsi2>
    914c:	57 fd       	sbrc	r21, 7
    914e:	07 d0       	rcall	.+14     	; 0x915e <__divmodsi4_neg2>
    9150:	0e 94 7e 48 	call	0x90fc	; 0x90fc <__udivmodsi4>
    9154:	07 fc       	sbrc	r0, 7
    9156:	03 d0       	rcall	.+6      	; 0x915e <__divmodsi4_neg2>
    9158:	4e f4       	brtc	.+18     	; 0x916c <__divmodsi4_exit>
    915a:	0c 94 b7 48 	jmp	0x916e	; 0x916e <__negsi2>

0000915e <__divmodsi4_neg2>:
    915e:	50 95       	com	r21
    9160:	40 95       	com	r20
    9162:	30 95       	com	r19
    9164:	21 95       	neg	r18
    9166:	3f 4f       	sbci	r19, 0xFF	; 255
    9168:	4f 4f       	sbci	r20, 0xFF	; 255
    916a:	5f 4f       	sbci	r21, 0xFF	; 255

0000916c <__divmodsi4_exit>:
    916c:	08 95       	ret

0000916e <__negsi2>:
    916e:	90 95       	com	r25
    9170:	80 95       	com	r24
    9172:	70 95       	com	r23
    9174:	61 95       	neg	r22
    9176:	7f 4f       	sbci	r23, 0xFF	; 255
    9178:	8f 4f       	sbci	r24, 0xFF	; 255
    917a:	9f 4f       	sbci	r25, 0xFF	; 255
    917c:	08 95       	ret

0000917e <__tablejump2__>:
    917e:	ee 0f       	add	r30, r30
    9180:	ff 1f       	adc	r31, r31
    9182:	00 24       	eor	r0, r0
    9184:	00 1c       	adc	r0, r0
    9186:	0b be       	out	0x3b, r0	; 59
    9188:	07 90       	elpm	r0, Z+
    918a:	f6 91       	elpm	r31, Z
    918c:	e0 2d       	mov	r30, r0
    918e:	09 94       	ijmp

00009190 <__umulhisi3>:
    9190:	a2 9f       	mul	r26, r18
    9192:	b0 01       	movw	r22, r0
    9194:	b3 9f       	mul	r27, r19
    9196:	c0 01       	movw	r24, r0
    9198:	a3 9f       	mul	r26, r19
    919a:	70 0d       	add	r23, r0
    919c:	81 1d       	adc	r24, r1
    919e:	11 24       	eor	r1, r1
    91a0:	91 1d       	adc	r25, r1
    91a2:	b2 9f       	mul	r27, r18
    91a4:	70 0d       	add	r23, r0
    91a6:	81 1d       	adc	r24, r1
    91a8:	11 24       	eor	r1, r1
    91aa:	91 1d       	adc	r25, r1
    91ac:	08 95       	ret

000091ae <__usmulhisi3>:
    91ae:	0e 94 c8 48 	call	0x9190	; 0x9190 <__umulhisi3>

000091b2 <__usmulhisi3_tail>:
    91b2:	b7 ff       	sbrs	r27, 7
    91b4:	08 95       	ret
    91b6:	82 1b       	sub	r24, r18
    91b8:	93 0b       	sbc	r25, r19
    91ba:	08 95       	ret

000091bc <__muluhisi3>:
    91bc:	0e 94 c8 48 	call	0x9190	; 0x9190 <__umulhisi3>
    91c0:	a5 9f       	mul	r26, r21
    91c2:	90 0d       	add	r25, r0
    91c4:	b4 9f       	mul	r27, r20
    91c6:	90 0d       	add	r25, r0
    91c8:	a4 9f       	mul	r26, r20
    91ca:	80 0d       	add	r24, r0
    91cc:	91 1d       	adc	r25, r1
    91ce:	11 24       	eor	r1, r1
    91d0:	08 95       	ret

000091d2 <__mulshisi3>:
    91d2:	b7 ff       	sbrs	r27, 7
    91d4:	0c 94 de 48 	jmp	0x91bc	; 0x91bc <__muluhisi3>

000091d8 <__mulohisi3>:
    91d8:	0e 94 de 48 	call	0x91bc	; 0x91bc <__muluhisi3>
    91dc:	82 1b       	sub	r24, r18
    91de:	93 0b       	sbc	r25, r19
    91e0:	08 95       	ret

000091e2 <malloc>:
    91e2:	0f 93       	push	r16
    91e4:	1f 93       	push	r17
    91e6:	cf 93       	push	r28
    91e8:	df 93       	push	r29
    91ea:	82 30       	cpi	r24, 0x02	; 2
    91ec:	91 05       	cpc	r25, r1
    91ee:	10 f4       	brcc	.+4      	; 0x91f4 <malloc+0x12>
    91f0:	82 e0       	ldi	r24, 0x02	; 2
    91f2:	90 e0       	ldi	r25, 0x00	; 0
    91f4:	e0 91 29 49 	lds	r30, 0x4929	; 0x804929 <__flp>
    91f8:	f0 91 2a 49 	lds	r31, 0x492A	; 0x80492a <__flp+0x1>
    91fc:	20 e0       	ldi	r18, 0x00	; 0
    91fe:	30 e0       	ldi	r19, 0x00	; 0
    9200:	a0 e0       	ldi	r26, 0x00	; 0
    9202:	b0 e0       	ldi	r27, 0x00	; 0
    9204:	30 97       	sbiw	r30, 0x00	; 0
    9206:	19 f1       	breq	.+70     	; 0x924e <malloc+0x6c>
    9208:	40 81       	ld	r20, Z
    920a:	51 81       	ldd	r21, Z+1	; 0x01
    920c:	02 81       	ldd	r16, Z+2	; 0x02
    920e:	13 81       	ldd	r17, Z+3	; 0x03
    9210:	48 17       	cp	r20, r24
    9212:	59 07       	cpc	r21, r25
    9214:	c8 f0       	brcs	.+50     	; 0x9248 <malloc+0x66>
    9216:	84 17       	cp	r24, r20
    9218:	95 07       	cpc	r25, r21
    921a:	69 f4       	brne	.+26     	; 0x9236 <malloc+0x54>
    921c:	10 97       	sbiw	r26, 0x00	; 0
    921e:	31 f0       	breq	.+12     	; 0x922c <malloc+0x4a>
    9220:	12 96       	adiw	r26, 0x02	; 2
    9222:	0c 93       	st	X, r16
    9224:	12 97       	sbiw	r26, 0x02	; 2
    9226:	13 96       	adiw	r26, 0x03	; 3
    9228:	1c 93       	st	X, r17
    922a:	27 c0       	rjmp	.+78     	; 0x927a <malloc+0x98>
    922c:	00 93 29 49 	sts	0x4929, r16	; 0x804929 <__flp>
    9230:	10 93 2a 49 	sts	0x492A, r17	; 0x80492a <__flp+0x1>
    9234:	22 c0       	rjmp	.+68     	; 0x927a <malloc+0x98>
    9236:	21 15       	cp	r18, r1
    9238:	31 05       	cpc	r19, r1
    923a:	19 f0       	breq	.+6      	; 0x9242 <malloc+0x60>
    923c:	42 17       	cp	r20, r18
    923e:	53 07       	cpc	r21, r19
    9240:	18 f4       	brcc	.+6      	; 0x9248 <malloc+0x66>
    9242:	9a 01       	movw	r18, r20
    9244:	bd 01       	movw	r22, r26
    9246:	ef 01       	movw	r28, r30
    9248:	df 01       	movw	r26, r30
    924a:	f8 01       	movw	r30, r16
    924c:	db cf       	rjmp	.-74     	; 0x9204 <malloc+0x22>
    924e:	21 15       	cp	r18, r1
    9250:	31 05       	cpc	r19, r1
    9252:	f9 f0       	breq	.+62     	; 0x9292 <malloc+0xb0>
    9254:	28 1b       	sub	r18, r24
    9256:	39 0b       	sbc	r19, r25
    9258:	24 30       	cpi	r18, 0x04	; 4
    925a:	31 05       	cpc	r19, r1
    925c:	80 f4       	brcc	.+32     	; 0x927e <malloc+0x9c>
    925e:	8a 81       	ldd	r24, Y+2	; 0x02
    9260:	9b 81       	ldd	r25, Y+3	; 0x03
    9262:	61 15       	cp	r22, r1
    9264:	71 05       	cpc	r23, r1
    9266:	21 f0       	breq	.+8      	; 0x9270 <malloc+0x8e>
    9268:	fb 01       	movw	r30, r22
    926a:	82 83       	std	Z+2, r24	; 0x02
    926c:	93 83       	std	Z+3, r25	; 0x03
    926e:	04 c0       	rjmp	.+8      	; 0x9278 <malloc+0x96>
    9270:	80 93 29 49 	sts	0x4929, r24	; 0x804929 <__flp>
    9274:	90 93 2a 49 	sts	0x492A, r25	; 0x80492a <__flp+0x1>
    9278:	fe 01       	movw	r30, r28
    927a:	32 96       	adiw	r30, 0x02	; 2
    927c:	44 c0       	rjmp	.+136    	; 0x9306 <malloc+0x124>
    927e:	fe 01       	movw	r30, r28
    9280:	e2 0f       	add	r30, r18
    9282:	f3 1f       	adc	r31, r19
    9284:	81 93       	st	Z+, r24
    9286:	91 93       	st	Z+, r25
    9288:	22 50       	subi	r18, 0x02	; 2
    928a:	31 09       	sbc	r19, r1
    928c:	28 83       	st	Y, r18
    928e:	39 83       	std	Y+1, r19	; 0x01
    9290:	3a c0       	rjmp	.+116    	; 0x9306 <malloc+0x124>
    9292:	20 91 27 49 	lds	r18, 0x4927	; 0x804927 <__brkval>
    9296:	30 91 28 49 	lds	r19, 0x4928	; 0x804928 <__brkval+0x1>
    929a:	23 2b       	or	r18, r19
    929c:	41 f4       	brne	.+16     	; 0x92ae <malloc+0xcc>
    929e:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    92a2:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    92a6:	20 93 27 49 	sts	0x4927, r18	; 0x804927 <__brkval>
    92aa:	30 93 28 49 	sts	0x4928, r19	; 0x804928 <__brkval+0x1>
    92ae:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    92b2:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    92b6:	21 15       	cp	r18, r1
    92b8:	31 05       	cpc	r19, r1
    92ba:	41 f4       	brne	.+16     	; 0x92cc <malloc+0xea>
    92bc:	2d b7       	in	r18, 0x3d	; 61
    92be:	3e b7       	in	r19, 0x3e	; 62
    92c0:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    92c4:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    92c8:	24 1b       	sub	r18, r20
    92ca:	35 0b       	sbc	r19, r21
    92cc:	e0 91 27 49 	lds	r30, 0x4927	; 0x804927 <__brkval>
    92d0:	f0 91 28 49 	lds	r31, 0x4928	; 0x804928 <__brkval+0x1>
    92d4:	e2 17       	cp	r30, r18
    92d6:	f3 07       	cpc	r31, r19
    92d8:	a0 f4       	brcc	.+40     	; 0x9302 <malloc+0x120>
    92da:	2e 1b       	sub	r18, r30
    92dc:	3f 0b       	sbc	r19, r31
    92de:	28 17       	cp	r18, r24
    92e0:	39 07       	cpc	r19, r25
    92e2:	78 f0       	brcs	.+30     	; 0x9302 <malloc+0x120>
    92e4:	ac 01       	movw	r20, r24
    92e6:	4e 5f       	subi	r20, 0xFE	; 254
    92e8:	5f 4f       	sbci	r21, 0xFF	; 255
    92ea:	24 17       	cp	r18, r20
    92ec:	35 07       	cpc	r19, r21
    92ee:	48 f0       	brcs	.+18     	; 0x9302 <malloc+0x120>
    92f0:	4e 0f       	add	r20, r30
    92f2:	5f 1f       	adc	r21, r31
    92f4:	40 93 27 49 	sts	0x4927, r20	; 0x804927 <__brkval>
    92f8:	50 93 28 49 	sts	0x4928, r21	; 0x804928 <__brkval+0x1>
    92fc:	81 93       	st	Z+, r24
    92fe:	91 93       	st	Z+, r25
    9300:	02 c0       	rjmp	.+4      	; 0x9306 <malloc+0x124>
    9302:	e0 e0       	ldi	r30, 0x00	; 0
    9304:	f0 e0       	ldi	r31, 0x00	; 0
    9306:	cf 01       	movw	r24, r30
    9308:	df 91       	pop	r29
    930a:	cf 91       	pop	r28
    930c:	1f 91       	pop	r17
    930e:	0f 91       	pop	r16
    9310:	08 95       	ret

00009312 <free>:
    9312:	cf 93       	push	r28
    9314:	df 93       	push	r29
    9316:	00 97       	sbiw	r24, 0x00	; 0
    9318:	09 f4       	brne	.+2      	; 0x931c <free+0xa>
    931a:	81 c0       	rjmp	.+258    	; 0x941e <free+0x10c>
    931c:	fc 01       	movw	r30, r24
    931e:	32 97       	sbiw	r30, 0x02	; 2
    9320:	12 82       	std	Z+2, r1	; 0x02
    9322:	13 82       	std	Z+3, r1	; 0x03
    9324:	a0 91 29 49 	lds	r26, 0x4929	; 0x804929 <__flp>
    9328:	b0 91 2a 49 	lds	r27, 0x492A	; 0x80492a <__flp+0x1>
    932c:	10 97       	sbiw	r26, 0x00	; 0
    932e:	81 f4       	brne	.+32     	; 0x9350 <free+0x3e>
    9330:	20 81       	ld	r18, Z
    9332:	31 81       	ldd	r19, Z+1	; 0x01
    9334:	82 0f       	add	r24, r18
    9336:	93 1f       	adc	r25, r19
    9338:	20 91 27 49 	lds	r18, 0x4927	; 0x804927 <__brkval>
    933c:	30 91 28 49 	lds	r19, 0x4928	; 0x804928 <__brkval+0x1>
    9340:	28 17       	cp	r18, r24
    9342:	39 07       	cpc	r19, r25
    9344:	51 f5       	brne	.+84     	; 0x939a <free+0x88>
    9346:	e0 93 27 49 	sts	0x4927, r30	; 0x804927 <__brkval>
    934a:	f0 93 28 49 	sts	0x4928, r31	; 0x804928 <__brkval+0x1>
    934e:	67 c0       	rjmp	.+206    	; 0x941e <free+0x10c>
    9350:	ed 01       	movw	r28, r26
    9352:	20 e0       	ldi	r18, 0x00	; 0
    9354:	30 e0       	ldi	r19, 0x00	; 0
    9356:	ce 17       	cp	r28, r30
    9358:	df 07       	cpc	r29, r31
    935a:	40 f4       	brcc	.+16     	; 0x936c <free+0x5a>
    935c:	4a 81       	ldd	r20, Y+2	; 0x02
    935e:	5b 81       	ldd	r21, Y+3	; 0x03
    9360:	9e 01       	movw	r18, r28
    9362:	41 15       	cp	r20, r1
    9364:	51 05       	cpc	r21, r1
    9366:	f1 f0       	breq	.+60     	; 0x93a4 <free+0x92>
    9368:	ea 01       	movw	r28, r20
    936a:	f5 cf       	rjmp	.-22     	; 0x9356 <free+0x44>
    936c:	c2 83       	std	Z+2, r28	; 0x02
    936e:	d3 83       	std	Z+3, r29	; 0x03
    9370:	40 81       	ld	r20, Z
    9372:	51 81       	ldd	r21, Z+1	; 0x01
    9374:	84 0f       	add	r24, r20
    9376:	95 1f       	adc	r25, r21
    9378:	c8 17       	cp	r28, r24
    937a:	d9 07       	cpc	r29, r25
    937c:	59 f4       	brne	.+22     	; 0x9394 <free+0x82>
    937e:	88 81       	ld	r24, Y
    9380:	99 81       	ldd	r25, Y+1	; 0x01
    9382:	84 0f       	add	r24, r20
    9384:	95 1f       	adc	r25, r21
    9386:	02 96       	adiw	r24, 0x02	; 2
    9388:	80 83       	st	Z, r24
    938a:	91 83       	std	Z+1, r25	; 0x01
    938c:	8a 81       	ldd	r24, Y+2	; 0x02
    938e:	9b 81       	ldd	r25, Y+3	; 0x03
    9390:	82 83       	std	Z+2, r24	; 0x02
    9392:	93 83       	std	Z+3, r25	; 0x03
    9394:	21 15       	cp	r18, r1
    9396:	31 05       	cpc	r19, r1
    9398:	29 f4       	brne	.+10     	; 0x93a4 <free+0x92>
    939a:	e0 93 29 49 	sts	0x4929, r30	; 0x804929 <__flp>
    939e:	f0 93 2a 49 	sts	0x492A, r31	; 0x80492a <__flp+0x1>
    93a2:	3d c0       	rjmp	.+122    	; 0x941e <free+0x10c>
    93a4:	e9 01       	movw	r28, r18
    93a6:	ea 83       	std	Y+2, r30	; 0x02
    93a8:	fb 83       	std	Y+3, r31	; 0x03
    93aa:	49 91       	ld	r20, Y+
    93ac:	59 91       	ld	r21, Y+
    93ae:	c4 0f       	add	r28, r20
    93b0:	d5 1f       	adc	r29, r21
    93b2:	ec 17       	cp	r30, r28
    93b4:	fd 07       	cpc	r31, r29
    93b6:	61 f4       	brne	.+24     	; 0x93d0 <free+0xbe>
    93b8:	80 81       	ld	r24, Z
    93ba:	91 81       	ldd	r25, Z+1	; 0x01
    93bc:	84 0f       	add	r24, r20
    93be:	95 1f       	adc	r25, r21
    93c0:	02 96       	adiw	r24, 0x02	; 2
    93c2:	e9 01       	movw	r28, r18
    93c4:	88 83       	st	Y, r24
    93c6:	99 83       	std	Y+1, r25	; 0x01
    93c8:	82 81       	ldd	r24, Z+2	; 0x02
    93ca:	93 81       	ldd	r25, Z+3	; 0x03
    93cc:	8a 83       	std	Y+2, r24	; 0x02
    93ce:	9b 83       	std	Y+3, r25	; 0x03
    93d0:	e0 e0       	ldi	r30, 0x00	; 0
    93d2:	f0 e0       	ldi	r31, 0x00	; 0
    93d4:	12 96       	adiw	r26, 0x02	; 2
    93d6:	8d 91       	ld	r24, X+
    93d8:	9c 91       	ld	r25, X
    93da:	13 97       	sbiw	r26, 0x03	; 3
    93dc:	00 97       	sbiw	r24, 0x00	; 0
    93de:	19 f0       	breq	.+6      	; 0x93e6 <free+0xd4>
    93e0:	fd 01       	movw	r30, r26
    93e2:	dc 01       	movw	r26, r24
    93e4:	f7 cf       	rjmp	.-18     	; 0x93d4 <free+0xc2>
    93e6:	8d 91       	ld	r24, X+
    93e8:	9c 91       	ld	r25, X
    93ea:	11 97       	sbiw	r26, 0x01	; 1
    93ec:	9d 01       	movw	r18, r26
    93ee:	2e 5f       	subi	r18, 0xFE	; 254
    93f0:	3f 4f       	sbci	r19, 0xFF	; 255
    93f2:	82 0f       	add	r24, r18
    93f4:	93 1f       	adc	r25, r19
    93f6:	20 91 27 49 	lds	r18, 0x4927	; 0x804927 <__brkval>
    93fa:	30 91 28 49 	lds	r19, 0x4928	; 0x804928 <__brkval+0x1>
    93fe:	28 17       	cp	r18, r24
    9400:	39 07       	cpc	r19, r25
    9402:	69 f4       	brne	.+26     	; 0x941e <free+0x10c>
    9404:	30 97       	sbiw	r30, 0x00	; 0
    9406:	29 f4       	brne	.+10     	; 0x9412 <free+0x100>
    9408:	10 92 29 49 	sts	0x4929, r1	; 0x804929 <__flp>
    940c:	10 92 2a 49 	sts	0x492A, r1	; 0x80492a <__flp+0x1>
    9410:	02 c0       	rjmp	.+4      	; 0x9416 <free+0x104>
    9412:	12 82       	std	Z+2, r1	; 0x02
    9414:	13 82       	std	Z+3, r1	; 0x03
    9416:	a0 93 27 49 	sts	0x4927, r26	; 0x804927 <__brkval>
    941a:	b0 93 28 49 	sts	0x4928, r27	; 0x804928 <__brkval+0x1>
    941e:	df 91       	pop	r29
    9420:	cf 91       	pop	r28
    9422:	08 95       	ret

00009424 <atoi>:
    9424:	fc 01       	movw	r30, r24
    9426:	88 27       	eor	r24, r24
    9428:	99 27       	eor	r25, r25
    942a:	e8 94       	clt
    942c:	21 91       	ld	r18, Z+
    942e:	20 32       	cpi	r18, 0x20	; 32
    9430:	e9 f3       	breq	.-6      	; 0x942c <atoi+0x8>
    9432:	29 30       	cpi	r18, 0x09	; 9
    9434:	10 f0       	brcs	.+4      	; 0x943a <atoi+0x16>
    9436:	2e 30       	cpi	r18, 0x0E	; 14
    9438:	c8 f3       	brcs	.-14     	; 0x942c <atoi+0x8>
    943a:	2b 32       	cpi	r18, 0x2B	; 43
    943c:	41 f0       	breq	.+16     	; 0x944e <atoi+0x2a>
    943e:	2d 32       	cpi	r18, 0x2D	; 45
    9440:	39 f4       	brne	.+14     	; 0x9450 <atoi+0x2c>
    9442:	68 94       	set
    9444:	04 c0       	rjmp	.+8      	; 0x944e <atoi+0x2a>
    9446:	0e 94 9e 4a 	call	0x953c	; 0x953c <__mulhi_const_10>
    944a:	82 0f       	add	r24, r18
    944c:	91 1d       	adc	r25, r1
    944e:	21 91       	ld	r18, Z+
    9450:	20 53       	subi	r18, 0x30	; 48
    9452:	2a 30       	cpi	r18, 0x0A	; 10
    9454:	c0 f3       	brcs	.-16     	; 0x9446 <atoi+0x22>
    9456:	1e f4       	brtc	.+6      	; 0x945e <atoi+0x3a>
    9458:	90 95       	com	r25
    945a:	81 95       	neg	r24
    945c:	9f 4f       	sbci	r25, 0xFF	; 255
    945e:	08 95       	ret

00009460 <atol>:
    9460:	1f 93       	push	r17
    9462:	fc 01       	movw	r30, r24
    9464:	99 27       	eor	r25, r25
    9466:	88 27       	eor	r24, r24
    9468:	bc 01       	movw	r22, r24
    946a:	e8 94       	clt
    946c:	11 91       	ld	r17, Z+
    946e:	10 32       	cpi	r17, 0x20	; 32
    9470:	e9 f3       	breq	.-6      	; 0x946c <atol+0xc>
    9472:	19 30       	cpi	r17, 0x09	; 9
    9474:	10 f0       	brcs	.+4      	; 0x947a <atol+0x1a>
    9476:	1e 30       	cpi	r17, 0x0E	; 14
    9478:	c8 f3       	brcs	.-14     	; 0x946c <atol+0xc>
    947a:	1b 32       	cpi	r17, 0x2B	; 43
    947c:	51 f0       	breq	.+20     	; 0x9492 <atol+0x32>
    947e:	1d 32       	cpi	r17, 0x2D	; 45
    9480:	49 f4       	brne	.+18     	; 0x9494 <atol+0x34>
    9482:	68 94       	set
    9484:	06 c0       	rjmp	.+12     	; 0x9492 <atol+0x32>
    9486:	0e 94 89 4a 	call	0x9512	; 0x9512 <__mulsi_const_10>
    948a:	61 0f       	add	r22, r17
    948c:	71 1d       	adc	r23, r1
    948e:	81 1d       	adc	r24, r1
    9490:	91 1d       	adc	r25, r1
    9492:	11 91       	ld	r17, Z+
    9494:	10 53       	subi	r17, 0x30	; 48
    9496:	1a 30       	cpi	r17, 0x0A	; 10
    9498:	b0 f3       	brcs	.-20     	; 0x9486 <atol+0x26>
    949a:	3e f4       	brtc	.+14     	; 0x94aa <atol+0x4a>
    949c:	90 95       	com	r25
    949e:	80 95       	com	r24
    94a0:	70 95       	com	r23
    94a2:	61 95       	neg	r22
    94a4:	7f 4f       	sbci	r23, 0xFF	; 255
    94a6:	8f 4f       	sbci	r24, 0xFF	; 255
    94a8:	9f 4f       	sbci	r25, 0xFF	; 255
    94aa:	1f 91       	pop	r17
    94ac:	08 95       	ret

000094ae <toupper>:
    94ae:	91 11       	cpse	r25, r1
    94b0:	08 95       	ret
    94b2:	81 56       	subi	r24, 0x61	; 97
    94b4:	8a 51       	subi	r24, 0x1A	; 26
    94b6:	08 f4       	brcc	.+2      	; 0x94ba <toupper+0xc>
    94b8:	80 52       	subi	r24, 0x20	; 32
    94ba:	85 58       	subi	r24, 0x85	; 133
    94bc:	08 95       	ret

000094be <strcat>:
    94be:	fb 01       	movw	r30, r22
    94c0:	dc 01       	movw	r26, r24
    94c2:	0d 90       	ld	r0, X+
    94c4:	00 20       	and	r0, r0
    94c6:	e9 f7       	brne	.-6      	; 0x94c2 <strcat+0x4>
    94c8:	11 97       	sbiw	r26, 0x01	; 1
    94ca:	01 90       	ld	r0, Z+
    94cc:	0d 92       	st	X+, r0
    94ce:	00 20       	and	r0, r0
    94d0:	e1 f7       	brne	.-8      	; 0x94ca <strcat+0xc>
    94d2:	08 95       	ret

000094d4 <strcpy>:
    94d4:	fb 01       	movw	r30, r22
    94d6:	dc 01       	movw	r26, r24
    94d8:	01 90       	ld	r0, Z+
    94da:	0d 92       	st	X+, r0
    94dc:	00 20       	and	r0, r0
    94de:	e1 f7       	brne	.-8      	; 0x94d8 <strcpy+0x4>
    94e0:	08 95       	ret

000094e2 <strlen>:
    94e2:	fc 01       	movw	r30, r24
    94e4:	01 90       	ld	r0, Z+
    94e6:	00 20       	and	r0, r0
    94e8:	e9 f7       	brne	.-6      	; 0x94e4 <strlen+0x2>
    94ea:	80 95       	com	r24
    94ec:	90 95       	com	r25
    94ee:	8e 0f       	add	r24, r30
    94f0:	9f 1f       	adc	r25, r31
    94f2:	08 95       	ret

000094f4 <strncpy>:
    94f4:	fb 01       	movw	r30, r22
    94f6:	dc 01       	movw	r26, r24
    94f8:	41 50       	subi	r20, 0x01	; 1
    94fa:	50 40       	sbci	r21, 0x00	; 0
    94fc:	48 f0       	brcs	.+18     	; 0x9510 <strncpy+0x1c>
    94fe:	01 90       	ld	r0, Z+
    9500:	0d 92       	st	X+, r0
    9502:	00 20       	and	r0, r0
    9504:	c9 f7       	brne	.-14     	; 0x94f8 <strncpy+0x4>
    9506:	01 c0       	rjmp	.+2      	; 0x950a <strncpy+0x16>
    9508:	1d 92       	st	X+, r1
    950a:	41 50       	subi	r20, 0x01	; 1
    950c:	50 40       	sbci	r21, 0x00	; 0
    950e:	e0 f7       	brcc	.-8      	; 0x9508 <strncpy+0x14>
    9510:	08 95       	ret

00009512 <__mulsi_const_10>:
    9512:	59 2f       	mov	r21, r25
    9514:	48 2f       	mov	r20, r24
    9516:	37 2f       	mov	r19, r23
    9518:	26 2f       	mov	r18, r22
    951a:	66 0f       	add	r22, r22
    951c:	77 1f       	adc	r23, r23
    951e:	88 1f       	adc	r24, r24
    9520:	99 1f       	adc	r25, r25
    9522:	66 0f       	add	r22, r22
    9524:	77 1f       	adc	r23, r23
    9526:	88 1f       	adc	r24, r24
    9528:	99 1f       	adc	r25, r25
    952a:	62 0f       	add	r22, r18
    952c:	73 1f       	adc	r23, r19
    952e:	84 1f       	adc	r24, r20
    9530:	95 1f       	adc	r25, r21
    9532:	66 0f       	add	r22, r22
    9534:	77 1f       	adc	r23, r23
    9536:	88 1f       	adc	r24, r24
    9538:	99 1f       	adc	r25, r25
    953a:	08 95       	ret

0000953c <__mulhi_const_10>:
    953c:	7a e0       	ldi	r23, 0x0A	; 10
    953e:	97 9f       	mul	r25, r23
    9540:	90 2d       	mov	r25, r0
    9542:	87 9f       	mul	r24, r23
    9544:	80 2d       	mov	r24, r0
    9546:	91 0d       	add	r25, r1
    9548:	11 24       	eor	r1, r1
    954a:	08 95       	ret

0000954c <sprintf>:
    954c:	0f 93       	push	r16
    954e:	1f 93       	push	r17
    9550:	cf 93       	push	r28
    9552:	df 93       	push	r29
    9554:	cd b7       	in	r28, 0x3d	; 61
    9556:	de b7       	in	r29, 0x3e	; 62
    9558:	2e 97       	sbiw	r28, 0x0e	; 14
    955a:	cd bf       	out	0x3d, r28	; 61
    955c:	de bf       	out	0x3e, r29	; 62
    955e:	0d 89       	ldd	r16, Y+21	; 0x15
    9560:	1e 89       	ldd	r17, Y+22	; 0x16
    9562:	86 e0       	ldi	r24, 0x06	; 6
    9564:	8c 83       	std	Y+4, r24	; 0x04
    9566:	09 83       	std	Y+1, r16	; 0x01
    9568:	1a 83       	std	Y+2, r17	; 0x02
    956a:	8f ef       	ldi	r24, 0xFF	; 255
    956c:	9f e7       	ldi	r25, 0x7F	; 127
    956e:	8d 83       	std	Y+5, r24	; 0x05
    9570:	9e 83       	std	Y+6, r25	; 0x06
    9572:	ae 01       	movw	r20, r28
    9574:	47 5e       	subi	r20, 0xE7	; 231
    9576:	5f 4f       	sbci	r21, 0xFF	; 255
    9578:	6f 89       	ldd	r22, Y+23	; 0x17
    957a:	78 8d       	ldd	r23, Y+24	; 0x18
    957c:	ce 01       	movw	r24, r28
    957e:	01 96       	adiw	r24, 0x01	; 1
    9580:	0e 94 cf 4a 	call	0x959e	; 0x959e <vfprintf>
    9584:	ef 81       	ldd	r30, Y+7	; 0x07
    9586:	f8 85       	ldd	r31, Y+8	; 0x08
    9588:	e0 0f       	add	r30, r16
    958a:	f1 1f       	adc	r31, r17
    958c:	10 82       	st	Z, r1
    958e:	2e 96       	adiw	r28, 0x0e	; 14
    9590:	cd bf       	out	0x3d, r28	; 61
    9592:	de bf       	out	0x3e, r29	; 62
    9594:	df 91       	pop	r29
    9596:	cf 91       	pop	r28
    9598:	1f 91       	pop	r17
    959a:	0f 91       	pop	r16
    959c:	08 95       	ret

0000959e <vfprintf>:
    959e:	2f 92       	push	r2
    95a0:	3f 92       	push	r3
    95a2:	4f 92       	push	r4
    95a4:	5f 92       	push	r5
    95a6:	6f 92       	push	r6
    95a8:	7f 92       	push	r7
    95aa:	8f 92       	push	r8
    95ac:	9f 92       	push	r9
    95ae:	af 92       	push	r10
    95b0:	bf 92       	push	r11
    95b2:	cf 92       	push	r12
    95b4:	df 92       	push	r13
    95b6:	ef 92       	push	r14
    95b8:	ff 92       	push	r15
    95ba:	0f 93       	push	r16
    95bc:	1f 93       	push	r17
    95be:	cf 93       	push	r28
    95c0:	df 93       	push	r29
    95c2:	cd b7       	in	r28, 0x3d	; 61
    95c4:	de b7       	in	r29, 0x3e	; 62
    95c6:	2b 97       	sbiw	r28, 0x0b	; 11
    95c8:	cd bf       	out	0x3d, r28	; 61
    95ca:	de bf       	out	0x3e, r29	; 62
    95cc:	6c 01       	movw	r12, r24
    95ce:	7b 01       	movw	r14, r22
    95d0:	8a 01       	movw	r16, r20
    95d2:	fc 01       	movw	r30, r24
    95d4:	16 82       	std	Z+6, r1	; 0x06
    95d6:	17 82       	std	Z+7, r1	; 0x07
    95d8:	83 81       	ldd	r24, Z+3	; 0x03
    95da:	81 ff       	sbrs	r24, 1
    95dc:	cc c1       	rjmp	.+920    	; 0x9976 <vfprintf+0x3d8>
    95de:	ce 01       	movw	r24, r28
    95e0:	01 96       	adiw	r24, 0x01	; 1
    95e2:	3c 01       	movw	r6, r24
    95e4:	f6 01       	movw	r30, r12
    95e6:	93 81       	ldd	r25, Z+3	; 0x03
    95e8:	f7 01       	movw	r30, r14
    95ea:	93 fd       	sbrc	r25, 3
    95ec:	85 91       	lpm	r24, Z+
    95ee:	93 ff       	sbrs	r25, 3
    95f0:	81 91       	ld	r24, Z+
    95f2:	7f 01       	movw	r14, r30
    95f4:	88 23       	and	r24, r24
    95f6:	09 f4       	brne	.+2      	; 0x95fa <vfprintf+0x5c>
    95f8:	ba c1       	rjmp	.+884    	; 0x996e <vfprintf+0x3d0>
    95fa:	85 32       	cpi	r24, 0x25	; 37
    95fc:	39 f4       	brne	.+14     	; 0x960c <vfprintf+0x6e>
    95fe:	93 fd       	sbrc	r25, 3
    9600:	85 91       	lpm	r24, Z+
    9602:	93 ff       	sbrs	r25, 3
    9604:	81 91       	ld	r24, Z+
    9606:	7f 01       	movw	r14, r30
    9608:	85 32       	cpi	r24, 0x25	; 37
    960a:	29 f4       	brne	.+10     	; 0x9616 <vfprintf+0x78>
    960c:	b6 01       	movw	r22, r12
    960e:	90 e0       	ldi	r25, 0x00	; 0
    9610:	0e 94 e9 4c 	call	0x99d2	; 0x99d2 <fputc>
    9614:	e7 cf       	rjmp	.-50     	; 0x95e4 <vfprintf+0x46>
    9616:	91 2c       	mov	r9, r1
    9618:	21 2c       	mov	r2, r1
    961a:	31 2c       	mov	r3, r1
    961c:	ff e1       	ldi	r31, 0x1F	; 31
    961e:	f3 15       	cp	r31, r3
    9620:	d8 f0       	brcs	.+54     	; 0x9658 <vfprintf+0xba>
    9622:	8b 32       	cpi	r24, 0x2B	; 43
    9624:	79 f0       	breq	.+30     	; 0x9644 <vfprintf+0xa6>
    9626:	38 f4       	brcc	.+14     	; 0x9636 <vfprintf+0x98>
    9628:	80 32       	cpi	r24, 0x20	; 32
    962a:	79 f0       	breq	.+30     	; 0x964a <vfprintf+0xac>
    962c:	83 32       	cpi	r24, 0x23	; 35
    962e:	a1 f4       	brne	.+40     	; 0x9658 <vfprintf+0xba>
    9630:	23 2d       	mov	r18, r3
    9632:	20 61       	ori	r18, 0x10	; 16
    9634:	1d c0       	rjmp	.+58     	; 0x9670 <vfprintf+0xd2>
    9636:	8d 32       	cpi	r24, 0x2D	; 45
    9638:	61 f0       	breq	.+24     	; 0x9652 <vfprintf+0xb4>
    963a:	80 33       	cpi	r24, 0x30	; 48
    963c:	69 f4       	brne	.+26     	; 0x9658 <vfprintf+0xba>
    963e:	23 2d       	mov	r18, r3
    9640:	21 60       	ori	r18, 0x01	; 1
    9642:	16 c0       	rjmp	.+44     	; 0x9670 <vfprintf+0xd2>
    9644:	83 2d       	mov	r24, r3
    9646:	82 60       	ori	r24, 0x02	; 2
    9648:	38 2e       	mov	r3, r24
    964a:	e3 2d       	mov	r30, r3
    964c:	e4 60       	ori	r30, 0x04	; 4
    964e:	3e 2e       	mov	r3, r30
    9650:	2a c0       	rjmp	.+84     	; 0x96a6 <vfprintf+0x108>
    9652:	f3 2d       	mov	r31, r3
    9654:	f8 60       	ori	r31, 0x08	; 8
    9656:	1d c0       	rjmp	.+58     	; 0x9692 <vfprintf+0xf4>
    9658:	37 fc       	sbrc	r3, 7
    965a:	2d c0       	rjmp	.+90     	; 0x96b6 <vfprintf+0x118>
    965c:	20 ed       	ldi	r18, 0xD0	; 208
    965e:	28 0f       	add	r18, r24
    9660:	2a 30       	cpi	r18, 0x0A	; 10
    9662:	40 f0       	brcs	.+16     	; 0x9674 <vfprintf+0xd6>
    9664:	8e 32       	cpi	r24, 0x2E	; 46
    9666:	b9 f4       	brne	.+46     	; 0x9696 <vfprintf+0xf8>
    9668:	36 fc       	sbrc	r3, 6
    966a:	81 c1       	rjmp	.+770    	; 0x996e <vfprintf+0x3d0>
    966c:	23 2d       	mov	r18, r3
    966e:	20 64       	ori	r18, 0x40	; 64
    9670:	32 2e       	mov	r3, r18
    9672:	19 c0       	rjmp	.+50     	; 0x96a6 <vfprintf+0x108>
    9674:	36 fe       	sbrs	r3, 6
    9676:	06 c0       	rjmp	.+12     	; 0x9684 <vfprintf+0xe6>
    9678:	8a e0       	ldi	r24, 0x0A	; 10
    967a:	98 9e       	mul	r9, r24
    967c:	20 0d       	add	r18, r0
    967e:	11 24       	eor	r1, r1
    9680:	92 2e       	mov	r9, r18
    9682:	11 c0       	rjmp	.+34     	; 0x96a6 <vfprintf+0x108>
    9684:	ea e0       	ldi	r30, 0x0A	; 10
    9686:	2e 9e       	mul	r2, r30
    9688:	20 0d       	add	r18, r0
    968a:	11 24       	eor	r1, r1
    968c:	22 2e       	mov	r2, r18
    968e:	f3 2d       	mov	r31, r3
    9690:	f0 62       	ori	r31, 0x20	; 32
    9692:	3f 2e       	mov	r3, r31
    9694:	08 c0       	rjmp	.+16     	; 0x96a6 <vfprintf+0x108>
    9696:	8c 36       	cpi	r24, 0x6C	; 108
    9698:	21 f4       	brne	.+8      	; 0x96a2 <vfprintf+0x104>
    969a:	83 2d       	mov	r24, r3
    969c:	80 68       	ori	r24, 0x80	; 128
    969e:	38 2e       	mov	r3, r24
    96a0:	02 c0       	rjmp	.+4      	; 0x96a6 <vfprintf+0x108>
    96a2:	88 36       	cpi	r24, 0x68	; 104
    96a4:	41 f4       	brne	.+16     	; 0x96b6 <vfprintf+0x118>
    96a6:	f7 01       	movw	r30, r14
    96a8:	93 fd       	sbrc	r25, 3
    96aa:	85 91       	lpm	r24, Z+
    96ac:	93 ff       	sbrs	r25, 3
    96ae:	81 91       	ld	r24, Z+
    96b0:	7f 01       	movw	r14, r30
    96b2:	81 11       	cpse	r24, r1
    96b4:	b3 cf       	rjmp	.-154    	; 0x961c <vfprintf+0x7e>
    96b6:	98 2f       	mov	r25, r24
    96b8:	9f 7d       	andi	r25, 0xDF	; 223
    96ba:	95 54       	subi	r25, 0x45	; 69
    96bc:	93 30       	cpi	r25, 0x03	; 3
    96be:	28 f4       	brcc	.+10     	; 0x96ca <vfprintf+0x12c>
    96c0:	0c 5f       	subi	r16, 0xFC	; 252
    96c2:	1f 4f       	sbci	r17, 0xFF	; 255
    96c4:	9f e3       	ldi	r25, 0x3F	; 63
    96c6:	99 83       	std	Y+1, r25	; 0x01
    96c8:	0d c0       	rjmp	.+26     	; 0x96e4 <vfprintf+0x146>
    96ca:	83 36       	cpi	r24, 0x63	; 99
    96cc:	31 f0       	breq	.+12     	; 0x96da <vfprintf+0x13c>
    96ce:	83 37       	cpi	r24, 0x73	; 115
    96d0:	71 f0       	breq	.+28     	; 0x96ee <vfprintf+0x150>
    96d2:	83 35       	cpi	r24, 0x53	; 83
    96d4:	09 f0       	breq	.+2      	; 0x96d8 <vfprintf+0x13a>
    96d6:	59 c0       	rjmp	.+178    	; 0x978a <vfprintf+0x1ec>
    96d8:	21 c0       	rjmp	.+66     	; 0x971c <vfprintf+0x17e>
    96da:	f8 01       	movw	r30, r16
    96dc:	80 81       	ld	r24, Z
    96de:	89 83       	std	Y+1, r24	; 0x01
    96e0:	0e 5f       	subi	r16, 0xFE	; 254
    96e2:	1f 4f       	sbci	r17, 0xFF	; 255
    96e4:	88 24       	eor	r8, r8
    96e6:	83 94       	inc	r8
    96e8:	91 2c       	mov	r9, r1
    96ea:	53 01       	movw	r10, r6
    96ec:	13 c0       	rjmp	.+38     	; 0x9714 <vfprintf+0x176>
    96ee:	28 01       	movw	r4, r16
    96f0:	f2 e0       	ldi	r31, 0x02	; 2
    96f2:	4f 0e       	add	r4, r31
    96f4:	51 1c       	adc	r5, r1
    96f6:	f8 01       	movw	r30, r16
    96f8:	a0 80       	ld	r10, Z
    96fa:	b1 80       	ldd	r11, Z+1	; 0x01
    96fc:	36 fe       	sbrs	r3, 6
    96fe:	03 c0       	rjmp	.+6      	; 0x9706 <vfprintf+0x168>
    9700:	69 2d       	mov	r22, r9
    9702:	70 e0       	ldi	r23, 0x00	; 0
    9704:	02 c0       	rjmp	.+4      	; 0x970a <vfprintf+0x16c>
    9706:	6f ef       	ldi	r22, 0xFF	; 255
    9708:	7f ef       	ldi	r23, 0xFF	; 255
    970a:	c5 01       	movw	r24, r10
    970c:	0e 94 de 4c 	call	0x99bc	; 0x99bc <strnlen>
    9710:	4c 01       	movw	r8, r24
    9712:	82 01       	movw	r16, r4
    9714:	f3 2d       	mov	r31, r3
    9716:	ff 77       	andi	r31, 0x7F	; 127
    9718:	3f 2e       	mov	r3, r31
    971a:	16 c0       	rjmp	.+44     	; 0x9748 <vfprintf+0x1aa>
    971c:	28 01       	movw	r4, r16
    971e:	22 e0       	ldi	r18, 0x02	; 2
    9720:	42 0e       	add	r4, r18
    9722:	51 1c       	adc	r5, r1
    9724:	f8 01       	movw	r30, r16
    9726:	a0 80       	ld	r10, Z
    9728:	b1 80       	ldd	r11, Z+1	; 0x01
    972a:	36 fe       	sbrs	r3, 6
    972c:	03 c0       	rjmp	.+6      	; 0x9734 <vfprintf+0x196>
    972e:	69 2d       	mov	r22, r9
    9730:	70 e0       	ldi	r23, 0x00	; 0
    9732:	02 c0       	rjmp	.+4      	; 0x9738 <vfprintf+0x19a>
    9734:	6f ef       	ldi	r22, 0xFF	; 255
    9736:	7f ef       	ldi	r23, 0xFF	; 255
    9738:	c5 01       	movw	r24, r10
    973a:	0e 94 d3 4c 	call	0x99a6	; 0x99a6 <strnlen_P>
    973e:	4c 01       	movw	r8, r24
    9740:	f3 2d       	mov	r31, r3
    9742:	f0 68       	ori	r31, 0x80	; 128
    9744:	3f 2e       	mov	r3, r31
    9746:	82 01       	movw	r16, r4
    9748:	33 fc       	sbrc	r3, 3
    974a:	1b c0       	rjmp	.+54     	; 0x9782 <vfprintf+0x1e4>
    974c:	82 2d       	mov	r24, r2
    974e:	90 e0       	ldi	r25, 0x00	; 0
    9750:	88 16       	cp	r8, r24
    9752:	99 06       	cpc	r9, r25
    9754:	b0 f4       	brcc	.+44     	; 0x9782 <vfprintf+0x1e4>
    9756:	b6 01       	movw	r22, r12
    9758:	80 e2       	ldi	r24, 0x20	; 32
    975a:	90 e0       	ldi	r25, 0x00	; 0
    975c:	0e 94 e9 4c 	call	0x99d2	; 0x99d2 <fputc>
    9760:	2a 94       	dec	r2
    9762:	f4 cf       	rjmp	.-24     	; 0x974c <vfprintf+0x1ae>
    9764:	f5 01       	movw	r30, r10
    9766:	37 fc       	sbrc	r3, 7
    9768:	85 91       	lpm	r24, Z+
    976a:	37 fe       	sbrs	r3, 7
    976c:	81 91       	ld	r24, Z+
    976e:	5f 01       	movw	r10, r30
    9770:	b6 01       	movw	r22, r12
    9772:	90 e0       	ldi	r25, 0x00	; 0
    9774:	0e 94 e9 4c 	call	0x99d2	; 0x99d2 <fputc>
    9778:	21 10       	cpse	r2, r1
    977a:	2a 94       	dec	r2
    977c:	21 e0       	ldi	r18, 0x01	; 1
    977e:	82 1a       	sub	r8, r18
    9780:	91 08       	sbc	r9, r1
    9782:	81 14       	cp	r8, r1
    9784:	91 04       	cpc	r9, r1
    9786:	71 f7       	brne	.-36     	; 0x9764 <vfprintf+0x1c6>
    9788:	e8 c0       	rjmp	.+464    	; 0x995a <vfprintf+0x3bc>
    978a:	84 36       	cpi	r24, 0x64	; 100
    978c:	11 f0       	breq	.+4      	; 0x9792 <vfprintf+0x1f4>
    978e:	89 36       	cpi	r24, 0x69	; 105
    9790:	41 f5       	brne	.+80     	; 0x97e2 <vfprintf+0x244>
    9792:	f8 01       	movw	r30, r16
    9794:	37 fe       	sbrs	r3, 7
    9796:	07 c0       	rjmp	.+14     	; 0x97a6 <vfprintf+0x208>
    9798:	60 81       	ld	r22, Z
    979a:	71 81       	ldd	r23, Z+1	; 0x01
    979c:	82 81       	ldd	r24, Z+2	; 0x02
    979e:	93 81       	ldd	r25, Z+3	; 0x03
    97a0:	0c 5f       	subi	r16, 0xFC	; 252
    97a2:	1f 4f       	sbci	r17, 0xFF	; 255
    97a4:	08 c0       	rjmp	.+16     	; 0x97b6 <vfprintf+0x218>
    97a6:	60 81       	ld	r22, Z
    97a8:	71 81       	ldd	r23, Z+1	; 0x01
    97aa:	07 2e       	mov	r0, r23
    97ac:	00 0c       	add	r0, r0
    97ae:	88 0b       	sbc	r24, r24
    97b0:	99 0b       	sbc	r25, r25
    97b2:	0e 5f       	subi	r16, 0xFE	; 254
    97b4:	1f 4f       	sbci	r17, 0xFF	; 255
    97b6:	f3 2d       	mov	r31, r3
    97b8:	ff 76       	andi	r31, 0x6F	; 111
    97ba:	3f 2e       	mov	r3, r31
    97bc:	97 ff       	sbrs	r25, 7
    97be:	09 c0       	rjmp	.+18     	; 0x97d2 <vfprintf+0x234>
    97c0:	90 95       	com	r25
    97c2:	80 95       	com	r24
    97c4:	70 95       	com	r23
    97c6:	61 95       	neg	r22
    97c8:	7f 4f       	sbci	r23, 0xFF	; 255
    97ca:	8f 4f       	sbci	r24, 0xFF	; 255
    97cc:	9f 4f       	sbci	r25, 0xFF	; 255
    97ce:	f0 68       	ori	r31, 0x80	; 128
    97d0:	3f 2e       	mov	r3, r31
    97d2:	2a e0       	ldi	r18, 0x0A	; 10
    97d4:	30 e0       	ldi	r19, 0x00	; 0
    97d6:	a3 01       	movw	r20, r6
    97d8:	0e 94 25 4d 	call	0x9a4a	; 0x9a4a <__ultoa_invert>
    97dc:	88 2e       	mov	r8, r24
    97de:	86 18       	sub	r8, r6
    97e0:	45 c0       	rjmp	.+138    	; 0x986c <vfprintf+0x2ce>
    97e2:	85 37       	cpi	r24, 0x75	; 117
    97e4:	31 f4       	brne	.+12     	; 0x97f2 <vfprintf+0x254>
    97e6:	23 2d       	mov	r18, r3
    97e8:	2f 7e       	andi	r18, 0xEF	; 239
    97ea:	b2 2e       	mov	r11, r18
    97ec:	2a e0       	ldi	r18, 0x0A	; 10
    97ee:	30 e0       	ldi	r19, 0x00	; 0
    97f0:	25 c0       	rjmp	.+74     	; 0x983c <vfprintf+0x29e>
    97f2:	93 2d       	mov	r25, r3
    97f4:	99 7f       	andi	r25, 0xF9	; 249
    97f6:	b9 2e       	mov	r11, r25
    97f8:	8f 36       	cpi	r24, 0x6F	; 111
    97fa:	c1 f0       	breq	.+48     	; 0x982c <vfprintf+0x28e>
    97fc:	18 f4       	brcc	.+6      	; 0x9804 <vfprintf+0x266>
    97fe:	88 35       	cpi	r24, 0x58	; 88
    9800:	79 f0       	breq	.+30     	; 0x9820 <vfprintf+0x282>
    9802:	b5 c0       	rjmp	.+362    	; 0x996e <vfprintf+0x3d0>
    9804:	80 37       	cpi	r24, 0x70	; 112
    9806:	19 f0       	breq	.+6      	; 0x980e <vfprintf+0x270>
    9808:	88 37       	cpi	r24, 0x78	; 120
    980a:	21 f0       	breq	.+8      	; 0x9814 <vfprintf+0x276>
    980c:	b0 c0       	rjmp	.+352    	; 0x996e <vfprintf+0x3d0>
    980e:	e9 2f       	mov	r30, r25
    9810:	e0 61       	ori	r30, 0x10	; 16
    9812:	be 2e       	mov	r11, r30
    9814:	b4 fe       	sbrs	r11, 4
    9816:	0d c0       	rjmp	.+26     	; 0x9832 <vfprintf+0x294>
    9818:	fb 2d       	mov	r31, r11
    981a:	f4 60       	ori	r31, 0x04	; 4
    981c:	bf 2e       	mov	r11, r31
    981e:	09 c0       	rjmp	.+18     	; 0x9832 <vfprintf+0x294>
    9820:	34 fe       	sbrs	r3, 4
    9822:	0a c0       	rjmp	.+20     	; 0x9838 <vfprintf+0x29a>
    9824:	29 2f       	mov	r18, r25
    9826:	26 60       	ori	r18, 0x06	; 6
    9828:	b2 2e       	mov	r11, r18
    982a:	06 c0       	rjmp	.+12     	; 0x9838 <vfprintf+0x29a>
    982c:	28 e0       	ldi	r18, 0x08	; 8
    982e:	30 e0       	ldi	r19, 0x00	; 0
    9830:	05 c0       	rjmp	.+10     	; 0x983c <vfprintf+0x29e>
    9832:	20 e1       	ldi	r18, 0x10	; 16
    9834:	30 e0       	ldi	r19, 0x00	; 0
    9836:	02 c0       	rjmp	.+4      	; 0x983c <vfprintf+0x29e>
    9838:	20 e1       	ldi	r18, 0x10	; 16
    983a:	32 e0       	ldi	r19, 0x02	; 2
    983c:	f8 01       	movw	r30, r16
    983e:	b7 fe       	sbrs	r11, 7
    9840:	07 c0       	rjmp	.+14     	; 0x9850 <vfprintf+0x2b2>
    9842:	60 81       	ld	r22, Z
    9844:	71 81       	ldd	r23, Z+1	; 0x01
    9846:	82 81       	ldd	r24, Z+2	; 0x02
    9848:	93 81       	ldd	r25, Z+3	; 0x03
    984a:	0c 5f       	subi	r16, 0xFC	; 252
    984c:	1f 4f       	sbci	r17, 0xFF	; 255
    984e:	06 c0       	rjmp	.+12     	; 0x985c <vfprintf+0x2be>
    9850:	60 81       	ld	r22, Z
    9852:	71 81       	ldd	r23, Z+1	; 0x01
    9854:	80 e0       	ldi	r24, 0x00	; 0
    9856:	90 e0       	ldi	r25, 0x00	; 0
    9858:	0e 5f       	subi	r16, 0xFE	; 254
    985a:	1f 4f       	sbci	r17, 0xFF	; 255
    985c:	a3 01       	movw	r20, r6
    985e:	0e 94 25 4d 	call	0x9a4a	; 0x9a4a <__ultoa_invert>
    9862:	88 2e       	mov	r8, r24
    9864:	86 18       	sub	r8, r6
    9866:	fb 2d       	mov	r31, r11
    9868:	ff 77       	andi	r31, 0x7F	; 127
    986a:	3f 2e       	mov	r3, r31
    986c:	36 fe       	sbrs	r3, 6
    986e:	0d c0       	rjmp	.+26     	; 0x988a <vfprintf+0x2ec>
    9870:	23 2d       	mov	r18, r3
    9872:	2e 7f       	andi	r18, 0xFE	; 254
    9874:	a2 2e       	mov	r10, r18
    9876:	89 14       	cp	r8, r9
    9878:	58 f4       	brcc	.+22     	; 0x9890 <vfprintf+0x2f2>
    987a:	34 fe       	sbrs	r3, 4
    987c:	0b c0       	rjmp	.+22     	; 0x9894 <vfprintf+0x2f6>
    987e:	32 fc       	sbrc	r3, 2
    9880:	09 c0       	rjmp	.+18     	; 0x9894 <vfprintf+0x2f6>
    9882:	83 2d       	mov	r24, r3
    9884:	8e 7e       	andi	r24, 0xEE	; 238
    9886:	a8 2e       	mov	r10, r24
    9888:	05 c0       	rjmp	.+10     	; 0x9894 <vfprintf+0x2f6>
    988a:	b8 2c       	mov	r11, r8
    988c:	a3 2c       	mov	r10, r3
    988e:	03 c0       	rjmp	.+6      	; 0x9896 <vfprintf+0x2f8>
    9890:	b8 2c       	mov	r11, r8
    9892:	01 c0       	rjmp	.+2      	; 0x9896 <vfprintf+0x2f8>
    9894:	b9 2c       	mov	r11, r9
    9896:	a4 fe       	sbrs	r10, 4
    9898:	0f c0       	rjmp	.+30     	; 0x98b8 <vfprintf+0x31a>
    989a:	fe 01       	movw	r30, r28
    989c:	e8 0d       	add	r30, r8
    989e:	f1 1d       	adc	r31, r1
    98a0:	80 81       	ld	r24, Z
    98a2:	80 33       	cpi	r24, 0x30	; 48
    98a4:	21 f4       	brne	.+8      	; 0x98ae <vfprintf+0x310>
    98a6:	9a 2d       	mov	r25, r10
    98a8:	99 7e       	andi	r25, 0xE9	; 233
    98aa:	a9 2e       	mov	r10, r25
    98ac:	09 c0       	rjmp	.+18     	; 0x98c0 <vfprintf+0x322>
    98ae:	a2 fe       	sbrs	r10, 2
    98b0:	06 c0       	rjmp	.+12     	; 0x98be <vfprintf+0x320>
    98b2:	b3 94       	inc	r11
    98b4:	b3 94       	inc	r11
    98b6:	04 c0       	rjmp	.+8      	; 0x98c0 <vfprintf+0x322>
    98b8:	8a 2d       	mov	r24, r10
    98ba:	86 78       	andi	r24, 0x86	; 134
    98bc:	09 f0       	breq	.+2      	; 0x98c0 <vfprintf+0x322>
    98be:	b3 94       	inc	r11
    98c0:	a3 fc       	sbrc	r10, 3
    98c2:	11 c0       	rjmp	.+34     	; 0x98e6 <vfprintf+0x348>
    98c4:	a0 fe       	sbrs	r10, 0
    98c6:	06 c0       	rjmp	.+12     	; 0x98d4 <vfprintf+0x336>
    98c8:	b2 14       	cp	r11, r2
    98ca:	88 f4       	brcc	.+34     	; 0x98ee <vfprintf+0x350>
    98cc:	28 0c       	add	r2, r8
    98ce:	92 2c       	mov	r9, r2
    98d0:	9b 18       	sub	r9, r11
    98d2:	0e c0       	rjmp	.+28     	; 0x98f0 <vfprintf+0x352>
    98d4:	b2 14       	cp	r11, r2
    98d6:	60 f4       	brcc	.+24     	; 0x98f0 <vfprintf+0x352>
    98d8:	b6 01       	movw	r22, r12
    98da:	80 e2       	ldi	r24, 0x20	; 32
    98dc:	90 e0       	ldi	r25, 0x00	; 0
    98de:	0e 94 e9 4c 	call	0x99d2	; 0x99d2 <fputc>
    98e2:	b3 94       	inc	r11
    98e4:	f7 cf       	rjmp	.-18     	; 0x98d4 <vfprintf+0x336>
    98e6:	b2 14       	cp	r11, r2
    98e8:	18 f4       	brcc	.+6      	; 0x98f0 <vfprintf+0x352>
    98ea:	2b 18       	sub	r2, r11
    98ec:	02 c0       	rjmp	.+4      	; 0x98f2 <vfprintf+0x354>
    98ee:	98 2c       	mov	r9, r8
    98f0:	21 2c       	mov	r2, r1
    98f2:	a4 fe       	sbrs	r10, 4
    98f4:	10 c0       	rjmp	.+32     	; 0x9916 <vfprintf+0x378>
    98f6:	b6 01       	movw	r22, r12
    98f8:	80 e3       	ldi	r24, 0x30	; 48
    98fa:	90 e0       	ldi	r25, 0x00	; 0
    98fc:	0e 94 e9 4c 	call	0x99d2	; 0x99d2 <fputc>
    9900:	a2 fe       	sbrs	r10, 2
    9902:	17 c0       	rjmp	.+46     	; 0x9932 <vfprintf+0x394>
    9904:	a1 fc       	sbrc	r10, 1
    9906:	03 c0       	rjmp	.+6      	; 0x990e <vfprintf+0x370>
    9908:	88 e7       	ldi	r24, 0x78	; 120
    990a:	90 e0       	ldi	r25, 0x00	; 0
    990c:	02 c0       	rjmp	.+4      	; 0x9912 <vfprintf+0x374>
    990e:	88 e5       	ldi	r24, 0x58	; 88
    9910:	90 e0       	ldi	r25, 0x00	; 0
    9912:	b6 01       	movw	r22, r12
    9914:	0c c0       	rjmp	.+24     	; 0x992e <vfprintf+0x390>
    9916:	8a 2d       	mov	r24, r10
    9918:	86 78       	andi	r24, 0x86	; 134
    991a:	59 f0       	breq	.+22     	; 0x9932 <vfprintf+0x394>
    991c:	a1 fe       	sbrs	r10, 1
    991e:	02 c0       	rjmp	.+4      	; 0x9924 <vfprintf+0x386>
    9920:	8b e2       	ldi	r24, 0x2B	; 43
    9922:	01 c0       	rjmp	.+2      	; 0x9926 <vfprintf+0x388>
    9924:	80 e2       	ldi	r24, 0x20	; 32
    9926:	a7 fc       	sbrc	r10, 7
    9928:	8d e2       	ldi	r24, 0x2D	; 45
    992a:	b6 01       	movw	r22, r12
    992c:	90 e0       	ldi	r25, 0x00	; 0
    992e:	0e 94 e9 4c 	call	0x99d2	; 0x99d2 <fputc>
    9932:	89 14       	cp	r8, r9
    9934:	38 f4       	brcc	.+14     	; 0x9944 <vfprintf+0x3a6>
    9936:	b6 01       	movw	r22, r12
    9938:	80 e3       	ldi	r24, 0x30	; 48
    993a:	90 e0       	ldi	r25, 0x00	; 0
    993c:	0e 94 e9 4c 	call	0x99d2	; 0x99d2 <fputc>
    9940:	9a 94       	dec	r9
    9942:	f7 cf       	rjmp	.-18     	; 0x9932 <vfprintf+0x394>
    9944:	8a 94       	dec	r8
    9946:	f3 01       	movw	r30, r6
    9948:	e8 0d       	add	r30, r8
    994a:	f1 1d       	adc	r31, r1
    994c:	80 81       	ld	r24, Z
    994e:	b6 01       	movw	r22, r12
    9950:	90 e0       	ldi	r25, 0x00	; 0
    9952:	0e 94 e9 4c 	call	0x99d2	; 0x99d2 <fputc>
    9956:	81 10       	cpse	r8, r1
    9958:	f5 cf       	rjmp	.-22     	; 0x9944 <vfprintf+0x3a6>
    995a:	22 20       	and	r2, r2
    995c:	09 f4       	brne	.+2      	; 0x9960 <vfprintf+0x3c2>
    995e:	42 ce       	rjmp	.-892    	; 0x95e4 <vfprintf+0x46>
    9960:	b6 01       	movw	r22, r12
    9962:	80 e2       	ldi	r24, 0x20	; 32
    9964:	90 e0       	ldi	r25, 0x00	; 0
    9966:	0e 94 e9 4c 	call	0x99d2	; 0x99d2 <fputc>
    996a:	2a 94       	dec	r2
    996c:	f6 cf       	rjmp	.-20     	; 0x995a <vfprintf+0x3bc>
    996e:	f6 01       	movw	r30, r12
    9970:	86 81       	ldd	r24, Z+6	; 0x06
    9972:	97 81       	ldd	r25, Z+7	; 0x07
    9974:	02 c0       	rjmp	.+4      	; 0x997a <vfprintf+0x3dc>
    9976:	8f ef       	ldi	r24, 0xFF	; 255
    9978:	9f ef       	ldi	r25, 0xFF	; 255
    997a:	2b 96       	adiw	r28, 0x0b	; 11
    997c:	cd bf       	out	0x3d, r28	; 61
    997e:	de bf       	out	0x3e, r29	; 62
    9980:	df 91       	pop	r29
    9982:	cf 91       	pop	r28
    9984:	1f 91       	pop	r17
    9986:	0f 91       	pop	r16
    9988:	ff 90       	pop	r15
    998a:	ef 90       	pop	r14
    998c:	df 90       	pop	r13
    998e:	cf 90       	pop	r12
    9990:	bf 90       	pop	r11
    9992:	af 90       	pop	r10
    9994:	9f 90       	pop	r9
    9996:	8f 90       	pop	r8
    9998:	7f 90       	pop	r7
    999a:	6f 90       	pop	r6
    999c:	5f 90       	pop	r5
    999e:	4f 90       	pop	r4
    99a0:	3f 90       	pop	r3
    99a2:	2f 90       	pop	r2
    99a4:	08 95       	ret

000099a6 <strnlen_P>:
    99a6:	fc 01       	movw	r30, r24
    99a8:	05 90       	lpm	r0, Z+
    99aa:	61 50       	subi	r22, 0x01	; 1
    99ac:	70 40       	sbci	r23, 0x00	; 0
    99ae:	01 10       	cpse	r0, r1
    99b0:	d8 f7       	brcc	.-10     	; 0x99a8 <strnlen_P+0x2>
    99b2:	80 95       	com	r24
    99b4:	90 95       	com	r25
    99b6:	8e 0f       	add	r24, r30
    99b8:	9f 1f       	adc	r25, r31
    99ba:	08 95       	ret

000099bc <strnlen>:
    99bc:	fc 01       	movw	r30, r24
    99be:	61 50       	subi	r22, 0x01	; 1
    99c0:	70 40       	sbci	r23, 0x00	; 0
    99c2:	01 90       	ld	r0, Z+
    99c4:	01 10       	cpse	r0, r1
    99c6:	d8 f7       	brcc	.-10     	; 0x99be <strnlen+0x2>
    99c8:	80 95       	com	r24
    99ca:	90 95       	com	r25
    99cc:	8e 0f       	add	r24, r30
    99ce:	9f 1f       	adc	r25, r31
    99d0:	08 95       	ret

000099d2 <fputc>:
    99d2:	0f 93       	push	r16
    99d4:	1f 93       	push	r17
    99d6:	cf 93       	push	r28
    99d8:	df 93       	push	r29
    99da:	fb 01       	movw	r30, r22
    99dc:	23 81       	ldd	r18, Z+3	; 0x03
    99de:	21 fd       	sbrc	r18, 1
    99e0:	03 c0       	rjmp	.+6      	; 0x99e8 <fputc+0x16>
    99e2:	8f ef       	ldi	r24, 0xFF	; 255
    99e4:	9f ef       	ldi	r25, 0xFF	; 255
    99e6:	2c c0       	rjmp	.+88     	; 0x9a40 <fputc+0x6e>
    99e8:	22 ff       	sbrs	r18, 2
    99ea:	16 c0       	rjmp	.+44     	; 0x9a18 <fputc+0x46>
    99ec:	46 81       	ldd	r20, Z+6	; 0x06
    99ee:	57 81       	ldd	r21, Z+7	; 0x07
    99f0:	24 81       	ldd	r18, Z+4	; 0x04
    99f2:	35 81       	ldd	r19, Z+5	; 0x05
    99f4:	42 17       	cp	r20, r18
    99f6:	53 07       	cpc	r21, r19
    99f8:	44 f4       	brge	.+16     	; 0x9a0a <fputc+0x38>
    99fa:	a0 81       	ld	r26, Z
    99fc:	b1 81       	ldd	r27, Z+1	; 0x01
    99fe:	9d 01       	movw	r18, r26
    9a00:	2f 5f       	subi	r18, 0xFF	; 255
    9a02:	3f 4f       	sbci	r19, 0xFF	; 255
    9a04:	20 83       	st	Z, r18
    9a06:	31 83       	std	Z+1, r19	; 0x01
    9a08:	8c 93       	st	X, r24
    9a0a:	26 81       	ldd	r18, Z+6	; 0x06
    9a0c:	37 81       	ldd	r19, Z+7	; 0x07
    9a0e:	2f 5f       	subi	r18, 0xFF	; 255
    9a10:	3f 4f       	sbci	r19, 0xFF	; 255
    9a12:	26 83       	std	Z+6, r18	; 0x06
    9a14:	37 83       	std	Z+7, r19	; 0x07
    9a16:	14 c0       	rjmp	.+40     	; 0x9a40 <fputc+0x6e>
    9a18:	8b 01       	movw	r16, r22
    9a1a:	ec 01       	movw	r28, r24
    9a1c:	fb 01       	movw	r30, r22
    9a1e:	00 84       	ldd	r0, Z+8	; 0x08
    9a20:	f1 85       	ldd	r31, Z+9	; 0x09
    9a22:	e0 2d       	mov	r30, r0
    9a24:	09 95       	icall
    9a26:	89 2b       	or	r24, r25
    9a28:	e1 f6       	brne	.-72     	; 0x99e2 <fputc+0x10>
    9a2a:	d8 01       	movw	r26, r16
    9a2c:	16 96       	adiw	r26, 0x06	; 6
    9a2e:	8d 91       	ld	r24, X+
    9a30:	9c 91       	ld	r25, X
    9a32:	17 97       	sbiw	r26, 0x07	; 7
    9a34:	01 96       	adiw	r24, 0x01	; 1
    9a36:	16 96       	adiw	r26, 0x06	; 6
    9a38:	8d 93       	st	X+, r24
    9a3a:	9c 93       	st	X, r25
    9a3c:	17 97       	sbiw	r26, 0x07	; 7
    9a3e:	ce 01       	movw	r24, r28
    9a40:	df 91       	pop	r29
    9a42:	cf 91       	pop	r28
    9a44:	1f 91       	pop	r17
    9a46:	0f 91       	pop	r16
    9a48:	08 95       	ret

00009a4a <__ultoa_invert>:
    9a4a:	fa 01       	movw	r30, r20
    9a4c:	aa 27       	eor	r26, r26
    9a4e:	28 30       	cpi	r18, 0x08	; 8
    9a50:	51 f1       	breq	.+84     	; 0x9aa6 <__ultoa_invert+0x5c>
    9a52:	20 31       	cpi	r18, 0x10	; 16
    9a54:	81 f1       	breq	.+96     	; 0x9ab6 <__ultoa_invert+0x6c>
    9a56:	e8 94       	clt
    9a58:	6f 93       	push	r22
    9a5a:	6e 7f       	andi	r22, 0xFE	; 254
    9a5c:	6e 5f       	subi	r22, 0xFE	; 254
    9a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    9a60:	8f 4f       	sbci	r24, 0xFF	; 255
    9a62:	9f 4f       	sbci	r25, 0xFF	; 255
    9a64:	af 4f       	sbci	r26, 0xFF	; 255
    9a66:	b1 e0       	ldi	r27, 0x01	; 1
    9a68:	3e d0       	rcall	.+124    	; 0x9ae6 <__ultoa_invert+0x9c>
    9a6a:	b4 e0       	ldi	r27, 0x04	; 4
    9a6c:	3c d0       	rcall	.+120    	; 0x9ae6 <__ultoa_invert+0x9c>
    9a6e:	67 0f       	add	r22, r23
    9a70:	78 1f       	adc	r23, r24
    9a72:	89 1f       	adc	r24, r25
    9a74:	9a 1f       	adc	r25, r26
    9a76:	a1 1d       	adc	r26, r1
    9a78:	68 0f       	add	r22, r24
    9a7a:	79 1f       	adc	r23, r25
    9a7c:	8a 1f       	adc	r24, r26
    9a7e:	91 1d       	adc	r25, r1
    9a80:	a1 1d       	adc	r26, r1
    9a82:	6a 0f       	add	r22, r26
    9a84:	71 1d       	adc	r23, r1
    9a86:	81 1d       	adc	r24, r1
    9a88:	91 1d       	adc	r25, r1
    9a8a:	a1 1d       	adc	r26, r1
    9a8c:	20 d0       	rcall	.+64     	; 0x9ace <__ultoa_invert+0x84>
    9a8e:	09 f4       	brne	.+2      	; 0x9a92 <__ultoa_invert+0x48>
    9a90:	68 94       	set
    9a92:	3f 91       	pop	r19
    9a94:	2a e0       	ldi	r18, 0x0A	; 10
    9a96:	26 9f       	mul	r18, r22
    9a98:	11 24       	eor	r1, r1
    9a9a:	30 19       	sub	r19, r0
    9a9c:	30 5d       	subi	r19, 0xD0	; 208
    9a9e:	31 93       	st	Z+, r19
    9aa0:	de f6       	brtc	.-74     	; 0x9a58 <__ultoa_invert+0xe>
    9aa2:	cf 01       	movw	r24, r30
    9aa4:	08 95       	ret
    9aa6:	46 2f       	mov	r20, r22
    9aa8:	47 70       	andi	r20, 0x07	; 7
    9aaa:	40 5d       	subi	r20, 0xD0	; 208
    9aac:	41 93       	st	Z+, r20
    9aae:	b3 e0       	ldi	r27, 0x03	; 3
    9ab0:	0f d0       	rcall	.+30     	; 0x9ad0 <__ultoa_invert+0x86>
    9ab2:	c9 f7       	brne	.-14     	; 0x9aa6 <__ultoa_invert+0x5c>
    9ab4:	f6 cf       	rjmp	.-20     	; 0x9aa2 <__ultoa_invert+0x58>
    9ab6:	46 2f       	mov	r20, r22
    9ab8:	4f 70       	andi	r20, 0x0F	; 15
    9aba:	40 5d       	subi	r20, 0xD0	; 208
    9abc:	4a 33       	cpi	r20, 0x3A	; 58
    9abe:	18 f0       	brcs	.+6      	; 0x9ac6 <__ultoa_invert+0x7c>
    9ac0:	49 5d       	subi	r20, 0xD9	; 217
    9ac2:	31 fd       	sbrc	r19, 1
    9ac4:	40 52       	subi	r20, 0x20	; 32
    9ac6:	41 93       	st	Z+, r20
    9ac8:	02 d0       	rcall	.+4      	; 0x9ace <__ultoa_invert+0x84>
    9aca:	a9 f7       	brne	.-22     	; 0x9ab6 <__ultoa_invert+0x6c>
    9acc:	ea cf       	rjmp	.-44     	; 0x9aa2 <__ultoa_invert+0x58>
    9ace:	b4 e0       	ldi	r27, 0x04	; 4
    9ad0:	a6 95       	lsr	r26
    9ad2:	97 95       	ror	r25
    9ad4:	87 95       	ror	r24
    9ad6:	77 95       	ror	r23
    9ad8:	67 95       	ror	r22
    9ada:	ba 95       	dec	r27
    9adc:	c9 f7       	brne	.-14     	; 0x9ad0 <__ultoa_invert+0x86>
    9ade:	00 97       	sbiw	r24, 0x00	; 0
    9ae0:	61 05       	cpc	r22, r1
    9ae2:	71 05       	cpc	r23, r1
    9ae4:	08 95       	ret
    9ae6:	9b 01       	movw	r18, r22
    9ae8:	ac 01       	movw	r20, r24
    9aea:	0a 2e       	mov	r0, r26
    9aec:	06 94       	lsr	r0
    9aee:	57 95       	ror	r21
    9af0:	47 95       	ror	r20
    9af2:	37 95       	ror	r19
    9af4:	27 95       	ror	r18
    9af6:	ba 95       	dec	r27
    9af8:	c9 f7       	brne	.-14     	; 0x9aec <__ultoa_invert+0xa2>
    9afa:	62 0f       	add	r22, r18
    9afc:	73 1f       	adc	r23, r19
    9afe:	84 1f       	adc	r24, r20
    9b00:	95 1f       	adc	r25, r21
    9b02:	a0 1d       	adc	r26, r0
    9b04:	08 95       	ret

00009b06 <eeprom_read_byte>:
    9b06:	03 d0       	rcall	.+6      	; 0x9b0e <eeprom_mapen>
    9b08:	80 81       	ld	r24, Z
    9b0a:	99 27       	eor	r25, r25
    9b0c:	08 95       	ret

00009b0e <eeprom_mapen>:
    9b0e:	fc 01       	movw	r30, r24
    9b10:	e0 50       	subi	r30, 0x00	; 0
    9b12:	fc 4e       	sbci	r31, 0xEC	; 236
    9b14:	08 95       	ret

00009b16 <eeprom_read_dword>:
    9b16:	0e 94 87 4d 	call	0x9b0e	; 0x9b0e <eeprom_mapen>
    9b1a:	60 81       	ld	r22, Z
    9b1c:	71 81       	ldd	r23, Z+1	; 0x01
    9b1e:	82 81       	ldd	r24, Z+2	; 0x02
    9b20:	93 81       	ldd	r25, Z+3	; 0x03
    9b22:	08 95       	ret

00009b24 <eeprom_read_word>:
    9b24:	0e 94 87 4d 	call	0x9b0e	; 0x9b0e <eeprom_mapen>
    9b28:	80 81       	ld	r24, Z
    9b2a:	91 81       	ldd	r25, Z+1	; 0x01
    9b2c:	08 95       	ret

00009b2e <__divmodqi4>:
    9b2e:	87 fb       	bst	r24, 7
    9b30:	08 2e       	mov	r0, r24
    9b32:	06 26       	eor	r0, r22
    9b34:	87 fd       	sbrc	r24, 7
    9b36:	81 95       	neg	r24
    9b38:	67 fd       	sbrc	r22, 7
    9b3a:	61 95       	neg	r22
    9b3c:	0e 94 ac 4d 	call	0x9b58	; 0x9b58 <__udivmodqi4>
    9b40:	0e f4       	brtc	.+2      	; 0x9b44 <__divmodqi4_1>
    9b42:	91 95       	neg	r25

00009b44 <__divmodqi4_1>:
    9b44:	07 fc       	sbrc	r0, 7
    9b46:	81 95       	neg	r24

00009b48 <__divmodqi4_exit>:
    9b48:	08 95       	ret

00009b4a <__xload_1>:
    9b4a:	57 fd       	sbrc	r21, 7
    9b4c:	03 c0       	rjmp	.+6      	; 0x9b54 <__xload_1+0xa>
    9b4e:	5b bf       	out	0x3b, r21	; 59
    9b50:	67 91       	elpm	r22, Z+
    9b52:	08 95       	ret
    9b54:	60 81       	ld	r22, Z
    9b56:	08 95       	ret

00009b58 <__udivmodqi4>:
    9b58:	99 1b       	sub	r25, r25
    9b5a:	79 e0       	ldi	r23, 0x09	; 9
    9b5c:	04 c0       	rjmp	.+8      	; 0x9b66 <__udivmodqi4_ep>

00009b5e <__udivmodqi4_loop>:
    9b5e:	99 1f       	adc	r25, r25
    9b60:	96 17       	cp	r25, r22
    9b62:	08 f0       	brcs	.+2      	; 0x9b66 <__udivmodqi4_ep>
    9b64:	96 1b       	sub	r25, r22

00009b66 <__udivmodqi4_ep>:
    9b66:	88 1f       	adc	r24, r24
    9b68:	7a 95       	dec	r23
    9b6a:	c9 f7       	brne	.-14     	; 0x9b5e <__udivmodqi4_loop>
    9b6c:	80 95       	com	r24
    9b6e:	08 95       	ret

00009b70 <__do_global_dtors>:
    9b70:	11 e0       	ldi	r17, 0x01	; 1
    9b72:	ce e7       	ldi	r28, 0x7E	; 126
    9b74:	d1 e0       	ldi	r29, 0x01	; 1
    9b76:	04 c0       	rjmp	.+8      	; 0x9b80 <__do_global_dtors+0x10>
    9b78:	fe 01       	movw	r30, r28
    9b7a:	0e 94 bf 48 	call	0x917e	; 0x917e <__tablejump2__>
    9b7e:	21 96       	adiw	r28, 0x01	; 1
    9b80:	c0 38       	cpi	r28, 0x80	; 128
    9b82:	d1 07       	cpc	r29, r17
    9b84:	c9 f7       	brne	.-14     	; 0x9b78 <__do_global_dtors+0x8>
    9b86:	f8 94       	cli

00009b88 <__stop_program>:
    9b88:	ff cf       	rjmp	.-2      	; 0x9b88 <__stop_program>
