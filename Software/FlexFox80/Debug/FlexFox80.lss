
FlexFox80.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00804000  000023f0  000024a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023f0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e5  0080407e  0080407e  00002522  2**0
                  ALLOC
  3 .eeprom       0000001f  00810000  00810000  00002522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00002541  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025a0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000005d8  00000000  00000000  000025e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000aed5  00000000  00000000  00002bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004a19  00000000  00000000  0000da8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004522  00000000  00000000  000124a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000010f8  00000000  00000000  000169c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004b8e  00000000  00000000  00017ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004dd2  00000000  00000000  0001c64e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000588  00000000  00000000  00021420  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__dtors_end>
       4:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
       8:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
       c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      10:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      14:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      18:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      1c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      20:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      24:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      28:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      2c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      30:	0c 94 bb 02 	jmp	0x576	; 0x576 <__vector_12>
      34:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__vector_13>
      38:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      3c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      40:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      44:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      48:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      4c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      50:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      54:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      58:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      5c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      60:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__vector_24>
      64:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      68:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      6c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      70:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      74:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      78:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_30>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_31>
      80:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_32>
      84:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      88:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      8c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      90:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      94:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      98:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      9c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      a0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      a4:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_41>
      a8:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      ac:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      b0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      b4:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      b8:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      bc:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      c0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      c4:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      c8:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      cc:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      d0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      d4:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      d8:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      dc:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      e0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      e4:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      e8:	17 09       	sbc	r17, r7
      ea:	db 08       	sbc	r13, r11
      ec:	07 09       	sbc	r16, r7
      ee:	1f 09       	sbc	r17, r15
      f0:	0b 09       	sbc	r16, r11
      f2:	1f 09       	sbc	r17, r15
      f4:	eb 08       	sbc	r14, r11
      f6:	d7 08       	sbc	r13, r7
      f8:	e3 08       	sbc	r14, r3
      fa:	e7 08       	sbc	r14, r7
      fc:	1f 09       	sbc	r17, r15
      fe:	fb 08       	sbc	r15, r11
     100:	cf 08       	sbc	r12, r15
     102:	ff 08       	sbc	r15, r15
     104:	cb 08       	sbc	r12, r11
     106:	df 08       	sbc	r13, r15
     108:	a3 08       	sbc	r10, r3
     10a:	a7 08       	sbc	r10, r7
     10c:	ab 08       	sbc	r10, r11
     10e:	af 08       	sbc	r10, r15
     110:	b3 08       	sbc	r11, r3
     112:	b7 08       	sbc	r11, r7
     114:	bb 08       	sbc	r11, r11
     116:	bf 08       	sbc	r11, r15
     118:	c3 08       	sbc	r12, r3
     11a:	c7 08       	sbc	r12, r7
     11c:	ef 08       	sbc	r14, r15
     11e:	f3 08       	sbc	r15, r3
     120:	1b 09       	sbc	r17, r11
     122:	f7 08       	sbc	r15, r7
     124:	1f 09       	sbc	r17, r15
     126:	d3 08       	sbc	r13, r3
     128:	0f 09       	sbc	r16, r15
     12a:	3b 08       	sbc	r3, r11
     12c:	3f 08       	sbc	r3, r15
     12e:	43 08       	sbc	r4, r3
     130:	47 08       	sbc	r4, r7
     132:	4b 08       	sbc	r4, r11
     134:	4f 08       	sbc	r4, r15
     136:	53 08       	sbc	r5, r3
     138:	57 08       	sbc	r5, r7
     13a:	5b 08       	sbc	r5, r11
     13c:	5f 08       	sbc	r5, r15
     13e:	63 08       	sbc	r6, r3
     140:	67 08       	sbc	r6, r7
     142:	6b 08       	sbc	r6, r11
     144:	6f 08       	sbc	r6, r15
     146:	73 08       	sbc	r7, r3
     148:	77 08       	sbc	r7, r7
     14a:	7b 08       	sbc	r7, r11
     14c:	7f 08       	sbc	r7, r15
     14e:	83 08       	sbc	r8, r3
     150:	87 08       	sbc	r8, r7
     152:	8b 08       	sbc	r8, r11
     154:	8f 08       	sbc	r8, r15
     156:	93 08       	sbc	r9, r3
     158:	97 08       	sbc	r9, r7
     15a:	9b 08       	sbc	r9, r11
     15c:	9f 08       	sbc	r9, r15
     15e:	1f 09       	sbc	r17, r15
     160:	1f 09       	sbc	r17, r15
     162:	1f 09       	sbc	r17, r15
     164:	1f 09       	sbc	r17, r15
     166:	03 09       	sbc	r16, r3
     168:	1f 09       	sbc	r17, r15
     16a:	1f 09       	sbc	r17, r15
     16c:	1f 09       	sbc	r17, r15
     16e:	1f 09       	sbc	r17, r15
     170:	1f 09       	sbc	r17, r15
     172:	1f 09       	sbc	r17, r15
     174:	1f 09       	sbc	r17, r15
     176:	1f 09       	sbc	r17, r15
     178:	1f 09       	sbc	r17, r15
     17a:	1f 09       	sbc	r17, r15
     17c:	1f 09       	sbc	r17, r15
     17e:	1f 09       	sbc	r17, r15
     180:	1f 09       	sbc	r17, r15
     182:	1f 09       	sbc	r17, r15
     184:	1f 09       	sbc	r17, r15
     186:	1f 09       	sbc	r17, r15
     188:	1f 09       	sbc	r17, r15
     18a:	1f 09       	sbc	r17, r15
     18c:	1f 09       	sbc	r17, r15
     18e:	1f 09       	sbc	r17, r15
     190:	1f 09       	sbc	r17, r15
     192:	1f 09       	sbc	r17, r15
     194:	1f 09       	sbc	r17, r15
     196:	1f 09       	sbc	r17, r15
     198:	1f 09       	sbc	r17, r15
     19a:	1f 09       	sbc	r17, r15
     19c:	1f 09       	sbc	r17, r15
     19e:	1f 09       	sbc	r17, r15
     1a0:	13 09       	sbc	r17, r3

000001a2 <__ctors_start>:
     1a2:	3e 05       	cpc	r19, r14

000001a4 <__ctors_end>:
     1a4:	45 05       	cpc	r20, r5

000001a6 <__dtors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf ef       	ldi	r28, 0xFF	; 255
     1ac:	cd bf       	out	0x3d, r28	; 61
     1ae:	df e7       	ldi	r29, 0x7F	; 127
     1b0:	de bf       	out	0x3e, r29	; 62

000001b2 <__do_copy_data>:
     1b2:	10 e4       	ldi	r17, 0x40	; 64
     1b4:	a0 e0       	ldi	r26, 0x00	; 0
     1b6:	b0 e4       	ldi	r27, 0x40	; 64
     1b8:	e0 ef       	ldi	r30, 0xF0	; 240
     1ba:	f3 e2       	ldi	r31, 0x23	; 35
     1bc:	00 e0       	ldi	r16, 0x00	; 0
     1be:	0b bf       	out	0x3b, r16	; 59
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__do_copy_data+0x14>
     1c2:	07 90       	elpm	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	ae 37       	cpi	r26, 0x7E	; 126
     1c8:	b1 07       	cpc	r27, r17
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0x10>

000001cc <__do_clear_bss>:
     1cc:	22 e4       	ldi	r18, 0x42	; 66
     1ce:	ae e7       	ldi	r26, 0x7E	; 126
     1d0:	b0 e4       	ldi	r27, 0x40	; 64
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <.do_clear_bss_start>

000001d4 <.do_clear_bss_loop>:
     1d4:	1d 92       	st	X+, r1

000001d6 <.do_clear_bss_start>:
     1d6:	a3 36       	cpi	r26, 0x63	; 99
     1d8:	b2 07       	cpc	r27, r18
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <.do_clear_bss_loop>

000001dc <__do_global_ctors>:
     1dc:	10 e0       	ldi	r17, 0x00	; 0
     1de:	c2 ed       	ldi	r28, 0xD2	; 210
     1e0:	d0 e0       	ldi	r29, 0x00	; 0
     1e2:	04 c0       	rjmp	.+8      	; 0x1ec <__do_global_ctors+0x10>
     1e4:	21 97       	sbiw	r28, 0x01	; 1
     1e6:	fe 01       	movw	r30, r28
     1e8:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__tablejump2__>
     1ec:	c1 3d       	cpi	r28, 0xD1	; 209
     1ee:	d1 07       	cpc	r29, r17
     1f0:	c9 f7       	brne	.-14     	; 0x1e4 <__do_global_ctors+0x8>
     1f2:	0e 94 28 04 	call	0x850	; 0x850 <main>
     1f6:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__do_global_dtors>

000001fa <__bad_interrupt>:
     1fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fe <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     1fe:	0e 94 d3 05 	call	0xba6	; 0xba6 <system_init>
     202:	08 95       	ret

00000204 <__vector_30>:
#include "include/usart_basic.h"
#include "include/morse.h"


ISR(TCB2_INT_vect)
{
     204:	1f 92       	push	r1
     206:	0f 92       	push	r0
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	0f 92       	push	r0
     20c:	11 24       	eor	r1, r1
     20e:	8f 93       	push	r24
	if(TCB2.INTFLAGS & TCB_CAPT_bm)
     210:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
     214:	80 ff       	sbrs	r24, 0
     216:	03 c0       	rjmp	.+6      	; 0x21e <__vector_30+0x1a>
    {
        TCB2.INTFLAGS = TCB_CAPT_bm;
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    }
}
     21e:	8f 91       	pop	r24
     220:	0f 90       	pop	r0
     222:	0f be       	out	0x3f, r0	; 63
     224:	0f 90       	pop	r0
     226:	1f 90       	pop	r1
     228:	18 95       	reti

0000022a <__vector_31>:

/**

*/
ISR(USART1_RXC_vect)
{
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	0b b6       	in	r0, 0x3b	; 59
     236:	0f 92       	push	r0
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	2f 93       	push	r18
     23e:	3f 93       	push	r19
     240:	4f 93       	push	r20
     242:	5f 93       	push	r21
     244:	6f 93       	push	r22
     246:	7f 93       	push	r23
     248:	8f 93       	push	r24
     24a:	9f 93       	push	r25
     24c:	af 93       	push	r26
     24e:	bf 93       	push	r27
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	ef 93       	push	r30
     256:	ff 93       	push	r31
	static uint8_t field_len = 0;
	static uint32_t tempMsg_ID = 0;
	static BOOL receiving_msg = FALSE;
	uint8_t rx_char;

	rx_char = USART1_get_data();
     258:	0e 94 9b 0b 	call	0x1736	; 0x1736 <USART1_get_data>
     25c:	18 2f       	mov	r17, r24

	if(!buff)
     25e:	80 91 89 40 	lds	r24, 0x4089	; 0x804089 <_ZZ11__vector_31E4buff>
     262:	90 91 8a 40 	lds	r25, 0x408A	; 0x80408a <_ZZ11__vector_31E4buff+0x1>
     266:	89 2b       	or	r24, r25
     268:	31 f4       	brne	.+12     	; 0x276 <__vector_31+0x4c>
	{
		buff = nextEmptyRxBuffer();
     26a:	0e 94 72 07 	call	0xee4	; 0xee4 <_Z17nextEmptyRxBufferv>
     26e:	80 93 89 40 	sts	0x4089, r24	; 0x804089 <_ZZ11__vector_31E4buff>
     272:	90 93 8a 40 	sts	0x408A, r25	; 0x80408a <_ZZ11__vector_31E4buff+0x1>
	}

	if(buff)
     276:	c0 91 89 40 	lds	r28, 0x4089	; 0x804089 <_ZZ11__vector_31E4buff>
     27a:	d0 91 8a 40 	lds	r29, 0x408A	; 0x80408a <_ZZ11__vector_31E4buff+0x1>
     27e:	20 97       	sbiw	r28, 0x00	; 0
     280:	09 f4       	brne	.+2      	; 0x284 <__vector_31+0x5a>
     282:	e3 c0       	rjmp	.+454    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
	{
		rx_char = toupper(rx_char);
     284:	81 2f       	mov	r24, r17
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <toupper>
//		SMCR = 0x00;                                /* exit power-down mode */

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
     28c:	84 32       	cpi	r24, 0x24	; 36
     28e:	11 f0       	breq	.+4      	; 0x294 <__vector_31+0x6a>
     290:	81 32       	cpi	r24, 0x21	; 33
     292:	49 f5       	brne	.+82     	; 0x2e6 <__vector_31+0xbc>
		{
			charIndex = 0;
     294:	10 92 88 40 	sts	0x4088, r1	; 0x804088 <_ZZ11__vector_31E9charIndex>
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
     298:	81 32       	cpi	r24, 0x21	; 33
     29a:	11 f4       	brne	.+4      	; 0x2a0 <__vector_31+0x76>
     29c:	83 e0       	ldi	r24, 0x03	; 3
     29e:	01 c0       	rjmp	.+2      	; 0x2a2 <__vector_31+0x78>
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	88 83       	st	Y, r24
			field_len = 0;
     2a4:	10 92 87 40 	sts	0x4087, r1	; 0x804087 <_ZZ11__vector_31E9field_len>
			tempMsg_ID = 0;
     2a8:	10 92 83 40 	sts	0x4083, r1	; 0x804083 <_ZZ11__vector_31E10tempMsg_ID>
     2ac:	10 92 84 40 	sts	0x4084, r1	; 0x804084 <_ZZ11__vector_31E10tempMsg_ID+0x1>
     2b0:	10 92 85 40 	sts	0x4085, r1	; 0x804085 <_ZZ11__vector_31E10tempMsg_ID+0x2>
     2b4:	10 92 86 40 	sts	0x4086, r1	; 0x804086 <_ZZ11__vector_31E10tempMsg_ID+0x3>
			receiving_msg = TRUE;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	80 93 82 40 	sts	0x4082, r24	; 0x804082 <_ZZ11__vector_31E13receiving_msg>

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
     2be:	10 92 81 40 	sts	0x4081, r1	; 0x804081 <_ZZ11__vector_31E11field_index>
     2c2:	80 91 81 40 	lds	r24, 0x4081	; 0x804081 <_ZZ11__vector_31E11field_index>
     2c6:	83 30       	cpi	r24, 0x03	; 3
     2c8:	58 f4       	brcc	.+22     	; 0x2e0 <__vector_31+0xb6>
			{
				buff->fields[field_index][0] = '\0';
     2ca:	fe 01       	movw	r30, r28
     2cc:	05 e1       	ldi	r16, 0x15	; 21
     2ce:	80 9f       	mul	r24, r16
     2d0:	e0 0d       	add	r30, r0
     2d2:	f1 1d       	adc	r31, r1
     2d4:	11 24       	eor	r1, r1
     2d6:	13 82       	std	Z+3, r1	; 0x03
			field_len = 0;
			tempMsg_ID = 0;
			receiving_msg = TRUE;

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
     2d8:	8f 5f       	subi	r24, 0xFF	; 255
     2da:	80 93 81 40 	sts	0x4081, r24	; 0x804081 <_ZZ11__vector_31E11field_index>
     2de:	f1 cf       	rjmp	.-30     	; 0x2c2 <__vector_31+0x98>
			{
				buff->fields[field_index][0] = '\0';
			}

			field_index = 0;
     2e0:	10 92 81 40 	sts	0x4081, r1	; 0x804081 <_ZZ11__vector_31E11field_index>
     2e4:	a7 c0       	rjmp	.+334    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		}
		else if(receiving_msg)
     2e6:	90 91 82 40 	lds	r25, 0x4082	; 0x804082 <_ZZ11__vector_31E13receiving_msg>
     2ea:	99 23       	and	r25, r25
     2ec:	09 f4       	brne	.+2      	; 0x2f0 <__vector_31+0xc6>
     2ee:	8b c0       	rjmp	.+278    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
     2f0:	8c 32       	cpi	r24, 0x2C	; 44
     2f2:	29 f0       	breq	.+10     	; 0x2fe <__vector_31+0xd4>
     2f4:	8b 33       	cpi	r24, 0x3B	; 59
     2f6:	19 f0       	breq	.+6      	; 0x2fe <__vector_31+0xd4>
     2f8:	8f 33       	cpi	r24, 0x3F	; 63
     2fa:	09 f0       	breq	.+2      	; 0x2fe <__vector_31+0xd4>
     2fc:	42 c0       	rjmp	.+132    	; 0x382 <__vector_31+0x158>
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
     2fe:	90 91 81 40 	lds	r25, 0x4081	; 0x804081 <_ZZ11__vector_31E11field_index>
     302:	99 23       	and	r25, r25
     304:	89 f0       	breq	.+34     	; 0x328 <__vector_31+0xfe>
				{
					buff->fields[field_index - 1][field_len] = 0;
     306:	29 2f       	mov	r18, r25
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	21 50       	subi	r18, 0x01	; 1
     30c:	31 09       	sbc	r19, r1
     30e:	40 91 87 40 	lds	r20, 0x4087	; 0x804087 <_ZZ11__vector_31E9field_len>
     312:	55 e1       	ldi	r21, 0x15	; 21
     314:	52 9f       	mul	r21, r18
     316:	f0 01       	movw	r30, r0
     318:	53 9f       	mul	r21, r19
     31a:	f0 0d       	add	r31, r0
     31c:	11 24       	eor	r1, r1
     31e:	ec 0f       	add	r30, r28
     320:	fd 1f       	adc	r31, r29
     322:	e4 0f       	add	r30, r20
     324:	f1 1d       	adc	r31, r1
     326:	13 82       	std	Z+3, r1	; 0x03
				}

				field_index++;
     328:	9f 5f       	subi	r25, 0xFF	; 255
     32a:	90 93 81 40 	sts	0x4081, r25	; 0x804081 <_ZZ11__vector_31E11field_index>
				field_len = 0;
     32e:	10 92 87 40 	sts	0x4087, r1	; 0x804087 <_ZZ11__vector_31E9field_len>

				if(rx_char == ';')
     332:	8b 33       	cpi	r24, 0x3B	; 59
     334:	69 f4       	brne	.+26     	; 0x350 <__vector_31+0x126>
				{
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
     336:	80 91 88 40 	lds	r24, 0x4088	; 0x804088 <_ZZ11__vector_31E9charIndex>
     33a:	84 30       	cpi	r24, 0x04	; 4
     33c:	30 f0       	brcs	.+12     	; 0x34a <__vector_31+0x120>
					{
						buff->id = (LBMessageID)tempMsg_ID;
     33e:	80 91 83 40 	lds	r24, 0x4083	; 0x804083 <_ZZ11__vector_31E10tempMsg_ID>
     342:	90 91 84 40 	lds	r25, 0x4084	; 0x804084 <_ZZ11__vector_31E10tempMsg_ID+0x1>
     346:	89 83       	std	Y+1, r24	; 0x01
     348:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = FALSE;
     34a:	10 92 82 40 	sts	0x4082, r1	; 0x804082 <_ZZ11__vector_31E13receiving_msg>
     34e:	10 c0       	rjmp	.+32     	; 0x370 <__vector_31+0x146>
				}
				else if(rx_char == '?')
     350:	8f 33       	cpi	r24, 0x3F	; 63
     352:	71 f4       	brne	.+28     	; 0x370 <__vector_31+0x146>
				{
					buff->type = LINKBUS_MSG_QUERY;
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	88 83       	st	Y, r24
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
     358:	80 91 88 40 	lds	r24, 0x4088	; 0x804088 <_ZZ11__vector_31E9charIndex>
     35c:	84 30       	cpi	r24, 0x04	; 4
     35e:	30 f0       	brcs	.+12     	; 0x36c <__vector_31+0x142>
					{
						buff->id = (LBMessageID)tempMsg_ID;
     360:	80 91 83 40 	lds	r24, 0x4083	; 0x804083 <_ZZ11__vector_31E10tempMsg_ID>
     364:	90 91 84 40 	lds	r25, 0x4084	; 0x804084 <_ZZ11__vector_31E10tempMsg_ID+0x1>
     368:	89 83       	std	Y+1, r24	; 0x01
     36a:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = FALSE;
     36c:	10 92 82 40 	sts	0x4082, r1	; 0x804082 <_ZZ11__vector_31E13receiving_msg>
				}

				if(!receiving_msg)
     370:	80 91 82 40 	lds	r24, 0x4082	; 0x804082 <_ZZ11__vector_31E13receiving_msg>
     374:	81 11       	cpse	r24, r1
     376:	5e c0       	rjmp	.+188    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				{
					buff = 0;
     378:	10 92 89 40 	sts	0x4089, r1	; 0x804089 <_ZZ11__vector_31E4buff>
     37c:	10 92 8a 40 	sts	0x408A, r1	; 0x80408a <_ZZ11__vector_31E4buff+0x1>
     380:	59 c0       	rjmp	.+178    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				}
			}
			else
			{
				if(field_index == 0)    /* message ID received */
     382:	20 91 81 40 	lds	r18, 0x4081	; 0x804081 <_ZZ11__vector_31E11field_index>
     386:	21 11       	cpse	r18, r1
     388:	29 c0       	rjmp	.+82     	; 0x3dc <__vector_31+0x1b2>
				{
					tempMsg_ID = tempMsg_ID * 10 + rx_char;
     38a:	40 91 83 40 	lds	r20, 0x4083	; 0x804083 <_ZZ11__vector_31E10tempMsg_ID>
     38e:	50 91 84 40 	lds	r21, 0x4084	; 0x804084 <_ZZ11__vector_31E10tempMsg_ID+0x1>
     392:	60 91 85 40 	lds	r22, 0x4085	; 0x804085 <_ZZ11__vector_31E10tempMsg_ID+0x2>
     396:	70 91 86 40 	lds	r23, 0x4086	; 0x804086 <_ZZ11__vector_31E10tempMsg_ID+0x3>
     39a:	44 0f       	add	r20, r20
     39c:	55 1f       	adc	r21, r21
     39e:	66 1f       	adc	r22, r22
     3a0:	77 1f       	adc	r23, r23
     3a2:	8a 01       	movw	r16, r20
     3a4:	9b 01       	movw	r18, r22
     3a6:	00 0f       	add	r16, r16
     3a8:	11 1f       	adc	r17, r17
     3aa:	22 1f       	adc	r18, r18
     3ac:	33 1f       	adc	r19, r19
     3ae:	00 0f       	add	r16, r16
     3b0:	11 1f       	adc	r17, r17
     3b2:	22 1f       	adc	r18, r18
     3b4:	33 1f       	adc	r19, r19
     3b6:	40 0f       	add	r20, r16
     3b8:	51 1f       	adc	r21, r17
     3ba:	62 1f       	adc	r22, r18
     3bc:	73 1f       	adc	r23, r19
     3be:	8a 01       	movw	r16, r20
     3c0:	9b 01       	movw	r18, r22
     3c2:	08 0f       	add	r16, r24
     3c4:	11 1d       	adc	r17, r1
     3c6:	21 1d       	adc	r18, r1
     3c8:	31 1d       	adc	r19, r1
     3ca:	00 93 83 40 	sts	0x4083, r16	; 0x804083 <_ZZ11__vector_31E10tempMsg_ID>
     3ce:	10 93 84 40 	sts	0x4084, r17	; 0x804084 <_ZZ11__vector_31E10tempMsg_ID+0x1>
     3d2:	20 93 85 40 	sts	0x4085, r18	; 0x804085 <_ZZ11__vector_31E10tempMsg_ID+0x2>
     3d6:	30 93 86 40 	sts	0x4086, r19	; 0x804086 <_ZZ11__vector_31E10tempMsg_ID+0x3>
     3da:	2c c0       	rjmp	.+88     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				}
				else
				{
					buff->fields[field_index - 1][field_len++] = rx_char;
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	21 50       	subi	r18, 0x01	; 1
     3e0:	31 09       	sbc	r19, r1
     3e2:	90 91 87 40 	lds	r25, 0x4087	; 0x804087 <_ZZ11__vector_31E9field_len>
     3e6:	41 e0       	ldi	r20, 0x01	; 1
     3e8:	49 0f       	add	r20, r25
     3ea:	40 93 87 40 	sts	0x4087, r20	; 0x804087 <_ZZ11__vector_31E9field_len>
     3ee:	65 e1       	ldi	r22, 0x15	; 21
     3f0:	62 9f       	mul	r22, r18
     3f2:	a0 01       	movw	r20, r0
     3f4:	63 9f       	mul	r22, r19
     3f6:	50 0d       	add	r21, r0
     3f8:	11 24       	eor	r1, r1
     3fa:	c4 0f       	add	r28, r20
     3fc:	d5 1f       	adc	r29, r21
     3fe:	c9 0f       	add	r28, r25
     400:	d1 1d       	adc	r29, r1
     402:	8b 83       	std	Y+3, r24	; 0x03
     404:	17 c0       	rjmp	.+46     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				}
			}
		}
		else if(rx_char == 0x0D)    /* Carriage return resets any message in progress */
     406:	8d 30       	cpi	r24, 0x0D	; 13
     408:	a9 f4       	brne	.+42     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		{
			buff->id = MESSAGE_EMPTY;
     40a:	19 82       	std	Y+1, r1	; 0x01
     40c:	1a 82       	std	Y+2, r1	; 0x02
			charIndex = LINKBUS_MAX_MSG_LENGTH;
     40e:	82 e3       	ldi	r24, 0x32	; 50
     410:	80 93 88 40 	sts	0x4088, r24	; 0x804088 <_ZZ11__vector_31E9charIndex>
			field_len = 0;
     414:	10 92 87 40 	sts	0x4087, r1	; 0x804087 <_ZZ11__vector_31E9field_len>
			tempMsg_ID = 0;
     418:	10 92 83 40 	sts	0x4083, r1	; 0x804083 <_ZZ11__vector_31E10tempMsg_ID>
     41c:	10 92 84 40 	sts	0x4084, r1	; 0x804084 <_ZZ11__vector_31E10tempMsg_ID+0x1>
     420:	10 92 85 40 	sts	0x4085, r1	; 0x804085 <_ZZ11__vector_31E10tempMsg_ID+0x2>
     424:	10 92 86 40 	sts	0x4086, r1	; 0x804086 <_ZZ11__vector_31E10tempMsg_ID+0x3>
			field_index = 0;
     428:	10 92 81 40 	sts	0x4081, r1	; 0x804081 <_ZZ11__vector_31E11field_index>
			buff = NULL;
     42c:	10 92 89 40 	sts	0x4089, r1	; 0x804089 <_ZZ11__vector_31E4buff>
     430:	10 92 8a 40 	sts	0x408A, r1	; 0x80408a <_ZZ11__vector_31E4buff+0x1>
		}

		if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
     434:	80 91 88 40 	lds	r24, 0x4088	; 0x804088 <_ZZ11__vector_31E9charIndex>
     438:	8f 5f       	subi	r24, 0xFF	; 255
     43a:	80 93 88 40 	sts	0x4088, r24	; 0x804088 <_ZZ11__vector_31E9charIndex>
     43e:	82 33       	cpi	r24, 0x32	; 50
     440:	20 f0       	brcs	.+8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		{
			receiving_msg = FALSE;
     442:	10 92 82 40 	sts	0x4082, r1	; 0x804082 <_ZZ11__vector_31E13receiving_msg>
			charIndex = 0;
     446:	10 92 88 40 	sts	0x4088, r1	; 0x804088 <_ZZ11__vector_31E9charIndex>
		}
	}
}
     44a:	ff 91       	pop	r31
     44c:	ef 91       	pop	r30
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	bf 91       	pop	r27
     454:	af 91       	pop	r26
     456:	9f 91       	pop	r25
     458:	8f 91       	pop	r24
     45a:	7f 91       	pop	r23
     45c:	6f 91       	pop	r22
     45e:	5f 91       	pop	r21
     460:	4f 91       	pop	r20
     462:	3f 91       	pop	r19
     464:	2f 91       	pop	r18
     466:	1f 91       	pop	r17
     468:	0f 91       	pop	r16
     46a:	0f 90       	pop	r0
     46c:	0b be       	out	0x3b, r0	; 59
     46e:	0f 90       	pop	r0
     470:	0f be       	out	0x3f, r0	; 63
     472:	0f 90       	pop	r0
     474:	1f 90       	pop	r1
     476:	18 95       	reti

00000478 <__vector_32>:

/**

*/
ISR(USART1_DRE_vect)
{
     478:	1f 92       	push	r1
     47a:	0f 92       	push	r0
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	0f 92       	push	r0
     480:	11 24       	eor	r1, r1
     482:	0b b6       	in	r0, 0x3b	; 59
     484:	0f 92       	push	r0
     486:	2f 93       	push	r18
     488:	3f 93       	push	r19
     48a:	4f 93       	push	r20
     48c:	5f 93       	push	r21
     48e:	6f 93       	push	r22
     490:	7f 93       	push	r23
     492:	8f 93       	push	r24
     494:	9f 93       	push	r25
     496:	af 93       	push	r26
     498:	bf 93       	push	r27
     49a:	ef 93       	push	r30
     49c:	ff 93       	push	r31
	static LinkbusTxBuffer* buff = 0;
	static uint8_t charIndex = 0;

	if(!buff)
     49e:	80 91 7f 40 	lds	r24, 0x407F	; 0x80407f <_ZZ11__vector_32E4buff>
     4a2:	90 91 80 40 	lds	r25, 0x4080	; 0x804080 <_ZZ11__vector_32E4buff+0x1>
     4a6:	89 2b       	or	r24, r25
     4a8:	31 f4       	brne	.+12     	; 0x4b6 <__vector_32+0x3e>
	{
		buff = nextFullTxBuffer();
     4aa:	0e 94 1a 07 	call	0xe34	; 0xe34 <_Z16nextFullTxBufferv>
     4ae:	80 93 7f 40 	sts	0x407F, r24	; 0x80407f <_ZZ11__vector_32E4buff>
     4b2:	90 93 80 40 	sts	0x4080, r25	; 0x804080 <_ZZ11__vector_32E4buff+0x1>
	}

	if((*buff)[charIndex])
     4b6:	e0 91 7f 40 	lds	r30, 0x407F	; 0x80407f <_ZZ11__vector_32E4buff>
     4ba:	f0 91 80 40 	lds	r31, 0x4080	; 0x804080 <_ZZ11__vector_32E4buff+0x1>
     4be:	80 91 7e 40 	lds	r24, 0x407E	; 0x80407e <__data_end>
     4c2:	df 01       	movw	r26, r30
     4c4:	a8 0f       	add	r26, r24
     4c6:	b1 1d       	adc	r27, r1
     4c8:	9c 91       	ld	r25, X
     4ca:	99 23       	and	r25, r25
     4cc:	31 f0       	breq	.+12     	; 0x4da <__vector_32+0x62>
	{
		/* Put data into buffer, sends the data */
		USART1.TXDATAL = (*buff)[charIndex++];
     4ce:	8f 5f       	subi	r24, 0xFF	; 255
     4d0:	80 93 7e 40 	sts	0x407E, r24	; 0x80407e <__data_end>
     4d4:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
     4d8:	0d c0       	rjmp	.+26     	; 0x4f4 <__vector_32+0x7c>
	}
	else
	{
		charIndex = 0;
     4da:	10 92 7e 40 	sts	0x407E, r1	; 0x80407e <__data_end>
		(*buff)[0] = '\0';
     4de:	10 82       	st	Z, r1
		buff = nextFullTxBuffer();
     4e0:	0e 94 1a 07 	call	0xe34	; 0xe34 <_Z16nextFullTxBufferv>
     4e4:	80 93 7f 40 	sts	0x407F, r24	; 0x80407f <_ZZ11__vector_32E4buff>
     4e8:	90 93 80 40 	sts	0x4080, r25	; 0x804080 <_ZZ11__vector_32E4buff+0x1>
		if(!buff)
     4ec:	89 2b       	or	r24, r25
     4ee:	11 f4       	brne	.+4      	; 0x4f4 <__vector_32+0x7c>
		{
			linkbus_end_tx();
     4f0:	0e 94 b2 07 	call	0xf64	; 0xf64 <_Z14linkbus_end_txv>
		}
	}
}
     4f4:	ff 91       	pop	r31
     4f6:	ef 91       	pop	r30
     4f8:	bf 91       	pop	r27
     4fa:	af 91       	pop	r26
     4fc:	9f 91       	pop	r25
     4fe:	8f 91       	pop	r24
     500:	7f 91       	pop	r23
     502:	6f 91       	pop	r22
     504:	5f 91       	pop	r21
     506:	4f 91       	pop	r20
     508:	3f 91       	pop	r19
     50a:	2f 91       	pop	r18
     50c:	0f 90       	pop	r0
     50e:	0b be       	out	0x3b, r0	; 59
     510:	0f 90       	pop	r0
     512:	0f be       	out	0x3f, r0	; 63
     514:	0f 90       	pop	r0
     516:	1f 90       	pop	r1
     518:	18 95       	reti

0000051a <__vector_41>:
{
	
}

void wdt_init(WDReset resetType)
{
     51a:	1f 92       	push	r1
     51c:	0f 92       	push	r0
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	0f 92       	push	r0
     522:	11 24       	eor	r1, r1
     524:	2f 93       	push	r18
     526:	3f 93       	push	r19
     528:	8f 93       	push	r24
     52a:	9f 93       	push	r25
     52c:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
     530:	80 ff       	sbrs	r24, 0
     532:	18 c0       	rjmp	.+48     	; 0x564 <__vector_41+0x4a>
     534:	80 91 e3 40 	lds	r24, 0x40E3	; 0x8040e3 <_ZZ11__vector_41E3cnt>
     538:	90 91 e4 40 	lds	r25, 0x40E4	; 0x8040e4 <_ZZ11__vector_41E3cnt+0x1>
     53c:	9c 01       	movw	r18, r24
     53e:	2f 5f       	subi	r18, 0xFF	; 255
     540:	3f 4f       	sbci	r19, 0xFF	; 255
     542:	20 93 e3 40 	sts	0x40E3, r18	; 0x8040e3 <_ZZ11__vector_41E3cnt>
     546:	30 93 e4 40 	sts	0x40E4, r19	; 0x8040e4 <_ZZ11__vector_41E3cnt+0x1>
     54a:	8b 32       	cpi	r24, 0x2B	; 43
     54c:	91 40       	sbci	r25, 0x01	; 1
     54e:	39 f4       	brne	.+14     	; 0x55e <__vector_41+0x44>
     550:	10 92 e3 40 	sts	0x40E3, r1	; 0x8040e3 <_ZZ11__vector_41E3cnt>
     554:	10 92 e4 40 	sts	0x40E4, r1	; 0x8040e4 <_ZZ11__vector_41E3cnt+0x1>
     558:	8a b1       	in	r24, 0x0a	; 10
     55a:	80 64       	ori	r24, 0x40	; 64
     55c:	8a b9       	out	0x0a, r24	; 10
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
     564:	9f 91       	pop	r25
     566:	8f 91       	pop	r24
     568:	3f 91       	pop	r19
     56a:	2f 91       	pop	r18
     56c:	0f 90       	pop	r0
     56e:	0f be       	out	0x3f, r0	; 63
     570:	0f 90       	pop	r0
     572:	1f 90       	pop	r1
     574:	18 95       	reti

00000576 <__vector_12>:
     576:	1f 92       	push	r1
     578:	0f 92       	push	r0
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	0f 92       	push	r0
     57e:	11 24       	eor	r1, r1
     580:	0b b6       	in	r0, 0x3b	; 59
     582:	0f 92       	push	r0
     584:	2f 93       	push	r18
     586:	3f 93       	push	r19
     588:	4f 93       	push	r20
     58a:	5f 93       	push	r21
     58c:	6f 93       	push	r22
     58e:	7f 93       	push	r23
     590:	8f 93       	push	r24
     592:	9f 93       	push	r25
     594:	af 93       	push	r26
     596:	bf 93       	push	r27
     598:	ef 93       	push	r30
     59a:	ff 93       	push	r31
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <__vector_12+0x2c>
     5a2:	1f 92       	push	r1
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
     5ac:	80 ff       	sbrs	r24, 0
     5ae:	38 c1       	rjmp	.+624    	; 0x820 <__vector_12+0x2aa>
     5b0:	80 91 a1 40 	lds	r24, 0x40A1	; 0x8040a1 <_ZL21g_util_tick_countdown>
     5b4:	90 91 a2 40 	lds	r25, 0x40A2	; 0x8040a2 <_ZL21g_util_tick_countdown+0x1>
     5b8:	89 2b       	or	r24, r25
     5ba:	49 f0       	breq	.+18     	; 0x5ce <__vector_12+0x58>
     5bc:	80 91 a1 40 	lds	r24, 0x40A1	; 0x8040a1 <_ZL21g_util_tick_countdown>
     5c0:	90 91 a2 40 	lds	r25, 0x40A2	; 0x8040a2 <_ZL21g_util_tick_countdown+0x1>
     5c4:	01 97       	sbiw	r24, 0x01	; 1
     5c6:	80 93 a1 40 	sts	0x40A1, r24	; 0x8040a1 <_ZL21g_util_tick_countdown>
     5ca:	90 93 a2 40 	sts	0x40A2, r25	; 0x8040a2 <_ZL21g_util_tick_countdown+0x1>
     5ce:	80 91 d2 40 	lds	r24, 0x40D2	; 0x8040d2 <g_event_enabled>
     5d2:	88 23       	and	r24, r24
     5d4:	29 f0       	breq	.+10     	; 0x5e0 <__vector_12+0x6a>
     5d6:	80 91 d3 40 	lds	r24, 0x40D3	; 0x8040d3 <g_event_commenced>
     5da:	81 11       	cpse	r24, r1
     5dc:	03 c0       	rjmp	.+6      	; 0x5e4 <__vector_12+0x6e>
     5de:	03 c0       	rjmp	.+6      	; 0x5e6 <__vector_12+0x70>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <__vector_12+0x70>
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	88 23       	and	r24, r24
     5e8:	09 f4       	brne	.+2      	; 0x5ec <__vector_12+0x76>
     5ea:	81 c0       	rjmp	.+258    	; 0x6ee <__vector_12+0x178>
     5ec:	80 91 a4 40 	lds	r24, 0x40A4	; 0x8040a4 <_ZL12g_on_the_air>
     5f0:	90 91 a5 40 	lds	r25, 0x40A5	; 0x8040a5 <_ZL12g_on_the_air+0x1>
     5f4:	a0 91 a6 40 	lds	r26, 0x40A6	; 0x8040a6 <_ZL12g_on_the_air+0x2>
     5f8:	b0 91 a7 40 	lds	r27, 0x40A7	; 0x8040a7 <_ZL12g_on_the_air+0x3>
     5fc:	18 16       	cp	r1, r24
     5fe:	19 06       	cpc	r1, r25
     600:	1a 06       	cpc	r1, r26
     602:	1b 06       	cpc	r1, r27
     604:	0c f0       	brlt	.+2      	; 0x608 <__vector_12+0x92>
     606:	58 c0       	rjmp	.+176    	; 0x6b8 <__vector_12+0x142>
     608:	80 91 e5 40 	lds	r24, 0x40E5	; 0x8040e5 <_ZZ11__vector_12E7codeInc>
     60c:	90 91 e6 40 	lds	r25, 0x40E6	; 0x8040e6 <_ZZ11__vector_12E7codeInc+0x1>
     610:	00 97       	sbiw	r24, 0x00	; 0
     612:	09 f4       	brne	.+2      	; 0x616 <__vector_12+0xa0>
     614:	44 c0       	rjmp	.+136    	; 0x69e <__vector_12+0x128>
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	80 93 e5 40 	sts	0x40E5, r24	; 0x8040e5 <_ZZ11__vector_12E7codeInc>
     61c:	90 93 e6 40 	sts	0x40E6, r25	; 0x8040e6 <_ZZ11__vector_12E7codeInc+0x1>
     620:	89 2b       	or	r24, r25
     622:	09 f0       	breq	.+2      	; 0x626 <__vector_12+0xb0>
     624:	64 c0       	rjmp	.+200    	; 0x6ee <__vector_12+0x178>
     626:	ae 01       	movw	r20, r28
     628:	4e 5f       	subi	r20, 0xFE	; 254
     62a:	5f 4f       	sbci	r21, 0xFF	; 255
     62c:	be 01       	movw	r22, r28
     62e:	6d 5f       	subi	r22, 0xFD	; 253
     630:	7f 4f       	sbci	r23, 0xFF	; 255
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 23 09 	call	0x1246	; 0x1246 <_Z9makeMorsePcPhS0_>
     63a:	80 93 e7 40 	sts	0x40E7, r24	; 0x8040e7 <_ZZ11__vector_12E3key>
     63e:	8b 81       	ldd	r24, Y+3	; 0x03
     640:	81 11       	cpse	r24, r1
     642:	25 c0       	rjmp	.+74     	; 0x68e <__vector_12+0x118>
     644:	8a 81       	ldd	r24, Y+2	; 0x02
     646:	88 23       	and	r24, r24
     648:	11 f1       	breq	.+68     	; 0x68e <__vector_12+0x118>
     64a:	8d ef       	ldi	r24, 0xFD	; 253
     64c:	80 93 a0 40 	sts	0x40A0, r24	; 0x8040a0 <_ZL18g_last_status_code>
     650:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <g_pattern_codespeed>
     654:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_Z13throttleValueh>
     658:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
     65c:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	8b 83       	std	Y+3, r24	; 0x03
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	be 01       	movw	r22, r28
     66a:	6d 5f       	subi	r22, 0xFD	; 253
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	88 ea       	ldi	r24, 0xA8	; 168
     670:	90 e4       	ldi	r25, 0x40	; 64
     672:	0e 94 23 09 	call	0x1246	; 0x1246 <_Z9makeMorsePcPhS0_>
     676:	ae 01       	movw	r20, r28
     678:	4e 5f       	subi	r20, 0xFE	; 254
     67a:	5f 4f       	sbci	r21, 0xFF	; 255
     67c:	be 01       	movw	r22, r28
     67e:	6d 5f       	subi	r22, 0xFD	; 253
     680:	7f 4f       	sbci	r23, 0xFF	; 255
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 23 09 	call	0x1246	; 0x1246 <_Z9makeMorsePcPhS0_>
     68a:	80 93 e7 40 	sts	0x40E7, r24	; 0x8040e7 <_ZZ11__vector_12E3key>
     68e:	80 91 e7 40 	lds	r24, 0x40E7	; 0x8040e7 <_ZZ11__vector_12E3key>
     692:	88 23       	and	r24, r24
     694:	61 f1       	breq	.+88     	; 0x6ee <__vector_12+0x178>
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <_Z18powerToTransmitterh>
     69c:	28 c0       	rjmp	.+80     	; 0x6ee <__vector_12+0x178>
     69e:	80 91 e7 40 	lds	r24, 0x40E7	; 0x8040e7 <_ZZ11__vector_12E3key>
     6a2:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_Z14keyTransmitterh>
     6a6:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <_ZL15g_code_throttle>
     6aa:	90 91 08 40 	lds	r25, 0x4008	; 0x804008 <_ZL15g_code_throttle+0x1>
     6ae:	80 93 e5 40 	sts	0x40E5, r24	; 0x8040e5 <_ZZ11__vector_12E7codeInc>
     6b2:	90 93 e6 40 	sts	0x40E6, r25	; 0x8040e6 <_ZZ11__vector_12E7codeInc+0x1>
     6b6:	1b c0       	rjmp	.+54     	; 0x6ee <__vector_12+0x178>
     6b8:	80 91 a4 40 	lds	r24, 0x40A4	; 0x8040a4 <_ZL12g_on_the_air>
     6bc:	90 91 a5 40 	lds	r25, 0x40A5	; 0x8040a5 <_ZL12g_on_the_air+0x1>
     6c0:	a0 91 a6 40 	lds	r26, 0x40A6	; 0x8040a6 <_ZL12g_on_the_air+0x2>
     6c4:	b0 91 a7 40 	lds	r27, 0x40A7	; 0x8040a7 <_ZL12g_on_the_air+0x3>
     6c8:	89 2b       	or	r24, r25
     6ca:	8a 2b       	or	r24, r26
     6cc:	8b 2b       	or	r24, r27
     6ce:	79 f4       	brne	.+30     	; 0x6ee <__vector_12+0x178>
     6d0:	80 91 e7 40 	lds	r24, 0x40E7	; 0x8040e7 <_ZZ11__vector_12E3key>
     6d4:	88 23       	and	r24, r24
     6d6:	59 f0       	breq	.+22     	; 0x6ee <__vector_12+0x178>
     6d8:	10 92 e7 40 	sts	0x40E7, r1	; 0x8040e7 <_ZZ11__vector_12E3key>
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_Z14keyTransmitterh>
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <_Z18powerToTransmitterh>
     6e8:	8e ef       	ldi	r24, 0xFE	; 254
     6ea:	80 93 a0 40 	sts	0x40A0, r24	; 0x8040a0 <_ZL18g_last_status_code>
     6ee:	80 91 e8 40 	lds	r24, 0x40E8	; 0x8040e8 <_ZZ11__vector_12E19conversionInProcess>
     6f2:	81 11       	cpse	r24, r1
     6f4:	42 c0       	rjmp	.+132    	; 0x77a <__vector_12+0x204>
     6f6:	8f ef       	ldi	r24, 0xFF	; 255
     6f8:	80 93 e9 40 	sts	0x40E9, r24	; 0x8040e9 <_ZZ11__vector_12E24indexConversionInProcess>
     6fc:	19 82       	std	Y+1, r1	; 0x01
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
     700:	85 30       	cpi	r24, 0x05	; 5
     702:	30 f5       	brcc	.+76     	; 0x750 <__vector_12+0x1da>
     704:	e9 81       	ldd	r30, Y+1	; 0x01
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	ee 0f       	add	r30, r30
     70a:	ff 1f       	adc	r31, r31
     70c:	e6 5f       	subi	r30, 0xF6	; 246
     70e:	ff 4b       	sbci	r31, 0xBF	; 191
     710:	80 81       	ld	r24, Z
     712:	91 81       	ldd	r25, Z+1	; 0x01
     714:	89 2b       	or	r24, r25
     716:	59 f0       	breq	.+22     	; 0x72e <__vector_12+0x1b8>
     718:	e9 81       	ldd	r30, Y+1	; 0x01
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	ee 0f       	add	r30, r30
     71e:	ff 1f       	adc	r31, r31
     720:	e6 5f       	subi	r30, 0xF6	; 246
     722:	ff 4b       	sbci	r31, 0xBF	; 191
     724:	80 81       	ld	r24, Z
     726:	91 81       	ldd	r25, Z+1	; 0x01
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	80 83       	st	Z, r24
     72c:	91 83       	std	Z+1, r25	; 0x01
     72e:	e9 81       	ldd	r30, Y+1	; 0x01
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	e6 5f       	subi	r30, 0xF6	; 246
     738:	ff 4b       	sbci	r31, 0xBF	; 191
     73a:	80 81       	ld	r24, Z
     73c:	91 81       	ldd	r25, Z+1	; 0x01
     73e:	89 2b       	or	r24, r25
     740:	19 f4       	brne	.+6      	; 0x748 <__vector_12+0x1d2>
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	80 93 e9 40 	sts	0x40E9, r24	; 0x8040e9 <_ZZ11__vector_12E24indexConversionInProcess>
     748:	89 81       	ldd	r24, Y+1	; 0x01
     74a:	8f 5f       	subi	r24, 0xFF	; 255
     74c:	89 83       	std	Y+1, r24	; 0x01
     74e:	d7 cf       	rjmp	.-82     	; 0x6fe <__vector_12+0x188>
     750:	80 91 e9 40 	lds	r24, 0x40E9	; 0x8040e9 <_ZZ11__vector_12E24indexConversionInProcess>
     754:	88 23       	and	r24, r24
     756:	0c f4       	brge	.+2      	; 0x75a <__vector_12+0x1e4>
     758:	60 c0       	rjmp	.+192    	; 0x81a <__vector_12+0x2a4>
     75a:	88 0f       	add	r24, r24
     75c:	99 0b       	sbc	r25, r25
     75e:	fc 01       	movw	r30, r24
     760:	e7 59       	subi	r30, 0x97	; 151
     762:	ff 4b       	sbci	r31, 0xBF	; 191
     764:	20 81       	ld	r18, Z
     766:	31 81       	ldd	r19, Z+1	; 0x01
     768:	fc 01       	movw	r30, r24
     76a:	e6 5f       	subi	r30, 0xF6	; 246
     76c:	ff 4b       	sbci	r31, 0xBF	; 191
     76e:	20 83       	st	Z, r18
     770:	31 83       	std	Z+1, r19	; 0x01
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	80 93 e8 40 	sts	0x40E8, r24	; 0x8040e8 <_ZZ11__vector_12E19conversionInProcess>
     778:	50 c0       	rjmp	.+160    	; 0x81a <__vector_12+0x2a4>
     77a:	10 92 ea 40 	sts	0x40EA, r1	; 0x8040ea <_ZZ11__vector_12E20holdConversionResult>
     77e:	10 92 eb 40 	sts	0x40EB, r1	; 0x8040eb <_ZZ11__vector_12E20holdConversionResult+0x1>
     782:	40 91 e9 40 	lds	r20, 0x40E9	; 0x8040e9 <_ZZ11__vector_12E24indexConversionInProcess>
     786:	84 2f       	mov	r24, r20
     788:	04 2e       	mov	r0, r20
     78a:	00 0c       	add	r0, r0
     78c:	99 0b       	sbc	r25, r25
     78e:	fc 01       	movw	r30, r24
     790:	ee 0f       	add	r30, r30
     792:	ff 1f       	adc	r31, r31
     794:	e7 52       	subi	r30, 0x27	; 39
     796:	ff 4b       	sbci	r31, 0xBF	; 191
     798:	20 81       	ld	r18, Z
     79a:	31 81       	ldd	r19, Z+1	; 0x01
     79c:	fc 01       	movw	r30, r24
     79e:	ec 52       	subi	r30, 0x2C	; 44
     7a0:	ff 4b       	sbci	r31, 0xBF	; 191
     7a2:	51 e0       	ldi	r21, 0x01	; 1
     7a4:	50 83       	st	Z, r21
     7a6:	41 11       	cpse	r20, r1
     7a8:	2d c0       	rjmp	.+90     	; 0x804 <__vector_12+0x28e>
     7aa:	fc 01       	movw	r30, r24
     7ac:	ee 0f       	add	r30, r30
     7ae:	ff 1f       	adc	r31, r31
     7b0:	ed 58       	subi	r30, 0x8D	; 141
     7b2:	ff 4b       	sbci	r31, 0xBF	; 191
     7b4:	40 81       	ld	r20, Z
     7b6:	51 81       	ldd	r21, Z+1	; 0x01
     7b8:	42 17       	cp	r20, r18
     7ba:	53 07       	cpc	r21, r19
     7bc:	60 f4       	brcc	.+24     	; 0x7d6 <__vector_12+0x260>
     7be:	fc 01       	movw	r30, r24
     7c0:	ee 0f       	add	r30, r30
     7c2:	ff 1f       	adc	r31, r31
     7c4:	e6 5f       	subi	r30, 0xF6	; 246
     7c6:	ff 4b       	sbci	r31, 0xBF	; 191
     7c8:	24 e6       	ldi	r18, 0x64	; 100
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	20 83       	st	Z, r18
     7ce:	31 83       	std	Z+1, r19	; 0x01
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	19 c0       	rjmp	.+50     	; 0x808 <__vector_12+0x292>
     7d6:	21 15       	cp	r18, r1
     7d8:	31 05       	cpc	r19, r1
     7da:	11 f0       	breq	.+4      	; 0x7e0 <__vector_12+0x26a>
     7dc:	21 50       	subi	r18, 0x01	; 1
     7de:	31 09       	sbc	r19, r1
     7e0:	41 e0       	ldi	r20, 0x01	; 1
     7e2:	40 93 a3 40 	sts	0x40A3, r20	; 0x8040a3 <_ZL29g_battery_measurements_active>
     7e6:	24 37       	cpi	r18, 0x74	; 116
     7e8:	44 e0       	ldi	r20, 0x04	; 4
     7ea:	34 07       	cpc	r19, r20
     7ec:	18 f0       	brcs	.+6      	; 0x7f4 <__vector_12+0x27e>
     7ee:	10 92 06 40 	sts	0x4006, r1	; 0x804006 <g_battery_type>
     7f2:	0a c0       	rjmp	.+20     	; 0x808 <__vector_12+0x292>
     7f4:	2d 38       	cpi	r18, 0x8D	; 141
     7f6:	42 e0       	ldi	r20, 0x02	; 2
     7f8:	34 07       	cpc	r19, r20
     7fa:	30 f0       	brcs	.+12     	; 0x808 <__vector_12+0x292>
     7fc:	41 e0       	ldi	r20, 0x01	; 1
     7fe:	40 93 06 40 	sts	0x4006, r20	; 0x804006 <g_battery_type>
     802:	02 c0       	rjmp	.+4      	; 0x808 <__vector_12+0x292>
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	88 0f       	add	r24, r24
     80a:	99 1f       	adc	r25, r25
     80c:	fc 01       	movw	r30, r24
     80e:	e7 52       	subi	r30, 0x27	; 39
     810:	ff 4b       	sbci	r31, 0xBF	; 191
     812:	20 83       	st	Z, r18
     814:	31 83       	std	Z+1, r19	; 0x01
     816:	10 92 e8 40 	sts	0x40E8, r1	; 0x8040e8 <_ZZ11__vector_12E19conversionInProcess>
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
     820:	23 96       	adiw	r28, 0x03	; 3
     822:	cd bf       	out	0x3d, r28	; 61
     824:	de bf       	out	0x3e, r29	; 62
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	ff 91       	pop	r31
     82c:	ef 91       	pop	r30
     82e:	bf 91       	pop	r27
     830:	af 91       	pop	r26
     832:	9f 91       	pop	r25
     834:	8f 91       	pop	r24
     836:	7f 91       	pop	r23
     838:	6f 91       	pop	r22
     83a:	5f 91       	pop	r21
     83c:	4f 91       	pop	r20
     83e:	3f 91       	pop	r19
     840:	2f 91       	pop	r18
     842:	0f 90       	pop	r0
     844:	0b be       	out	0x3b, r0	; 59
     846:	0f 90       	pop	r0
     848:	0f be       	out	0x3f, r0	; 63
     84a:	0f 90       	pop	r0
     84c:	1f 90       	pop	r1
     84e:	18 95       	reti

00000850 <main>:
     850:	0e 94 ff 00 	call	0x1fe	; 0x1fe <atmel_start_init>
     854:	87 e1       	ldi	r24, 0x17	; 23
     856:	90 e4       	ldi	r25, 0x40	; 64
     858:	0e 94 ef 07 	call	0xfde	; 0xfde <_Z17linkbus_send_textPc>
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	0e 94 df 04 	call	0x9be	; 0x9be <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>
     862:	c0 e0       	ldi	r28, 0x00	; 0
     864:	d0 e0       	ldi	r29, 0x00	; 0
     866:	01 c0       	rjmp	.+2      	; 0x86a <main+0x1a>
     868:	e8 01       	movw	r28, r16
     86a:	68 ee       	ldi	r22, 0xE8	; 232
     86c:	73 e0       	ldi	r23, 0x03	; 3
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 9b 0a 	call	0x1536	; 0x1536 <util_delay_ms>
     876:	81 11       	cpse	r24, r1
     878:	f8 cf       	rjmp	.-16     	; 0x86a <main+0x1a>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5f       	subi	r16, 0xFF	; 255
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	df 93       	push	r29
     882:	cf 93       	push	r28
     884:	8f e1       	ldi	r24, 0x1F	; 31
     886:	90 e4       	ldi	r25, 0x40	; 64
     888:	9f 93       	push	r25
     88a:	8f 93       	push	r24
     88c:	8b e8       	ldi	r24, 0x8B	; 139
     88e:	90 e4       	ldi	r25, 0x40	; 64
     890:	9f 93       	push	r25
     892:	8f 93       	push	r24
     894:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <sprintf>
     898:	8b e8       	ldi	r24, 0x8B	; 139
     89a:	90 e4       	ldi	r25, 0x40	; 64
     89c:	0e 94 ef 07 	call	0xfde	; 0xfde <_Z17linkbus_send_textPc>
     8a0:	8c ee       	ldi	r24, 0xEC	; 236
     8a2:	90 e4       	ldi	r25, 0x40	; 64
     8a4:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN8Goertzel12SamplesReadyEv>
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	88 23       	and	r24, r24
     8b6:	c1 f2       	breq	.-80     	; 0x868 <main+0x18>
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <__TEXT_REGION_LENGTH__+0x7e060c>
     8be:	d4 cf       	rjmp	.-88     	; 0x868 <main+0x18>

000008c0 <_Z13throttleValueh>:
}

uint16_t throttleValue(uint8_t speed)
{
	return 0;
}
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	08 95       	ret

000008c6 <_ZL9PORT_initv>:

bool ADC0_conversionDone(void)
{
	/* Check if the conversion is done  */
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
}
     8c6:	e0 e6       	ldi	r30, 0x60	; 96
     8c8:	f4 e0       	ldi	r31, 0x04	; 4
     8ca:	82 89       	ldd	r24, Z+18	; 0x12
     8cc:	88 7f       	andi	r24, 0xF8	; 248
     8ce:	82 8b       	std	Z+18, r24	; 0x12
     8d0:	82 89       	ldd	r24, Z+18	; 0x12
     8d2:	84 60       	ori	r24, 0x04	; 4
     8d4:	82 8b       	std	Z+18, r24	; 0x12
     8d6:	83 89       	ldd	r24, Z+19	; 0x13
     8d8:	88 7f       	andi	r24, 0xF8	; 248
     8da:	83 8b       	std	Z+19, r24	; 0x13
     8dc:	83 89       	ldd	r24, Z+19	; 0x13
     8de:	84 60       	ori	r24, 0x04	; 4
     8e0:	83 8b       	std	Z+19, r24	; 0x13
     8e2:	84 89       	ldd	r24, Z+20	; 0x14
     8e4:	88 7f       	andi	r24, 0xF8	; 248
     8e6:	84 8b       	std	Z+20, r24	; 0x14
     8e8:	84 89       	ldd	r24, Z+20	; 0x14
     8ea:	84 60       	ori	r24, 0x04	; 4
     8ec:	84 8b       	std	Z+20, r24	; 0x14
     8ee:	85 89       	ldd	r24, Z+21	; 0x15
     8f0:	88 7f       	andi	r24, 0xF8	; 248
     8f2:	85 8b       	std	Z+21, r24	; 0x15
     8f4:	85 89       	ldd	r24, Z+21	; 0x15
     8f6:	84 60       	ori	r24, 0x04	; 4
     8f8:	85 8b       	std	Z+21, r24	; 0x15
     8fa:	82 89       	ldd	r24, Z+18	; 0x12
     8fc:	87 7f       	andi	r24, 0xF7	; 247
     8fe:	82 8b       	std	Z+18, r24	; 0x12
     900:	83 89       	ldd	r24, Z+19	; 0x13
     902:	87 7f       	andi	r24, 0xF7	; 247
     904:	83 8b       	std	Z+19, r24	; 0x13
     906:	84 89       	ldd	r24, Z+20	; 0x14
     908:	87 7f       	andi	r24, 0xF7	; 247
     90a:	84 8b       	std	Z+20, r24	; 0x14
     90c:	85 89       	ldd	r24, Z+21	; 0x15
     90e:	87 7f       	andi	r24, 0xF7	; 247
     910:	85 8b       	std	Z+21, r24	; 0x15
     912:	08 95       	ret

00000914 <_ZL10VREF0_initv>:
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     91a:	08 95       	ret

0000091c <_ZL9ADC0_initb>:
     91c:	9a e0       	ldi	r25, 0x0A	; 10
     91e:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
     922:	88 23       	and	r24, r24
     924:	41 f0       	breq	.+16     	; 0x936 <_ZL9ADC0_initb+0x1a>
     926:	e0 e0       	ldi	r30, 0x00	; 0
     928:	f6 e0       	ldi	r31, 0x06	; 6
     92a:	83 e0       	ldi	r24, 0x03	; 3
     92c:	80 83       	st	Z, r24
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	84 87       	std	Z+12, r24	; 0x0c
     932:	82 87       	std	Z+10, r24	; 0x0a
     934:	08 95       	ret
     936:	e0 e0       	ldi	r30, 0x00	; 0
     938:	f6 e0       	ldi	r31, 0x06	; 6
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	80 83       	st	Z, r24
     93e:	14 86       	std	Z+12, r1	; 0x0c
     940:	08 95       	ret

00000942 <_ZL16ADC0_SYSTEM_initb>:
     942:	cf 93       	push	r28
     944:	c8 2f       	mov	r28, r24
     946:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_ZL9PORT_initv>
     94a:	0e 94 8a 04 	call	0x914	; 0x914 <_ZL10VREF0_initv>
     94e:	8c 2f       	mov	r24, r28
     950:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZL9ADC0_initb>
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	80 93 ed 40 	sts	0x40ED, r24	; 0x8040ed <_ZL17g_adc_initialized>
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <_ZL20ADC0_SYSTEM_shutdownv>:
     95e:	e0 e0       	ldi	r30, 0x00	; 0
     960:	f6 e0       	ldi	r31, 0x06	; 6
     962:	14 86       	std	Z+12, r1	; 0x0c
     964:	10 82       	st	Z, r1
     966:	10 92 ed 40 	sts	0x40ED, r1	; 0x8040ed <_ZL17g_adc_initialized>
     96a:	08 95       	ret

0000096c <_Z41__static_initialization_and_destruction_0ii>:
     96c:	ef 92       	push	r14
     96e:	ff 92       	push	r15
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	ec 01       	movw	r28, r24
     97a:	7b 01       	movw	r14, r22
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	79 f4       	brne	.+30     	; 0x99e <_Z41__static_initialization_and_destruction_0ii+0x32>
     980:	6f 3f       	cpi	r22, 0xFF	; 255
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	61 f4       	brne	.+24     	; 0x99e <_Z41__static_initialization_and_destruction_0ii+0x32>
     986:	00 e0       	ldi	r16, 0x00	; 0
     988:	10 e4       	ldi	r17, 0x40	; 64
     98a:	2c eb       	ldi	r18, 0xBC	; 188
     98c:	36 e4       	ldi	r19, 0x46	; 70
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	69 e4       	ldi	r22, 0x49	; 73
     994:	73 e4       	ldi	r23, 0x43	; 67
     996:	8c ee       	ldi	r24, 0xEC	; 236
     998:	90 e4       	ldi	r25, 0x40	; 64
     99a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN8GoertzelC1Eff>
     99e:	cd 2b       	or	r28, r29
     9a0:	39 f4       	brne	.+14     	; 0x9b0 <_Z41__static_initialization_and_destruction_0ii+0x44>
     9a2:	ef 20       	and	r14, r15
     9a4:	e0 94       	com	r14
     9a6:	21 f4       	brne	.+8      	; 0x9b0 <_Z41__static_initialization_and_destruction_0ii+0x44>
     9a8:	8c ee       	ldi	r24, 0xEC	; 236
     9aa:	90 e4       	ldi	r25, 0x40	; 64
     9ac:	0e 94 3a 06 	call	0xc74	; 0xc74 <_ZN8GoertzelD1Ev>
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	ef 90       	pop	r14
     9bc:	08 95       	ret

000009be <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>:
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	81 f0       	breq	.+32     	; 0x9e2 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x24>
     9c2:	18 f4       	brcc	.+6      	; 0x9ca <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0xc>
     9c4:	81 30       	cpi	r24, 0x01	; 1
     9c6:	31 f0       	breq	.+12     	; 0x9d4 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x16>
     9c8:	21 c0       	rjmp	.+66     	; 0xa0c <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x4e>
     9ca:	83 30       	cpi	r24, 0x03	; 3
     9cc:	89 f0       	breq	.+34     	; 0x9f0 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x32>
     9ce:	84 30       	cpi	r24, 0x04	; 4
     9d0:	b1 f0       	breq	.+44     	; 0x9fe <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x40>
     9d2:	1c c0       	rjmp	.+56     	; 0xa0c <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x4e>
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	0e 94 a1 04 	call	0x942	; 0x942 <_ZL16ADC0_SYSTEM_initb>
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     9e0:	08 95       	ret
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0e 94 a1 04 	call	0x942	; 0x942 <_ZL16ADC0_SYSTEM_initb>
     9e8:	83 e0       	ldi	r24, 0x03	; 3
     9ea:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     9ee:	08 95       	ret
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	0e 94 a1 04 	call	0x942	; 0x942 <_ZL16ADC0_SYSTEM_initb>
     9f6:	84 e0       	ldi	r24, 0x04	; 4
     9f8:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     9fc:	08 95       	ret
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	0e 94 a1 04 	call	0x942	; 0x942 <_ZL16ADC0_SYSTEM_initb>
     a04:	85 e0       	ldi	r24, 0x05	; 5
     a06:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
     a0a:	08 95       	ret
     a0c:	0e 94 af 04 	call	0x95e	; 0x95e <_ZL20ADC0_SYSTEM_shutdownv>
     a10:	08 95       	ret

00000a12 <_Z9ADC0_readv>:

int ADC0_read(void)
{
	return ADC0.RES; 	/* Reading the result also clears the interrupt flag */
     a12:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
     a16:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
}
     a1a:	08 95       	ret

00000a1c <__vector_24>:
	ADC0.CTRLA = ADC_RESSEL_12BIT_gc; /* Turn off ADC leaving 12-bit resolution set */
	g_adc_initialized = false;
}

ISR(ADC0_RESRDY_vect)
{
     a1c:	1f 92       	push	r1
     a1e:	0f 92       	push	r0
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	0f 92       	push	r0
     a24:	11 24       	eor	r1, r1
     a26:	0b b6       	in	r0, 0x3b	; 59
     a28:	0f 92       	push	r0
     a2a:	2f 93       	push	r18
     a2c:	3f 93       	push	r19
     a2e:	4f 93       	push	r20
     a30:	5f 93       	push	r21
     a32:	6f 93       	push	r22
     a34:	7f 93       	push	r23
     a36:	8f 93       	push	r24
     a38:	9f 93       	push	r25
     a3a:	af 93       	push	r26
     a3c:	bf 93       	push	r27
     a3e:	ef 93       	push	r30
     a40:	ff 93       	push	r31
	/* Clear the interrupt flag by reading the result */
	int val = ADC0_read();
     a42:	0e 94 09 05 	call	0xa12	; 0xa12 <_Z9ADC0_readv>
	if(g_goertzel.DataPoint(val))
     a46:	bc 01       	movw	r22, r24
     a48:	8c ee       	ldi	r24, 0xEC	; 236
     a4a:	90 e4       	ldi	r25, 0x40	; 64
     a4c:	0e 94 41 06 	call	0xc82	; 0xc82 <_ZN8Goertzel9DataPointEi>
     a50:	81 11       	cpse	r24, r1
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
     a52:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <__TEXT_REGION_LENGTH__+0x7e060c>
	}
     a56:	ff 91       	pop	r31
     a58:	ef 91       	pop	r30
     a5a:	bf 91       	pop	r27
     a5c:	af 91       	pop	r26
     a5e:	9f 91       	pop	r25
     a60:	8f 91       	pop	r24
     a62:	7f 91       	pop	r23
     a64:	6f 91       	pop	r22
     a66:	5f 91       	pop	r21
     a68:	4f 91       	pop	r20
     a6a:	3f 91       	pop	r19
     a6c:	2f 91       	pop	r18
     a6e:	0f 90       	pop	r0
     a70:	0b be       	out	0x3b, r0	; 59
     a72:	0f 90       	pop	r0
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	0f 90       	pop	r0
     a78:	1f 90       	pop	r1
     a7a:	18 95       	reti

00000a7c <_GLOBAL__sub_I_g_activeADCChannel>:
     a7c:	6f ef       	ldi	r22, 0xFF	; 255
     a7e:	7f ef       	ldi	r23, 0xFF	; 255
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	0e 94 b6 04 	call	0x96c	; 0x96c <_Z41__static_initialization_and_destruction_0ii>
     a88:	08 95       	ret

00000a8a <_GLOBAL__sub_D_g_activeADCChannel>:
     a8a:	6f ef       	ldi	r22, 0xFF	; 255
     a8c:	7f ef       	ldi	r23, 0xFF	; 255
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 b6 04 	call	0x96c	; 0x96c <_Z41__static_initialization_and_destruction_0ii>
     a96:	08 95       	ret

00000a98 <BOD_init>:
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */
     a98:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	08 95       	ret

00000aa0 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     aa0:	44 e2       	ldi	r20, 0x24	; 36
     aa2:	68 ed       	ldi	r22, 0xD8	; 216
     aa4:	88 e6       	ldi	r24, 0x68	; 104
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 1c 0a 	call	0x1438	; 0x1438 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	08 95       	ret

00000ab0 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     ab0:	78 94       	sei

	return 0;
}
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	08 95       	ret

00000ab6 <_ZL9VREF_initv>:
static void VREF_init(void)
{
//	VREF.DAC0REF = VREF_REFSEL_2V048_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	VREF.DAC0REF = VREF_REFSEL_2V500_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	| VREF_ALWAYSON_bm;    /* Set the Voltage Reference in Always On mode */
	VREF.DAC0REF = VREF_REFSEL_2V500_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
     ab6:	83 e0       	ldi	r24, 0x03	; 3
     ab8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
	/* Wait VREF start-up time */
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
     abc:	6a e0       	ldi	r22, 0x0A	; 10
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 9b 0a 	call	0x1536	; 0x1536 <util_delay_ms>
     ac8:	81 11       	cpse	r24, r1
     aca:	f8 cf       	rjmp	.-16     	; 0xabc <_ZL9VREF_initv+0x6>
}
     acc:	08 95       	ret

00000ace <_Z11DAC0_setValj>:
}

void DAC0_setVal(uint16_t value)
{
	/* Store the two LSbs in DAC0.DATAL */
	DAC0.DATAL = (value & LSB_MASK) << 6;
     ace:	28 2f       	mov	r18, r24
     ad0:	22 95       	swap	r18
     ad2:	22 0f       	add	r18, r18
     ad4:	22 0f       	add	r18, r18
     ad6:	20 7c       	andi	r18, 0xC0	; 192
     ad8:	e0 ea       	ldi	r30, 0xA0	; 160
     ada:	f6 e0       	ldi	r31, 0x06	; 6
     adc:	22 83       	std	Z+2, r18	; 0x02
	/* Store the eight MSbs in DAC0.DATAH */
	DAC0.DATAH = value >> 2;
     ade:	96 95       	lsr	r25
     ae0:	87 95       	ror	r24
     ae2:	96 95       	lsr	r25
     ae4:	87 95       	ror	r24
     ae6:	83 83       	std	Z+3, r24	; 0x03
     ae8:	08 95       	ret

00000aea <_Z9DAC0_initv>:
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
}

void DAC0_init(void)
{
	VREF_init();
     aea:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZL9VREF_initv>
	/* Disable digital input buffer */
	PORTD.PIN6CTRL &= ~PORT_ISC_gm;
     aee:	e0 e6       	ldi	r30, 0x60	; 96
     af0:	f4 e0       	ldi	r31, 0x04	; 4
     af2:	86 89       	ldd	r24, Z+22	; 0x16
     af4:	88 7f       	andi	r24, 0xF8	; 248
     af6:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     af8:	86 89       	ldd	r24, Z+22	; 0x16
     afa:	84 60       	ori	r24, 0x04	; 4
     afc:	86 8b       	std	Z+22, r24	; 0x16
	/* Disable pull-up resistor */
	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
     afe:	86 89       	ldd	r24, Z+22	; 0x16
     b00:	87 7f       	andi	r24, 0xF7	; 247
     b02:	86 8b       	std	Z+22, r24	; 0x16
	DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
	| DAC_OUTEN_bm           /* Enable output buffer */
	| DAC_RUNSTDBY_bm;       /* Enable Run in Standby mode */
     b04:	81 ec       	ldi	r24, 0xC1	; 193
     b06:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
	
	DAC0_setVal(DAC_DEFAULT_VALUE);
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 67 05 	call	0xace	; 0xace <_Z11DAC0_setValj>
     b12:	08 95       	ret

00000b14 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	88 30       	cpi	r24, 0x08	; 8
     b18:	48 f4       	brcc	.+18     	; 0xb2c <mcu_init+0x18>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     b1a:	e8 2f       	mov	r30, r24
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	e0 5f       	subi	r30, 0xF0	; 240
     b20:	fb 4f       	sbci	r31, 0xFB	; 251
     b22:	90 81       	ld	r25, Z
     b24:	98 60       	ori	r25, 0x08	; 8
     b26:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     b28:	8f 5f       	subi	r24, 0xFF	; 255
     b2a:	f5 cf       	rjmp	.-22     	; 0xb16 <mcu_init+0x2>
     b2c:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     b2e:	88 30       	cpi	r24, 0x08	; 8
     b30:	48 f4       	brcc	.+18     	; 0xb44 <mcu_init+0x30>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     b32:	e8 2f       	mov	r30, r24
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	e0 5d       	subi	r30, 0xD0	; 208
     b38:	fb 4f       	sbci	r31, 0xFB	; 251
     b3a:	90 81       	ld	r25, Z
     b3c:	98 60       	ori	r25, 0x08	; 8
     b3e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     b40:	8f 5f       	subi	r24, 0xFF	; 255
     b42:	f5 cf       	rjmp	.-22     	; 0xb2e <mcu_init+0x1a>
     b44:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     b46:	88 30       	cpi	r24, 0x08	; 8
     b48:	48 f4       	brcc	.+18     	; 0xb5c <mcu_init+0x48>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     b4a:	e8 2f       	mov	r30, r24
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	e0 5b       	subi	r30, 0xB0	; 176
     b50:	fb 4f       	sbci	r31, 0xFB	; 251
     b52:	90 81       	ld	r25, Z
     b54:	98 60       	ori	r25, 0x08	; 8
     b56:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     b58:	8f 5f       	subi	r24, 0xFF	; 255
     b5a:	f5 cf       	rjmp	.-22     	; 0xb46 <mcu_init+0x32>
     b5c:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     b5e:	88 30       	cpi	r24, 0x08	; 8
     b60:	48 f4       	brcc	.+18     	; 0xb74 <mcu_init+0x60>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     b62:	e8 2f       	mov	r30, r24
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	e0 59       	subi	r30, 0x90	; 144
     b68:	fb 4f       	sbci	r31, 0xFB	; 251
     b6a:	90 81       	ld	r25, Z
     b6c:	98 60       	ori	r25, 0x08	; 8
     b6e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     b70:	8f 5f       	subi	r24, 0xFF	; 255
     b72:	f5 cf       	rjmp	.-22     	; 0xb5e <mcu_init+0x4a>
     b74:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     b76:	88 30       	cpi	r24, 0x08	; 8
     b78:	48 f4       	brcc	.+18     	; 0xb8c <mcu_init+0x78>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     b7a:	e8 2f       	mov	r30, r24
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	e0 57       	subi	r30, 0x70	; 112
     b80:	fb 4f       	sbci	r31, 0xFB	; 251
     b82:	90 81       	ld	r25, Z
     b84:	98 60       	ori	r25, 0x08	; 8
     b86:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     b88:	8f 5f       	subi	r24, 0xFF	; 255
     b8a:	f5 cf       	rjmp	.-22     	; 0xb76 <mcu_init+0x62>
     b8c:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     b8e:	88 30       	cpi	r24, 0x08	; 8
     b90:	48 f4       	brcc	.+18     	; 0xba4 <mcu_init+0x90>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     b92:	e8 2f       	mov	r30, r24
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	e0 55       	subi	r30, 0x50	; 80
     b98:	fb 4f       	sbci	r31, 0xFB	; 251
     b9a:	90 81       	ld	r25, Z
     b9c:	98 60       	ori	r25, 0x08	; 8
     b9e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     ba0:	8f 5f       	subi	r24, 0xFF	; 255
     ba2:	f5 cf       	rjmp	.-22     	; 0xb8e <mcu_init+0x7a>
     ba4:	08 95       	ret

00000ba6 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     ba6:	0e 94 8a 05 	call	0xb14	; 0xb14 <mcu_init>

	CLKCTRL_init(); /* Set CPU clock speed appropriately */
     baa:	0e 94 50 05 	call	0xaa0	; 0xaa0 <CLKCTRL_init>
	TIMERB_init(); /* Timers must be initialized before utility_delay functions will work */
     bae:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <TIMERB_init>
	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
     bb2:	0e 94 58 05 	call	0xab0	; 0xab0 <CPUINT_init>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     bb6:	89 b1       	in	r24, 0x09	; 9
     bb8:	8f 7b       	andi	r24, 0xBF	; 191
     bba:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     bbc:	88 b1       	in	r24, 0x08	; 8
     bbe:	80 64       	ori	r24, 0x40	; 64
     bc0:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	LED_set_dir(PORT_DIR_OUT);

	SLPCTRL_init();
     bc2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <SLPCTRL_init>
	
	DAC0_init();
     bc6:	0e 94 75 05 	call	0xaea	; 0xaea <_Z9DAC0_initv>

	linkbus_init();
     bca:	0e 94 cf 07 	call	0xf9e	; 0xf9e <_Z12linkbus_initv>

	BOD_init();
     bce:	0e 94 4c 05 	call	0xa98	; 0xa98 <BOD_init>
     bd2:	08 95       	ret

00000bd4 <_ZN8GoertzelC1Eff>:
		highValueCount++;
	}

	Q2 = Q1;
	Q1 = Q0;
}
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	e4 2e       	mov	r14, r20
     be2:	f5 2e       	mov	r15, r21
     be4:	d6 2f       	mov	r29, r22
     be6:	c7 2f       	mov	r28, r23
     be8:	00 93 f5 40 	sts	0x40F5, r16	; 0x8040f5 <_SAMPLING_FREQUENCY>
     bec:	10 93 f6 40 	sts	0x40F6, r17	; 0x8040f6 <_SAMPLING_FREQUENCY+0x1>
     bf0:	20 93 f7 40 	sts	0x40F7, r18	; 0x8040f7 <_SAMPLING_FREQUENCY+0x2>
     bf4:	30 93 f8 40 	sts	0x40F8, r19	; 0x8040f8 <_SAMPLING_FREQUENCY+0x3>
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	41 e5       	ldi	r20, 0x51	; 81
     bfe:	53 e4       	ldi	r21, 0x43	; 67
     c00:	6e 2d       	mov	r22, r14
     c02:	7f 2d       	mov	r23, r15
     c04:	8d 2f       	mov	r24, r29
     c06:	9c 2f       	mov	r25, r28
     c08:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__gesf2>
     c0c:	18 16       	cp	r1, r24
     c0e:	8c f0       	brlt	.+34     	; 0xc32 <_ZN8GoertzelC1Eff+0x5e>
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	48 ec       	ldi	r20, 0xC8	; 200
     c16:	52 e4       	ldi	r21, 0x42	; 66
     c18:	6e 2d       	mov	r22, r14
     c1a:	7f 2d       	mov	r23, r15
     c1c:	8d 2f       	mov	r24, r29
     c1e:	9c 2f       	mov	r25, r28
     c20:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__cmpsf2>
     c24:	88 23       	and	r24, r24
     c26:	4c f4       	brge	.+18     	; 0xc3a <_ZN8GoertzelC1Eff+0x66>
     c28:	e1 2c       	mov	r14, r1
     c2a:	f1 2c       	mov	r15, r1
     c2c:	d8 ec       	ldi	r29, 0xC8	; 200
     c2e:	c2 e4       	ldi	r28, 0x42	; 66
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <_ZN8GoertzelC1Eff+0x66>
     c32:	e1 2c       	mov	r14, r1
     c34:	f1 2c       	mov	r15, r1
     c36:	d1 e5       	ldi	r29, 0x51	; 81
     c38:	c3 e4       	ldi	r28, 0x43	; 67
     c3a:	6e 2d       	mov	r22, r14
     c3c:	7f 2d       	mov	r23, r15
     c3e:	8d 2f       	mov	r24, r29
     c40:	9c 2f       	mov	r25, r28
     c42:	0e 94 82 0c 	call	0x1904	; 0x1904 <__fixsfsi>
     c46:	60 93 f3 40 	sts	0x40F3, r22	; 0x8040f3 <_N>
     c4a:	70 93 f4 40 	sts	0x40F4, r23	; 0x8040f4 <_N+0x1>
     c4e:	80 91 f3 40 	lds	r24, 0x40F3	; 0x8040f3 <_N>
     c52:	90 91 f4 40 	lds	r25, 0x40F4	; 0x8040f4 <_N+0x1>
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <malloc>
     c5e:	80 93 ee 40 	sts	0x40EE, r24	; 0x8040ee <testData>
     c62:	90 93 ef 40 	sts	0x40EF, r25	; 0x8040ef <testData+0x1>
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	08 95       	ret

00000c74 <_ZN8GoertzelD1Ev>:
     c74:	80 91 ee 40 	lds	r24, 0x40EE	; 0x8040ee <testData>
     c78:	90 91 ef 40 	lds	r25, 0x40EF	; 0x8040ef <testData+0x1>
     c7c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <free>
     c80:	08 95       	ret

00000c82 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
     c82:	80 91 f0 40 	lds	r24, 0x40F0	; 0x8040f0 <_samplesReady>
     c86:	88 23       	and	r24, r24
     c88:	19 f0       	breq	.+6      	; 0xc90 <_ZN8Goertzel9DataPointEi+0xe>
	{
		return(_samplesReady);
     c8a:	80 91 f0 40 	lds	r24, 0x40F0	; 0x8040f0 <_samplesReady>
     c8e:	08 95       	ret
	}

	testData[_index] = data;
     c90:	e0 91 f1 40 	lds	r30, 0x40F1	; 0x8040f1 <_index>
     c94:	f0 91 f2 40 	lds	r31, 0x40F2	; 0x8040f2 <_index+0x1>
     c98:	ee 0f       	add	r30, r30
     c9a:	ff 1f       	adc	r31, r31
     c9c:	80 91 ee 40 	lds	r24, 0x40EE	; 0x8040ee <testData>
     ca0:	90 91 ef 40 	lds	r25, 0x40EF	; 0x8040ef <testData+0x1>
     ca4:	e8 0f       	add	r30, r24
     ca6:	f9 1f       	adc	r31, r25
     ca8:	60 83       	st	Z, r22
     caa:	71 83       	std	Z+1, r23	; 0x01
	_index++;
     cac:	80 91 f1 40 	lds	r24, 0x40F1	; 0x8040f1 <_index>
     cb0:	90 91 f2 40 	lds	r25, 0x40F2	; 0x8040f2 <_index+0x1>
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	80 93 f1 40 	sts	0x40F1, r24	; 0x8040f1 <_index>
     cba:	90 93 f2 40 	sts	0x40F2, r25	; 0x8040f2 <_index+0x1>
	if(_index >= _N)
     cbe:	20 91 f1 40 	lds	r18, 0x40F1	; 0x8040f1 <_index>
     cc2:	30 91 f2 40 	lds	r19, 0x40F2	; 0x8040f2 <_index+0x1>
     cc6:	80 91 f3 40 	lds	r24, 0x40F3	; 0x8040f3 <_N>
     cca:	90 91 f4 40 	lds	r25, 0x40F4	; 0x8040f4 <_N+0x1>
     cce:	28 17       	cp	r18, r24
     cd0:	39 07       	cpc	r19, r25
     cd2:	3c f0       	brlt	.+14     	; 0xce2 <_ZN8Goertzel9DataPointEi+0x60>
	{
		_index = 0;
     cd4:	10 92 f1 40 	sts	0x40F1, r1	; 0x8040f1 <_index>
     cd8:	10 92 f2 40 	sts	0x40F2, r1	; 0x8040f2 <_index+0x1>
		_samplesReady = true;
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	80 93 f0 40 	sts	0x40F0, r24	; 0x8040f0 <_samplesReady>
	}

	return(_samplesReady);
     ce2:	80 91 f0 40 	lds	r24, 0x40F0	; 0x8040f0 <_samplesReady>
}
     ce6:	08 95       	ret

00000ce8 <_ZN8Goertzel12SamplesReadyEv>:

bool Goertzel::SamplesReady(void)
{
	return(_samplesReady);
     ce8:	80 91 f0 40 	lds	r24, 0x40F0	; 0x8040f0 <_samplesReady>
}
     cec:	08 95       	ret

00000cee <_ZL11I2C_1_WaitWv>:
	
	/* Initialize the data register */
	TWI1.MDATA = 0x00;
	
	/* Set bus state idle */
	TWI1.MSTATUS = TWI_BUSSTATE_IDLE_gc;
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     cf4:	90 7c       	andi	r25, 0xC0	; 192
     cf6:	31 f0       	breq	.+12     	; 0xd04 <_ZL11I2C_1_WaitWv+0x16>
     cf8:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     cfc:	84 fd       	sbrc	r24, 4
     cfe:	07 c0       	rjmp	.+14     	; 0xd0e <_ZL11I2C_1_WaitWv+0x20>
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	08 c0       	rjmp	.+16     	; 0xd14 <_ZL11I2C_1_WaitWv+0x26>
     d04:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     d08:	9c 70       	andi	r25, 0x0C	; 12
     d0a:	19 f4       	brne	.+6      	; 0xd12 <_ZL11I2C_1_WaitWv+0x24>
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <_ZL11I2C_1_WaitWv+0x26>
     d0e:	82 e0       	ldi	r24, 0x02	; 2
     d10:	01 c0       	rjmp	.+2      	; 0xd14 <_ZL11I2C_1_WaitWv+0x26>
     d12:	84 e0       	ldi	r24, 0x04	; 4
     d14:	88 23       	and	r24, r24
     d16:	61 f3       	breq	.-40     	; 0xcf0 <_ZL11I2C_1_WaitWv+0x2>
     d18:	08 95       	ret

00000d1a <_ZL11I2C_1_WaitRv>:
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     d20:	90 7c       	andi	r25, 0xC0	; 192
     d22:	29 f4       	brne	.+10     	; 0xd2e <_ZL11I2C_1_WaitRv+0x14>
     d24:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     d28:	9c 70       	andi	r25, 0x0C	; 12
     d2a:	19 f4       	brne	.+6      	; 0xd32 <_ZL11I2C_1_WaitRv+0x18>
     d2c:	03 c0       	rjmp	.+6      	; 0xd34 <_ZL11I2C_1_WaitRv+0x1a>
     d2e:	83 e0       	ldi	r24, 0x03	; 3
     d30:	01 c0       	rjmp	.+2      	; 0xd34 <_ZL11I2C_1_WaitRv+0x1a>
     d32:	84 e0       	ldi	r24, 0x04	; 4
     d34:	88 23       	and	r24, r24
     d36:	91 f3       	breq	.-28     	; 0xd1c <_ZL11I2C_1_WaitRv+0x2>
     d38:	08 95       	ret

00000d3a <I2C_1_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_1_SendData(uint8_t address, uint8_t *pData, uint8_t len)
{
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	8b 01       	movw	r16, r22
     d46:	c4 2f       	mov	r28, r20
	uint8_t retVal = (uint8_t) - 1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address & ~0x01;
     d48:	8e 7f       	andi	r24, 0xFE	; 254
     d4a:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(I2C_1_WaitW() != I2C_ACKED)
     d4e:	0e 94 77 06 	call	0xcee	; 0xcee <_ZL11I2C_1_WaitWv>
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	c1 f4       	brne	.+48     	; 0xd86 <I2C_1_SendData+0x4c>
	return retVal;

	retVal = 0;
	if((len != 0) && (pData != NULL))
     d56:	cc 23       	and	r28, r28
     d58:	c1 f0       	breq	.+48     	; 0xd8a <I2C_1_SendData+0x50>
     d5a:	01 15       	cp	r16, r1
     d5c:	11 05       	cpc	r17, r1
     d5e:	b9 f0       	breq	.+46     	; 0xd8e <I2C_1_SendData+0x54>
     d60:	d0 e0       	ldi	r29, 0x00	; 0
	{
		while(len--)
     d62:	ff 24       	eor	r15, r15
     d64:	fa 94       	dec	r15
     d66:	fc 0e       	add	r15, r28
     d68:	cc 23       	and	r28, r28
     d6a:	99 f0       	breq	.+38     	; 0xd92 <I2C_1_SendData+0x58>
		{
			TWI1.MDATA = *pData;
     d6c:	f8 01       	movw	r30, r16
     d6e:	80 81       	ld	r24, Z
     d70:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
			if(I2C_1_WaitW() == I2C_ACKED)
     d74:	0e 94 77 06 	call	0xcee	; 0xcee <_ZL11I2C_1_WaitWv>
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	69 f4       	brne	.+26     	; 0xd96 <I2C_1_SendData+0x5c>
			{
				retVal++;
     d7c:	df 5f       	subi	r29, 0xFF	; 255
				pData++;
     d7e:	0f 5f       	subi	r16, 0xFF	; 255
     d80:	1f 4f       	sbci	r17, 0xFF	; 255
	return retVal;

	retVal = 0;
	if((len != 0) && (pData != NULL))
	{
		while(len--)
     d82:	cf 2d       	mov	r28, r15
     d84:	ee cf       	rjmp	.-36     	; 0xd62 <I2C_1_SendData+0x28>
	uint8_t retVal = (uint8_t) - 1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address & ~0x01;
	if(I2C_1_WaitW() != I2C_ACKED)
	return retVal;
     d86:	8f ef       	ldi	r24, 0xFF	; 255
     d88:	07 c0       	rjmp	.+14     	; 0xd98 <I2C_1_SendData+0x5e>

	retVal = 0;
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	05 c0       	rjmp	.+10     	; 0xd98 <I2C_1_SendData+0x5e>
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	03 c0       	rjmp	.+6      	; 0xd98 <I2C_1_SendData+0x5e>
     d92:	8d 2f       	mov	r24, r29
     d94:	01 c0       	rjmp	.+2      	; 0xd98 <I2C_1_SendData+0x5e>
     d96:	8d 2f       	mov	r24, r29
			}
		}
	}
	
	return retVal;
}
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	08 95       	ret

00000da4 <I2C_1_GetData>:

/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_1_GetData(uint8_t address, uint8_t *pData, uint8_t len)
{
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	8b 01       	movw	r16, r22
     db0:	d4 2f       	mov	r29, r20
	uint8_t retVal = (uint8_t) -1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address | 0x01;
     db2:	81 60       	ori	r24, 0x01	; 1
     db4:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(I2C_1_WaitW() != I2C_ACKED)
     db8:	0e 94 77 06 	call	0xcee	; 0xcee <_ZL11I2C_1_WaitWv>
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	49 f5       	brne	.+82     	; 0xe12 <I2C_1_GetData+0x6e>
	return retVal;
	
	/* if pData[0] contains a register address, send it first */
	if(pData[0])
     dc0:	f8 01       	movw	r30, r16
     dc2:	80 81       	ld	r24, Z
     dc4:	88 23       	and	r24, r24
     dc6:	31 f0       	breq	.+12     	; 0xdd4 <I2C_1_GetData+0x30>
	{
		TWI1.MDATA = pData[0];
     dc8:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
		if(I2C_1_WaitW() != I2C_ACKED)
     dcc:	0e 94 77 06 	call	0xcee	; 0xcee <_ZL11I2C_1_WaitWv>
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	09 f5       	brne	.+66     	; 0xe16 <I2C_1_GetData+0x72>
			return retVal;
		}
	}

	retVal = 0;
	if((len != 0) && (pData !=NULL ))
     dd4:	dd 23       	and	r29, r29
     dd6:	09 f1       	breq	.+66     	; 0xe1a <I2C_1_GetData+0x76>
     dd8:	01 15       	cp	r16, r1
     dda:	11 05       	cpc	r17, r1
     ddc:	01 f1       	breq	.+64     	; 0xe1e <I2C_1_GetData+0x7a>
     dde:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
     de0:	ff 24       	eor	r15, r15
     de2:	fa 94       	dec	r15
     de4:	fd 0e       	add	r15, r29
     de6:	dd 23       	and	r29, r29
     de8:	e1 f0       	breq	.+56     	; 0xe22 <I2C_1_GetData+0x7e>
		{
			if(I2C_1_WaitR() == I2C_READY)
     dea:	0e 94 8d 06 	call	0xd1a	; 0xd1a <_ZL11I2C_1_WaitRv>
     dee:	83 30       	cpi	r24, 0x03	; 3
     df0:	d1 f4       	brne	.+52     	; 0xe26 <I2C_1_GetData+0x82>
			{
				*pData = TWI1.MDATA;
     df2:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
     df6:	f8 01       	movw	r30, r16
     df8:	80 83       	st	Z, r24
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
     dfa:	f1 10       	cpse	r15, r1
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <I2C_1_GetData+0x5e>
     dfe:	87 e0       	ldi	r24, 0x07	; 7
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <I2C_1_GetData+0x60>
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <__TEXT_REGION_LENGTH__+0x7e0924>
				retVal++;
     e08:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
     e0a:	0f 5f       	subi	r16, 0xFF	; 255
     e0c:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	retVal = 0;
	if((len != 0) && (pData !=NULL ))
	{
		while(len--)
     e0e:	df 2d       	mov	r29, r15
     e10:	e7 cf       	rjmp	.-50     	; 0xde0 <I2C_1_GetData+0x3c>
	uint8_t retVal = (uint8_t) -1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address | 0x01;
	if(I2C_1_WaitW() != I2C_ACKED)
	return retVal;
     e12:	8f ef       	ldi	r24, 0xFF	; 255
     e14:	09 c0       	rjmp	.+18     	; 0xe28 <I2C_1_GetData+0x84>
	if(pData[0])
	{
		TWI1.MDATA = pData[0];
		if(I2C_1_WaitW() != I2C_ACKED)
		{
			return retVal;
     e16:	8f ef       	ldi	r24, 0xFF	; 255
     e18:	07 c0       	rjmp	.+14     	; 0xe28 <I2C_1_GetData+0x84>
		}
	}

	retVal = 0;
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <I2C_1_GetData+0x84>
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	03 c0       	rjmp	.+6      	; 0xe28 <I2C_1_GetData+0x84>
     e22:	8c 2f       	mov	r24, r28
     e24:	01 c0       	rjmp	.+2      	; 0xe28 <I2C_1_GetData+0x84>
     e26:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	08 95       	ret

00000e34 <_Z16nextFullTxBufferv>:
	g_bus_disabled = FALSE;
	USART1_enable();

	memset(rx_buffer, 0, sizeof(rx_buffer));

	for(bufferIndex=0; bufferIndex<LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	80 91 fb 40 	lds	r24, 0x40FB	; 0x8040fb <_ZZ16nextFullTxBuffervE11bufferIndex>
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	42 e3       	ldi	r20, 0x32	; 50
     e40:	42 9f       	mul	r20, r18
     e42:	f0 01       	movw	r30, r0
     e44:	43 9f       	mul	r20, r19
     e46:	f0 0d       	add	r31, r0
     e48:	11 24       	eor	r1, r1
     e4a:	e0 58       	subi	r30, 0x80	; 128
     e4c:	fe 4b       	sbci	r31, 0xBE	; 190
     e4e:	40 81       	ld	r20, Z
     e50:	41 11       	cpse	r20, r1
     e52:	0b c0       	rjmp	.+22     	; 0xe6a <_Z16nextFullTxBufferv+0x36>
     e54:	9f 5f       	subi	r25, 0xFF	; 255
     e56:	94 30       	cpi	r25, 0x04	; 4
     e58:	50 f4       	brcc	.+20     	; 0xe6e <_Z16nextFullTxBufferv+0x3a>
     e5a:	8f 5f       	subi	r24, 0xFF	; 255
     e5c:	80 93 fb 40 	sts	0x40FB, r24	; 0x8040fb <_ZZ16nextFullTxBuffervE11bufferIndex>
     e60:	84 30       	cpi	r24, 0x04	; 4
     e62:	48 f3       	brcs	.-46     	; 0xe36 <_Z16nextFullTxBufferv+0x2>
     e64:	10 92 fb 40 	sts	0x40FB, r1	; 0x8040fb <_ZZ16nextFullTxBuffervE11bufferIndex>
     e68:	e6 cf       	rjmp	.-52     	; 0xe36 <_Z16nextFullTxBufferv+0x2>
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <_Z16nextFullTxBufferv+0x3c>
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	88 23       	and	r24, r24
     e72:	49 f0       	breq	.+18     	; 0xe86 <_Z16nextFullTxBufferv+0x52>
     e74:	42 e3       	ldi	r20, 0x32	; 50
     e76:	42 9f       	mul	r20, r18
     e78:	c0 01       	movw	r24, r0
     e7a:	43 9f       	mul	r20, r19
     e7c:	90 0d       	add	r25, r0
     e7e:	11 24       	eor	r1, r1
     e80:	80 58       	subi	r24, 0x80	; 128
     e82:	9e 4b       	sbci	r25, 0xBE	; 190
     e84:	08 95       	ret
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	08 95       	ret

00000e8c <_Z17nextEmptyTxBufferv>:
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	80 91 fa 40 	lds	r24, 0x40FA	; 0x8040fa <_ZZ17nextEmptyTxBuffervE11bufferIndex>
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	42 e3       	ldi	r20, 0x32	; 50
     e98:	42 9f       	mul	r20, r18
     e9a:	f0 01       	movw	r30, r0
     e9c:	43 9f       	mul	r20, r19
     e9e:	f0 0d       	add	r31, r0
     ea0:	11 24       	eor	r1, r1
     ea2:	e0 58       	subi	r30, 0x80	; 128
     ea4:	fe 4b       	sbci	r31, 0xBE	; 190
     ea6:	40 81       	ld	r20, Z
     ea8:	44 23       	and	r20, r20
     eaa:	59 f0       	breq	.+22     	; 0xec2 <_Z17nextEmptyTxBufferv+0x36>
     eac:	9f 5f       	subi	r25, 0xFF	; 255
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	50 f4       	brcc	.+20     	; 0xec6 <_Z17nextEmptyTxBufferv+0x3a>
     eb2:	8f 5f       	subi	r24, 0xFF	; 255
     eb4:	80 93 fa 40 	sts	0x40FA, r24	; 0x8040fa <_ZZ17nextEmptyTxBuffervE11bufferIndex>
     eb8:	84 30       	cpi	r24, 0x04	; 4
     eba:	48 f3       	brcs	.-46     	; 0xe8e <_Z17nextEmptyTxBufferv+0x2>
     ebc:	10 92 fa 40 	sts	0x40FA, r1	; 0x8040fa <_ZZ17nextEmptyTxBuffervE11bufferIndex>
     ec0:	e6 cf       	rjmp	.-52     	; 0xe8e <_Z17nextEmptyTxBufferv+0x2>
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	01 c0       	rjmp	.+2      	; 0xec8 <_Z17nextEmptyTxBufferv+0x3c>
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	88 23       	and	r24, r24
     eca:	49 f0       	breq	.+18     	; 0xede <_Z17nextEmptyTxBufferv+0x52>
     ecc:	42 e3       	ldi	r20, 0x32	; 50
     ece:	42 9f       	mul	r20, r18
     ed0:	c0 01       	movw	r24, r0
     ed2:	43 9f       	mul	r20, r19
     ed4:	90 0d       	add	r25, r0
     ed6:	11 24       	eor	r1, r1
     ed8:	80 58       	subi	r24, 0x80	; 128
     eda:	9e 4b       	sbci	r25, 0xBE	; 190
     edc:	08 95       	ret
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	08 95       	ret

00000ee4 <_Z17nextEmptyRxBufferv>:
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	80 91 f9 40 	lds	r24, 0x40F9	; 0x8040f9 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	42 e4       	ldi	r20, 0x42	; 66
     ef0:	42 9f       	mul	r20, r18
     ef2:	f0 01       	movw	r30, r0
     ef4:	43 9f       	mul	r20, r19
     ef6:	f0 0d       	add	r31, r0
     ef8:	11 24       	eor	r1, r1
     efa:	e4 50       	subi	r30, 0x04	; 4
     efc:	ff 4b       	sbci	r31, 0xBF	; 191
     efe:	41 81       	ldd	r20, Z+1	; 0x01
     f00:	52 81       	ldd	r21, Z+2	; 0x02
     f02:	45 2b       	or	r20, r21
     f04:	59 f0       	breq	.+22     	; 0xf1c <_Z17nextEmptyRxBufferv+0x38>
     f06:	9f 5f       	subi	r25, 0xFF	; 255
     f08:	92 30       	cpi	r25, 0x02	; 2
     f0a:	50 f4       	brcc	.+20     	; 0xf20 <_Z17nextEmptyRxBufferv+0x3c>
     f0c:	8f 5f       	subi	r24, 0xFF	; 255
     f0e:	80 93 f9 40 	sts	0x40F9, r24	; 0x8040f9 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
     f12:	82 30       	cpi	r24, 0x02	; 2
     f14:	40 f3       	brcs	.-48     	; 0xee6 <_Z17nextEmptyRxBufferv+0x2>
     f16:	10 92 f9 40 	sts	0x40F9, r1	; 0x8040f9 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
     f1a:	e5 cf       	rjmp	.-54     	; 0xee6 <_Z17nextEmptyRxBufferv+0x2>
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	01 c0       	rjmp	.+2      	; 0xf22 <_Z17nextEmptyRxBufferv+0x3e>
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	88 23       	and	r24, r24
     f24:	49 f0       	breq	.+18     	; 0xf38 <_Z17nextEmptyRxBufferv+0x54>
     f26:	42 e4       	ldi	r20, 0x42	; 66
     f28:	42 9f       	mul	r20, r18
     f2a:	c0 01       	movw	r24, r0
     f2c:	43 9f       	mul	r20, r19
     f2e:	90 0d       	add	r25, r0
     f30:	11 24       	eor	r1, r1
     f32:	84 50       	subi	r24, 0x04	; 4
     f34:	9f 4b       	sbci	r25, 0xBF	; 191
     f36:	08 95       	ret
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	08 95       	ret

00000f3e <_Z19linkbusTxInProgressv>:
     f3e:	80 91 48 42 	lds	r24, 0x4248	; 0x804248 <_ZL17linkbus_tx_active>
     f42:	08 95       	ret

00000f44 <_Z16linkbus_start_txv>:
     f44:	cf 93       	push	r28
     f46:	80 91 48 42 	lds	r24, 0x4248	; 0x804248 <_ZL17linkbus_tx_active>
     f4a:	c1 e0       	ldi	r28, 0x01	; 1
     f4c:	81 11       	cpse	r24, r1
     f4e:	c0 e0       	ldi	r28, 0x00	; 0
     f50:	81 11       	cpse	r24, r1
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <_Z16linkbus_start_txv+0x1a>
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	80 93 48 42 	sts	0x4248, r24	; 0x804248 <_ZL17linkbus_tx_active>
     f5a:	0e 94 92 0b 	call	0x1724	; 0x1724 <USART1_enable_tx>
     f5e:	8c 2f       	mov	r24, r28
     f60:	cf 91       	pop	r28
     f62:	08 95       	ret

00000f64 <_Z14linkbus_end_txv>:
     f64:	80 91 48 42 	lds	r24, 0x4248	; 0x804248 <_ZL17linkbus_tx_active>
     f68:	88 23       	and	r24, r24
     f6a:	39 f0       	breq	.+14     	; 0xf7a <_Z14linkbus_end_txv+0x16>
     f6c:	e0 e2       	ldi	r30, 0x20	; 32
     f6e:	f8 e0       	ldi	r31, 0x08	; 8
     f70:	85 81       	ldd	r24, Z+5	; 0x05
     f72:	8f 7d       	andi	r24, 0xDF	; 223
     f74:	85 83       	std	Z+5, r24	; 0x05
     f76:	10 92 48 42 	sts	0x4248, r1	; 0x804248 <_ZL17linkbus_tx_active>
     f7a:	08 95       	ret

00000f7c <_Z21USART1_initializationm>:
     f7c:	28 b1       	in	r18, 0x08	; 8
     f7e:	2d 7f       	andi	r18, 0xFD	; 253
     f80:	28 b9       	out	0x08, r18	; 8
     f82:	e1 e5       	ldi	r30, 0x51	; 81
     f84:	f4 e0       	ldi	r31, 0x04	; 4
     f86:	20 81       	ld	r18, Z
     f88:	27 7f       	andi	r18, 0xF7	; 247
     f8a:	20 83       	st	Z, r18
     f8c:	29 b1       	in	r18, 0x09	; 9
     f8e:	2e 7f       	andi	r18, 0xFE	; 254
     f90:	29 b9       	out	0x09, r18	; 9
     f92:	28 b1       	in	r18, 0x08	; 8
     f94:	21 60       	ori	r18, 0x01	; 1
     f96:	28 b9       	out	0x08, r18	; 8
     f98:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <USART1_init>
     f9c:	08 95       	ret

00000f9e <_Z12linkbus_initv>:
     f9e:	84 e8       	ldi	r24, 0x84	; 132
     fa0:	ec ef       	ldi	r30, 0xFC	; 252
     fa2:	f0 e4       	ldi	r31, 0x40	; 64
     fa4:	df 01       	movw	r26, r30
     fa6:	1d 92       	st	X+, r1
     fa8:	8a 95       	dec	r24
     faa:	e9 f7       	brne	.-6      	; 0xfa6 <_Z12linkbus_initv+0x8>
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	84 30       	cpi	r24, 0x04	; 4
     fb2:	91 05       	cpc	r25, r1
     fb4:	5c f4       	brge	.+22     	; 0xfcc <_Z12linkbus_initv+0x2e>
     fb6:	22 e3       	ldi	r18, 0x32	; 50
     fb8:	28 9f       	mul	r18, r24
     fba:	f0 01       	movw	r30, r0
     fbc:	29 9f       	mul	r18, r25
     fbe:	f0 0d       	add	r31, r0
     fc0:	11 24       	eor	r1, r1
     fc2:	e0 58       	subi	r30, 0x80	; 128
     fc4:	fe 4b       	sbci	r31, 0xBE	; 190
     fc6:	10 82       	st	Z, r1
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	f2 cf       	rjmp	.-28     	; 0xfb0 <_Z12linkbus_initv+0x12>
     fcc:	60 e8       	ldi	r22, 0x80	; 128
     fce:	75 e2       	ldi	r23, 0x25	; 37
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z21USART1_initializationm>
     fd8:	10 92 14 40 	sts	0x4014, r1	; 0x804014 <_ZL14g_bus_disabled>
     fdc:	08 95       	ret

00000fde <_Z17linkbus_send_textPc>:
	}
}


BOOL linkbus_send_text(char* text)
{
     fde:	0f 93       	push	r16
     fe0:	1f 93       	push	r17
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled) return err;
     fe6:	20 91 14 40 	lds	r18, 0x4014	; 0x804014 <_ZL14g_bus_disabled>
     fea:	21 11       	cpse	r18, r1
     fec:	2f c0       	rjmp	.+94     	; 0x104c <_Z17linkbus_send_textPc+0x6e>

	if(text)
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	79 f1       	breq	.+94     	; 0x1050 <_Z17linkbus_send_textPc+0x72>
     ff2:	8c 01       	movw	r16, r24
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();
     ff4:	0e 94 46 07 	call	0xe8c	; 0xe8c <_Z17nextEmptyTxBufferv>


BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
	uint16_t tries = 200;
     ff8:	c8 ec       	ldi	r28, 0xC8	; 200
     ffa:	d0 e0       	ldi	r29, 0x00	; 0

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	b1 f4       	brne	.+44     	; 0x102c <_Z17linkbus_send_textPc+0x4e>
    1000:	20 97       	sbiw	r28, 0x00	; 0
    1002:	a1 f0       	breq	.+40     	; 0x102c <_Z17linkbus_send_textPc+0x4e>
		{
			while(linkbusTxInProgress() && tries)
    1004:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z19linkbusTxInProgressv>
    1008:	88 23       	and	r24, r24
    100a:	21 f0       	breq	.+8      	; 0x1014 <_Z17linkbus_send_textPc+0x36>
    100c:	20 97       	sbiw	r28, 0x00	; 0
    100e:	21 f4       	brne	.+8      	; 0x1018 <_Z17linkbus_send_textPc+0x3a>
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	03 c0       	rjmp	.+6      	; 0x101a <_Z17linkbus_send_textPc+0x3c>
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	01 c0       	rjmp	.+2      	; 0x101a <_Z17linkbus_send_textPc+0x3c>
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	99 23       	and	r25, r25
    101c:	21 f0       	breq	.+8      	; 0x1026 <_Z17linkbus_send_textPc+0x48>
			{
				if(tries) tries--;   /* wait until transmit finishes */
    101e:	20 97       	sbiw	r28, 0x00	; 0
    1020:	89 f3       	breq	.-30     	; 0x1004 <_Z17linkbus_send_textPc+0x26>
    1022:	21 97       	sbiw	r28, 0x01	; 1
    1024:	ef cf       	rjmp	.-34     	; 0x1004 <_Z17linkbus_send_textPc+0x26>
			}
			buff = nextEmptyTxBuffer();
    1026:	0e 94 46 07 	call	0xe8c	; 0xe8c <_Z17nextEmptyTxBufferv>

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
    102a:	e8 cf       	rjmp	.-48     	; 0xffc <_Z17linkbus_send_textPc+0x1e>
				if(tries) tries--;   /* wait until transmit finishes */
			}
			buff = nextEmptyTxBuffer();
		}

		if(buff)
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	91 f0       	breq	.+36     	; 0x1054 <_Z17linkbus_send_textPc+0x76>
		{
			sprintf(*buff, text);
    1030:	1f 93       	push	r17
    1032:	0f 93       	push	r16
    1034:	9f 93       	push	r25
    1036:	8f 93       	push	r24
    1038:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <sprintf>

			linkbus_start_tx();
    103c:	0e 94 a2 07 	call	0xf44	; 0xf44 <_Z16linkbus_start_txv>
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
//			USART1.TXDATAL = (*buff)[0]; /* send the first character */
			err = FALSE;
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	05 c0       	rjmp	.+10     	; 0x1056 <_Z17linkbus_send_textPc+0x78>
BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled) return err;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	03 c0       	rjmp	.+6      	; 0x1056 <_Z17linkbus_send_textPc+0x78>
}


BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <_Z17linkbus_send_textPc+0x78>
    1054:	81 e0       	ldi	r24, 0x01	; 1
			err = FALSE;
		}
	}

	return(err);
}
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	08 95       	ret

00001060 <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	fc 01       	movw	r30, r24
    1064:	b0 97       	sbiw	r30, 0x20	; 32
    1066:	ed 35       	cpi	r30, 0x5D	; 93
    1068:	f1 05       	cpc	r31, r1
    106a:	08 f0       	brcs	.+2      	; 0x106e <_Z12getMorseCharc+0xe>
    106c:	e8 c0       	rjmp	.+464    	; 0x123e <_Z12getMorseCharc+0x1de>
    106e:	ec 58       	subi	r30, 0x8C	; 140
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <__tablejump2__>
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    1076:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 2;
    1078:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    107a:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    107c:	08 95       	ret

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    107e:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 4;
    1080:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    1082:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    1084:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    1086:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
    1088:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    108a:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    108c:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    108e:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
    1090:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    1092:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    1094:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    1096:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
    1098:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 1;
    109a:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
    109c:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    109e:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
    10a0:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    10a2:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    10a4:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    10a6:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
    10a8:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    10aa:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    10ac:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    10ae:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
    10b0:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 7;
    10b2:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    10b4:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    10b6:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
    10b8:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 3;
    10ba:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    10bc:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    10be:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
    10c0:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    10c2:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    10c4:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    10c6:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
    10c8:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    10ca:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    10cc:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    10ce:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
    10d0:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    10d2:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    10d4:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    10d6:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
    10d8:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 7;
    10da:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    10dc:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    10de:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
    10e0:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    10e2:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    10e4:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    10e6:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
    10e8:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 11;
    10ea:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    10ec:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    10ee:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
    10f0:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    10f2:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    10f4:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    10f6:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
    10f8:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    10fa:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    10fc:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    10fe:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
    1100:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    1102:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    1104:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    1106:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
    1108:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 5;
    110a:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    110c:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    110e:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
    1110:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 3;
    1112:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    1114:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    1116:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
    1118:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    111a:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    111c:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    111e:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
    1120:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    1122:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    1124:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    1126:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
    1128:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    112a:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    112c:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    112e:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
    1130:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    1132:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    1134:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    1136:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
    1138:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    113a:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    113c:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    113e:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
    1140:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    1142:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    1144:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    1146:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    1148:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    114a:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    114c:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    114e:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
    1150:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    1152:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    1154:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    1156:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
    1158:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    115a:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    115c:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    115e:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
    1160:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    1162:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    1164:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    1166:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
    1168:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    116a:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    116c:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    116e:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
    1170:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 9;
    1172:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    1174:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    1176:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
    1178:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    117a:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    117c:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    117e:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
    1180:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    1182:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    1184:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    1186:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
    1188:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    118a:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    118c:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    118e:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
    1190:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    1192:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    1194:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    1196:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
    1198:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    119a:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    119c:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    119e:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
    11a0:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    11a2:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    11a4:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    11a6:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
    11a8:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    11aa:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    11ac:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    11ae:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
    11b0:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    11b2:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    11b4:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    11b6:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
    11b8:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    11ba:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    11bc:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    11be:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
    11c0:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    11c2:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    11c4:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    11c6:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
    11c8:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    11ca:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    11cc:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    11ce:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
    11d0:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    11d2:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    11d4:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    11d6:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
    11d8:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    11da:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    11dc:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    11de:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
    11e0:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    11e2:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    11e4:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    11e6:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
    11e8:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 12;
    11ea:	8c e0       	ldi	r24, 0x0C	; 12
		}
		break;
    11ec:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    11ee:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
    11f0:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    11f2:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    11f4:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    11f6:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
    11f8:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    11fa:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    11fc:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    11fe:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
    1200:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    1202:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    1204:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    1206:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
    1208:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    120a:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    120c:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    120e:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
    1210:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    1212:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    1214:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    1216:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
    1218:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
    121a:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    121c:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    121e:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
    1220:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    1222:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    1224:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    1226:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
    1228:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    122a:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;
    122c:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    122e:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
    1230:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    1232:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    1234:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    1236:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    1238:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    123a:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    123c:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    123e:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
    1240:	70 e0       	ldi	r23, 0x00	; 0
			morse.lengthInElements = 0;
    1242:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}

	return( morse);
}
    1244:	08 95       	ret

00001246 <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	b1 f1       	breq	.+108    	; 0x12bc <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    1250:	10 92 54 42 	sts	0x4254, r1	; 0x804254 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    1254:	61 15       	cp	r22, r1
    1256:	71 05       	cpc	r23, r1
    1258:	21 f0       	breq	.+8      	; 0x1262 <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    125a:	db 01       	movw	r26, r22
    125c:	2c 91       	ld	r18, X
    125e:	20 93 16 40 	sts	0x4016, r18	; 0x804016 <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    1262:	fc 01       	movw	r30, r24
    1264:	20 81       	ld	r18, Z
    1266:	22 23       	and	r18, r18
    1268:	d9 f0       	breq	.+54     	; 0x12a0 <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    126a:	80 93 52 42 	sts	0x4252, r24	; 0x804252 <_ZZ9makeMorsePcPhS0_E3str>
    126e:	90 93 53 42 	sts	0x4253, r25	; 0x804253 <_ZZ9makeMorsePcPhS0_E3str+0x1>
			c = ' ';
    1272:	80 e2       	ldi	r24, 0x20	; 32
    1274:	80 93 15 40 	sts	0x4015, r24	; 0x804015 <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    1278:	82 2f       	mov	r24, r18
    127a:	0e 94 30 08 	call	0x1060	; 0x1060 <_Z12getMorseCharc>
    127e:	60 93 4f 42 	sts	0x424F, r22	; 0x80424f <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    1282:	70 93 50 42 	sts	0x4250, r23	; 0x804250 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    1286:	80 93 51 42 	sts	0x4251, r24	; 0x804251 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    128a:	10 92 4e 42 	sts	0x424E, r1	; 0x80424e <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    128e:	10 92 4d 42 	sts	0x424D, r1	; 0x80424d <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    1292:	10 92 4c 42 	sts	0x424C, r1	; 0x80424c <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    1296:	10 92 4b 42 	sts	0x424B, r1	; 0x80424b <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    129a:	10 92 4a 42 	sts	0x424A, r1	; 0x80424a <_ZZ9makeMorsePcPhS0_E15completedString>
    129e:	0a c0       	rjmp	.+20     	; 0x12b4 <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    12a0:	10 92 52 42 	sts	0x4252, r1	; 0x804252 <_ZZ9makeMorsePcPhS0_E3str>
    12a4:	10 92 53 42 	sts	0x4253, r1	; 0x804253 <_ZZ9makeMorsePcPhS0_E3str+0x1>
			completedString = TRUE;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	80 93 4a 42 	sts	0x424A, r24	; 0x80424a <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    12ae:	20 97       	sbiw	r28, 0x00	; 0
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    12b2:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    12b4:	10 92 49 42 	sts	0x4249, r1	; 0x804249 <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	bb c0       	rjmp	.+374    	; 0x1432 <_Z9makeMorsePcPhS0_+0x1ec>
	}
	else if(str)
    12bc:	e0 91 52 42 	lds	r30, 0x4252	; 0x804252 <_ZZ9makeMorsePcPhS0_E3str>
    12c0:	f0 91 53 42 	lds	r31, 0x4253	; 0x804253 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    12c4:	30 97       	sbiw	r30, 0x00	; 0
    12c6:	09 f4       	brne	.+2      	; 0x12ca <_Z9makeMorsePcPhS0_+0x84>
    12c8:	a5 c0       	rjmp	.+330    	; 0x1414 <_Z9makeMorsePcPhS0_+0x1ce>
	{
		if(repeating)
    12ca:	61 15       	cp	r22, r1
    12cc:	71 05       	cpc	r23, r1
    12ce:	21 f0       	breq	.+8      	; 0x12d8 <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    12d0:	80 91 16 40 	lds	r24, 0x4016	; 0x804016 <_ZZ9makeMorsePcPhS0_E6repeat>
    12d4:	db 01       	movw	r26, r22
    12d6:	8c 93       	st	X, r24
		}

		if(completedString)
    12d8:	80 91 4a 42 	lds	r24, 0x424A	; 0x80424a <_ZZ9makeMorsePcPhS0_E15completedString>
    12dc:	88 23       	and	r24, r24
    12de:	49 f0       	breq	.+18     	; 0x12f2 <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    12e0:	20 97       	sbiw	r28, 0x00	; 0
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <_Z9makeMorsePcPhS0_+0xa0>
    12e4:	a3 c0       	rjmp	.+326    	; 0x142c <_Z9makeMorsePcPhS0_+0x1e6>
			{
				*finished = TRUE;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    12ea:	10 92 54 42 	sts	0x4254, r1	; 0x804254 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	a0 c0       	rjmp	.+320    	; 0x1432 <_Z9makeMorsePcPhS0_+0x1ec>
		}

		if(elementIndex)
    12f2:	80 91 4c 42 	lds	r24, 0x424C	; 0x80424c <_ZZ9makeMorsePcPhS0_E12elementIndex>
    12f6:	88 23       	and	r24, r24
    12f8:	21 f0       	breq	.+8      	; 0x1302 <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    12fa:	81 50       	subi	r24, 0x01	; 1
    12fc:	80 93 4c 42 	sts	0x424C, r24	; 0x80424c <_ZZ9makeMorsePcPhS0_E12elementIndex>
    1300:	7f c0       	rjmp	.+254    	; 0x1400 <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    1302:	80 91 49 42 	lds	r24, 0x4249	; 0x804249 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    1306:	88 23       	and	r24, r24
    1308:	81 f0       	breq	.+32     	; 0x132a <_Z9makeMorsePcPhS0_+0xe4>
    130a:	80 91 54 42 	lds	r24, 0x4254	; 0x804254 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    130e:	81 11       	cpse	r24, r1
    1310:	0c c0       	rjmp	.+24     	; 0x132a <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    1312:	10 92 49 42 	sts	0x4249, r1	; 0x804249 <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    1316:	80 91 4b 42 	lds	r24, 0x424B	; 0x80424b <_ZZ9makeMorsePcPhS0_E10addedSpace>
    131a:	88 23       	and	r24, r24
    131c:	09 f4       	brne	.+2      	; 0x1320 <_Z9makeMorsePcPhS0_+0xda>
    131e:	70 c0       	rjmp	.+224    	; 0x1400 <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    1320:	80 93 4c 42 	sts	0x424C, r24	; 0x80424c <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    1324:	10 92 4b 42 	sts	0x424B, r1	; 0x80424b <_ZZ9makeMorsePcPhS0_E10addedSpace>
    1328:	6b c0       	rjmp	.+214    	; 0x1400 <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    132a:	90 91 50 42 	lds	r25, 0x4250	; 0x804250 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    132e:	80 91 4d 42 	lds	r24, 0x424D	; 0x80424d <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    1332:	89 17       	cp	r24, r25
    1334:	90 f1       	brcs	.+100    	; 0x139a <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    1336:	80 91 4e 42 	lds	r24, 0x424E	; 0x80424e <_ZZ9makeMorsePcPhS0_E9charIndex>
    133a:	8f 5f       	subi	r24, 0xFF	; 255
    133c:	80 93 4e 42 	sts	0x424E, r24	; 0x80424e <_ZZ9makeMorsePcPhS0_E9charIndex>
    1340:	df 01       	movw	r26, r30
    1342:	a8 0f       	add	r26, r24
    1344:	b1 1d       	adc	r27, r1
    1346:	8c 91       	ld	r24, X
    1348:	80 93 15 40 	sts	0x4015, r24	; 0x804015 <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    134c:	81 11       	cpse	r24, r1
    134e:	19 c0       	rjmp	.+50     	; 0x1382 <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    1350:	80 91 16 40 	lds	r24, 0x4016	; 0x804016 <_ZZ9makeMorsePcPhS0_E6repeat>
    1354:	88 23       	and	r24, r24
    1356:	31 f0       	breq	.+12     	; 0x1364 <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    1358:	80 81       	ld	r24, Z
    135a:	80 93 15 40 	sts	0x4015, r24	; 0x804015 <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    135e:	10 92 4e 42 	sts	0x424E, r1	; 0x80424e <_ZZ9makeMorsePcPhS0_E9charIndex>
    1362:	0f c0       	rjmp	.+30     	; 0x1382 <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    1364:	10 92 52 42 	sts	0x4252, r1	; 0x804252 <_ZZ9makeMorsePcPhS0_E3str>
    1368:	10 92 53 42 	sts	0x4253, r1	; 0x804253 <_ZZ9makeMorsePcPhS0_E3str+0x1>
						carrierOn = OFF;
    136c:	10 92 49 42 	sts	0x4249, r1	; 0x804249 <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    1370:	91 e0       	ldi	r25, 0x01	; 1
    1372:	90 93 4a 42 	sts	0x424A, r25	; 0x80424a <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    1376:	20 97       	sbiw	r28, 0x00	; 0
    1378:	09 f0       	breq	.+2      	; 0x137c <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    137a:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    137c:	10 92 54 42 	sts	0x4254, r1	; 0x804254 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    1380:	58 c0       	rjmp	.+176    	; 0x1432 <_Z9makeMorsePcPhS0_+0x1ec>
					}
				}

				morseInProgress = getMorseChar(c);
    1382:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <_ZZ9makeMorsePcPhS0_E1c>
    1386:	0e 94 30 08 	call	0x1060	; 0x1060 <_Z12getMorseCharc>
    138a:	60 93 4f 42 	sts	0x424F, r22	; 0x80424f <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    138e:	70 93 50 42 	sts	0x4250, r23	; 0x804250 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    1392:	80 93 51 42 	sts	0x4251, r24	; 0x804251 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    1396:	10 92 4d 42 	sts	0x424D, r1	; 0x80424d <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    139a:	20 91 4f 42 	lds	r18, 0x424F	; 0x80424f <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    139e:	2d 3f       	cpi	r18, 0xFD	; 253
    13a0:	00 f5       	brcc	.+64     	; 0x13e2 <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    13a2:	40 91 4d 42 	lds	r20, 0x424D	; 0x80424d <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    13a6:	31 e0       	ldi	r19, 0x01	; 1
    13a8:	34 0f       	add	r19, r20
    13aa:	30 93 4d 42 	sts	0x424D, r19	; 0x80424d <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <_Z9makeMorsePcPhS0_+0x172>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	4a 95       	dec	r20
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <_Z9makeMorsePcPhS0_+0x16e>
    13bc:	82 23       	and	r24, r18

				if(isDah)
    13be:	21 f0       	breq	.+8      	; 0x13c8 <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    13c0:	82 e0       	ldi	r24, 0x02	; 2
    13c2:	80 93 4c 42 	sts	0x424C, r24	; 0x80424c <_ZZ9makeMorsePcPhS0_E12elementIndex>
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    13c8:	10 92 4c 42 	sts	0x424C, r1	; 0x80424c <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	80 93 49 42 	sts	0x4249, r24	; 0x804249 <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    13d2:	80 91 50 42 	lds	r24, 0x4250	; 0x804250 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    13d6:	38 17       	cp	r19, r24
    13d8:	98 f0       	brcs	.+38     	; 0x1400 <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	80 93 4b 42 	sts	0x424B, r24	; 0x80424b <_ZZ9makeMorsePcPhS0_E10addedSpace>
    13e0:	0f c0       	rjmp	.+30     	; 0x1400 <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    13e2:	80 91 50 42 	lds	r24, 0x4250	; 0x804250 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    13e6:	9f ef       	ldi	r25, 0xFF	; 255
    13e8:	90 93 4d 42 	sts	0x424D, r25	; 0x80424d <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    13ec:	10 92 49 42 	sts	0x4249, r1	; 0x804249 <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    13f0:	84 30       	cpi	r24, 0x04	; 4
    13f2:	20 f0       	brcs	.+8      	; 0x13fc <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    13f4:	84 50       	subi	r24, 0x04	; 4
    13f6:	80 93 4c 42 	sts	0x424C, r24	; 0x80424c <_ZZ9makeMorsePcPhS0_E12elementIndex>
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    13fc:	10 92 4c 42 	sts	0x424C, r1	; 0x80424c <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    1400:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <_ZZ9makeMorsePcPhS0_E1c>
    1404:	8c 33       	cpi	r24, 0x3C	; 60
    1406:	21 f4       	brne	.+8      	; 0x1410 <_Z9makeMorsePcPhS0_+0x1ca>
		{
			holdKeyDown = TRUE;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	80 93 54 42 	sts	0x4254, r24	; 0x804254 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <_Z9makeMorsePcPhS0_+0x1ce>
		}
		else
		{
			holdKeyDown = FALSE;
    1410:	10 92 54 42 	sts	0x4254, r1	; 0x804254 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    1414:	20 97       	sbiw	r28, 0x00	; 0
    1416:	19 f0       	breq	.+6      	; 0x141e <_Z9makeMorsePcPhS0_+0x1d8>
	{
		*finished = completedString;
    1418:	80 91 4a 42 	lds	r24, 0x424A	; 0x80424a <_ZZ9makeMorsePcPhS0_E15completedString>
    141c:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    141e:	80 91 54 42 	lds	r24, 0x4254	; 0x804254 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    1422:	81 11       	cpse	r24, r1
    1424:	05 c0       	rjmp	.+10     	; 0x1430 <_Z9makeMorsePcPhS0_+0x1ea>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    1426:	80 91 49 42 	lds	r24, 0x4249	; 0x804249 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    142a:	03 c0       	rjmp	.+6      	; 0x1432 <_Z9makeMorsePcPhS0_+0x1ec>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <_Z9makeMorsePcPhS0_+0x1ec>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    1430:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	08 95       	ret

00001438 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    1438:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    143a:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    143c:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    143e:	40 83       	st	Z, r20
	ret                             // Return to caller
    1440:	08 95       	ret

00001442 <_Z17si5351_write_bulkPhh>:
			data[1] = reg_val;
			err |= si5351_write_bulk(data, 2);
		}

		return err;
	}
    1442:	cf 93       	push	r28
    1444:	c6 2f       	mov	r28, r22
    1446:	46 2f       	mov	r20, r22
    1448:	bc 01       	movw	r22, r24
    144a:	80 ec       	ldi	r24, 0xC0	; 192
    144c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <I2C_1_SendData>
    1450:	91 e0       	ldi	r25, 0x01	; 1
    1452:	c8 13       	cpse	r28, r24
    1454:	01 c0       	rjmp	.+2      	; 0x1458 <_Z17si5351_write_bulkPhh+0x16>
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	89 2f       	mov	r24, r25
    145a:	cf 91       	pop	r28
    145c:	08 95       	ret

0000145e <_Z16si5351_read_bulkPhh>:
    145e:	cf 93       	push	r28
    1460:	c6 2f       	mov	r28, r22
    1462:	46 2f       	mov	r20, r22
    1464:	bc 01       	movw	r22, r24
    1466:	80 ec       	ldi	r24, 0xC0	; 192
    1468:	0e 94 d2 06 	call	0xda4	; 0xda4 <I2C_1_GetData>
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	c8 13       	cpse	r28, r24
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <_Z16si5351_read_bulkPhh+0x16>
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	89 2f       	mov	r24, r25
    1476:	cf 91       	pop	r28
    1478:	08 95       	ret

0000147a <_Z19si5351_clock_enable12si5351_clockh>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	EC si5351_clock_enable(Si5351_clock clk, BOOL enable)
	{
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	00 d0       	rcall	.+0      	; 0x1484 <_Z19si5351_clock_enable12si5351_clockh+0xa>
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	18 2f       	mov	r17, r24
    148a:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		data[0] = SI5351_OUTPUT_ENABLE_CTRL;
    148c:	83 e0       	ldi	r24, 0x03	; 3
    148e:	89 83       	std	Y+1, r24	; 0x01

		if(si5351_read_bulk(data, 1)) 
    1490:	61 e0       	ldi	r22, 0x01	; 1
    1492:	ce 01       	movw	r24, r28
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	0e 94 2f 0a 	call	0x145e	; 0x145e <_Z16si5351_read_bulkPhh>
    149a:	81 11       	cpse	r24, r1
    149c:	23 c0       	rjmp	.+70     	; 0x14e4 <_Z19si5351_clock_enable12si5351_clockh+0x6a>
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    149e:	99 81       	ldd	r25, Y+1	; 0x01

		if(enable)
    14a0:	00 23       	and	r16, r16
    14a2:	59 f0       	breq	.+22     	; 0x14ba <_Z19si5351_clock_enable12si5351_clockh+0x40>
		{
			reg_val &= ~(1 << (uint8_t)clk);
    14a4:	21 e0       	ldi	r18, 0x01	; 1
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <_Z19si5351_clock_enable12si5351_clockh+0x34>
    14aa:	22 0f       	add	r18, r18
    14ac:	33 1f       	adc	r19, r19
    14ae:	1a 95       	dec	r17
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <_Z19si5351_clock_enable12si5351_clockh+0x30>
    14b2:	82 2f       	mov	r24, r18
    14b4:	80 95       	com	r24
    14b6:	89 23       	and	r24, r25
    14b8:	09 c0       	rjmp	.+18     	; 0x14cc <_Z19si5351_clock_enable12si5351_clockh+0x52>
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    14ba:	21 e0       	ldi	r18, 0x01	; 1
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <_Z19si5351_clock_enable12si5351_clockh+0x4a>
    14c0:	22 0f       	add	r18, r18
    14c2:	33 1f       	adc	r19, r19
    14c4:	1a 95       	dec	r17
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <_Z19si5351_clock_enable12si5351_clockh+0x46>
    14c8:	89 2f       	mov	r24, r25
    14ca:	82 2b       	or	r24, r18
		}

		data[0] = SI5351_OUTPUT_ENABLE_CTRL;
    14cc:	93 e0       	ldi	r25, 0x03	; 3
    14ce:	99 83       	std	Y+1, r25	; 0x01
		data[1] = reg_val;
    14d0:	8a 83       	std	Y+2, r24	; 0x02
		if(si5351_write_bulk(data, 2)) return ERROR_CODE_RTC_NONRESPONSIVE;
    14d2:	62 e0       	ldi	r22, 0x02	; 2
    14d4:	ce 01       	movw	r24, r28
    14d6:	01 96       	adiw	r24, 0x01	; 1
    14d8:	0e 94 21 0a 	call	0x1442	; 0x1442 <_Z17si5351_write_bulkPhh>
    14dc:	88 23       	and	r24, r24
    14de:	21 f0       	breq	.+8      	; 0x14e8 <_Z19si5351_clock_enable12si5351_clockh+0x6e>
    14e0:	8c ef       	ldi	r24, 0xFC	; 252
    14e2:	03 c0       	rjmp	.+6      	; 0x14ea <_Z19si5351_clock_enable12si5351_clockh+0x70>
		
		data[0] = SI5351_OUTPUT_ENABLE_CTRL;

		if(si5351_read_bulk(data, 1)) 
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
    14e4:	8c ef       	ldi	r24, 0xFC	; 252
    14e6:	01 c0       	rjmp	.+2      	; 0x14ea <_Z19si5351_clock_enable12si5351_clockh+0x70>

		data[0] = SI5351_OUTPUT_ENABLE_CTRL;
		data[1] = reg_val;
		if(si5351_write_bulk(data, 2)) return ERROR_CODE_RTC_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    14e8:	80 e0       	ldi	r24, 0x00	; 0
	}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	08 95       	ret

000014f8 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	08 95       	ret

000014fc <TIMERB_init>:
 * \return Initialization status.
 */
int8_t TIMERB_init()
{
TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    14fc:	e0 e0       	ldi	r30, 0x00	; 0
    14fe:	fb e0       	ldi	r31, 0x0B	; 11
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB0.CCMP = 0x9C40;
    1504:	20 e4       	ldi	r18, 0x40	; 64
    1506:	3c e9       	ldi	r19, 0x9C	; 156
    1508:	24 87       	std	Z+12, r18	; 0x0c
    150a:	35 87       	std	Z+13, r19	; 0x0d

TCB0.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    150c:	93 e0       	ldi	r25, 0x03	; 3
    150e:	90 83       	st	Z, r25

TCB0.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    1510:	86 83       	std	Z+6, r24	; 0x06

/********************************************************************************/

TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    1512:	e0 e1       	ldi	r30, 0x10	; 16
    1514:	fb e0       	ldi	r31, 0x0B	; 11
    1516:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB1.CCMP = 0x5DC0;
    1518:	40 ec       	ldi	r20, 0xC0	; 192
    151a:	5d e5       	ldi	r21, 0x5D	; 93
    151c:	44 87       	std	Z+12, r20	; 0x0c
    151e:	55 87       	std	Z+13, r21	; 0x0d

TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    1520:	80 83       	st	Z, r24

TCB1.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    1522:	86 83       	std	Z+6, r24	; 0x06


/********************************************************************************/

TCB3.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    1524:	e0 e3       	ldi	r30, 0x30	; 48
    1526:	fb e0       	ldi	r31, 0x0B	; 11
    1528:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB3.CCMP = 0x9C40;
    152a:	24 87       	std	Z+12, r18	; 0x0c
    152c:	35 87       	std	Z+13, r19	; 0x0d

TCB3.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    152e:	90 83       	st	Z, r25

TCB3.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    1530:	86 83       	std	Z+6, r24	; 0x06

	return 0;
}
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	08 95       	ret

00001536 <util_delay_ms>:


bool util_delay_ms(uint32_t delayValue)
{
    1536:	0f 93       	push	r16
    1538:	1f 93       	push	r17
	static uint32_t countdownValue=0;
	static bool counting = false;
	
	if(delayValue)
    153a:	61 15       	cp	r22, r1
    153c:	71 05       	cpc	r23, r1
    153e:	81 05       	cpc	r24, r1
    1540:	91 05       	cpc	r25, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <util_delay_ms+0x10>
    1544:	67 c0       	rjmp	.+206    	; 0x1614 <util_delay_ms+0xde>
	{
		if(counting)
    1546:	20 91 59 42 	lds	r18, 0x4259	; 0x804259 <_ZZ13util_delay_msE8counting>
    154a:	22 23       	and	r18, r18
    154c:	f1 f1       	breq	.+124    	; 0x15ca <util_delay_ms+0x94>
		{
			if(!g_ms_counter)
    154e:	00 91 5a 42 	lds	r16, 0x425A	; 0x80425a <_ZL12g_ms_counter>
    1552:	10 91 5b 42 	lds	r17, 0x425B	; 0x80425b <_ZL12g_ms_counter+0x1>
    1556:	20 91 5c 42 	lds	r18, 0x425C	; 0x80425c <_ZL12g_ms_counter+0x2>
    155a:	30 91 5d 42 	lds	r19, 0x425D	; 0x80425d <_ZL12g_ms_counter+0x3>
    155e:	01 2b       	or	r16, r17
    1560:	02 2b       	or	r16, r18
    1562:	03 2b       	or	r16, r19
    1564:	71 f4       	brne	.+28     	; 0x1582 <util_delay_ms+0x4c>
			{
				TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
				| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    1566:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

				counting = false;
    156a:	10 92 59 42 	sts	0x4259, r1	; 0x804259 <_ZZ13util_delay_msE8counting>
				countdownValue = 0;
    156e:	10 92 55 42 	sts	0x4255, r1	; 0x804255 <_ZZ13util_delay_msE14countdownValue>
    1572:	10 92 56 42 	sts	0x4256, r1	; 0x804256 <_ZZ13util_delay_msE14countdownValue+0x1>
    1576:	10 92 57 42 	sts	0x4257, r1	; 0x804257 <_ZZ13util_delay_msE14countdownValue+0x2>
    157a:	10 92 58 42 	sts	0x4258, r1	; 0x804258 <_ZZ13util_delay_msE14countdownValue+0x3>
				return(false); /* time expired */
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	62 c0       	rjmp	.+196    	; 0x1646 <util_delay_ms+0x110>
			}
			else if(delayValue != countdownValue) /* countdown delay changed */
    1582:	00 91 55 42 	lds	r16, 0x4255	; 0x804255 <_ZZ13util_delay_msE14countdownValue>
    1586:	10 91 56 42 	lds	r17, 0x4256	; 0x804256 <_ZZ13util_delay_msE14countdownValue+0x1>
    158a:	20 91 57 42 	lds	r18, 0x4257	; 0x804257 <_ZZ13util_delay_msE14countdownValue+0x2>
    158e:	30 91 58 42 	lds	r19, 0x4258	; 0x804258 <_ZZ13util_delay_msE14countdownValue+0x3>
    1592:	60 17       	cp	r22, r16
    1594:	71 07       	cpc	r23, r17
    1596:	82 07       	cpc	r24, r18
    1598:	93 07       	cpc	r25, r19
    159a:	09 f4       	brne	.+2      	; 0x159e <util_delay_ms+0x68>
    159c:	51 c0       	rjmp	.+162    	; 0x1640 <util_delay_ms+0x10a>
			{
				TCB1.CNT = 0x0000;
    159e:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    15a2:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
				countdownValue = delayValue;
    15a6:	60 93 55 42 	sts	0x4255, r22	; 0x804255 <_ZZ13util_delay_msE14countdownValue>
    15aa:	70 93 56 42 	sts	0x4256, r23	; 0x804256 <_ZZ13util_delay_msE14countdownValue+0x1>
    15ae:	80 93 57 42 	sts	0x4257, r24	; 0x804257 <_ZZ13util_delay_msE14countdownValue+0x2>
    15b2:	90 93 58 42 	sts	0x4258, r25	; 0x804258 <_ZZ13util_delay_msE14countdownValue+0x3>
				g_ms_counter = delayValue;
    15b6:	60 93 5a 42 	sts	0x425A, r22	; 0x80425a <_ZL12g_ms_counter>
    15ba:	70 93 5b 42 	sts	0x425B, r23	; 0x80425b <_ZL12g_ms_counter+0x1>
    15be:	80 93 5c 42 	sts	0x425C, r24	; 0x80425c <_ZL12g_ms_counter+0x2>
    15c2:	90 93 5d 42 	sts	0x425D, r25	; 0x80425d <_ZL12g_ms_counter+0x3>
				return(false);
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	3e c0       	rjmp	.+124    	; 0x1646 <util_delay_ms+0x110>
			}
		}
		else if(delayValue != countdownValue)
    15ca:	00 91 55 42 	lds	r16, 0x4255	; 0x804255 <_ZZ13util_delay_msE14countdownValue>
    15ce:	10 91 56 42 	lds	r17, 0x4256	; 0x804256 <_ZZ13util_delay_msE14countdownValue+0x1>
    15d2:	20 91 57 42 	lds	r18, 0x4257	; 0x804257 <_ZZ13util_delay_msE14countdownValue+0x2>
    15d6:	30 91 58 42 	lds	r19, 0x4258	; 0x804258 <_ZZ13util_delay_msE14countdownValue+0x3>
    15da:	60 17       	cp	r22, r16
    15dc:	71 07       	cpc	r23, r17
    15de:	82 07       	cpc	r24, r18
    15e0:	93 07       	cpc	r25, r19
    15e2:	71 f1       	breq	.+92     	; 0x1640 <util_delay_ms+0x10a>
		{
			TCB1.CNT = 0x0000;
    15e4:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    15e8:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
			countdownValue = delayValue;
    15ec:	60 93 55 42 	sts	0x4255, r22	; 0x804255 <_ZZ13util_delay_msE14countdownValue>
    15f0:	70 93 56 42 	sts	0x4256, r23	; 0x804256 <_ZZ13util_delay_msE14countdownValue+0x1>
    15f4:	80 93 57 42 	sts	0x4257, r24	; 0x804257 <_ZZ13util_delay_msE14countdownValue+0x2>
    15f8:	90 93 58 42 	sts	0x4258, r25	; 0x804258 <_ZZ13util_delay_msE14countdownValue+0x3>
			g_ms_counter = delayValue;
    15fc:	60 93 5a 42 	sts	0x425A, r22	; 0x80425a <_ZL12g_ms_counter>
    1600:	70 93 5b 42 	sts	0x425B, r23	; 0x80425b <_ZL12g_ms_counter+0x1>
    1604:	80 93 5c 42 	sts	0x425C, r24	; 0x80425c <_ZL12g_ms_counter+0x2>
    1608:	90 93 5d 42 	sts	0x425D, r25	; 0x80425d <_ZL12g_ms_counter+0x3>
			counting = true;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	80 93 59 42 	sts	0x4259, r24	; 0x804259 <_ZZ13util_delay_msE8counting>
    1612:	16 c0       	rjmp	.+44     	; 0x1640 <util_delay_ms+0x10a>
		}
	}
	else
	{
		TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
		| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    1614:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

		counting = false;
    1618:	10 92 59 42 	sts	0x4259, r1	; 0x804259 <_ZZ13util_delay_msE8counting>
		countdownValue = 0;
    161c:	10 92 55 42 	sts	0x4255, r1	; 0x804255 <_ZZ13util_delay_msE14countdownValue>
    1620:	10 92 56 42 	sts	0x4256, r1	; 0x804256 <_ZZ13util_delay_msE14countdownValue+0x1>
    1624:	10 92 57 42 	sts	0x4257, r1	; 0x804257 <_ZZ13util_delay_msE14countdownValue+0x2>
    1628:	10 92 58 42 	sts	0x4258, r1	; 0x804258 <_ZZ13util_delay_msE14countdownValue+0x3>
		g_ms_counter = 0;
    162c:	10 92 5a 42 	sts	0x425A, r1	; 0x80425a <_ZL12g_ms_counter>
    1630:	10 92 5b 42 	sts	0x425B, r1	; 0x80425b <_ZL12g_ms_counter+0x1>
    1634:	10 92 5c 42 	sts	0x425C, r1	; 0x80425c <_ZL12g_ms_counter+0x2>
    1638:	10 92 5d 42 	sts	0x425D, r1	; 0x80425d <_ZL12g_ms_counter+0x3>
		return(false); /* timer reset */
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	03 c0       	rjmp	.+6      	; 0x1646 <util_delay_ms+0x110>
	}
	
	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
	| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
	
	return(true);
}
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	08 95       	ret

0000164c <__vector_13>:

/**
One millisecond utility counter based on CPU clock.
*/
ISR(TCB1_INT_vect)
{
    164c:	1f 92       	push	r1
    164e:	0f 92       	push	r0
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	0f 92       	push	r0
    1654:	11 24       	eor	r1, r1
    1656:	8f 93       	push	r24
    1658:	9f 93       	push	r25
    165a:	af 93       	push	r26
    165c:	bf 93       	push	r27
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    165e:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    1662:	80 ff       	sbrs	r24, 0
    1664:	1d c0       	rjmp	.+58     	; 0x16a0 <__vector_13+0x54>
    {
		if(g_ms_counter) /* check for 1-second interval */
    1666:	80 91 5a 42 	lds	r24, 0x425A	; 0x80425a <_ZL12g_ms_counter>
    166a:	90 91 5b 42 	lds	r25, 0x425B	; 0x80425b <_ZL12g_ms_counter+0x1>
    166e:	a0 91 5c 42 	lds	r26, 0x425C	; 0x80425c <_ZL12g_ms_counter+0x2>
    1672:	b0 91 5d 42 	lds	r27, 0x425D	; 0x80425d <_ZL12g_ms_counter+0x3>
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	a1 05       	cpc	r26, r1
    167a:	b1 05       	cpc	r27, r1
    167c:	61 f0       	breq	.+24     	; 0x1696 <__vector_13+0x4a>
		{
			g_ms_counter--;	
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	a1 09       	sbc	r26, r1
    1682:	b1 09       	sbc	r27, r1
    1684:	80 93 5a 42 	sts	0x425A, r24	; 0x80425a <_ZL12g_ms_counter>
    1688:	90 93 5b 42 	sts	0x425B, r25	; 0x80425b <_ZL12g_ms_counter+0x1>
    168c:	a0 93 5c 42 	sts	0x425C, r26	; 0x80425c <_ZL12g_ms_counter+0x2>
    1690:	b0 93 5d 42 	sts	0x425D, r27	; 0x80425d <_ZL12g_ms_counter+0x3>
    1694:	02 c0       	rjmp	.+4      	; 0x169a <__vector_13+0x4e>
		}
		else
		{
			TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
			| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    1696:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
		}

        TCB1.INTFLAGS = TCB_CAPT_bm; /* clear interrupt flag */
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    }
}
    16a0:	bf 91       	pop	r27
    16a2:	af 91       	pop	r26
    16a4:	9f 91       	pop	r25
    16a6:	8f 91       	pop	r24
    16a8:	0f 90       	pop	r0
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	0f 90       	pop	r0
    16ae:	1f 90       	pop	r1
    16b0:	18 95       	reti

000016b2 <_Z18powerToTransmitterh>:
		{
// 			PORTB &= ~(1 << PORTB1);  /* Turn off 80m band */
		}

		return(result);
	}
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	08 95       	ret

000016b6 <_Z14keyTransmitterh>:

	void keyTransmitter(BOOL on)
	{
		if(on)
    16b6:	88 23       	and	r24, r24
    16b8:	61 f0       	breq	.+24     	; 0x16d2 <_Z14keyTransmitterh+0x1c>
		{
			if(!g_transmitter_keyed)
    16ba:	80 91 5e 42 	lds	r24, 0x425E	; 0x80425e <_ZL19g_transmitter_keyed>
    16be:	81 11       	cpse	r24, r1
    16c0:	0e c0       	rjmp	.+28     	; 0x16de <_Z14keyTransmitterh+0x28>
			{
				si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_ENABLED);
    16c2:	61 e0       	ldi	r22, 0x01	; 1
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	0e 94 3d 0a 	call	0x147a	; 0x147a <_Z19si5351_clock_enable12si5351_clockh>
				g_transmitter_keyed = TRUE;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	80 93 5e 42 	sts	0x425E, r24	; 0x80425e <_ZL19g_transmitter_keyed>
    16d0:	08 95       	ret
			}
		}
		else
		{
			si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED);
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	0e 94 3d 0a 	call	0x147a	; 0x147a <_Z19si5351_clock_enable12si5351_clockh>
			g_transmitter_keyed = FALSE;
    16da:	10 92 5e 42 	sts	0x425E, r1	; 0x80425e <_ZL19g_transmitter_keyed>
    16de:	08 95       	ret

000016e0 <USART1_init>:
 *
 * \return Nothing
 */
void USART1_disable()
{
	USART1.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
    16e0:	0e 94 b8 0c 	call	0x1970	; 0x1970 <__floatunsisf>
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e8       	ldi	r20, 0x80	; 128
    16ea:	51 e4       	ldi	r21, 0x41	; 65
    16ec:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__mulsf3>
    16f0:	9b 01       	movw	r18, r22
    16f2:	ac 01       	movw	r20, r24
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	7b e1       	ldi	r23, 0x1B	; 27
    16f8:	87 eb       	ldi	r24, 0xB7	; 183
    16fa:	9e e4       	ldi	r25, 0x4E	; 78
    16fc:	0e 94 10 0c 	call	0x1820	; 0x1820 <__divsf3>
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	5f e3       	ldi	r21, 0x3F	; 63
    1708:	0e 94 9f 0b 	call	0x173e	; 0x173e <__addsf3>
    170c:	0e 94 89 0c 	call	0x1912	; 0x1912 <__fixunssfsi>
    1710:	e0 e2       	ldi	r30, 0x20	; 32
    1712:	f8 e0       	ldi	r31, 0x08	; 8
    1714:	60 87       	std	Z+8, r22	; 0x08
    1716:	71 87       	std	Z+9, r23	; 0x09
    1718:	80 e8       	ldi	r24, 0x80	; 128
    171a:	85 83       	std	Z+5, r24	; 0x05
    171c:	80 ec       	ldi	r24, 0xC0	; 192
    171e:	86 83       	std	Z+6, r24	; 0x06
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	08 95       	ret

00001724 <USART1_enable_tx>:
    1724:	e0 e2       	ldi	r30, 0x20	; 32
    1726:	f8 e0       	ldi	r31, 0x08	; 8
    1728:	86 81       	ldd	r24, Z+6	; 0x06
    172a:	80 64       	ori	r24, 0x40	; 64
    172c:	86 83       	std	Z+6, r24	; 0x06
    172e:	85 81       	ldd	r24, Z+5	; 0x05
    1730:	80 62       	ori	r24, 0x20	; 32
    1732:	85 83       	std	Z+5, r24	; 0x05
    1734:	08 95       	ret

00001736 <USART1_get_data>:
 *
 * \return Data register from USART1 module
 */
uint8_t USART1_get_data()
{
	return USART1.RXDATAL;
    1736:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
}
    173a:	08 95       	ret

0000173c <__subsf3>:
    173c:	50 58       	subi	r21, 0x80	; 128

0000173e <__addsf3>:
    173e:	bb 27       	eor	r27, r27
    1740:	aa 27       	eor	r26, r26
    1742:	0e 94 b6 0b 	call	0x176c	; 0x176c <__addsf3x>
    1746:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__fp_round>
    174a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__fp_pscA>
    174e:	38 f0       	brcs	.+14     	; 0x175e <__addsf3+0x20>
    1750:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__fp_pscB>
    1754:	20 f0       	brcs	.+8      	; 0x175e <__addsf3+0x20>
    1756:	39 f4       	brne	.+14     	; 0x1766 <__addsf3+0x28>
    1758:	9f 3f       	cpi	r25, 0xFF	; 255
    175a:	19 f4       	brne	.+6      	; 0x1762 <__addsf3+0x24>
    175c:	26 f4       	brtc	.+8      	; 0x1766 <__addsf3+0x28>
    175e:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__fp_nan>
    1762:	0e f4       	brtc	.+2      	; 0x1766 <__addsf3+0x28>
    1764:	e0 95       	com	r30
    1766:	e7 fb       	bst	r30, 7
    1768:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__fp_inf>

0000176c <__addsf3x>:
    176c:	e9 2f       	mov	r30, r25
    176e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fp_split3>
    1772:	58 f3       	brcs	.-42     	; 0x174a <__addsf3+0xc>
    1774:	ba 17       	cp	r27, r26
    1776:	62 07       	cpc	r22, r18
    1778:	73 07       	cpc	r23, r19
    177a:	84 07       	cpc	r24, r20
    177c:	95 07       	cpc	r25, r21
    177e:	20 f0       	brcs	.+8      	; 0x1788 <__addsf3x+0x1c>
    1780:	79 f4       	brne	.+30     	; 0x17a0 <__addsf3x+0x34>
    1782:	a6 f5       	brtc	.+104    	; 0x17ec <__addsf3x+0x80>
    1784:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__fp_zero>
    1788:	0e f4       	brtc	.+2      	; 0x178c <__addsf3x+0x20>
    178a:	e0 95       	com	r30
    178c:	0b 2e       	mov	r0, r27
    178e:	ba 2f       	mov	r27, r26
    1790:	a0 2d       	mov	r26, r0
    1792:	0b 01       	movw	r0, r22
    1794:	b9 01       	movw	r22, r18
    1796:	90 01       	movw	r18, r0
    1798:	0c 01       	movw	r0, r24
    179a:	ca 01       	movw	r24, r20
    179c:	a0 01       	movw	r20, r0
    179e:	11 24       	eor	r1, r1
    17a0:	ff 27       	eor	r31, r31
    17a2:	59 1b       	sub	r21, r25
    17a4:	99 f0       	breq	.+38     	; 0x17cc <__addsf3x+0x60>
    17a6:	59 3f       	cpi	r21, 0xF9	; 249
    17a8:	50 f4       	brcc	.+20     	; 0x17be <__addsf3x+0x52>
    17aa:	50 3e       	cpi	r21, 0xE0	; 224
    17ac:	68 f1       	brcs	.+90     	; 0x1808 <__addsf3x+0x9c>
    17ae:	1a 16       	cp	r1, r26
    17b0:	f0 40       	sbci	r31, 0x00	; 0
    17b2:	a2 2f       	mov	r26, r18
    17b4:	23 2f       	mov	r18, r19
    17b6:	34 2f       	mov	r19, r20
    17b8:	44 27       	eor	r20, r20
    17ba:	58 5f       	subi	r21, 0xF8	; 248
    17bc:	f3 cf       	rjmp	.-26     	; 0x17a4 <__addsf3x+0x38>
    17be:	46 95       	lsr	r20
    17c0:	37 95       	ror	r19
    17c2:	27 95       	ror	r18
    17c4:	a7 95       	ror	r26
    17c6:	f0 40       	sbci	r31, 0x00	; 0
    17c8:	53 95       	inc	r21
    17ca:	c9 f7       	brne	.-14     	; 0x17be <__addsf3x+0x52>
    17cc:	7e f4       	brtc	.+30     	; 0x17ec <__addsf3x+0x80>
    17ce:	1f 16       	cp	r1, r31
    17d0:	ba 0b       	sbc	r27, r26
    17d2:	62 0b       	sbc	r22, r18
    17d4:	73 0b       	sbc	r23, r19
    17d6:	84 0b       	sbc	r24, r20
    17d8:	ba f0       	brmi	.+46     	; 0x1808 <__addsf3x+0x9c>
    17da:	91 50       	subi	r25, 0x01	; 1
    17dc:	a1 f0       	breq	.+40     	; 0x1806 <__addsf3x+0x9a>
    17de:	ff 0f       	add	r31, r31
    17e0:	bb 1f       	adc	r27, r27
    17e2:	66 1f       	adc	r22, r22
    17e4:	77 1f       	adc	r23, r23
    17e6:	88 1f       	adc	r24, r24
    17e8:	c2 f7       	brpl	.-16     	; 0x17da <__addsf3x+0x6e>
    17ea:	0e c0       	rjmp	.+28     	; 0x1808 <__addsf3x+0x9c>
    17ec:	ba 0f       	add	r27, r26
    17ee:	62 1f       	adc	r22, r18
    17f0:	73 1f       	adc	r23, r19
    17f2:	84 1f       	adc	r24, r20
    17f4:	48 f4       	brcc	.+18     	; 0x1808 <__addsf3x+0x9c>
    17f6:	87 95       	ror	r24
    17f8:	77 95       	ror	r23
    17fa:	67 95       	ror	r22
    17fc:	b7 95       	ror	r27
    17fe:	f7 95       	ror	r31
    1800:	9e 3f       	cpi	r25, 0xFE	; 254
    1802:	08 f0       	brcs	.+2      	; 0x1806 <__addsf3x+0x9a>
    1804:	b0 cf       	rjmp	.-160    	; 0x1766 <__addsf3+0x28>
    1806:	93 95       	inc	r25
    1808:	88 0f       	add	r24, r24
    180a:	08 f0       	brcs	.+2      	; 0x180e <__addsf3x+0xa2>
    180c:	99 27       	eor	r25, r25
    180e:	ee 0f       	add	r30, r30
    1810:	97 95       	ror	r25
    1812:	87 95       	ror	r24
    1814:	08 95       	ret

00001816 <__cmpsf2>:
    1816:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__fp_cmp>
    181a:	08 f4       	brcc	.+2      	; 0x181e <__cmpsf2+0x8>
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	08 95       	ret

00001820 <__divsf3>:
    1820:	0e 94 24 0c 	call	0x1848	; 0x1848 <__divsf3x>
    1824:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__fp_round>
    1828:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__fp_pscB>
    182c:	58 f0       	brcs	.+22     	; 0x1844 <__divsf3+0x24>
    182e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__fp_pscA>
    1832:	40 f0       	brcs	.+16     	; 0x1844 <__divsf3+0x24>
    1834:	29 f4       	brne	.+10     	; 0x1840 <__divsf3+0x20>
    1836:	5f 3f       	cpi	r21, 0xFF	; 255
    1838:	29 f0       	breq	.+10     	; 0x1844 <__divsf3+0x24>
    183a:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__fp_inf>
    183e:	51 11       	cpse	r21, r1
    1840:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__fp_szero>
    1844:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__fp_nan>

00001848 <__divsf3x>:
    1848:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fp_split3>
    184c:	68 f3       	brcs	.-38     	; 0x1828 <__divsf3+0x8>

0000184e <__divsf3_pse>:
    184e:	99 23       	and	r25, r25
    1850:	b1 f3       	breq	.-20     	; 0x183e <__divsf3+0x1e>
    1852:	55 23       	and	r21, r21
    1854:	91 f3       	breq	.-28     	; 0x183a <__divsf3+0x1a>
    1856:	95 1b       	sub	r25, r21
    1858:	55 0b       	sbc	r21, r21
    185a:	bb 27       	eor	r27, r27
    185c:	aa 27       	eor	r26, r26
    185e:	62 17       	cp	r22, r18
    1860:	73 07       	cpc	r23, r19
    1862:	84 07       	cpc	r24, r20
    1864:	38 f0       	brcs	.+14     	; 0x1874 <__divsf3_pse+0x26>
    1866:	9f 5f       	subi	r25, 0xFF	; 255
    1868:	5f 4f       	sbci	r21, 0xFF	; 255
    186a:	22 0f       	add	r18, r18
    186c:	33 1f       	adc	r19, r19
    186e:	44 1f       	adc	r20, r20
    1870:	aa 1f       	adc	r26, r26
    1872:	a9 f3       	breq	.-22     	; 0x185e <__divsf3_pse+0x10>
    1874:	35 d0       	rcall	.+106    	; 0x18e0 <__divsf3_pse+0x92>
    1876:	0e 2e       	mov	r0, r30
    1878:	3a f0       	brmi	.+14     	; 0x1888 <__divsf3_pse+0x3a>
    187a:	e0 e8       	ldi	r30, 0x80	; 128
    187c:	32 d0       	rcall	.+100    	; 0x18e2 <__divsf3_pse+0x94>
    187e:	91 50       	subi	r25, 0x01	; 1
    1880:	50 40       	sbci	r21, 0x00	; 0
    1882:	e6 95       	lsr	r30
    1884:	00 1c       	adc	r0, r0
    1886:	ca f7       	brpl	.-14     	; 0x187a <__divsf3_pse+0x2c>
    1888:	2b d0       	rcall	.+86     	; 0x18e0 <__divsf3_pse+0x92>
    188a:	fe 2f       	mov	r31, r30
    188c:	29 d0       	rcall	.+82     	; 0x18e0 <__divsf3_pse+0x92>
    188e:	66 0f       	add	r22, r22
    1890:	77 1f       	adc	r23, r23
    1892:	88 1f       	adc	r24, r24
    1894:	bb 1f       	adc	r27, r27
    1896:	26 17       	cp	r18, r22
    1898:	37 07       	cpc	r19, r23
    189a:	48 07       	cpc	r20, r24
    189c:	ab 07       	cpc	r26, r27
    189e:	b0 e8       	ldi	r27, 0x80	; 128
    18a0:	09 f0       	breq	.+2      	; 0x18a4 <__divsf3_pse+0x56>
    18a2:	bb 0b       	sbc	r27, r27
    18a4:	80 2d       	mov	r24, r0
    18a6:	bf 01       	movw	r22, r30
    18a8:	ff 27       	eor	r31, r31
    18aa:	93 58       	subi	r25, 0x83	; 131
    18ac:	5f 4f       	sbci	r21, 0xFF	; 255
    18ae:	3a f0       	brmi	.+14     	; 0x18be <__divsf3_pse+0x70>
    18b0:	9e 3f       	cpi	r25, 0xFE	; 254
    18b2:	51 05       	cpc	r21, r1
    18b4:	78 f0       	brcs	.+30     	; 0x18d4 <__divsf3_pse+0x86>
    18b6:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__fp_inf>
    18ba:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__fp_szero>
    18be:	5f 3f       	cpi	r21, 0xFF	; 255
    18c0:	e4 f3       	brlt	.-8      	; 0x18ba <__divsf3_pse+0x6c>
    18c2:	98 3e       	cpi	r25, 0xE8	; 232
    18c4:	d4 f3       	brlt	.-12     	; 0x18ba <__divsf3_pse+0x6c>
    18c6:	86 95       	lsr	r24
    18c8:	77 95       	ror	r23
    18ca:	67 95       	ror	r22
    18cc:	b7 95       	ror	r27
    18ce:	f7 95       	ror	r31
    18d0:	9f 5f       	subi	r25, 0xFF	; 255
    18d2:	c9 f7       	brne	.-14     	; 0x18c6 <__divsf3_pse+0x78>
    18d4:	88 0f       	add	r24, r24
    18d6:	91 1d       	adc	r25, r1
    18d8:	96 95       	lsr	r25
    18da:	87 95       	ror	r24
    18dc:	97 f9       	bld	r25, 7
    18de:	08 95       	ret
    18e0:	e1 e0       	ldi	r30, 0x01	; 1
    18e2:	66 0f       	add	r22, r22
    18e4:	77 1f       	adc	r23, r23
    18e6:	88 1f       	adc	r24, r24
    18e8:	bb 1f       	adc	r27, r27
    18ea:	62 17       	cp	r22, r18
    18ec:	73 07       	cpc	r23, r19
    18ee:	84 07       	cpc	r24, r20
    18f0:	ba 07       	cpc	r27, r26
    18f2:	20 f0       	brcs	.+8      	; 0x18fc <__divsf3_pse+0xae>
    18f4:	62 1b       	sub	r22, r18
    18f6:	73 0b       	sbc	r23, r19
    18f8:	84 0b       	sbc	r24, r20
    18fa:	ba 0b       	sbc	r27, r26
    18fc:	ee 1f       	adc	r30, r30
    18fe:	88 f7       	brcc	.-30     	; 0x18e2 <__divsf3_pse+0x94>
    1900:	e0 95       	com	r30
    1902:	08 95       	ret

00001904 <__fixsfsi>:
    1904:	0e 94 89 0c 	call	0x1912	; 0x1912 <__fixunssfsi>
    1908:	68 94       	set
    190a:	b1 11       	cpse	r27, r1
    190c:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__fp_szero>
    1910:	08 95       	ret

00001912 <__fixunssfsi>:
    1912:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__fp_splitA>
    1916:	88 f0       	brcs	.+34     	; 0x193a <__fixunssfsi+0x28>
    1918:	9f 57       	subi	r25, 0x7F	; 127
    191a:	98 f0       	brcs	.+38     	; 0x1942 <__fixunssfsi+0x30>
    191c:	b9 2f       	mov	r27, r25
    191e:	99 27       	eor	r25, r25
    1920:	b7 51       	subi	r27, 0x17	; 23
    1922:	b0 f0       	brcs	.+44     	; 0x1950 <__fixunssfsi+0x3e>
    1924:	e1 f0       	breq	.+56     	; 0x195e <__fixunssfsi+0x4c>
    1926:	66 0f       	add	r22, r22
    1928:	77 1f       	adc	r23, r23
    192a:	88 1f       	adc	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	1a f0       	brmi	.+6      	; 0x1936 <__fixunssfsi+0x24>
    1930:	ba 95       	dec	r27
    1932:	c9 f7       	brne	.-14     	; 0x1926 <__fixunssfsi+0x14>
    1934:	14 c0       	rjmp	.+40     	; 0x195e <__fixunssfsi+0x4c>
    1936:	b1 30       	cpi	r27, 0x01	; 1
    1938:	91 f0       	breq	.+36     	; 0x195e <__fixunssfsi+0x4c>
    193a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__fp_zero>
    193e:	b1 e0       	ldi	r27, 0x01	; 1
    1940:	08 95       	ret
    1942:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__fp_zero>
    1946:	67 2f       	mov	r22, r23
    1948:	78 2f       	mov	r23, r24
    194a:	88 27       	eor	r24, r24
    194c:	b8 5f       	subi	r27, 0xF8	; 248
    194e:	39 f0       	breq	.+14     	; 0x195e <__fixunssfsi+0x4c>
    1950:	b9 3f       	cpi	r27, 0xF9	; 249
    1952:	cc f3       	brlt	.-14     	; 0x1946 <__fixunssfsi+0x34>
    1954:	86 95       	lsr	r24
    1956:	77 95       	ror	r23
    1958:	67 95       	ror	r22
    195a:	b3 95       	inc	r27
    195c:	d9 f7       	brne	.-10     	; 0x1954 <__fixunssfsi+0x42>
    195e:	3e f4       	brtc	.+14     	; 0x196e <__fixunssfsi+0x5c>
    1960:	90 95       	com	r25
    1962:	80 95       	com	r24
    1964:	70 95       	com	r23
    1966:	61 95       	neg	r22
    1968:	7f 4f       	sbci	r23, 0xFF	; 255
    196a:	8f 4f       	sbci	r24, 0xFF	; 255
    196c:	9f 4f       	sbci	r25, 0xFF	; 255
    196e:	08 95       	ret

00001970 <__floatunsisf>:
    1970:	e8 94       	clt
    1972:	09 c0       	rjmp	.+18     	; 0x1986 <__floatsisf+0x12>

00001974 <__floatsisf>:
    1974:	97 fb       	bst	r25, 7
    1976:	3e f4       	brtc	.+14     	; 0x1986 <__floatsisf+0x12>
    1978:	90 95       	com	r25
    197a:	80 95       	com	r24
    197c:	70 95       	com	r23
    197e:	61 95       	neg	r22
    1980:	7f 4f       	sbci	r23, 0xFF	; 255
    1982:	8f 4f       	sbci	r24, 0xFF	; 255
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	99 23       	and	r25, r25
    1988:	a9 f0       	breq	.+42     	; 0x19b4 <__floatsisf+0x40>
    198a:	f9 2f       	mov	r31, r25
    198c:	96 e9       	ldi	r25, 0x96	; 150
    198e:	bb 27       	eor	r27, r27
    1990:	93 95       	inc	r25
    1992:	f6 95       	lsr	r31
    1994:	87 95       	ror	r24
    1996:	77 95       	ror	r23
    1998:	67 95       	ror	r22
    199a:	b7 95       	ror	r27
    199c:	f1 11       	cpse	r31, r1
    199e:	f8 cf       	rjmp	.-16     	; 0x1990 <__floatsisf+0x1c>
    19a0:	fa f4       	brpl	.+62     	; 0x19e0 <__floatsisf+0x6c>
    19a2:	bb 0f       	add	r27, r27
    19a4:	11 f4       	brne	.+4      	; 0x19aa <__floatsisf+0x36>
    19a6:	60 ff       	sbrs	r22, 0
    19a8:	1b c0       	rjmp	.+54     	; 0x19e0 <__floatsisf+0x6c>
    19aa:	6f 5f       	subi	r22, 0xFF	; 255
    19ac:	7f 4f       	sbci	r23, 0xFF	; 255
    19ae:	8f 4f       	sbci	r24, 0xFF	; 255
    19b0:	9f 4f       	sbci	r25, 0xFF	; 255
    19b2:	16 c0       	rjmp	.+44     	; 0x19e0 <__floatsisf+0x6c>
    19b4:	88 23       	and	r24, r24
    19b6:	11 f0       	breq	.+4      	; 0x19bc <__floatsisf+0x48>
    19b8:	96 e9       	ldi	r25, 0x96	; 150
    19ba:	11 c0       	rjmp	.+34     	; 0x19de <__floatsisf+0x6a>
    19bc:	77 23       	and	r23, r23
    19be:	21 f0       	breq	.+8      	; 0x19c8 <__floatsisf+0x54>
    19c0:	9e e8       	ldi	r25, 0x8E	; 142
    19c2:	87 2f       	mov	r24, r23
    19c4:	76 2f       	mov	r23, r22
    19c6:	05 c0       	rjmp	.+10     	; 0x19d2 <__floatsisf+0x5e>
    19c8:	66 23       	and	r22, r22
    19ca:	71 f0       	breq	.+28     	; 0x19e8 <__floatsisf+0x74>
    19cc:	96 e8       	ldi	r25, 0x86	; 134
    19ce:	86 2f       	mov	r24, r22
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	60 e0       	ldi	r22, 0x00	; 0
    19d4:	2a f0       	brmi	.+10     	; 0x19e0 <__floatsisf+0x6c>
    19d6:	9a 95       	dec	r25
    19d8:	66 0f       	add	r22, r22
    19da:	77 1f       	adc	r23, r23
    19dc:	88 1f       	adc	r24, r24
    19de:	da f7       	brpl	.-10     	; 0x19d6 <__floatsisf+0x62>
    19e0:	88 0f       	add	r24, r24
    19e2:	96 95       	lsr	r25
    19e4:	87 95       	ror	r24
    19e6:	97 f9       	bld	r25, 7
    19e8:	08 95       	ret

000019ea <__fp_cmp>:
    19ea:	99 0f       	add	r25, r25
    19ec:	00 08       	sbc	r0, r0
    19ee:	55 0f       	add	r21, r21
    19f0:	aa 0b       	sbc	r26, r26
    19f2:	e0 e8       	ldi	r30, 0x80	; 128
    19f4:	fe ef       	ldi	r31, 0xFE	; 254
    19f6:	16 16       	cp	r1, r22
    19f8:	17 06       	cpc	r1, r23
    19fa:	e8 07       	cpc	r30, r24
    19fc:	f9 07       	cpc	r31, r25
    19fe:	c0 f0       	brcs	.+48     	; 0x1a30 <__fp_cmp+0x46>
    1a00:	12 16       	cp	r1, r18
    1a02:	13 06       	cpc	r1, r19
    1a04:	e4 07       	cpc	r30, r20
    1a06:	f5 07       	cpc	r31, r21
    1a08:	98 f0       	brcs	.+38     	; 0x1a30 <__fp_cmp+0x46>
    1a0a:	62 1b       	sub	r22, r18
    1a0c:	73 0b       	sbc	r23, r19
    1a0e:	84 0b       	sbc	r24, r20
    1a10:	95 0b       	sbc	r25, r21
    1a12:	39 f4       	brne	.+14     	; 0x1a22 <__fp_cmp+0x38>
    1a14:	0a 26       	eor	r0, r26
    1a16:	61 f0       	breq	.+24     	; 0x1a30 <__fp_cmp+0x46>
    1a18:	23 2b       	or	r18, r19
    1a1a:	24 2b       	or	r18, r20
    1a1c:	25 2b       	or	r18, r21
    1a1e:	21 f4       	brne	.+8      	; 0x1a28 <__fp_cmp+0x3e>
    1a20:	08 95       	ret
    1a22:	0a 26       	eor	r0, r26
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <__fp_cmp+0x3e>
    1a26:	a1 40       	sbci	r26, 0x01	; 1
    1a28:	a6 95       	lsr	r26
    1a2a:	8f ef       	ldi	r24, 0xFF	; 255
    1a2c:	81 1d       	adc	r24, r1
    1a2e:	81 1d       	adc	r24, r1
    1a30:	08 95       	ret

00001a32 <__fp_inf>:
    1a32:	97 f9       	bld	r25, 7
    1a34:	9f 67       	ori	r25, 0x7F	; 127
    1a36:	80 e8       	ldi	r24, 0x80	; 128
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	08 95       	ret

00001a3e <__fp_nan>:
    1a3e:	9f ef       	ldi	r25, 0xFF	; 255
    1a40:	80 ec       	ldi	r24, 0xC0	; 192
    1a42:	08 95       	ret

00001a44 <__fp_pscA>:
    1a44:	00 24       	eor	r0, r0
    1a46:	0a 94       	dec	r0
    1a48:	16 16       	cp	r1, r22
    1a4a:	17 06       	cpc	r1, r23
    1a4c:	18 06       	cpc	r1, r24
    1a4e:	09 06       	cpc	r0, r25
    1a50:	08 95       	ret

00001a52 <__fp_pscB>:
    1a52:	00 24       	eor	r0, r0
    1a54:	0a 94       	dec	r0
    1a56:	12 16       	cp	r1, r18
    1a58:	13 06       	cpc	r1, r19
    1a5a:	14 06       	cpc	r1, r20
    1a5c:	05 06       	cpc	r0, r21
    1a5e:	08 95       	ret

00001a60 <__fp_round>:
    1a60:	09 2e       	mov	r0, r25
    1a62:	03 94       	inc	r0
    1a64:	00 0c       	add	r0, r0
    1a66:	11 f4       	brne	.+4      	; 0x1a6c <__fp_round+0xc>
    1a68:	88 23       	and	r24, r24
    1a6a:	52 f0       	brmi	.+20     	; 0x1a80 <__fp_round+0x20>
    1a6c:	bb 0f       	add	r27, r27
    1a6e:	40 f4       	brcc	.+16     	; 0x1a80 <__fp_round+0x20>
    1a70:	bf 2b       	or	r27, r31
    1a72:	11 f4       	brne	.+4      	; 0x1a78 <__fp_round+0x18>
    1a74:	60 ff       	sbrs	r22, 0
    1a76:	04 c0       	rjmp	.+8      	; 0x1a80 <__fp_round+0x20>
    1a78:	6f 5f       	subi	r22, 0xFF	; 255
    1a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a80:	08 95       	ret

00001a82 <__fp_split3>:
    1a82:	57 fd       	sbrc	r21, 7
    1a84:	90 58       	subi	r25, 0x80	; 128
    1a86:	44 0f       	add	r20, r20
    1a88:	55 1f       	adc	r21, r21
    1a8a:	59 f0       	breq	.+22     	; 0x1aa2 <__fp_splitA+0x10>
    1a8c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a8e:	71 f0       	breq	.+28     	; 0x1aac <__fp_splitA+0x1a>
    1a90:	47 95       	ror	r20

00001a92 <__fp_splitA>:
    1a92:	88 0f       	add	r24, r24
    1a94:	97 fb       	bst	r25, 7
    1a96:	99 1f       	adc	r25, r25
    1a98:	61 f0       	breq	.+24     	; 0x1ab2 <__fp_splitA+0x20>
    1a9a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a9c:	79 f0       	breq	.+30     	; 0x1abc <__fp_splitA+0x2a>
    1a9e:	87 95       	ror	r24
    1aa0:	08 95       	ret
    1aa2:	12 16       	cp	r1, r18
    1aa4:	13 06       	cpc	r1, r19
    1aa6:	14 06       	cpc	r1, r20
    1aa8:	55 1f       	adc	r21, r21
    1aaa:	f2 cf       	rjmp	.-28     	; 0x1a90 <__fp_split3+0xe>
    1aac:	46 95       	lsr	r20
    1aae:	f1 df       	rcall	.-30     	; 0x1a92 <__fp_splitA>
    1ab0:	08 c0       	rjmp	.+16     	; 0x1ac2 <__fp_splitA+0x30>
    1ab2:	16 16       	cp	r1, r22
    1ab4:	17 06       	cpc	r1, r23
    1ab6:	18 06       	cpc	r1, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	f1 cf       	rjmp	.-30     	; 0x1a9e <__fp_splitA+0xc>
    1abc:	86 95       	lsr	r24
    1abe:	71 05       	cpc	r23, r1
    1ac0:	61 05       	cpc	r22, r1
    1ac2:	08 94       	sec
    1ac4:	08 95       	ret

00001ac6 <__fp_zero>:
    1ac6:	e8 94       	clt

00001ac8 <__fp_szero>:
    1ac8:	bb 27       	eor	r27, r27
    1aca:	66 27       	eor	r22, r22
    1acc:	77 27       	eor	r23, r23
    1ace:	cb 01       	movw	r24, r22
    1ad0:	97 f9       	bld	r25, 7
    1ad2:	08 95       	ret

00001ad4 <__gesf2>:
    1ad4:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__fp_cmp>
    1ad8:	08 f4       	brcc	.+2      	; 0x1adc <__gesf2+0x8>
    1ada:	8f ef       	ldi	r24, 0xFF	; 255
    1adc:	08 95       	ret

00001ade <__mulsf3>:
    1ade:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__mulsf3x>
    1ae2:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__fp_round>
    1ae6:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__fp_pscA>
    1aea:	38 f0       	brcs	.+14     	; 0x1afa <__mulsf3+0x1c>
    1aec:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__fp_pscB>
    1af0:	20 f0       	brcs	.+8      	; 0x1afa <__mulsf3+0x1c>
    1af2:	95 23       	and	r25, r21
    1af4:	11 f0       	breq	.+4      	; 0x1afa <__mulsf3+0x1c>
    1af6:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__fp_inf>
    1afa:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__fp_nan>
    1afe:	11 24       	eor	r1, r1
    1b00:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__fp_szero>

00001b04 <__mulsf3x>:
    1b04:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fp_split3>
    1b08:	70 f3       	brcs	.-36     	; 0x1ae6 <__mulsf3+0x8>

00001b0a <__mulsf3_pse>:
    1b0a:	95 9f       	mul	r25, r21
    1b0c:	c1 f3       	breq	.-16     	; 0x1afe <__mulsf3+0x20>
    1b0e:	95 0f       	add	r25, r21
    1b10:	50 e0       	ldi	r21, 0x00	; 0
    1b12:	55 1f       	adc	r21, r21
    1b14:	62 9f       	mul	r22, r18
    1b16:	f0 01       	movw	r30, r0
    1b18:	72 9f       	mul	r23, r18
    1b1a:	bb 27       	eor	r27, r27
    1b1c:	f0 0d       	add	r31, r0
    1b1e:	b1 1d       	adc	r27, r1
    1b20:	63 9f       	mul	r22, r19
    1b22:	aa 27       	eor	r26, r26
    1b24:	f0 0d       	add	r31, r0
    1b26:	b1 1d       	adc	r27, r1
    1b28:	aa 1f       	adc	r26, r26
    1b2a:	64 9f       	mul	r22, r20
    1b2c:	66 27       	eor	r22, r22
    1b2e:	b0 0d       	add	r27, r0
    1b30:	a1 1d       	adc	r26, r1
    1b32:	66 1f       	adc	r22, r22
    1b34:	82 9f       	mul	r24, r18
    1b36:	22 27       	eor	r18, r18
    1b38:	b0 0d       	add	r27, r0
    1b3a:	a1 1d       	adc	r26, r1
    1b3c:	62 1f       	adc	r22, r18
    1b3e:	73 9f       	mul	r23, r19
    1b40:	b0 0d       	add	r27, r0
    1b42:	a1 1d       	adc	r26, r1
    1b44:	62 1f       	adc	r22, r18
    1b46:	83 9f       	mul	r24, r19
    1b48:	a0 0d       	add	r26, r0
    1b4a:	61 1d       	adc	r22, r1
    1b4c:	22 1f       	adc	r18, r18
    1b4e:	74 9f       	mul	r23, r20
    1b50:	33 27       	eor	r19, r19
    1b52:	a0 0d       	add	r26, r0
    1b54:	61 1d       	adc	r22, r1
    1b56:	23 1f       	adc	r18, r19
    1b58:	84 9f       	mul	r24, r20
    1b5a:	60 0d       	add	r22, r0
    1b5c:	21 1d       	adc	r18, r1
    1b5e:	82 2f       	mov	r24, r18
    1b60:	76 2f       	mov	r23, r22
    1b62:	6a 2f       	mov	r22, r26
    1b64:	11 24       	eor	r1, r1
    1b66:	9f 57       	subi	r25, 0x7F	; 127
    1b68:	50 40       	sbci	r21, 0x00	; 0
    1b6a:	9a f0       	brmi	.+38     	; 0x1b92 <__mulsf3_pse+0x88>
    1b6c:	f1 f0       	breq	.+60     	; 0x1baa <__mulsf3_pse+0xa0>
    1b6e:	88 23       	and	r24, r24
    1b70:	4a f0       	brmi	.+18     	; 0x1b84 <__mulsf3_pse+0x7a>
    1b72:	ee 0f       	add	r30, r30
    1b74:	ff 1f       	adc	r31, r31
    1b76:	bb 1f       	adc	r27, r27
    1b78:	66 1f       	adc	r22, r22
    1b7a:	77 1f       	adc	r23, r23
    1b7c:	88 1f       	adc	r24, r24
    1b7e:	91 50       	subi	r25, 0x01	; 1
    1b80:	50 40       	sbci	r21, 0x00	; 0
    1b82:	a9 f7       	brne	.-22     	; 0x1b6e <__mulsf3_pse+0x64>
    1b84:	9e 3f       	cpi	r25, 0xFE	; 254
    1b86:	51 05       	cpc	r21, r1
    1b88:	80 f0       	brcs	.+32     	; 0x1baa <__mulsf3_pse+0xa0>
    1b8a:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__fp_inf>
    1b8e:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__fp_szero>
    1b92:	5f 3f       	cpi	r21, 0xFF	; 255
    1b94:	e4 f3       	brlt	.-8      	; 0x1b8e <__mulsf3_pse+0x84>
    1b96:	98 3e       	cpi	r25, 0xE8	; 232
    1b98:	d4 f3       	brlt	.-12     	; 0x1b8e <__mulsf3_pse+0x84>
    1b9a:	86 95       	lsr	r24
    1b9c:	77 95       	ror	r23
    1b9e:	67 95       	ror	r22
    1ba0:	b7 95       	ror	r27
    1ba2:	f7 95       	ror	r31
    1ba4:	e7 95       	ror	r30
    1ba6:	9f 5f       	subi	r25, 0xFF	; 255
    1ba8:	c1 f7       	brne	.-16     	; 0x1b9a <__mulsf3_pse+0x90>
    1baa:	fe 2b       	or	r31, r30
    1bac:	88 0f       	add	r24, r24
    1bae:	91 1d       	adc	r25, r1
    1bb0:	96 95       	lsr	r25
    1bb2:	87 95       	ror	r24
    1bb4:	97 f9       	bld	r25, 7
    1bb6:	08 95       	ret

00001bb8 <__tablejump2__>:
    1bb8:	ee 0f       	add	r30, r30
    1bba:	ff 1f       	adc	r31, r31
    1bbc:	00 24       	eor	r0, r0
    1bbe:	00 1c       	adc	r0, r0
    1bc0:	0b be       	out	0x3b, r0	; 59
    1bc2:	07 90       	elpm	r0, Z+
    1bc4:	f6 91       	elpm	r31, Z
    1bc6:	e0 2d       	mov	r30, r0
    1bc8:	09 94       	ijmp

00001bca <malloc>:
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	82 30       	cpi	r24, 0x02	; 2
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	10 f4       	brcc	.+4      	; 0x1bdc <malloc+0x12>
    1bd8:	82 e0       	ldi	r24, 0x02	; 2
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	e0 91 61 42 	lds	r30, 0x4261	; 0x804261 <__flp>
    1be0:	f0 91 62 42 	lds	r31, 0x4262	; 0x804262 <__flp+0x1>
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	a0 e0       	ldi	r26, 0x00	; 0
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	30 97       	sbiw	r30, 0x00	; 0
    1bee:	19 f1       	breq	.+70     	; 0x1c36 <malloc+0x6c>
    1bf0:	40 81       	ld	r20, Z
    1bf2:	51 81       	ldd	r21, Z+1	; 0x01
    1bf4:	02 81       	ldd	r16, Z+2	; 0x02
    1bf6:	13 81       	ldd	r17, Z+3	; 0x03
    1bf8:	48 17       	cp	r20, r24
    1bfa:	59 07       	cpc	r21, r25
    1bfc:	c8 f0       	brcs	.+50     	; 0x1c30 <malloc+0x66>
    1bfe:	84 17       	cp	r24, r20
    1c00:	95 07       	cpc	r25, r21
    1c02:	69 f4       	brne	.+26     	; 0x1c1e <malloc+0x54>
    1c04:	10 97       	sbiw	r26, 0x00	; 0
    1c06:	31 f0       	breq	.+12     	; 0x1c14 <malloc+0x4a>
    1c08:	12 96       	adiw	r26, 0x02	; 2
    1c0a:	0c 93       	st	X, r16
    1c0c:	12 97       	sbiw	r26, 0x02	; 2
    1c0e:	13 96       	adiw	r26, 0x03	; 3
    1c10:	1c 93       	st	X, r17
    1c12:	27 c0       	rjmp	.+78     	; 0x1c62 <malloc+0x98>
    1c14:	00 93 61 42 	sts	0x4261, r16	; 0x804261 <__flp>
    1c18:	10 93 62 42 	sts	0x4262, r17	; 0x804262 <__flp+0x1>
    1c1c:	22 c0       	rjmp	.+68     	; 0x1c62 <malloc+0x98>
    1c1e:	21 15       	cp	r18, r1
    1c20:	31 05       	cpc	r19, r1
    1c22:	19 f0       	breq	.+6      	; 0x1c2a <malloc+0x60>
    1c24:	42 17       	cp	r20, r18
    1c26:	53 07       	cpc	r21, r19
    1c28:	18 f4       	brcc	.+6      	; 0x1c30 <malloc+0x66>
    1c2a:	9a 01       	movw	r18, r20
    1c2c:	bd 01       	movw	r22, r26
    1c2e:	ef 01       	movw	r28, r30
    1c30:	df 01       	movw	r26, r30
    1c32:	f8 01       	movw	r30, r16
    1c34:	db cf       	rjmp	.-74     	; 0x1bec <malloc+0x22>
    1c36:	21 15       	cp	r18, r1
    1c38:	31 05       	cpc	r19, r1
    1c3a:	f9 f0       	breq	.+62     	; 0x1c7a <malloc+0xb0>
    1c3c:	28 1b       	sub	r18, r24
    1c3e:	39 0b       	sbc	r19, r25
    1c40:	24 30       	cpi	r18, 0x04	; 4
    1c42:	31 05       	cpc	r19, r1
    1c44:	80 f4       	brcc	.+32     	; 0x1c66 <malloc+0x9c>
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4a:	61 15       	cp	r22, r1
    1c4c:	71 05       	cpc	r23, r1
    1c4e:	21 f0       	breq	.+8      	; 0x1c58 <malloc+0x8e>
    1c50:	fb 01       	movw	r30, r22
    1c52:	82 83       	std	Z+2, r24	; 0x02
    1c54:	93 83       	std	Z+3, r25	; 0x03
    1c56:	04 c0       	rjmp	.+8      	; 0x1c60 <malloc+0x96>
    1c58:	80 93 61 42 	sts	0x4261, r24	; 0x804261 <__flp>
    1c5c:	90 93 62 42 	sts	0x4262, r25	; 0x804262 <__flp+0x1>
    1c60:	fe 01       	movw	r30, r28
    1c62:	32 96       	adiw	r30, 0x02	; 2
    1c64:	44 c0       	rjmp	.+136    	; 0x1cee <malloc+0x124>
    1c66:	fe 01       	movw	r30, r28
    1c68:	e2 0f       	add	r30, r18
    1c6a:	f3 1f       	adc	r31, r19
    1c6c:	81 93       	st	Z+, r24
    1c6e:	91 93       	st	Z+, r25
    1c70:	22 50       	subi	r18, 0x02	; 2
    1c72:	31 09       	sbc	r19, r1
    1c74:	28 83       	st	Y, r18
    1c76:	39 83       	std	Y+1, r19	; 0x01
    1c78:	3a c0       	rjmp	.+116    	; 0x1cee <malloc+0x124>
    1c7a:	20 91 5f 42 	lds	r18, 0x425F	; 0x80425f <__brkval>
    1c7e:	30 91 60 42 	lds	r19, 0x4260	; 0x804260 <__brkval+0x1>
    1c82:	23 2b       	or	r18, r19
    1c84:	41 f4       	brne	.+16     	; 0x1c96 <malloc+0xcc>
    1c86:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    1c8a:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    1c8e:	20 93 5f 42 	sts	0x425F, r18	; 0x80425f <__brkval>
    1c92:	30 93 60 42 	sts	0x4260, r19	; 0x804260 <__brkval+0x1>
    1c96:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    1c9a:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    1c9e:	21 15       	cp	r18, r1
    1ca0:	31 05       	cpc	r19, r1
    1ca2:	41 f4       	brne	.+16     	; 0x1cb4 <malloc+0xea>
    1ca4:	2d b7       	in	r18, 0x3d	; 61
    1ca6:	3e b7       	in	r19, 0x3e	; 62
    1ca8:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    1cac:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    1cb0:	24 1b       	sub	r18, r20
    1cb2:	35 0b       	sbc	r19, r21
    1cb4:	e0 91 5f 42 	lds	r30, 0x425F	; 0x80425f <__brkval>
    1cb8:	f0 91 60 42 	lds	r31, 0x4260	; 0x804260 <__brkval+0x1>
    1cbc:	e2 17       	cp	r30, r18
    1cbe:	f3 07       	cpc	r31, r19
    1cc0:	a0 f4       	brcc	.+40     	; 0x1cea <malloc+0x120>
    1cc2:	2e 1b       	sub	r18, r30
    1cc4:	3f 0b       	sbc	r19, r31
    1cc6:	28 17       	cp	r18, r24
    1cc8:	39 07       	cpc	r19, r25
    1cca:	78 f0       	brcs	.+30     	; 0x1cea <malloc+0x120>
    1ccc:	ac 01       	movw	r20, r24
    1cce:	4e 5f       	subi	r20, 0xFE	; 254
    1cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd2:	24 17       	cp	r18, r20
    1cd4:	35 07       	cpc	r19, r21
    1cd6:	48 f0       	brcs	.+18     	; 0x1cea <malloc+0x120>
    1cd8:	4e 0f       	add	r20, r30
    1cda:	5f 1f       	adc	r21, r31
    1cdc:	40 93 5f 42 	sts	0x425F, r20	; 0x80425f <__brkval>
    1ce0:	50 93 60 42 	sts	0x4260, r21	; 0x804260 <__brkval+0x1>
    1ce4:	81 93       	st	Z+, r24
    1ce6:	91 93       	st	Z+, r25
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <malloc+0x124>
    1cea:	e0 e0       	ldi	r30, 0x00	; 0
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	cf 01       	movw	r24, r30
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	1f 91       	pop	r17
    1cf6:	0f 91       	pop	r16
    1cf8:	08 95       	ret

00001cfa <free>:
    1cfa:	cf 93       	push	r28
    1cfc:	df 93       	push	r29
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <free+0xa>
    1d02:	81 c0       	rjmp	.+258    	; 0x1e06 <free+0x10c>
    1d04:	fc 01       	movw	r30, r24
    1d06:	32 97       	sbiw	r30, 0x02	; 2
    1d08:	12 82       	std	Z+2, r1	; 0x02
    1d0a:	13 82       	std	Z+3, r1	; 0x03
    1d0c:	a0 91 61 42 	lds	r26, 0x4261	; 0x804261 <__flp>
    1d10:	b0 91 62 42 	lds	r27, 0x4262	; 0x804262 <__flp+0x1>
    1d14:	10 97       	sbiw	r26, 0x00	; 0
    1d16:	81 f4       	brne	.+32     	; 0x1d38 <free+0x3e>
    1d18:	20 81       	ld	r18, Z
    1d1a:	31 81       	ldd	r19, Z+1	; 0x01
    1d1c:	82 0f       	add	r24, r18
    1d1e:	93 1f       	adc	r25, r19
    1d20:	20 91 5f 42 	lds	r18, 0x425F	; 0x80425f <__brkval>
    1d24:	30 91 60 42 	lds	r19, 0x4260	; 0x804260 <__brkval+0x1>
    1d28:	28 17       	cp	r18, r24
    1d2a:	39 07       	cpc	r19, r25
    1d2c:	51 f5       	brne	.+84     	; 0x1d82 <free+0x88>
    1d2e:	e0 93 5f 42 	sts	0x425F, r30	; 0x80425f <__brkval>
    1d32:	f0 93 60 42 	sts	0x4260, r31	; 0x804260 <__brkval+0x1>
    1d36:	67 c0       	rjmp	.+206    	; 0x1e06 <free+0x10c>
    1d38:	ed 01       	movw	r28, r26
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	ce 17       	cp	r28, r30
    1d40:	df 07       	cpc	r29, r31
    1d42:	40 f4       	brcc	.+16     	; 0x1d54 <free+0x5a>
    1d44:	4a 81       	ldd	r20, Y+2	; 0x02
    1d46:	5b 81       	ldd	r21, Y+3	; 0x03
    1d48:	9e 01       	movw	r18, r28
    1d4a:	41 15       	cp	r20, r1
    1d4c:	51 05       	cpc	r21, r1
    1d4e:	f1 f0       	breq	.+60     	; 0x1d8c <free+0x92>
    1d50:	ea 01       	movw	r28, r20
    1d52:	f5 cf       	rjmp	.-22     	; 0x1d3e <free+0x44>
    1d54:	c2 83       	std	Z+2, r28	; 0x02
    1d56:	d3 83       	std	Z+3, r29	; 0x03
    1d58:	40 81       	ld	r20, Z
    1d5a:	51 81       	ldd	r21, Z+1	; 0x01
    1d5c:	84 0f       	add	r24, r20
    1d5e:	95 1f       	adc	r25, r21
    1d60:	c8 17       	cp	r28, r24
    1d62:	d9 07       	cpc	r29, r25
    1d64:	59 f4       	brne	.+22     	; 0x1d7c <free+0x82>
    1d66:	88 81       	ld	r24, Y
    1d68:	99 81       	ldd	r25, Y+1	; 0x01
    1d6a:	84 0f       	add	r24, r20
    1d6c:	95 1f       	adc	r25, r21
    1d6e:	02 96       	adiw	r24, 0x02	; 2
    1d70:	80 83       	st	Z, r24
    1d72:	91 83       	std	Z+1, r25	; 0x01
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	9b 81       	ldd	r25, Y+3	; 0x03
    1d78:	82 83       	std	Z+2, r24	; 0x02
    1d7a:	93 83       	std	Z+3, r25	; 0x03
    1d7c:	21 15       	cp	r18, r1
    1d7e:	31 05       	cpc	r19, r1
    1d80:	29 f4       	brne	.+10     	; 0x1d8c <free+0x92>
    1d82:	e0 93 61 42 	sts	0x4261, r30	; 0x804261 <__flp>
    1d86:	f0 93 62 42 	sts	0x4262, r31	; 0x804262 <__flp+0x1>
    1d8a:	3d c0       	rjmp	.+122    	; 0x1e06 <free+0x10c>
    1d8c:	e9 01       	movw	r28, r18
    1d8e:	ea 83       	std	Y+2, r30	; 0x02
    1d90:	fb 83       	std	Y+3, r31	; 0x03
    1d92:	49 91       	ld	r20, Y+
    1d94:	59 91       	ld	r21, Y+
    1d96:	c4 0f       	add	r28, r20
    1d98:	d5 1f       	adc	r29, r21
    1d9a:	ec 17       	cp	r30, r28
    1d9c:	fd 07       	cpc	r31, r29
    1d9e:	61 f4       	brne	.+24     	; 0x1db8 <free+0xbe>
    1da0:	80 81       	ld	r24, Z
    1da2:	91 81       	ldd	r25, Z+1	; 0x01
    1da4:	84 0f       	add	r24, r20
    1da6:	95 1f       	adc	r25, r21
    1da8:	02 96       	adiw	r24, 0x02	; 2
    1daa:	e9 01       	movw	r28, r18
    1dac:	88 83       	st	Y, r24
    1dae:	99 83       	std	Y+1, r25	; 0x01
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	93 81       	ldd	r25, Z+3	; 0x03
    1db4:	8a 83       	std	Y+2, r24	; 0x02
    1db6:	9b 83       	std	Y+3, r25	; 0x03
    1db8:	e0 e0       	ldi	r30, 0x00	; 0
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	12 96       	adiw	r26, 0x02	; 2
    1dbe:	8d 91       	ld	r24, X+
    1dc0:	9c 91       	ld	r25, X
    1dc2:	13 97       	sbiw	r26, 0x03	; 3
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	19 f0       	breq	.+6      	; 0x1dce <free+0xd4>
    1dc8:	fd 01       	movw	r30, r26
    1dca:	dc 01       	movw	r26, r24
    1dcc:	f7 cf       	rjmp	.-18     	; 0x1dbc <free+0xc2>
    1dce:	8d 91       	ld	r24, X+
    1dd0:	9c 91       	ld	r25, X
    1dd2:	11 97       	sbiw	r26, 0x01	; 1
    1dd4:	9d 01       	movw	r18, r26
    1dd6:	2e 5f       	subi	r18, 0xFE	; 254
    1dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dda:	82 0f       	add	r24, r18
    1ddc:	93 1f       	adc	r25, r19
    1dde:	20 91 5f 42 	lds	r18, 0x425F	; 0x80425f <__brkval>
    1de2:	30 91 60 42 	lds	r19, 0x4260	; 0x804260 <__brkval+0x1>
    1de6:	28 17       	cp	r18, r24
    1de8:	39 07       	cpc	r19, r25
    1dea:	69 f4       	brne	.+26     	; 0x1e06 <free+0x10c>
    1dec:	30 97       	sbiw	r30, 0x00	; 0
    1dee:	29 f4       	brne	.+10     	; 0x1dfa <free+0x100>
    1df0:	10 92 61 42 	sts	0x4261, r1	; 0x804261 <__flp>
    1df4:	10 92 62 42 	sts	0x4262, r1	; 0x804262 <__flp+0x1>
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <free+0x104>
    1dfa:	12 82       	std	Z+2, r1	; 0x02
    1dfc:	13 82       	std	Z+3, r1	; 0x03
    1dfe:	a0 93 5f 42 	sts	0x425F, r26	; 0x80425f <__brkval>
    1e02:	b0 93 60 42 	sts	0x4260, r27	; 0x804260 <__brkval+0x1>
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	08 95       	ret

00001e0c <toupper>:
    1e0c:	91 11       	cpse	r25, r1
    1e0e:	08 95       	ret
    1e10:	81 56       	subi	r24, 0x61	; 97
    1e12:	8a 51       	subi	r24, 0x1A	; 26
    1e14:	08 f4       	brcc	.+2      	; 0x1e18 <toupper+0xc>
    1e16:	80 52       	subi	r24, 0x20	; 32
    1e18:	85 58       	subi	r24, 0x85	; 133
    1e1a:	08 95       	ret

00001e1c <sprintf>:
    1e1c:	0f 93       	push	r16
    1e1e:	1f 93       	push	r17
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	2e 97       	sbiw	r28, 0x0e	; 14
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0d 89       	ldd	r16, Y+21	; 0x15
    1e30:	1e 89       	ldd	r17, Y+22	; 0x16
    1e32:	86 e0       	ldi	r24, 0x06	; 6
    1e34:	8c 83       	std	Y+4, r24	; 0x04
    1e36:	09 83       	std	Y+1, r16	; 0x01
    1e38:	1a 83       	std	Y+2, r17	; 0x02
    1e3a:	8f ef       	ldi	r24, 0xFF	; 255
    1e3c:	9f e7       	ldi	r25, 0x7F	; 127
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
    1e40:	9e 83       	std	Y+6, r25	; 0x06
    1e42:	ae 01       	movw	r20, r28
    1e44:	47 5e       	subi	r20, 0xE7	; 231
    1e46:	5f 4f       	sbci	r21, 0xFF	; 255
    1e48:	6f 89       	ldd	r22, Y+23	; 0x17
    1e4a:	78 8d       	ldd	r23, Y+24	; 0x18
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	01 96       	adiw	r24, 0x01	; 1
    1e50:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <vfprintf>
    1e54:	ef 81       	ldd	r30, Y+7	; 0x07
    1e56:	f8 85       	ldd	r31, Y+8	; 0x08
    1e58:	e0 0f       	add	r30, r16
    1e5a:	f1 1f       	adc	r31, r17
    1e5c:	10 82       	st	Z, r1
    1e5e:	2e 96       	adiw	r28, 0x0e	; 14
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	1f 91       	pop	r17
    1e6a:	0f 91       	pop	r16
    1e6c:	08 95       	ret

00001e6e <vfprintf>:
    1e6e:	2f 92       	push	r2
    1e70:	3f 92       	push	r3
    1e72:	4f 92       	push	r4
    1e74:	5f 92       	push	r5
    1e76:	6f 92       	push	r6
    1e78:	7f 92       	push	r7
    1e7a:	8f 92       	push	r8
    1e7c:	9f 92       	push	r9
    1e7e:	af 92       	push	r10
    1e80:	bf 92       	push	r11
    1e82:	cf 92       	push	r12
    1e84:	df 92       	push	r13
    1e86:	ef 92       	push	r14
    1e88:	ff 92       	push	r15
    1e8a:	0f 93       	push	r16
    1e8c:	1f 93       	push	r17
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	2b 97       	sbiw	r28, 0x0b	; 11
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	6c 01       	movw	r12, r24
    1e9e:	7b 01       	movw	r14, r22
    1ea0:	8a 01       	movw	r16, r20
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	16 82       	std	Z+6, r1	; 0x06
    1ea6:	17 82       	std	Z+7, r1	; 0x07
    1ea8:	83 81       	ldd	r24, Z+3	; 0x03
    1eaa:	81 ff       	sbrs	r24, 1
    1eac:	cc c1       	rjmp	.+920    	; 0x2246 <vfprintf+0x3d8>
    1eae:	ce 01       	movw	r24, r28
    1eb0:	01 96       	adiw	r24, 0x01	; 1
    1eb2:	3c 01       	movw	r6, r24
    1eb4:	f6 01       	movw	r30, r12
    1eb6:	93 81       	ldd	r25, Z+3	; 0x03
    1eb8:	f7 01       	movw	r30, r14
    1eba:	93 fd       	sbrc	r25, 3
    1ebc:	85 91       	lpm	r24, Z+
    1ebe:	93 ff       	sbrs	r25, 3
    1ec0:	81 91       	ld	r24, Z+
    1ec2:	7f 01       	movw	r14, r30
    1ec4:	88 23       	and	r24, r24
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <vfprintf+0x5c>
    1ec8:	ba c1       	rjmp	.+884    	; 0x223e <vfprintf+0x3d0>
    1eca:	85 32       	cpi	r24, 0x25	; 37
    1ecc:	39 f4       	brne	.+14     	; 0x1edc <vfprintf+0x6e>
    1ece:	93 fd       	sbrc	r25, 3
    1ed0:	85 91       	lpm	r24, Z+
    1ed2:	93 ff       	sbrs	r25, 3
    1ed4:	81 91       	ld	r24, Z+
    1ed6:	7f 01       	movw	r14, r30
    1ed8:	85 32       	cpi	r24, 0x25	; 37
    1eda:	29 f4       	brne	.+10     	; 0x1ee6 <vfprintf+0x78>
    1edc:	b6 01       	movw	r22, r12
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    1ee4:	e7 cf       	rjmp	.-50     	; 0x1eb4 <vfprintf+0x46>
    1ee6:	91 2c       	mov	r9, r1
    1ee8:	21 2c       	mov	r2, r1
    1eea:	31 2c       	mov	r3, r1
    1eec:	ff e1       	ldi	r31, 0x1F	; 31
    1eee:	f3 15       	cp	r31, r3
    1ef0:	d8 f0       	brcs	.+54     	; 0x1f28 <vfprintf+0xba>
    1ef2:	8b 32       	cpi	r24, 0x2B	; 43
    1ef4:	79 f0       	breq	.+30     	; 0x1f14 <vfprintf+0xa6>
    1ef6:	38 f4       	brcc	.+14     	; 0x1f06 <vfprintf+0x98>
    1ef8:	80 32       	cpi	r24, 0x20	; 32
    1efa:	79 f0       	breq	.+30     	; 0x1f1a <vfprintf+0xac>
    1efc:	83 32       	cpi	r24, 0x23	; 35
    1efe:	a1 f4       	brne	.+40     	; 0x1f28 <vfprintf+0xba>
    1f00:	23 2d       	mov	r18, r3
    1f02:	20 61       	ori	r18, 0x10	; 16
    1f04:	1d c0       	rjmp	.+58     	; 0x1f40 <vfprintf+0xd2>
    1f06:	8d 32       	cpi	r24, 0x2D	; 45
    1f08:	61 f0       	breq	.+24     	; 0x1f22 <vfprintf+0xb4>
    1f0a:	80 33       	cpi	r24, 0x30	; 48
    1f0c:	69 f4       	brne	.+26     	; 0x1f28 <vfprintf+0xba>
    1f0e:	23 2d       	mov	r18, r3
    1f10:	21 60       	ori	r18, 0x01	; 1
    1f12:	16 c0       	rjmp	.+44     	; 0x1f40 <vfprintf+0xd2>
    1f14:	83 2d       	mov	r24, r3
    1f16:	82 60       	ori	r24, 0x02	; 2
    1f18:	38 2e       	mov	r3, r24
    1f1a:	e3 2d       	mov	r30, r3
    1f1c:	e4 60       	ori	r30, 0x04	; 4
    1f1e:	3e 2e       	mov	r3, r30
    1f20:	2a c0       	rjmp	.+84     	; 0x1f76 <vfprintf+0x108>
    1f22:	f3 2d       	mov	r31, r3
    1f24:	f8 60       	ori	r31, 0x08	; 8
    1f26:	1d c0       	rjmp	.+58     	; 0x1f62 <vfprintf+0xf4>
    1f28:	37 fc       	sbrc	r3, 7
    1f2a:	2d c0       	rjmp	.+90     	; 0x1f86 <vfprintf+0x118>
    1f2c:	20 ed       	ldi	r18, 0xD0	; 208
    1f2e:	28 0f       	add	r18, r24
    1f30:	2a 30       	cpi	r18, 0x0A	; 10
    1f32:	40 f0       	brcs	.+16     	; 0x1f44 <vfprintf+0xd6>
    1f34:	8e 32       	cpi	r24, 0x2E	; 46
    1f36:	b9 f4       	brne	.+46     	; 0x1f66 <vfprintf+0xf8>
    1f38:	36 fc       	sbrc	r3, 6
    1f3a:	81 c1       	rjmp	.+770    	; 0x223e <vfprintf+0x3d0>
    1f3c:	23 2d       	mov	r18, r3
    1f3e:	20 64       	ori	r18, 0x40	; 64
    1f40:	32 2e       	mov	r3, r18
    1f42:	19 c0       	rjmp	.+50     	; 0x1f76 <vfprintf+0x108>
    1f44:	36 fe       	sbrs	r3, 6
    1f46:	06 c0       	rjmp	.+12     	; 0x1f54 <vfprintf+0xe6>
    1f48:	8a e0       	ldi	r24, 0x0A	; 10
    1f4a:	98 9e       	mul	r9, r24
    1f4c:	20 0d       	add	r18, r0
    1f4e:	11 24       	eor	r1, r1
    1f50:	92 2e       	mov	r9, r18
    1f52:	11 c0       	rjmp	.+34     	; 0x1f76 <vfprintf+0x108>
    1f54:	ea e0       	ldi	r30, 0x0A	; 10
    1f56:	2e 9e       	mul	r2, r30
    1f58:	20 0d       	add	r18, r0
    1f5a:	11 24       	eor	r1, r1
    1f5c:	22 2e       	mov	r2, r18
    1f5e:	f3 2d       	mov	r31, r3
    1f60:	f0 62       	ori	r31, 0x20	; 32
    1f62:	3f 2e       	mov	r3, r31
    1f64:	08 c0       	rjmp	.+16     	; 0x1f76 <vfprintf+0x108>
    1f66:	8c 36       	cpi	r24, 0x6C	; 108
    1f68:	21 f4       	brne	.+8      	; 0x1f72 <vfprintf+0x104>
    1f6a:	83 2d       	mov	r24, r3
    1f6c:	80 68       	ori	r24, 0x80	; 128
    1f6e:	38 2e       	mov	r3, r24
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <vfprintf+0x108>
    1f72:	88 36       	cpi	r24, 0x68	; 104
    1f74:	41 f4       	brne	.+16     	; 0x1f86 <vfprintf+0x118>
    1f76:	f7 01       	movw	r30, r14
    1f78:	93 fd       	sbrc	r25, 3
    1f7a:	85 91       	lpm	r24, Z+
    1f7c:	93 ff       	sbrs	r25, 3
    1f7e:	81 91       	ld	r24, Z+
    1f80:	7f 01       	movw	r14, r30
    1f82:	81 11       	cpse	r24, r1
    1f84:	b3 cf       	rjmp	.-154    	; 0x1eec <vfprintf+0x7e>
    1f86:	98 2f       	mov	r25, r24
    1f88:	9f 7d       	andi	r25, 0xDF	; 223
    1f8a:	95 54       	subi	r25, 0x45	; 69
    1f8c:	93 30       	cpi	r25, 0x03	; 3
    1f8e:	28 f4       	brcc	.+10     	; 0x1f9a <vfprintf+0x12c>
    1f90:	0c 5f       	subi	r16, 0xFC	; 252
    1f92:	1f 4f       	sbci	r17, 0xFF	; 255
    1f94:	9f e3       	ldi	r25, 0x3F	; 63
    1f96:	99 83       	std	Y+1, r25	; 0x01
    1f98:	0d c0       	rjmp	.+26     	; 0x1fb4 <vfprintf+0x146>
    1f9a:	83 36       	cpi	r24, 0x63	; 99
    1f9c:	31 f0       	breq	.+12     	; 0x1faa <vfprintf+0x13c>
    1f9e:	83 37       	cpi	r24, 0x73	; 115
    1fa0:	71 f0       	breq	.+28     	; 0x1fbe <vfprintf+0x150>
    1fa2:	83 35       	cpi	r24, 0x53	; 83
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <vfprintf+0x13a>
    1fa6:	59 c0       	rjmp	.+178    	; 0x205a <vfprintf+0x1ec>
    1fa8:	21 c0       	rjmp	.+66     	; 0x1fec <vfprintf+0x17e>
    1faa:	f8 01       	movw	r30, r16
    1fac:	80 81       	ld	r24, Z
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	0e 5f       	subi	r16, 0xFE	; 254
    1fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb4:	88 24       	eor	r8, r8
    1fb6:	83 94       	inc	r8
    1fb8:	91 2c       	mov	r9, r1
    1fba:	53 01       	movw	r10, r6
    1fbc:	13 c0       	rjmp	.+38     	; 0x1fe4 <vfprintf+0x176>
    1fbe:	28 01       	movw	r4, r16
    1fc0:	f2 e0       	ldi	r31, 0x02	; 2
    1fc2:	4f 0e       	add	r4, r31
    1fc4:	51 1c       	adc	r5, r1
    1fc6:	f8 01       	movw	r30, r16
    1fc8:	a0 80       	ld	r10, Z
    1fca:	b1 80       	ldd	r11, Z+1	; 0x01
    1fcc:	36 fe       	sbrs	r3, 6
    1fce:	03 c0       	rjmp	.+6      	; 0x1fd6 <vfprintf+0x168>
    1fd0:	69 2d       	mov	r22, r9
    1fd2:	70 e0       	ldi	r23, 0x00	; 0
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <vfprintf+0x16c>
    1fd6:	6f ef       	ldi	r22, 0xFF	; 255
    1fd8:	7f ef       	ldi	r23, 0xFF	; 255
    1fda:	c5 01       	movw	r24, r10
    1fdc:	0e 94 46 11 	call	0x228c	; 0x228c <strnlen>
    1fe0:	4c 01       	movw	r8, r24
    1fe2:	82 01       	movw	r16, r4
    1fe4:	f3 2d       	mov	r31, r3
    1fe6:	ff 77       	andi	r31, 0x7F	; 127
    1fe8:	3f 2e       	mov	r3, r31
    1fea:	16 c0       	rjmp	.+44     	; 0x2018 <vfprintf+0x1aa>
    1fec:	28 01       	movw	r4, r16
    1fee:	22 e0       	ldi	r18, 0x02	; 2
    1ff0:	42 0e       	add	r4, r18
    1ff2:	51 1c       	adc	r5, r1
    1ff4:	f8 01       	movw	r30, r16
    1ff6:	a0 80       	ld	r10, Z
    1ff8:	b1 80       	ldd	r11, Z+1	; 0x01
    1ffa:	36 fe       	sbrs	r3, 6
    1ffc:	03 c0       	rjmp	.+6      	; 0x2004 <vfprintf+0x196>
    1ffe:	69 2d       	mov	r22, r9
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <vfprintf+0x19a>
    2004:	6f ef       	ldi	r22, 0xFF	; 255
    2006:	7f ef       	ldi	r23, 0xFF	; 255
    2008:	c5 01       	movw	r24, r10
    200a:	0e 94 3b 11 	call	0x2276	; 0x2276 <strnlen_P>
    200e:	4c 01       	movw	r8, r24
    2010:	f3 2d       	mov	r31, r3
    2012:	f0 68       	ori	r31, 0x80	; 128
    2014:	3f 2e       	mov	r3, r31
    2016:	82 01       	movw	r16, r4
    2018:	33 fc       	sbrc	r3, 3
    201a:	1b c0       	rjmp	.+54     	; 0x2052 <vfprintf+0x1e4>
    201c:	82 2d       	mov	r24, r2
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	88 16       	cp	r8, r24
    2022:	99 06       	cpc	r9, r25
    2024:	b0 f4       	brcc	.+44     	; 0x2052 <vfprintf+0x1e4>
    2026:	b6 01       	movw	r22, r12
    2028:	80 e2       	ldi	r24, 0x20	; 32
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    2030:	2a 94       	dec	r2
    2032:	f4 cf       	rjmp	.-24     	; 0x201c <vfprintf+0x1ae>
    2034:	f5 01       	movw	r30, r10
    2036:	37 fc       	sbrc	r3, 7
    2038:	85 91       	lpm	r24, Z+
    203a:	37 fe       	sbrs	r3, 7
    203c:	81 91       	ld	r24, Z+
    203e:	5f 01       	movw	r10, r30
    2040:	b6 01       	movw	r22, r12
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    2048:	21 10       	cpse	r2, r1
    204a:	2a 94       	dec	r2
    204c:	21 e0       	ldi	r18, 0x01	; 1
    204e:	82 1a       	sub	r8, r18
    2050:	91 08       	sbc	r9, r1
    2052:	81 14       	cp	r8, r1
    2054:	91 04       	cpc	r9, r1
    2056:	71 f7       	brne	.-36     	; 0x2034 <vfprintf+0x1c6>
    2058:	e8 c0       	rjmp	.+464    	; 0x222a <vfprintf+0x3bc>
    205a:	84 36       	cpi	r24, 0x64	; 100
    205c:	11 f0       	breq	.+4      	; 0x2062 <vfprintf+0x1f4>
    205e:	89 36       	cpi	r24, 0x69	; 105
    2060:	41 f5       	brne	.+80     	; 0x20b2 <vfprintf+0x244>
    2062:	f8 01       	movw	r30, r16
    2064:	37 fe       	sbrs	r3, 7
    2066:	07 c0       	rjmp	.+14     	; 0x2076 <vfprintf+0x208>
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	0c 5f       	subi	r16, 0xFC	; 252
    2072:	1f 4f       	sbci	r17, 0xFF	; 255
    2074:	08 c0       	rjmp	.+16     	; 0x2086 <vfprintf+0x218>
    2076:	60 81       	ld	r22, Z
    2078:	71 81       	ldd	r23, Z+1	; 0x01
    207a:	07 2e       	mov	r0, r23
    207c:	00 0c       	add	r0, r0
    207e:	88 0b       	sbc	r24, r24
    2080:	99 0b       	sbc	r25, r25
    2082:	0e 5f       	subi	r16, 0xFE	; 254
    2084:	1f 4f       	sbci	r17, 0xFF	; 255
    2086:	f3 2d       	mov	r31, r3
    2088:	ff 76       	andi	r31, 0x6F	; 111
    208a:	3f 2e       	mov	r3, r31
    208c:	97 ff       	sbrs	r25, 7
    208e:	09 c0       	rjmp	.+18     	; 0x20a2 <vfprintf+0x234>
    2090:	90 95       	com	r25
    2092:	80 95       	com	r24
    2094:	70 95       	com	r23
    2096:	61 95       	neg	r22
    2098:	7f 4f       	sbci	r23, 0xFF	; 255
    209a:	8f 4f       	sbci	r24, 0xFF	; 255
    209c:	9f 4f       	sbci	r25, 0xFF	; 255
    209e:	f0 68       	ori	r31, 0x80	; 128
    20a0:	3f 2e       	mov	r3, r31
    20a2:	2a e0       	ldi	r18, 0x0A	; 10
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	a3 01       	movw	r20, r6
    20a8:	0e 94 8d 11 	call	0x231a	; 0x231a <__ultoa_invert>
    20ac:	88 2e       	mov	r8, r24
    20ae:	86 18       	sub	r8, r6
    20b0:	45 c0       	rjmp	.+138    	; 0x213c <vfprintf+0x2ce>
    20b2:	85 37       	cpi	r24, 0x75	; 117
    20b4:	31 f4       	brne	.+12     	; 0x20c2 <vfprintf+0x254>
    20b6:	23 2d       	mov	r18, r3
    20b8:	2f 7e       	andi	r18, 0xEF	; 239
    20ba:	b2 2e       	mov	r11, r18
    20bc:	2a e0       	ldi	r18, 0x0A	; 10
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	25 c0       	rjmp	.+74     	; 0x210c <vfprintf+0x29e>
    20c2:	93 2d       	mov	r25, r3
    20c4:	99 7f       	andi	r25, 0xF9	; 249
    20c6:	b9 2e       	mov	r11, r25
    20c8:	8f 36       	cpi	r24, 0x6F	; 111
    20ca:	c1 f0       	breq	.+48     	; 0x20fc <vfprintf+0x28e>
    20cc:	18 f4       	brcc	.+6      	; 0x20d4 <vfprintf+0x266>
    20ce:	88 35       	cpi	r24, 0x58	; 88
    20d0:	79 f0       	breq	.+30     	; 0x20f0 <vfprintf+0x282>
    20d2:	b5 c0       	rjmp	.+362    	; 0x223e <vfprintf+0x3d0>
    20d4:	80 37       	cpi	r24, 0x70	; 112
    20d6:	19 f0       	breq	.+6      	; 0x20de <vfprintf+0x270>
    20d8:	88 37       	cpi	r24, 0x78	; 120
    20da:	21 f0       	breq	.+8      	; 0x20e4 <vfprintf+0x276>
    20dc:	b0 c0       	rjmp	.+352    	; 0x223e <vfprintf+0x3d0>
    20de:	e9 2f       	mov	r30, r25
    20e0:	e0 61       	ori	r30, 0x10	; 16
    20e2:	be 2e       	mov	r11, r30
    20e4:	b4 fe       	sbrs	r11, 4
    20e6:	0d c0       	rjmp	.+26     	; 0x2102 <vfprintf+0x294>
    20e8:	fb 2d       	mov	r31, r11
    20ea:	f4 60       	ori	r31, 0x04	; 4
    20ec:	bf 2e       	mov	r11, r31
    20ee:	09 c0       	rjmp	.+18     	; 0x2102 <vfprintf+0x294>
    20f0:	34 fe       	sbrs	r3, 4
    20f2:	0a c0       	rjmp	.+20     	; 0x2108 <vfprintf+0x29a>
    20f4:	29 2f       	mov	r18, r25
    20f6:	26 60       	ori	r18, 0x06	; 6
    20f8:	b2 2e       	mov	r11, r18
    20fa:	06 c0       	rjmp	.+12     	; 0x2108 <vfprintf+0x29a>
    20fc:	28 e0       	ldi	r18, 0x08	; 8
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	05 c0       	rjmp	.+10     	; 0x210c <vfprintf+0x29e>
    2102:	20 e1       	ldi	r18, 0x10	; 16
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	02 c0       	rjmp	.+4      	; 0x210c <vfprintf+0x29e>
    2108:	20 e1       	ldi	r18, 0x10	; 16
    210a:	32 e0       	ldi	r19, 0x02	; 2
    210c:	f8 01       	movw	r30, r16
    210e:	b7 fe       	sbrs	r11, 7
    2110:	07 c0       	rjmp	.+14     	; 0x2120 <vfprintf+0x2b2>
    2112:	60 81       	ld	r22, Z
    2114:	71 81       	ldd	r23, Z+1	; 0x01
    2116:	82 81       	ldd	r24, Z+2	; 0x02
    2118:	93 81       	ldd	r25, Z+3	; 0x03
    211a:	0c 5f       	subi	r16, 0xFC	; 252
    211c:	1f 4f       	sbci	r17, 0xFF	; 255
    211e:	06 c0       	rjmp	.+12     	; 0x212c <vfprintf+0x2be>
    2120:	60 81       	ld	r22, Z
    2122:	71 81       	ldd	r23, Z+1	; 0x01
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e 5f       	subi	r16, 0xFE	; 254
    212a:	1f 4f       	sbci	r17, 0xFF	; 255
    212c:	a3 01       	movw	r20, r6
    212e:	0e 94 8d 11 	call	0x231a	; 0x231a <__ultoa_invert>
    2132:	88 2e       	mov	r8, r24
    2134:	86 18       	sub	r8, r6
    2136:	fb 2d       	mov	r31, r11
    2138:	ff 77       	andi	r31, 0x7F	; 127
    213a:	3f 2e       	mov	r3, r31
    213c:	36 fe       	sbrs	r3, 6
    213e:	0d c0       	rjmp	.+26     	; 0x215a <vfprintf+0x2ec>
    2140:	23 2d       	mov	r18, r3
    2142:	2e 7f       	andi	r18, 0xFE	; 254
    2144:	a2 2e       	mov	r10, r18
    2146:	89 14       	cp	r8, r9
    2148:	58 f4       	brcc	.+22     	; 0x2160 <vfprintf+0x2f2>
    214a:	34 fe       	sbrs	r3, 4
    214c:	0b c0       	rjmp	.+22     	; 0x2164 <vfprintf+0x2f6>
    214e:	32 fc       	sbrc	r3, 2
    2150:	09 c0       	rjmp	.+18     	; 0x2164 <vfprintf+0x2f6>
    2152:	83 2d       	mov	r24, r3
    2154:	8e 7e       	andi	r24, 0xEE	; 238
    2156:	a8 2e       	mov	r10, r24
    2158:	05 c0       	rjmp	.+10     	; 0x2164 <vfprintf+0x2f6>
    215a:	b8 2c       	mov	r11, r8
    215c:	a3 2c       	mov	r10, r3
    215e:	03 c0       	rjmp	.+6      	; 0x2166 <vfprintf+0x2f8>
    2160:	b8 2c       	mov	r11, r8
    2162:	01 c0       	rjmp	.+2      	; 0x2166 <vfprintf+0x2f8>
    2164:	b9 2c       	mov	r11, r9
    2166:	a4 fe       	sbrs	r10, 4
    2168:	0f c0       	rjmp	.+30     	; 0x2188 <vfprintf+0x31a>
    216a:	fe 01       	movw	r30, r28
    216c:	e8 0d       	add	r30, r8
    216e:	f1 1d       	adc	r31, r1
    2170:	80 81       	ld	r24, Z
    2172:	80 33       	cpi	r24, 0x30	; 48
    2174:	21 f4       	brne	.+8      	; 0x217e <vfprintf+0x310>
    2176:	9a 2d       	mov	r25, r10
    2178:	99 7e       	andi	r25, 0xE9	; 233
    217a:	a9 2e       	mov	r10, r25
    217c:	09 c0       	rjmp	.+18     	; 0x2190 <vfprintf+0x322>
    217e:	a2 fe       	sbrs	r10, 2
    2180:	06 c0       	rjmp	.+12     	; 0x218e <vfprintf+0x320>
    2182:	b3 94       	inc	r11
    2184:	b3 94       	inc	r11
    2186:	04 c0       	rjmp	.+8      	; 0x2190 <vfprintf+0x322>
    2188:	8a 2d       	mov	r24, r10
    218a:	86 78       	andi	r24, 0x86	; 134
    218c:	09 f0       	breq	.+2      	; 0x2190 <vfprintf+0x322>
    218e:	b3 94       	inc	r11
    2190:	a3 fc       	sbrc	r10, 3
    2192:	11 c0       	rjmp	.+34     	; 0x21b6 <vfprintf+0x348>
    2194:	a0 fe       	sbrs	r10, 0
    2196:	06 c0       	rjmp	.+12     	; 0x21a4 <vfprintf+0x336>
    2198:	b2 14       	cp	r11, r2
    219a:	88 f4       	brcc	.+34     	; 0x21be <vfprintf+0x350>
    219c:	28 0c       	add	r2, r8
    219e:	92 2c       	mov	r9, r2
    21a0:	9b 18       	sub	r9, r11
    21a2:	0e c0       	rjmp	.+28     	; 0x21c0 <vfprintf+0x352>
    21a4:	b2 14       	cp	r11, r2
    21a6:	60 f4       	brcc	.+24     	; 0x21c0 <vfprintf+0x352>
    21a8:	b6 01       	movw	r22, r12
    21aa:	80 e2       	ldi	r24, 0x20	; 32
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    21b2:	b3 94       	inc	r11
    21b4:	f7 cf       	rjmp	.-18     	; 0x21a4 <vfprintf+0x336>
    21b6:	b2 14       	cp	r11, r2
    21b8:	18 f4       	brcc	.+6      	; 0x21c0 <vfprintf+0x352>
    21ba:	2b 18       	sub	r2, r11
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <vfprintf+0x354>
    21be:	98 2c       	mov	r9, r8
    21c0:	21 2c       	mov	r2, r1
    21c2:	a4 fe       	sbrs	r10, 4
    21c4:	10 c0       	rjmp	.+32     	; 0x21e6 <vfprintf+0x378>
    21c6:	b6 01       	movw	r22, r12
    21c8:	80 e3       	ldi	r24, 0x30	; 48
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    21d0:	a2 fe       	sbrs	r10, 2
    21d2:	17 c0       	rjmp	.+46     	; 0x2202 <vfprintf+0x394>
    21d4:	a1 fc       	sbrc	r10, 1
    21d6:	03 c0       	rjmp	.+6      	; 0x21de <vfprintf+0x370>
    21d8:	88 e7       	ldi	r24, 0x78	; 120
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	02 c0       	rjmp	.+4      	; 0x21e2 <vfprintf+0x374>
    21de:	88 e5       	ldi	r24, 0x58	; 88
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	b6 01       	movw	r22, r12
    21e4:	0c c0       	rjmp	.+24     	; 0x21fe <vfprintf+0x390>
    21e6:	8a 2d       	mov	r24, r10
    21e8:	86 78       	andi	r24, 0x86	; 134
    21ea:	59 f0       	breq	.+22     	; 0x2202 <vfprintf+0x394>
    21ec:	a1 fe       	sbrs	r10, 1
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <vfprintf+0x386>
    21f0:	8b e2       	ldi	r24, 0x2B	; 43
    21f2:	01 c0       	rjmp	.+2      	; 0x21f6 <vfprintf+0x388>
    21f4:	80 e2       	ldi	r24, 0x20	; 32
    21f6:	a7 fc       	sbrc	r10, 7
    21f8:	8d e2       	ldi	r24, 0x2D	; 45
    21fa:	b6 01       	movw	r22, r12
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    2202:	89 14       	cp	r8, r9
    2204:	38 f4       	brcc	.+14     	; 0x2214 <vfprintf+0x3a6>
    2206:	b6 01       	movw	r22, r12
    2208:	80 e3       	ldi	r24, 0x30	; 48
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    2210:	9a 94       	dec	r9
    2212:	f7 cf       	rjmp	.-18     	; 0x2202 <vfprintf+0x394>
    2214:	8a 94       	dec	r8
    2216:	f3 01       	movw	r30, r6
    2218:	e8 0d       	add	r30, r8
    221a:	f1 1d       	adc	r31, r1
    221c:	80 81       	ld	r24, Z
    221e:	b6 01       	movw	r22, r12
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    2226:	81 10       	cpse	r8, r1
    2228:	f5 cf       	rjmp	.-22     	; 0x2214 <vfprintf+0x3a6>
    222a:	22 20       	and	r2, r2
    222c:	09 f4       	brne	.+2      	; 0x2230 <vfprintf+0x3c2>
    222e:	42 ce       	rjmp	.-892    	; 0x1eb4 <vfprintf+0x46>
    2230:	b6 01       	movw	r22, r12
    2232:	80 e2       	ldi	r24, 0x20	; 32
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	0e 94 51 11 	call	0x22a2	; 0x22a2 <fputc>
    223a:	2a 94       	dec	r2
    223c:	f6 cf       	rjmp	.-20     	; 0x222a <vfprintf+0x3bc>
    223e:	f6 01       	movw	r30, r12
    2240:	86 81       	ldd	r24, Z+6	; 0x06
    2242:	97 81       	ldd	r25, Z+7	; 0x07
    2244:	02 c0       	rjmp	.+4      	; 0x224a <vfprintf+0x3dc>
    2246:	8f ef       	ldi	r24, 0xFF	; 255
    2248:	9f ef       	ldi	r25, 0xFF	; 255
    224a:	2b 96       	adiw	r28, 0x0b	; 11
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	df 91       	pop	r29
    2252:	cf 91       	pop	r28
    2254:	1f 91       	pop	r17
    2256:	0f 91       	pop	r16
    2258:	ff 90       	pop	r15
    225a:	ef 90       	pop	r14
    225c:	df 90       	pop	r13
    225e:	cf 90       	pop	r12
    2260:	bf 90       	pop	r11
    2262:	af 90       	pop	r10
    2264:	9f 90       	pop	r9
    2266:	8f 90       	pop	r8
    2268:	7f 90       	pop	r7
    226a:	6f 90       	pop	r6
    226c:	5f 90       	pop	r5
    226e:	4f 90       	pop	r4
    2270:	3f 90       	pop	r3
    2272:	2f 90       	pop	r2
    2274:	08 95       	ret

00002276 <strnlen_P>:
    2276:	fc 01       	movw	r30, r24
    2278:	05 90       	lpm	r0, Z+
    227a:	61 50       	subi	r22, 0x01	; 1
    227c:	70 40       	sbci	r23, 0x00	; 0
    227e:	01 10       	cpse	r0, r1
    2280:	d8 f7       	brcc	.-10     	; 0x2278 <strnlen_P+0x2>
    2282:	80 95       	com	r24
    2284:	90 95       	com	r25
    2286:	8e 0f       	add	r24, r30
    2288:	9f 1f       	adc	r25, r31
    228a:	08 95       	ret

0000228c <strnlen>:
    228c:	fc 01       	movw	r30, r24
    228e:	61 50       	subi	r22, 0x01	; 1
    2290:	70 40       	sbci	r23, 0x00	; 0
    2292:	01 90       	ld	r0, Z+
    2294:	01 10       	cpse	r0, r1
    2296:	d8 f7       	brcc	.-10     	; 0x228e <strnlen+0x2>
    2298:	80 95       	com	r24
    229a:	90 95       	com	r25
    229c:	8e 0f       	add	r24, r30
    229e:	9f 1f       	adc	r25, r31
    22a0:	08 95       	ret

000022a2 <fputc>:
    22a2:	0f 93       	push	r16
    22a4:	1f 93       	push	r17
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	fb 01       	movw	r30, r22
    22ac:	23 81       	ldd	r18, Z+3	; 0x03
    22ae:	21 fd       	sbrc	r18, 1
    22b0:	03 c0       	rjmp	.+6      	; 0x22b8 <fputc+0x16>
    22b2:	8f ef       	ldi	r24, 0xFF	; 255
    22b4:	9f ef       	ldi	r25, 0xFF	; 255
    22b6:	2c c0       	rjmp	.+88     	; 0x2310 <fputc+0x6e>
    22b8:	22 ff       	sbrs	r18, 2
    22ba:	16 c0       	rjmp	.+44     	; 0x22e8 <fputc+0x46>
    22bc:	46 81       	ldd	r20, Z+6	; 0x06
    22be:	57 81       	ldd	r21, Z+7	; 0x07
    22c0:	24 81       	ldd	r18, Z+4	; 0x04
    22c2:	35 81       	ldd	r19, Z+5	; 0x05
    22c4:	42 17       	cp	r20, r18
    22c6:	53 07       	cpc	r21, r19
    22c8:	44 f4       	brge	.+16     	; 0x22da <fputc+0x38>
    22ca:	a0 81       	ld	r26, Z
    22cc:	b1 81       	ldd	r27, Z+1	; 0x01
    22ce:	9d 01       	movw	r18, r26
    22d0:	2f 5f       	subi	r18, 0xFF	; 255
    22d2:	3f 4f       	sbci	r19, 0xFF	; 255
    22d4:	20 83       	st	Z, r18
    22d6:	31 83       	std	Z+1, r19	; 0x01
    22d8:	8c 93       	st	X, r24
    22da:	26 81       	ldd	r18, Z+6	; 0x06
    22dc:	37 81       	ldd	r19, Z+7	; 0x07
    22de:	2f 5f       	subi	r18, 0xFF	; 255
    22e0:	3f 4f       	sbci	r19, 0xFF	; 255
    22e2:	26 83       	std	Z+6, r18	; 0x06
    22e4:	37 83       	std	Z+7, r19	; 0x07
    22e6:	14 c0       	rjmp	.+40     	; 0x2310 <fputc+0x6e>
    22e8:	8b 01       	movw	r16, r22
    22ea:	ec 01       	movw	r28, r24
    22ec:	fb 01       	movw	r30, r22
    22ee:	00 84       	ldd	r0, Z+8	; 0x08
    22f0:	f1 85       	ldd	r31, Z+9	; 0x09
    22f2:	e0 2d       	mov	r30, r0
    22f4:	09 95       	icall
    22f6:	89 2b       	or	r24, r25
    22f8:	e1 f6       	brne	.-72     	; 0x22b2 <fputc+0x10>
    22fa:	d8 01       	movw	r26, r16
    22fc:	16 96       	adiw	r26, 0x06	; 6
    22fe:	8d 91       	ld	r24, X+
    2300:	9c 91       	ld	r25, X
    2302:	17 97       	sbiw	r26, 0x07	; 7
    2304:	01 96       	adiw	r24, 0x01	; 1
    2306:	16 96       	adiw	r26, 0x06	; 6
    2308:	8d 93       	st	X+, r24
    230a:	9c 93       	st	X, r25
    230c:	17 97       	sbiw	r26, 0x07	; 7
    230e:	ce 01       	movw	r24, r28
    2310:	df 91       	pop	r29
    2312:	cf 91       	pop	r28
    2314:	1f 91       	pop	r17
    2316:	0f 91       	pop	r16
    2318:	08 95       	ret

0000231a <__ultoa_invert>:
    231a:	fa 01       	movw	r30, r20
    231c:	aa 27       	eor	r26, r26
    231e:	28 30       	cpi	r18, 0x08	; 8
    2320:	51 f1       	breq	.+84     	; 0x2376 <__ultoa_invert+0x5c>
    2322:	20 31       	cpi	r18, 0x10	; 16
    2324:	81 f1       	breq	.+96     	; 0x2386 <__ultoa_invert+0x6c>
    2326:	e8 94       	clt
    2328:	6f 93       	push	r22
    232a:	6e 7f       	andi	r22, 0xFE	; 254
    232c:	6e 5f       	subi	r22, 0xFE	; 254
    232e:	7f 4f       	sbci	r23, 0xFF	; 255
    2330:	8f 4f       	sbci	r24, 0xFF	; 255
    2332:	9f 4f       	sbci	r25, 0xFF	; 255
    2334:	af 4f       	sbci	r26, 0xFF	; 255
    2336:	b1 e0       	ldi	r27, 0x01	; 1
    2338:	3e d0       	rcall	.+124    	; 0x23b6 <__ultoa_invert+0x9c>
    233a:	b4 e0       	ldi	r27, 0x04	; 4
    233c:	3c d0       	rcall	.+120    	; 0x23b6 <__ultoa_invert+0x9c>
    233e:	67 0f       	add	r22, r23
    2340:	78 1f       	adc	r23, r24
    2342:	89 1f       	adc	r24, r25
    2344:	9a 1f       	adc	r25, r26
    2346:	a1 1d       	adc	r26, r1
    2348:	68 0f       	add	r22, r24
    234a:	79 1f       	adc	r23, r25
    234c:	8a 1f       	adc	r24, r26
    234e:	91 1d       	adc	r25, r1
    2350:	a1 1d       	adc	r26, r1
    2352:	6a 0f       	add	r22, r26
    2354:	71 1d       	adc	r23, r1
    2356:	81 1d       	adc	r24, r1
    2358:	91 1d       	adc	r25, r1
    235a:	a1 1d       	adc	r26, r1
    235c:	20 d0       	rcall	.+64     	; 0x239e <__ultoa_invert+0x84>
    235e:	09 f4       	brne	.+2      	; 0x2362 <__ultoa_invert+0x48>
    2360:	68 94       	set
    2362:	3f 91       	pop	r19
    2364:	2a e0       	ldi	r18, 0x0A	; 10
    2366:	26 9f       	mul	r18, r22
    2368:	11 24       	eor	r1, r1
    236a:	30 19       	sub	r19, r0
    236c:	30 5d       	subi	r19, 0xD0	; 208
    236e:	31 93       	st	Z+, r19
    2370:	de f6       	brtc	.-74     	; 0x2328 <__ultoa_invert+0xe>
    2372:	cf 01       	movw	r24, r30
    2374:	08 95       	ret
    2376:	46 2f       	mov	r20, r22
    2378:	47 70       	andi	r20, 0x07	; 7
    237a:	40 5d       	subi	r20, 0xD0	; 208
    237c:	41 93       	st	Z+, r20
    237e:	b3 e0       	ldi	r27, 0x03	; 3
    2380:	0f d0       	rcall	.+30     	; 0x23a0 <__ultoa_invert+0x86>
    2382:	c9 f7       	brne	.-14     	; 0x2376 <__ultoa_invert+0x5c>
    2384:	f6 cf       	rjmp	.-20     	; 0x2372 <__ultoa_invert+0x58>
    2386:	46 2f       	mov	r20, r22
    2388:	4f 70       	andi	r20, 0x0F	; 15
    238a:	40 5d       	subi	r20, 0xD0	; 208
    238c:	4a 33       	cpi	r20, 0x3A	; 58
    238e:	18 f0       	brcs	.+6      	; 0x2396 <__ultoa_invert+0x7c>
    2390:	49 5d       	subi	r20, 0xD9	; 217
    2392:	31 fd       	sbrc	r19, 1
    2394:	40 52       	subi	r20, 0x20	; 32
    2396:	41 93       	st	Z+, r20
    2398:	02 d0       	rcall	.+4      	; 0x239e <__ultoa_invert+0x84>
    239a:	a9 f7       	brne	.-22     	; 0x2386 <__ultoa_invert+0x6c>
    239c:	ea cf       	rjmp	.-44     	; 0x2372 <__ultoa_invert+0x58>
    239e:	b4 e0       	ldi	r27, 0x04	; 4
    23a0:	a6 95       	lsr	r26
    23a2:	97 95       	ror	r25
    23a4:	87 95       	ror	r24
    23a6:	77 95       	ror	r23
    23a8:	67 95       	ror	r22
    23aa:	ba 95       	dec	r27
    23ac:	c9 f7       	brne	.-14     	; 0x23a0 <__ultoa_invert+0x86>
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	61 05       	cpc	r22, r1
    23b2:	71 05       	cpc	r23, r1
    23b4:	08 95       	ret
    23b6:	9b 01       	movw	r18, r22
    23b8:	ac 01       	movw	r20, r24
    23ba:	0a 2e       	mov	r0, r26
    23bc:	06 94       	lsr	r0
    23be:	57 95       	ror	r21
    23c0:	47 95       	ror	r20
    23c2:	37 95       	ror	r19
    23c4:	27 95       	ror	r18
    23c6:	ba 95       	dec	r27
    23c8:	c9 f7       	brne	.-14     	; 0x23bc <__ultoa_invert+0xa2>
    23ca:	62 0f       	add	r22, r18
    23cc:	73 1f       	adc	r23, r19
    23ce:	84 1f       	adc	r24, r20
    23d0:	95 1f       	adc	r25, r21
    23d2:	a0 1d       	adc	r26, r0
    23d4:	08 95       	ret

000023d6 <__do_global_dtors>:
    23d6:	10 e0       	ldi	r17, 0x00	; 0
    23d8:	c2 ed       	ldi	r28, 0xD2	; 210
    23da:	d0 e0       	ldi	r29, 0x00	; 0
    23dc:	04 c0       	rjmp	.+8      	; 0x23e6 <__do_global_dtors+0x10>
    23de:	fe 01       	movw	r30, r28
    23e0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__tablejump2__>
    23e4:	21 96       	adiw	r28, 0x01	; 1
    23e6:	c3 3d       	cpi	r28, 0xD3	; 211
    23e8:	d1 07       	cpc	r29, r17
    23ea:	c9 f7       	brne	.-14     	; 0x23de <__do_global_dtors+0x8>
    23ec:	f8 94       	cli

000023ee <__stop_program>:
    23ee:	ff cf       	rjmp	.-2      	; 0x23ee <__stop_program>
