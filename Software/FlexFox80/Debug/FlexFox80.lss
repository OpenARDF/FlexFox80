
FlexFox80.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000047e  00804000  00008a5e  00008b12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008a5e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003e6  0080447e  0080447e  00008f90  2**0
                  ALLOC
  3 .eeprom       00000035  00810000  00810000  00008f90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  00008fc5  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009024  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000988  00000000  00000000  00009068  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000125d8  00000000  00000000  000099f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005bdf  00000000  00000000  0001bfc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007921  00000000  00000000  00021ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001d54  00000000  00000000  000294c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00005f35  00000000  00000000  0002b21c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a4a7  00000000  00000000  00031151  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000910  00000000  00000000  0003b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 09 01 	jmp	0x212	; 0x212 <__dtors_end>
       4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
       8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
       c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      10:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      14:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      18:	0c 94 fb 20 	jmp	0x41f6	; 0x41f6 <__vector_6>
      1c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      20:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      24:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      28:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      2c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      30:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__vector_12>
      34:	0c 94 e9 3a 	jmp	0x75d2	; 0x75d2 <__vector_13>
      38:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      3c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      40:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      44:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      48:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      4c:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__vector_19>
      50:	0c 94 35 03 	jmp	0x66a	; 0x66a <__vector_20>
      54:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      58:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      5c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      60:	0c 94 76 20 	jmp	0x40ec	; 0x40ec <__vector_24>
      64:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      68:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      6c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      70:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      74:	0c 94 d0 20 	jmp	0x41a0	; 0x41a0 <__vector_29>
      78:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_30>
      7c:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__vector_31>
      80:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__vector_32>
      84:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      88:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      8c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      90:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      94:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      98:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      9c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a4:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__vector_41>
      a8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      ac:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      b0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      b4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      b8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      bc:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      c0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      c4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      c8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      cc:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      d0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      d4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      d8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      dc:	0c 94 76 05 	jmp	0xaec	; 0xaec <__vector_55>
      e0:	0c 94 b9 03 	jmp	0x772	; 0x772 <__vector_56>
      e4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      e8:	9e 27       	eor	r25, r30
      ea:	a4 27       	eor	r26, r20
      ec:	86 27       	eor	r24, r22
      ee:	a4 27       	eor	r26, r20
      f0:	a4 27       	eor	r26, r20
      f2:	a4 27       	eor	r26, r20
      f4:	8f 27       	eor	r24, r31
      f6:	a4 27       	eor	r26, r20
      f8:	a4 27       	eor	r26, r20
      fa:	a4 27       	eor	r26, r20
      fc:	4d 27       	eor	r20, r29
      fe:	a4 27       	eor	r26, r20
     100:	a4 27       	eor	r26, r20
     102:	a4 27       	eor	r26, r20
     104:	a4 27       	eor	r26, r20
     106:	a4 27       	eor	r26, r20
     108:	a4 27       	eor	r26, r20
     10a:	a4 27       	eor	r26, r20
     10c:	a4 27       	eor	r26, r20
     10e:	a4 27       	eor	r26, r20
     110:	a4 27       	eor	r26, r20
     112:	a4 27       	eor	r26, r20
     114:	a4 27       	eor	r26, r20
     116:	a4 27       	eor	r26, r20
     118:	a4 27       	eor	r26, r20
     11a:	a4 27       	eor	r26, r20
     11c:	a4 27       	eor	r26, r20
     11e:	a4 27       	eor	r26, r20
     120:	a4 27       	eor	r26, r20
     122:	a4 27       	eor	r26, r20
     124:	a4 27       	eor	r26, r20
     126:	63 27       	eor	r22, r19
     128:	a4 27       	eor	r26, r20
     12a:	a4 27       	eor	r26, r20
     12c:	a4 27       	eor	r26, r20
     12e:	a4 27       	eor	r26, r20
     130:	a4 27       	eor	r26, r20
     132:	a4 27       	eor	r26, r20
     134:	a4 27       	eor	r26, r20
     136:	a4 27       	eor	r26, r20
     138:	7a 27       	eor	r23, r26
     13a:	80 27       	eor	r24, r16
     13c:	98 27       	eor	r25, r24
     13e:	34 27       	eor	r19, r20
     140:	a4 27       	eor	r26, r20
     142:	a4 27       	eor	r26, r20
     144:	a4 27       	eor	r26, r20
     146:	3d 27       	eor	r19, r29
     148:	a4 27       	eor	r26, r20
     14a:	a4 27       	eor	r26, r20
     14c:	a4 27       	eor	r26, r20
     14e:	46 27       	eor	r20, r22
     150:	d5 2f       	mov	r29, r21
     152:	99 2f       	mov	r25, r25
     154:	c5 2f       	mov	r28, r21
     156:	dd 2f       	mov	r29, r29
     158:	c9 2f       	mov	r28, r25
     15a:	dd 2f       	mov	r29, r29
     15c:	a9 2f       	mov	r26, r25
     15e:	95 2f       	mov	r25, r21
     160:	a1 2f       	mov	r26, r17
     162:	a5 2f       	mov	r26, r21
     164:	dd 2f       	mov	r29, r29
     166:	b9 2f       	mov	r27, r25
     168:	8d 2f       	mov	r24, r29
     16a:	bd 2f       	mov	r27, r29
     16c:	89 2f       	mov	r24, r25
     16e:	9d 2f       	mov	r25, r29
     170:	61 2f       	mov	r22, r17
     172:	65 2f       	mov	r22, r21
     174:	69 2f       	mov	r22, r25
     176:	6d 2f       	mov	r22, r29
     178:	71 2f       	mov	r23, r17
     17a:	75 2f       	mov	r23, r21
     17c:	79 2f       	mov	r23, r25
     17e:	7d 2f       	mov	r23, r29
     180:	81 2f       	mov	r24, r17
     182:	85 2f       	mov	r24, r21
     184:	ad 2f       	mov	r26, r29
     186:	b1 2f       	mov	r27, r17
     188:	d9 2f       	mov	r29, r25
     18a:	b5 2f       	mov	r27, r21
     18c:	dd 2f       	mov	r29, r29
     18e:	91 2f       	mov	r25, r17
     190:	cd 2f       	mov	r28, r29
     192:	f9 2e       	mov	r15, r25
     194:	fd 2e       	mov	r15, r29
     196:	01 2f       	mov	r16, r17
     198:	05 2f       	mov	r16, r21
     19a:	09 2f       	mov	r16, r25
     19c:	0d 2f       	mov	r16, r29
     19e:	11 2f       	mov	r17, r17
     1a0:	15 2f       	mov	r17, r21
     1a2:	19 2f       	mov	r17, r25
     1a4:	1d 2f       	mov	r17, r29
     1a6:	21 2f       	mov	r18, r17
     1a8:	25 2f       	mov	r18, r21
     1aa:	29 2f       	mov	r18, r25
     1ac:	2d 2f       	mov	r18, r29
     1ae:	31 2f       	mov	r19, r17
     1b0:	35 2f       	mov	r19, r21
     1b2:	39 2f       	mov	r19, r25
     1b4:	3d 2f       	mov	r19, r29
     1b6:	41 2f       	mov	r20, r17
     1b8:	45 2f       	mov	r20, r21
     1ba:	49 2f       	mov	r20, r25
     1bc:	4d 2f       	mov	r20, r29
     1be:	51 2f       	mov	r21, r17
     1c0:	55 2f       	mov	r21, r21
     1c2:	59 2f       	mov	r21, r25
     1c4:	5d 2f       	mov	r21, r29
     1c6:	dd 2f       	mov	r29, r29
     1c8:	dd 2f       	mov	r29, r29
     1ca:	dd 2f       	mov	r29, r29
     1cc:	dd 2f       	mov	r29, r29
     1ce:	c1 2f       	mov	r28, r17
     1d0:	dd 2f       	mov	r29, r29
     1d2:	dd 2f       	mov	r29, r29
     1d4:	dd 2f       	mov	r29, r29
     1d6:	dd 2f       	mov	r29, r29
     1d8:	dd 2f       	mov	r29, r29
     1da:	dd 2f       	mov	r29, r29
     1dc:	dd 2f       	mov	r29, r29
     1de:	dd 2f       	mov	r29, r29
     1e0:	dd 2f       	mov	r29, r29
     1e2:	dd 2f       	mov	r29, r29
     1e4:	dd 2f       	mov	r29, r29
     1e6:	dd 2f       	mov	r29, r29
     1e8:	dd 2f       	mov	r29, r29
     1ea:	dd 2f       	mov	r29, r29
     1ec:	dd 2f       	mov	r29, r29
     1ee:	dd 2f       	mov	r29, r29
     1f0:	dd 2f       	mov	r29, r29
     1f2:	dd 2f       	mov	r29, r29
     1f4:	dd 2f       	mov	r29, r29
     1f6:	dd 2f       	mov	r29, r29
     1f8:	dd 2f       	mov	r29, r29
     1fa:	dd 2f       	mov	r29, r29
     1fc:	dd 2f       	mov	r29, r29
     1fe:	dd 2f       	mov	r29, r29
     200:	dd 2f       	mov	r29, r29
     202:	dd 2f       	mov	r29, r29
     204:	dd 2f       	mov	r29, r29
     206:	dd 2f       	mov	r29, r29
     208:	d1 2f       	mov	r29, r17

0000020a <__ctors_start>:
     20a:	b4 1f       	adc	r27, r20
     20c:	a6 20       	and	r10, r6

0000020e <__ctors_end>:
     20e:	bb 1f       	adc	r27, r27
     210:	ad 20       	and	r10, r13

00000212 <__dtors_end>:
     212:	11 24       	eor	r1, r1
     214:	1f be       	out	0x3f, r1	; 63
     216:	cf ef       	ldi	r28, 0xFF	; 255
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	df e7       	ldi	r29, 0x7F	; 127
     21c:	de bf       	out	0x3e, r29	; 62

0000021e <__do_copy_data>:
     21e:	14 e4       	ldi	r17, 0x44	; 68
     220:	a0 e0       	ldi	r26, 0x00	; 0
     222:	b0 e4       	ldi	r27, 0x40	; 64
     224:	ee e5       	ldi	r30, 0x5E	; 94
     226:	fa e8       	ldi	r31, 0x8A	; 138
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0b bf       	out	0x3b, r16	; 59
     22c:	02 c0       	rjmp	.+4      	; 0x232 <__do_copy_data+0x14>
     22e:	07 90       	elpm	r0, Z+
     230:	0d 92       	st	X+, r0
     232:	ae 37       	cpi	r26, 0x7E	; 126
     234:	b1 07       	cpc	r27, r17
     236:	d9 f7       	brne	.-10     	; 0x22e <__do_copy_data+0x10>

00000238 <__do_clear_bss>:
     238:	28 e4       	ldi	r18, 0x48	; 72
     23a:	ae e7       	ldi	r26, 0x7E	; 126
     23c:	b4 e4       	ldi	r27, 0x44	; 68
     23e:	01 c0       	rjmp	.+2      	; 0x242 <.do_clear_bss_start>

00000240 <.do_clear_bss_loop>:
     240:	1d 92       	st	X+, r1

00000242 <.do_clear_bss_start>:
     242:	a4 36       	cpi	r26, 0x64	; 100
     244:	b2 07       	cpc	r27, r18
     246:	e1 f7       	brne	.-8      	; 0x240 <.do_clear_bss_loop>

00000248 <__do_global_ctors>:
     248:	11 e0       	ldi	r17, 0x01	; 1
     24a:	c7 e0       	ldi	r28, 0x07	; 7
     24c:	d1 e0       	ldi	r29, 0x01	; 1
     24e:	04 c0       	rjmp	.+8      	; 0x258 <__do_global_ctors+0x10>
     250:	21 97       	sbiw	r28, 0x01	; 1
     252:	fe 01       	movw	r30, r28
     254:	0e 94 4a 40 	call	0x8094	; 0x8094 <__tablejump2__>
     258:	c5 30       	cpi	r28, 0x05	; 5
     25a:	d1 07       	cpc	r29, r17
     25c:	c9 f7       	brne	.-14     	; 0x250 <__do_global_ctors+0x8>
     25e:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <main>
     262:	0c 94 22 45 	jmp	0x8a44	; 0x8a44 <__do_global_dtors>

00000266 <__bad_interrupt>:
     266:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000026a <is_leap_year>:
     26a:	9c 01       	movw	r18, r24
     26c:	23 70       	andi	r18, 0x03	; 3
     26e:	33 27       	eor	r19, r19
     270:	23 2b       	or	r18, r19
     272:	59 f4       	brne	.+22     	; 0x28a <is_leap_year+0x20>
     274:	64 e6       	ldi	r22, 0x64	; 100
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <__divmodhi4>
     27c:	89 2b       	or	r24, r25
     27e:	39 f4       	brne	.+14     	; 0x28e <is_leap_year+0x24>
     280:	63 70       	andi	r22, 0x03	; 3
     282:	77 27       	eor	r23, r23
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	67 2b       	or	r22, r23
     288:	19 f0       	breq	.+6      	; 0x290 <is_leap_year+0x26>
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	08 95       	ret
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	08 95       	ret

00000292 <month_length>:
     292:	62 30       	cpi	r22, 0x02	; 2
     294:	21 f4       	brne	.+8      	; 0x29e <month_length+0xc>
     296:	0e 94 35 01 	call	0x26a	; 0x26a <is_leap_year>
     29a:	84 5e       	subi	r24, 0xE4	; 228
     29c:	08 95       	ret
     29e:	68 30       	cpi	r22, 0x08	; 8
     2a0:	08 f0       	brcs	.+2      	; 0x2a4 <month_length+0x12>
     2a2:	6f 5f       	subi	r22, 0xFF	; 255
     2a4:	61 70       	andi	r22, 0x01	; 1
     2a6:	8e e1       	ldi	r24, 0x1E	; 30
     2a8:	86 0f       	add	r24, r22
     2aa:	08 95       	ret

000002ac <set_system_time>:
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	60 93 60 48 	sts	0x4860, r22	; 0x804860 <__system_time>
     2b4:	70 93 61 48 	sts	0x4861, r23	; 0x804861 <__system_time+0x1>
     2b8:	80 93 62 48 	sts	0x4862, r24	; 0x804862 <__system_time+0x2>
     2bc:	90 93 63 48 	sts	0x4863, r25	; 0x804863 <__system_time+0x3>
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	08 95       	ret

000002c4 <time>:
     2c4:	fc 01       	movw	r30, r24
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	60 91 60 48 	lds	r22, 0x4860	; 0x804860 <__system_time>
     2ce:	70 91 61 48 	lds	r23, 0x4861	; 0x804861 <__system_time+0x1>
     2d2:	80 91 62 48 	lds	r24, 0x4862	; 0x804862 <__system_time+0x2>
     2d6:	90 91 63 48 	lds	r25, 0x4863	; 0x804863 <__system_time+0x3>
     2da:	0f be       	out	0x3f, r0	; 63
     2dc:	30 97       	sbiw	r30, 0x00	; 0
     2de:	21 f0       	breq	.+8      	; 0x2e8 <time+0x24>
     2e0:	60 83       	st	Z, r22
     2e2:	71 83       	std	Z+1, r23	; 0x01
     2e4:	82 83       	std	Z+2, r24	; 0x02
     2e6:	93 83       	std	Z+3, r25	; 0x03
     2e8:	08 95       	ret

000002ea <system_tick>:
     2ea:	8f 93       	push	r24
     2ec:	8f b7       	in	r24, 0x3f	; 63
     2ee:	8f 93       	push	r24
     2f0:	f8 94       	cli
     2f2:	80 91 60 48 	lds	r24, 0x4860	; 0x804860 <__system_time>
     2f6:	8f 5f       	subi	r24, 0xFF	; 255
     2f8:	80 93 60 48 	sts	0x4860, r24	; 0x804860 <__system_time>
     2fc:	80 91 61 48 	lds	r24, 0x4861	; 0x804861 <__system_time+0x1>
     300:	8f 4f       	sbci	r24, 0xFF	; 255
     302:	80 93 61 48 	sts	0x4861, r24	; 0x804861 <__system_time+0x1>
     306:	80 91 62 48 	lds	r24, 0x4862	; 0x804862 <__system_time+0x2>
     30a:	8f 4f       	sbci	r24, 0xFF	; 255
     30c:	80 93 62 48 	sts	0x4862, r24	; 0x804862 <__system_time+0x2>
     310:	80 91 63 48 	lds	r24, 0x4863	; 0x804863 <__system_time+0x3>
     314:	8f 4f       	sbci	r24, 0xFF	; 255
     316:	80 93 63 48 	sts	0x4863, r24	; 0x804863 <__system_time+0x3>
     31a:	8f 91       	pop	r24
     31c:	8f bf       	out	0x3f, r24	; 63
     31e:	8f 91       	pop	r24
     320:	08 95       	ret

00000322 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     322:	0e 94 4b 22 	call	0x4496	; 0x4496 <system_init>
     326:	08 95       	ret

00000328 <__vector_30>:

extern USART_Number_t g_serialbus_usart_number;
extern USART_Number_t g_linkbus_usart_number;

ISR(TCB2_INT_vect)
{
     328:	1f 92       	push	r1
     32a:	0f 92       	push	r0
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	0f 92       	push	r0
     330:	11 24       	eor	r1, r1
     332:	8f 93       	push	r24
	if(TCB2.INTFLAGS & TCB_CAPT_bm)
     334:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
     338:	80 ff       	sbrs	r24, 0
     33a:	03 c0       	rjmp	.+6      	; 0x342 <__vector_30+0x1a>
    {
        TCB2.INTFLAGS = TCB_CAPT_bm;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    }
}
     342:	8f 91       	pop	r24
     344:	0f 90       	pop	r0
     346:	0f be       	out	0x3f, r0	; 63
     348:	0f 90       	pop	r0
     34a:	1f 90       	pop	r1
     34c:	18 95       	reti

0000034e <_Z9serial_Rxh>:
		serial_Rx(rx_char);
	}
}

void serial_Rx(uint8_t rx_char)
{
     34e:	1f 93       	push	r17
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static int msg_ID = 0;
	static BOOL receiving_msg = FALSE;

	if(!buff)
     356:	80 91 d3 44 	lds	r24, 0x44D3	; 0x8044d3 <_ZZ9serial_RxhE4buff>
     35a:	90 91 d4 44 	lds	r25, 0x44D4	; 0x8044d4 <_ZZ9serial_RxhE4buff+0x1>
     35e:	89 2b       	or	r24, r25
     360:	31 f4       	brne	.+12     	; 0x36e <_Z9serial_Rxh+0x20>
	{
		buff = nextEmptySBRxBuffer();
     362:	0e 94 88 31 	call	0x6310	; 0x6310 <nextEmptySBRxBuffer>
     366:	80 93 d3 44 	sts	0x44D3, r24	; 0x8044d3 <_ZZ9serial_RxhE4buff>
     36a:	90 93 d4 44 	sts	0x44D4, r25	; 0x8044d4 <_ZZ9serial_RxhE4buff+0x1>
	}

	if(buff)
     36e:	c0 91 d3 44 	lds	r28, 0x44D3	; 0x8044d3 <_ZZ9serial_RxhE4buff>
     372:	d0 91 d4 44 	lds	r29, 0x44D4	; 0x8044d4 <_ZZ9serial_RxhE4buff+0x1>
     376:	20 97       	sbiw	r28, 0x00	; 0
     378:	09 f4       	brne	.+2      	; 0x37c <_Z9serial_Rxh+0x2e>
     37a:	73 c1       	rjmp	.+742    	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
	{
		static uint8_t ignoreCount = 0;
		rx_char = toupper(rx_char);
     37c:	81 2f       	mov	r24, r17
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 e2 41 	call	0x83c4	; 0x83c4 <toupper>
     384:	ac 01       	movw	r20, r24
     386:	28 2f       	mov	r18, r24

		if(ignoreCount)
     388:	90 91 d2 44 	lds	r25, 0x44D2	; 0x8044d2 <_ZZ9serial_RxhE11ignoreCount>
     38c:	99 23       	and	r25, r25
     38e:	21 f0       	breq	.+8      	; 0x398 <_Z9serial_Rxh+0x4a>
		{
			rx_char = '\0';
			ignoreCount--;
     390:	91 50       	subi	r25, 0x01	; 1
     392:	90 93 d2 44 	sts	0x44D2, r25	; 0x8044d2 <_ZZ9serial_RxhE11ignoreCount>
     396:	65 c1       	rjmp	.+714    	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
		}
		else if(rx_char == 0x1B)    /* Ignore ESC sequences */
     398:	4b 31       	cpi	r20, 0x1B	; 27
     39a:	21 f4       	brne	.+8      	; 0x3a4 <_Z9serial_Rxh+0x56>
			if(charIndex < SERIALBUS_MAX_MSG_FIELD_LENGTH)
			{
				rx_char = textBuff[charIndex];
			}

			ignoreCount = 2;        /* throw out the next two characters */
     39c:	82 e0       	ldi	r24, 0x02	; 2
     39e:	80 93 d2 44 	sts	0x44D2, r24	; 0x8044d2 <_ZZ9serial_RxhE11ignoreCount>
     3a2:	5f c1       	rjmp	.+702    	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
		}
		else if(rx_char == 0x0D)    /* Handle carriage return */
     3a4:	4d 30       	cpi	r20, 0x0D	; 13
     3a6:	09 f0       	breq	.+2      	; 0x3aa <_Z9serial_Rxh+0x5c>
     3a8:	3f c0       	rjmp	.+126    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		{
			if(receiving_msg)
     3aa:	80 91 9e 44 	lds	r24, 0x449E	; 0x80449e <_ZZ9serial_RxhE13receiving_msg>
     3ae:	88 23       	and	r24, r24
     3b0:	31 f1       	breq	.+76     	; 0x3fe <_Z9serial_Rxh+0xb0>
			{
				if(charIndex > 0)
     3b2:	e0 91 d1 44 	lds	r30, 0x44D1	; 0x8044d1 <_ZZ9serial_RxhE9charIndex>
     3b6:	ee 23       	and	r30, r30
     3b8:	f9 f0       	breq	.+62     	; 0x3f8 <_Z9serial_Rxh+0xaa>
				{
					buff->type = SERIALBUS_MSG_QUERY;
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	88 83       	st	Y, r24
					buff->id = (SBMessageID)msg_ID;
     3be:	80 91 9c 44 	lds	r24, 0x449C	; 0x80449c <_ZZ9serial_RxhE6msg_ID>
     3c2:	90 91 9d 44 	lds	r25, 0x449D	; 0x80449d <_ZZ9serial_RxhE6msg_ID+0x1>
     3c6:	89 83       	std	Y+1, r24	; 0x01
     3c8:	9a 83       	std	Y+2, r25	; 0x02

					if(field_index > 0) /* terminate the last field */
     3ca:	80 91 9b 44 	lds	r24, 0x449B	; 0x80449b <_ZZ9serial_RxhE11field_index>
     3ce:	88 23       	and	r24, r24
     3d0:	79 f0       	breq	.+30     	; 0x3f0 <_Z9serial_Rxh+0xa2>
					{
						buff->fields[field_index - 1][field_len] = 0;
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	40 91 9a 44 	lds	r20, 0x449A	; 0x80449a <_ZZ9serial_RxhE9field_len>
     3da:	54 e1       	ldi	r21, 0x14	; 20
     3dc:	58 9f       	mul	r21, r24
     3de:	90 01       	movw	r18, r0
     3e0:	59 9f       	mul	r21, r25
     3e2:	30 0d       	add	r19, r0
     3e4:	11 24       	eor	r1, r1
     3e6:	c2 0f       	add	r28, r18
     3e8:	d3 1f       	adc	r29, r19
     3ea:	c4 0f       	add	r28, r20
     3ec:	d1 1d       	adc	r29, r1
     3ee:	1b 82       	std	Y+3, r1	; 0x03
					}

					textBuff[charIndex] = '\0'; /* terminate last-message buffer */
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	e1 56       	subi	r30, 0x61	; 97
     3f4:	fb 4b       	sbci	r31, 0xBB	; 187
     3f6:	10 82       	st	Z, r1
				}

				sb_send_NewLine();
     3f8:	0e 94 8a 32 	call	0x6514	; 0x6514 <sb_send_NewLine>
     3fc:	04 c0       	rjmp	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			}
			else
			{
				buff->id = SB_INVALID_MESSAGE; /* print help message */
     3fe:	8f ef       	ldi	r24, 0xFF	; 255
     400:	9f ef       	ldi	r25, 0xFF	; 255
     402:	89 83       	std	Y+1, r24	; 0x01
     404:	9a 83       	std	Y+2, r25	; 0x02
			}

			charIndex = 0;
     406:	10 92 d1 44 	sts	0x44D1, r1	; 0x8044d1 <_ZZ9serial_RxhE9charIndex>
			field_len = 0;
     40a:	10 92 9a 44 	sts	0x449A, r1	; 0x80449a <_ZZ9serial_RxhE9field_len>
			msg_ID = LB_MESSAGE_EMPTY;
     40e:	10 92 9c 44 	sts	0x449C, r1	; 0x80449c <_ZZ9serial_RxhE6msg_ID>
     412:	10 92 9d 44 	sts	0x449D, r1	; 0x80449d <_ZZ9serial_RxhE6msg_ID+0x1>

			field_index = 0;
     416:	10 92 9b 44 	sts	0x449B, r1	; 0x80449b <_ZZ9serial_RxhE11field_index>
			buff = NULL;
     41a:	10 92 d3 44 	sts	0x44D3, r1	; 0x8044d3 <_ZZ9serial_RxhE4buff>
     41e:	10 92 d4 44 	sts	0x44D4, r1	; 0x8044d4 <_ZZ9serial_RxhE4buff+0x1>

			receiving_msg = FALSE;
     422:	10 92 9e 44 	sts	0x449E, r1	; 0x80449e <_ZZ9serial_RxhE13receiving_msg>
     426:	1d c1       	rjmp	.+570    	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
		}
		else if(rx_char)
     428:	44 23       	and	r20, r20
     42a:	09 f4       	brne	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42c:	1a c1       	rjmp	.+564    	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
		{
			textBuff[charIndex] = rx_char;  /* hold the characters for re-use */
     42e:	e0 91 d1 44 	lds	r30, 0x44D1	; 0x8044d1 <_ZZ9serial_RxhE9charIndex>
     432:	8e 2f       	mov	r24, r30
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	dc 01       	movw	r26, r24
     438:	a1 56       	subi	r26, 0x61	; 97
     43a:	bb 4b       	sbci	r27, 0xBB	; 187
     43c:	4c 93       	st	X, r20

			if(charIndex)
     43e:	ee 23       	and	r30, r30
     440:	09 f4       	brne	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     442:	d7 c0       	rjmp	.+430    	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
			{
				if(rx_char == 0x7F)         /* Handle backspace */
     444:	4f 37       	cpi	r20, 0x7F	; 127
     446:	09 f0       	breq	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	5f c0       	rjmp	.+190    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
				{
					charIndex--;
     44a:	e1 50       	subi	r30, 0x01	; 1
     44c:	e0 93 d1 44 	sts	0x44D1, r30	; 0x8044d1 <_ZZ9serial_RxhE9charIndex>
					if(field_index == 0)
     450:	80 91 9b 44 	lds	r24, 0x449B	; 0x80449b <_ZZ9serial_RxhE11field_index>
     454:	81 11       	cpse	r24, r1
     456:	13 c0       	rjmp	.+38     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
					{
						msg_ID -= textBuff[charIndex];
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	e1 56       	subi	r30, 0x61	; 97
     45c:	fb 4b       	sbci	r31, 0xBB	; 187
     45e:	30 81       	ld	r19, Z
     460:	80 91 9c 44 	lds	r24, 0x449C	; 0x80449c <_ZZ9serial_RxhE6msg_ID>
     464:	90 91 9d 44 	lds	r25, 0x449D	; 0x80449d <_ZZ9serial_RxhE6msg_ID+0x1>
     468:	83 1b       	sub	r24, r19
     46a:	91 09       	sbc	r25, r1
						msg_ID /= 10;
     46c:	6a e0       	ldi	r22, 0x0A	; 10
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <__divmodhi4>
     474:	60 93 9c 44 	sts	0x449C, r22	; 0x80449c <_ZZ9serial_RxhE6msg_ID>
     478:	70 93 9d 44 	sts	0x449D, r23	; 0x80449d <_ZZ9serial_RxhE6msg_ID+0x1>
     47c:	39 c0       	rjmp	.+114    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
					}
					else if(field_len)
     47e:	90 91 9a 44 	lds	r25, 0x449A	; 0x80449a <_ZZ9serial_RxhE9field_len>
     482:	99 23       	and	r25, r25
     484:	91 f0       	breq	.+36     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
					{
						field_len--;
     486:	3f ef       	ldi	r19, 0xFF	; 255
     488:	39 0f       	add	r19, r25
     48a:	30 93 9a 44 	sts	0x449A, r19	; 0x80449a <_ZZ9serial_RxhE9field_len>
						buff->fields[field_index - 1][field_len] = '\0';
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	64 e1       	ldi	r22, 0x14	; 20
     494:	68 9f       	mul	r22, r24
     496:	a0 01       	movw	r20, r0
     498:	69 9f       	mul	r22, r25
     49a:	50 0d       	add	r21, r0
     49c:	11 24       	eor	r1, r1
     49e:	c4 0f       	add	r28, r20
     4a0:	d5 1f       	adc	r29, r21
     4a2:	c3 0f       	add	r28, r19
     4a4:	d1 1d       	adc	r29, r1
     4a6:	1b 82       	std	Y+3, r1	; 0x03
     4a8:	23 c0       	rjmp	.+70     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
					}
					else if(textBuff[charIndex] == ' ')
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	e1 56       	subi	r30, 0x61	; 97
     4ae:	fb 4b       	sbci	r31, 0xBB	; 187
     4b0:	90 81       	ld	r25, Z
     4b2:	90 32       	cpi	r25, 0x20	; 32
     4b4:	a1 f4       	brne	.+40     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
					{
						field_index--;
     4b6:	81 50       	subi	r24, 0x01	; 1
     4b8:	80 93 9b 44 	sts	0x449B, r24	; 0x80449b <_ZZ9serial_RxhE11field_index>
						field_len = strlen(buff->fields[field_index]);
     4bc:	34 e1       	ldi	r19, 0x14	; 20
     4be:	83 9f       	mul	r24, r19
     4c0:	c0 01       	movw	r24, r0
     4c2:	11 24       	eor	r1, r1
     4c4:	03 96       	adiw	r24, 0x03	; 3
     4c6:	c8 0f       	add	r28, r24
     4c8:	d9 1f       	adc	r29, r25
     4ca:	fe 01       	movw	r30, r28
     4cc:	01 90       	ld	r0, Z+
     4ce:	00 20       	and	r0, r0
     4d0:	e9 f7       	brne	.-6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4d2:	31 97       	sbiw	r30, 0x01	; 1
     4d4:	ec 1b       	sub	r30, r28
     4d6:	fd 0b       	sbc	r31, r29
     4d8:	e0 93 9a 44 	sts	0x449A, r30	; 0x80449a <_ZZ9serial_RxhE9field_len>
     4dc:	09 c0       	rjmp	.+18     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
					}
					else
					{
						buff->fields[field_index][0] = '\0';
     4de:	94 e1       	ldi	r25, 0x14	; 20
     4e0:	89 9f       	mul	r24, r25
     4e2:	c0 0d       	add	r28, r0
     4e4:	d1 1d       	adc	r29, r1
     4e6:	11 24       	eor	r1, r1
     4e8:	1b 82       	std	Y+3, r1	; 0x03
						field_index--;
     4ea:	81 50       	subi	r24, 0x01	; 1
     4ec:	80 93 9b 44 	sts	0x449B, r24	; 0x80449b <_ZZ9serial_RxhE11field_index>
					}

					textBuff[charIndex] = '\0'; /* replace deleted char with null */
     4f0:	80 91 d1 44 	lds	r24, 0x44D1	; 0x8044d1 <_ZZ9serial_RxhE9charIndex>
     4f4:	e8 2f       	mov	r30, r24
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	e1 56       	subi	r30, 0x61	; 97
     4fa:	fb 4b       	sbci	r31, 0xBB	; 187
     4fc:	10 82       	st	Z, r1

					if(charIndex == 0)
     4fe:	81 11       	cpse	r24, r1
     500:	ab c0       	rjmp	.+342    	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
					{
						receiving_msg = FALSE;
     502:	10 92 9e 44 	sts	0x449E, r1	; 0x80449e <_ZZ9serial_RxhE13receiving_msg>
     506:	a8 c0       	rjmp	.+336    	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
					}
				}
				else
				{
					if(rx_char == ' ')
     508:	40 32       	cpi	r20, 0x20	; 32
     50a:	81 f5       	brne	.+96     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
     50c:	fc 01       	movw	r30, r24
     50e:	e2 56       	subi	r30, 0x62	; 98
     510:	fb 4b       	sbci	r31, 0xBB	; 187
     512:	30 81       	ld	r19, Z
     514:	30 32       	cpi	r19, 0x20	; 32
     516:	09 f4       	brne	.+2      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
     518:	98 c0       	rjmp	.+304    	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
     51a:	30 91 9b 44 	lds	r19, 0x449B	; 0x80449b <_ZZ9serial_RxhE11field_index>
     51e:	43 2f       	mov	r20, r19
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	ba 01       	movw	r22, r20
     524:	6f 5f       	subi	r22, 0xFF	; 255
     526:	7f 4f       	sbci	r23, 0xFF	; 255
     528:	63 30       	cpi	r22, 0x03	; 3
     52a:	71 05       	cpc	r23, r1
     52c:	0c f0       	brlt	.+2      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     52e:	8f c0       	rjmp	.+286    	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
						{
							rx_char = '\0';
						}
						else
						{
							if(field_index > 0)
     530:	33 23       	and	r19, r19
     532:	79 f0       	breq	.+30     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
							{
								buff->fields[field_index - 1][field_len] = '\0';
     534:	41 50       	subi	r20, 0x01	; 1
     536:	51 09       	sbc	r21, r1
     538:	e0 91 9a 44 	lds	r30, 0x449A	; 0x80449a <_ZZ9serial_RxhE9field_len>
     53c:	f4 e1       	ldi	r31, 0x14	; 20
     53e:	f4 9f       	mul	r31, r20
     540:	b0 01       	movw	r22, r0
     542:	f5 9f       	mul	r31, r21
     544:	70 0d       	add	r23, r0
     546:	11 24       	eor	r1, r1
     548:	c6 0f       	add	r28, r22
     54a:	d7 1f       	adc	r29, r23
     54c:	ce 0f       	add	r28, r30
     54e:	d1 1d       	adc	r29, r1
     550:	1b 82       	std	Y+3, r1	; 0x03
							}

							field_index++;
     552:	3f 5f       	subi	r19, 0xFF	; 255
     554:	30 93 9b 44 	sts	0x449B, r19	; 0x80449b <_ZZ9serial_RxhE11field_index>
							field_len = 0;
     558:	10 92 9a 44 	sts	0x449A, r1	; 0x80449a <_ZZ9serial_RxhE9field_len>
							charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	81 33       	cpi	r24, 0x31	; 49
     560:	91 05       	cpc	r25, r1
     562:	0c f0       	brlt	.+2      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     564:	81 e3       	ldi	r24, 0x31	; 49
     566:	80 93 d1 44 	sts	0x44D1, r24	; 0x8044d1 <_ZZ9serial_RxhE9charIndex>
     56a:	76 c0       	rjmp	.+236    	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
						}
					}
					else if(field_len < LINKBUS_MAX_MSG_FIELD_LENGTH)
     56c:	80 91 9a 44 	lds	r24, 0x449A	; 0x80449a <_ZZ9serial_RxhE9field_len>
     570:	85 31       	cpi	r24, 0x15	; 21
     572:	08 f0       	brcs	.+2      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
     574:	6e c0       	rjmp	.+220    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
					{
						if(field_index == 0)    /* message ID received */
     576:	60 91 9b 44 	lds	r22, 0x449B	; 0x80449b <_ZZ9serial_RxhE11field_index>
     57a:	61 11       	cpse	r22, r1
     57c:	19 c0       	rjmp	.+50     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
						{
							msg_ID = msg_ID * 10 + rx_char;
     57e:	60 91 9c 44 	lds	r22, 0x449C	; 0x80449c <_ZZ9serial_RxhE6msg_ID>
     582:	70 91 9d 44 	lds	r23, 0x449D	; 0x80449d <_ZZ9serial_RxhE6msg_ID+0x1>
     586:	fb 01       	movw	r30, r22
     588:	ee 0f       	add	r30, r30
     58a:	ff 1f       	adc	r31, r31
     58c:	66 0f       	add	r22, r22
     58e:	77 1f       	adc	r23, r23
     590:	66 0f       	add	r22, r22
     592:	77 1f       	adc	r23, r23
     594:	66 0f       	add	r22, r22
     596:	77 1f       	adc	r23, r23
     598:	6e 0f       	add	r22, r30
     59a:	7f 1f       	adc	r23, r31
     59c:	64 0f       	add	r22, r20
     59e:	71 1d       	adc	r23, r1
     5a0:	60 93 9c 44 	sts	0x449C, r22	; 0x80449c <_ZZ9serial_RxhE6msg_ID>
     5a4:	70 93 9d 44 	sts	0x449D, r23	; 0x80449d <_ZZ9serial_RxhE6msg_ID+0x1>
							field_len++;
     5a8:	8f 5f       	subi	r24, 0xFF	; 255
     5aa:	80 93 9a 44 	sts	0x449A, r24	; 0x80449a <_ZZ9serial_RxhE9field_len>
     5ae:	16 c0       	rjmp	.+44     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
						}
						else
						{
							buff->fields[field_index - 1][field_len++] = rx_char;
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	61 50       	subi	r22, 0x01	; 1
     5b4:	71 09       	sbc	r23, r1
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	98 0f       	add	r25, r24
     5ba:	90 93 9a 44 	sts	0x449A, r25	; 0x80449a <_ZZ9serial_RxhE9field_len>
     5be:	34 e1       	ldi	r19, 0x14	; 20
     5c0:	36 9f       	mul	r19, r22
     5c2:	f0 01       	movw	r30, r0
     5c4:	37 9f       	mul	r19, r23
     5c6:	f0 0d       	add	r31, r0
     5c8:	11 24       	eor	r1, r1
     5ca:	ce 0f       	add	r28, r30
     5cc:	df 1f       	adc	r29, r31
     5ce:	fe 01       	movw	r30, r28
     5d0:	e8 0f       	add	r30, r24
     5d2:	f1 1d       	adc	r31, r1
     5d4:	43 83       	std	Z+3, r20	; 0x03
							buff->fields[field_index - 1][field_len] = '\0';
     5d6:	c9 0f       	add	r28, r25
     5d8:	d1 1d       	adc	r29, r1
     5da:	1b 82       	std	Y+3, r1	; 0x03
						}

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
     5dc:	80 91 d1 44 	lds	r24, 0x44D1	; 0x8044d1 <_ZZ9serial_RxhE9charIndex>
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	81 33       	cpi	r24, 0x31	; 49
     5e6:	91 05       	cpc	r25, r1
     5e8:	0c f0       	brlt	.+2      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5ea:	81 e3       	ldi	r24, 0x31	; 49
     5ec:	80 93 d1 44 	sts	0x44D1, r24	; 0x8044d1 <_ZZ9serial_RxhE9charIndex>
     5f0:	33 c0       	rjmp	.+102    	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
					}
				}
			}
			else
			{
				if(rx_char == 0x7F) /* Handle Backspace */
     5f2:	4f 37       	cpi	r20, 0x7F	; 127
     5f4:	69 f4       	brne	.+26     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
				{
					if(msg_ID <= 0)
     5f6:	80 91 9c 44 	lds	r24, 0x449C	; 0x80449c <_ZZ9serial_RxhE6msg_ID>
     5fa:	90 91 9d 44 	lds	r25, 0x449D	; 0x80449d <_ZZ9serial_RxhE6msg_ID+0x1>
     5fe:	18 16       	cp	r1, r24
     600:	19 06       	cpc	r1, r25
     602:	0c f0       	brlt	.+2      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
					{
						rx_char = '\0';
     604:	20 e0       	ldi	r18, 0x00	; 0
					}

					msg_ID = 0;
     606:	10 92 9c 44 	sts	0x449C, r1	; 0x80449c <_ZZ9serial_RxhE6msg_ID>
     60a:	10 92 9d 44 	sts	0x449D, r1	; 0x80449d <_ZZ9serial_RxhE6msg_ID+0x1>
     60e:	24 c0       	rjmp	.+72     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
				}
				else if(rx_char == ' ') /* Handle Space */
     610:	40 32       	cpi	r20, 0x20	; 32
     612:	09 f1       	breq	.+66     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
					rx_char = '\0';
				}
				else                    /* start of new message */
				{
					uint8_t i;
					field_index = 0;
     614:	10 92 9b 44 	sts	0x449B, r1	; 0x80449b <_ZZ9serial_RxhE11field_index>
					msg_ID = rx_char;
     618:	55 27       	eor	r21, r21
     61a:	40 93 9c 44 	sts	0x449C, r20	; 0x80449c <_ZZ9serial_RxhE6msg_ID>
     61e:	50 93 9d 44 	sts	0x449D, r21	; 0x80449d <_ZZ9serial_RxhE6msg_ID+0x1>

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	83 30       	cpi	r24, 0x03	; 3
     626:	50 f4       	brcc	.+20     	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
					{
						buff->fields[i][0] = '\0';
     628:	de 01       	movw	r26, r28
     62a:	34 e1       	ldi	r19, 0x14	; 20
     62c:	83 9f       	mul	r24, r19
     62e:	a0 0d       	add	r26, r0
     630:	b1 1d       	adc	r27, r1
     632:	11 24       	eor	r1, r1
     634:	13 96       	adiw	r26, 0x03	; 3
     636:	1c 92       	st	X, r1
					uint8_t i;
					field_index = 0;
					msg_ID = rx_char;

					/* Empty the field buffers */
					for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
     638:	8f 5f       	subi	r24, 0xFF	; 255
     63a:	f4 cf       	rjmp	.-24     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
					{
						buff->fields[i][0] = '\0';
					}

					receiving_msg = TRUE;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	80 93 9e 44 	sts	0x449E, r24	; 0x80449e <_ZZ9serial_RxhE13receiving_msg>
					charIndex++;
     642:	ef 5f       	subi	r30, 0xFF	; 255
     644:	e0 93 d1 44 	sts	0x44D1, r30	; 0x8044d1 <_ZZ9serial_RxhE9charIndex>
     648:	07 c0       	rjmp	.+14     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
				{
					if(rx_char == ' ')
					{
						if((textBuff[charIndex - 1] == ' ') || ((field_index + 1) >= LINKBUS_MAX_MSG_NUMBER_OF_FIELDS))
						{
							rx_char = '\0';
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	05 c0       	rjmp	.+10     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	03 c0       	rjmp	.+6      	; 0x658 <__LOCK_REGION_LENGTH__+0x258>

						charIndex = MIN(charIndex + 1, (LINKBUS_MAX_MSG_LENGTH - 1));
					}
					else
					{
						rx_char = '\0';
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	01 c0       	rjmp	.+2      	; 0x658 <__LOCK_REGION_LENGTH__+0x258>

					msg_ID = 0;
				}
				else if(rx_char == ' ') /* Handle Space */
				{
					rx_char = '\0';
     656:	20 e0       	ldi	r18, 0x00	; 0
					receiving_msg = TRUE;
					charIndex++;
				}
			}

			if(rx_char)
     658:	22 23       	and	r18, r18
     65a:	19 f0       	breq	.+6      	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
			{
				sb_echo_char(rx_char);
     65c:	82 2f       	mov	r24, r18
     65e:	0e 94 93 32 	call	0x6526	; 0x6526 <sb_echo_char>
			}
		}
	}	
}
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	1f 91       	pop	r17
     668:	08 95       	ret

0000066a <__vector_20>:

/**

*/
ISR(USART0_DRE_vect)
{
     66a:	1f 92       	push	r1
     66c:	0f 92       	push	r0
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	0f 92       	push	r0
     672:	11 24       	eor	r1, r1
     674:	0b b6       	in	r0, 0x3b	; 59
     676:	0f 92       	push	r0
     678:	2f 93       	push	r18
     67a:	3f 93       	push	r19
     67c:	4f 93       	push	r20
     67e:	5f 93       	push	r21
     680:	6f 93       	push	r22
     682:	7f 93       	push	r23
     684:	8f 93       	push	r24
     686:	9f 93       	push	r25
     688:	af 93       	push	r26
     68a:	bf 93       	push	r27
     68c:	ef 93       	push	r30
     68e:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_0)
     690:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
     694:	81 11       	cpse	r24, r1
     696:	2b c0       	rjmp	.+86     	; 0x6ee <__vector_20+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     698:	80 91 98 44 	lds	r24, 0x4498	; 0x804498 <_ZZ11__vector_20E4buff>
     69c:	90 91 99 44 	lds	r25, 0x4499	; 0x804499 <_ZZ11__vector_20E4buff+0x1>
     6a0:	89 2b       	or	r24, r25
     6a2:	31 f4       	brne	.+12     	; 0x6b0 <__vector_20+0x46>
		{
			buff = nextFullLBTxBuffer();
     6a4:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <_Z18nextFullLBTxBufferv>
     6a8:	80 93 98 44 	sts	0x4498, r24	; 0x804498 <_ZZ11__vector_20E4buff>
     6ac:	90 93 99 44 	sts	0x4499, r25	; 0x804499 <_ZZ11__vector_20E4buff+0x1>
		}

		if((*buff)[charIndex])
     6b0:	e0 91 98 44 	lds	r30, 0x4498	; 0x804498 <_ZZ11__vector_20E4buff>
     6b4:	f0 91 99 44 	lds	r31, 0x4499	; 0x804499 <_ZZ11__vector_20E4buff+0x1>
     6b8:	80 91 97 44 	lds	r24, 0x4497	; 0x804497 <_ZZ11__vector_20E9charIndex>
     6bc:	df 01       	movw	r26, r30
     6be:	a8 0f       	add	r26, r24
     6c0:	b1 1d       	adc	r27, r1
     6c2:	9c 91       	ld	r25, X
     6c4:	99 23       	and	r25, r25
     6c6:	31 f0       	breq	.+12     	; 0x6d4 <__vector_20+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
     6c8:	8f 5f       	subi	r24, 0xFF	; 255
     6ca:	80 93 97 44 	sts	0x4497, r24	; 0x804497 <_ZZ11__vector_20E9charIndex>
     6ce:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
     6d2:	0d c0       	rjmp	.+26     	; 0x6ee <__vector_20+0x84>
		}
		else
		{
			charIndex = 0;
     6d4:	10 92 97 44 	sts	0x4497, r1	; 0x804497 <_ZZ11__vector_20E9charIndex>
			(*buff)[0] = '\0';
     6d8:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
     6da:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <_Z18nextFullLBTxBufferv>
     6de:	80 93 98 44 	sts	0x4498, r24	; 0x804498 <_ZZ11__vector_20E4buff>
     6e2:	90 93 99 44 	sts	0x4499, r25	; 0x804499 <_ZZ11__vector_20E4buff+0x1>
			if(!buff)
     6e6:	89 2b       	or	r24, r25
     6e8:	11 f4       	brne	.+4      	; 0x6ee <__vector_20+0x84>
			{
				linkbus_end_tx();
     6ea:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_0)
     6ee:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
     6f2:	81 11       	cpse	r24, r1
     6f4:	2b c0       	rjmp	.+86     	; 0x74c <__vector_20+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     6f6:	80 91 95 44 	lds	r24, 0x4495	; 0x804495 <_ZZ11__vector_20E4buff_0>
     6fa:	90 91 96 44 	lds	r25, 0x4496	; 0x804496 <_ZZ11__vector_20E4buff_0+0x1>
     6fe:	89 2b       	or	r24, r25
     700:	31 f4       	brne	.+12     	; 0x70e <__vector_20+0xa4>
		{
			buff = nextFullSBTxBuffer();
     702:	0e 94 30 31 	call	0x6260	; 0x6260 <nextFullSBTxBuffer>
     706:	80 93 95 44 	sts	0x4495, r24	; 0x804495 <_ZZ11__vector_20E4buff_0>
     70a:	90 93 96 44 	sts	0x4496, r25	; 0x804496 <_ZZ11__vector_20E4buff_0+0x1>
		}

		if((*buff)[charIndex])
     70e:	e0 91 95 44 	lds	r30, 0x4495	; 0x804495 <_ZZ11__vector_20E4buff_0>
     712:	f0 91 96 44 	lds	r31, 0x4496	; 0x804496 <_ZZ11__vector_20E4buff_0+0x1>
     716:	80 91 94 44 	lds	r24, 0x4494	; 0x804494 <_ZZ11__vector_20E9charIndex_0>
     71a:	df 01       	movw	r26, r30
     71c:	a8 0f       	add	r26, r24
     71e:	b1 1d       	adc	r27, r1
     720:	9c 91       	ld	r25, X
     722:	99 23       	and	r25, r25
     724:	31 f0       	breq	.+12     	; 0x732 <__vector_20+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART0.TXDATAL = (*buff)[charIndex++];
     726:	8f 5f       	subi	r24, 0xFF	; 255
     728:	80 93 94 44 	sts	0x4494, r24	; 0x804494 <_ZZ11__vector_20E9charIndex_0>
     72c:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
     730:	0d c0       	rjmp	.+26     	; 0x74c <__vector_20+0xe2>
		}
		else
		{
			charIndex = 0;
     732:	10 92 94 44 	sts	0x4494, r1	; 0x804494 <_ZZ11__vector_20E9charIndex_0>
			(*buff)[0] = '\0';
     736:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
     738:	0e 94 30 31 	call	0x6260	; 0x6260 <nextFullSBTxBuffer>
     73c:	80 93 95 44 	sts	0x4495, r24	; 0x804495 <_ZZ11__vector_20E4buff_0>
     740:	90 93 96 44 	sts	0x4496, r25	; 0x804496 <_ZZ11__vector_20E4buff_0+0x1>
			if(!buff)
     744:	89 2b       	or	r24, r25
     746:	11 f4       	brne	.+4      	; 0x74c <__vector_20+0xe2>
			{
				serialbus_end_tx();
     748:	0e 94 fc 31 	call	0x63f8	; 0x63f8 <serialbus_end_tx>
			}
		}
	}
}
     74c:	ff 91       	pop	r31
     74e:	ef 91       	pop	r30
     750:	bf 91       	pop	r27
     752:	af 91       	pop	r26
     754:	9f 91       	pop	r25
     756:	8f 91       	pop	r24
     758:	7f 91       	pop	r23
     75a:	6f 91       	pop	r22
     75c:	5f 91       	pop	r21
     75e:	4f 91       	pop	r20
     760:	3f 91       	pop	r19
     762:	2f 91       	pop	r18
     764:	0f 90       	pop	r0
     766:	0b be       	out	0x3b, r0	; 59
     768:	0f 90       	pop	r0
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	0f 90       	pop	r0
     76e:	1f 90       	pop	r1
     770:	18 95       	reti

00000772 <__vector_56>:

/**

*/
ISR(USART4_DRE_vect)
{
     772:	1f 92       	push	r1
     774:	0f 92       	push	r0
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	0f 92       	push	r0
     77a:	11 24       	eor	r1, r1
     77c:	0b b6       	in	r0, 0x3b	; 59
     77e:	0f 92       	push	r0
     780:	2f 93       	push	r18
     782:	3f 93       	push	r19
     784:	4f 93       	push	r20
     786:	5f 93       	push	r21
     788:	6f 93       	push	r22
     78a:	7f 93       	push	r23
     78c:	8f 93       	push	r24
     78e:	9f 93       	push	r25
     790:	af 93       	push	r26
     792:	bf 93       	push	r27
     794:	ef 93       	push	r30
     796:	ff 93       	push	r31
	if(g_linkbus_usart_number == USART_4)
     798:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
     79c:	84 30       	cpi	r24, 0x04	; 4
     79e:	59 f5       	brne	.+86     	; 0x7f6 <__vector_56+0x84>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     7a0:	80 91 92 44 	lds	r24, 0x4492	; 0x804492 <_ZZ11__vector_56E4buff>
     7a4:	90 91 93 44 	lds	r25, 0x4493	; 0x804493 <_ZZ11__vector_56E4buff+0x1>
     7a8:	89 2b       	or	r24, r25
     7aa:	31 f4       	brne	.+12     	; 0x7b8 <__vector_56+0x46>
		{
			buff = nextFullLBTxBuffer();
     7ac:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <_Z18nextFullLBTxBufferv>
     7b0:	80 93 92 44 	sts	0x4492, r24	; 0x804492 <_ZZ11__vector_56E4buff>
     7b4:	90 93 93 44 	sts	0x4493, r25	; 0x804493 <_ZZ11__vector_56E4buff+0x1>
		}

		if((*buff)[charIndex])
     7b8:	e0 91 92 44 	lds	r30, 0x4492	; 0x804492 <_ZZ11__vector_56E4buff>
     7bc:	f0 91 93 44 	lds	r31, 0x4493	; 0x804493 <_ZZ11__vector_56E4buff+0x1>
     7c0:	80 91 91 44 	lds	r24, 0x4491	; 0x804491 <_ZZ11__vector_56E9charIndex>
     7c4:	df 01       	movw	r26, r30
     7c6:	a8 0f       	add	r26, r24
     7c8:	b1 1d       	adc	r27, r1
     7ca:	9c 91       	ld	r25, X
     7cc:	99 23       	and	r25, r25
     7ce:	31 f0       	breq	.+12     	; 0x7dc <__vector_56+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
     7d0:	8f 5f       	subi	r24, 0xFF	; 255
     7d2:	80 93 91 44 	sts	0x4491, r24	; 0x804491 <_ZZ11__vector_56E9charIndex>
     7d6:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
     7da:	0d c0       	rjmp	.+26     	; 0x7f6 <__vector_56+0x84>
		}
		else
		{
			charIndex = 0;
     7dc:	10 92 91 44 	sts	0x4491, r1	; 0x804491 <_ZZ11__vector_56E9charIndex>
			(*buff)[0] = '\0';
     7e0:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
     7e2:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <_Z18nextFullLBTxBufferv>
     7e6:	80 93 92 44 	sts	0x4492, r24	; 0x804492 <_ZZ11__vector_56E4buff>
     7ea:	90 93 93 44 	sts	0x4493, r25	; 0x804493 <_ZZ11__vector_56E4buff+0x1>
			if(!buff)
     7ee:	89 2b       	or	r24, r25
     7f0:	11 f4       	brne	.+4      	; 0x7f6 <__vector_56+0x84>
			{
				linkbus_end_tx();
     7f2:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <_Z14linkbus_end_txv>
			}
		}
	}
	
	if(g_serialbus_usart_number == USART_4)
     7f6:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
     7fa:	84 30       	cpi	r24, 0x04	; 4
     7fc:	59 f5       	brne	.+86     	; 0x854 <__vector_56+0xe2>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     7fe:	80 91 8f 44 	lds	r24, 0x448F	; 0x80448f <_ZZ11__vector_56E4buff_0>
     802:	90 91 90 44 	lds	r25, 0x4490	; 0x804490 <_ZZ11__vector_56E4buff_0+0x1>
     806:	89 2b       	or	r24, r25
     808:	31 f4       	brne	.+12     	; 0x816 <__vector_56+0xa4>
		{
			buff = nextFullSBTxBuffer();
     80a:	0e 94 30 31 	call	0x6260	; 0x6260 <nextFullSBTxBuffer>
     80e:	80 93 8f 44 	sts	0x448F, r24	; 0x80448f <_ZZ11__vector_56E4buff_0>
     812:	90 93 90 44 	sts	0x4490, r25	; 0x804490 <_ZZ11__vector_56E4buff_0+0x1>
		}

		if((*buff)[charIndex])
     816:	e0 91 8f 44 	lds	r30, 0x448F	; 0x80448f <_ZZ11__vector_56E4buff_0>
     81a:	f0 91 90 44 	lds	r31, 0x4490	; 0x804490 <_ZZ11__vector_56E4buff_0+0x1>
     81e:	80 91 8e 44 	lds	r24, 0x448E	; 0x80448e <_ZZ11__vector_56E9charIndex_0>
     822:	df 01       	movw	r26, r30
     824:	a8 0f       	add	r26, r24
     826:	b1 1d       	adc	r27, r1
     828:	9c 91       	ld	r25, X
     82a:	99 23       	and	r25, r25
     82c:	31 f0       	breq	.+12     	; 0x83a <__vector_56+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART4.TXDATAL = (*buff)[charIndex++];
     82e:	8f 5f       	subi	r24, 0xFF	; 255
     830:	80 93 8e 44 	sts	0x448E, r24	; 0x80448e <_ZZ11__vector_56E9charIndex_0>
     834:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
     838:	0d c0       	rjmp	.+26     	; 0x854 <__vector_56+0xe2>
		}
		else
		{
			charIndex = 0;
     83a:	10 92 8e 44 	sts	0x448E, r1	; 0x80448e <_ZZ11__vector_56E9charIndex_0>
			(*buff)[0] = '\0';
     83e:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
     840:	0e 94 30 31 	call	0x6260	; 0x6260 <nextFullSBTxBuffer>
     844:	80 93 8f 44 	sts	0x448F, r24	; 0x80448f <_ZZ11__vector_56E4buff_0>
     848:	90 93 90 44 	sts	0x4490, r25	; 0x804490 <_ZZ11__vector_56E4buff_0+0x1>
			if(!buff)
     84c:	89 2b       	or	r24, r25
     84e:	11 f4       	brne	.+4      	; 0x854 <__vector_56+0xe2>
			{
				serialbus_end_tx();
     850:	0e 94 fc 31 	call	0x63f8	; 0x63f8 <serialbus_end_tx>
			}
		}
	}
}
     854:	ff 91       	pop	r31
     856:	ef 91       	pop	r30
     858:	bf 91       	pop	r27
     85a:	af 91       	pop	r26
     85c:	9f 91       	pop	r25
     85e:	8f 91       	pop	r24
     860:	7f 91       	pop	r23
     862:	6f 91       	pop	r22
     864:	5f 91       	pop	r21
     866:	4f 91       	pop	r20
     868:	3f 91       	pop	r19
     86a:	2f 91       	pop	r18
     86c:	0f 90       	pop	r0
     86e:	0b be       	out	0x3b, r0	; 59
     870:	0f 90       	pop	r0
     872:	0f be       	out	0x3f, r0	; 63
     874:	0f 90       	pop	r0
     876:	1f 90       	pop	r1
     878:	18 95       	reti

0000087a <_Z10linkbus_Rxh>:
		serial_Rx(rx_char);
	}
}

void linkbus_Rx(uint8_t rx_char)
{
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	18 2f       	mov	r17, r24
	static uint8_t field_index = 0;
	static uint8_t field_len = 0;
	static uint32_t tempMsg_ID = 0;
	static BOOL receiving_msg = FALSE;

	if(!buff)
     884:	80 91 8c 44 	lds	r24, 0x448C	; 0x80448c <_ZZ10linkbus_RxhE4buff>
     888:	90 91 8d 44 	lds	r25, 0x448D	; 0x80448d <_ZZ10linkbus_RxhE4buff+0x1>
     88c:	89 2b       	or	r24, r25
     88e:	31 f4       	brne	.+12     	; 0x89c <_Z10linkbus_Rxh+0x22>
	{
		buff = nextEmptyLBRxBuffer();
     890:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <_Z19nextEmptyLBRxBufferv>
     894:	80 93 8c 44 	sts	0x448C, r24	; 0x80448c <_ZZ10linkbus_RxhE4buff>
     898:	90 93 8d 44 	sts	0x448D, r25	; 0x80448d <_ZZ10linkbus_RxhE4buff+0x1>
	}

	if(buff)
     89c:	c0 91 8c 44 	lds	r28, 0x448C	; 0x80448c <_ZZ10linkbus_RxhE4buff>
     8a0:	d0 91 8d 44 	lds	r29, 0x448D	; 0x80448d <_ZZ10linkbus_RxhE4buff+0x1>
     8a4:	20 97       	sbiw	r28, 0x00	; 0
     8a6:	09 f4       	brne	.+2      	; 0x8aa <_Z10linkbus_Rxh+0x30>
     8a8:	e3 c0       	rjmp	.+454    	; 0xa70 <_Z10linkbus_Rxh+0x1f6>
	{
		rx_char = toupper(rx_char);
     8aa:	81 2f       	mov	r24, r17
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 e2 41 	call	0x83c4	; 0x83c4 <toupper>

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
     8b2:	84 32       	cpi	r24, 0x24	; 36
     8b4:	11 f0       	breq	.+4      	; 0x8ba <_Z10linkbus_Rxh+0x40>
     8b6:	81 32       	cpi	r24, 0x21	; 33
     8b8:	49 f5       	brne	.+82     	; 0x90c <_Z10linkbus_Rxh+0x92>
		{
			charIndex = 0;
     8ba:	10 92 8b 44 	sts	0x448B, r1	; 0x80448b <_ZZ10linkbus_RxhE9charIndex>
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
     8be:	81 32       	cpi	r24, 0x21	; 33
     8c0:	11 f4       	brne	.+4      	; 0x8c6 <_Z10linkbus_Rxh+0x4c>
     8c2:	83 e0       	ldi	r24, 0x03	; 3
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <_Z10linkbus_Rxh+0x4e>
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	88 83       	st	Y, r24
			field_len = 0;
     8ca:	10 92 8a 44 	sts	0x448A, r1	; 0x80448a <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
     8ce:	10 92 86 44 	sts	0x4486, r1	; 0x804486 <_ZZ10linkbus_RxhE10tempMsg_ID>
     8d2:	10 92 87 44 	sts	0x4487, r1	; 0x804487 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     8d6:	10 92 88 44 	sts	0x4488, r1	; 0x804488 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
     8da:	10 92 89 44 	sts	0x4489, r1	; 0x804489 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			receiving_msg = TRUE;
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	80 93 85 44 	sts	0x4485, r24	; 0x804485 <_ZZ10linkbus_RxhE13receiving_msg>

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
     8e4:	10 92 84 44 	sts	0x4484, r1	; 0x804484 <_ZZ10linkbus_RxhE11field_index>
     8e8:	80 91 84 44 	lds	r24, 0x4484	; 0x804484 <_ZZ10linkbus_RxhE11field_index>
     8ec:	83 30       	cpi	r24, 0x03	; 3
     8ee:	58 f4       	brcc	.+22     	; 0x906 <_Z10linkbus_Rxh+0x8c>
			{
				buff->fields[field_index][0] = '\0';
     8f0:	fe 01       	movw	r30, r28
     8f2:	05 e1       	ldi	r16, 0x15	; 21
     8f4:	80 9f       	mul	r24, r16
     8f6:	e0 0d       	add	r30, r0
     8f8:	f1 1d       	adc	r31, r1
     8fa:	11 24       	eor	r1, r1
     8fc:	13 82       	std	Z+3, r1	; 0x03
			field_len = 0;
			tempMsg_ID = 0;
			receiving_msg = TRUE;

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
     8fe:	8f 5f       	subi	r24, 0xFF	; 255
     900:	80 93 84 44 	sts	0x4484, r24	; 0x804484 <_ZZ10linkbus_RxhE11field_index>
     904:	f1 cf       	rjmp	.-30     	; 0x8e8 <_Z10linkbus_Rxh+0x6e>
			{
				buff->fields[field_index][0] = '\0';
			}

			field_index = 0;
     906:	10 92 84 44 	sts	0x4484, r1	; 0x804484 <_ZZ10linkbus_RxhE11field_index>
     90a:	a7 c0       	rjmp	.+334    	; 0xa5a <_Z10linkbus_Rxh+0x1e0>
		}
		else if(receiving_msg)
     90c:	90 91 85 44 	lds	r25, 0x4485	; 0x804485 <_ZZ10linkbus_RxhE13receiving_msg>
     910:	99 23       	and	r25, r25
     912:	09 f4       	brne	.+2      	; 0x916 <_Z10linkbus_Rxh+0x9c>
     914:	8b c0       	rjmp	.+278    	; 0xa2c <_Z10linkbus_Rxh+0x1b2>
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
     916:	8c 32       	cpi	r24, 0x2C	; 44
     918:	29 f0       	breq	.+10     	; 0x924 <_Z10linkbus_Rxh+0xaa>
     91a:	8b 33       	cpi	r24, 0x3B	; 59
     91c:	19 f0       	breq	.+6      	; 0x924 <_Z10linkbus_Rxh+0xaa>
     91e:	8f 33       	cpi	r24, 0x3F	; 63
     920:	09 f0       	breq	.+2      	; 0x924 <_Z10linkbus_Rxh+0xaa>
     922:	42 c0       	rjmp	.+132    	; 0x9a8 <_Z10linkbus_Rxh+0x12e>
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
     924:	90 91 84 44 	lds	r25, 0x4484	; 0x804484 <_ZZ10linkbus_RxhE11field_index>
     928:	99 23       	and	r25, r25
     92a:	89 f0       	breq	.+34     	; 0x94e <_Z10linkbus_Rxh+0xd4>
				{
					buff->fields[field_index - 1][field_len] = 0;
     92c:	29 2f       	mov	r18, r25
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	21 50       	subi	r18, 0x01	; 1
     932:	31 09       	sbc	r19, r1
     934:	40 91 8a 44 	lds	r20, 0x448A	; 0x80448a <_ZZ10linkbus_RxhE9field_len>
     938:	55 e1       	ldi	r21, 0x15	; 21
     93a:	52 9f       	mul	r21, r18
     93c:	f0 01       	movw	r30, r0
     93e:	53 9f       	mul	r21, r19
     940:	f0 0d       	add	r31, r0
     942:	11 24       	eor	r1, r1
     944:	ec 0f       	add	r30, r28
     946:	fd 1f       	adc	r31, r29
     948:	e4 0f       	add	r30, r20
     94a:	f1 1d       	adc	r31, r1
     94c:	13 82       	std	Z+3, r1	; 0x03
				}

				field_index++;
     94e:	9f 5f       	subi	r25, 0xFF	; 255
     950:	90 93 84 44 	sts	0x4484, r25	; 0x804484 <_ZZ10linkbus_RxhE11field_index>
				field_len = 0;
     954:	10 92 8a 44 	sts	0x448A, r1	; 0x80448a <_ZZ10linkbus_RxhE9field_len>

				if(rx_char == ';')
     958:	8b 33       	cpi	r24, 0x3B	; 59
     95a:	69 f4       	brne	.+26     	; 0x976 <_Z10linkbus_Rxh+0xfc>
				{
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
     95c:	80 91 8b 44 	lds	r24, 0x448B	; 0x80448b <_ZZ10linkbus_RxhE9charIndex>
     960:	84 30       	cpi	r24, 0x04	; 4
     962:	30 f0       	brcs	.+12     	; 0x970 <_Z10linkbus_Rxh+0xf6>
					{
						buff->id = (LBMessageID)tempMsg_ID;
     964:	80 91 86 44 	lds	r24, 0x4486	; 0x804486 <_ZZ10linkbus_RxhE10tempMsg_ID>
     968:	90 91 87 44 	lds	r25, 0x4487	; 0x804487 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     96c:	89 83       	std	Y+1, r24	; 0x01
     96e:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = FALSE;
     970:	10 92 85 44 	sts	0x4485, r1	; 0x804485 <_ZZ10linkbus_RxhE13receiving_msg>
     974:	10 c0       	rjmp	.+32     	; 0x996 <_Z10linkbus_Rxh+0x11c>
				}
				else if(rx_char == '?')
     976:	8f 33       	cpi	r24, 0x3F	; 63
     978:	71 f4       	brne	.+28     	; 0x996 <_Z10linkbus_Rxh+0x11c>
				{
					buff->type = LINKBUS_MSG_QUERY;
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	88 83       	st	Y, r24
					if(charIndex >= LINKBUS_MIN_MSG_LENGTH)
     97e:	80 91 8b 44 	lds	r24, 0x448B	; 0x80448b <_ZZ10linkbus_RxhE9charIndex>
     982:	83 30       	cpi	r24, 0x03	; 3
     984:	30 f0       	brcs	.+12     	; 0x992 <_Z10linkbus_Rxh+0x118>
					{
						buff->id = (LBMessageID)tempMsg_ID;
     986:	80 91 86 44 	lds	r24, 0x4486	; 0x804486 <_ZZ10linkbus_RxhE10tempMsg_ID>
     98a:	90 91 87 44 	lds	r25, 0x4487	; 0x804487 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     98e:	89 83       	std	Y+1, r24	; 0x01
     990:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = FALSE;
     992:	10 92 85 44 	sts	0x4485, r1	; 0x804485 <_ZZ10linkbus_RxhE13receiving_msg>
				}

				if(!receiving_msg)
     996:	80 91 85 44 	lds	r24, 0x4485	; 0x804485 <_ZZ10linkbus_RxhE13receiving_msg>
     99a:	81 11       	cpse	r24, r1
     99c:	5e c0       	rjmp	.+188    	; 0xa5a <_Z10linkbus_Rxh+0x1e0>
				{
					buff = 0;
     99e:	10 92 8c 44 	sts	0x448C, r1	; 0x80448c <_ZZ10linkbus_RxhE4buff>
     9a2:	10 92 8d 44 	sts	0x448D, r1	; 0x80448d <_ZZ10linkbus_RxhE4buff+0x1>
     9a6:	59 c0       	rjmp	.+178    	; 0xa5a <_Z10linkbus_Rxh+0x1e0>
				}
			}
			else
			{
				if(field_index == 0)    /* message ID received */
     9a8:	20 91 84 44 	lds	r18, 0x4484	; 0x804484 <_ZZ10linkbus_RxhE11field_index>
     9ac:	21 11       	cpse	r18, r1
     9ae:	29 c0       	rjmp	.+82     	; 0xa02 <_Z10linkbus_Rxh+0x188>
				{
					tempMsg_ID = tempMsg_ID * 10 + rx_char;
     9b0:	40 91 86 44 	lds	r20, 0x4486	; 0x804486 <_ZZ10linkbus_RxhE10tempMsg_ID>
     9b4:	50 91 87 44 	lds	r21, 0x4487	; 0x804487 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     9b8:	60 91 88 44 	lds	r22, 0x4488	; 0x804488 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
     9bc:	70 91 89 44 	lds	r23, 0x4489	; 0x804489 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
     9c0:	44 0f       	add	r20, r20
     9c2:	55 1f       	adc	r21, r21
     9c4:	66 1f       	adc	r22, r22
     9c6:	77 1f       	adc	r23, r23
     9c8:	8a 01       	movw	r16, r20
     9ca:	9b 01       	movw	r18, r22
     9cc:	00 0f       	add	r16, r16
     9ce:	11 1f       	adc	r17, r17
     9d0:	22 1f       	adc	r18, r18
     9d2:	33 1f       	adc	r19, r19
     9d4:	00 0f       	add	r16, r16
     9d6:	11 1f       	adc	r17, r17
     9d8:	22 1f       	adc	r18, r18
     9da:	33 1f       	adc	r19, r19
     9dc:	40 0f       	add	r20, r16
     9de:	51 1f       	adc	r21, r17
     9e0:	62 1f       	adc	r22, r18
     9e2:	73 1f       	adc	r23, r19
     9e4:	8a 01       	movw	r16, r20
     9e6:	9b 01       	movw	r18, r22
     9e8:	08 0f       	add	r16, r24
     9ea:	11 1d       	adc	r17, r1
     9ec:	21 1d       	adc	r18, r1
     9ee:	31 1d       	adc	r19, r1
     9f0:	00 93 86 44 	sts	0x4486, r16	; 0x804486 <_ZZ10linkbus_RxhE10tempMsg_ID>
     9f4:	10 93 87 44 	sts	0x4487, r17	; 0x804487 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     9f8:	20 93 88 44 	sts	0x4488, r18	; 0x804488 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
     9fc:	30 93 89 44 	sts	0x4489, r19	; 0x804489 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
     a00:	2c c0       	rjmp	.+88     	; 0xa5a <_Z10linkbus_Rxh+0x1e0>
				}
				else
				{
					buff->fields[field_index - 1][field_len++] = rx_char;
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	21 50       	subi	r18, 0x01	; 1
     a06:	31 09       	sbc	r19, r1
     a08:	90 91 8a 44 	lds	r25, 0x448A	; 0x80448a <_ZZ10linkbus_RxhE9field_len>
     a0c:	41 e0       	ldi	r20, 0x01	; 1
     a0e:	49 0f       	add	r20, r25
     a10:	40 93 8a 44 	sts	0x448A, r20	; 0x80448a <_ZZ10linkbus_RxhE9field_len>
     a14:	65 e1       	ldi	r22, 0x15	; 21
     a16:	62 9f       	mul	r22, r18
     a18:	a0 01       	movw	r20, r0
     a1a:	63 9f       	mul	r22, r19
     a1c:	50 0d       	add	r21, r0
     a1e:	11 24       	eor	r1, r1
     a20:	c4 0f       	add	r28, r20
     a22:	d5 1f       	adc	r29, r21
     a24:	c9 0f       	add	r28, r25
     a26:	d1 1d       	adc	r29, r1
     a28:	8b 83       	std	Y+3, r24	; 0x03
     a2a:	17 c0       	rjmp	.+46     	; 0xa5a <_Z10linkbus_Rxh+0x1e0>
				}
			}
		}
		else if(rx_char == 0x0D)    /* Carriage return resets any message in progress */
     a2c:	8d 30       	cpi	r24, 0x0D	; 13
     a2e:	a9 f4       	brne	.+42     	; 0xa5a <_Z10linkbus_Rxh+0x1e0>
		{
			buff->id = LB_MESSAGE_EMPTY;
     a30:	19 82       	std	Y+1, r1	; 0x01
     a32:	1a 82       	std	Y+2, r1	; 0x02
			charIndex = LINKBUS_MAX_MSG_LENGTH;
     a34:	82 e3       	ldi	r24, 0x32	; 50
     a36:	80 93 8b 44 	sts	0x448B, r24	; 0x80448b <_ZZ10linkbus_RxhE9charIndex>
			field_len = 0;
     a3a:	10 92 8a 44 	sts	0x448A, r1	; 0x80448a <_ZZ10linkbus_RxhE9field_len>
			tempMsg_ID = 0;
     a3e:	10 92 86 44 	sts	0x4486, r1	; 0x804486 <_ZZ10linkbus_RxhE10tempMsg_ID>
     a42:	10 92 87 44 	sts	0x4487, r1	; 0x804487 <_ZZ10linkbus_RxhE10tempMsg_ID+0x1>
     a46:	10 92 88 44 	sts	0x4488, r1	; 0x804488 <_ZZ10linkbus_RxhE10tempMsg_ID+0x2>
     a4a:	10 92 89 44 	sts	0x4489, r1	; 0x804489 <_ZZ10linkbus_RxhE10tempMsg_ID+0x3>
			field_index = 0;
     a4e:	10 92 84 44 	sts	0x4484, r1	; 0x804484 <_ZZ10linkbus_RxhE11field_index>
			buff = NULL;
     a52:	10 92 8c 44 	sts	0x448C, r1	; 0x80448c <_ZZ10linkbus_RxhE4buff>
     a56:	10 92 8d 44 	sts	0x448D, r1	; 0x80448d <_ZZ10linkbus_RxhE4buff+0x1>
		}

		if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
     a5a:	80 91 8b 44 	lds	r24, 0x448B	; 0x80448b <_ZZ10linkbus_RxhE9charIndex>
     a5e:	8f 5f       	subi	r24, 0xFF	; 255
     a60:	80 93 8b 44 	sts	0x448B, r24	; 0x80448b <_ZZ10linkbus_RxhE9charIndex>
     a64:	82 33       	cpi	r24, 0x32	; 50
     a66:	20 f0       	brcs	.+8      	; 0xa70 <_Z10linkbus_Rxh+0x1f6>
		{
			receiving_msg = FALSE;
     a68:	10 92 85 44 	sts	0x4485, r1	; 0x804485 <_ZZ10linkbus_RxhE13receiving_msg>
			charIndex = 0;
     a6c:	10 92 8b 44 	sts	0x448B, r1	; 0x80448b <_ZZ10linkbus_RxhE9charIndex>
		}
	}
}
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	08 95       	ret

00000a7a <__vector_19>:
        TCB2.INTFLAGS = TCB_CAPT_bm;
    }
}

ISR(USART0_RXC_vect)
{
     a7a:	1f 92       	push	r1
     a7c:	0f 92       	push	r0
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	0f 92       	push	r0
     a82:	11 24       	eor	r1, r1
     a84:	0b b6       	in	r0, 0x3b	; 59
     a86:	0f 92       	push	r0
     a88:	2f 93       	push	r18
     a8a:	3f 93       	push	r19
     a8c:	4f 93       	push	r20
     a8e:	5f 93       	push	r21
     a90:	6f 93       	push	r22
     a92:	7f 93       	push	r23
     a94:	8f 93       	push	r24
     a96:	9f 93       	push	r25
     a98:	af 93       	push	r26
     a9a:	bf 93       	push	r27
     a9c:	cf 93       	push	r28
     a9e:	ef 93       	push	r30
     aa0:	ff 93       	push	r31
	uint8_t rx_char = USART0_get_data();
     aa2:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <USART0_get_data>
     aa6:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_0)
     aa8:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
     aac:	81 11       	cpse	r24, r1
     aae:	03 c0       	rjmp	.+6      	; 0xab6 <__vector_19+0x3c>
	{
		linkbus_Rx(rx_char);
     ab0:	8c 2f       	mov	r24, r28
     ab2:	0e 94 3d 04 	call	0x87a	; 0x87a <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_0)
     ab6:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
     aba:	81 11       	cpse	r24, r1
     abc:	03 c0       	rjmp	.+6      	; 0xac4 <__vector_19+0x4a>
	{
		serial_Rx(rx_char);
     abe:	8c 2f       	mov	r24, r28
     ac0:	0e 94 a7 01 	call	0x34e	; 0x34e <_Z9serial_Rxh>
	}
}
     ac4:	ff 91       	pop	r31
     ac6:	ef 91       	pop	r30
     ac8:	cf 91       	pop	r28
     aca:	bf 91       	pop	r27
     acc:	af 91       	pop	r26
     ace:	9f 91       	pop	r25
     ad0:	8f 91       	pop	r24
     ad2:	7f 91       	pop	r23
     ad4:	6f 91       	pop	r22
     ad6:	5f 91       	pop	r21
     ad8:	4f 91       	pop	r20
     ada:	3f 91       	pop	r19
     adc:	2f 91       	pop	r18
     ade:	0f 90       	pop	r0
     ae0:	0b be       	out	0x3b, r0	; 59
     ae2:	0f 90       	pop	r0
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	0f 90       	pop	r0
     ae8:	1f 90       	pop	r1
     aea:	18 95       	reti

00000aec <__vector_55>:

ISR(USART4_RXC_vect)
{
     aec:	1f 92       	push	r1
     aee:	0f 92       	push	r0
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	0f 92       	push	r0
     af4:	11 24       	eor	r1, r1
     af6:	0b b6       	in	r0, 0x3b	; 59
     af8:	0f 92       	push	r0
     afa:	2f 93       	push	r18
     afc:	3f 93       	push	r19
     afe:	4f 93       	push	r20
     b00:	5f 93       	push	r21
     b02:	6f 93       	push	r22
     b04:	7f 93       	push	r23
     b06:	8f 93       	push	r24
     b08:	9f 93       	push	r25
     b0a:	af 93       	push	r26
     b0c:	bf 93       	push	r27
     b0e:	cf 93       	push	r28
     b10:	ef 93       	push	r30
     b12:	ff 93       	push	r31
	uint8_t rx_char = USART4_get_data();
     b14:	0e 94 72 3d 	call	0x7ae4	; 0x7ae4 <USART4_get_data>
     b18:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_4)
     b1a:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
     b1e:	84 30       	cpi	r24, 0x04	; 4
     b20:	19 f4       	brne	.+6      	; 0xb28 <__vector_55+0x3c>
	{
		linkbus_Rx(rx_char);
     b22:	8c 2f       	mov	r24, r28
     b24:	0e 94 3d 04 	call	0x87a	; 0x87a <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_4)
     b28:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
     b2c:	84 30       	cpi	r24, 0x04	; 4
     b2e:	19 f4       	brne	.+6      	; 0xb36 <__vector_55+0x4a>
	{
		serial_Rx(rx_char);
     b30:	8c 2f       	mov	r24, r28
     b32:	0e 94 a7 01 	call	0x34e	; 0x34e <_Z9serial_Rxh>
	}
}
     b36:	ff 91       	pop	r31
     b38:	ef 91       	pop	r30
     b3a:	cf 91       	pop	r28
     b3c:	bf 91       	pop	r27
     b3e:	af 91       	pop	r26
     b40:	9f 91       	pop	r25
     b42:	8f 91       	pop	r24
     b44:	7f 91       	pop	r23
     b46:	6f 91       	pop	r22
     b48:	5f 91       	pop	r21
     b4a:	4f 91       	pop	r20
     b4c:	3f 91       	pop	r19
     b4e:	2f 91       	pop	r18
     b50:	0f 90       	pop	r0
     b52:	0b be       	out	0x3b, r0	; 59
     b54:	0f 90       	pop	r0
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	0f 90       	pop	r0
     b5a:	1f 90       	pop	r1
     b5c:	18 95       	reti

00000b5e <__vector_31>:

/**

*/
ISR(USART1_RXC_vect)
{
     b5e:	1f 92       	push	r1
     b60:	0f 92       	push	r0
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	0f 92       	push	r0
     b66:	11 24       	eor	r1, r1
     b68:	0b b6       	in	r0, 0x3b	; 59
     b6a:	0f 92       	push	r0
     b6c:	2f 93       	push	r18
     b6e:	3f 93       	push	r19
     b70:	4f 93       	push	r20
     b72:	5f 93       	push	r21
     b74:	6f 93       	push	r22
     b76:	7f 93       	push	r23
     b78:	8f 93       	push	r24
     b7a:	9f 93       	push	r25
     b7c:	af 93       	push	r26
     b7e:	bf 93       	push	r27
     b80:	cf 93       	push	r28
     b82:	ef 93       	push	r30
     b84:	ff 93       	push	r31
	uint8_t rx_char = USART1_get_data();	
     b86:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <USART1_get_data>
     b8a:	c8 2f       	mov	r28, r24
	
	if(g_linkbus_usart_number == USART_1)
     b8c:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	19 f4       	brne	.+6      	; 0xb9a <__vector_31+0x3c>
	{
		linkbus_Rx(rx_char);
     b94:	8c 2f       	mov	r24, r28
     b96:	0e 94 3d 04 	call	0x87a	; 0x87a <_Z10linkbus_Rxh>
	}
	
	if(g_serialbus_usart_number == USART_1)
     b9a:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	19 f4       	brne	.+6      	; 0xba8 <__vector_31+0x4a>
	{
		serial_Rx(rx_char);
     ba2:	8c 2f       	mov	r24, r28
     ba4:	0e 94 a7 01 	call	0x34e	; 0x34e <_Z9serial_Rxh>
	}
}
     ba8:	ff 91       	pop	r31
     baa:	ef 91       	pop	r30
     bac:	cf 91       	pop	r28
     bae:	bf 91       	pop	r27
     bb0:	af 91       	pop	r26
     bb2:	9f 91       	pop	r25
     bb4:	8f 91       	pop	r24
     bb6:	7f 91       	pop	r23
     bb8:	6f 91       	pop	r22
     bba:	5f 91       	pop	r21
     bbc:	4f 91       	pop	r20
     bbe:	3f 91       	pop	r19
     bc0:	2f 91       	pop	r18
     bc2:	0f 90       	pop	r0
     bc4:	0b be       	out	0x3b, r0	; 59
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	0f 90       	pop	r0
     bcc:	1f 90       	pop	r1
     bce:	18 95       	reti

00000bd0 <__vector_32>:

/**

*/
ISR(USART1_DRE_vect)
{
     bd0:	1f 92       	push	r1
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	0f 92       	push	r0
     bd8:	11 24       	eor	r1, r1
     bda:	0b b6       	in	r0, 0x3b	; 59
     bdc:	0f 92       	push	r0
     bde:	2f 93       	push	r18
     be0:	3f 93       	push	r19
     be2:	4f 93       	push	r20
     be4:	5f 93       	push	r21
     be6:	6f 93       	push	r22
     be8:	7f 93       	push	r23
     bea:	8f 93       	push	r24
     bec:	9f 93       	push	r25
     bee:	af 93       	push	r26
     bf0:	bf 93       	push	r27
     bf2:	ef 93       	push	r30
     bf4:	ff 93       	push	r31
	if(g_serialbus_usart_number == USART_1)
     bf6:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	59 f5       	brne	.+86     	; 0xc54 <__vector_32+0x84>
	{
		static SerialbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     bfe:	80 91 82 44 	lds	r24, 0x4482	; 0x804482 <_ZZ11__vector_32E4buff>
     c02:	90 91 83 44 	lds	r25, 0x4483	; 0x804483 <_ZZ11__vector_32E4buff+0x1>
     c06:	89 2b       	or	r24, r25
     c08:	31 f4       	brne	.+12     	; 0xc16 <__vector_32+0x46>
		{
			buff = nextFullSBTxBuffer();
     c0a:	0e 94 30 31 	call	0x6260	; 0x6260 <nextFullSBTxBuffer>
     c0e:	80 93 82 44 	sts	0x4482, r24	; 0x804482 <_ZZ11__vector_32E4buff>
     c12:	90 93 83 44 	sts	0x4483, r25	; 0x804483 <_ZZ11__vector_32E4buff+0x1>
		}

		if((*buff)[charIndex])
     c16:	e0 91 82 44 	lds	r30, 0x4482	; 0x804482 <_ZZ11__vector_32E4buff>
     c1a:	f0 91 83 44 	lds	r31, 0x4483	; 0x804483 <_ZZ11__vector_32E4buff+0x1>
     c1e:	80 91 81 44 	lds	r24, 0x4481	; 0x804481 <_ZZ11__vector_32E9charIndex>
     c22:	df 01       	movw	r26, r30
     c24:	a8 0f       	add	r26, r24
     c26:	b1 1d       	adc	r27, r1
     c28:	9c 91       	ld	r25, X
     c2a:	99 23       	and	r25, r25
     c2c:	31 f0       	breq	.+12     	; 0xc3a <__vector_32+0x6a>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
     c2e:	8f 5f       	subi	r24, 0xFF	; 255
     c30:	80 93 81 44 	sts	0x4481, r24	; 0x804481 <_ZZ11__vector_32E9charIndex>
     c34:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
     c38:	0d c0       	rjmp	.+26     	; 0xc54 <__vector_32+0x84>
		}
		else
		{
			charIndex = 0;
     c3a:	10 92 81 44 	sts	0x4481, r1	; 0x804481 <_ZZ11__vector_32E9charIndex>
			(*buff)[0] = '\0';
     c3e:	10 82       	st	Z, r1
			buff = nextFullSBTxBuffer();
     c40:	0e 94 30 31 	call	0x6260	; 0x6260 <nextFullSBTxBuffer>
     c44:	80 93 82 44 	sts	0x4482, r24	; 0x804482 <_ZZ11__vector_32E4buff>
     c48:	90 93 83 44 	sts	0x4483, r25	; 0x804483 <_ZZ11__vector_32E4buff+0x1>
			if(!buff)
     c4c:	89 2b       	or	r24, r25
     c4e:	11 f4       	brne	.+4      	; 0xc54 <__vector_32+0x84>
			{
				serialbus_end_tx();
     c50:	0e 94 fc 31 	call	0x63f8	; 0x63f8 <serialbus_end_tx>
			}
		}
	}
	
	if(g_linkbus_usart_number == USART_1)
     c54:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	59 f5       	brne	.+86     	; 0xcb2 <__vector_32+0xe2>
	{
		static LinkbusTxBuffer* buff = 0;
		static uint8_t charIndex = 0;

		if(!buff)
     c5c:	80 91 7f 44 	lds	r24, 0x447F	; 0x80447f <_ZZ11__vector_32E4buff_0>
     c60:	90 91 80 44 	lds	r25, 0x4480	; 0x804480 <_ZZ11__vector_32E4buff_0+0x1>
     c64:	89 2b       	or	r24, r25
     c66:	31 f4       	brne	.+12     	; 0xc74 <__vector_32+0xa4>
		{
			buff = nextFullLBTxBuffer();
     c68:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <_Z18nextFullLBTxBufferv>
     c6c:	80 93 7f 44 	sts	0x447F, r24	; 0x80447f <_ZZ11__vector_32E4buff_0>
     c70:	90 93 80 44 	sts	0x4480, r25	; 0x804480 <_ZZ11__vector_32E4buff_0+0x1>
		}

		if((*buff)[charIndex])
     c74:	e0 91 7f 44 	lds	r30, 0x447F	; 0x80447f <_ZZ11__vector_32E4buff_0>
     c78:	f0 91 80 44 	lds	r31, 0x4480	; 0x804480 <_ZZ11__vector_32E4buff_0+0x1>
     c7c:	80 91 7e 44 	lds	r24, 0x447E	; 0x80447e <__data_end>
     c80:	df 01       	movw	r26, r30
     c82:	a8 0f       	add	r26, r24
     c84:	b1 1d       	adc	r27, r1
     c86:	9c 91       	ld	r25, X
     c88:	99 23       	and	r25, r25
     c8a:	31 f0       	breq	.+12     	; 0xc98 <__vector_32+0xc8>
		{
			/* Put data into buffer, sends the data */
			USART1.TXDATAL = (*buff)[charIndex++];
     c8c:	8f 5f       	subi	r24, 0xFF	; 255
     c8e:	80 93 7e 44 	sts	0x447E, r24	; 0x80447e <__data_end>
     c92:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
     c96:	0d c0       	rjmp	.+26     	; 0xcb2 <__vector_32+0xe2>
		}
		else
		{
			charIndex = 0;
     c98:	10 92 7e 44 	sts	0x447E, r1	; 0x80447e <__data_end>
			(*buff)[0] = '\0';
     c9c:	10 82       	st	Z, r1
			buff = nextFullLBTxBuffer();
     c9e:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <_Z18nextFullLBTxBufferv>
     ca2:	80 93 7f 44 	sts	0x447F, r24	; 0x80447f <_ZZ11__vector_32E4buff_0>
     ca6:	90 93 80 44 	sts	0x4480, r25	; 0x804480 <_ZZ11__vector_32E4buff_0+0x1>
			if(!buff)
     caa:	89 2b       	or	r24, r25
     cac:	11 f4       	brne	.+4      	; 0xcb2 <__vector_32+0xe2>
			{
				linkbus_end_tx();
     cae:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <_Z14linkbus_end_txv>
			}
		}
	}
}
     cb2:	ff 91       	pop	r31
     cb4:	ef 91       	pop	r30
     cb6:	bf 91       	pop	r27
     cb8:	af 91       	pop	r26
     cba:	9f 91       	pop	r25
     cbc:	8f 91       	pop	r24
     cbe:	7f 91       	pop	r23
     cc0:	6f 91       	pop	r22
     cc2:	5f 91       	pop	r21
     cc4:	4f 91       	pop	r20
     cc6:	3f 91       	pop	r19
     cc8:	2f 91       	pop	r18
     cca:	0f 90       	pop	r0
     ccc:	0b be       	out	0x3b, r0	; 59
     cce:	0f 90       	pop	r0
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	0f 90       	pop	r0
     cd4:	1f 90       	pop	r1
     cd6:	18 95       	reti

00000cd8 <__vector_41>:
{
	
}

void suspendEvent()
{
     cd8:	1f 92       	push	r1
     cda:	0f 92       	push	r0
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	0f 92       	push	r0
     ce0:	11 24       	eor	r1, r1
     ce2:	0b b6       	in	r0, 0x3b	; 59
     ce4:	0f 92       	push	r0
     ce6:	2f 93       	push	r18
     ce8:	3f 93       	push	r19
     cea:	4f 93       	push	r20
     cec:	5f 93       	push	r21
     cee:	6f 93       	push	r22
     cf0:	7f 93       	push	r23
     cf2:	8f 93       	push	r24
     cf4:	9f 93       	push	r25
     cf6:	af 93       	push	r26
     cf8:	bf 93       	push	r27
     cfa:	ef 93       	push	r30
     cfc:	ff 93       	push	r31
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	25 97       	sbiw	r28, 0x05	; 5
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
     d10:	80 ff       	sbrs	r24, 0
     d12:	aa c3       	rjmp	.+1876   	; 0x1468 <__vector_41+0x790>
     d14:	80 91 5a 45 	lds	r24, 0x455A	; 0x80455a <_ZZ11__vector_41E3cnt>
     d18:	90 91 5b 45 	lds	r25, 0x455B	; 0x80455b <_ZZ11__vector_41E3cnt+0x1>
     d1c:	9c 01       	movw	r18, r24
     d1e:	2f 5f       	subi	r18, 0xFF	; 255
     d20:	3f 4f       	sbci	r19, 0xFF	; 255
     d22:	20 93 5a 45 	sts	0x455A, r18	; 0x80455a <_ZZ11__vector_41E3cnt>
     d26:	30 93 5b 45 	sts	0x455B, r19	; 0x80455b <_ZZ11__vector_41E3cnt+0x1>
     d2a:	8b 32       	cpi	r24, 0x2B	; 43
     d2c:	91 40       	sbci	r25, 0x01	; 1
     d2e:	09 f0       	breq	.+2      	; 0xd32 <__vector_41+0x5a>
     d30:	98 c3       	rjmp	.+1840   	; 0x1462 <__vector_41+0x78a>
     d32:	10 92 5a 45 	sts	0x455A, r1	; 0x80455a <_ZZ11__vector_41E3cnt>
     d36:	10 92 5b 45 	sts	0x455B, r1	; 0x80455b <_ZZ11__vector_41E3cnt+0x1>
     d3a:	80 91 2f 45 	lds	r24, 0x452F	; 0x80452f <g_event_enabled>
     d3e:	81 11       	cpse	r24, r1
     d40:	03 c0       	rjmp	.+6      	; 0xd48 <__vector_41+0x70>
     d42:	8a b1       	in	r24, 0x0a	; 10
     d44:	80 64       	ori	r24, 0x40	; 64
     d46:	8a b9       	out	0x0a, r24	; 10
     d48:	0e 94 a5 1b 	call	0x374a	; 0x374a <_Z18antennaIsConnectedv>
     d4c:	81 11       	cpse	r24, r1
     d4e:	0a c0       	rjmp	.+20     	; 0xd64 <__vector_41+0x8c>
     d50:	90 91 ee 44 	lds	r25, 0x44EE	; 0x8044ee <g_antenna_connect_state>
     d54:	91 30       	cpi	r25, 0x01	; 1
     d56:	19 f1       	breq	.+70     	; 0xd9e <__vector_41+0xc6>
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	90 93 ee 44 	sts	0x44EE, r25	; 0x8044ee <g_antenna_connect_state>
     d5e:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
     d62:	1d c0       	rjmp	.+58     	; 0xd9e <__vector_41+0xc6>
     d64:	90 91 ee 44 	lds	r25, 0x44EE	; 0x8044ee <g_antenna_connect_state>
     d68:	91 30       	cpi	r25, 0x01	; 1
     d6a:	c9 f4       	brne	.+50     	; 0xd9e <__vector_41+0xc6>
     d6c:	90 91 5c 45 	lds	r25, 0x455C	; 0x80455c <_ZZ11__vector_41E26lastAntennaConnectionState>
     d70:	89 13       	cpse	r24, r25
     d72:	12 c0       	rjmp	.+36     	; 0xd98 <__vector_41+0xc0>
     d74:	90 91 1d 40 	lds	r25, 0x401D	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
     d78:	99 23       	and	r25, r25
     d7a:	89 f0       	breq	.+34     	; 0xd9e <__vector_41+0xc6>
     d7c:	91 50       	subi	r25, 0x01	; 1
     d7e:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
     d82:	91 11       	cpse	r25, r1
     d84:	0c c0       	rjmp	.+24     	; 0xd9e <__vector_41+0xc6>
     d86:	10 92 ee 44 	sts	0x44EE, r1	; 0x8044ee <g_antenna_connect_state>
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZL28g_antenna_connection_changed>
     d90:	93 e0       	ldi	r25, 0x03	; 3
     d92:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
     d96:	03 c0       	rjmp	.+6      	; 0xd9e <__vector_41+0xc6>
     d98:	93 e0       	ldi	r25, 0x03	; 3
     d9a:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <_ZZ11__vector_41E16antennaReadCount>
     d9e:	80 93 5c 45 	sts	0x455C, r24	; 0x80455c <_ZZ11__vector_41E26lastAntennaConnectionState>
     da2:	0e 94 75 01 	call	0x2ea	; 0x2ea <system_tick>
     da6:	80 91 34 45 	lds	r24, 0x4534	; 0x804534 <_ZL10g_sleeping>
     daa:	88 23       	and	r24, r24
     dac:	e1 f1       	breq	.+120    	; 0xe26 <__vector_41+0x14e>
     dae:	80 91 35 45 	lds	r24, 0x4535	; 0x804535 <_ZL23g_seconds_left_to_sleep>
     db2:	90 91 36 45 	lds	r25, 0x4536	; 0x804536 <_ZL23g_seconds_left_to_sleep+0x1>
     db6:	a0 91 37 45 	lds	r26, 0x4537	; 0x804537 <_ZL23g_seconds_left_to_sleep+0x2>
     dba:	b0 91 38 45 	lds	r27, 0x4538	; 0x804538 <_ZL23g_seconds_left_to_sleep+0x3>
     dbe:	89 2b       	or	r24, r25
     dc0:	8a 2b       	or	r24, r26
     dc2:	8b 2b       	or	r24, r27
     dc4:	99 f0       	breq	.+38     	; 0xdec <__vector_41+0x114>
     dc6:	80 91 35 45 	lds	r24, 0x4535	; 0x804535 <_ZL23g_seconds_left_to_sleep>
     dca:	90 91 36 45 	lds	r25, 0x4536	; 0x804536 <_ZL23g_seconds_left_to_sleep+0x1>
     dce:	a0 91 37 45 	lds	r26, 0x4537	; 0x804537 <_ZL23g_seconds_left_to_sleep+0x2>
     dd2:	b0 91 38 45 	lds	r27, 0x4538	; 0x804538 <_ZL23g_seconds_left_to_sleep+0x3>
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	a1 09       	sbc	r26, r1
     dda:	b1 09       	sbc	r27, r1
     ddc:	80 93 35 45 	sts	0x4535, r24	; 0x804535 <_ZL23g_seconds_left_to_sleep>
     de0:	90 93 36 45 	sts	0x4536, r25	; 0x804536 <_ZL23g_seconds_left_to_sleep+0x1>
     de4:	a0 93 37 45 	sts	0x4537, r26	; 0x804537 <_ZL23g_seconds_left_to_sleep+0x2>
     de8:	b0 93 38 45 	sts	0x4538, r27	; 0x804538 <_ZL23g_seconds_left_to_sleep+0x3>
     dec:	80 91 35 45 	lds	r24, 0x4535	; 0x804535 <_ZL23g_seconds_left_to_sleep>
     df0:	90 91 36 45 	lds	r25, 0x4536	; 0x804536 <_ZL23g_seconds_left_to_sleep+0x1>
     df4:	a0 91 37 45 	lds	r26, 0x4537	; 0x804537 <_ZL23g_seconds_left_to_sleep+0x2>
     df8:	b0 91 38 45 	lds	r27, 0x4538	; 0x804538 <_ZL23g_seconds_left_to_sleep+0x3>
     dfc:	89 2b       	or	r24, r25
     dfe:	8a 2b       	or	r24, r26
     e00:	8b 2b       	or	r24, r27
     e02:	31 f0       	breq	.+12     	; 0xe10 <__vector_41+0x138>
     e04:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <_ZL28g_antenna_connection_changed>
     e08:	88 23       	and	r24, r24
     e0a:	21 f0       	breq	.+8      	; 0xe14 <__vector_41+0x13c>
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	03 c0       	rjmp	.+6      	; 0xe16 <__vector_41+0x13e>
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <__vector_41+0x13e>
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	88 23       	and	r24, r24
     e18:	09 f4       	brne	.+2      	; 0xe1c <__vector_41+0x144>
     e1a:	23 c3       	rjmp	.+1606   	; 0x1462 <__vector_41+0x78a>
     e1c:	10 92 33 45 	sts	0x4533, r1	; 0x804533 <_ZL13g_go_to_sleep>
     e20:	10 92 34 45 	sts	0x4534, r1	; 0x804534 <_ZL10g_sleeping>
     e24:	1e c3       	rjmp	.+1596   	; 0x1462 <__vector_41+0x78a>
     e26:	19 82       	std	Y+1, r1	; 0x01
     e28:	1a 82       	std	Y+2, r1	; 0x02
     e2a:	1b 82       	std	Y+3, r1	; 0x03
     e2c:	1c 82       	std	Y+4, r1	; 0x04
     e2e:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
     e32:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
     e36:	89 2b       	or	r24, r25
     e38:	49 f0       	breq	.+18     	; 0xe4c <__vector_41+0x174>
     e3a:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
     e3e:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
     e48:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
     e4c:	80 91 30 45 	lds	r24, 0x4530	; 0x804530 <g_event_commenced>
     e50:	88 23       	and	r24, r24
     e52:	09 f4       	brne	.+2      	; 0xe56 <__vector_41+0x17e>
     e54:	54 c0       	rjmp	.+168    	; 0xefe <__vector_41+0x226>
     e56:	80 91 2b 45 	lds	r24, 0x452B	; 0x80452b <g_event_finish_time>
     e5a:	90 91 2c 45 	lds	r25, 0x452C	; 0x80452c <g_event_finish_time+0x1>
     e5e:	a0 91 2d 45 	lds	r26, 0x452D	; 0x80452d <g_event_finish_time+0x2>
     e62:	b0 91 2e 45 	lds	r27, 0x452E	; 0x80452e <g_event_finish_time+0x3>
     e66:	89 2b       	or	r24, r25
     e68:	8a 2b       	or	r24, r26
     e6a:	8b 2b       	or	r24, r27
     e6c:	51 f0       	breq	.+20     	; 0xe82 <__vector_41+0x1aa>
     e6e:	80 91 31 45 	lds	r24, 0x4531	; 0x804531 <g_check_for_next_event>
     e72:	81 11       	cpse	r24, r1
     e74:	08 c0       	rjmp	.+16     	; 0xe86 <__vector_41+0x1ae>
     e76:	80 91 f7 44 	lds	r24, 0x44F7	; 0x8044f7 <_ZL20g_shutting_down_wifi>
     e7a:	88 23       	and	r24, r24
     e7c:	31 f0       	breq	.+12     	; 0xe8a <__vector_41+0x1b2>
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	05 c0       	rjmp	.+10     	; 0xe8c <__vector_41+0x1b4>
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <__vector_41+0x1b4>
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <__vector_41+0x1b4>
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	88 23       	and	r24, r24
     e8e:	b9 f1       	breq	.+110    	; 0xefe <__vector_41+0x226>
     e90:	ce 01       	movw	r24, r28
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	0e 94 62 01 	call	0x2c4	; 0x2c4 <time>
     e98:	49 81       	ldd	r20, Y+1	; 0x01
     e9a:	5a 81       	ldd	r21, Y+2	; 0x02
     e9c:	6b 81       	ldd	r22, Y+3	; 0x03
     e9e:	7c 81       	ldd	r23, Y+4	; 0x04
     ea0:	80 91 2b 45 	lds	r24, 0x452B	; 0x80452b <g_event_finish_time>
     ea4:	90 91 2c 45 	lds	r25, 0x452C	; 0x80452c <g_event_finish_time+0x1>
     ea8:	a0 91 2d 45 	lds	r26, 0x452D	; 0x80452d <g_event_finish_time+0x2>
     eac:	b0 91 2e 45 	lds	r27, 0x452E	; 0x80452e <g_event_finish_time+0x3>
     eb0:	48 17       	cp	r20, r24
     eb2:	59 07       	cpc	r21, r25
     eb4:	6a 07       	cpc	r22, r26
     eb6:	7b 07       	cpc	r23, r27
     eb8:	10 f1       	brcs	.+68     	; 0xefe <__vector_41+0x226>
     eba:	8c ef       	ldi	r24, 0xFC	; 252
     ebc:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
     ec0:	10 92 ef 44 	sts	0x44EF, r1	; 0x8044ef <_ZL12g_on_the_air>
     ec4:	10 92 f0 44 	sts	0x44F0, r1	; 0x8044f0 <_ZL12g_on_the_air+0x1>
     ec8:	10 92 f1 44 	sts	0x44F1, r1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
     ecc:	10 92 f2 44 	sts	0x44F2, r1	; 0x8044f2 <_ZL12g_on_the_air+0x3>
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <_Z14keyTransmitterh>
     ed6:	10 92 2f 45 	sts	0x452F, r1	; 0x80452f <g_event_enabled>
     eda:	10 92 30 45 	sts	0x4530, r1	; 0x804530 <g_event_commenced>
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	80 93 31 45 	sts	0x4531, r24	; 0x804531 <g_check_for_next_event>
     ee4:	8a e5       	ldi	r24, 0x5A	; 90
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
     eec:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
     ef0:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
     ef4:	88 23       	and	r24, r24
     ef6:	19 f0       	breq	.+6      	; 0xefe <__vector_41+0x226>
     ef8:	8c e3       	ldi	r24, 0x3C	; 60
     efa:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
     efe:	80 91 2f 45 	lds	r24, 0x452F	; 0x80452f <g_event_enabled>
     f02:	88 23       	and	r24, r24
     f04:	09 f4       	brne	.+2      	; 0xf08 <__vector_41+0x230>
     f06:	36 c2       	rjmp	.+1132   	; 0x1374 <__vector_41+0x69c>
     f08:	80 91 30 45 	lds	r24, 0x4530	; 0x804530 <g_event_commenced>
     f0c:	88 23       	and	r24, r24
     f0e:	09 f4       	brne	.+2      	; 0xf12 <__vector_41+0x23a>
     f10:	a6 c1       	rjmp	.+844    	; 0x125e <__vector_41+0x586>
     f12:	80 91 f3 44 	lds	r24, 0x44F3	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
     f16:	90 91 f4 44 	lds	r25, 0x44F4	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
     f1a:	89 2b       	or	r24, r25
     f1c:	49 f0       	breq	.+18     	; 0xf30 <__vector_41+0x258>
     f1e:	80 91 f3 44 	lds	r24, 0x44F3	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
     f22:	90 91 f4 44 	lds	r25, 0x44F4	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
     f2c:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
     f30:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
     f34:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
     f38:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
     f3c:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
     f40:	89 2b       	or	r24, r25
     f42:	8a 2b       	or	r24, r26
     f44:	8b 2b       	or	r24, r27
     f46:	09 f4       	brne	.+2      	; 0xf4a <__vector_41+0x272>
     f48:	15 c2       	rjmp	.+1066   	; 0x1374 <__vector_41+0x69c>
     f4a:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
     f4e:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
     f52:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
     f56:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
     f5a:	18 16       	cp	r1, r24
     f5c:	19 06       	cpc	r1, r25
     f5e:	1a 06       	cpc	r1, r26
     f60:	1b 06       	cpc	r1, r27
     f62:	0c f0       	brlt	.+2      	; 0xf66 <__vector_41+0x28e>
     f64:	2a c1       	rjmp	.+596    	; 0x11ba <__vector_41+0x4e2>
     f66:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
     f6a:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
     f6e:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
     f72:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	a1 09       	sbc	r26, r1
     f7a:	b1 09       	sbc	r27, r1
     f7c:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
     f80:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
     f84:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
     f88:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
     f8c:	80 91 f3 44 	lds	r24, 0x44F3	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
     f90:	90 91 f4 44 	lds	r25, 0x44F4	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
     f94:	89 2b       	or	r24, r25
     f96:	41 f4       	brne	.+16     	; 0xfa8 <__vector_41+0x2d0>
     f98:	80 91 23 45 	lds	r24, 0x4523	; 0x804523 <g_time_needed_for_ID>
     f9c:	90 91 24 45 	lds	r25, 0x4524	; 0x804524 <g_time_needed_for_ID+0x1>
     fa0:	89 2b       	or	r24, r25
     fa2:	21 f4       	brne	.+8      	; 0xfac <__vector_41+0x2d4>
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	03 c0       	rjmp	.+6      	; 0xfae <__vector_41+0x2d6>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	01 c0       	rjmp	.+2      	; 0xfae <__vector_41+0x2d6>
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	88 23       	and	r24, r24
     fb0:	81 f1       	breq	.+96     	; 0x1012 <__vector_41+0x33a>
     fb2:	80 91 23 45 	lds	r24, 0x4523	; 0x804523 <g_time_needed_for_ID>
     fb6:	90 91 24 45 	lds	r25, 0x4524	; 0x804524 <g_time_needed_for_ID+0x1>
     fba:	a0 e0       	ldi	r26, 0x00	; 0
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	40 91 ef 44 	lds	r20, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
     fc2:	50 91 f0 44 	lds	r21, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
     fc6:	60 91 f1 44 	lds	r22, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
     fca:	70 91 f2 44 	lds	r23, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
     fce:	84 17       	cp	r24, r20
     fd0:	95 07       	cpc	r25, r21
     fd2:	a6 07       	cpc	r26, r22
     fd4:	b7 07       	cpc	r27, r23
     fd6:	e9 f4       	brne	.+58     	; 0x1012 <__vector_41+0x33a>
     fd8:	8f ee       	ldi	r24, 0xEF	; 239
     fda:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
     fde:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
     fe2:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
     fe6:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
     fea:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
     fee:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
     ff2:	0e 94 9a 19 	call	0x3334	; 0x3334 <_Z13throttleValueh>
     ff6:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
     ffa:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
     ffe:	1d 82       	std	Y+5, r1	; 0x05
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	be 01       	movw	r22, r28
    1006:	6b 5f       	subi	r22, 0xFB	; 251
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	8e e0       	ldi	r24, 0x0E	; 14
    100c:	95 e4       	ldi	r25, 0x45	; 69
    100e:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <_Z9makeMorsePcPhS0_>
    1012:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    1016:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    101a:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    101e:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    1022:	89 2b       	or	r24, r25
    1024:	8a 2b       	or	r24, r26
    1026:	8b 2b       	or	r24, r27
    1028:	09 f0       	breq	.+2      	; 0x102c <__vector_41+0x354>
    102a:	a4 c1       	rjmp	.+840    	; 0x1374 <__vector_41+0x69c>
    102c:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    1030:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1034:	89 2b       	or	r24, r25
    1036:	09 f4       	brne	.+2      	; 0x103a <__vector_41+0x362>
    1038:	a7 c0       	rjmp	.+334    	; 0x1188 <__vector_41+0x4b0>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <_Z14keyTransmitterh>
    1040:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    1044:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1048:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    104c:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    1050:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    1054:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    1058:	05 2e       	mov	r0, r21
    105a:	00 0c       	add	r0, r0
    105c:	66 0b       	sbc	r22, r22
    105e:	77 0b       	sbc	r23, r23
    1060:	84 1b       	sub	r24, r20
    1062:	95 0b       	sbc	r25, r21
    1064:	a6 0b       	sbc	r26, r22
    1066:	b7 0b       	sbc	r27, r23
    1068:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
    106c:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    1070:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    1074:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	8d 83       	std	Y+5, r24	; 0x05
    107c:	40 e0       	ldi	r20, 0x00	; 0
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	be 01       	movw	r22, r28
    1082:	6b 5f       	subi	r22, 0xFB	; 251
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	89 ef       	ldi	r24, 0xF9	; 249
    1088:	94 e4       	ldi	r25, 0x44	; 68
    108a:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <_Z9makeMorsePcPhS0_>
    108e:	8e ef       	ldi	r24, 0xFE	; 254
    1090:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
    1094:	ce 01       	movw	r24, r28
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	0e 94 62 01 	call	0x2c4	; 0x2c4 <time>
    109c:	29 81       	ldd	r18, Y+1	; 0x01
    109e:	3a 81       	ldd	r19, Y+2	; 0x02
    10a0:	4b 81       	ldd	r20, Y+3	; 0x03
    10a2:	5c 81       	ldd	r21, Y+4	; 0x04
    10a4:	80 91 2b 45 	lds	r24, 0x452B	; 0x80452b <g_event_finish_time>
    10a8:	90 91 2c 45 	lds	r25, 0x452C	; 0x80452c <g_event_finish_time+0x1>
    10ac:	a0 91 2d 45 	lds	r26, 0x452D	; 0x80452d <g_event_finish_time+0x2>
    10b0:	b0 91 2e 45 	lds	r27, 0x452E	; 0x80452e <g_event_finish_time+0x3>
    10b4:	28 17       	cp	r18, r24
    10b6:	39 07       	cpc	r19, r25
    10b8:	4a 07       	cpc	r20, r26
    10ba:	5b 07       	cpc	r21, r27
    10bc:	58 f4       	brcc	.+22     	; 0x10d4 <__vector_41+0x3fc>
    10be:	60 91 2b 45 	lds	r22, 0x452B	; 0x80452b <g_event_finish_time>
    10c2:	70 91 2c 45 	lds	r23, 0x452C	; 0x80452c <g_event_finish_time+0x1>
    10c6:	80 91 2d 45 	lds	r24, 0x452D	; 0x80452d <g_event_finish_time+0x2>
    10ca:	90 91 2e 45 	lds	r25, 0x452E	; 0x80452e <g_event_finish_time+0x3>
    10ce:	0e 94 75 3d 	call	0x7aea	; 0x7aea <_Z7timeDifmm>
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <__vector_41+0x402>
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	cb 01       	movw	r24, r22
    10da:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    10de:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    10e2:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    10e6:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    10ea:	24 0f       	add	r18, r20
    10ec:	35 1f       	adc	r19, r21
    10ee:	21 5f       	subi	r18, 0xF1	; 241
    10f0:	3f 4f       	sbci	r19, 0xFF	; 255
    10f2:	03 2e       	mov	r0, r19
    10f4:	00 0c       	add	r0, r0
    10f6:	44 0b       	sbc	r20, r20
    10f8:	55 0b       	sbc	r21, r21
    10fa:	26 17       	cp	r18, r22
    10fc:	37 07       	cpc	r19, r23
    10fe:	48 07       	cpc	r20, r24
    1100:	59 07       	cpc	r21, r25
    1102:	0c f0       	brlt	.+2      	; 0x1106 <__vector_41+0x42e>
    1104:	37 c1       	rjmp	.+622    	; 0x1374 <__vector_41+0x69c>
    1106:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    110a:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    110e:	40 97       	sbiw	r24, 0x10	; 16
    1110:	34 f0       	brlt	.+12     	; 0x111e <__vector_41+0x446>
    1112:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1116:	88 23       	and	r24, r24
    1118:	21 f0       	breq	.+8      	; 0x1122 <__vector_41+0x44a>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <__vector_41+0x44c>
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <__vector_41+0x44c>
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	88 23       	and	r24, r24
    1126:	09 f4       	brne	.+2      	; 0x112a <__vector_41+0x452>
    1128:	25 c1       	rjmp	.+586    	; 0x1374 <__vector_41+0x69c>
    112a:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <g_off_air_seconds>
    112e:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    1132:	0a 97       	sbiw	r24, 0x0a	; 10
    1134:	09 2e       	mov	r0, r25
    1136:	00 0c       	add	r0, r0
    1138:	aa 0b       	sbc	r26, r26
    113a:	bb 0b       	sbc	r27, r27
    113c:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    1140:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    1144:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    1148:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	80 93 f8 44 	sts	0x44F8, r24	; 0x8044f8 <_ZL11g_sleepType>
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	80 93 33 45 	sts	0x4533, r24	; 0x804533 <_ZL13g_go_to_sleep>
    1158:	80 91 f3 44 	lds	r24, 0x44F3	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
    115c:	90 91 f4 44 	lds	r25, 0x44F4	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
    1160:	40 91 17 40 	lds	r20, 0x4017	; 0x804017 <_ZL18g_seconds_to_sleep>
    1164:	50 91 18 40 	lds	r21, 0x4018	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    1168:	60 91 19 40 	lds	r22, 0x4019	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    116c:	70 91 1a 40 	lds	r23, 0x401A	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    1170:	84 1b       	sub	r24, r20
    1172:	95 0b       	sbc	r25, r21
    1174:	18 16       	cp	r1, r24
    1176:	19 06       	cpc	r1, r25
    1178:	14 f0       	brlt	.+4      	; 0x117e <__vector_41+0x4a6>
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
    1182:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
    1186:	f6 c0       	rjmp	.+492    	; 0x1374 <__vector_41+0x69c>
    1188:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    118c:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1190:	09 2e       	mov	r0, r25
    1192:	00 0c       	add	r0, r0
    1194:	aa 0b       	sbc	r26, r26
    1196:	bb 0b       	sbc	r27, r27
    1198:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
    119c:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    11a0:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    11a4:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    11a8:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    11ac:	0e 94 9a 19 	call	0x3334	; 0x3334 <_Z13throttleValueh>
    11b0:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    11b4:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    11b8:	dd c0       	rjmp	.+442    	; 0x1374 <__vector_41+0x69c>
    11ba:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    11be:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    11c2:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    11c6:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    11ca:	bb 23       	and	r27, r27
    11cc:	0c f0       	brlt	.+2      	; 0x11d0 <__vector_41+0x4f8>
    11ce:	d2 c0       	rjmp	.+420    	; 0x1374 <__vector_41+0x69c>
    11d0:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    11d4:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    11d8:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    11dc:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	a1 1d       	adc	r26, r1
    11e4:	b1 1d       	adc	r27, r1
    11e6:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
    11ea:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    11ee:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    11f2:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    11f6:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    11fa:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    11fe:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    1202:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    1206:	89 2b       	or	r24, r25
    1208:	8a 2b       	or	r24, r26
    120a:	8b 2b       	or	r24, r27
    120c:	09 f0       	breq	.+2      	; 0x1210 <__vector_41+0x538>
    120e:	b2 c0       	rjmp	.+356    	; 0x1374 <__vector_41+0x69c>
    1210:	8d ef       	ldi	r24, 0xFD	; 253
    1212:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
    1216:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    121a:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    121e:	09 2e       	mov	r0, r25
    1220:	00 0c       	add	r0, r0
    1222:	aa 0b       	sbc	r26, r26
    1224:	bb 0b       	sbc	r27, r27
    1226:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
    122a:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    122e:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    1232:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    1236:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    123a:	0e 94 9a 19 	call	0x3334	; 0x3334 <_Z13throttleValueh>
    123e:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1242:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	8d 83       	std	Y+5, r24	; 0x05
    124a:	40 e0       	ldi	r20, 0x00	; 0
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	be 01       	movw	r22, r28
    1250:	6b 5f       	subi	r22, 0xFB	; 251
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	89 ef       	ldi	r24, 0xF9	; 249
    1256:	94 e4       	ldi	r25, 0x44	; 68
    1258:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <_Z9makeMorsePcPhS0_>
    125c:	8b c0       	rjmp	.+278    	; 0x1374 <__vector_41+0x69c>
    125e:	80 91 27 45 	lds	r24, 0x4527	; 0x804527 <g_event_start_time>
    1262:	90 91 28 45 	lds	r25, 0x4528	; 0x804528 <g_event_start_time+0x1>
    1266:	a0 91 29 45 	lds	r26, 0x4529	; 0x804529 <g_event_start_time+0x2>
    126a:	b0 91 2a 45 	lds	r27, 0x452A	; 0x80452a <g_event_start_time+0x3>
    126e:	89 2b       	or	r24, r25
    1270:	8a 2b       	or	r24, r26
    1272:	8b 2b       	or	r24, r27
    1274:	09 f4       	brne	.+2      	; 0x1278 <__vector_41+0x5a0>
    1276:	7e c0       	rjmp	.+252    	; 0x1374 <__vector_41+0x69c>
    1278:	ce 01       	movw	r24, r28
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <time>
    1280:	49 81       	ldd	r20, Y+1	; 0x01
    1282:	5a 81       	ldd	r21, Y+2	; 0x02
    1284:	6b 81       	ldd	r22, Y+3	; 0x03
    1286:	7c 81       	ldd	r23, Y+4	; 0x04
    1288:	80 91 27 45 	lds	r24, 0x4527	; 0x804527 <g_event_start_time>
    128c:	90 91 28 45 	lds	r25, 0x4528	; 0x804528 <g_event_start_time+0x1>
    1290:	a0 91 29 45 	lds	r26, 0x4529	; 0x804529 <g_event_start_time+0x2>
    1294:	b0 91 2a 45 	lds	r27, 0x452A	; 0x80452a <g_event_start_time+0x3>
    1298:	48 17       	cp	r20, r24
    129a:	59 07       	cpc	r21, r25
    129c:	6a 07       	cpc	r22, r26
    129e:	7b 07       	cpc	r23, r27
    12a0:	08 f4       	brcc	.+2      	; 0x12a4 <__vector_41+0x5cc>
    12a2:	68 c0       	rjmp	.+208    	; 0x1374 <__vector_41+0x69c>
    12a4:	80 91 25 45 	lds	r24, 0x4525	; 0x804525 <g_intra_cycle_delay_time>
    12a8:	90 91 26 45 	lds	r25, 0x4526	; 0x804526 <g_intra_cycle_delay_time+0x1>
    12ac:	89 2b       	or	r24, r25
    12ae:	59 f1       	breq	.+86     	; 0x1306 <__vector_41+0x62e>
    12b0:	8e ef       	ldi	r24, 0xFE	; 254
    12b2:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
    12b6:	80 91 25 45 	lds	r24, 0x4525	; 0x804525 <g_intra_cycle_delay_time>
    12ba:	90 91 26 45 	lds	r25, 0x4526	; 0x804526 <g_intra_cycle_delay_time+0x1>
    12be:	91 95       	neg	r25
    12c0:	81 95       	neg	r24
    12c2:	91 09       	sbc	r25, r1
    12c4:	09 2e       	mov	r0, r25
    12c6:	00 0c       	add	r0, r0
    12c8:	aa 0b       	sbc	r26, r26
    12ca:	bb 0b       	sbc	r27, r27
    12cc:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
    12d0:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    12d4:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    12d8:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    12dc:	20 91 25 45 	lds	r18, 0x4525	; 0x804525 <g_intra_cycle_delay_time>
    12e0:	30 91 26 45 	lds	r19, 0x4526	; 0x804526 <g_intra_cycle_delay_time+0x1>
    12e4:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    12e8:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    12ec:	82 0f       	add	r24, r18
    12ee:	93 1f       	adc	r25, r19
    12f0:	20 91 23 45 	lds	r18, 0x4523	; 0x804523 <g_time_needed_for_ID>
    12f4:	30 91 24 45 	lds	r19, 0x4524	; 0x804524 <g_time_needed_for_ID+0x1>
    12f8:	82 1b       	sub	r24, r18
    12fa:	93 0b       	sbc	r25, r19
    12fc:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
    1300:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
    1304:	34 c0       	rjmp	.+104    	; 0x136e <__vector_41+0x696>
    1306:	8d ef       	ldi	r24, 0xFD	; 253
    1308:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
    130c:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1310:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1314:	09 2e       	mov	r0, r25
    1316:	00 0c       	add	r0, r0
    1318:	aa 0b       	sbc	r26, r26
    131a:	bb 0b       	sbc	r27, r27
    131c:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
    1320:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    1324:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    1328:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    132c:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    1330:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    1334:	20 91 23 45 	lds	r18, 0x4523	; 0x804523 <g_time_needed_for_ID>
    1338:	30 91 24 45 	lds	r19, 0x4524	; 0x804524 <g_time_needed_for_ID+0x1>
    133c:	82 1b       	sub	r24, r18
    133e:	93 0b       	sbc	r25, r19
    1340:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
    1344:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
    1348:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    134c:	0e 94 9a 19 	call	0x3334	; 0x3334 <_Z13throttleValueh>
    1350:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    1354:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	8d 83       	std	Y+5, r24	; 0x05
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	be 01       	movw	r22, r28
    1362:	6b 5f       	subi	r22, 0xFB	; 251
    1364:	7f 4f       	sbci	r23, 0xFF	; 255
    1366:	89 ef       	ldi	r24, 0xF9	; 249
    1368:	94 e4       	ldi	r25, 0x44	; 68
    136a:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <_Z9makeMorsePcPhS0_>
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	80 93 30 45 	sts	0x4530, r24	; 0x804530 <g_event_commenced>
    1374:	80 91 f6 44 	lds	r24, 0x44F6	; 0x8044f6 <_ZL19g_wifi_enable_delay>
    1378:	88 23       	and	r24, r24
    137a:	e1 f0       	breq	.+56     	; 0x13b4 <__vector_41+0x6dc>
    137c:	80 91 f6 44 	lds	r24, 0x44F6	; 0x8044f6 <_ZL19g_wifi_enable_delay>
    1380:	81 50       	subi	r24, 0x01	; 1
    1382:	80 93 f6 44 	sts	0x44F6, r24	; 0x8044f6 <_ZL19g_wifi_enable_delay>
    1386:	80 91 f6 44 	lds	r24, 0x44F6	; 0x8044f6 <_ZL19g_wifi_enable_delay>
    138a:	85 30       	cpi	r24, 0x05	; 5
    138c:	39 f4       	brne	.+14     	; 0x139c <__vector_41+0x6c4>
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	0e 94 b4 20 	call	0x4168	; 0x4168 <_Z10wifi_powerb>
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	0e 94 be 20 	call	0x417c	; 0x417c <_Z10wifi_resetb>
    139a:	63 c0       	rjmp	.+198    	; 0x1462 <__vector_41+0x78a>
    139c:	80 91 f6 44 	lds	r24, 0x44F6	; 0x8044f6 <_ZL19g_wifi_enable_delay>
    13a0:	81 11       	cpse	r24, r1
    13a2:	5f c0       	rjmp	.+190    	; 0x1462 <__vector_41+0x78a>
    13a4:	46 e0       	ldi	r20, 0x06	; 6
    13a6:	60 e8       	ldi	r22, 0x80	; 128
    13a8:	75 e2       	ldi	r23, 0x25	; 37
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <_Z12linkbus_initm14USART_Number_t>
    13b2:	57 c0       	rjmp	.+174    	; 0x1462 <__vector_41+0x78a>
    13b4:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <g_update_timeout_seconds>
    13b8:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <g_update_timeout_seconds+0x1>
    13bc:	89 2b       	or	r24, r25
    13be:	71 f0       	breq	.+28     	; 0x13dc <__vector_41+0x704>
    13c0:	80 91 f7 44 	lds	r24, 0x44F7	; 0x8044f7 <_ZL20g_shutting_down_wifi>
    13c4:	81 11       	cpse	r24, r1
    13c6:	0c c0       	rjmp	.+24     	; 0x13e0 <__vector_41+0x708>
    13c8:	80 91 31 45 	lds	r24, 0x4531	; 0x804531 <g_check_for_next_event>
    13cc:	81 11       	cpse	r24, r1
    13ce:	0a c0       	rjmp	.+20     	; 0x13e4 <__vector_41+0x70c>
    13d0:	80 91 32 45 	lds	r24, 0x4532	; 0x804532 <g_waiting_for_next_event>
    13d4:	88 23       	and	r24, r24
    13d6:	41 f0       	breq	.+16     	; 0x13e8 <__vector_41+0x710>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	07 c0       	rjmp	.+14     	; 0x13ea <__vector_41+0x712>
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	05 c0       	rjmp	.+10     	; 0x13ea <__vector_41+0x712>
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	03 c0       	rjmp	.+6      	; 0x13ea <__vector_41+0x712>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	01 c0       	rjmp	.+2      	; 0x13ea <__vector_41+0x712>
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	88 23       	and	r24, r24
    13ec:	99 f1       	breq	.+102    	; 0x1454 <__vector_41+0x77c>
    13ee:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    13f2:	88 23       	and	r24, r24
    13f4:	79 f1       	breq	.+94     	; 0x1454 <__vector_41+0x77c>
    13f6:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    13fa:	81 50       	subi	r24, 0x01	; 1
    13fc:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1400:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    1404:	81 11       	cpse	r24, r1
    1406:	26 c0       	rjmp	.+76     	; 0x1454 <__vector_41+0x77c>
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	0e 94 be 20 	call	0x417c	; 0x417c <_Z10wifi_resetb>
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	0e 94 b4 20 	call	0x4168	; 0x4168 <_Z10wifi_powerb>
    1414:	10 92 f7 44 	sts	0x44F7, r1	; 0x8044f7 <_ZL20g_shutting_down_wifi>
    1418:	80 91 2f 45 	lds	r24, 0x452F	; 0x80452f <g_event_enabled>
    141c:	81 11       	cpse	r24, r1
    141e:	12 c0       	rjmp	.+36     	; 0x1444 <__vector_41+0x76c>
    1420:	84 e0       	ldi	r24, 0x04	; 4
    1422:	80 93 f8 44 	sts	0x44F8, r24	; 0x8044f8 <_ZL11g_sleepType>
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	80 93 33 45 	sts	0x4533, r24	; 0x804533 <_ZL13g_go_to_sleep>
    142c:	8f ef       	ldi	r24, 0xFF	; 255
    142e:	9f ef       	ldi	r25, 0xFF	; 255
    1430:	dc 01       	movw	r26, r24
    1432:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    1436:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    143a:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    143e:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    1442:	06 c0       	rjmp	.+12     	; 0x1450 <__vector_41+0x778>
    1444:	80 91 f8 44 	lds	r24, 0x44F8	; 0x8044f8 <_ZL11g_sleepType>
    1448:	83 30       	cpi	r24, 0x03	; 3
    144a:	11 f4       	brne	.+4      	; 0x1450 <__vector_41+0x778>
    144c:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <_Z12eventEnabledv>
    1450:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    1454:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL13g_wifi_active>
    1458:	88 23       	and	r24, r24
    145a:	19 f0       	breq	.+6      	; 0x1462 <__vector_41+0x78a>
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	80 93 f5 44 	sts	0x44F5, r24	; 0x8044f5 <_ZL16g_report_seconds>
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
    1468:	25 96       	adiw	r28, 0x05	; 5
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	0f 90       	pop	r0
    148c:	0b be       	out	0x3b, r0	; 59
    148e:	0f 90       	pop	r0
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	0f 90       	pop	r0
    1494:	1f 90       	pop	r1
    1496:	18 95       	reti

00001498 <__vector_12>:
    1498:	1f 92       	push	r1
    149a:	0f 92       	push	r0
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	0f 92       	push	r0
    14a0:	11 24       	eor	r1, r1
    14a2:	0b b6       	in	r0, 0x3b	; 59
    14a4:	0f 92       	push	r0
    14a6:	2f 93       	push	r18
    14a8:	3f 93       	push	r19
    14aa:	4f 93       	push	r20
    14ac:	5f 93       	push	r21
    14ae:	6f 93       	push	r22
    14b0:	7f 93       	push	r23
    14b2:	8f 93       	push	r24
    14b4:	9f 93       	push	r25
    14b6:	af 93       	push	r26
    14b8:	bf 93       	push	r27
    14ba:	ef 93       	push	r30
    14bc:	ff 93       	push	r31
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <__vector_12+0x2c>
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    14cc:	80 ff       	sbrs	r24, 0
    14ce:	d1 c0       	rjmp	.+418    	; 0x1672 <__vector_12+0x1da>
    14d0:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    14d4:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    14d8:	89 2b       	or	r24, r25
    14da:	49 f0       	breq	.+18     	; 0x14ee <__vector_12+0x56>
    14dc:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    14e0:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    14ea:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    14ee:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    14f2:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    14f6:	89 2b       	or	r24, r25
    14f8:	49 f0       	breq	.+18     	; 0x150c <__vector_12+0x74>
    14fa:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    14fe:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c1_timeout_ticks>
    1508:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    150c:	80 91 ec 44 	lds	r24, 0x44EC	; 0x8044ec <_ZL21g_util_tick_countdown>
    1510:	90 91 ed 44 	lds	r25, 0x44ED	; 0x8044ed <_ZL21g_util_tick_countdown+0x1>
    1514:	89 2b       	or	r24, r25
    1516:	49 f0       	breq	.+18     	; 0x152a <__vector_12+0x92>
    1518:	80 91 ec 44 	lds	r24, 0x44EC	; 0x8044ec <_ZL21g_util_tick_countdown>
    151c:	90 91 ed 44 	lds	r25, 0x44ED	; 0x8044ed <_ZL21g_util_tick_countdown+0x1>
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	80 93 ec 44 	sts	0x44EC, r24	; 0x8044ec <_ZL21g_util_tick_countdown>
    1526:	90 93 ed 44 	sts	0x44ED, r25	; 0x8044ed <_ZL21g_util_tick_countdown+0x1>
    152a:	80 91 2f 45 	lds	r24, 0x452F	; 0x80452f <g_event_enabled>
    152e:	88 23       	and	r24, r24
    1530:	29 f0       	breq	.+10     	; 0x153c <__vector_12+0xa4>
    1532:	80 91 30 45 	lds	r24, 0x4530	; 0x804530 <g_event_commenced>
    1536:	81 11       	cpse	r24, r1
    1538:	03 c0       	rjmp	.+6      	; 0x1540 <__vector_12+0xa8>
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <__vector_12+0xaa>
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <__vector_12+0xaa>
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	88 23       	and	r24, r24
    1544:	09 f4       	brne	.+2      	; 0x1548 <__vector_12+0xb0>
    1546:	92 c0       	rjmp	.+292    	; 0x166c <__vector_12+0x1d4>
    1548:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    154c:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    1550:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    1554:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    1558:	18 16       	cp	r1, r24
    155a:	19 06       	cpc	r1, r25
    155c:	1a 06       	cpc	r1, r26
    155e:	1b 06       	cpc	r1, r27
    1560:	0c f0       	brlt	.+2      	; 0x1564 <__vector_12+0xcc>
    1562:	66 c0       	rjmp	.+204    	; 0x1630 <__vector_12+0x198>
    1564:	80 91 5d 45 	lds	r24, 0x455D	; 0x80455d <_ZZ11__vector_12E7codeInc>
    1568:	90 91 5e 45 	lds	r25, 0x455E	; 0x80455e <_ZZ11__vector_12E7codeInc+0x1>
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	09 f4       	brne	.+2      	; 0x1572 <__vector_12+0xda>
    1570:	47 c0       	rjmp	.+142    	; 0x1600 <__vector_12+0x168>
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	80 93 5d 45 	sts	0x455D, r24	; 0x80455d <_ZZ11__vector_12E7codeInc>
    1578:	90 93 5e 45 	sts	0x455E, r25	; 0x80455e <_ZZ11__vector_12E7codeInc+0x1>
    157c:	89 2b       	or	r24, r25
    157e:	09 f0       	breq	.+2      	; 0x1582 <__vector_12+0xea>
    1580:	75 c0       	rjmp	.+234    	; 0x166c <__vector_12+0x1d4>
    1582:	ae 01       	movw	r20, r28
    1584:	4f 5f       	subi	r20, 0xFF	; 255
    1586:	5f 4f       	sbci	r21, 0xFF	; 255
    1588:	be 01       	movw	r22, r28
    158a:	6e 5f       	subi	r22, 0xFE	; 254
    158c:	7f 4f       	sbci	r23, 0xFF	; 255
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <_Z9makeMorsePcPhS0_>
    1596:	80 93 5f 45 	sts	0x455F, r24	; 0x80455f <_ZZ11__vector_12E3key>
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	81 11       	cpse	r24, r1
    159e:	25 c0       	rjmp	.+74     	; 0x15ea <__vector_12+0x152>
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	88 23       	and	r24, r24
    15a4:	11 f1       	breq	.+68     	; 0x15ea <__vector_12+0x152>
    15a6:	8d ef       	ldi	r24, 0xFD	; 253
    15a8:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
    15ac:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    15b0:	0e 94 9a 19 	call	0x3334	; 0x3334 <_Z13throttleValueh>
    15b4:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    15b8:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	8a 83       	std	Y+2, r24	; 0x02
    15c0:	40 e0       	ldi	r20, 0x00	; 0
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	be 01       	movw	r22, r28
    15c6:	6e 5f       	subi	r22, 0xFE	; 254
    15c8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ca:	89 ef       	ldi	r24, 0xF9	; 249
    15cc:	94 e4       	ldi	r25, 0x44	; 68
    15ce:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <_Z9makeMorsePcPhS0_>
    15d2:	ae 01       	movw	r20, r28
    15d4:	4f 5f       	subi	r20, 0xFF	; 255
    15d6:	5f 4f       	sbci	r21, 0xFF	; 255
    15d8:	be 01       	movw	r22, r28
    15da:	6e 5f       	subi	r22, 0xFE	; 254
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <_Z9makeMorsePcPhS0_>
    15e6:	80 93 5f 45 	sts	0x455F, r24	; 0x80455f <_ZZ11__vector_12E3key>
    15ea:	80 91 5f 45 	lds	r24, 0x455F	; 0x80455f <_ZZ11__vector_12E3key>
    15ee:	88 23       	and	r24, r24
    15f0:	e9 f1       	breq	.+122    	; 0x166c <__vector_12+0x1d4>
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_Z18powerToTransmitterh>
    15f8:	89 b1       	in	r24, 0x09	; 9
    15fa:	8f 7b       	andi	r24, 0xBF	; 191
    15fc:	89 b9       	out	0x09, r24	; 9
    15fe:	36 c0       	rjmp	.+108    	; 0x166c <__vector_12+0x1d4>
    1600:	80 91 5f 45 	lds	r24, 0x455F	; 0x80455f <_ZZ11__vector_12E3key>
    1604:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <_Z14keyTransmitterh>
    1608:	80 91 5f 45 	lds	r24, 0x455F	; 0x80455f <_ZZ11__vector_12E3key>
    160c:	81 11       	cpse	r24, r1
    160e:	04 c0       	rjmp	.+8      	; 0x1618 <__vector_12+0x180>
    1610:	89 b1       	in	r24, 0x09	; 9
    1612:	80 64       	ori	r24, 0x40	; 64
    1614:	89 b9       	out	0x09, r24	; 9
    1616:	03 c0       	rjmp	.+6      	; 0x161e <__vector_12+0x186>
    1618:	89 b1       	in	r24, 0x09	; 9
    161a:	8f 7b       	andi	r24, 0xBF	; 191
    161c:	89 b9       	out	0x09, r24	; 9
    161e:	80 91 07 40 	lds	r24, 0x4007	; 0x804007 <_ZL15g_code_throttle>
    1622:	90 91 08 40 	lds	r25, 0x4008	; 0x804008 <_ZL15g_code_throttle+0x1>
    1626:	80 93 5d 45 	sts	0x455D, r24	; 0x80455d <_ZZ11__vector_12E7codeInc>
    162a:	90 93 5e 45 	sts	0x455E, r25	; 0x80455e <_ZZ11__vector_12E7codeInc+0x1>
    162e:	1e c0       	rjmp	.+60     	; 0x166c <__vector_12+0x1d4>
    1630:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    1634:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    1638:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    163c:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    1640:	89 2b       	or	r24, r25
    1642:	8a 2b       	or	r24, r26
    1644:	8b 2b       	or	r24, r27
    1646:	91 f4       	brne	.+36     	; 0x166c <__vector_12+0x1d4>
    1648:	80 91 5f 45 	lds	r24, 0x455F	; 0x80455f <_ZZ11__vector_12E3key>
    164c:	88 23       	and	r24, r24
    164e:	71 f0       	breq	.+28     	; 0x166c <__vector_12+0x1d4>
    1650:	10 92 5f 45 	sts	0x455F, r1	; 0x80455f <_ZZ11__vector_12E3key>
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <_Z14keyTransmitterh>
    165a:	89 b1       	in	r24, 0x09	; 9
    165c:	80 64       	ori	r24, 0x40	; 64
    165e:	89 b9       	out	0x09, r24	; 9
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	0e 94 57 3b 	call	0x76ae	; 0x76ae <_Z18powerToTransmitterh>
    1666:	8e ef       	ldi	r24, 0xFE	; 254
    1668:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	ff 91       	pop	r31
    167c:	ef 91       	pop	r30
    167e:	bf 91       	pop	r27
    1680:	af 91       	pop	r26
    1682:	9f 91       	pop	r25
    1684:	8f 91       	pop	r24
    1686:	7f 91       	pop	r23
    1688:	6f 91       	pop	r22
    168a:	5f 91       	pop	r21
    168c:	4f 91       	pop	r20
    168e:	3f 91       	pop	r19
    1690:	2f 91       	pop	r18
    1692:	0f 90       	pop	r0
    1694:	0b be       	out	0x3b, r0	; 59
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0f 90       	pop	r0
    169c:	1f 90       	pop	r1
    169e:	18 95       	reti

000016a0 <main>:
    16a0:	0e 94 91 01 	call	0x322	; 0x322 <atmel_start_init>
    16a4:	89 b1       	in	r24, 0x09	; 9
    16a6:	80 64       	ori	r24, 0x40	; 64
    16a8:	89 b9       	out	0x09, r24	; 9
    16aa:	83 e4       	ldi	r24, 0x43	; 67
    16ac:	95 e4       	ldi	r25, 0x45	; 69
    16ae:	0e 94 71 29 	call	0x52e2	; 0x52e2 <_ZN13EepromManager20initializeEEPROMVarsEv>
    16b2:	83 e4       	ldi	r24, 0x43	; 67
    16b4:	95 e4       	ldi	r25, 0x45	; 69
    16b6:	0e 94 85 28 	call	0x510a	; 0x510a <_ZN13EepromManager11readNonVolsEv>
    16ba:	0e 94 8a 32 	call	0x6514	; 0x6514 <sb_send_NewLine>
    16be:	87 e4       	ldi	r24, 0x47	; 71
    16c0:	90 e4       	ldi	r25, 0x40	; 64
    16c2:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    16c6:	84 e6       	ldi	r24, 0x64	; 100
    16c8:	90 e4       	ldi	r25, 0x40	; 64
    16ca:	9f 93       	push	r25
    16cc:	8f 93       	push	r24
    16ce:	88 e6       	ldi	r24, 0x68	; 104
    16d0:	90 e4       	ldi	r25, 0x40	; 64
    16d2:	9f 93       	push	r25
    16d4:	8f 93       	push	r24
    16d6:	85 ed       	ldi	r24, 0xD5	; 213
    16d8:	94 e4       	ldi	r25, 0x44	; 68
    16da:	9f 93       	push	r25
    16dc:	8f 93       	push	r24
    16de:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    16e2:	85 ed       	ldi	r24, 0xD5	; 213
    16e4:	94 e4       	ldi	r25, 0x44	; 68
    16e6:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    16ea:	85 e7       	ldi	r24, 0x75	; 117
    16ec:	90 e4       	ldi	r25, 0x40	; 64
    16ee:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	0e 94 3e 20 	call	0x407c	; 0x407c <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>
    16f8:	0e 94 f0 3b 	call	0x77e0	; 0x77e0 <_Z16init_transmitterv>
    16fc:	80 93 ea 44 	sts	0x44EA, r24	; 0x8044ea <_ZL17g_last_error_code>
    1700:	80 91 ea 44 	lds	r24, 0x44EA	; 0x8044ea <_ZL17g_last_error_code>
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	88 23       	and	r24, r24
    1712:	31 f0       	breq	.+12     	; 0x1720 <main+0x80>
    1714:	0e 94 8a 32 	call	0x6514	; 0x6514 <sb_send_NewLine>
    1718:	88 eb       	ldi	r24, 0xB8	; 184
    171a:	91 e4       	ldi	r25, 0x41	; 65
    171c:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    1720:	0e 94 33 26 	call	0x4c66	; 0x4c66 <ds3231_init>
    1724:	88 23       	and	r24, r24
    1726:	31 f0       	breq	.+12     	; 0x1734 <main+0x94>
    1728:	0e 94 8a 32 	call	0x6514	; 0x6514 <sb_send_NewLine>
    172c:	83 ee       	ldi	r24, 0xE3	; 227
    172e:	91 e4       	ldi	r25, 0x41	; 65
    1730:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    1734:	0e 94 c8 20 	call	0x4190	; 0x4190 <_Z11wifiPresentv>
    1738:	81 11       	cpse	r24, r1
    173a:	06 c0       	rjmp	.+12     	; 0x1748 <main+0xa8>
    173c:	0e 94 8a 32 	call	0x6514	; 0x6514 <sb_send_NewLine>
    1740:	8b e0       	ldi	r24, 0x0B	; 11
    1742:	92 e4       	ldi	r25, 0x42	; 66
    1744:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    1748:	0e 94 8a 32 	call	0x6514	; 0x6514 <sb_send_NewLine>
    174c:	0e 94 7f 32 	call	0x64fe	; 0x64fe <sb_send_NewPrompt>
    1750:	6a ef       	ldi	r22, 0xFA	; 250
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <util_delay_ms>
    175c:	88 23       	and	r24, r24
    175e:	c1 f3       	breq	.-16     	; 0x1750 <main+0xb0>
    1760:	0e 94 42 12 	call	0x2484	; 0x2484 <_Z17handleLinkBusMsgsv>
    1764:	0e 94 b5 0b 	call	0x176a	; 0x176a <_Z19handleSerialBusMsgsv>
    1768:	f3 cf       	rjmp	.-26     	; 0x1750 <main+0xb0>

0000176a <_Z19handleSerialBusMsgsv>:
    176a:	ef 92       	push	r14
    176c:	ff 92       	push	r15
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	ec 97       	sbiw	r28, 0x3c	; 60
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0e 94 b5 31 	call	0x636a	; 0x636a <nextFullSBRxBuffer>
    1784:	8a 87       	std	Y+10, r24	; 0x0a
    1786:	9b 87       	std	Y+11, r25	; 0x0b
    1788:	21 e0       	ldi	r18, 0x01	; 1
    178a:	8a 85       	ldd	r24, Y+10	; 0x0a
    178c:	9b 85       	ldd	r25, Y+11	; 0x0b
    178e:	89 2b       	or	r24, r25
    1790:	09 f4       	brne	.+2      	; 0x1794 <_Z19handleSerialBusMsgsv+0x2a>
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	22 23       	and	r18, r18
    1796:	09 f4       	brne	.+2      	; 0x179a <_Z19handleSerialBusMsgsv+0x30>
    1798:	6a c6       	rjmp	.+3284   	; 0x246e <_Z19handleSerialBusMsgsv+0xd04>
    179a:	8a 85       	ldd	r24, Y+10	; 0x0a
    179c:	9b 85       	ldd	r25, Y+11	; 0x0b
    179e:	fc 01       	movw	r30, r24
    17a0:	81 81       	ldd	r24, Z+1	; 0x01
    17a2:	92 81       	ldd	r25, Z+2	; 0x02
    17a4:	8c 87       	std	Y+12, r24	; 0x0c
    17a6:	9d 87       	std	Y+13, r25	; 0x0d
    17a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    17aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    17ac:	8a 3e       	cpi	r24, 0xEA	; 234
    17ae:	f2 e2       	ldi	r31, 0x22	; 34
    17b0:	9f 07       	cpc	r25, r31
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <_Z19handleSerialBusMsgsv+0x4c>
    17b4:	49 c3       	rjmp	.+1682   	; 0x1e48 <_Z19handleSerialBusMsgsv+0x6de>
    17b6:	8b 3e       	cpi	r24, 0xEB	; 235
    17b8:	22 e2       	ldi	r18, 0x22	; 34
    17ba:	92 07       	cpc	r25, r18
    17bc:	b8 f4       	brcc	.+46     	; 0x17ec <_Z19handleSerialBusMsgsv+0x82>
    17be:	8f 36       	cpi	r24, 0x6F	; 111
    17c0:	ed e1       	ldi	r30, 0x1D	; 29
    17c2:	9e 07       	cpc	r25, r30
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <_Z19handleSerialBusMsgsv+0x5e>
    17c6:	92 c3       	rjmp	.+1828   	; 0x1eec <_Z19handleSerialBusMsgsv+0x782>
    17c8:	80 37       	cpi	r24, 0x70	; 112
    17ca:	fd e1       	ldi	r31, 0x1D	; 29
    17cc:	9f 07       	cpc	r25, r31
    17ce:	28 f4       	brcc	.+10     	; 0x17da <_Z19handleSerialBusMsgsv+0x70>
    17d0:	8e 31       	cpi	r24, 0x1E	; 30
    17d2:	93 40       	sbci	r25, 0x03	; 3
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <_Z19handleSerialBusMsgsv+0x6e>
    17d6:	26 c2       	rjmp	.+1100   	; 0x1c24 <_Z19handleSerialBusMsgsv+0x4ba>
    17d8:	36 c6       	rjmp	.+3180   	; 0x2446 <_Z19handleSerialBusMsgsv+0xcdc>
    17da:	86 3c       	cpi	r24, 0xC6	; 198
    17dc:	ee e1       	ldi	r30, 0x1E	; 30
    17de:	9e 07       	cpc	r25, r30
    17e0:	e9 f0       	breq	.+58     	; 0x181c <_Z19handleSerialBusMsgsv+0xb2>
    17e2:	81 3d       	cpi	r24, 0xD1	; 209
    17e4:	9e 41       	sbci	r25, 0x1E	; 30
    17e6:	09 f4       	brne	.+2      	; 0x17ea <_Z19handleSerialBusMsgsv+0x80>
    17e8:	7b c1       	rjmp	.+758    	; 0x1ae0 <_Z19handleSerialBusMsgsv+0x376>
    17ea:	2d c6       	rjmp	.+3162   	; 0x2446 <_Z19handleSerialBusMsgsv+0xcdc>
    17ec:	82 37       	cpi	r24, 0x72	; 114
    17ee:	23 e2       	ldi	r18, 0x23	; 35
    17f0:	92 07       	cpc	r25, r18
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <_Z19handleSerialBusMsgsv+0x8c>
    17f4:	a5 c2       	rjmp	.+1354   	; 0x1d40 <_Z19handleSerialBusMsgsv+0x5d6>
    17f6:	83 37       	cpi	r24, 0x73	; 115
    17f8:	e3 e2       	ldi	r30, 0x23	; 35
    17fa:	9e 07       	cpc	r25, r30
    17fc:	28 f4       	brcc	.+10     	; 0x1808 <_Z19handleSerialBusMsgsv+0x9e>
    17fe:	88 3f       	cpi	r24, 0xF8	; 248
    1800:	92 42       	sbci	r25, 0x22	; 34
    1802:	09 f4       	brne	.+2      	; 0x1806 <_Z19handleSerialBusMsgsv+0x9c>
    1804:	0a c1       	rjmp	.+532    	; 0x1a1a <_Z19handleSerialBusMsgsv+0x2b0>
    1806:	1f c6       	rjmp	.+3134   	; 0x2446 <_Z19handleSerialBusMsgsv+0xcdc>
    1808:	84 33       	cpi	r24, 0x34	; 52
    180a:	24 e2       	ldi	r18, 0x24	; 36
    180c:	92 07       	cpc	r25, r18
    180e:	09 f4       	brne	.+2      	; 0x1812 <_Z19handleSerialBusMsgsv+0xa8>
    1810:	d5 c1       	rjmp	.+938    	; 0x1bbc <_Z19handleSerialBusMsgsv+0x452>
    1812:	85 3c       	cpi	r24, 0xC5	; 197
    1814:	94 42       	sbci	r25, 0x24	; 36
    1816:	09 f4       	brne	.+2      	; 0x181a <_Z19handleSerialBusMsgsv+0xb0>
    1818:	02 c6       	rjmp	.+3076   	; 0x241e <_Z19handleSerialBusMsgsv+0xcb4>
    181a:	15 c6       	rjmp	.+3114   	; 0x2446 <_Z19handleSerialBusMsgsv+0xcdc>
    181c:	8a 85       	ldd	r24, Y+10	; 0x0a
    181e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1820:	fc 01       	movw	r30, r24
    1822:	83 81       	ldd	r24, Z+3	; 0x03
    1824:	88 2f       	mov	r24, r24
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	9a 83       	std	Y+2, r25	; 0x02
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9a 81       	ldd	r25, Y+2	; 0x02
    1830:	89 2b       	or	r24, r25
    1832:	09 f4       	brne	.+2      	; 0x1836 <_Z19handleSerialBusMsgsv+0xcc>
    1834:	d0 c0       	rjmp	.+416    	; 0x19d6 <_Z19handleSerialBusMsgsv+0x26c>
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	82 34       	cpi	r24, 0x42	; 66
    183c:	91 05       	cpc	r25, r1
    183e:	19 f4       	brne	.+6      	; 0x1846 <_Z19handleSerialBusMsgsv+0xdc>
    1840:	19 82       	std	Y+1, r1	; 0x01
    1842:	1a 82       	std	Y+2, r1	; 0x02
    1844:	ac c0       	rjmp	.+344    	; 0x199e <_Z19handleSerialBusMsgsv+0x234>
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	9a 81       	ldd	r25, Y+2	; 0x02
    184a:	86 34       	cpi	r24, 0x46	; 70
    184c:	91 05       	cpc	r25, r1
    184e:	29 f4       	brne	.+10     	; 0x185a <_Z19handleSerialBusMsgsv+0xf0>
    1850:	86 e0       	ldi	r24, 0x06	; 6
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	9a 83       	std	Y+2, r25	; 0x02
    1858:	a2 c0       	rjmp	.+324    	; 0x199e <_Z19handleSerialBusMsgsv+0x234>
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	9a 81       	ldd	r25, Y+2	; 0x02
    185e:	83 34       	cpi	r24, 0x43	; 67
    1860:	91 05       	cpc	r25, r1
    1862:	b9 f5       	brne	.+110    	; 0x18d2 <_Z19handleSerialBusMsgsv+0x168>
    1864:	8a 85       	ldd	r24, Y+10	; 0x0a
    1866:	9b 85       	ldd	r25, Y+11	; 0x0b
    1868:	fc 01       	movw	r30, r24
    186a:	87 89       	ldd	r24, Z+23	; 0x17
    186c:	8b 83       	std	Y+3, r24	; 0x03
    186e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1870:	9b 85       	ldd	r25, Y+11	; 0x0b
    1872:	fc 01       	movw	r30, r24
    1874:	10 8e       	std	Z+24, r1	; 0x18
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	82 34       	cpi	r24, 0x42	; 66
    187a:	11 f4       	brne	.+4      	; 0x1880 <_Z19handleSerialBusMsgsv+0x116>
    187c:	80 e3       	ldi	r24, 0x30	; 48
    187e:	8b 83       	std	Y+3, r24	; 0x03
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	c0 97       	sbiw	r24, 0x30	; 48
    1888:	0a 97       	sbiw	r24, 0x0a	; 10
    188a:	08 f0       	brcs	.+2      	; 0x188e <_Z19handleSerialBusMsgsv+0x124>
    188c:	88 c0       	rjmp	.+272    	; 0x199e <_Z19handleSerialBusMsgsv+0x234>
    188e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1890:	9b 85       	ldd	r25, Y+11	; 0x0b
    1892:	47 96       	adiw	r24, 0x17	; 23
    1894:	0e 94 9d 41 	call	0x833a	; 0x833a <atoi>
    1898:	8e 87       	std	Y+14, r24	; 0x0e
    189a:	9f 87       	std	Y+15, r25	; 0x0f
    189c:	18 8a       	std	Y+16, r1	; 0x10
    189e:	85 e0       	ldi	r24, 0x05	; 5
    18a0:	89 8b       	std	Y+17, r24	; 0x11
    18a2:	89 89       	ldd	r24, Y+17	; 0x11
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    18aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    18ac:	28 17       	cp	r18, r24
    18ae:	39 07       	cpc	r19, r25
    18b0:	24 f4       	brge	.+8      	; 0x18ba <_Z19handleSerialBusMsgsv+0x150>
    18b2:	89 89       	ldd	r24, Y+17	; 0x11
    18b4:	88 2f       	mov	r24, r24
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	09 c0       	rjmp	.+18     	; 0x18cc <_Z19handleSerialBusMsgsv+0x162>
    18ba:	88 89       	ldd	r24, Y+16	; 0x10
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	2e 85       	ldd	r18, Y+14	; 0x0e
    18c2:	3f 85       	ldd	r19, Y+15	; 0x0f
    18c4:	82 17       	cp	r24, r18
    18c6:	93 07       	cpc	r25, r19
    18c8:	0c f4       	brge	.+2      	; 0x18cc <_Z19handleSerialBusMsgsv+0x162>
    18ca:	c9 01       	movw	r24, r18
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	9a 83       	std	Y+2, r25	; 0x02
    18d0:	66 c0       	rjmp	.+204    	; 0x199e <_Z19handleSerialBusMsgsv+0x234>
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	9a 81       	ldd	r25, Y+2	; 0x02
    18d6:	83 35       	cpi	r24, 0x53	; 83
    18d8:	91 05       	cpc	r25, r1
    18da:	09 f0       	breq	.+2      	; 0x18de <_Z19handleSerialBusMsgsv+0x174>
    18dc:	59 c0       	rjmp	.+178    	; 0x1990 <_Z19handleSerialBusMsgsv+0x226>
    18de:	1c 82       	std	Y+4, r1	; 0x04
    18e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    18e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    18e4:	fc 01       	movw	r30, r24
    18e6:	87 89       	ldd	r24, Z+23	; 0x17
    18e8:	8a 8b       	std	Y+18, r24	; 0x12
    18ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    18ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    18ee:	fc 01       	movw	r30, r24
    18f0:	80 8d       	ldd	r24, Z+24	; 0x18
    18f2:	8b 8b       	std	Y+19, r24	; 0x13
    18f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    18f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    18f8:	fc 01       	movw	r30, r24
    18fa:	11 8e       	std	Z+25, r1	; 0x19
    18fc:	8a 89       	ldd	r24, Y+18	; 0x12
    18fe:	82 34       	cpi	r24, 0x42	; 66
    1900:	11 f4       	brne	.+4      	; 0x1906 <_Z19handleSerialBusMsgsv+0x19c>
    1902:	1c 82       	std	Y+4, r1	; 0x04
    1904:	36 c0       	rjmp	.+108    	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    1906:	8a 89       	ldd	r24, Y+18	; 0x12
    1908:	86 34       	cpi	r24, 0x46	; 70
    190a:	51 f4       	brne	.+20     	; 0x1920 <_Z19handleSerialBusMsgsv+0x1b6>
    190c:	8b 89       	ldd	r24, Y+19	; 0x13
    190e:	81 33       	cpi	r24, 0x31	; 49
    1910:	80 f1       	brcs	.+96     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    1912:	8b 89       	ldd	r24, Y+19	; 0x13
    1914:	86 33       	cpi	r24, 0x36	; 54
    1916:	68 f5       	brcc	.+90     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    1918:	8b 89       	ldd	r24, Y+19	; 0x13
    191a:	84 52       	subi	r24, 0x24	; 36
    191c:	8c 83       	std	Y+4, r24	; 0x04
    191e:	29 c0       	rjmp	.+82     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    1920:	8a 89       	ldd	r24, Y+18	; 0x12
    1922:	83 35       	cpi	r24, 0x53	; 83
    1924:	69 f4       	brne	.+26     	; 0x1940 <_Z19handleSerialBusMsgsv+0x1d6>
    1926:	8b 89       	ldd	r24, Y+19	; 0x13
    1928:	81 33       	cpi	r24, 0x31	; 49
    192a:	38 f0       	brcs	.+14     	; 0x193a <_Z19handleSerialBusMsgsv+0x1d0>
    192c:	8b 89       	ldd	r24, Y+19	; 0x13
    192e:	86 33       	cpi	r24, 0x36	; 54
    1930:	20 f4       	brcc	.+8      	; 0x193a <_Z19handleSerialBusMsgsv+0x1d0>
    1932:	8b 89       	ldd	r24, Y+19	; 0x13
    1934:	89 52       	subi	r24, 0x29	; 41
    1936:	8c 83       	std	Y+4, r24	; 0x04
    1938:	1c c0       	rjmp	.+56     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    193a:	87 e0       	ldi	r24, 0x07	; 7
    193c:	8c 83       	std	Y+4, r24	; 0x04
    193e:	19 c0       	rjmp	.+50     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    1940:	8b 89       	ldd	r24, Y+19	; 0x13
    1942:	86 34       	cpi	r24, 0x46	; 70
    1944:	51 f4       	brne	.+20     	; 0x195a <_Z19handleSerialBusMsgsv+0x1f0>
    1946:	8a 89       	ldd	r24, Y+18	; 0x12
    1948:	81 33       	cpi	r24, 0x31	; 49
    194a:	98 f0       	brcs	.+38     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    194c:	8a 89       	ldd	r24, Y+18	; 0x12
    194e:	86 33       	cpi	r24, 0x36	; 54
    1950:	80 f4       	brcc	.+32     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    1952:	8a 89       	ldd	r24, Y+18	; 0x12
    1954:	84 52       	subi	r24, 0x24	; 36
    1956:	8c 83       	std	Y+4, r24	; 0x04
    1958:	0c c0       	rjmp	.+24     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    195a:	8b 89       	ldd	r24, Y+19	; 0x13
    195c:	83 35       	cpi	r24, 0x53	; 83
    195e:	49 f4       	brne	.+18     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    1960:	8a 89       	ldd	r24, Y+18	; 0x12
    1962:	81 33       	cpi	r24, 0x31	; 49
    1964:	30 f0       	brcs	.+12     	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    1966:	8a 89       	ldd	r24, Y+18	; 0x12
    1968:	86 33       	cpi	r24, 0x36	; 54
    196a:	18 f4       	brcc	.+6      	; 0x1972 <_Z19handleSerialBusMsgsv+0x208>
    196c:	8a 89       	ldd	r24, Y+18	; 0x12
    196e:	89 52       	subi	r24, 0x29	; 41
    1970:	8c 83       	std	Y+4, r24	; 0x04
    1972:	8c 81       	ldd	r24, Y+4	; 0x04
    1974:	87 30       	cpi	r24, 0x07	; 7
    1976:	48 f0       	brcs	.+18     	; 0x198a <_Z19handleSerialBusMsgsv+0x220>
    1978:	8c 81       	ldd	r24, Y+4	; 0x04
    197a:	82 31       	cpi	r24, 0x12	; 18
    197c:	30 f4       	brcc	.+12     	; 0x198a <_Z19handleSerialBusMsgsv+0x220>
    197e:	8c 81       	ldd	r24, Y+4	; 0x04
    1980:	88 2f       	mov	r24, r24
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	9a 83       	std	Y+2, r25	; 0x02
    1988:	0a c0       	rjmp	.+20     	; 0x199e <_Z19handleSerialBusMsgsv+0x234>
    198a:	19 82       	std	Y+1, r1	; 0x01
    198c:	1a 82       	std	Y+2, r1	; 0x02
    198e:	07 c0       	rjmp	.+14     	; 0x199e <_Z19handleSerialBusMsgsv+0x234>
    1990:	8a 85       	ldd	r24, Y+10	; 0x0a
    1992:	9b 85       	ldd	r25, Y+11	; 0x0b
    1994:	03 96       	adiw	r24, 0x03	; 3
    1996:	0e 94 9d 41 	call	0x833a	; 0x833a <atoi>
    199a:	89 83       	std	Y+1, r24	; 0x01
    199c:	9a 83       	std	Y+2, r25	; 0x02
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	99 23       	and	r25, r25
    19a4:	c4 f0       	brlt	.+48     	; 0x19d6 <_Z19handleSerialBusMsgsv+0x26c>
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	42 97       	sbiw	r24, 0x12	; 18
    19ac:	a4 f4       	brge	.+40     	; 0x19d6 <_Z19handleSerialBusMsgsv+0x26c>
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	8e ab       	std	Y+54, r24	; 0x36
    19b2:	ce 01       	movw	r24, r28
    19b4:	c6 96       	adiw	r24, 0x36	; 54
    19b6:	ac 01       	movw	r20, r24
    19b8:	69 e2       	ldi	r22, 0x29	; 41
    19ba:	83 e4       	ldi	r24, 0x43	; 67
    19bc:	95 e4       	ldi	r25, 0x45	; 69
    19be:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    19c2:	9e a9       	ldd	r25, Y+54	; 0x36
    19c4:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    19c8:	98 17       	cp	r25, r24
    19ca:	29 f0       	breq	.+10     	; 0x19d6 <_Z19handleSerialBusMsgsv+0x26c>
    19cc:	ce 01       	movw	r24, r28
    19ce:	c6 96       	adiw	r24, 0x36	; 54
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	0e 94 a7 1b 	call	0x374e	; 0x374e <_Z11setupForFoxP5Fox_t13EventAction_t>
    19d6:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	29 2f       	mov	r18, r25
    19e0:	2f 93       	push	r18
    19e2:	8f 93       	push	r24
    19e4:	80 e3       	ldi	r24, 0x30	; 48
    19e6:	92 e4       	ldi	r25, 0x42	; 66
    19e8:	89 2f       	mov	r24, r25
    19ea:	8f 93       	push	r24
    19ec:	80 e3       	ldi	r24, 0x30	; 48
    19ee:	92 e4       	ldi	r25, 0x42	; 66
    19f0:	8f 93       	push	r24
    19f2:	85 ed       	ldi	r24, 0xD5	; 213
    19f4:	94 e4       	ldi	r25, 0x44	; 68
    19f6:	89 2f       	mov	r24, r25
    19f8:	8f 93       	push	r24
    19fa:	85 ed       	ldi	r24, 0xD5	; 213
    19fc:	94 e4       	ldi	r25, 0x44	; 68
    19fe:	8f 93       	push	r24
    1a00:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	85 ed       	ldi	r24, 0xD5	; 213
    1a12:	94 e4       	ldi	r25, 0x44	; 68
    1a14:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    1a18:	22 c5       	rjmp	.+2628   	; 0x245e <_Z19handleSerialBusMsgsv+0xcf4>
    1a1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a1e:	fc 01       	movw	r30, r24
    1a20:	83 81       	ldd	r24, Z+3	; 0x03
    1a22:	88 23       	and	r24, r24
    1a24:	e9 f1       	breq	.+122    	; 0x1aa0 <_Z19handleSerialBusMsgsv+0x336>
    1a26:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a28:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a2a:	03 96       	adiw	r24, 0x03	; 3
    1a2c:	0e 94 9d 41 	call	0x833a	; 0x833a <atoi>
    1a30:	80 93 60 45 	sts	0x4560, r24	; 0x804560 <_ZZ19handleSerialBusMsgsvE6pwr_mW>
    1a34:	90 93 61 45 	sts	0x4561, r25	; 0x804561 <_ZZ19handleSerialBusMsgsvE6pwr_mW+0x1>
    1a38:	80 91 60 45 	lds	r24, 0x4560	; 0x804560 <_ZZ19handleSerialBusMsgsvE6pwr_mW>
    1a3c:	90 91 61 45 	lds	r25, 0x4561	; 0x804561 <_ZZ19handleSerialBusMsgsvE6pwr_mW+0x1>
    1a40:	89 38       	cpi	r24, 0x89	; 137
    1a42:	93 41       	sbci	r25, 0x13	; 19
    1a44:	68 f4       	brcc	.+26     	; 0x1a60 <_Z19handleSerialBusMsgsv+0x2f6>
    1a46:	60 e0       	ldi	r22, 0x00	; 0
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	80 e6       	ldi	r24, 0x60	; 96
    1a4c:	95 e4       	ldi	r25, 0x45	; 69
    1a4e:	0e 94 7b 3b 	call	0x76f6	; 0x76f6 <_Z15txSetParametersPjPh>
    1a52:	8c 8b       	std	Y+20, r24	; 0x14
    1a54:	8c 89       	ldd	r24, Y+20	; 0x14
    1a56:	88 23       	and	r24, r24
    1a58:	19 f0       	breq	.+6      	; 0x1a60 <_Z19handleSerialBusMsgsv+0x2f6>
    1a5a:	8c 89       	ldd	r24, Y+20	; 0x14
    1a5c:	80 93 ea 44 	sts	0x44EA, r24	; 0x8044ea <_ZL17g_last_error_code>
    1a60:	0e 94 76 3b 	call	0x76ec	; 0x76ec <_Z12txGetPowerMwv>
    1a64:	29 2f       	mov	r18, r25
    1a66:	2f 93       	push	r18
    1a68:	8f 93       	push	r24
    1a6a:	88 e3       	ldi	r24, 0x38	; 56
    1a6c:	92 e4       	ldi	r25, 0x42	; 66
    1a6e:	89 2f       	mov	r24, r25
    1a70:	8f 93       	push	r24
    1a72:	88 e3       	ldi	r24, 0x38	; 56
    1a74:	92 e4       	ldi	r25, 0x42	; 66
    1a76:	8f 93       	push	r24
    1a78:	85 ed       	ldi	r24, 0xD5	; 213
    1a7a:	94 e4       	ldi	r25, 0x44	; 68
    1a7c:	89 2f       	mov	r24, r25
    1a7e:	8f 93       	push	r24
    1a80:	85 ed       	ldi	r24, 0xD5	; 213
    1a82:	94 e4       	ldi	r25, 0x44	; 68
    1a84:	8f 93       	push	r24
    1a86:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	85 ed       	ldi	r24, 0xD5	; 213
    1a98:	94 e4       	ldi	r25, 0x44	; 68
    1a9a:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    1a9e:	df c4       	rjmp	.+2494   	; 0x245e <_Z19handleSerialBusMsgsv+0xcf4>
    1aa0:	0e 94 76 3b 	call	0x76ec	; 0x76ec <_Z12txGetPowerMwv>
    1aa4:	29 2f       	mov	r18, r25
    1aa6:	2f 93       	push	r18
    1aa8:	8f 93       	push	r24
    1aaa:	88 e3       	ldi	r24, 0x38	; 56
    1aac:	92 e4       	ldi	r25, 0x42	; 66
    1aae:	89 2f       	mov	r24, r25
    1ab0:	8f 93       	push	r24
    1ab2:	88 e3       	ldi	r24, 0x38	; 56
    1ab4:	92 e4       	ldi	r25, 0x42	; 66
    1ab6:	8f 93       	push	r24
    1ab8:	85 ed       	ldi	r24, 0xD5	; 213
    1aba:	94 e4       	ldi	r25, 0x44	; 68
    1abc:	89 2f       	mov	r24, r25
    1abe:	8f 93       	push	r24
    1ac0:	85 ed       	ldi	r24, 0xD5	; 213
    1ac2:	94 e4       	ldi	r25, 0x44	; 68
    1ac4:	8f 93       	push	r24
    1ac6:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	85 ed       	ldi	r24, 0xD5	; 213
    1ad8:	94 e4       	ldi	r25, 0x44	; 68
    1ada:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    1ade:	bf c4       	rjmp	.+2430   	; 0x245e <_Z19handleSerialBusMsgsv+0xcf4>
    1ae0:	1d 82       	std	Y+5, r1	; 0x05
    1ae2:	1e 82       	std	Y+6, r1	; 0x06
    1ae4:	1f 82       	std	Y+7, r1	; 0x07
    1ae6:	18 86       	std	Y+8, r1	; 0x08
    1ae8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aea:	9b 85       	ldd	r25, Y+11	; 0x0b
    1aec:	fc 01       	movw	r30, r24
    1aee:	83 81       	ldd	r24, Z+3	; 0x03
    1af0:	88 23       	and	r24, r24
    1af2:	89 f1       	breq	.+98     	; 0x1b56 <_Z19handleSerialBusMsgsv+0x3ec>
    1af4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1af6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1af8:	03 96       	adiw	r24, 0x03	; 3
    1afa:	0e 94 bb 41 	call	0x8376	; 0x8376 <atol>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	8d 8b       	std	Y+21, r24	; 0x15
    1b04:	9e 8b       	std	Y+22, r25	; 0x16
    1b06:	af 8b       	std	Y+23, r26	; 0x17
    1b08:	b8 8f       	std	Y+24, r27	; 0x18
    1b0a:	8d 89       	ldd	r24, Y+21	; 0x15
    1b0c:	9e 89       	ldd	r25, Y+22	; 0x16
    1b0e:	af 89       	ldd	r26, Y+23	; 0x17
    1b10:	b8 8d       	ldd	r27, Y+24	; 0x18
    1b12:	8f ab       	std	Y+55, r24	; 0x37
    1b14:	98 af       	std	Y+56, r25	; 0x38
    1b16:	a9 af       	std	Y+57, r26	; 0x39
    1b18:	ba af       	std	Y+58, r27	; 0x3a
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	c7 96       	adiw	r24, 0x37	; 55
    1b1e:	61 e0       	ldi	r22, 0x01	; 1
    1b20:	0e 94 1c 3b 	call	0x7638	; 0x7638 <_Z14txSetFrequencyPmh>
    1b24:	98 2f       	mov	r25, r24
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	99 23       	and	r25, r25
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <_Z19handleSerialBusMsgsv+0x3c4>
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	88 23       	and	r24, r24
    1b30:	69 f0       	breq	.+26     	; 0x1b4c <_Z19handleSerialBusMsgsv+0x3e2>
    1b32:	8f a9       	ldd	r24, Y+55	; 0x37
    1b34:	98 ad       	ldd	r25, Y+56	; 0x38
    1b36:	a9 ad       	ldd	r26, Y+57	; 0x39
    1b38:	ba ad       	ldd	r27, Y+58	; 0x3a
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	af 83       	std	Y+7, r26	; 0x07
    1b40:	b8 87       	std	Y+8, r27	; 0x08
    1b42:	83 e4       	ldi	r24, 0x43	; 67
    1b44:	95 e4       	ldi	r25, 0x45	; 69
    1b46:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <_ZN13EepromManager13saveAllEEPROMEv>
    1b4a:	0d c0       	rjmp	.+26     	; 0x1b66 <_Z19handleSerialBusMsgsv+0x3fc>
    1b4c:	88 eb       	ldi	r24, 0xB8	; 184
    1b4e:	91 e4       	ldi	r25, 0x41	; 65
    1b50:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    1b54:	08 c0       	rjmp	.+16     	; 0x1b66 <_Z19handleSerialBusMsgsv+0x3fc>
    1b56:	0e 94 4e 3b 	call	0x769c	; 0x769c <_Z14txGetFrequencyv>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	8d 83       	std	Y+5, r24	; 0x05
    1b60:	9e 83       	std	Y+6, r25	; 0x06
    1b62:	af 83       	std	Y+7, r26	; 0x07
    1b64:	b8 87       	std	Y+8, r27	; 0x08
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	af 81       	ldd	r26, Y+7	; 0x07
    1b6c:	b8 85       	ldd	r27, Y+8	; 0x08
    1b6e:	89 2b       	or	r24, r25
    1b70:	8a 2b       	or	r24, r26
    1b72:	8b 2b       	or	r24, r27
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <_Z19handleSerialBusMsgsv+0x40e>
    1b76:	6c c4       	rjmp	.+2264   	; 0x2450 <_Z19handleSerialBusMsgsv+0xce6>
    1b78:	88 85       	ldd	r24, Y+8	; 0x08
    1b7a:	8f 93       	push	r24
    1b7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b7e:	8f 93       	push	r24
    1b80:	8e 81       	ldd	r24, Y+6	; 0x06
    1b82:	8f 93       	push	r24
    1b84:	8d 81       	ldd	r24, Y+5	; 0x05
    1b86:	8f 93       	push	r24
    1b88:	83 e4       	ldi	r24, 0x43	; 67
    1b8a:	92 e4       	ldi	r25, 0x42	; 66
    1b8c:	89 2f       	mov	r24, r25
    1b8e:	8f 93       	push	r24
    1b90:	83 e4       	ldi	r24, 0x43	; 67
    1b92:	92 e4       	ldi	r25, 0x42	; 66
    1b94:	8f 93       	push	r24
    1b96:	85 ed       	ldi	r24, 0xD5	; 213
    1b98:	94 e4       	ldi	r25, 0x44	; 68
    1b9a:	89 2f       	mov	r24, r25
    1b9c:	8f 93       	push	r24
    1b9e:	85 ed       	ldi	r24, 0xD5	; 213
    1ba0:	94 e4       	ldi	r25, 0x44	; 68
    1ba2:	8f 93       	push	r24
    1ba4:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    1ba8:	8d b7       	in	r24, 0x3d	; 61
    1baa:	9e b7       	in	r25, 0x3e	; 62
    1bac:	08 96       	adiw	r24, 0x08	; 8
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	85 ed       	ldi	r24, 0xD5	; 213
    1bb4:	94 e4       	ldi	r25, 0x44	; 68
    1bb6:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    1bba:	4a c4       	rjmp	.+2196   	; 0x2450 <_Z19handleSerialBusMsgsv+0xce6>
    1bbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	83 81       	ldd	r24, Z+3	; 0x03
    1bc4:	88 23       	and	r24, r24
    1bc6:	49 f1       	breq	.+82     	; 0x1c1a <_Z19handleSerialBusMsgsv+0x4b0>
    1bc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bca:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bcc:	fc 01       	movw	r30, r24
    1bce:	83 81       	ldd	r24, Z+3	; 0x03
    1bd0:	80 33       	cpi	r24, 0x30	; 48
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <_Z19handleSerialBusMsgsv+0x46c>
    1bd4:	3f c4       	rjmp	.+2174   	; 0x2454 <_Z19handleSerialBusMsgsv+0xcea>
    1bd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bda:	fc 01       	movw	r30, r24
    1bdc:	83 81       	ldd	r24, Z+3	; 0x03
    1bde:	81 33       	cpi	r24, 0x31	; 49
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <_Z19handleSerialBusMsgsv+0x47a>
    1be2:	38 c4       	rjmp	.+2160   	; 0x2454 <_Z19handleSerialBusMsgsv+0xcea>
    1be4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1be6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1be8:	fc 01       	movw	r30, r24
    1bea:	83 81       	ldd	r24, Z+3	; 0x03
    1bec:	82 33       	cpi	r24, 0x32	; 50
    1bee:	21 f4       	brne	.+8      	; 0x1bf8 <_Z19handleSerialBusMsgsv+0x48e>
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
    1bf6:	2e c4       	rjmp	.+2140   	; 0x2454 <_Z19handleSerialBusMsgsv+0xcea>
    1bf8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	83 81       	ldd	r24, Z+3	; 0x03
    1c00:	83 33       	cpi	r24, 0x33	; 51
    1c02:	31 f4       	brne	.+12     	; 0x1c10 <_Z19handleSerialBusMsgsv+0x4a6>
    1c04:	62 e0       	ldi	r22, 0x02	; 2
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	0e 94 a7 1b 	call	0x374e	; 0x374e <_Z11setupForFoxP5Fox_t13EventAction_t>
    1c0e:	22 c4       	rjmp	.+2116   	; 0x2454 <_Z19handleSerialBusMsgsv+0xcea>
    1c10:	8f e4       	ldi	r24, 0x4F	; 79
    1c12:	92 e4       	ldi	r25, 0x42	; 66
    1c14:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    1c18:	1d c4       	rjmp	.+2106   	; 0x2454 <_Z19handleSerialBusMsgsv+0xcea>
    1c1a:	8f e4       	ldi	r24, 0x4F	; 79
    1c1c:	92 e4       	ldi	r25, 0x42	; 66
    1c1e:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    1c22:	18 c4       	rjmp	.+2096   	; 0x2454 <_Z19handleSerialBusMsgsv+0xcea>
    1c24:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c26:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c28:	fc 01       	movw	r30, r24
    1c2a:	83 81       	ldd	r24, Z+3	; 0x03
    1c2c:	88 23       	and	r24, r24
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <_Z19handleSerialBusMsgsv+0x4c8>
    1c30:	41 c0       	rjmp	.+130    	; 0x1cb4 <_Z19handleSerialBusMsgsv+0x54a>
    1c32:	80 e2       	ldi	r24, 0x20	; 32
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	80 93 d5 44 	sts	0x44D5, r24	; 0x8044d5 <_ZL9g_tempStr>
    1c3a:	90 93 d6 44 	sts	0x44D6, r25	; 0x8044d6 <_ZL9g_tempStr+0x1>
    1c3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c40:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c42:	03 96       	adiw	r24, 0x03	; 3
    1c44:	bc 01       	movw	r22, r24
    1c46:	85 ed       	ldi	r24, 0xD5	; 213
    1c48:	94 e4       	ldi	r25, 0x44	; 68
    1c4a:	0e 94 ea 41 	call	0x83d4	; 0x83d4 <strcat>
    1c4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c50:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c52:	fc 01       	movw	r30, r24
    1c54:	87 89       	ldd	r24, Z+23	; 0x17
    1c56:	88 23       	and	r24, r24
    1c58:	d1 f0       	breq	.+52     	; 0x1c8e <_Z19handleSerialBusMsgsv+0x524>
    1c5a:	85 ed       	ldi	r24, 0xD5	; 213
    1c5c:	94 e4       	ldi	r25, 0x44	; 68
    1c5e:	9c 01       	movw	r18, r24
    1c60:	f9 01       	movw	r30, r18
    1c62:	01 90       	ld	r0, Z+
    1c64:	00 20       	and	r0, r0
    1c66:	e9 f7       	brne	.-6      	; 0x1c62 <_Z19handleSerialBusMsgsv+0x4f8>
    1c68:	cf 01       	movw	r24, r30
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	82 1b       	sub	r24, r18
    1c6e:	93 0b       	sbc	r25, r19
    1c70:	8b 52       	subi	r24, 0x2B	; 43
    1c72:	9b 4b       	sbci	r25, 0xBB	; 187
    1c74:	20 e2       	ldi	r18, 0x20	; 32
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	fc 01       	movw	r30, r24
    1c7a:	20 83       	st	Z, r18
    1c7c:	31 83       	std	Z+1, r19	; 0x01
    1c7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c80:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c82:	47 96       	adiw	r24, 0x17	; 23
    1c84:	bc 01       	movw	r22, r24
    1c86:	85 ed       	ldi	r24, 0xD5	; 213
    1c88:	94 e4       	ldi	r25, 0x44	; 68
    1c8a:	0e 94 ea 41 	call	0x83d4	; 0x83d4 <strcat>
    1c8e:	85 ed       	ldi	r24, 0xD5	; 213
    1c90:	94 e4       	ldi	r25, 0x44	; 68
    1c92:	0e 94 fc 41 	call	0x83f8	; 0x83f8 <strlen>
    1c96:	45 97       	sbiw	r24, 0x15	; 21
    1c98:	68 f4       	brcc	.+26     	; 0x1cb4 <_Z19handleSerialBusMsgsv+0x54a>
    1c9a:	65 ed       	ldi	r22, 0xD5	; 213
    1c9c:	74 e4       	ldi	r23, 0x44	; 68
    1c9e:	8e e0       	ldi	r24, 0x0E	; 14
    1ca0:	95 e4       	ldi	r25, 0x45	; 69
    1ca2:	0e 94 f5 41 	call	0x83ea	; 0x83ea <strcpy>
    1ca6:	45 ed       	ldi	r20, 0xD5	; 213
    1ca8:	54 e4       	ldi	r21, 0x44	; 68
    1caa:	6a e0       	ldi	r22, 0x0A	; 10
    1cac:	83 e4       	ldi	r24, 0x43	; 67
    1cae:	95 e4       	ldi	r25, 0x45	; 69
    1cb0:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    1cb4:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <g_messages_text+0x15>
    1cb8:	88 23       	and	r24, r24
    1cba:	01 f1       	breq	.+64     	; 0x1cfc <_Z19handleSerialBusMsgsv+0x592>
    1cbc:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    1cc0:	88 2f       	mov	r24, r24
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	bc 01       	movw	r22, r24
    1cc6:	8e e0       	ldi	r24, 0x0E	; 14
    1cc8:	95 e4       	ldi	r25, 0x45	; 69
    1cca:	0e 94 da 30 	call	0x61b4	; 0x61b4 <_Z26timeRequiredToSendStrAtWPMPcj>
    1cce:	88 5a       	subi	r24, 0xA8	; 168
    1cd0:	9d 4f       	sbci	r25, 0xFD	; 253
    1cd2:	96 95       	lsr	r25
    1cd4:	87 95       	ror	r24
    1cd6:	96 95       	lsr	r25
    1cd8:	87 95       	ror	r24
    1cda:	96 95       	lsr	r25
    1cdc:	87 95       	ror	r24
    1cde:	9c 01       	movw	r18, r24
    1ce0:	a5 ec       	ldi	r26, 0xC5	; 197
    1ce2:	b0 e2       	ldi	r27, 0x20	; 32
    1ce4:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__umulhisi3>
    1ce8:	92 95       	swap	r25
    1cea:	82 95       	swap	r24
    1cec:	8f 70       	andi	r24, 0x0F	; 15
    1cee:	89 27       	eor	r24, r25
    1cf0:	9f 70       	andi	r25, 0x0F	; 15
    1cf2:	89 27       	eor	r24, r25
    1cf4:	80 93 23 45 	sts	0x4523, r24	; 0x804523 <g_time_needed_for_ID>
    1cf8:	90 93 24 45 	sts	0x4524, r25	; 0x804524 <g_time_needed_for_ID+0x1>
    1cfc:	8e e0       	ldi	r24, 0x0E	; 14
    1cfe:	95 e4       	ldi	r25, 0x45	; 69
    1d00:	89 2f       	mov	r24, r25
    1d02:	8f 93       	push	r24
    1d04:	8e e0       	ldi	r24, 0x0E	; 14
    1d06:	95 e4       	ldi	r25, 0x45	; 69
    1d08:	8f 93       	push	r24
    1d0a:	84 e5       	ldi	r24, 0x54	; 84
    1d0c:	92 e4       	ldi	r25, 0x42	; 66
    1d0e:	89 2f       	mov	r24, r25
    1d10:	8f 93       	push	r24
    1d12:	84 e5       	ldi	r24, 0x54	; 84
    1d14:	92 e4       	ldi	r25, 0x42	; 66
    1d16:	8f 93       	push	r24
    1d18:	85 ed       	ldi	r24, 0xD5	; 213
    1d1a:	94 e4       	ldi	r25, 0x44	; 68
    1d1c:	89 2f       	mov	r24, r25
    1d1e:	8f 93       	push	r24
    1d20:	85 ed       	ldi	r24, 0xD5	; 213
    1d22:	94 e4       	ldi	r25, 0x44	; 68
    1d24:	8f 93       	push	r24
    1d26:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	85 ed       	ldi	r24, 0xD5	; 213
    1d38:	94 e4       	ldi	r25, 0x44	; 68
    1d3a:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    1d3e:	8f c3       	rjmp	.+1822   	; 0x245e <_Z19handleSerialBusMsgsv+0xcf4>
    1d40:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d42:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d44:	fc 01       	movw	r30, r24
    1d46:	83 81       	ldd	r24, Z+3	; 0x03
    1d48:	83 35       	cpi	r24, 0x53	; 83
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <_Z19handleSerialBusMsgsv+0x5e4>
    1d4c:	6f c0       	rjmp	.+222    	; 0x1e2c <_Z19handleSerialBusMsgsv+0x6c2>
    1d4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d50:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d52:	fc 01       	movw	r30, r24
    1d54:	87 89       	ldd	r24, Z+23	; 0x17
    1d56:	89 8f       	std	Y+25, r24	; 0x19
    1d58:	89 8d       	ldd	r24, Y+25	; 0x19
    1d5a:	88 23       	and	r24, r24
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <_Z19handleSerialBusMsgsv+0x5f6>
    1d5e:	48 c0       	rjmp	.+144    	; 0x1df0 <_Z19handleSerialBusMsgsv+0x686>
    1d60:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d62:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d64:	47 96       	adiw	r24, 0x17	; 23
    1d66:	0e 94 bb 41 	call	0x8376	; 0x8376 <atol>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	8a 8f       	std	Y+26, r24	; 0x1a
    1d70:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d72:	8b 8f       	std	Y+27, r24	; 0x1b
    1d74:	85 e0       	ldi	r24, 0x05	; 5
    1d76:	8c 8f       	std	Y+28, r24	; 0x1c
    1d78:	84 e1       	ldi	r24, 0x14	; 20
    1d7a:	8d 8f       	std	Y+29, r24	; 0x1d
    1d7c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d80:	89 17       	cp	r24, r25
    1d82:	40 f0       	brcs	.+16     	; 0x1d94 <_Z19handleSerialBusMsgsv+0x62a>
    1d84:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d86:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d88:	98 17       	cp	r25, r24
    1d8a:	10 f4       	brcc	.+4      	; 0x1d90 <_Z19handleSerialBusMsgsv+0x626>
    1d8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d8e:	03 c0       	rjmp	.+6      	; 0x1d96 <_Z19handleSerialBusMsgsv+0x62c>
    1d90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d92:	01 c0       	rjmp	.+2      	; 0x1d96 <_Z19handleSerialBusMsgsv+0x62c>
    1d94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d96:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
    1d9a:	4b e0       	ldi	r20, 0x0B	; 11
    1d9c:	50 e4       	ldi	r21, 0x40	; 64
    1d9e:	68 e2       	ldi	r22, 0x28	; 40
    1da0:	83 e4       	ldi	r24, 0x43	; 67
    1da2:	95 e4       	ldi	r25, 0x45	; 69
    1da4:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    1da8:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <g_messages_text+0x15>
    1dac:	88 23       	and	r24, r24
    1dae:	01 f1       	breq	.+64     	; 0x1df0 <_Z19handleSerialBusMsgsv+0x686>
    1db0:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	bc 01       	movw	r22, r24
    1dba:	8e e0       	ldi	r24, 0x0E	; 14
    1dbc:	95 e4       	ldi	r25, 0x45	; 69
    1dbe:	0e 94 da 30 	call	0x61b4	; 0x61b4 <_Z26timeRequiredToSendStrAtWPMPcj>
    1dc2:	88 5a       	subi	r24, 0xA8	; 168
    1dc4:	9d 4f       	sbci	r25, 0xFD	; 253
    1dc6:	96 95       	lsr	r25
    1dc8:	87 95       	ror	r24
    1dca:	96 95       	lsr	r25
    1dcc:	87 95       	ror	r24
    1dce:	96 95       	lsr	r25
    1dd0:	87 95       	ror	r24
    1dd2:	9c 01       	movw	r18, r24
    1dd4:	a5 ec       	ldi	r26, 0xC5	; 197
    1dd6:	b0 e2       	ldi	r27, 0x20	; 32
    1dd8:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__umulhisi3>
    1ddc:	92 95       	swap	r25
    1dde:	82 95       	swap	r24
    1de0:	8f 70       	andi	r24, 0x0F	; 15
    1de2:	89 27       	eor	r24, r25
    1de4:	9f 70       	andi	r25, 0x0F	; 15
    1de6:	89 27       	eor	r24, r25
    1de8:	80 93 23 45 	sts	0x4523, r24	; 0x804523 <g_time_needed_for_ID>
    1dec:	90 93 24 45 	sts	0x4524, r25	; 0x804524 <g_time_needed_for_ID+0x1>
    1df0:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    1df4:	88 2f       	mov	r24, r24
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	29 2f       	mov	r18, r25
    1dfa:	2f 93       	push	r18
    1dfc:	8f 93       	push	r24
    1dfe:	8b e5       	ldi	r24, 0x5B	; 91
    1e00:	92 e4       	ldi	r25, 0x42	; 66
    1e02:	89 2f       	mov	r24, r25
    1e04:	8f 93       	push	r24
    1e06:	8b e5       	ldi	r24, 0x5B	; 91
    1e08:	92 e4       	ldi	r25, 0x42	; 66
    1e0a:	8f 93       	push	r24
    1e0c:	85 ed       	ldi	r24, 0xD5	; 213
    1e0e:	94 e4       	ldi	r25, 0x44	; 68
    1e10:	89 2f       	mov	r24, r25
    1e12:	8f 93       	push	r24
    1e14:	85 ed       	ldi	r24, 0xD5	; 213
    1e16:	94 e4       	ldi	r25, 0x44	; 68
    1e18:	8f 93       	push	r24
    1e1a:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	09 c0       	rjmp	.+18     	; 0x1e3e <_Z19handleSerialBusMsgsv+0x6d4>
    1e2c:	85 e0       	ldi	r24, 0x05	; 5
    1e2e:	ef e4       	ldi	r30, 0x4F	; 79
    1e30:	f2 e4       	ldi	r31, 0x42	; 66
    1e32:	a5 ed       	ldi	r26, 0xD5	; 213
    1e34:	b4 e4       	ldi	r27, 0x44	; 68
    1e36:	01 90       	ld	r0, Z+
    1e38:	0d 92       	st	X+, r0
    1e3a:	8a 95       	dec	r24
    1e3c:	e1 f7       	brne	.-8      	; 0x1e36 <_Z19handleSerialBusMsgsv+0x6cc>
    1e3e:	85 ed       	ldi	r24, 0xD5	; 213
    1e40:	94 e4       	ldi	r25, 0x44	; 68
    1e42:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    1e46:	0b c3       	rjmp	.+1558   	; 0x245e <_Z19handleSerialBusMsgsv+0xcf4>
    1e48:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	83 81       	ldd	r24, Z+3	; 0x03
    1e50:	88 23       	and	r24, r24
    1e52:	51 f1       	breq	.+84     	; 0x1ea8 <_Z19handleSerialBusMsgsv+0x73e>
    1e54:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e56:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e58:	03 96       	adiw	r24, 0x03	; 3
    1e5a:	48 e0       	ldi	r20, 0x08	; 8
    1e5c:	50 e0       	ldi	r21, 0x00	; 0
    1e5e:	bc 01       	movw	r22, r24
    1e60:	85 ed       	ldi	r24, 0xD5	; 213
    1e62:	94 e4       	ldi	r25, 0x44	; 68
    1e64:	0e 94 05 42 	call	0x840a	; 0x840a <strncpy>
    1e68:	10 92 dd 44 	sts	0x44DD, r1	; 0x8044dd <_ZL9g_tempStr+0x8>
    1e6c:	85 ed       	ldi	r24, 0xD5	; 213
    1e6e:	94 e4       	ldi	r25, 0x44	; 68
    1e70:	0e 94 84 3d 	call	0x7b08	; 0x7b08 <_Z11only_digitsPc>
    1e74:	88 23       	and	r24, r24
    1e76:	41 f0       	breq	.+16     	; 0x1e88 <_Z19handleSerialBusMsgsv+0x71e>
    1e78:	85 ed       	ldi	r24, 0xD5	; 213
    1e7a:	94 e4       	ldi	r25, 0x44	; 68
    1e7c:	0e 94 fc 41 	call	0x83f8	; 0x83f8 <strlen>
    1e80:	04 97       	sbiw	r24, 0x04	; 4
    1e82:	10 f0       	brcs	.+4      	; 0x1e88 <_Z19handleSerialBusMsgsv+0x71e>
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	01 c0       	rjmp	.+2      	; 0x1e8a <_Z19handleSerialBusMsgsv+0x720>
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	88 23       	and	r24, r24
    1e8c:	69 f0       	breq	.+26     	; 0x1ea8 <_Z19handleSerialBusMsgsv+0x73e>
    1e8e:	65 ed       	ldi	r22, 0xD5	; 213
    1e90:	74 e4       	ldi	r23, 0x44	; 68
    1e92:	8d e4       	ldi	r24, 0x4D	; 77
    1e94:	95 e4       	ldi	r25, 0x45	; 69
    1e96:	0e 94 f5 41 	call	0x83ea	; 0x83ea <strcpy>
    1e9a:	4d e4       	ldi	r20, 0x4D	; 77
    1e9c:	55 e4       	ldi	r21, 0x45	; 69
    1e9e:	6f e1       	ldi	r22, 0x1F	; 31
    1ea0:	83 e4       	ldi	r24, 0x43	; 67
    1ea2:	95 e4       	ldi	r25, 0x45	; 69
    1ea4:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    1ea8:	8d e4       	ldi	r24, 0x4D	; 77
    1eaa:	95 e4       	ldi	r25, 0x45	; 69
    1eac:	89 2f       	mov	r24, r25
    1eae:	8f 93       	push	r24
    1eb0:	8d e4       	ldi	r24, 0x4D	; 77
    1eb2:	95 e4       	ldi	r25, 0x45	; 69
    1eb4:	8f 93       	push	r24
    1eb6:	8d e6       	ldi	r24, 0x6D	; 109
    1eb8:	92 e4       	ldi	r25, 0x42	; 66
    1eba:	89 2f       	mov	r24, r25
    1ebc:	8f 93       	push	r24
    1ebe:	8d e6       	ldi	r24, 0x6D	; 109
    1ec0:	92 e4       	ldi	r25, 0x42	; 66
    1ec2:	8f 93       	push	r24
    1ec4:	85 ed       	ldi	r24, 0xD5	; 213
    1ec6:	94 e4       	ldi	r25, 0x44	; 68
    1ec8:	89 2f       	mov	r24, r25
    1eca:	8f 93       	push	r24
    1ecc:	85 ed       	ldi	r24, 0xD5	; 213
    1ece:	94 e4       	ldi	r25, 0x44	; 68
    1ed0:	8f 93       	push	r24
    1ed2:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	85 ed       	ldi	r24, 0xD5	; 213
    1ee4:	94 e4       	ldi	r25, 0x44	; 68
    1ee6:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    1eea:	b9 c2       	rjmp	.+1394   	; 0x245e <_Z19handleSerialBusMsgsv+0xcf4>
    1eec:	19 86       	std	Y+9, r1	; 0x09
    1eee:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ef0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	83 81       	ldd	r24, Z+3	; 0x03
    1ef6:	84 35       	cpi	r24, 0x54	; 84
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <_Z19handleSerialBusMsgsv+0x792>
    1efa:	05 c1       	rjmp	.+522    	; 0x2106 <_Z19handleSerialBusMsgsv+0x99c>
    1efc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1efe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f00:	fc 01       	movw	r30, r24
    1f02:	87 89       	ldd	r24, Z+23	; 0x17
    1f04:	88 23       	and	r24, r24
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <_Z19handleSerialBusMsgsv+0x7a0>
    1f08:	c1 c0       	rjmp	.+386    	; 0x208c <_Z19handleSerialBusMsgsv+0x922>
    1f0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f0e:	47 96       	adiw	r24, 0x17	; 23
    1f10:	4c e0       	ldi	r20, 0x0C	; 12
    1f12:	50 e0       	ldi	r21, 0x00	; 0
    1f14:	bc 01       	movw	r22, r24
    1f16:	85 ed       	ldi	r24, 0xD5	; 213
    1f18:	94 e4       	ldi	r25, 0x44	; 68
    1f1a:	0e 94 05 42 	call	0x840a	; 0x840a <strncpy>
    1f1e:	10 92 e1 44 	sts	0x44E1, r1	; 0x8044e1 <_ZL9g_tempStr+0xc>
    1f22:	80 91 4c 45 	lds	r24, 0x454C	; 0x80454c <g_utc_offset>
    1f26:	81 95       	neg	r24
    1f28:	48 2f       	mov	r20, r24
    1f2a:	65 e5       	ldi	r22, 0x55	; 85
    1f2c:	75 e4       	ldi	r23, 0x45	; 69
    1f2e:	85 ed       	ldi	r24, 0xD5	; 213
    1f30:	94 e4       	ldi	r25, 0x44	; 68
    1f32:	0e 94 ae 1c 	call	0x395c	; 0x395c <_Z18validateTimeStringPcPma>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	8e 8f       	std	Y+30, r24	; 0x1e
    1f3c:	9f 8f       	std	Y+31, r25	; 0x1f
    1f3e:	a8 a3       	std	Y+32, r26	; 0x20
    1f40:	b9 a3       	std	Y+33, r27	; 0x21
    1f42:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f44:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f46:	a8 a1       	ldd	r26, Y+32	; 0x20
    1f48:	b9 a1       	ldd	r27, Y+33	; 0x21
    1f4a:	89 2b       	or	r24, r25
    1f4c:	8a 2b       	or	r24, r26
    1f4e:	8b 2b       	or	r24, r27
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <_Z19handleSerialBusMsgsv+0x7ea>
    1f52:	49 c0       	rjmp	.+146    	; 0x1fe6 <_Z19handleSerialBusMsgsv+0x87c>
    1f54:	60 e0       	ldi	r22, 0x00	; 0
    1f56:	85 ed       	ldi	r24, 0xD5	; 213
    1f58:	94 e4       	ldi	r25, 0x44	; 68
    1f5a:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <ds3231_set_date_time_arducon>
    1f5e:	98 2f       	mov	r25, r24
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	99 23       	and	r25, r25
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <_Z19handleSerialBusMsgsv+0x7fe>
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	8a a3       	std	Y+34, r24	; 0x22
    1f6a:	8a a1       	ldd	r24, Y+34	; 0x22
    1f6c:	88 23       	and	r24, r24
    1f6e:	29 f0       	breq	.+10     	; 0x1f7a <_Z19handleSerialBusMsgsv+0x810>
    1f70:	83 ee       	ldi	r24, 0xE3	; 227
    1f72:	91 e4       	ldi	r25, 0x41	; 65
    1f74:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    1f78:	c3 c0       	rjmp	.+390    	; 0x2100 <_Z19handleSerialBusMsgsv+0x996>
    1f7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f7c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f7e:	a8 a1       	ldd	r26, Y+32	; 0x20
    1f80:	b9 a1       	ldd	r27, Y+33	; 0x21
    1f82:	80 93 55 45 	sts	0x4555, r24	; 0x804555 <g_current_epoch>
    1f86:	90 93 56 45 	sts	0x4556, r25	; 0x804556 <g_current_epoch+0x1>
    1f8a:	a0 93 57 45 	sts	0x4557, r26	; 0x804557 <g_current_epoch+0x2>
    1f8e:	b0 93 58 45 	sts	0x4558, r27	; 0x804558 <g_current_epoch+0x3>
    1f92:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    1f96:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    1f9a:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    1f9e:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    1fa2:	2b 2f       	mov	r18, r27
    1fa4:	2f 93       	push	r18
    1fa6:	2a 2f       	mov	r18, r26
    1fa8:	2f 93       	push	r18
    1faa:	29 2f       	mov	r18, r25
    1fac:	2f 93       	push	r18
    1fae:	8f 93       	push	r24
    1fb0:	85 e7       	ldi	r24, 0x75	; 117
    1fb2:	92 e4       	ldi	r25, 0x42	; 66
    1fb4:	89 2f       	mov	r24, r25
    1fb6:	8f 93       	push	r24
    1fb8:	85 e7       	ldi	r24, 0x75	; 117
    1fba:	92 e4       	ldi	r25, 0x42	; 66
    1fbc:	8f 93       	push	r24
    1fbe:	85 ed       	ldi	r24, 0xD5	; 213
    1fc0:	94 e4       	ldi	r25, 0x44	; 68
    1fc2:	89 2f       	mov	r24, r25
    1fc4:	8f 93       	push	r24
    1fc6:	85 ed       	ldi	r24, 0xD5	; 213
    1fc8:	94 e4       	ldi	r25, 0x44	; 68
    1fca:	8f 93       	push	r24
    1fcc:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    1fd0:	8d b7       	in	r24, 0x3d	; 61
    1fd2:	9e b7       	in	r25, 0x3e	; 62
    1fd4:	08 96       	adiw	r24, 0x08	; 8
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	60 e0       	ldi	r22, 0x00	; 0
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	0e 94 a7 1b 	call	0x374e	; 0x374e <_Z11setupForFoxP5Fox_t13EventAction_t>
    1fe4:	8d c0       	rjmp	.+282    	; 0x2100 <_Z19handleSerialBusMsgsv+0x996>
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	cb 96       	adiw	r24, 0x3b	; 59
    1fea:	0e 94 1c 23 	call	0x4638	; 0x4638 <ds3231_get_epoch>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	80 93 55 45 	sts	0x4555, r24	; 0x804555 <g_current_epoch>
    1ff6:	90 93 56 45 	sts	0x4556, r25	; 0x804556 <g_current_epoch+0x1>
    1ffa:	a0 93 57 45 	sts	0x4557, r26	; 0x804557 <g_current_epoch+0x2>
    1ffe:	b0 93 58 45 	sts	0x4558, r27	; 0x804558 <g_current_epoch+0x3>
    2002:	8b ad       	ldd	r24, Y+59	; 0x3b
    2004:	88 23       	and	r24, r24
    2006:	c9 f4       	brne	.+50     	; 0x203a <_Z19handleSerialBusMsgsv+0x8d0>
    2008:	20 91 44 45 	lds	r18, 0x4544	; 0x804544 <g_event_start_epoch>
    200c:	30 91 45 45 	lds	r19, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    2010:	40 91 46 45 	lds	r20, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    2014:	50 91 47 45 	lds	r21, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    2018:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    201c:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    2020:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    2024:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    2028:	e1 2c       	mov	r14, r1
    202a:	f1 2c       	mov	r15, r1
    202c:	0f e7       	ldi	r16, 0x7F	; 127
    202e:	12 e4       	ldi	r17, 0x42	; 66
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <_Z14reportTimeTillmmPKcS0_>
    2038:	04 c0       	rjmp	.+8      	; 0x2042 <_Z19handleSerialBusMsgsv+0x8d8>
    203a:	83 ee       	ldi	r24, 0xE3	; 227
    203c:	91 e4       	ldi	r25, 0x41	; 65
    203e:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    2042:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    2046:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    204a:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    204e:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    2052:	2b 2f       	mov	r18, r27
    2054:	2f 93       	push	r18
    2056:	2a 2f       	mov	r18, r26
    2058:	2f 93       	push	r18
    205a:	29 2f       	mov	r18, r25
    205c:	2f 93       	push	r18
    205e:	8f 93       	push	r24
    2060:	8b e8       	ldi	r24, 0x8B	; 139
    2062:	92 e4       	ldi	r25, 0x42	; 66
    2064:	89 2f       	mov	r24, r25
    2066:	8f 93       	push	r24
    2068:	8b e8       	ldi	r24, 0x8B	; 139
    206a:	92 e4       	ldi	r25, 0x42	; 66
    206c:	8f 93       	push	r24
    206e:	85 ed       	ldi	r24, 0xD5	; 213
    2070:	94 e4       	ldi	r25, 0x44	; 68
    2072:	89 2f       	mov	r24, r25
    2074:	8f 93       	push	r24
    2076:	85 ed       	ldi	r24, 0xD5	; 213
    2078:	94 e4       	ldi	r25, 0x44	; 68
    207a:	8f 93       	push	r24
    207c:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    2080:	ed b7       	in	r30, 0x3d	; 61
    2082:	fe b7       	in	r31, 0x3e	; 62
    2084:	38 96       	adiw	r30, 0x08	; 8
    2086:	cd bf       	out	0x3d, r28	; 61
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	3a c0       	rjmp	.+116    	; 0x2100 <_Z19handleSerialBusMsgsv+0x996>
    208c:	ce 01       	movw	r24, r28
    208e:	cc 96       	adiw	r24, 0x3c	; 60
    2090:	0e 94 1c 23 	call	0x4638	; 0x4638 <ds3231_get_epoch>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	80 93 55 45 	sts	0x4555, r24	; 0x804555 <g_current_epoch>
    209c:	90 93 56 45 	sts	0x4556, r25	; 0x804556 <g_current_epoch+0x1>
    20a0:	a0 93 57 45 	sts	0x4557, r26	; 0x804557 <g_current_epoch+0x2>
    20a4:	b0 93 58 45 	sts	0x4558, r27	; 0x804558 <g_current_epoch+0x3>
    20a8:	8c ad       	ldd	r24, Y+60	; 0x3c
    20aa:	88 23       	and	r24, r24
    20ac:	29 f5       	brne	.+74     	; 0x20f8 <_Z19handleSerialBusMsgsv+0x98e>
    20ae:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    20b2:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    20b6:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    20ba:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    20be:	2b 2f       	mov	r18, r27
    20c0:	2f 93       	push	r18
    20c2:	2a 2f       	mov	r18, r26
    20c4:	2f 93       	push	r18
    20c6:	29 2f       	mov	r18, r25
    20c8:	2f 93       	push	r18
    20ca:	8f 93       	push	r24
    20cc:	8b e8       	ldi	r24, 0x8B	; 139
    20ce:	92 e4       	ldi	r25, 0x42	; 66
    20d0:	89 2f       	mov	r24, r25
    20d2:	8f 93       	push	r24
    20d4:	8b e8       	ldi	r24, 0x8B	; 139
    20d6:	92 e4       	ldi	r25, 0x42	; 66
    20d8:	8f 93       	push	r24
    20da:	85 ed       	ldi	r24, 0xD5	; 213
    20dc:	94 e4       	ldi	r25, 0x44	; 68
    20de:	89 2f       	mov	r24, r25
    20e0:	8f 93       	push	r24
    20e2:	85 ed       	ldi	r24, 0xD5	; 213
    20e4:	94 e4       	ldi	r25, 0x44	; 68
    20e6:	8f 93       	push	r24
    20e8:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    20ec:	8d b7       	in	r24, 0x3d	; 61
    20ee:	9e b7       	in	r25, 0x3e	; 62
    20f0:	08 96       	adiw	r24, 0x08	; 8
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	04 c0       	rjmp	.+8      	; 0x2100 <_Z19handleSerialBusMsgsv+0x996>
    20f8:	83 ee       	ldi	r24, 0xE3	; 227
    20fa:	91 e4       	ldi	r25, 0x41	; 65
    20fc:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	89 87       	std	Y+9, r24	; 0x09
    2104:	84 c1       	rjmp	.+776    	; 0x240e <_Z19handleSerialBusMsgsv+0xca4>
    2106:	8a 85       	ldd	r24, Y+10	; 0x0a
    2108:	9b 85       	ldd	r25, Y+11	; 0x0b
    210a:	fc 01       	movw	r30, r24
    210c:	83 81       	ldd	r24, Z+3	; 0x03
    210e:	83 35       	cpi	r24, 0x53	; 83
    2110:	09 f0       	breq	.+2      	; 0x2114 <_Z19handleSerialBusMsgsv+0x9aa>
    2112:	a1 c0       	rjmp	.+322    	; 0x2256 <_Z19handleSerialBusMsgsv+0xaec>
    2114:	8a 85       	ldd	r24, Y+10	; 0x0a
    2116:	9b 85       	ldd	r25, Y+11	; 0x0b
    2118:	47 96       	adiw	r24, 0x17	; 23
    211a:	bc 01       	movw	r22, r24
    211c:	85 ed       	ldi	r24, 0xD5	; 213
    211e:	94 e4       	ldi	r25, 0x44	; 68
    2120:	0e 94 f5 41 	call	0x83ea	; 0x83ea <strcpy>
    2124:	80 91 4c 45 	lds	r24, 0x454C	; 0x80454c <g_utc_offset>
    2128:	81 95       	neg	r24
    212a:	48 2f       	mov	r20, r24
    212c:	64 e4       	ldi	r22, 0x44	; 68
    212e:	75 e4       	ldi	r23, 0x45	; 69
    2130:	85 ed       	ldi	r24, 0xD5	; 213
    2132:	94 e4       	ldi	r25, 0x44	; 68
    2134:	0e 94 ae 1c 	call	0x395c	; 0x395c <_Z18validateTimeStringPcPma>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	8b a3       	std	Y+35, r24	; 0x23
    213e:	9c a3       	std	Y+36, r25	; 0x24
    2140:	ad a3       	std	Y+37, r26	; 0x25
    2142:	be a3       	std	Y+38, r27	; 0x26
    2144:	8b a1       	ldd	r24, Y+35	; 0x23
    2146:	9c a1       	ldd	r25, Y+36	; 0x24
    2148:	ad a1       	ldd	r26, Y+37	; 0x25
    214a:	be a1       	ldd	r27, Y+38	; 0x26
    214c:	89 2b       	or	r24, r25
    214e:	8a 2b       	or	r24, r26
    2150:	8b 2b       	or	r24, r27
    2152:	09 f4       	brne	.+2      	; 0x2156 <_Z19handleSerialBusMsgsv+0x9ec>
    2154:	59 c0       	rjmp	.+178    	; 0x2208 <_Z19handleSerialBusMsgsv+0xa9e>
    2156:	8b a1       	ldd	r24, Y+35	; 0x23
    2158:	9c a1       	ldd	r25, Y+36	; 0x24
    215a:	ad a1       	ldd	r26, Y+37	; 0x25
    215c:	be a1       	ldd	r27, Y+38	; 0x26
    215e:	80 93 44 45 	sts	0x4544, r24	; 0x804544 <g_event_start_epoch>
    2162:	90 93 45 45 	sts	0x4545, r25	; 0x804545 <g_event_start_epoch+0x1>
    2166:	a0 93 46 45 	sts	0x4546, r26	; 0x804546 <g_event_start_epoch+0x2>
    216a:	b0 93 47 45 	sts	0x4547, r27	; 0x804547 <g_event_start_epoch+0x3>
    216e:	44 e4       	ldi	r20, 0x44	; 68
    2170:	55 e4       	ldi	r21, 0x45	; 69
    2172:	62 e0       	ldi	r22, 0x02	; 2
    2174:	83 e4       	ldi	r24, 0x43	; 67
    2176:	95 e4       	ldi	r25, 0x45	; 69
    2178:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    217c:	80 91 48 45 	lds	r24, 0x4548	; 0x804548 <g_event_finish_epoch>
    2180:	90 91 49 45 	lds	r25, 0x4549	; 0x804549 <g_event_finish_epoch+0x1>
    2184:	a0 91 4a 45 	lds	r26, 0x454A	; 0x80454a <g_event_finish_epoch+0x2>
    2188:	b0 91 4b 45 	lds	r27, 0x454B	; 0x80454b <g_event_finish_epoch+0x3>
    218c:	8f a3       	std	Y+39, r24	; 0x27
    218e:	98 a7       	std	Y+40, r25	; 0x28
    2190:	a9 a7       	std	Y+41, r26	; 0x29
    2192:	ba a7       	std	Y+42, r27	; 0x2a
    2194:	80 91 44 45 	lds	r24, 0x4544	; 0x804544 <g_event_start_epoch>
    2198:	90 91 45 45 	lds	r25, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    219c:	a0 91 46 45 	lds	r26, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    21a0:	b0 91 47 45 	lds	r27, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    21a4:	80 58       	subi	r24, 0x80	; 128
    21a6:	9e 4a       	sbci	r25, 0xAE	; 174
    21a8:	ae 4f       	sbci	r26, 0xFE	; 254
    21aa:	bf 4f       	sbci	r27, 0xFF	; 255
    21ac:	8b a7       	std	Y+43, r24	; 0x2b
    21ae:	9c a7       	std	Y+44, r25	; 0x2c
    21b0:	ad a7       	std	Y+45, r26	; 0x2d
    21b2:	be a7       	std	Y+46, r27	; 0x2e
    21b4:	2f a1       	ldd	r18, Y+39	; 0x27
    21b6:	38 a5       	ldd	r19, Y+40	; 0x28
    21b8:	49 a5       	ldd	r20, Y+41	; 0x29
    21ba:	5a a5       	ldd	r21, Y+42	; 0x2a
    21bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    21be:	9c a5       	ldd	r25, Y+44	; 0x2c
    21c0:	ad a5       	ldd	r26, Y+45	; 0x2d
    21c2:	be a5       	ldd	r27, Y+46	; 0x2e
    21c4:	28 17       	cp	r18, r24
    21c6:	39 07       	cpc	r19, r25
    21c8:	4a 07       	cpc	r20, r26
    21ca:	5b 07       	cpc	r21, r27
    21cc:	28 f4       	brcc	.+10     	; 0x21d8 <_Z19handleSerialBusMsgsv+0xa6e>
    21ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    21d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    21d2:	ad a5       	ldd	r26, Y+45	; 0x2d
    21d4:	be a5       	ldd	r27, Y+46	; 0x2e
    21d6:	04 c0       	rjmp	.+8      	; 0x21e0 <_Z19handleSerialBusMsgsv+0xa76>
    21d8:	8f a1       	ldd	r24, Y+39	; 0x27
    21da:	98 a5       	ldd	r25, Y+40	; 0x28
    21dc:	a9 a5       	ldd	r26, Y+41	; 0x29
    21de:	ba a5       	ldd	r27, Y+42	; 0x2a
    21e0:	80 93 48 45 	sts	0x4548, r24	; 0x804548 <g_event_finish_epoch>
    21e4:	90 93 49 45 	sts	0x4549, r25	; 0x804549 <g_event_finish_epoch+0x1>
    21e8:	a0 93 4a 45 	sts	0x454A, r26	; 0x80454a <g_event_finish_epoch+0x2>
    21ec:	b0 93 4b 45 	sts	0x454B, r27	; 0x80454b <g_event_finish_epoch+0x3>
    21f0:	48 e4       	ldi	r20, 0x48	; 72
    21f2:	55 e4       	ldi	r21, 0x45	; 69
    21f4:	66 e0       	ldi	r22, 0x06	; 6
    21f6:	83 e4       	ldi	r24, 0x43	; 67
    21f8:	95 e4       	ldi	r25, 0x45	; 69
    21fa:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    21fe:	63 e0       	ldi	r22, 0x03	; 3
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	0e 94 a7 1b 	call	0x374e	; 0x374e <_Z11setupForFoxP5Fox_t13EventAction_t>
    2208:	80 91 44 45 	lds	r24, 0x4544	; 0x804544 <g_event_start_epoch>
    220c:	90 91 45 45 	lds	r25, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    2210:	a0 91 46 45 	lds	r26, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    2214:	b0 91 47 45 	lds	r27, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    2218:	2b 2f       	mov	r18, r27
    221a:	2f 93       	push	r18
    221c:	2a 2f       	mov	r18, r26
    221e:	2f 93       	push	r18
    2220:	29 2f       	mov	r18, r25
    2222:	2f 93       	push	r18
    2224:	8f 93       	push	r24
    2226:	86 e9       	ldi	r24, 0x96	; 150
    2228:	92 e4       	ldi	r25, 0x42	; 66
    222a:	89 2f       	mov	r24, r25
    222c:	8f 93       	push	r24
    222e:	86 e9       	ldi	r24, 0x96	; 150
    2230:	92 e4       	ldi	r25, 0x42	; 66
    2232:	8f 93       	push	r24
    2234:	85 ed       	ldi	r24, 0xD5	; 213
    2236:	94 e4       	ldi	r25, 0x44	; 68
    2238:	89 2f       	mov	r24, r25
    223a:	8f 93       	push	r24
    223c:	85 ed       	ldi	r24, 0xD5	; 213
    223e:	94 e4       	ldi	r25, 0x44	; 68
    2240:	8f 93       	push	r24
    2242:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    2246:	8d b7       	in	r24, 0x3d	; 61
    2248:	9e b7       	in	r25, 0x3e	; 62
    224a:	08 96       	adiw	r24, 0x08	; 8
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	89 87       	std	Y+9, r24	; 0x09
    2254:	dc c0       	rjmp	.+440    	; 0x240e <_Z19handleSerialBusMsgsv+0xca4>
    2256:	8a 85       	ldd	r24, Y+10	; 0x0a
    2258:	9b 85       	ldd	r25, Y+11	; 0x0b
    225a:	fc 01       	movw	r30, r24
    225c:	83 81       	ldd	r24, Z+3	; 0x03
    225e:	86 34       	cpi	r24, 0x46	; 70
    2260:	09 f0       	breq	.+2      	; 0x2264 <_Z19handleSerialBusMsgsv+0xafa>
    2262:	5f c0       	rjmp	.+190    	; 0x2322 <_Z19handleSerialBusMsgsv+0xbb8>
    2264:	8a 85       	ldd	r24, Y+10	; 0x0a
    2266:	9b 85       	ldd	r25, Y+11	; 0x0b
    2268:	47 96       	adiw	r24, 0x17	; 23
    226a:	bc 01       	movw	r22, r24
    226c:	85 ed       	ldi	r24, 0xD5	; 213
    226e:	94 e4       	ldi	r25, 0x44	; 68
    2270:	0e 94 f5 41 	call	0x83ea	; 0x83ea <strcpy>
    2274:	80 91 4c 45 	lds	r24, 0x454C	; 0x80454c <g_utc_offset>
    2278:	81 95       	neg	r24
    227a:	48 2f       	mov	r20, r24
    227c:	68 e4       	ldi	r22, 0x48	; 72
    227e:	75 e4       	ldi	r23, 0x45	; 69
    2280:	85 ed       	ldi	r24, 0xD5	; 213
    2282:	94 e4       	ldi	r25, 0x44	; 68
    2284:	0e 94 ae 1c 	call	0x395c	; 0x395c <_Z18validateTimeStringPcPma>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	8f a7       	std	Y+47, r24	; 0x2f
    228e:	98 ab       	std	Y+48, r25	; 0x30
    2290:	a9 ab       	std	Y+49, r26	; 0x31
    2292:	ba ab       	std	Y+50, r27	; 0x32
    2294:	8f a5       	ldd	r24, Y+47	; 0x2f
    2296:	98 a9       	ldd	r25, Y+48	; 0x30
    2298:	a9 a9       	ldd	r26, Y+49	; 0x31
    229a:	ba a9       	ldd	r27, Y+50	; 0x32
    229c:	89 2b       	or	r24, r25
    229e:	8a 2b       	or	r24, r26
    22a0:	8b 2b       	or	r24, r27
    22a2:	c1 f0       	breq	.+48     	; 0x22d4 <_Z19handleSerialBusMsgsv+0xb6a>
    22a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22a6:	98 a9       	ldd	r25, Y+48	; 0x30
    22a8:	a9 a9       	ldd	r26, Y+49	; 0x31
    22aa:	ba a9       	ldd	r27, Y+50	; 0x32
    22ac:	80 93 48 45 	sts	0x4548, r24	; 0x804548 <g_event_finish_epoch>
    22b0:	90 93 49 45 	sts	0x4549, r25	; 0x804549 <g_event_finish_epoch+0x1>
    22b4:	a0 93 4a 45 	sts	0x454A, r26	; 0x80454a <g_event_finish_epoch+0x2>
    22b8:	b0 93 4b 45 	sts	0x454B, r27	; 0x80454b <g_event_finish_epoch+0x3>
    22bc:	48 e4       	ldi	r20, 0x48	; 72
    22be:	55 e4       	ldi	r21, 0x45	; 69
    22c0:	66 e0       	ldi	r22, 0x06	; 6
    22c2:	83 e4       	ldi	r24, 0x43	; 67
    22c4:	95 e4       	ldi	r25, 0x45	; 69
    22c6:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    22ca:	63 e0       	ldi	r22, 0x03	; 3
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	0e 94 a7 1b 	call	0x374e	; 0x374e <_Z11setupForFoxP5Fox_t13EventAction_t>
    22d4:	80 91 48 45 	lds	r24, 0x4548	; 0x804548 <g_event_finish_epoch>
    22d8:	90 91 49 45 	lds	r25, 0x4549	; 0x804549 <g_event_finish_epoch+0x1>
    22dc:	a0 91 4a 45 	lds	r26, 0x454A	; 0x80454a <g_event_finish_epoch+0x2>
    22e0:	b0 91 4b 45 	lds	r27, 0x454B	; 0x80454b <g_event_finish_epoch+0x3>
    22e4:	2b 2f       	mov	r18, r27
    22e6:	2f 93       	push	r18
    22e8:	2a 2f       	mov	r18, r26
    22ea:	2f 93       	push	r18
    22ec:	29 2f       	mov	r18, r25
    22ee:	2f 93       	push	r18
    22f0:	8f 93       	push	r24
    22f2:	81 ea       	ldi	r24, 0xA1	; 161
    22f4:	92 e4       	ldi	r25, 0x42	; 66
    22f6:	89 2f       	mov	r24, r25
    22f8:	8f 93       	push	r24
    22fa:	81 ea       	ldi	r24, 0xA1	; 161
    22fc:	92 e4       	ldi	r25, 0x42	; 66
    22fe:	8f 93       	push	r24
    2300:	85 ed       	ldi	r24, 0xD5	; 213
    2302:	94 e4       	ldi	r25, 0x44	; 68
    2304:	89 2f       	mov	r24, r25
    2306:	8f 93       	push	r24
    2308:	85 ed       	ldi	r24, 0xD5	; 213
    230a:	94 e4       	ldi	r25, 0x44	; 68
    230c:	8f 93       	push	r24
    230e:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    2312:	8d b7       	in	r24, 0x3d	; 61
    2314:	9e b7       	in	r25, 0x3e	; 62
    2316:	08 96       	adiw	r24, 0x08	; 8
    2318:	cd bf       	out	0x3d, r28	; 61
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	89 87       	std	Y+9, r24	; 0x09
    2320:	76 c0       	rjmp	.+236    	; 0x240e <_Z19handleSerialBusMsgsv+0xca4>
    2322:	8a 85       	ldd	r24, Y+10	; 0x0a
    2324:	9b 85       	ldd	r25, Y+11	; 0x0b
    2326:	fc 01       	movw	r30, r24
    2328:	83 81       	ldd	r24, Z+3	; 0x03
    232a:	8a 32       	cpi	r24, 0x2A	; 42
    232c:	19 f4       	brne	.+6      	; 0x2334 <_Z19handleSerialBusMsgsv+0xbca>
    232e:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <ds3231_sync2nearestMinute>
    2332:	6d c0       	rjmp	.+218    	; 0x240e <_Z19handleSerialBusMsgsv+0xca4>
    2334:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <_Z23clockConfigurationCheckv>
    2338:	8b ab       	std	Y+51, r24	; 0x33
    233a:	8b a9       	ldd	r24, Y+51	; 0x33
    233c:	81 30       	cpi	r24, 0x01	; 1
    233e:	31 f0       	breq	.+12     	; 0x234c <_Z19handleSerialBusMsgsv+0xbe2>
    2340:	8b a9       	ldd	r24, Y+51	; 0x33
    2342:	85 30       	cpi	r24, 0x05	; 5
    2344:	19 f0       	breq	.+6      	; 0x234c <_Z19handleSerialBusMsgsv+0xbe2>
    2346:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <_Z18reportConfigErrorsv>
    234a:	61 c0       	rjmp	.+194    	; 0x240e <_Z19handleSerialBusMsgsv+0xca4>
    234c:	20 91 44 45 	lds	r18, 0x4544	; 0x804544 <g_event_start_epoch>
    2350:	30 91 45 45 	lds	r19, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    2354:	40 91 46 45 	lds	r20, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    2358:	50 91 47 45 	lds	r21, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    235c:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    2360:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    2364:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    2368:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    236c:	0f 2e       	mov	r0, r31
    236e:	fd ea       	ldi	r31, 0xAD	; 173
    2370:	ef 2e       	mov	r14, r31
    2372:	f2 e4       	ldi	r31, 0x42	; 66
    2374:	ff 2e       	mov	r15, r31
    2376:	f0 2d       	mov	r31, r0
    2378:	0f e7       	ldi	r16, 0x7F	; 127
    237a:	12 e4       	ldi	r17, 0x42	; 66
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <_Z14reportTimeTillmmPKcS0_>
    2384:	20 91 48 45 	lds	r18, 0x4548	; 0x804548 <g_event_finish_epoch>
    2388:	30 91 49 45 	lds	r19, 0x4549	; 0x804549 <g_event_finish_epoch+0x1>
    238c:	40 91 4a 45 	lds	r20, 0x454A	; 0x80454a <g_event_finish_epoch+0x2>
    2390:	50 91 4b 45 	lds	r21, 0x454B	; 0x80454b <g_event_finish_epoch+0x3>
    2394:	80 91 44 45 	lds	r24, 0x4544	; 0x804544 <g_event_start_epoch>
    2398:	90 91 45 45 	lds	r25, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    239c:	a0 91 46 45 	lds	r26, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    23a0:	b0 91 47 45 	lds	r27, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    23a4:	e1 2c       	mov	r14, r1
    23a6:	f1 2c       	mov	r15, r1
    23a8:	0a eb       	ldi	r16, 0xBA	; 186
    23aa:	12 e4       	ldi	r17, 0x42	; 66
    23ac:	bc 01       	movw	r22, r24
    23ae:	cd 01       	movw	r24, r26
    23b0:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <_Z14reportTimeTillmmPKcS0_>
    23b4:	20 91 44 45 	lds	r18, 0x4544	; 0x804544 <g_event_start_epoch>
    23b8:	30 91 45 45 	lds	r19, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    23bc:	40 91 46 45 	lds	r20, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    23c0:	50 91 47 45 	lds	r21, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    23c4:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    23c8:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    23cc:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    23d0:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    23d4:	28 17       	cp	r18, r24
    23d6:	39 07       	cpc	r19, r25
    23d8:	4a 07       	cpc	r20, r26
    23da:	5b 07       	cpc	r21, r27
    23dc:	c0 f4       	brcc	.+48     	; 0x240e <_Z19handleSerialBusMsgsv+0xca4>
    23de:	20 91 48 45 	lds	r18, 0x4548	; 0x804548 <g_event_finish_epoch>
    23e2:	30 91 49 45 	lds	r19, 0x4549	; 0x804549 <g_event_finish_epoch+0x1>
    23e6:	40 91 4a 45 	lds	r20, 0x454A	; 0x80454a <g_event_finish_epoch+0x2>
    23ea:	50 91 4b 45 	lds	r21, 0x454B	; 0x80454b <g_event_finish_epoch+0x3>
    23ee:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    23f2:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    23f6:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    23fa:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    23fe:	e1 2c       	mov	r14, r1
    2400:	f1 2c       	mov	r15, r1
    2402:	02 ec       	ldi	r16, 0xC2	; 194
    2404:	12 e4       	ldi	r17, 0x42	; 66
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <_Z14reportTimeTillmmPKcS0_>
    240e:	89 85       	ldd	r24, Y+9	; 0x09
    2410:	88 23       	and	r24, r24
    2412:	11 f1       	breq	.+68     	; 0x2458 <_Z19handleSerialBusMsgsv+0xcee>
    2414:	85 ed       	ldi	r24, 0xD5	; 213
    2416:	94 e4       	ldi	r25, 0x44	; 68
    2418:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    241c:	1d c0       	rjmp	.+58     	; 0x2458 <_Z19handleSerialBusMsgsv+0xcee>
    241e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2420:	9b 85       	ldd	r25, Y+11	; 0x0b
    2422:	fc 01       	movw	r30, r24
    2424:	83 81       	ldd	r24, Z+3	; 0x03
    2426:	83 34       	cpi	r24, 0x43	; 67
    2428:	c9 f4       	brne	.+50     	; 0x245c <_Z19handleSerialBusMsgsv+0xcf2>
    242a:	8a 85       	ldd	r24, Y+10	; 0x0a
    242c:	9b 85       	ldd	r25, Y+11	; 0x0b
    242e:	fc 01       	movw	r30, r24
    2430:	87 89       	ldd	r24, Z+23	; 0x17
    2432:	88 23       	and	r24, r24
    2434:	99 f0       	breq	.+38     	; 0x245c <_Z19handleSerialBusMsgsv+0xcf2>
    2436:	8a 85       	ldd	r24, Y+10	; 0x0a
    2438:	9b 85       	ldd	r25, Y+11	; 0x0b
    243a:	47 96       	adiw	r24, 0x17	; 23
    243c:	0e 94 9d 41 	call	0x833a	; 0x833a <atoi>
    2440:	8c ab       	std	Y+52, r24	; 0x34
    2442:	9d ab       	std	Y+53, r25	; 0x35
    2444:	0b c0       	rjmp	.+22     	; 0x245c <_Z19handleSerialBusMsgsv+0xcf2>
    2446:	85 e7       	ldi	r24, 0x75	; 117
    2448:	90 e4       	ldi	r25, 0x40	; 64
    244a:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    244e:	07 c0       	rjmp	.+14     	; 0x245e <_Z19handleSerialBusMsgsv+0xcf4>
    2450:	00 00       	nop
    2452:	05 c0       	rjmp	.+10     	; 0x245e <_Z19handleSerialBusMsgsv+0xcf4>
    2454:	00 00       	nop
    2456:	03 c0       	rjmp	.+6      	; 0x245e <_Z19handleSerialBusMsgsv+0xcf4>
    2458:	00 00       	nop
    245a:	01 c0       	rjmp	.+2      	; 0x245e <_Z19handleSerialBusMsgsv+0xcf4>
    245c:	00 00       	nop
    245e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2460:	9b 85       	ldd	r25, Y+11	; 0x0b
    2462:	fc 01       	movw	r30, r24
    2464:	11 82       	std	Z+1, r1	; 0x01
    2466:	12 82       	std	Z+2, r1	; 0x02
    2468:	0e 94 7f 32 	call	0x64fe	; 0x64fe <sb_send_NewPrompt>
    246c:	89 c9       	rjmp	.-3310   	; 0x1780 <_Z19handleSerialBusMsgsv+0x16>
    246e:	00 00       	nop
    2470:	ec 96       	adiw	r28, 0x3c	; 60
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	de bf       	out	0x3e, r29	; 62
    2476:	df 91       	pop	r29
    2478:	cf 91       	pop	r28
    247a:	1f 91       	pop	r17
    247c:	0f 91       	pop	r16
    247e:	ff 90       	pop	r15
    2480:	ef 90       	pop	r14
    2482:	08 95       	ret

00002484 <_Z17handleLinkBusMsgsv>:
    2484:	ef 92       	push	r14
    2486:	ff 92       	push	r15
    2488:	0f 93       	push	r16
    248a:	1f 93       	push	r17
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	e3 97       	sbiw	r28, 0x33	; 51
    2496:	cd bf       	out	0x3d, r28	; 61
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	89 83       	std	Y+1, r24	; 0x01
    249e:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_Z18nextFullLBRxBufferv>
    24a2:	8c 87       	std	Y+12, r24	; 0x0c
    24a4:	9d 87       	std	Y+13, r25	; 0x0d
    24a6:	21 e0       	ldi	r18, 0x01	; 1
    24a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    24aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    24ac:	89 2b       	or	r24, r25
    24ae:	09 f4       	brne	.+2      	; 0x24b2 <_Z17handleLinkBusMsgsv+0x2e>
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	22 23       	and	r18, r18
    24b4:	09 f4       	brne	.+2      	; 0x24b8 <_Z17handleLinkBusMsgsv+0x34>
    24b6:	89 c6       	rjmp	.+3346   	; 0x31ca <_Z17handleLinkBusMsgsv+0xd46>
    24b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    24ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    24bc:	fc 01       	movw	r30, r24
    24be:	81 81       	ldd	r24, Z+1	; 0x01
    24c0:	92 81       	ldd	r25, Z+2	; 0x02
    24c2:	8e 87       	std	Y+14, r24	; 0x0e
    24c4:	9f 87       	std	Y+15, r25	; 0x0f
    24c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    24c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    24ca:	82 38       	cpi	r24, 0x82	; 130
    24cc:	fe e1       	ldi	r31, 0x1E	; 30
    24ce:	9f 07       	cpc	r25, r31
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <_Z17handleLinkBusMsgsv+0x50>
    24d2:	6c c0       	rjmp	.+216    	; 0x25ac <_Z17handleLinkBusMsgsv+0x128>
    24d4:	83 38       	cpi	r24, 0x83	; 131
    24d6:	2e e1       	ldi	r18, 0x1E	; 30
    24d8:	92 07       	cpc	r25, r18
    24da:	30 f5       	brcc	.+76     	; 0x2528 <_Z17handleLinkBusMsgsv+0xa4>
    24dc:	81 36       	cpi	r24, 0x61	; 97
    24de:	33 e0       	ldi	r19, 0x03	; 3
    24e0:	93 07       	cpc	r25, r19
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <_Z17handleLinkBusMsgsv+0x62>
    24e4:	d8 c4       	rjmp	.+2480   	; 0x2e96 <_Z17handleLinkBusMsgsv+0xa12>
    24e6:	82 36       	cpi	r24, 0x62	; 98
    24e8:	e3 e0       	ldi	r30, 0x03	; 3
    24ea:	9e 07       	cpc	r25, r30
    24ec:	78 f4       	brcc	.+30     	; 0x250c <_Z17handleLinkBusMsgsv+0x88>
    24ee:	85 31       	cpi	r24, 0x15	; 21
    24f0:	f3 e0       	ldi	r31, 0x03	; 3
    24f2:	9f 07       	cpc	r25, r31
    24f4:	09 f4       	brne	.+2      	; 0x24f8 <_Z17handleLinkBusMsgsv+0x74>
    24f6:	1d c1       	rjmp	.+570    	; 0x2732 <_Z17handleLinkBusMsgsv+0x2ae>
    24f8:	8e 31       	cpi	r24, 0x1E	; 30
    24fa:	23 e0       	ldi	r18, 0x03	; 3
    24fc:	92 07       	cpc	r25, r18
    24fe:	09 f4       	brne	.+2      	; 0x2502 <_Z17handleLinkBusMsgsv+0x7e>
    2500:	3f c3       	rjmp	.+1662   	; 0x2b80 <_Z17handleLinkBusMsgsv+0x6fc>
    2502:	84 35       	cpi	r24, 0x54	; 84
    2504:	91 05       	cpc	r25, r1
    2506:	09 f4       	brne	.+2      	; 0x250a <_Z17handleLinkBusMsgsv+0x86>
    2508:	3b c4       	rjmp	.+2166   	; 0x2d80 <_Z17handleLinkBusMsgsv+0x8fc>
    250a:	34 c6       	rjmp	.+3176   	; 0x3174 <_Z17handleLinkBusMsgsv+0xcf0>
    250c:	8f 3a       	cpi	r24, 0xAF	; 175
    250e:	33 e0       	ldi	r19, 0x03	; 3
    2510:	93 07       	cpc	r25, r19
    2512:	c9 f1       	breq	.+114    	; 0x2586 <_Z17handleLinkBusMsgsv+0x102>
    2514:	86 3a       	cpi	r24, 0xA6	; 166
    2516:	ec e1       	ldi	r30, 0x1C	; 28
    2518:	9e 07       	cpc	r25, r30
    251a:	09 f4       	brne	.+2      	; 0x251e <_Z17handleLinkBusMsgsv+0x9a>
    251c:	49 c5       	rjmp	.+2706   	; 0x2fb0 <_Z17handleLinkBusMsgsv+0xb2c>
    251e:	84 38       	cpi	r24, 0x84	; 132
    2520:	93 40       	sbci	r25, 0x03	; 3
    2522:	09 f4       	brne	.+2      	; 0x2526 <_Z17handleLinkBusMsgsv+0xa2>
    2524:	c7 c1       	rjmp	.+910    	; 0x28b4 <_Z17handleLinkBusMsgsv+0x430>
    2526:	26 c6       	rjmp	.+3148   	; 0x3174 <_Z17handleLinkBusMsgsv+0xcf0>
    2528:	8a 39       	cpi	r24, 0x9A	; 154
    252a:	23 e2       	ldi	r18, 0x23	; 35
    252c:	92 07       	cpc	r25, r18
    252e:	e9 f1       	breq	.+122    	; 0x25aa <_Z17handleLinkBusMsgsv+0x126>
    2530:	8b 39       	cpi	r24, 0x9B	; 155
    2532:	33 e2       	ldi	r19, 0x23	; 35
    2534:	93 07       	cpc	r25, r19
    2536:	78 f4       	brcc	.+30     	; 0x2556 <_Z17handleLinkBusMsgsv+0xd2>
    2538:	8d 3a       	cpi	r24, 0xAD	; 173
    253a:	e2 e2       	ldi	r30, 0x22	; 34
    253c:	9e 07       	cpc	r25, r30
    253e:	09 f4       	brne	.+2      	; 0x2542 <_Z17handleLinkBusMsgsv+0xbe>
    2540:	96 c0       	rjmp	.+300    	; 0x266e <_Z17handleLinkBusMsgsv+0x1ea>
    2542:	81 3c       	cpi	r24, 0xC1	; 193
    2544:	f2 e2       	ldi	r31, 0x22	; 34
    2546:	9f 07       	cpc	r25, r31
    2548:	09 f4       	brne	.+2      	; 0x254c <_Z17handleLinkBusMsgsv+0xc8>
    254a:	ee c0       	rjmp	.+476    	; 0x2728 <_Z17handleLinkBusMsgsv+0x2a4>
    254c:	81 3d       	cpi	r24, 0xD1	; 209
    254e:	9e 41       	sbci	r25, 0x1E	; 30
    2550:	09 f4       	brne	.+2      	; 0x2554 <_Z17handleLinkBusMsgsv+0xd0>
    2552:	b8 c4       	rjmp	.+2416   	; 0x2ec4 <_Z17handleLinkBusMsgsv+0xa40>
    2554:	0f c6       	rjmp	.+3102   	; 0x3174 <_Z17handleLinkBusMsgsv+0xcf0>
    2556:	80 3d       	cpi	r24, 0xD0	; 208
    2558:	33 e2       	ldi	r19, 0x23	; 35
    255a:	93 07       	cpc	r25, r19
    255c:	09 f4       	brne	.+2      	; 0x2560 <_Z17handleLinkBusMsgsv+0xdc>
    255e:	73 c3       	rjmp	.+1766   	; 0x2c46 <_Z17handleLinkBusMsgsv+0x7c2>
    2560:	81 3d       	cpi	r24, 0xD1	; 209
    2562:	e3 e2       	ldi	r30, 0x23	; 35
    2564:	9e 07       	cpc	r25, r30
    2566:	28 f4       	brcc	.+10     	; 0x2572 <_Z17handleLinkBusMsgsv+0xee>
    2568:	8f 3c       	cpi	r24, 0xCF	; 207
    256a:	93 42       	sbci	r25, 0x23	; 35
    256c:	09 f4       	brne	.+2      	; 0x2570 <_Z17handleLinkBusMsgsv+0xec>
    256e:	e8 c5       	rjmp	.+3024   	; 0x3140 <_Z17handleLinkBusMsgsv+0xcbc>
    2570:	01 c6       	rjmp	.+3074   	; 0x3174 <_Z17handleLinkBusMsgsv+0xcf0>
    2572:	87 3f       	cpi	r24, 0xF7	; 247
    2574:	23 e2       	ldi	r18, 0x23	; 35
    2576:	92 07       	cpc	r25, r18
    2578:	09 f4       	brne	.+2      	; 0x257c <_Z17handleLinkBusMsgsv+0xf8>
    257a:	11 c2       	rjmp	.+1058   	; 0x299e <_Z17handleLinkBusMsgsv+0x51a>
    257c:	8c 39       	cpi	r24, 0x9C	; 156
    257e:	94 42       	sbci	r25, 0x24	; 36
    2580:	09 f4       	brne	.+2      	; 0x2584 <_Z17handleLinkBusMsgsv+0x100>
    2582:	f0 c5       	rjmp	.+3040   	; 0x3164 <_Z17handleLinkBusMsgsv+0xce0>
    2584:	f7 c5       	rjmp	.+3054   	; 0x3174 <_Z17handleLinkBusMsgsv+0xcf0>
    2586:	8c 85       	ldd	r24, Y+12	; 0x0c
    2588:	9d 85       	ldd	r25, Y+13	; 0x0d
    258a:	fc 01       	movw	r30, r24
    258c:	83 81       	ldd	r24, Z+3	; 0x03
    258e:	88 23       	and	r24, r24
    2590:	09 f4       	brne	.+2      	; 0x2594 <_Z17handleLinkBusMsgsv+0x110>
    2592:	f6 c5       	rjmp	.+3052   	; 0x3180 <_Z17handleLinkBusMsgsv+0xcfc>
    2594:	8c 85       	ldd	r24, Y+12	; 0x0c
    2596:	9d 85       	ldd	r25, Y+13	; 0x0d
    2598:	03 96       	adiw	r24, 0x03	; 3
    259a:	0e 94 9d 41 	call	0x833a	; 0x833a <atoi>
    259e:	88 8b       	std	Y+16, r24	; 0x10
    25a0:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <_Z15linkbus_disablev>
    25a4:	10 92 09 40 	sts	0x4009, r1	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    25a8:	eb c5       	rjmp	.+3030   	; 0x3180 <_Z17handleLinkBusMsgsv+0xcfc>
    25aa:	ff cf       	rjmp	.-2      	; 0x25aa <_Z17handleLinkBusMsgsv+0x126>
    25ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    25ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    25b0:	fc 01       	movw	r30, r24
    25b2:	83 81       	ldd	r24, Z+3	; 0x03
    25b4:	89 8b       	std	Y+17, r24	; 0x11
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL13g_wifi_active>
    25bc:	89 89       	ldd	r24, Y+17	; 0x11
    25be:	8a 35       	cpi	r24, 0x5A	; 90
    25c0:	21 f4       	brne	.+8      	; 0x25ca <_Z17handleLinkBusMsgsv+0x146>
    25c2:	88 e7       	ldi	r24, 0x78	; 120
    25c4:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    25c8:	dd c5       	rjmp	.+3002   	; 0x3184 <_Z17handleLinkBusMsgsv+0xd00>
    25ca:	89 89       	ldd	r24, Y+17	; 0x11
    25cc:	80 33       	cpi	r24, 0x30	; 48
    25ce:	d1 f5       	brne	.+116    	; 0x2644 <_Z17handleLinkBusMsgsv+0x1c0>
    25d0:	90 91 32 45 	lds	r25, 0x4532	; 0x804532 <g_waiting_for_next_event>
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	99 23       	and	r25, r25
    25d8:	09 f4       	brne	.+2      	; 0x25dc <_Z17handleLinkBusMsgsv+0x158>
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	88 23       	and	r24, r24
    25de:	39 f0       	breq	.+14     	; 0x25ee <_Z17handleLinkBusMsgsv+0x16a>
    25e0:	43 ed       	ldi	r20, 0xD3	; 211
    25e2:	52 e4       	ldi	r21, 0x42	; 66
    25e4:	65 ed       	ldi	r22, 0xD5	; 213
    25e6:	72 e4       	ldi	r23, 0x42	; 66
    25e8:	83 e0       	ldi	r24, 0x03	; 3
    25ea:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_Z11lb_send_msg13LBMessageTypePKcPc>
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <time>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	2b 2f       	mov	r18, r27
    25fc:	2f 93       	push	r18
    25fe:	2a 2f       	mov	r18, r26
    2600:	2f 93       	push	r18
    2602:	29 2f       	mov	r18, r25
    2604:	2f 93       	push	r18
    2606:	8f 93       	push	r24
    2608:	89 ed       	ldi	r24, 0xD9	; 217
    260a:	92 e4       	ldi	r25, 0x42	; 66
    260c:	89 2f       	mov	r24, r25
    260e:	8f 93       	push	r24
    2610:	89 ed       	ldi	r24, 0xD9	; 217
    2612:	92 e4       	ldi	r25, 0x42	; 66
    2614:	8f 93       	push	r24
    2616:	85 ed       	ldi	r24, 0xD5	; 213
    2618:	94 e4       	ldi	r25, 0x44	; 68
    261a:	89 2f       	mov	r24, r25
    261c:	8f 93       	push	r24
    261e:	85 ed       	ldi	r24, 0xD5	; 213
    2620:	94 e4       	ldi	r25, 0x44	; 68
    2622:	8f 93       	push	r24
    2624:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    2628:	2d b7       	in	r18, 0x3d	; 61
    262a:	3e b7       	in	r19, 0x3e	; 62
    262c:	28 5f       	subi	r18, 0xF8	; 248
    262e:	3f 4f       	sbci	r19, 0xFF	; 255
    2630:	cd bf       	out	0x3d, r28	; 61
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	45 ed       	ldi	r20, 0xD5	; 213
    2636:	54 e4       	ldi	r21, 0x44	; 68
    2638:	6d ed       	ldi	r22, 0xDD	; 221
    263a:	72 e4       	ldi	r23, 0x42	; 66
    263c:	83 e0       	ldi	r24, 0x03	; 3
    263e:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_Z11lb_send_msg13LBMessageTypePKcPc>
    2642:	a0 c5       	rjmp	.+2880   	; 0x3184 <_Z17handleLinkBusMsgsv+0xd00>
    2644:	89 89       	ldd	r24, Y+17	; 0x11
    2646:	83 33       	cpi	r24, 0x33	; 51
    2648:	09 f0       	breq	.+2      	; 0x264c <_Z17handleLinkBusMsgsv+0x1c8>
    264a:	9c c5       	rjmp	.+2872   	; 0x3184 <_Z17handleLinkBusMsgsv+0xd00>
    264c:	f8 94       	cli
    264e:	10 92 f6 44 	sts	0x44F6, r1	; 0x8044f6 <_ZL19g_wifi_enable_delay>
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    2658:	10 92 32 45 	sts	0x4532, r1	; 0x804532 <g_waiting_for_next_event>
    265c:	10 92 31 45 	sts	0x4531, r1	; 0x804531 <g_check_for_next_event>
    2660:	10 92 0a 40 	sts	0x400A, r1	; 0x80400a <_ZL13g_wifi_active>
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	80 93 f7 44 	sts	0x44F7, r24	; 0x8044f7 <_ZL20g_shutting_down_wifi>
    266a:	78 94       	sei
    266c:	8b c5       	rjmp	.+2838   	; 0x3184 <_Z17handleLinkBusMsgsv+0xd00>
    266e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2670:	9d 85       	ldd	r25, Y+13	; 0x0d
    2672:	fc 01       	movw	r30, r24
    2674:	83 81       	ldd	r24, Z+3	; 0x03
    2676:	88 23       	and	r24, r24
    2678:	09 f4       	brne	.+2      	; 0x267c <_Z17handleLinkBusMsgsv+0x1f8>
    267a:	86 c5       	rjmp	.+2828   	; 0x3188 <_Z17handleLinkBusMsgsv+0xd04>
    267c:	8c 85       	ldd	r24, Y+12	; 0x0c
    267e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2680:	fc 01       	movw	r30, r24
    2682:	83 81       	ldd	r24, Z+3	; 0x03
    2684:	8d 34       	cpi	r24, 0x4D	; 77
    2686:	a9 f4       	brne	.+42     	; 0x26b2 <_Z17handleLinkBusMsgsv+0x22e>
    2688:	8c 85       	ldd	r24, Y+12	; 0x0c
    268a:	9d 85       	ldd	r25, Y+13	; 0x0d
    268c:	fc 01       	movw	r30, r24
    268e:	80 8d       	ldd	r24, Z+24	; 0x18
    2690:	88 23       	and	r24, r24
    2692:	79 f0       	breq	.+30     	; 0x26b2 <_Z17handleLinkBusMsgsv+0x22e>
    2694:	8c 85       	ldd	r24, Y+12	; 0x0c
    2696:	9d 85       	ldd	r25, Y+13	; 0x0d
    2698:	48 96       	adiw	r24, 0x18	; 24
    269a:	0e 94 9d 41 	call	0x833a	; 0x833a <atoi>
    269e:	80 93 62 45 	sts	0x4562, r24	; 0x804562 <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    26a2:	90 93 63 45 	sts	0x4563, r25	; 0x804563 <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    26a6:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    26aa:	8f 5f       	subi	r24, 0xFF	; 255
    26ac:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    26b0:	09 c0       	rjmp	.+18     	; 0x26c4 <_Z17handleLinkBusMsgsv+0x240>
    26b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    26b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    26b6:	03 96       	adiw	r24, 0x03	; 3
    26b8:	0e 94 9d 41 	call	0x833a	; 0x833a <atoi>
    26bc:	80 93 62 45 	sts	0x4562, r24	; 0x804562 <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    26c0:	90 93 63 45 	sts	0x4563, r25	; 0x804563 <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    26c4:	60 e0       	ldi	r22, 0x00	; 0
    26c6:	70 e0       	ldi	r23, 0x00	; 0
    26c8:	82 e6       	ldi	r24, 0x62	; 98
    26ca:	95 e4       	ldi	r25, 0x45	; 69
    26cc:	0e 94 7b 3b 	call	0x76f6	; 0x76f6 <_Z15txSetParametersPjPh>
    26d0:	8a 8b       	std	Y+18, r24	; 0x12
    26d2:	8a 89       	ldd	r24, Y+18	; 0x12
    26d4:	88 23       	and	r24, r24
    26d6:	19 f0       	breq	.+6      	; 0x26de <_Z17handleLinkBusMsgsv+0x25a>
    26d8:	8a 89       	ldd	r24, Y+18	; 0x12
    26da:	80 93 ea 44 	sts	0x44EA, r24	; 0x8044ea <_ZL17g_last_error_code>
    26de:	80 91 62 45 	lds	r24, 0x4562	; 0x804562 <_ZZ17handleLinkBusMsgsvE6pwr_mW>
    26e2:	90 91 63 45 	lds	r25, 0x4563	; 0x804563 <_ZZ17handleLinkBusMsgsvE6pwr_mW+0x1>
    26e6:	29 2f       	mov	r18, r25
    26e8:	2f 93       	push	r18
    26ea:	8f 93       	push	r24
    26ec:	81 ee       	ldi	r24, 0xE1	; 225
    26ee:	92 e4       	ldi	r25, 0x42	; 66
    26f0:	89 2f       	mov	r24, r25
    26f2:	8f 93       	push	r24
    26f4:	81 ee       	ldi	r24, 0xE1	; 225
    26f6:	92 e4       	ldi	r25, 0x42	; 66
    26f8:	8f 93       	push	r24
    26fa:	85 ed       	ldi	r24, 0xD5	; 213
    26fc:	94 e4       	ldi	r25, 0x44	; 68
    26fe:	89 2f       	mov	r24, r25
    2700:	8f 93       	push	r24
    2702:	85 ed       	ldi	r24, 0xD5	; 213
    2704:	94 e4       	ldi	r25, 0x44	; 68
    2706:	8f 93       	push	r24
    2708:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	0f 90       	pop	r0
    2718:	45 ed       	ldi	r20, 0xD5	; 213
    271a:	54 e4       	ldi	r21, 0x44	; 68
    271c:	66 ee       	ldi	r22, 0xE6	; 230
    271e:	72 e4       	ldi	r23, 0x42	; 66
    2720:	83 e0       	ldi	r24, 0x03	; 3
    2722:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_Z11lb_send_msg13LBMessageTypePKcPc>
    2726:	30 c5       	rjmp	.+2656   	; 0x3188 <_Z17handleLinkBusMsgsv+0xd04>
    2728:	83 e4       	ldi	r24, 0x43	; 67
    272a:	95 e4       	ldi	r25, 0x45	; 69
    272c:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <_ZN13EepromManager13saveAllEEPROMEv>
    2730:	3e c5       	rjmp	.+2684   	; 0x31ae <_Z17handleLinkBusMsgsv+0xd2a>
    2732:	8c 85       	ldd	r24, Y+12	; 0x0c
    2734:	9d 85       	ldd	r25, Y+13	; 0x0d
    2736:	fc 01       	movw	r30, r24
    2738:	83 81       	ldd	r24, Z+3	; 0x03
    273a:	8b 8b       	std	Y+19, r24	; 0x13
    273c:	8b 89       	ldd	r24, Y+19	; 0x13
    273e:	81 33       	cpi	r24, 0x31	; 49
    2740:	21 f0       	breq	.+8      	; 0x274a <_Z17handleLinkBusMsgsv+0x2c6>
    2742:	8b 89       	ldd	r24, Y+19	; 0x13
    2744:	82 33       	cpi	r24, 0x32	; 50
    2746:	09 f0       	breq	.+2      	; 0x274a <_Z17handleLinkBusMsgsv+0x2c6>
    2748:	a9 c0       	rjmp	.+338    	; 0x289c <_Z17handleLinkBusMsgsv+0x418>
    274a:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <_Z18txIsAntennaForBandv>
    274e:	88 23       	and	r24, r24
    2750:	31 f4       	brne	.+12     	; 0x275e <_Z17handleLinkBusMsgsv+0x2da>
    2752:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    2756:	88 23       	and	r24, r24
    2758:	11 f4       	brne	.+4      	; 0x275e <_Z17handleLinkBusMsgsv+0x2da>
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	01 c0       	rjmp	.+2      	; 0x2760 <_Z17handleLinkBusMsgsv+0x2dc>
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	88 23       	and	r24, r24
    2762:	21 f0       	breq	.+8      	; 0x276c <_Z17handleLinkBusMsgsv+0x2e8>
    2764:	87 ef       	ldi	r24, 0xF7	; 247
    2766:	80 93 ea 44 	sts	0x44EA, r24	; 0x8044ea <_ZL17g_last_error_code>
    276a:	a2 c0       	rjmp	.+324    	; 0x28b0 <_Z17handleLinkBusMsgsv+0x42c>
    276c:	8b 89       	ldd	r24, Y+19	; 0x13
    276e:	81 33       	cpi	r24, 0x31	; 49
    2770:	09 f0       	breq	.+2      	; 0x2774 <_Z17handleLinkBusMsgsv+0x2f0>
    2772:	64 c0       	rjmp	.+200    	; 0x283c <_Z17handleLinkBusMsgsv+0x3b8>
    2774:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <_Z18txIsAntennaForBandv>
    2778:	88 23       	and	r24, r24
    277a:	21 f4       	brne	.+8      	; 0x2784 <_Z17handleLinkBusMsgsv+0x300>
    277c:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    2780:	88 23       	and	r24, r24
    2782:	11 f0       	breq	.+4      	; 0x2788 <_Z17handleLinkBusMsgsv+0x304>
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	01 c0       	rjmp	.+2      	; 0x278a <_Z17handleLinkBusMsgsv+0x306>
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	88 23       	and	r24, r24
    278c:	09 f4       	brne	.+2      	; 0x2790 <_Z17handleLinkBusMsgsv+0x30c>
    278e:	52 c0       	rjmp	.+164    	; 0x2834 <_Z17handleLinkBusMsgsv+0x3b0>
    2790:	f8 94       	cli
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	8c a7       	std	Y+44, r24	; 0x2c
    2796:	ce 01       	movw	r24, r28
    2798:	8c 96       	adiw	r24, 0x2c	; 44
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	50 e0       	ldi	r21, 0x00	; 0
    279e:	bc 01       	movw	r22, r24
    27a0:	89 ef       	ldi	r24, 0xF9	; 249
    27a2:	94 e4       	ldi	r25, 0x44	; 68
    27a4:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <_Z9makeMorsePcPhS0_>
    27a8:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    27ac:	0e 94 9a 19 	call	0x3334	; 0x3334 <_Z13throttleValueh>
    27b0:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    27b4:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    27b8:	78 94       	sei
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	a0 e0       	ldi	r26, 0x00	; 0
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	80 93 27 45 	sts	0x4527, r24	; 0x804527 <g_event_start_time>
    27c6:	90 93 28 45 	sts	0x4528, r25	; 0x804528 <g_event_start_time+0x1>
    27ca:	a0 93 29 45 	sts	0x4529, r26	; 0x804529 <g_event_start_time+0x2>
    27ce:	b0 93 2a 45 	sts	0x452A, r27	; 0x80452a <g_event_start_time+0x3>
    27d2:	8f ef       	ldi	r24, 0xFF	; 255
    27d4:	9f ef       	ldi	r25, 0xFF	; 255
    27d6:	dc 01       	movw	r26, r24
    27d8:	80 93 2b 45 	sts	0x452B, r24	; 0x80452b <g_event_finish_time>
    27dc:	90 93 2c 45 	sts	0x452C, r25	; 0x80452c <g_event_finish_time+0x1>
    27e0:	a0 93 2d 45 	sts	0x452D, r26	; 0x80452d <g_event_finish_time+0x2>
    27e4:	b0 93 2e 45 	sts	0x452E, r27	; 0x80452e <g_event_finish_time+0x3>
    27e8:	8f e0       	ldi	r24, 0x0F	; 15
    27ea:	97 e2       	ldi	r25, 0x27	; 39
    27ec:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    27f0:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    27f4:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <g_off_air_seconds>
    27f8:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <g_off_air_seconds+0x1>
    27fc:	8f e0       	ldi	r24, 0x0F	; 15
    27fe:	97 e2       	ldi	r25, 0x27	; 39
    2800:	a0 e0       	ldi	r26, 0x00	; 0
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
    2808:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    280c:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    2810:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    2814:	8f ef       	ldi	r24, 0xFF	; 255
    2816:	9f ef       	ldi	r25, 0xFF	; 255
    2818:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
    281c:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	80 93 30 45 	sts	0x4530, r24	; 0x804530 <g_event_commenced>
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	80 93 2f 45 	sts	0x452F, r24	; 0x80452f <g_event_enabled>
    282c:	8d ef       	ldi	r24, 0xFD	; 253
    282e:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
    2832:	3e c0       	rjmp	.+124    	; 0x28b0 <_Z17handleLinkBusMsgsv+0x42c>
    2834:	87 ef       	ldi	r24, 0xF7	; 247
    2836:	80 93 ea 44 	sts	0x44EA, r24	; 0x8044ea <_ZL17g_last_error_code>
    283a:	3a c0       	rjmp	.+116    	; 0x28b0 <_Z17handleLinkBusMsgsv+0x42c>
    283c:	8b 89       	ldd	r24, Y+19	; 0x13
    283e:	82 33       	cpi	r24, 0x32	; 50
    2840:	b9 f5       	brne	.+110    	; 0x28b0 <_Z17handleLinkBusMsgsv+0x42c>
    2842:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2846:	8e 30       	cpi	r24, 0x0E	; 14
    2848:	20 f4       	brcc	.+8      	; 0x2852 <_Z17handleLinkBusMsgsv+0x3ce>
    284a:	8d ec       	ldi	r24, 0xCD	; 205
    284c:	80 93 ea 44 	sts	0x44EA, r24	; 0x8044ea <_ZL17g_last_error_code>
    2850:	2f c0       	rjmp	.+94     	; 0x28b0 <_Z17handleLinkBusMsgsv+0x42c>
    2852:	1d a6       	std	Y+45, r1	; 0x2d
    2854:	ce 01       	movw	r24, r28
    2856:	8d 96       	adiw	r24, 0x2d	; 45
    2858:	0e 94 b8 19 	call	0x3370	; 0x3370 <_Z11launchEventP2SC>
    285c:	80 93 65 45 	sts	0x4565, r24	; 0x804565 <_ZZ17handleLinkBusMsgsvE2ec>
    2860:	80 91 33 45 	lds	r24, 0x4533	; 0x804533 <_ZL13g_go_to_sleep>
    2864:	88 23       	and	r24, r24
    2866:	31 f0       	breq	.+12     	; 0x2874 <_Z17handleLinkBusMsgsv+0x3f0>
    2868:	80 91 f8 44 	lds	r24, 0x44F8	; 0x8044f8 <_ZL11g_sleepType>
    286c:	88 23       	and	r24, r24
    286e:	11 f0       	breq	.+4      	; 0x2874 <_Z17handleLinkBusMsgsv+0x3f0>
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	01 c0       	rjmp	.+2      	; 0x2876 <_Z17handleLinkBusMsgsv+0x3f2>
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	88 23       	and	r24, r24
    2878:	29 f0       	breq	.+10     	; 0x2884 <_Z17handleLinkBusMsgsv+0x400>
    287a:	83 e0       	ldi	r24, 0x03	; 3
    287c:	80 93 f8 44 	sts	0x44F8, r24	; 0x8044f8 <_ZL11g_sleepType>
    2880:	10 92 33 45 	sts	0x4533, r1	; 0x804533 <_ZL13g_go_to_sleep>
    2884:	8c e3       	ldi	r24, 0x3C	; 60
    2886:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL23g_WiFi_shutdown_seconds>
    288a:	80 91 65 45 	lds	r24, 0x4565	; 0x804565 <_ZZ17handleLinkBusMsgsvE2ec>
    288e:	88 23       	and	r24, r24
    2890:	79 f4       	brne	.+30     	; 0x28b0 <_Z17handleLinkBusMsgsv+0x42c>
    2892:	83 e4       	ldi	r24, 0x43	; 67
    2894:	95 e4       	ldi	r25, 0x45	; 69
    2896:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <_ZN13EepromManager13saveAllEEPROMEv>
    289a:	0a c0       	rjmp	.+20     	; 0x28b0 <_Z17handleLinkBusMsgsv+0x42c>
    289c:	8b 89       	ldd	r24, Y+19	; 0x13
    289e:	80 33       	cpi	r24, 0x30	; 48
    28a0:	09 f0       	breq	.+2      	; 0x28a4 <_Z17handleLinkBusMsgsv+0x420>
    28a2:	74 c4       	rjmp	.+2280   	; 0x318c <_Z17handleLinkBusMsgsv+0xd08>
    28a4:	10 92 64 45 	sts	0x4564, r1	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    28a8:	8c ee       	ldi	r24, 0xEC	; 236
    28aa:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
    28ae:	6e c4       	rjmp	.+2268   	; 0x318c <_Z17handleLinkBusMsgsv+0xd08>
    28b0:	00 00       	nop
    28b2:	6c c4       	rjmp	.+2264   	; 0x318c <_Z17handleLinkBusMsgsv+0xd08>
    28b4:	1a 82       	std	Y+2, r1	; 0x02
    28b6:	1b 82       	std	Y+3, r1	; 0x03
    28b8:	1c 82       	std	Y+4, r1	; 0x04
    28ba:	1d 82       	std	Y+5, r1	; 0x05
    28bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    28be:	9d 85       	ldd	r25, Y+13	; 0x0d
    28c0:	fc 01       	movw	r30, r24
    28c2:	83 81       	ldd	r24, Z+3	; 0x03
    28c4:	83 35       	cpi	r24, 0x53	; 83
    28c6:	c1 f5       	brne	.+112    	; 0x2938 <_Z17handleLinkBusMsgsv+0x4b4>
    28c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    28ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    28cc:	fc 01       	movw	r30, r24
    28ce:	80 8d       	ldd	r24, Z+24	; 0x18
    28d0:	88 23       	and	r24, r24
    28d2:	59 f0       	breq	.+22     	; 0x28ea <_Z17handleLinkBusMsgsv+0x466>
    28d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    28d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    28d8:	48 96       	adiw	r24, 0x18	; 24
    28da:	0e 94 bb 41 	call	0x8376	; 0x8376 <atol>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	8a 83       	std	Y+2, r24	; 0x02
    28e4:	9b 83       	std	Y+3, r25	; 0x03
    28e6:	ac 83       	std	Y+4, r26	; 0x04
    28e8:	bd 83       	std	Y+5, r27	; 0x05
    28ea:	8a 81       	ldd	r24, Y+2	; 0x02
    28ec:	9b 81       	ldd	r25, Y+3	; 0x03
    28ee:	ac 81       	ldd	r26, Y+4	; 0x04
    28f0:	bd 81       	ldd	r27, Y+5	; 0x05
    28f2:	89 2b       	or	r24, r25
    28f4:	8a 2b       	or	r24, r26
    28f6:	8b 2b       	or	r24, r27
    28f8:	09 f4       	brne	.+2      	; 0x28fc <_Z17handleLinkBusMsgsv+0x478>
    28fa:	4a c4       	rjmp	.+2196   	; 0x3190 <_Z17handleLinkBusMsgsv+0xd0c>
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2900:	ac 81       	ldd	r26, Y+4	; 0x04
    2902:	bd 81       	ldd	r27, Y+5	; 0x05
    2904:	80 93 27 45 	sts	0x4527, r24	; 0x804527 <g_event_start_time>
    2908:	90 93 28 45 	sts	0x4528, r25	; 0x804528 <g_event_start_time+0x1>
    290c:	a0 93 29 45 	sts	0x4529, r26	; 0x804529 <g_event_start_time+0x2>
    2910:	b0 93 2a 45 	sts	0x452A, r27	; 0x80452a <g_event_start_time+0x3>
    2914:	f8 94       	cli
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	0e 94 1c 23 	call	0x4638	; 0x4638 <ds3231_get_epoch>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	bc 01       	movw	r22, r24
    2924:	cd 01       	movw	r24, r26
    2926:	0e 94 56 01 	call	0x2ac	; 0x2ac <set_system_time>
    292a:	78 94       	sei
    292c:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2930:	8f 5f       	subi	r24, 0xFF	; 255
    2932:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2936:	2c c4       	rjmp	.+2136   	; 0x3190 <_Z17handleLinkBusMsgsv+0xd0c>
    2938:	8c 85       	ldd	r24, Y+12	; 0x0c
    293a:	9d 85       	ldd	r25, Y+13	; 0x0d
    293c:	fc 01       	movw	r30, r24
    293e:	83 81       	ldd	r24, Z+3	; 0x03
    2940:	86 34       	cpi	r24, 0x46	; 70
    2942:	09 f0       	breq	.+2      	; 0x2946 <_Z17handleLinkBusMsgsv+0x4c2>
    2944:	25 c4       	rjmp	.+2122   	; 0x3190 <_Z17handleLinkBusMsgsv+0xd0c>
    2946:	8c 85       	ldd	r24, Y+12	; 0x0c
    2948:	9d 85       	ldd	r25, Y+13	; 0x0d
    294a:	fc 01       	movw	r30, r24
    294c:	80 8d       	ldd	r24, Z+24	; 0x18
    294e:	88 23       	and	r24, r24
    2950:	59 f0       	breq	.+22     	; 0x2968 <_Z17handleLinkBusMsgsv+0x4e4>
    2952:	8c 85       	ldd	r24, Y+12	; 0x0c
    2954:	9d 85       	ldd	r25, Y+13	; 0x0d
    2956:	48 96       	adiw	r24, 0x18	; 24
    2958:	0e 94 bb 41 	call	0x8376	; 0x8376 <atol>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	8a 83       	std	Y+2, r24	; 0x02
    2962:	9b 83       	std	Y+3, r25	; 0x03
    2964:	ac 83       	std	Y+4, r26	; 0x04
    2966:	bd 83       	std	Y+5, r27	; 0x05
    2968:	8a 81       	ldd	r24, Y+2	; 0x02
    296a:	9b 81       	ldd	r25, Y+3	; 0x03
    296c:	ac 81       	ldd	r26, Y+4	; 0x04
    296e:	bd 81       	ldd	r27, Y+5	; 0x05
    2970:	89 2b       	or	r24, r25
    2972:	8a 2b       	or	r24, r26
    2974:	8b 2b       	or	r24, r27
    2976:	09 f4       	brne	.+2      	; 0x297a <_Z17handleLinkBusMsgsv+0x4f6>
    2978:	0b c4       	rjmp	.+2070   	; 0x3190 <_Z17handleLinkBusMsgsv+0xd0c>
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	9b 81       	ldd	r25, Y+3	; 0x03
    297e:	ac 81       	ldd	r26, Y+4	; 0x04
    2980:	bd 81       	ldd	r27, Y+5	; 0x05
    2982:	80 93 2b 45 	sts	0x452B, r24	; 0x80452b <g_event_finish_time>
    2986:	90 93 2c 45 	sts	0x452C, r25	; 0x80452c <g_event_finish_time+0x1>
    298a:	a0 93 2d 45 	sts	0x452D, r26	; 0x80452d <g_event_finish_time+0x2>
    298e:	b0 93 2e 45 	sts	0x452E, r27	; 0x80452e <g_event_finish_time+0x3>
    2992:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2996:	8f 5f       	subi	r24, 0xFF	; 255
    2998:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    299c:	f9 c3       	rjmp	.+2034   	; 0x3190 <_Z17handleLinkBusMsgsv+0xd0c>
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL13g_wifi_active>
    29a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    29a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    29a8:	fc 01       	movw	r30, r24
    29aa:	80 81       	ld	r24, Z
    29ac:	81 30       	cpi	r24, 0x01	; 1
    29ae:	09 f0       	breq	.+2      	; 0x29b2 <_Z17handleLinkBusMsgsv+0x52e>
    29b0:	4b c0       	rjmp	.+150    	; 0x2a48 <_Z17handleLinkBusMsgsv+0x5c4>
    29b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    29b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    29b6:	fc 01       	movw	r30, r24
    29b8:	83 81       	ldd	r24, Z+3	; 0x03
    29ba:	88 23       	and	r24, r24
    29bc:	d1 f0       	breq	.+52     	; 0x29f2 <_Z17handleLinkBusMsgsv+0x56e>
    29be:	8c 85       	ldd	r24, Y+12	; 0x0c
    29c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    29c2:	03 96       	adiw	r24, 0x03	; 3
    29c4:	44 e1       	ldi	r20, 0x14	; 20
    29c6:	50 e0       	ldi	r21, 0x00	; 0
    29c8:	bc 01       	movw	r22, r24
    29ca:	85 ed       	ldi	r24, 0xD5	; 213
    29cc:	94 e4       	ldi	r25, 0x44	; 68
    29ce:	0e 94 05 42 	call	0x840a	; 0x840a <strncpy>
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	85 ed       	ldi	r24, 0xD5	; 213
    29d6:	94 e4       	ldi	r25, 0x44	; 68
    29d8:	0e 94 82 25 	call	0x4b04	; 0x4b04 <ds3231_set_date_time>
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	0e 94 1c 23 	call	0x4638	; 0x4638 <ds3231_get_epoch>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	bc 01       	movw	r22, r24
    29ea:	cd 01       	movw	r24, r26
    29ec:	0e 94 56 01 	call	0x2ac	; 0x2ac <set_system_time>
    29f0:	d1 c3       	rjmp	.+1954   	; 0x3194 <_Z17handleLinkBusMsgsv+0xd10>
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <time>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	2b 2f       	mov	r18, r27
    2a00:	2f 93       	push	r18
    2a02:	2a 2f       	mov	r18, r26
    2a04:	2f 93       	push	r18
    2a06:	29 2f       	mov	r18, r25
    2a08:	2f 93       	push	r18
    2a0a:	8f 93       	push	r24
    2a0c:	89 ed       	ldi	r24, 0xD9	; 217
    2a0e:	92 e4       	ldi	r25, 0x42	; 66
    2a10:	89 2f       	mov	r24, r25
    2a12:	8f 93       	push	r24
    2a14:	89 ed       	ldi	r24, 0xD9	; 217
    2a16:	92 e4       	ldi	r25, 0x42	; 66
    2a18:	8f 93       	push	r24
    2a1a:	85 ed       	ldi	r24, 0xD5	; 213
    2a1c:	94 e4       	ldi	r25, 0x44	; 68
    2a1e:	89 2f       	mov	r24, r25
    2a20:	8f 93       	push	r24
    2a22:	85 ed       	ldi	r24, 0xD5	; 213
    2a24:	94 e4       	ldi	r25, 0x44	; 68
    2a26:	8f 93       	push	r24
    2a28:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    2a2c:	2d b7       	in	r18, 0x3d	; 61
    2a2e:	3e b7       	in	r19, 0x3e	; 62
    2a30:	28 5f       	subi	r18, 0xF8	; 248
    2a32:	3f 4f       	sbci	r19, 0xFF	; 255
    2a34:	cd bf       	out	0x3d, r28	; 61
    2a36:	de bf       	out	0x3e, r29	; 62
    2a38:	45 ed       	ldi	r20, 0xD5	; 213
    2a3a:	54 e4       	ldi	r21, 0x44	; 68
    2a3c:	6d ed       	ldi	r22, 0xDD	; 221
    2a3e:	72 e4       	ldi	r23, 0x42	; 66
    2a40:	83 e0       	ldi	r24, 0x03	; 3
    2a42:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_Z11lb_send_msg13LBMessageTypePKcPc>
    2a46:	a6 c3       	rjmp	.+1868   	; 0x3194 <_Z17handleLinkBusMsgsv+0xd10>
    2a48:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a4a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	80 81       	ld	r24, Z
    2a50:	82 30       	cpi	r24, 0x02	; 2
    2a52:	09 f0       	breq	.+2      	; 0x2a56 <_Z17handleLinkBusMsgsv+0x5d2>
    2a54:	9f c3       	rjmp	.+1854   	; 0x3194 <_Z17handleLinkBusMsgsv+0xd10>
    2a56:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a58:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	83 81       	ldd	r24, Z+3	; 0x03
    2a5e:	88 35       	cpi	r24, 0x58	; 88
    2a60:	c9 f5       	brne	.+114    	; 0x2ad4 <_Z17handleLinkBusMsgsv+0x650>
    2a62:	1c 8a       	std	Y+20, r1	; 0x14
    2a64:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a66:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a68:	fc 01       	movw	r30, r24
    2a6a:	80 8d       	ldd	r24, Z+24	; 0x18
    2a6c:	88 23       	and	r24, r24
    2a6e:	51 f0       	breq	.+20     	; 0x2a84 <_Z17handleLinkBusMsgsv+0x600>
    2a70:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a72:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a74:	48 96       	adiw	r24, 0x18	; 24
    2a76:	0e 94 9d 41 	call	0x833a	; 0x833a <atoi>
    2a7a:	8c 8b       	std	Y+20, r24	; 0x14
    2a7c:	8c 89       	ldd	r24, Y+20	; 0x14
    2a7e:	0e 94 f9 25 	call	0x4bf2	; 0x4bf2 <ds3231_set_aging>
    2a82:	88 c3       	rjmp	.+1808   	; 0x3194 <_Z17handleLinkBusMsgsv+0xd10>
    2a84:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <ds3231_get_aging>
    2a88:	8c 8b       	std	Y+20, r24	; 0x14
    2a8a:	8c 89       	ldd	r24, Y+20	; 0x14
    2a8c:	08 2e       	mov	r0, r24
    2a8e:	00 0c       	add	r0, r0
    2a90:	99 0b       	sbc	r25, r25
    2a92:	29 2f       	mov	r18, r25
    2a94:	2f 93       	push	r18
    2a96:	8f 93       	push	r24
    2a98:	8a ee       	ldi	r24, 0xEA	; 234
    2a9a:	92 e4       	ldi	r25, 0x42	; 66
    2a9c:	89 2f       	mov	r24, r25
    2a9e:	8f 93       	push	r24
    2aa0:	8a ee       	ldi	r24, 0xEA	; 234
    2aa2:	92 e4       	ldi	r25, 0x42	; 66
    2aa4:	8f 93       	push	r24
    2aa6:	85 ed       	ldi	r24, 0xD5	; 213
    2aa8:	94 e4       	ldi	r25, 0x44	; 68
    2aaa:	89 2f       	mov	r24, r25
    2aac:	8f 93       	push	r24
    2aae:	85 ed       	ldi	r24, 0xD5	; 213
    2ab0:	94 e4       	ldi	r25, 0x44	; 68
    2ab2:	8f 93       	push	r24
    2ab4:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	45 ed       	ldi	r20, 0xD5	; 213
    2ac6:	54 e4       	ldi	r21, 0x44	; 68
    2ac8:	6d ed       	ldi	r22, 0xDD	; 221
    2aca:	72 e4       	ldi	r23, 0x42	; 66
    2acc:	83 e0       	ldi	r24, 0x03	; 3
    2ace:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_Z11lb_send_msg13LBMessageTypePKcPc>
    2ad2:	60 c3       	rjmp	.+1728   	; 0x3194 <_Z17handleLinkBusMsgsv+0xd10>
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	0e 94 1c 23 	call	0x4638	; 0x4638 <ds3231_get_epoch>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	8d 8b       	std	Y+21, r24	; 0x15
    2ae2:	9e 8b       	std	Y+22, r25	; 0x16
    2ae4:	af 8b       	std	Y+23, r26	; 0x17
    2ae6:	b8 8f       	std	Y+24, r27	; 0x18
    2ae8:	8d 89       	ldd	r24, Y+21	; 0x15
    2aea:	9e 89       	ldd	r25, Y+22	; 0x16
    2aec:	af 89       	ldd	r26, Y+23	; 0x17
    2aee:	b8 8d       	ldd	r27, Y+24	; 0x18
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 56 01 	call	0x2ac	; 0x2ac <set_system_time>
    2af8:	80 91 66 45 	lds	r24, 0x4566	; 0x804566 <_ZZ17handleLinkBusMsgsvE8lastTime>
    2afc:	90 91 67 45 	lds	r25, 0x4567	; 0x804567 <_ZZ17handleLinkBusMsgsvE8lastTime+0x1>
    2b00:	a0 91 68 45 	lds	r26, 0x4568	; 0x804568 <_ZZ17handleLinkBusMsgsvE8lastTime+0x2>
    2b04:	b0 91 69 45 	lds	r27, 0x4569	; 0x804569 <_ZZ17handleLinkBusMsgsvE8lastTime+0x3>
    2b08:	2d 89       	ldd	r18, Y+21	; 0x15
    2b0a:	3e 89       	ldd	r19, Y+22	; 0x16
    2b0c:	4f 89       	ldd	r20, Y+23	; 0x17
    2b0e:	58 8d       	ldd	r21, Y+24	; 0x18
    2b10:	28 17       	cp	r18, r24
    2b12:	39 07       	cpc	r19, r25
    2b14:	4a 07       	cpc	r20, r26
    2b16:	5b 07       	cpc	r21, r27
    2b18:	09 f4       	brne	.+2      	; 0x2b1c <_Z17handleLinkBusMsgsv+0x698>
    2b1a:	3c c3       	rjmp	.+1656   	; 0x3194 <_Z17handleLinkBusMsgsv+0xd10>
    2b1c:	88 8d       	ldd	r24, Y+24	; 0x18
    2b1e:	8f 93       	push	r24
    2b20:	8f 89       	ldd	r24, Y+23	; 0x17
    2b22:	8f 93       	push	r24
    2b24:	8e 89       	ldd	r24, Y+22	; 0x16
    2b26:	8f 93       	push	r24
    2b28:	8d 89       	ldd	r24, Y+21	; 0x15
    2b2a:	8f 93       	push	r24
    2b2c:	89 ed       	ldi	r24, 0xD9	; 217
    2b2e:	92 e4       	ldi	r25, 0x42	; 66
    2b30:	89 2f       	mov	r24, r25
    2b32:	8f 93       	push	r24
    2b34:	89 ed       	ldi	r24, 0xD9	; 217
    2b36:	92 e4       	ldi	r25, 0x42	; 66
    2b38:	8f 93       	push	r24
    2b3a:	85 ed       	ldi	r24, 0xD5	; 213
    2b3c:	94 e4       	ldi	r25, 0x44	; 68
    2b3e:	89 2f       	mov	r24, r25
    2b40:	8f 93       	push	r24
    2b42:	85 ed       	ldi	r24, 0xD5	; 213
    2b44:	94 e4       	ldi	r25, 0x44	; 68
    2b46:	8f 93       	push	r24
    2b48:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    2b4c:	2d b7       	in	r18, 0x3d	; 61
    2b4e:	3e b7       	in	r19, 0x3e	; 62
    2b50:	28 5f       	subi	r18, 0xF8	; 248
    2b52:	3f 4f       	sbci	r19, 0xFF	; 255
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	de bf       	out	0x3e, r29	; 62
    2b58:	45 ed       	ldi	r20, 0xD5	; 213
    2b5a:	54 e4       	ldi	r21, 0x44	; 68
    2b5c:	6d ed       	ldi	r22, 0xDD	; 221
    2b5e:	72 e4       	ldi	r23, 0x42	; 66
    2b60:	83 e0       	ldi	r24, 0x03	; 3
    2b62:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_Z11lb_send_msg13LBMessageTypePKcPc>
    2b66:	8d 89       	ldd	r24, Y+21	; 0x15
    2b68:	9e 89       	ldd	r25, Y+22	; 0x16
    2b6a:	af 89       	ldd	r26, Y+23	; 0x17
    2b6c:	b8 8d       	ldd	r27, Y+24	; 0x18
    2b6e:	80 93 66 45 	sts	0x4566, r24	; 0x804566 <_ZZ17handleLinkBusMsgsvE8lastTime>
    2b72:	90 93 67 45 	sts	0x4567, r25	; 0x804567 <_ZZ17handleLinkBusMsgsvE8lastTime+0x1>
    2b76:	a0 93 68 45 	sts	0x4568, r26	; 0x804568 <_ZZ17handleLinkBusMsgsvE8lastTime+0x2>
    2b7a:	b0 93 69 45 	sts	0x4569, r27	; 0x804569 <_ZZ17handleLinkBusMsgsvE8lastTime+0x3>
    2b7e:	0a c3       	rjmp	.+1556   	; 0x3194 <_Z17handleLinkBusMsgsv+0xd10>
    2b80:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2b84:	8f 5f       	subi	r24, 0xFF	; 255
    2b86:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2b8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b8c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b8e:	fc 01       	movw	r30, r24
    2b90:	83 81       	ldd	r24, Z+3	; 0x03
    2b92:	88 23       	and	r24, r24
    2b94:	81 f1       	breq	.+96     	; 0x2bf6 <_Z17handleLinkBusMsgsv+0x772>
    2b96:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b98:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b9a:	03 96       	adiw	r24, 0x03	; 3
    2b9c:	44 e1       	ldi	r20, 0x14	; 20
    2b9e:	50 e0       	ldi	r21, 0x00	; 0
    2ba0:	bc 01       	movw	r22, r24
    2ba2:	8e e0       	ldi	r24, 0x0E	; 14
    2ba4:	95 e4       	ldi	r25, 0x45	; 69
    2ba6:	0e 94 05 42 	call	0x840a	; 0x840a <strncpy>
    2baa:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <g_messages_text+0x15>
    2bae:	88 23       	and	r24, r24
    2bb0:	09 f4       	brne	.+2      	; 0x2bb4 <_Z17handleLinkBusMsgsv+0x730>
    2bb2:	f2 c2       	rjmp	.+1508   	; 0x3198 <_Z17handleLinkBusMsgsv+0xd14>
    2bb4:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2bb8:	88 2f       	mov	r24, r24
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	bc 01       	movw	r22, r24
    2bbe:	8e e0       	ldi	r24, 0x0E	; 14
    2bc0:	95 e4       	ldi	r25, 0x45	; 69
    2bc2:	0e 94 da 30 	call	0x61b4	; 0x61b4 <_Z26timeRequiredToSendStrAtWPMPcj>
    2bc6:	8c 50       	subi	r24, 0x0C	; 12
    2bc8:	9e 4f       	sbci	r25, 0xFE	; 254
    2bca:	96 95       	lsr	r25
    2bcc:	87 95       	ror	r24
    2bce:	96 95       	lsr	r25
    2bd0:	87 95       	ror	r24
    2bd2:	96 95       	lsr	r25
    2bd4:	87 95       	ror	r24
    2bd6:	9c 01       	movw	r18, r24
    2bd8:	a5 ec       	ldi	r26, 0xC5	; 197
    2bda:	b0 e2       	ldi	r27, 0x20	; 32
    2bdc:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__umulhisi3>
    2be0:	92 95       	swap	r25
    2be2:	82 95       	swap	r24
    2be4:	8f 70       	andi	r24, 0x0F	; 15
    2be6:	89 27       	eor	r24, r25
    2be8:	9f 70       	andi	r25, 0x0F	; 15
    2bea:	89 27       	eor	r24, r25
    2bec:	80 93 23 45 	sts	0x4523, r24	; 0x804523 <g_time_needed_for_ID>
    2bf0:	90 93 24 45 	sts	0x4524, r25	; 0x804524 <g_time_needed_for_ID+0x1>
    2bf4:	d1 c2       	rjmp	.+1442   	; 0x3198 <_Z17handleLinkBusMsgsv+0xd14>
    2bf6:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <g_messages_text+0x15>
    2bfa:	88 23       	and	r24, r24
    2bfc:	09 f4       	brne	.+2      	; 0x2c00 <_Z17handleLinkBusMsgsv+0x77c>
    2bfe:	cc c2       	rjmp	.+1432   	; 0x3198 <_Z17handleLinkBusMsgsv+0xd14>
    2c00:	8e e0       	ldi	r24, 0x0E	; 14
    2c02:	95 e4       	ldi	r25, 0x45	; 69
    2c04:	89 2f       	mov	r24, r25
    2c06:	8f 93       	push	r24
    2c08:	8e e0       	ldi	r24, 0x0E	; 14
    2c0a:	95 e4       	ldi	r25, 0x45	; 69
    2c0c:	8f 93       	push	r24
    2c0e:	8f ee       	ldi	r24, 0xEF	; 239
    2c10:	92 e4       	ldi	r25, 0x42	; 66
    2c12:	89 2f       	mov	r24, r25
    2c14:	8f 93       	push	r24
    2c16:	8f ee       	ldi	r24, 0xEF	; 239
    2c18:	92 e4       	ldi	r25, 0x42	; 66
    2c1a:	8f 93       	push	r24
    2c1c:	85 ed       	ldi	r24, 0xD5	; 213
    2c1e:	94 e4       	ldi	r25, 0x44	; 68
    2c20:	89 2f       	mov	r24, r25
    2c22:	8f 93       	push	r24
    2c24:	85 ed       	ldi	r24, 0xD5	; 213
    2c26:	94 e4       	ldi	r25, 0x44	; 68
    2c28:	8f 93       	push	r24
    2c2a:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    2c2e:	0f 90       	pop	r0
    2c30:	0f 90       	pop	r0
    2c32:	0f 90       	pop	r0
    2c34:	0f 90       	pop	r0
    2c36:	0f 90       	pop	r0
    2c38:	0f 90       	pop	r0
    2c3a:	85 ed       	ldi	r24, 0xD5	; 213
    2c3c:	94 e4       	ldi	r25, 0x44	; 68
    2c3e:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_Z12lb_send_textPc>
    2c42:	19 82       	std	Y+1, r1	; 0x01
    2c44:	a9 c2       	rjmp	.+1362   	; 0x3198 <_Z17handleLinkBusMsgsv+0xd14>
    2c46:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    2c4a:	89 8f       	std	Y+25, r24	; 0x19
    2c4c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c4e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c50:	fc 01       	movw	r30, r24
    2c52:	83 81       	ldd	r24, Z+3	; 0x03
    2c54:	89 34       	cpi	r24, 0x49	; 73
    2c56:	09 f0       	breq	.+2      	; 0x2c5a <_Z17handleLinkBusMsgsv+0x7d6>
    2c58:	4f c0       	rjmp	.+158    	; 0x2cf8 <_Z17handleLinkBusMsgsv+0x874>
    2c5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c5c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c5e:	fc 01       	movw	r30, r24
    2c60:	80 8d       	ldd	r24, Z+24	; 0x18
    2c62:	88 23       	and	r24, r24
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <_Z17handleLinkBusMsgsv+0x7e4>
    2c66:	9a c2       	rjmp	.+1332   	; 0x319c <_Z17handleLinkBusMsgsv+0xd18>
    2c68:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c6c:	48 96       	adiw	r24, 0x18	; 24
    2c6e:	0e 94 bb 41 	call	0x8376	; 0x8376 <atol>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	89 8f       	std	Y+25, r24	; 0x19
    2c78:	89 8d       	ldd	r24, Y+25	; 0x19
    2c7a:	8a 8f       	std	Y+26, r24	; 0x1a
    2c7c:	85 e0       	ldi	r24, 0x05	; 5
    2c7e:	8b 8f       	std	Y+27, r24	; 0x1b
    2c80:	84 e1       	ldi	r24, 0x14	; 20
    2c82:	8c 8f       	std	Y+28, r24	; 0x1c
    2c84:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c86:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c88:	89 17       	cp	r24, r25
    2c8a:	40 f0       	brcs	.+16     	; 0x2c9c <_Z17handleLinkBusMsgsv+0x818>
    2c8c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c90:	98 17       	cp	r25, r24
    2c92:	10 f4       	brcc	.+4      	; 0x2c98 <_Z17handleLinkBusMsgsv+0x814>
    2c94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c96:	03 c0       	rjmp	.+6      	; 0x2c9e <_Z17handleLinkBusMsgsv+0x81a>
    2c98:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c9a:	01 c0       	rjmp	.+2      	; 0x2c9e <_Z17handleLinkBusMsgsv+0x81a>
    2c9c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c9e:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
    2ca2:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2ca6:	8f 5f       	subi	r24, 0xFF	; 255
    2ca8:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2cac:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <g_messages_text+0x15>
    2cb0:	88 23       	and	r24, r24
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <_Z17handleLinkBusMsgsv+0x832>
    2cb4:	73 c2       	rjmp	.+1254   	; 0x319c <_Z17handleLinkBusMsgsv+0xd18>
    2cb6:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    2cba:	88 2f       	mov	r24, r24
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	bc 01       	movw	r22, r24
    2cc0:	8e e0       	ldi	r24, 0x0E	; 14
    2cc2:	95 e4       	ldi	r25, 0x45	; 69
    2cc4:	0e 94 da 30 	call	0x61b4	; 0x61b4 <_Z26timeRequiredToSendStrAtWPMPcj>
    2cc8:	8c 50       	subi	r24, 0x0C	; 12
    2cca:	9e 4f       	sbci	r25, 0xFE	; 254
    2ccc:	96 95       	lsr	r25
    2cce:	87 95       	ror	r24
    2cd0:	96 95       	lsr	r25
    2cd2:	87 95       	ror	r24
    2cd4:	96 95       	lsr	r25
    2cd6:	87 95       	ror	r24
    2cd8:	9c 01       	movw	r18, r24
    2cda:	a5 ec       	ldi	r26, 0xC5	; 197
    2cdc:	b0 e2       	ldi	r27, 0x20	; 32
    2cde:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__umulhisi3>
    2ce2:	92 95       	swap	r25
    2ce4:	82 95       	swap	r24
    2ce6:	8f 70       	andi	r24, 0x0F	; 15
    2ce8:	89 27       	eor	r24, r25
    2cea:	9f 70       	andi	r25, 0x0F	; 15
    2cec:	89 27       	eor	r24, r25
    2cee:	80 93 23 45 	sts	0x4523, r24	; 0x804523 <g_time_needed_for_ID>
    2cf2:	90 93 24 45 	sts	0x4524, r25	; 0x804524 <g_time_needed_for_ID+0x1>
    2cf6:	52 c2       	rjmp	.+1188   	; 0x319c <_Z17handleLinkBusMsgsv+0xd18>
    2cf8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cfa:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cfc:	fc 01       	movw	r30, r24
    2cfe:	83 81       	ldd	r24, Z+3	; 0x03
    2d00:	80 35       	cpi	r24, 0x50	; 80
    2d02:	09 f0       	breq	.+2      	; 0x2d06 <_Z17handleLinkBusMsgsv+0x882>
    2d04:	4b c2       	rjmp	.+1174   	; 0x319c <_Z17handleLinkBusMsgsv+0xd18>
    2d06:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d08:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	80 8d       	ldd	r24, Z+24	; 0x18
    2d0e:	88 23       	and	r24, r24
    2d10:	09 f4       	brne	.+2      	; 0x2d14 <_Z17handleLinkBusMsgsv+0x890>
    2d12:	44 c2       	rjmp	.+1160   	; 0x319c <_Z17handleLinkBusMsgsv+0xd18>
    2d14:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d16:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d18:	48 96       	adiw	r24, 0x18	; 24
    2d1a:	0e 94 bb 41 	call	0x8376	; 0x8376 <atol>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	89 8f       	std	Y+25, r24	; 0x19
    2d24:	89 8d       	ldd	r24, Y+25	; 0x19
    2d26:	8d 8f       	std	Y+29, r24	; 0x1d
    2d28:	85 e0       	ldi	r24, 0x05	; 5
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	8e 8f       	std	Y+30, r24	; 0x1e
    2d2e:	9f 8f       	std	Y+31, r25	; 0x1f
    2d30:	84 e1       	ldi	r24, 0x14	; 20
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	88 a3       	std	Y+32, r24	; 0x20
    2d36:	99 a3       	std	Y+33, r25	; 0x21
    2d38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d3a:	28 2f       	mov	r18, r24
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	88 a1       	ldd	r24, Y+32	; 0x20
    2d40:	99 a1       	ldd	r25, Y+33	; 0x21
    2d42:	82 17       	cp	r24, r18
    2d44:	93 07       	cpc	r25, r19
    2d46:	54 f0       	brlt	.+20     	; 0x2d5c <_Z17handleLinkBusMsgsv+0x8d8>
    2d48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d4a:	88 2f       	mov	r24, r24
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2d50:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2d52:	82 17       	cp	r24, r18
    2d54:	93 07       	cpc	r25, r19
    2d56:	24 f4       	brge	.+8      	; 0x2d60 <_Z17handleLinkBusMsgsv+0x8dc>
    2d58:	c9 01       	movw	r24, r18
    2d5a:	02 c0       	rjmp	.+4      	; 0x2d60 <_Z17handleLinkBusMsgsv+0x8dc>
    2d5c:	88 a1       	ldd	r24, Y+32	; 0x20
    2d5e:	99 a1       	ldd	r25, Y+33	; 0x21
    2d60:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <g_pattern_codespeed>
    2d64:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2d68:	8f 5f       	subi	r24, 0xFF	; 255
    2d6a:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2d6e:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    2d72:	0e 94 9a 19 	call	0x3334	; 0x3334 <_Z13throttleValueh>
    2d76:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    2d7a:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    2d7e:	0e c2       	rjmp	.+1052   	; 0x319c <_Z17handleLinkBusMsgsv+0xd18>
    2d80:	1a a2       	std	Y+34, r1	; 0x22
    2d82:	1b a2       	std	Y+35, r1	; 0x23
    2d84:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d86:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d88:	fc 01       	movw	r30, r24
    2d8a:	83 81       	ldd	r24, Z+3	; 0x03
    2d8c:	80 33       	cpi	r24, 0x30	; 48
    2d8e:	e1 f4       	brne	.+56     	; 0x2dc8 <_Z17handleLinkBusMsgsv+0x944>
    2d90:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d92:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d94:	fc 01       	movw	r30, r24
    2d96:	80 8d       	ldd	r24, Z+24	; 0x18
    2d98:	88 23       	and	r24, r24
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <_Z17handleLinkBusMsgsv+0x91a>
    2d9c:	01 c2       	rjmp	.+1026   	; 0x31a0 <_Z17handleLinkBusMsgsv+0xd1c>
    2d9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2da0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2da2:	48 96       	adiw	r24, 0x18	; 24
    2da4:	0e 94 bb 41 	call	0x8376	; 0x8376 <atol>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	8a a3       	std	Y+34, r24	; 0x22
    2dae:	9b a3       	std	Y+35, r25	; 0x23
    2db0:	8a a1       	ldd	r24, Y+34	; 0x22
    2db2:	9b a1       	ldd	r25, Y+35	; 0x23
    2db4:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    2db8:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
    2dbc:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2dc0:	8f 5f       	subi	r24, 0xFF	; 255
    2dc2:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2dc6:	ec c1       	rjmp	.+984    	; 0x31a0 <_Z17handleLinkBusMsgsv+0xd1c>
    2dc8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dca:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dcc:	fc 01       	movw	r30, r24
    2dce:	83 81       	ldd	r24, Z+3	; 0x03
    2dd0:	81 33       	cpi	r24, 0x31	; 49
    2dd2:	e1 f4       	brne	.+56     	; 0x2e0c <_Z17handleLinkBusMsgsv+0x988>
    2dd4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dd6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dd8:	fc 01       	movw	r30, r24
    2dda:	80 8d       	ldd	r24, Z+24	; 0x18
    2ddc:	88 23       	and	r24, r24
    2dde:	09 f4       	brne	.+2      	; 0x2de2 <_Z17handleLinkBusMsgsv+0x95e>
    2de0:	df c1       	rjmp	.+958    	; 0x31a0 <_Z17handleLinkBusMsgsv+0xd1c>
    2de2:	8c 85       	ldd	r24, Y+12	; 0x0c
    2de4:	9d 85       	ldd	r25, Y+13	; 0x0d
    2de6:	48 96       	adiw	r24, 0x18	; 24
    2de8:	0e 94 bb 41 	call	0x8376	; 0x8376 <atol>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	8a a3       	std	Y+34, r24	; 0x22
    2df2:	9b a3       	std	Y+35, r25	; 0x23
    2df4:	8a a1       	ldd	r24, Y+34	; 0x22
    2df6:	9b a1       	ldd	r25, Y+35	; 0x23
    2df8:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    2dfc:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
    2e00:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2e04:	8f 5f       	subi	r24, 0xFF	; 255
    2e06:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2e0a:	ca c1       	rjmp	.+916    	; 0x31a0 <_Z17handleLinkBusMsgsv+0xd1c>
    2e0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e0e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e10:	fc 01       	movw	r30, r24
    2e12:	83 81       	ldd	r24, Z+3	; 0x03
    2e14:	89 34       	cpi	r24, 0x49	; 73
    2e16:	e1 f4       	brne	.+56     	; 0x2e50 <_Z17handleLinkBusMsgsv+0x9cc>
    2e18:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e1a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	80 8d       	ldd	r24, Z+24	; 0x18
    2e20:	88 23       	and	r24, r24
    2e22:	09 f4       	brne	.+2      	; 0x2e26 <_Z17handleLinkBusMsgsv+0x9a2>
    2e24:	bd c1       	rjmp	.+890    	; 0x31a0 <_Z17handleLinkBusMsgsv+0xd1c>
    2e26:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e28:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e2a:	48 96       	adiw	r24, 0x18	; 24
    2e2c:	0e 94 bb 41 	call	0x8376	; 0x8376 <atol>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	8a a3       	std	Y+34, r24	; 0x22
    2e36:	9b a3       	std	Y+35, r25	; 0x23
    2e38:	8a a1       	ldd	r24, Y+34	; 0x22
    2e3a:	9b a1       	ldd	r25, Y+35	; 0x23
    2e3c:	80 93 11 40 	sts	0x4011, r24	; 0x804011 <g_ID_period_seconds>
    2e40:	90 93 12 40 	sts	0x4012, r25	; 0x804012 <g_ID_period_seconds+0x1>
    2e44:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2e48:	8f 5f       	subi	r24, 0xFF	; 255
    2e4a:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2e4e:	a8 c1       	rjmp	.+848    	; 0x31a0 <_Z17handleLinkBusMsgsv+0xd1c>
    2e50:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e52:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e54:	fc 01       	movw	r30, r24
    2e56:	83 81       	ldd	r24, Z+3	; 0x03
    2e58:	84 34       	cpi	r24, 0x44	; 68
    2e5a:	09 f0       	breq	.+2      	; 0x2e5e <_Z17handleLinkBusMsgsv+0x9da>
    2e5c:	a1 c1       	rjmp	.+834    	; 0x31a0 <_Z17handleLinkBusMsgsv+0xd1c>
    2e5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e60:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e62:	fc 01       	movw	r30, r24
    2e64:	80 8d       	ldd	r24, Z+24	; 0x18
    2e66:	88 23       	and	r24, r24
    2e68:	09 f4       	brne	.+2      	; 0x2e6c <_Z17handleLinkBusMsgsv+0x9e8>
    2e6a:	9a c1       	rjmp	.+820    	; 0x31a0 <_Z17handleLinkBusMsgsv+0xd1c>
    2e6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e6e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e70:	48 96       	adiw	r24, 0x18	; 24
    2e72:	0e 94 bb 41 	call	0x8376	; 0x8376 <atol>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	8a a3       	std	Y+34, r24	; 0x22
    2e7c:	9b a3       	std	Y+35, r25	; 0x23
    2e7e:	8a a1       	ldd	r24, Y+34	; 0x22
    2e80:	9b a1       	ldd	r25, Y+35	; 0x23
    2e82:	80 93 25 45 	sts	0x4525, r24	; 0x804525 <g_intra_cycle_delay_time>
    2e86:	90 93 26 45 	sts	0x4526, r25	; 0x804526 <g_intra_cycle_delay_time+0x1>
    2e8a:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2e8e:	8f 5f       	subi	r24, 0xFF	; 255
    2e90:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2e94:	85 c1       	rjmp	.+778    	; 0x31a0 <_Z17handleLinkBusMsgsv+0xd1c>
    2e96:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e98:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	83 81       	ldd	r24, Z+3	; 0x03
    2e9e:	88 23       	and	r24, r24
    2ea0:	09 f4       	brne	.+2      	; 0x2ea4 <_Z17handleLinkBusMsgsv+0xa20>
    2ea2:	80 c1       	rjmp	.+768    	; 0x31a4 <_Z17handleLinkBusMsgsv+0xd20>
    2ea4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ea6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ea8:	03 96       	adiw	r24, 0x03	; 3
    2eaa:	44 e1       	ldi	r20, 0x14	; 20
    2eac:	50 e0       	ldi	r21, 0x00	; 0
    2eae:	bc 01       	movw	r22, r24
    2eb0:	89 ef       	ldi	r24, 0xF9	; 249
    2eb2:	94 e4       	ldi	r25, 0x44	; 68
    2eb4:	0e 94 05 42 	call	0x840a	; 0x840a <strncpy>
    2eb8:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2ebc:	8f 5f       	subi	r24, 0xFF	; 255
    2ebe:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2ec2:	70 c1       	rjmp	.+736    	; 0x31a4 <_Z17handleLinkBusMsgsv+0xd20>
    2ec4:	1e 82       	std	Y+6, r1	; 0x06
    2ec6:	1f 82       	std	Y+7, r1	; 0x07
    2ec8:	18 86       	std	Y+8, r1	; 0x08
    2eca:	19 86       	std	Y+9, r1	; 0x09
    2ecc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ece:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	83 81       	ldd	r24, Z+3	; 0x03
    2ed4:	88 23       	and	r24, r24
    2ed6:	a9 f1       	breq	.+106    	; 0x2f42 <_Z17handleLinkBusMsgsv+0xabe>
    2ed8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2eda:	9d 85       	ldd	r25, Y+13	; 0x0d
    2edc:	03 96       	adiw	r24, 0x03	; 3
    2ede:	0e 94 bb 41 	call	0x8376	; 0x8376 <atol>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	80 93 6a 45 	sts	0x456A, r24	; 0x80456a <_ZZ17handleLinkBusMsgsvE1f>
    2eea:	90 93 6b 45 	sts	0x456B, r25	; 0x80456b <_ZZ17handleLinkBusMsgsvE1f+0x1>
    2eee:	a0 93 6c 45 	sts	0x456C, r26	; 0x80456c <_ZZ17handleLinkBusMsgsvE1f+0x2>
    2ef2:	b0 93 6d 45 	sts	0x456D, r27	; 0x80456d <_ZZ17handleLinkBusMsgsvE1f+0x3>
    2ef6:	80 91 6a 45 	lds	r24, 0x456A	; 0x80456a <_ZZ17handleLinkBusMsgsvE1f>
    2efa:	90 91 6b 45 	lds	r25, 0x456B	; 0x80456b <_ZZ17handleLinkBusMsgsvE1f+0x1>
    2efe:	a0 91 6c 45 	lds	r26, 0x456C	; 0x80456c <_ZZ17handleLinkBusMsgsvE1f+0x2>
    2f02:	b0 91 6d 45 	lds	r27, 0x456D	; 0x80456d <_ZZ17handleLinkBusMsgsvE1f+0x3>
    2f06:	8e a7       	std	Y+46, r24	; 0x2e
    2f08:	9f a7       	std	Y+47, r25	; 0x2f
    2f0a:	a8 ab       	std	Y+48, r26	; 0x30
    2f0c:	b9 ab       	std	Y+49, r27	; 0x31
    2f0e:	ce 01       	movw	r24, r28
    2f10:	8e 96       	adiw	r24, 0x2e	; 46
    2f12:	61 e0       	ldi	r22, 0x01	; 1
    2f14:	0e 94 1c 3b 	call	0x7638	; 0x7638 <_Z14txSetFrequencyPmh>
    2f18:	98 2f       	mov	r25, r24
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	99 23       	and	r25, r25
    2f1e:	09 f0       	breq	.+2      	; 0x2f22 <_Z17handleLinkBusMsgsv+0xa9e>
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	88 23       	and	r24, r24
    2f24:	b1 f0       	breq	.+44     	; 0x2f52 <_Z17handleLinkBusMsgsv+0xace>
    2f26:	8e a5       	ldd	r24, Y+46	; 0x2e
    2f28:	9f a5       	ldd	r25, Y+47	; 0x2f
    2f2a:	a8 a9       	ldd	r26, Y+48	; 0x30
    2f2c:	b9 a9       	ldd	r27, Y+49	; 0x31
    2f2e:	8e 83       	std	Y+6, r24	; 0x06
    2f30:	9f 83       	std	Y+7, r25	; 0x07
    2f32:	a8 87       	std	Y+8, r26	; 0x08
    2f34:	b9 87       	std	Y+9, r27	; 0x09
    2f36:	80 91 64 45 	lds	r24, 0x4564	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2f3a:	8f 5f       	subi	r24, 0xFF	; 255
    2f3c:	80 93 64 45 	sts	0x4564, r24	; 0x804564 <_ZZ17handleLinkBusMsgsvE21event_parameter_count>
    2f40:	08 c0       	rjmp	.+16     	; 0x2f52 <_Z17handleLinkBusMsgsv+0xace>
    2f42:	0e 94 4e 3b 	call	0x769c	; 0x769c <_Z14txGetFrequencyv>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	8e 83       	std	Y+6, r24	; 0x06
    2f4c:	9f 83       	std	Y+7, r25	; 0x07
    2f4e:	a8 87       	std	Y+8, r26	; 0x08
    2f50:	b9 87       	std	Y+9, r27	; 0x09
    2f52:	8e 81       	ldd	r24, Y+6	; 0x06
    2f54:	9f 81       	ldd	r25, Y+7	; 0x07
    2f56:	a8 85       	ldd	r26, Y+8	; 0x08
    2f58:	b9 85       	ldd	r27, Y+9	; 0x09
    2f5a:	89 2b       	or	r24, r25
    2f5c:	8a 2b       	or	r24, r26
    2f5e:	8b 2b       	or	r24, r27
    2f60:	09 f4       	brne	.+2      	; 0x2f64 <_Z17handleLinkBusMsgsv+0xae0>
    2f62:	22 c1       	rjmp	.+580    	; 0x31a8 <_Z17handleLinkBusMsgsv+0xd24>
    2f64:	89 85       	ldd	r24, Y+9	; 0x09
    2f66:	8f 93       	push	r24
    2f68:	88 85       	ldd	r24, Y+8	; 0x08
    2f6a:	8f 93       	push	r24
    2f6c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f6e:	8f 93       	push	r24
    2f70:	8e 81       	ldd	r24, Y+6	; 0x06
    2f72:	8f 93       	push	r24
    2f74:	88 ef       	ldi	r24, 0xF8	; 248
    2f76:	92 e4       	ldi	r25, 0x42	; 66
    2f78:	89 2f       	mov	r24, r25
    2f7a:	8f 93       	push	r24
    2f7c:	88 ef       	ldi	r24, 0xF8	; 248
    2f7e:	92 e4       	ldi	r25, 0x42	; 66
    2f80:	8f 93       	push	r24
    2f82:	85 ed       	ldi	r24, 0xD5	; 213
    2f84:	94 e4       	ldi	r25, 0x44	; 68
    2f86:	89 2f       	mov	r24, r25
    2f88:	8f 93       	push	r24
    2f8a:	85 ed       	ldi	r24, 0xD5	; 213
    2f8c:	94 e4       	ldi	r25, 0x44	; 68
    2f8e:	8f 93       	push	r24
    2f90:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    2f94:	2d b7       	in	r18, 0x3d	; 61
    2f96:	3e b7       	in	r19, 0x3e	; 62
    2f98:	28 5f       	subi	r18, 0xF8	; 248
    2f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f9c:	cd bf       	out	0x3d, r28	; 61
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	45 ed       	ldi	r20, 0xD5	; 213
    2fa2:	54 e4       	ldi	r21, 0x44	; 68
    2fa4:	6d ef       	ldi	r22, 0xFD	; 253
    2fa6:	72 e4       	ldi	r23, 0x42	; 66
    2fa8:	83 e0       	ldi	r24, 0x03	; 3
    2faa:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_Z11lb_send_msg13LBMessageTypePKcPc>
    2fae:	fc c0       	rjmp	.+504    	; 0x31a8 <_Z17handleLinkBusMsgsv+0xd24>
    2fb0:	80 91 39 45 	lds	r24, 0x4539	; 0x804539 <_ZL22g_lastConversionResult>
    2fb4:	90 91 3a 45 	lds	r25, 0x453A	; 0x80453a <_ZL22g_lastConversionResult+0x1>
    2fb8:	21 e0       	ldi	r18, 0x01	; 1
    2fba:	8d 38       	cpi	r24, 0x8D	; 141
    2fbc:	92 40       	sbci	r25, 0x02	; 2
    2fbe:	08 f4       	brcc	.+2      	; 0x2fc2 <_Z17handleLinkBusMsgsv+0xb3e>
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	22 23       	and	r18, r18
    2fc4:	09 f4       	brne	.+2      	; 0x2fc8 <_Z17handleLinkBusMsgsv+0xb44>
    2fc6:	7c c0       	rjmp	.+248    	; 0x30c0 <_Z17handleLinkBusMsgsv+0xc3c>
    2fc8:	80 91 39 45 	lds	r24, 0x4539	; 0x804539 <_ZL22g_lastConversionResult>
    2fcc:	90 91 3a 45 	lds	r25, 0x453A	; 0x80453a <_ZL22g_lastConversionResult+0x1>
    2fd0:	cc 01       	movw	r24, r24
    2fd2:	a0 e0       	ldi	r26, 0x00	; 0
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	9c 01       	movw	r18, r24
    2fd8:	ad 01       	movw	r20, r26
    2fda:	60 ea       	ldi	r22, 0xA0	; 160
    2fdc:	78 e6       	ldi	r23, 0x68	; 104
    2fde:	86 e0       	ldi	r24, 0x06	; 6
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__mulsi3>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	7c 01       	movw	r14, r24
    2fec:	8d 01       	movw	r16, r26
    2fee:	ed e7       	ldi	r30, 0x7D	; 125
    2ff0:	fe 1a       	sub	r15, r30
    2ff2:	0c 40       	sbci	r16, 0x0C	; 12
    2ff4:	1e 4f       	sbci	r17, 0xFE	; 254
    2ff6:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <g_battery_empty_mV>
    2ffa:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <g_battery_empty_mV+0x1>
    2ffe:	cc 01       	movw	r24, r24
    3000:	a0 e0       	ldi	r26, 0x00	; 0
    3002:	b0 e0       	ldi	r27, 0x00	; 0
    3004:	9c 01       	movw	r18, r24
    3006:	ad 01       	movw	r20, r26
    3008:	64 e6       	ldi	r22, 0x64	; 100
    300a:	70 e7       	ldi	r23, 0x70	; 112
    300c:	8e ef       	ldi	r24, 0xFE	; 254
    300e:	9f ef       	ldi	r25, 0xFF	; 255
    3010:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__mulsi3>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	e8 0e       	add	r14, r24
    301a:	f9 1e       	adc	r15, r25
    301c:	0a 1f       	adc	r16, r26
    301e:	1b 1f       	adc	r17, r27
    3020:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <g_battery_empty_mV>
    3024:	90 91 16 40 	lds	r25, 0x4016	; 0x804016 <g_battery_empty_mV+0x1>
    3028:	cc 01       	movw	r24, r24
    302a:	a0 e0       	ldi	r26, 0x00	; 0
    302c:	b0 e0       	ldi	r27, 0x00	; 0
    302e:	28 e6       	ldi	r18, 0x68	; 104
    3030:	30 e1       	ldi	r19, 0x10	; 16
    3032:	40 e0       	ldi	r20, 0x00	; 0
    3034:	50 e0       	ldi	r21, 0x00	; 0
    3036:	28 1b       	sub	r18, r24
    3038:	39 0b       	sbc	r19, r25
    303a:	4a 0b       	sbc	r20, r26
    303c:	5b 0b       	sbc	r21, r27
    303e:	8f ef       	ldi	r24, 0xFF	; 255
    3040:	93 e0       	ldi	r25, 0x03	; 3
    3042:	dc 01       	movw	r26, r24
    3044:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__muluhisi3>
    3048:	9b 01       	movw	r18, r22
    304a:	ac 01       	movw	r20, r24
    304c:	c8 01       	movw	r24, r16
    304e:	b7 01       	movw	r22, r14
    3050:	0e 94 2b 40 	call	0x8056	; 0x8056 <__divmodsi4>
    3054:	da 01       	movw	r26, r20
    3056:	c9 01       	movw	r24, r18
    3058:	8c a3       	std	Y+36, r24	; 0x24
    305a:	9d a3       	std	Y+37, r25	; 0x25
    305c:	ae a3       	std	Y+38, r26	; 0x26
    305e:	bf a3       	std	Y+39, r27	; 0x27
    3060:	18 a6       	std	Y+40, r1	; 0x28
    3062:	19 a6       	std	Y+41, r1	; 0x29
    3064:	84 e6       	ldi	r24, 0x64	; 100
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	8a a7       	std	Y+42, r24	; 0x2a
    306a:	9b a7       	std	Y+43, r25	; 0x2b
    306c:	8a a5       	ldd	r24, Y+42	; 0x2a
    306e:	9b a5       	ldd	r25, Y+43	; 0x2b
    3070:	9c 01       	movw	r18, r24
    3072:	99 0f       	add	r25, r25
    3074:	44 0b       	sbc	r20, r20
    3076:	55 0b       	sbc	r21, r21
    3078:	8c a1       	ldd	r24, Y+36	; 0x24
    307a:	9d a1       	ldd	r25, Y+37	; 0x25
    307c:	ae a1       	ldd	r26, Y+38	; 0x26
    307e:	bf a1       	ldd	r27, Y+39	; 0x27
    3080:	28 17       	cp	r18, r24
    3082:	39 07       	cpc	r19, r25
    3084:	4a 07       	cpc	r20, r26
    3086:	5b 07       	cpc	r21, r27
    3088:	3c f4       	brge	.+14     	; 0x3098 <_Z17handleLinkBusMsgsv+0xc14>
    308a:	8a a5       	ldd	r24, Y+42	; 0x2a
    308c:	9b a5       	ldd	r25, Y+43	; 0x2b
    308e:	09 2e       	mov	r0, r25
    3090:	00 0c       	add	r0, r0
    3092:	aa 0b       	sbc	r26, r26
    3094:	bb 0b       	sbc	r27, r27
    3096:	11 c0       	rjmp	.+34     	; 0x30ba <_Z17handleLinkBusMsgsv+0xc36>
    3098:	88 a5       	ldd	r24, Y+40	; 0x28
    309a:	99 a5       	ldd	r25, Y+41	; 0x29
    309c:	09 2e       	mov	r0, r25
    309e:	00 0c       	add	r0, r0
    30a0:	aa 0b       	sbc	r26, r26
    30a2:	bb 0b       	sbc	r27, r27
    30a4:	2c a1       	ldd	r18, Y+36	; 0x24
    30a6:	3d a1       	ldd	r19, Y+37	; 0x25
    30a8:	4e a1       	ldd	r20, Y+38	; 0x26
    30aa:	5f a1       	ldd	r21, Y+39	; 0x27
    30ac:	82 17       	cp	r24, r18
    30ae:	93 07       	cpc	r25, r19
    30b0:	a4 07       	cpc	r26, r20
    30b2:	b5 07       	cpc	r27, r21
    30b4:	14 f4       	brge	.+4      	; 0x30ba <_Z17handleLinkBusMsgsv+0xc36>
    30b6:	da 01       	movw	r26, r20
    30b8:	c9 01       	movw	r24, r18
    30ba:	8a 87       	std	Y+10, r24	; 0x0a
    30bc:	9b 87       	std	Y+11, r25	; 0x0b
    30be:	2f c0       	rjmp	.+94     	; 0x311e <_Z17handleLinkBusMsgsv+0xc9a>
    30c0:	80 91 3d 45 	lds	r24, 0x453D	; 0x80453d <_ZL22g_lastConversionResult+0x4>
    30c4:	90 91 3e 45 	lds	r25, 0x453E	; 0x80453e <_ZL22g_lastConversionResult+0x5>
    30c8:	9c 01       	movw	r18, r24
    30ca:	40 e0       	ldi	r20, 0x00	; 0
    30cc:	50 e0       	ldi	r21, 0x00	; 0
    30ce:	da 01       	movw	r26, r20
    30d0:	c9 01       	movw	r24, r18
    30d2:	88 0f       	add	r24, r24
    30d4:	99 1f       	adc	r25, r25
    30d6:	aa 1f       	adc	r26, r26
    30d8:	bb 1f       	adc	r27, r27
    30da:	88 0f       	add	r24, r24
    30dc:	99 1f       	adc	r25, r25
    30de:	aa 1f       	adc	r26, r26
    30e0:	bb 1f       	adc	r27, r27
    30e2:	88 0f       	add	r24, r24
    30e4:	99 1f       	adc	r25, r25
    30e6:	aa 1f       	adc	r26, r26
    30e8:	bb 1f       	adc	r27, r27
    30ea:	82 1b       	sub	r24, r18
    30ec:	93 0b       	sbc	r25, r19
    30ee:	a4 0b       	sbc	r26, r20
    30f0:	b5 0b       	sbc	r27, r21
    30f2:	88 0f       	add	r24, r24
    30f4:	99 1f       	adc	r25, r25
    30f6:	aa 1f       	adc	r26, r26
    30f8:	bb 1f       	adc	r27, r27
    30fa:	8a 5c       	subi	r24, 0xCA	; 202
    30fc:	9e 4f       	sbci	r25, 0xFE	; 254
    30fe:	af 4f       	sbci	r26, 0xFF	; 255
    3100:	bf 4f       	sbci	r27, 0xFF	; 255
    3102:	24 e6       	ldi	r18, 0x64	; 100
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	40 e0       	ldi	r20, 0x00	; 0
    3108:	50 e0       	ldi	r21, 0x00	; 0
    310a:	bc 01       	movw	r22, r24
    310c:	cd 01       	movw	r24, r26
    310e:	0e 94 2b 40 	call	0x8056	; 0x8056 <__divmodsi4>
    3112:	da 01       	movw	r26, r20
    3114:	c9 01       	movw	r24, r18
    3116:	80 5f       	subi	r24, 0xF0	; 240
    3118:	98 4d       	sbci	r25, 0xD8	; 216
    311a:	8a 87       	std	Y+10, r24	; 0x0a
    311c:	9b 87       	std	Y+11, r25	; 0x0b
    311e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3120:	9b 85       	ldd	r25, Y+11	; 0x0b
    3122:	61 e0       	ldi	r22, 0x01	; 1
    3124:	73 e4       	ldi	r23, 0x43	; 67
    3126:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <_Z16lb_broadcast_numjPKc>
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	0e 94 1c 23 	call	0x4638	; 0x4638 <ds3231_get_epoch>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	bc 01       	movw	r22, r24
    3138:	cd 01       	movw	r24, r26
    313a:	0e 94 56 01 	call	0x2ac	; 0x2ac <set_system_time>
    313e:	37 c0       	rjmp	.+110    	; 0x31ae <_Z17handleLinkBusMsgsv+0xd2a>
    3140:	ce 01       	movw	r24, r28
    3142:	c2 96       	adiw	r24, 0x32	; 50
    3144:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <ds3231_get_temp>
    3148:	98 2f       	mov	r25, r24
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	99 23       	and	r25, r25
    314e:	09 f0       	breq	.+2      	; 0x3152 <_Z17handleLinkBusMsgsv+0xcce>
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	88 23       	and	r24, r24
    3154:	59 f1       	breq	.+86     	; 0x31ac <_Z17handleLinkBusMsgsv+0xd28>
    3156:	8a a9       	ldd	r24, Y+50	; 0x32
    3158:	9b a9       	ldd	r25, Y+51	; 0x33
    315a:	66 e0       	ldi	r22, 0x06	; 6
    315c:	73 e4       	ldi	r23, 0x43	; 67
    315e:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <_Z16lb_broadcast_numjPKc>
    3162:	24 c0       	rjmp	.+72     	; 0x31ac <_Z17handleLinkBusMsgsv+0xd28>
    3164:	44 e6       	ldi	r20, 0x64	; 100
    3166:	50 e4       	ldi	r21, 0x40	; 64
    3168:	6b e0       	ldi	r22, 0x0B	; 11
    316a:	73 e4       	ldi	r23, 0x43	; 67
    316c:	83 e0       	ldi	r24, 0x03	; 3
    316e:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_Z11lb_send_msg13LBMessageTypePKcPc>
    3172:	1d c0       	rjmp	.+58     	; 0x31ae <_Z17handleLinkBusMsgsv+0xd2a>
    3174:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <_Z16linkbus_reset_rxv>
    3178:	8e ec       	ldi	r24, 0xCE	; 206
    317a:	80 93 ea 44 	sts	0x44EA, r24	; 0x8044ea <_ZL17g_last_error_code>
    317e:	17 c0       	rjmp	.+46     	; 0x31ae <_Z17handleLinkBusMsgsv+0xd2a>
    3180:	00 00       	nop
    3182:	15 c0       	rjmp	.+42     	; 0x31ae <_Z17handleLinkBusMsgsv+0xd2a>
    3184:	00 00       	nop
    3186:	13 c0       	rjmp	.+38     	; 0x31ae <_Z17handleLinkBusMsgsv+0xd2a>
    3188:	00 00       	nop
    318a:	11 c0       	rjmp	.+34     	; 0x31ae <_Z17handleLinkBusMsgsv+0xd2a>
    318c:	00 00       	nop
    318e:	0f c0       	rjmp	.+30     	; 0x31ae <_Z17handleLinkBusMsgsv+0xd2a>
    3190:	00 00       	nop
    3192:	0d c0       	rjmp	.+26     	; 0x31ae <_Z17handleLinkBusMsgsv+0xd2a>
    3194:	00 00       	nop
    3196:	0b c0       	rjmp	.+22     	; 0x31ae <_Z17handleLinkBusMsgsv+0xd2a>
    3198:	00 00       	nop
    319a:	09 c0       	rjmp	.+18     	; 0x31ae <_Z17handleLinkBusMsgsv+0xd2a>
    319c:	00 00       	nop
    319e:	07 c0       	rjmp	.+14     	; 0x31ae <_Z17handleLinkBusMsgsv+0xd2a>
    31a0:	00 00       	nop
    31a2:	05 c0       	rjmp	.+10     	; 0x31ae <_Z17handleLinkBusMsgsv+0xd2a>
    31a4:	00 00       	nop
    31a6:	03 c0       	rjmp	.+6      	; 0x31ae <_Z17handleLinkBusMsgsv+0xd2a>
    31a8:	00 00       	nop
    31aa:	01 c0       	rjmp	.+2      	; 0x31ae <_Z17handleLinkBusMsgsv+0xd2a>
    31ac:	00 00       	nop
    31ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    31b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    31b2:	fc 01       	movw	r30, r24
    31b4:	11 82       	std	Z+1, r1	; 0x01
    31b6:	12 82       	std	Z+2, r1	; 0x02
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	88 23       	and	r24, r24
    31bc:	09 f4       	brne	.+2      	; 0x31c0 <_Z17handleLinkBusMsgsv+0xd3c>
    31be:	6f c9       	rjmp	.-3362   	; 0x249e <_Z17handleLinkBusMsgsv+0x1a>
    31c0:	8f e0       	ldi	r24, 0x0F	; 15
    31c2:	93 e4       	ldi	r25, 0x43	; 67
    31c4:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_Z12lb_send_textPc>
    31c8:	6a c9       	rjmp	.-3372   	; 0x249e <_Z17handleLinkBusMsgsv+0x1a>
    31ca:	00 00       	nop
    31cc:	e3 96       	adiw	r28, 0x33	; 51
    31ce:	cd bf       	out	0x3d, r28	; 61
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	df 91       	pop	r29
    31d4:	cf 91       	pop	r28
    31d6:	1f 91       	pop	r17
    31d8:	0f 91       	pop	r16
    31da:	ff 90       	pop	r15
    31dc:	ef 90       	pop	r14
    31de:	08 95       	ret

000031e0 <_Z12eventEnabledv>:
    31e0:	ef 92       	push	r14
    31e2:	ff 92       	push	r15
    31e4:	0f 93       	push	r16
    31e6:	1f 93       	push	r17
    31e8:	cf 93       	push	r28
    31ea:	df 93       	push	r29
    31ec:	cd b7       	in	r28, 0x3d	; 61
    31ee:	de b7       	in	r29, 0x3e	; 62
    31f0:	29 97       	sbiw	r28, 0x09	; 9
    31f2:	cd bf       	out	0x3d, r28	; 61
    31f4:	de bf       	out	0x3e, r29	; 62
    31f6:	20 91 27 45 	lds	r18, 0x4527	; 0x804527 <g_event_start_time>
    31fa:	30 91 28 45 	lds	r19, 0x4528	; 0x804528 <g_event_start_time+0x1>
    31fe:	40 91 29 45 	lds	r20, 0x4529	; 0x804529 <g_event_start_time+0x2>
    3202:	50 91 2a 45 	lds	r21, 0x452A	; 0x80452a <g_event_start_time+0x3>
    3206:	80 91 2b 45 	lds	r24, 0x452B	; 0x80452b <g_event_finish_time>
    320a:	90 91 2c 45 	lds	r25, 0x452C	; 0x80452c <g_event_finish_time+0x1>
    320e:	a0 91 2d 45 	lds	r26, 0x452D	; 0x80452d <g_event_finish_time+0x2>
    3212:	b0 91 2e 45 	lds	r27, 0x452E	; 0x80452e <g_event_finish_time+0x3>
    3216:	bc 01       	movw	r22, r24
    3218:	cd 01       	movw	r24, r26
    321a:	0e 94 75 3d 	call	0x7aea	; 0x7aea <_Z7timeDifmm>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	89 83       	std	Y+1, r24	; 0x01
    3224:	9a 83       	std	Y+2, r25	; 0x02
    3226:	ab 83       	std	Y+3, r26	; 0x03
    3228:	bc 83       	std	Y+4, r27	; 0x04
    322a:	21 e0       	ldi	r18, 0x01	; 1
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	9a 81       	ldd	r25, Y+2	; 0x02
    3230:	ab 81       	ldd	r26, Y+3	; 0x03
    3232:	bc 81       	ldd	r27, Y+4	; 0x04
    3234:	18 16       	cp	r1, r24
    3236:	19 06       	cpc	r1, r25
    3238:	1a 06       	cpc	r1, r26
    323a:	1b 06       	cpc	r1, r27
    323c:	0c f0       	brlt	.+2      	; 0x3240 <_Z12eventEnabledv+0x60>
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	2d 83       	std	Y+5, r18	; 0x05
    3242:	ce 01       	movw	r24, r28
    3244:	06 96       	adiw	r24, 0x06	; 6
    3246:	0e 94 62 01 	call	0x2c4	; 0x2c4 <time>
    324a:	20 91 2b 45 	lds	r18, 0x452B	; 0x80452b <g_event_finish_time>
    324e:	30 91 2c 45 	lds	r19, 0x452C	; 0x80452c <g_event_finish_time+0x1>
    3252:	40 91 2d 45 	lds	r20, 0x452D	; 0x80452d <g_event_finish_time+0x2>
    3256:	50 91 2e 45 	lds	r21, 0x452E	; 0x80452e <g_event_finish_time+0x3>
    325a:	8e 81       	ldd	r24, Y+6	; 0x06
    325c:	9f 81       	ldd	r25, Y+7	; 0x07
    325e:	a8 85       	ldd	r26, Y+8	; 0x08
    3260:	b9 85       	ldd	r27, Y+9	; 0x09
    3262:	bc 01       	movw	r22, r24
    3264:	cd 01       	movw	r24, r26
    3266:	0e 94 75 3d 	call	0x7aea	; 0x7aea <_Z7timeDifmm>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	89 83       	std	Y+1, r24	; 0x01
    3270:	9a 83       	std	Y+2, r25	; 0x02
    3272:	ab 83       	std	Y+3, r26	; 0x03
    3274:	bc 83       	std	Y+4, r27	; 0x04
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	9a 81       	ldd	r25, Y+2	; 0x02
    327a:	ab 81       	ldd	r26, Y+3	; 0x03
    327c:	bc 81       	ldd	r27, Y+4	; 0x04
    327e:	bb 23       	and	r27, r27
    3280:	2c f0       	brlt	.+10     	; 0x328c <_Z12eventEnabledv+0xac>
    3282:	8d 81       	ldd	r24, Y+5	; 0x05
    3284:	88 23       	and	r24, r24
    3286:	11 f0       	breq	.+4      	; 0x328c <_Z12eventEnabledv+0xac>
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	4a c0       	rjmp	.+148    	; 0x3320 <_Z12eventEnabledv+0x140>
    328c:	20 91 27 45 	lds	r18, 0x4527	; 0x804527 <g_event_start_time>
    3290:	30 91 28 45 	lds	r19, 0x4528	; 0x804528 <g_event_start_time+0x1>
    3294:	40 91 29 45 	lds	r20, 0x4529	; 0x804529 <g_event_start_time+0x2>
    3298:	50 91 2a 45 	lds	r21, 0x452A	; 0x80452a <g_event_start_time+0x3>
    329c:	8e 81       	ldd	r24, Y+6	; 0x06
    329e:	9f 81       	ldd	r25, Y+7	; 0x07
    32a0:	a8 85       	ldd	r26, Y+8	; 0x08
    32a2:	b9 85       	ldd	r27, Y+9	; 0x09
    32a4:	bc 01       	movw	r22, r24
    32a6:	cd 01       	movw	r24, r26
    32a8:	0e 94 75 3d 	call	0x7aea	; 0x7aea <_Z7timeDifmm>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	89 83       	std	Y+1, r24	; 0x01
    32b2:	9a 83       	std	Y+2, r25	; 0x02
    32b4:	ab 83       	std	Y+3, r26	; 0x03
    32b6:	bc 83       	std	Y+4, r27	; 0x04
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	9a 81       	ldd	r25, Y+2	; 0x02
    32bc:	ab 81       	ldd	r26, Y+3	; 0x03
    32be:	bc 81       	ldd	r27, Y+4	; 0x04
    32c0:	84 3c       	cpi	r24, 0xC4	; 196
    32c2:	9f 4f       	sbci	r25, 0xFF	; 255
    32c4:	af 4f       	sbci	r26, 0xFF	; 255
    32c6:	bf 4f       	sbci	r27, 0xFF	; 255
    32c8:	64 f0       	brlt	.+24     	; 0x32e2 <_Z12eventEnabledv+0x102>
    32ca:	10 92 f8 44 	sts	0x44F8, r1	; 0x8044f8 <_ZL11g_sleepType>
    32ce:	10 92 17 40 	sts	0x4017, r1	; 0x804017 <_ZL18g_seconds_to_sleep>
    32d2:	10 92 18 40 	sts	0x4018, r1	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    32d6:	10 92 19 40 	sts	0x4019, r1	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    32da:	10 92 1a 40 	sts	0x401A, r1	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	1f c0       	rjmp	.+62     	; 0x3320 <_Z12eventEnabledv+0x140>
    32e2:	24 ec       	ldi	r18, 0xC4	; 196
    32e4:	3f ef       	ldi	r19, 0xFF	; 255
    32e6:	4f ef       	ldi	r20, 0xFF	; 255
    32e8:	5f ef       	ldi	r21, 0xFF	; 255
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	9a 81       	ldd	r25, Y+2	; 0x02
    32ee:	ab 81       	ldd	r26, Y+3	; 0x03
    32f0:	bc 81       	ldd	r27, Y+4	; 0x04
    32f2:	79 01       	movw	r14, r18
    32f4:	8a 01       	movw	r16, r20
    32f6:	e8 1a       	sub	r14, r24
    32f8:	f9 0a       	sbc	r15, r25
    32fa:	0a 0b       	sbc	r16, r26
    32fc:	1b 0b       	sbc	r17, r27
    32fe:	d8 01       	movw	r26, r16
    3300:	c7 01       	movw	r24, r14
    3302:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <_ZL18g_seconds_to_sleep>
    3306:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <_ZL18g_seconds_to_sleep+0x1>
    330a:	a0 93 19 40 	sts	0x4019, r26	; 0x804019 <_ZL18g_seconds_to_sleep+0x2>
    330e:	b0 93 1a 40 	sts	0x401A, r27	; 0x80401a <_ZL18g_seconds_to_sleep+0x3>
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	80 93 f8 44 	sts	0x44F8, r24	; 0x8044f8 <_ZL11g_sleepType>
    3318:	81 e0       	ldi	r24, 0x01	; 1
    331a:	80 93 33 45 	sts	0x4533, r24	; 0x804533 <_ZL13g_go_to_sleep>
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	29 96       	adiw	r28, 0x09	; 9
    3322:	cd bf       	out	0x3d, r28	; 61
    3324:	de bf       	out	0x3e, r29	; 62
    3326:	df 91       	pop	r29
    3328:	cf 91       	pop	r28
    332a:	1f 91       	pop	r17
    332c:	0f 91       	pop	r16
    332e:	ff 90       	pop	r15
    3330:	ef 90       	pop	r14
    3332:	08 95       	ret

00003334 <_Z13throttleValueh>:
    3334:	85 31       	cpi	r24, 0x15	; 21
    3336:	4c f4       	brge	.+18     	; 0x334a <_Z13throttleValueh+0x16>
    3338:	28 2f       	mov	r18, r24
    333a:	88 0f       	add	r24, r24
    333c:	33 0b       	sbc	r19, r19
    333e:	25 30       	cpi	r18, 0x05	; 5
    3340:	31 05       	cpc	r19, r1
    3342:	2c f4       	brge	.+10     	; 0x334e <_Z13throttleValueh+0x1a>
    3344:	25 e0       	ldi	r18, 0x05	; 5
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	02 c0       	rjmp	.+4      	; 0x334e <_Z13throttleValueh+0x1a>
    334a:	24 e1       	ldi	r18, 0x14	; 20
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	40 e0       	ldi	r20, 0x00	; 0
    3352:	50 e0       	ldi	r21, 0x00	; 0
    3354:	62 ec       	ldi	r22, 0xC2	; 194
    3356:	71 e0       	ldi	r23, 0x01	; 1
    3358:	80 e0       	ldi	r24, 0x00	; 0
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	0e 94 2b 40 	call	0x8056	; 0x8056 <__divmodsi4>
    3360:	ca 01       	movw	r24, r20
    3362:	b9 01       	movw	r22, r18
    3364:	0e 94 af 3e 	call	0x7d5e	; 0x7d5e <__floatsisf>
    3368:	0e 94 7e 3e 	call	0x7cfc	; 0x7cfc <__fixunssfsi>
    336c:	cb 01       	movw	r24, r22
    336e:	08 95       	ret

00003370 <_Z11launchEventP2SC>:
    3370:	cf 93       	push	r28
    3372:	df 93       	push	r29
    3374:	00 d0       	rcall	.+0      	; 0x3376 <_Z11launchEventP2SC+0x6>
    3376:	1f 92       	push	r1
    3378:	cd b7       	in	r28, 0x3d	; 61
    337a:	de b7       	in	r29, 0x3e	; 62
    337c:	8a 83       	std	Y+2, r24	; 0x02
    337e:	9b 83       	std	Y+3, r25	; 0x03
    3380:	8a 81       	ldd	r24, Y+2	; 0x02
    3382:	9b 81       	ldd	r25, Y+3	; 0x03
    3384:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <_Z33activateEventUsingCurrentSettingsP2SC>
    3388:	89 83       	std	Y+1, r24	; 0x01
    338a:	8a 81       	ldd	r24, Y+2	; 0x02
    338c:	9b 81       	ldd	r25, Y+3	; 0x03
    338e:	fc 01       	movw	r30, r24
    3390:	80 81       	ld	r24, Z
    3392:	88 23       	and	r24, r24
    3394:	31 f0       	breq	.+12     	; 0x33a2 <_Z11launchEventP2SC+0x32>
    3396:	8a 81       	ldd	r24, Y+2	; 0x02
    3398:	9b 81       	ldd	r25, Y+3	; 0x03
    339a:	fc 01       	movw	r30, r24
    339c:	80 81       	ld	r24, Z
    339e:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
    33a4:	88 23       	and	r24, r24
    33a6:	21 f0       	breq	.+8      	; 0x33b0 <_Z11launchEventP2SC+0x40>
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	80 93 ea 44 	sts	0x44EA, r24	; 0x8044ea <_ZL17g_last_error_code>
    33ae:	04 c0       	rjmp	.+8      	; 0x33b8 <_Z11launchEventP2SC+0x48>
    33b0:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <_Z12eventEnabledv>
    33b4:	80 93 2f 45 	sts	0x452F, r24	; 0x80452f <g_event_enabled>
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	23 96       	adiw	r28, 0x03	; 3
    33bc:	cd bf       	out	0x3d, r28	; 61
    33be:	de bf       	out	0x3e, r29	; 62
    33c0:	df 91       	pop	r29
    33c2:	cf 91       	pop	r28
    33c4:	08 95       	ret

000033c6 <_Z33activateEventUsingCurrentSettingsP2SC>:
    33c6:	cf 92       	push	r12
    33c8:	df 92       	push	r13
    33ca:	ef 92       	push	r14
    33cc:	ff 92       	push	r15
    33ce:	0f 93       	push	r16
    33d0:	1f 93       	push	r17
    33d2:	cf 93       	push	r28
    33d4:	df 93       	push	r29
    33d6:	1f 92       	push	r1
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
    33dc:	40 91 27 45 	lds	r20, 0x4527	; 0x804527 <g_event_start_time>
    33e0:	50 91 28 45 	lds	r21, 0x4528	; 0x804528 <g_event_start_time+0x1>
    33e4:	60 91 29 45 	lds	r22, 0x4529	; 0x804529 <g_event_start_time+0x2>
    33e8:	70 91 2a 45 	lds	r23, 0x452A	; 0x80452a <g_event_start_time+0x3>
    33ec:	45 2b       	or	r20, r21
    33ee:	46 2b       	or	r20, r22
    33f0:	47 2b       	or	r20, r23
    33f2:	09 f4       	brne	.+2      	; 0x33f6 <_Z33activateEventUsingCurrentSettingsP2SC+0x30>
    33f4:	91 c1       	rjmp	.+802    	; 0x3718 <_Z33activateEventUsingCurrentSettingsP2SC+0x352>
    33f6:	00 91 27 45 	lds	r16, 0x4527	; 0x804527 <g_event_start_time>
    33fa:	10 91 28 45 	lds	r17, 0x4528	; 0x804528 <g_event_start_time+0x1>
    33fe:	20 91 29 45 	lds	r18, 0x4529	; 0x804529 <g_event_start_time+0x2>
    3402:	30 91 2a 45 	lds	r19, 0x452A	; 0x80452a <g_event_start_time+0x3>
    3406:	40 91 2b 45 	lds	r20, 0x452B	; 0x80452b <g_event_finish_time>
    340a:	50 91 2c 45 	lds	r21, 0x452C	; 0x80452c <g_event_finish_time+0x1>
    340e:	60 91 2d 45 	lds	r22, 0x452D	; 0x80452d <g_event_finish_time+0x2>
    3412:	70 91 2e 45 	lds	r23, 0x452E	; 0x80452e <g_event_finish_time+0x3>
    3416:	04 17       	cp	r16, r20
    3418:	15 07       	cpc	r17, r21
    341a:	26 07       	cpc	r18, r22
    341c:	37 07       	cpc	r19, r23
    341e:	08 f0       	brcs	.+2      	; 0x3422 <_Z33activateEventUsingCurrentSettingsP2SC+0x5c>
    3420:	7d c1       	rjmp	.+762    	; 0x371c <_Z33activateEventUsingCurrentSettingsP2SC+0x356>
    3422:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    3426:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    342a:	23 2b       	or	r18, r19
    342c:	09 f4       	brne	.+2      	; 0x3430 <_Z33activateEventUsingCurrentSettingsP2SC+0x6a>
    342e:	78 c1       	rjmp	.+752    	; 0x3720 <_Z33activateEventUsingCurrentSettingsP2SC+0x35a>
    3430:	40 91 0f 40 	lds	r20, 0x400F	; 0x80400f <g_off_air_seconds>
    3434:	50 91 10 40 	lds	r21, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    3438:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    343c:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    3440:	24 0f       	add	r18, r20
    3442:	35 1f       	adc	r19, r21
    3444:	40 91 25 45 	lds	r20, 0x4525	; 0x804525 <g_intra_cycle_delay_time>
    3448:	50 91 26 45 	lds	r21, 0x4526	; 0x804526 <g_intra_cycle_delay_time+0x1>
    344c:	24 17       	cp	r18, r20
    344e:	35 07       	cpc	r19, r21
    3450:	0c f4       	brge	.+2      	; 0x3454 <_Z33activateEventUsingCurrentSettingsP2SC+0x8e>
    3452:	68 c1       	rjmp	.+720    	; 0x3724 <_Z33activateEventUsingCurrentSettingsP2SC+0x35e>
    3454:	20 91 f9 44 	lds	r18, 0x44F9	; 0x8044f9 <g_messages_text>
    3458:	22 23       	and	r18, r18
    345a:	09 f4       	brne	.+2      	; 0x345e <_Z33activateEventUsingCurrentSettingsP2SC+0x98>
    345c:	65 c1       	rjmp	.+714    	; 0x3728 <_Z33activateEventUsingCurrentSettingsP2SC+0x362>
    345e:	20 91 0c 40 	lds	r18, 0x400C	; 0x80400c <g_pattern_codespeed>
    3462:	22 23       	and	r18, r18
    3464:	09 f4       	brne	.+2      	; 0x3468 <_Z33activateEventUsingCurrentSettingsP2SC+0xa2>
    3466:	62 c1       	rjmp	.+708    	; 0x372c <_Z33activateEventUsingCurrentSettingsP2SC+0x366>
    3468:	8c 01       	movw	r16, r24
    346a:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <g_messages_text+0x15>
    346e:	88 23       	and	r24, r24
    3470:	19 f1       	breq	.+70     	; 0x34b8 <_Z33activateEventUsingCurrentSettingsP2SC+0xf2>
    3472:	80 91 0b 40 	lds	r24, 0x400B	; 0x80400b <g_id_codespeed>
    3476:	88 23       	and	r24, r24
    3478:	41 f0       	breq	.+16     	; 0x348a <_Z33activateEventUsingCurrentSettingsP2SC+0xc4>
    347a:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <g_ID_period_seconds>
    347e:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <g_ID_period_seconds+0x1>
    3482:	89 2b       	or	r24, r25
    3484:	21 f4       	brne	.+8      	; 0x348e <_Z33activateEventUsingCurrentSettingsP2SC+0xc8>
    3486:	81 e0       	ldi	r24, 0x01	; 1
    3488:	03 c0       	rjmp	.+6      	; 0x3490 <_Z33activateEventUsingCurrentSettingsP2SC+0xca>
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	01 c0       	rjmp	.+2      	; 0x3490 <_Z33activateEventUsingCurrentSettingsP2SC+0xca>
    348e:	80 e0       	ldi	r24, 0x00	; 0
    3490:	81 11       	cpse	r24, r1
    3492:	4e c1       	rjmp	.+668    	; 0x3730 <_Z33activateEventUsingCurrentSettingsP2SC+0x36a>
    3494:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    3498:	70 e0       	ldi	r23, 0x00	; 0
    349a:	8e e0       	ldi	r24, 0x0E	; 14
    349c:	95 e4       	ldi	r25, 0x45	; 69
    349e:	0e 94 da 30 	call	0x61b4	; 0x61b4 <_Z26timeRequiredToSendStrAtWPMPcj>
    34a2:	8c 50       	subi	r24, 0x0C	; 12
    34a4:	9e 4f       	sbci	r25, 0xFE	; 254
    34a6:	68 ee       	ldi	r22, 0xE8	; 232
    34a8:	73 e0       	ldi	r23, 0x03	; 3
    34aa:	0e 94 e1 3f 	call	0x7fc2	; 0x7fc2 <__udivmodhi4>
    34ae:	60 93 23 45 	sts	0x4523, r22	; 0x804523 <g_time_needed_for_ID>
    34b2:	70 93 24 45 	sts	0x4524, r23	; 0x804524 <g_time_needed_for_ID+0x1>
    34b6:	04 c0       	rjmp	.+8      	; 0x34c0 <_Z33activateEventUsingCurrentSettingsP2SC+0xfa>
    34b8:	10 92 23 45 	sts	0x4523, r1	; 0x804523 <g_time_needed_for_ID>
    34bc:	10 92 24 45 	sts	0x4524, r1	; 0x804524 <g_time_needed_for_ID+0x1>
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <time>
    34c8:	c0 90 2b 45 	lds	r12, 0x452B	; 0x80452b <g_event_finish_time>
    34cc:	d0 90 2c 45 	lds	r13, 0x452C	; 0x80452c <g_event_finish_time+0x1>
    34d0:	e0 90 2d 45 	lds	r14, 0x452D	; 0x80452d <g_event_finish_time+0x2>
    34d4:	f0 90 2e 45 	lds	r15, 0x452E	; 0x80452e <g_event_finish_time+0x3>
    34d8:	c6 16       	cp	r12, r22
    34da:	d7 06       	cpc	r13, r23
    34dc:	e8 06       	cpc	r14, r24
    34de:	f9 06       	cpc	r15, r25
    34e0:	48 f4       	brcc	.+18     	; 0x34f4 <_Z33activateEventUsingCurrentSettingsP2SC+0x12e>
    34e2:	01 15       	cp	r16, r1
    34e4:	11 05       	cpc	r17, r1
    34e6:	09 f4       	brne	.+2      	; 0x34ea <_Z33activateEventUsingCurrentSettingsP2SC+0x124>
    34e8:	25 c1       	rjmp	.+586    	; 0x3734 <_Z33activateEventUsingCurrentSettingsP2SC+0x36e>
    34ea:	8a ef       	ldi	r24, 0xFA	; 250
    34ec:	f8 01       	movw	r30, r16
    34ee:	80 83       	st	Z, r24
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	21 c1       	rjmp	.+578    	; 0x3736 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    34f4:	20 91 27 45 	lds	r18, 0x4527	; 0x804527 <g_event_start_time>
    34f8:	30 91 28 45 	lds	r19, 0x4528	; 0x804528 <g_event_start_time+0x1>
    34fc:	40 91 29 45 	lds	r20, 0x4529	; 0x804529 <g_event_start_time+0x2>
    3500:	50 91 2a 45 	lds	r21, 0x452A	; 0x80452a <g_event_start_time+0x3>
    3504:	0e 94 75 3d 	call	0x7aea	; 0x7aea <_Z7timeDifmm>
    3508:	99 23       	and	r25, r25
    350a:	0c f4       	brge	.+2      	; 0x350e <_Z33activateEventUsingCurrentSettingsP2SC+0x148>
    350c:	f2 c0       	rjmp	.+484    	; 0x36f2 <_Z33activateEventUsingCurrentSettingsP2SC+0x32c>
    350e:	e0 90 0d 40 	lds	r14, 0x400D	; 0x80400d <g_on_air_seconds>
    3512:	f0 90 0e 40 	lds	r15, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    3516:	20 91 0f 40 	lds	r18, 0x400F	; 0x80400f <g_off_air_seconds>
    351a:	30 91 10 40 	lds	r19, 0x4010	; 0x804010 <g_off_air_seconds+0x1>
    351e:	e2 0e       	add	r14, r18
    3520:	f3 1e       	adc	r15, r19
    3522:	97 01       	movw	r18, r14
    3524:	0f 2c       	mov	r0, r15
    3526:	00 0c       	add	r0, r0
    3528:	44 0b       	sbc	r20, r20
    352a:	55 0b       	sbc	r21, r21
    352c:	0e 94 2b 40 	call	0x8056	; 0x8056 <__divmodsi4>
    3530:	20 91 25 45 	lds	r18, 0x4525	; 0x804525 <g_intra_cycle_delay_time>
    3534:	30 91 26 45 	lds	r19, 0x4526	; 0x804526 <g_intra_cycle_delay_time+0x1>
    3538:	c9 01       	movw	r24, r18
    353a:	86 1b       	sub	r24, r22
    353c:	97 0b       	sbc	r25, r23
    353e:	18 16       	cp	r1, r24
    3540:	19 06       	cpc	r1, r25
    3542:	0c f4       	brge	.+2      	; 0x3546 <_Z33activateEventUsingCurrentSettingsP2SC+0x180>
    3544:	84 c0       	rjmp	.+264    	; 0x364e <_Z33activateEventUsingCurrentSettingsP2SC+0x288>
    3546:	22 27       	eor	r18, r18
    3548:	33 27       	eor	r19, r19
    354a:	28 1b       	sub	r18, r24
    354c:	39 0b       	sbc	r19, r25
    354e:	40 91 0d 40 	lds	r20, 0x400D	; 0x80400d <g_on_air_seconds>
    3552:	50 91 0e 40 	lds	r21, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    3556:	24 17       	cp	r18, r20
    3558:	35 07       	cpc	r19, r21
    355a:	ac f1       	brlt	.+106    	; 0x35c6 <_Z33activateEventUsingCurrentSettingsP2SC+0x200>
    355c:	8e 0d       	add	r24, r14
    355e:	9f 1d       	adc	r25, r15
    3560:	91 95       	neg	r25
    3562:	81 95       	neg	r24
    3564:	91 09       	sbc	r25, r1
    3566:	09 2e       	mov	r0, r25
    3568:	00 0c       	add	r0, r0
    356a:	aa 0b       	sbc	r26, r26
    356c:	bb 0b       	sbc	r27, r27
    356e:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
    3572:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    3576:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    357a:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    357e:	01 15       	cp	r16, r1
    3580:	11 05       	cpc	r17, r1
    3582:	19 f0       	breq	.+6      	; 0x358a <_Z33activateEventUsingCurrentSettingsP2SC+0x1c4>
    3584:	8e ef       	ldi	r24, 0xFE	; 254
    3586:	f8 01       	movw	r30, r16
    3588:	80 83       	st	Z, r24
    358a:	80 91 2f 45 	lds	r24, 0x452F	; 0x80452f <g_event_enabled>
    358e:	81 11       	cpse	r24, r1
    3590:	8a c0       	rjmp	.+276    	; 0x36a6 <_Z33activateEventUsingCurrentSettingsP2SC+0x2e0>
    3592:	80 91 0d 40 	lds	r24, 0x400D	; 0x80400d <g_on_air_seconds>
    3596:	90 91 0e 40 	lds	r25, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    359a:	40 91 ef 44 	lds	r20, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    359e:	50 91 f0 44 	lds	r21, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    35a2:	60 91 f1 44 	lds	r22, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    35a6:	70 91 f2 44 	lds	r23, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    35aa:	20 91 23 45 	lds	r18, 0x4523	; 0x804523 <g_time_needed_for_ID>
    35ae:	30 91 24 45 	lds	r19, 0x4524	; 0x804524 <g_time_needed_for_ID+0x1>
    35b2:	84 1b       	sub	r24, r20
    35b4:	95 0b       	sbc	r25, r21
    35b6:	82 1b       	sub	r24, r18
    35b8:	93 0b       	sbc	r25, r19
    35ba:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
    35be:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
    35c2:	80 e0       	ldi	r24, 0x00	; 0
    35c4:	77 c0       	rjmp	.+238    	; 0x36b4 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    35c6:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    35ca:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    35ce:	82 0f       	add	r24, r18
    35d0:	93 1f       	adc	r25, r19
    35d2:	09 2e       	mov	r0, r25
    35d4:	00 0c       	add	r0, r0
    35d6:	aa 0b       	sbc	r26, r26
    35d8:	bb 0b       	sbc	r27, r27
    35da:	80 93 ef 44 	sts	0x44EF, r24	; 0x8044ef <_ZL12g_on_the_air>
    35de:	90 93 f0 44 	sts	0x44F0, r25	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    35e2:	a0 93 f1 44 	sts	0x44F1, r26	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    35e6:	b0 93 f2 44 	sts	0x44F2, r27	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    35ea:	01 15       	cp	r16, r1
    35ec:	11 05       	cpc	r17, r1
    35ee:	19 f0       	breq	.+6      	; 0x35f6 <_Z33activateEventUsingCurrentSettingsP2SC+0x230>
    35f0:	8d ef       	ldi	r24, 0xFD	; 253
    35f2:	f8 01       	movw	r30, r16
    35f4:	80 83       	st	Z, r24
    35f6:	80 91 2f 45 	lds	r24, 0x452F	; 0x80452f <g_event_enabled>
    35fa:	81 11       	cpse	r24, r1
    35fc:	56 c0       	rjmp	.+172    	; 0x36aa <_Z33activateEventUsingCurrentSettingsP2SC+0x2e4>
    35fe:	80 91 23 45 	lds	r24, 0x4523	; 0x804523 <g_time_needed_for_ID>
    3602:	90 91 24 45 	lds	r25, 0x4524	; 0x804524 <g_time_needed_for_ID+0x1>
    3606:	a0 e0       	ldi	r26, 0x00	; 0
    3608:	b0 e0       	ldi	r27, 0x00	; 0
    360a:	40 91 ef 44 	lds	r20, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    360e:	50 91 f0 44 	lds	r21, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    3612:	60 91 f1 44 	lds	r22, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    3616:	70 91 f2 44 	lds	r23, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    361a:	84 17       	cp	r24, r20
    361c:	95 07       	cpc	r25, r21
    361e:	a6 07       	cpc	r26, r22
    3620:	b7 07       	cpc	r27, r23
    3622:	0c f0       	brlt	.+2      	; 0x3626 <_Z33activateEventUsingCurrentSettingsP2SC+0x260>
    3624:	44 c0       	rjmp	.+136    	; 0x36ae <_Z33activateEventUsingCurrentSettingsP2SC+0x2e8>
    3626:	80 91 ef 44 	lds	r24, 0x44EF	; 0x8044ef <_ZL12g_on_the_air>
    362a:	90 91 f0 44 	lds	r25, 0x44F0	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    362e:	a0 91 f1 44 	lds	r26, 0x44F1	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    3632:	b0 91 f2 44 	lds	r27, 0x44F2	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    3636:	20 91 23 45 	lds	r18, 0x4523	; 0x804523 <g_time_needed_for_ID>
    363a:	30 91 24 45 	lds	r19, 0x4524	; 0x804524 <g_time_needed_for_ID+0x1>
    363e:	82 1b       	sub	r24, r18
    3640:	93 0b       	sbc	r25, r19
    3642:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
    3646:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	33 c0       	rjmp	.+102    	; 0x36b4 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    364e:	44 27       	eor	r20, r20
    3650:	55 27       	eor	r21, r21
    3652:	48 1b       	sub	r20, r24
    3654:	59 0b       	sbc	r21, r25
    3656:	05 2e       	mov	r0, r21
    3658:	00 0c       	add	r0, r0
    365a:	66 0b       	sbc	r22, r22
    365c:	77 0b       	sbc	r23, r23
    365e:	40 93 ef 44 	sts	0x44EF, r20	; 0x8044ef <_ZL12g_on_the_air>
    3662:	50 93 f0 44 	sts	0x44F0, r21	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    3666:	60 93 f1 44 	sts	0x44F1, r22	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    366a:	70 93 f2 44 	sts	0x44F2, r23	; 0x8044f2 <_ZL12g_on_the_air+0x3>
    366e:	01 15       	cp	r16, r1
    3670:	11 05       	cpc	r17, r1
    3672:	19 f0       	breq	.+6      	; 0x367a <_Z33activateEventUsingCurrentSettingsP2SC+0x2b4>
    3674:	2e ef       	ldi	r18, 0xFE	; 254
    3676:	f8 01       	movw	r30, r16
    3678:	20 83       	st	Z, r18
    367a:	20 91 2f 45 	lds	r18, 0x452F	; 0x80452f <g_event_enabled>
    367e:	21 11       	cpse	r18, r1
    3680:	18 c0       	rjmp	.+48     	; 0x36b2 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ec>
    3682:	20 91 0d 40 	lds	r18, 0x400D	; 0x80400d <g_on_air_seconds>
    3686:	30 91 0e 40 	lds	r19, 0x400E	; 0x80400e <g_on_air_seconds+0x1>
    368a:	82 0f       	add	r24, r18
    368c:	93 1f       	adc	r25, r19
    368e:	20 91 23 45 	lds	r18, 0x4523	; 0x804523 <g_time_needed_for_ID>
    3692:	30 91 24 45 	lds	r19, 0x4524	; 0x804524 <g_time_needed_for_ID+0x1>
    3696:	82 1b       	sub	r24, r18
    3698:	93 0b       	sbc	r25, r19
    369a:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
    369e:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
    36a2:	80 e0       	ldi	r24, 0x00	; 0
    36a4:	07 c0       	rjmp	.+14     	; 0x36b4 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    36a6:	80 e0       	ldi	r24, 0x00	; 0
    36a8:	05 c0       	rjmp	.+10     	; 0x36b4 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	03 c0       	rjmp	.+6      	; 0x36b4 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	01 c0       	rjmp	.+2      	; 0x36b4 <_Z33activateEventUsingCurrentSettingsP2SC+0x2ee>
    36b2:	80 e0       	ldi	r24, 0x00	; 0
    36b4:	88 23       	and	r24, r24
    36b6:	b1 f0       	breq	.+44     	; 0x36e4 <_Z33activateEventUsingCurrentSettingsP2SC+0x31e>
    36b8:	f8 94       	cli
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	89 83       	std	Y+1, r24	; 0x01
    36be:	40 e0       	ldi	r20, 0x00	; 0
    36c0:	50 e0       	ldi	r21, 0x00	; 0
    36c2:	be 01       	movw	r22, r28
    36c4:	6f 5f       	subi	r22, 0xFF	; 255
    36c6:	7f 4f       	sbci	r23, 0xFF	; 255
    36c8:	89 ef       	ldi	r24, 0xF9	; 249
    36ca:	94 e4       	ldi	r25, 0x44	; 68
    36cc:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <_Z9makeMorsePcPhS0_>
    36d0:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    36d4:	0e 94 9a 19 	call	0x3334	; 0x3334 <_Z13throttleValueh>
    36d8:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    36dc:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>
    36e0:	78 94       	sei
    36e2:	03 c0       	rjmp	.+6      	; 0x36ea <_Z33activateEventUsingCurrentSettingsP2SC+0x324>
    36e4:	80 e0       	ldi	r24, 0x00	; 0
    36e6:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <_Z14keyTransmitterh>
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	80 93 30 45 	sts	0x4530, r24	; 0x804530 <g_event_commenced>
    36f0:	09 c0       	rjmp	.+18     	; 0x3704 <_Z33activateEventUsingCurrentSettingsP2SC+0x33e>
    36f2:	01 15       	cp	r16, r1
    36f4:	11 05       	cpc	r17, r1
    36f6:	19 f0       	breq	.+6      	; 0x36fe <_Z33activateEventUsingCurrentSettingsP2SC+0x338>
    36f8:	8f ef       	ldi	r24, 0xFF	; 255
    36fa:	f8 01       	movw	r30, r16
    36fc:	80 83       	st	Z, r24
    36fe:	80 e0       	ldi	r24, 0x00	; 0
    3700:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <_Z14keyTransmitterh>
    3704:	10 92 32 45 	sts	0x4532, r1	; 0x804532 <g_waiting_for_next_event>
    3708:	8a e5       	ldi	r24, 0x5A	; 90
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <g_update_timeout_seconds>
    3710:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <g_update_timeout_seconds+0x1>
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	0f c0       	rjmp	.+30     	; 0x3736 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    3718:	8c ec       	ldi	r24, 0xCC	; 204
    371a:	0d c0       	rjmp	.+26     	; 0x3736 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    371c:	8d ec       	ldi	r24, 0xCD	; 205
    371e:	0b c0       	rjmp	.+22     	; 0x3736 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    3720:	8b ec       	ldi	r24, 0xCB	; 203
    3722:	09 c0       	rjmp	.+18     	; 0x3736 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    3724:	8a ec       	ldi	r24, 0xCA	; 202
    3726:	07 c0       	rjmp	.+14     	; 0x3736 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    3728:	89 ec       	ldi	r24, 0xC9	; 201
    372a:	05 c0       	rjmp	.+10     	; 0x3736 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    372c:	88 ec       	ldi	r24, 0xC8	; 200
    372e:	03 c0       	rjmp	.+6      	; 0x3736 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    3730:	87 ec       	ldi	r24, 0xC7	; 199
    3732:	01 c0       	rjmp	.+2      	; 0x3736 <_Z33activateEventUsingCurrentSettingsP2SC+0x370>
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	0f 90       	pop	r0
    3738:	df 91       	pop	r29
    373a:	cf 91       	pop	r28
    373c:	1f 91       	pop	r17
    373e:	0f 91       	pop	r16
    3740:	ff 90       	pop	r15
    3742:	ef 90       	pop	r14
    3744:	df 90       	pop	r13
    3746:	cf 90       	pop	r12
    3748:	08 95       	ret

0000374a <_Z18antennaIsConnectedv>:
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	08 95       	ret

0000374e <_Z11setupForFoxP5Fox_t13EventAction_t>:
	
}


void setupForFox(Fox_t* fox, EventAction_t action)
{
    374e:	1f 93       	push	r17
    3750:	cf 93       	push	r28
    3752:	df 93       	push	r29
    3754:	1f 92       	push	r1
    3756:	cd b7       	in	r28, 0x3d	; 61
    3758:	de b7       	in	r29, 0x3e	; 62
    375a:	16 2f       	mov	r17, r22
	bool patternNotSet = true;
	
	if(fox)
    375c:	00 97       	sbiw	r24, 0x00	; 0
    375e:	31 f0       	breq	.+12     	; 0x376c <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
	{
		if(*fox != INVALID_FOX)
    3760:	fc 01       	movw	r30, r24
    3762:	80 81       	ld	r24, Z
    3764:	82 31       	cpi	r24, 0x12	; 18
    3766:	11 f0       	breq	.+4      	; 0x376c <_Z11setupForFoxP5Fox_t13EventAction_t+0x1e>
		{
			g_fox = *fox;
    3768:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
		}
	}

 	g_current_epoch = ds3231_get_epoch(null);
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	0e 94 1c 23 	call	0x4638	; 0x4638 <ds3231_get_epoch>
    3774:	60 93 55 45 	sts	0x4555, r22	; 0x804555 <g_current_epoch>
    3778:	70 93 56 45 	sts	0x4556, r23	; 0x804556 <g_current_epoch+0x1>
    377c:	80 93 57 45 	sts	0x4557, r24	; 0x804557 <g_current_epoch+0x2>
    3780:	90 93 58 45 	sts	0x4558, r25	; 0x804558 <g_current_epoch+0x3>

	cli();
    3784:	f8 94       	cli

	switch(g_fox)
    3786:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <g_fox>
    378a:	83 30       	cpi	r24, 0x03	; 3
    378c:	31 f1       	breq	.+76     	; 0x37da <_Z11setupForFoxP5Fox_t13EventAction_t+0x8c>
    378e:	28 f4       	brcc	.+10     	; 0x379a <_Z11setupForFoxP5Fox_t13EventAction_t+0x4c>
    3790:	81 30       	cpi	r24, 0x01	; 1
    3792:	41 f0       	breq	.+16     	; 0x37a4 <_Z11setupForFoxP5Fox_t13EventAction_t+0x56>
    3794:	82 30       	cpi	r24, 0x02	; 2
    3796:	91 f0       	breq	.+36     	; 0x37bc <_Z11setupForFoxP5Fox_t13EventAction_t+0x6e>
    3798:	6e c0       	rjmp	.+220    	; 0x3876 <_Z11setupForFoxP5Fox_t13EventAction_t+0x128>
    379a:	84 30       	cpi	r24, 0x04	; 4
    379c:	69 f1       	breq	.+90     	; 0x37f8 <_Z11setupForFoxP5Fox_t13EventAction_t+0xaa>
    379e:	85 30       	cpi	r24, 0x05	; 5
    37a0:	d1 f1       	breq	.+116    	; 0x3816 <_Z11setupForFoxP5Fox_t13EventAction_t+0xc8>
    37a2:	69 c0       	rjmp	.+210    	; 0x3876 <_Z11setupForFoxP5Fox_t13EventAction_t+0x128>
	{
		case FOX_1:
		{
			if(patternNotSet)
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOE");
    37a4:	e9 ef       	ldi	r30, 0xF9	; 249
    37a6:	f4 e4       	ldi	r31, 0x44	; 68
    37a8:	8d e4       	ldi	r24, 0x4D	; 77
    37aa:	9f e4       	ldi	r25, 0x4F	; 79
    37ac:	80 83       	st	Z, r24
    37ae:	91 83       	std	Z+1, r25	; 0x01
    37b0:	85 e4       	ldi	r24, 0x45	; 69
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	82 83       	std	Z+2, r24	; 0x02
    37b6:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    37b8:	80 e0       	ldi	r24, 0x00	; 0
    37ba:	01 c0       	rjmp	.+2      	; 0x37be <_Z11setupForFoxP5Fox_t13EventAction_t+0x70>
}


void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    37bc:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_2:
		{
			if(patternNotSet)
    37be:	88 23       	and	r24, r24
    37c0:	69 f0       	breq	.+26     	; 0x37dc <_Z11setupForFoxP5Fox_t13EventAction_t+0x8e>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOI");
    37c2:	e9 ef       	ldi	r30, 0xF9	; 249
    37c4:	f4 e4       	ldi	r31, 0x44	; 68
    37c6:	8d e4       	ldi	r24, 0x4D	; 77
    37c8:	9f e4       	ldi	r25, 0x4F	; 79
    37ca:	80 83       	st	Z, r24
    37cc:	91 83       	std	Z+1, r25	; 0x01
    37ce:	89 e4       	ldi	r24, 0x49	; 73
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	82 83       	std	Z+2, r24	; 0x02
    37d4:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    37d6:	80 e0       	ldi	r24, 0x00	; 0
    37d8:	01 c0       	rjmp	.+2      	; 0x37dc <_Z11setupForFoxP5Fox_t13EventAction_t+0x8e>
}


void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    37da:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_3:
		{
			if(patternNotSet)
    37dc:	88 23       	and	r24, r24
    37de:	69 f0       	breq	.+26     	; 0x37fa <_Z11setupForFoxP5Fox_t13EventAction_t+0xac>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOS");
    37e0:	e9 ef       	ldi	r30, 0xF9	; 249
    37e2:	f4 e4       	ldi	r31, 0x44	; 68
    37e4:	8d e4       	ldi	r24, 0x4D	; 77
    37e6:	9f e4       	ldi	r25, 0x4F	; 79
    37e8:	80 83       	st	Z, r24
    37ea:	91 83       	std	Z+1, r25	; 0x01
    37ec:	83 e5       	ldi	r24, 0x53	; 83
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	82 83       	std	Z+2, r24	; 0x02
    37f2:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    37f4:	80 e0       	ldi	r24, 0x00	; 0
    37f6:	01 c0       	rjmp	.+2      	; 0x37fa <_Z11setupForFoxP5Fox_t13EventAction_t+0xac>
}


void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    37f8:	81 e0       	ldi	r24, 0x01	; 1
				patternNotSet = false;
			}
		}
		case FOX_4:
		{
			if(patternNotSet)
    37fa:	88 23       	and	r24, r24
    37fc:	69 f0       	breq	.+26     	; 0x3818 <_Z11setupForFoxP5Fox_t13EventAction_t+0xca>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MOH");
    37fe:	e9 ef       	ldi	r30, 0xF9	; 249
    3800:	f4 e4       	ldi	r31, 0x44	; 68
    3802:	8d e4       	ldi	r24, 0x4D	; 77
    3804:	9f e4       	ldi	r25, 0x4F	; 79
    3806:	80 83       	st	Z, r24
    3808:	91 83       	std	Z+1, r25	; 0x01
    380a:	88 e4       	ldi	r24, 0x48	; 72
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	82 83       	std	Z+2, r24	; 0x02
    3810:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
    3812:	80 e0       	ldi	r24, 0x00	; 0
    3814:	01 c0       	rjmp	.+2      	; 0x3818 <_Z11setupForFoxP5Fox_t13EventAction_t+0xca>
}


void setupForFox(Fox_t* fox, EventAction_t action)
{
	bool patternNotSet = true;
    3816:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		case FOX_5:
		{
			/* Set the Morse code pattern and speed */
			if(patternNotSet)
    3818:	88 23       	and	r24, r24
    381a:	51 f0       	breq	.+20     	; 0x3830 <_Z11setupForFoxP5Fox_t13EventAction_t+0xe2>
			{
				sprintf(g_messages_text[PATTERN_TEXT], "MO5");
    381c:	e9 ef       	ldi	r30, 0xF9	; 249
    381e:	f4 e4       	ldi	r31, 0x44	; 68
    3820:	8d e4       	ldi	r24, 0x4D	; 77
    3822:	9f e4       	ldi	r25, 0x4F	; 79
    3824:	80 83       	st	Z, r24
    3826:	91 83       	std	Z+1, r25	; 0x01
    3828:	85 e3       	ldi	r24, 0x35	; 53
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	82 83       	std	Z+2, r24	; 0x02
    382e:	93 83       	std	Z+3, r25	; 0x03
				patternNotSet = false;
			}
			
			BOOL repeat = TRUE;
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	89 83       	std	Y+1, r24	; 0x01
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    3834:	40 e0       	ldi	r20, 0x00	; 0
    3836:	50 e0       	ldi	r21, 0x00	; 0
    3838:	be 01       	movw	r22, r28
    383a:	6f 5f       	subi	r22, 0xFF	; 255
    383c:	7f 4f       	sbci	r23, 0xFF	; 255
    383e:	89 ef       	ldi	r24, 0xF9	; 249
    3840:	94 e4       	ldi	r25, 0x44	; 68
    3842:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <_Z9makeMorsePcPhS0_>
			g_code_throttle = throttleValue(g_pattern_codespeed);
    3846:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    384a:	0e 94 9a 19 	call	0x3334	; 0x3334 <_Z13throttleValueh>
    384e:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    3852:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

			g_on_air_seconds = 60;						/* on period is very long */
    3856:	8c e3       	ldi	r24, 0x3C	; 60
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    385e:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
			g_off_air_seconds = 240;                    /* off period is very short */
    3862:	80 ef       	ldi	r24, 0xF0	; 240
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <g_off_air_seconds>
    386a:	90 93 10 40 	sts	0x4010, r25	; 0x804010 <g_off_air_seconds+0x1>
			g_event_commenced = FALSE;                   /* get things running immediately */
    386e:	10 92 30 45 	sts	0x4530, r1	; 0x804530 <g_event_commenced>
			g_event_enabled = FALSE;                     /* get things running immediately */
    3872:	10 92 2f 45 	sts	0x452F, r1	; 0x80452f <g_event_enabled>
// 			g_cycle_period_seconds = g_id_interval_seconds;
		}
		break;
	}

	if(action == START_NOTHING)
    3876:	11 11       	cpse	r17, r1
    3878:	0a c0       	rjmp	.+20     	; 0x388e <_Z11setupForFoxP5Fox_t13EventAction_t+0x140>
	{
		g_event_commenced = FALSE;                   /* get things running immediately */
    387a:	10 92 30 45 	sts	0x4530, r1	; 0x804530 <g_event_commenced>
		g_event_enabled = FALSE;                     /* get things running immediately */
    387e:	10 92 2f 45 	sts	0x452F, r1	; 0x80452f <g_event_enabled>

 		g_use_rtc_for_startstop = FALSE;
    3882:	10 92 59 45 	sts	0x4559, r1	; 0x804559 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = TRUE;
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
    388c:	61 c0       	rjmp	.+194    	; 0x3950 <_Z11setupForFoxP5Fox_t13EventAction_t+0x202>
	}
	else if(action == START_EVENT_NOW)
    388e:	11 30       	cpi	r17, 0x01	; 1
    3890:	29 f4       	brne	.+10     	; 0x389c <_Z11setupForFoxP5Fox_t13EventAction_t+0x14e>
	{
// 		g_seconds_since_sync = 0;                                               /* Total elapsed time since synchronization */
 		g_use_rtc_for_startstop = FALSE;
    3892:	10 92 59 45 	sts	0x4559, r1	; 0x804559 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = FALSE;
    3896:	10 92 1c 40 	sts	0x401C, r1	; 0x80401c <g_transmissions_disabled>
    389a:	5a c0       	rjmp	.+180    	; 0x3950 <_Z11setupForFoxP5Fox_t13EventAction_t+0x202>
	}
	else if(action == START_TRANSMISSIONS_NOW)                                  /* Immediately start transmitting, regardless RTC or time slot */
    389c:	12 30       	cpi	r17, 0x02	; 2
    389e:	09 f0       	breq	.+2      	; 0x38a2 <_Z11setupForFoxP5Fox_t13EventAction_t+0x154>
    38a0:	52 c0       	rjmp	.+164    	; 0x3946 <_Z11setupForFoxP5Fox_t13EventAction_t+0x1f8>
	{
		BOOL repeat = TRUE;
    38a2:	11 e0       	ldi	r17, 0x01	; 1
    38a4:	19 83       	std	Y+1, r17	; 0x01
		makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    38a6:	40 e0       	ldi	r20, 0x00	; 0
    38a8:	50 e0       	ldi	r21, 0x00	; 0
    38aa:	be 01       	movw	r22, r28
    38ac:	6f 5f       	subi	r22, 0xFF	; 255
    38ae:	7f 4f       	sbci	r23, 0xFF	; 255
    38b0:	89 ef       	ldi	r24, 0xF9	; 249
    38b2:	94 e4       	ldi	r25, 0x44	; 68
    38b4:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <_Z9makeMorsePcPhS0_>
		g_code_throttle = throttleValue(g_pattern_codespeed);
    38b8:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <g_pattern_codespeed>
    38bc:	0e 94 9a 19 	call	0x3334	; 0x3334 <_Z13throttleValueh>
    38c0:	80 93 07 40 	sts	0x4007, r24	; 0x804007 <_ZL15g_code_throttle>
    38c4:	90 93 08 40 	sts	0x4008, r25	; 0x804008 <_ZL15g_code_throttle+0x1>

		g_event_start_time = 1;                     /* have it start a long time ago */
    38c8:	81 e0       	ldi	r24, 0x01	; 1
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	a0 e0       	ldi	r26, 0x00	; 0
    38ce:	b0 e0       	ldi	r27, 0x00	; 0
    38d0:	80 93 27 45 	sts	0x4527, r24	; 0x804527 <g_event_start_time>
    38d4:	90 93 28 45 	sts	0x4528, r25	; 0x804528 <g_event_start_time+0x1>
    38d8:	a0 93 29 45 	sts	0x4529, r26	; 0x804529 <g_event_start_time+0x2>
    38dc:	b0 93 2a 45 	sts	0x452A, r27	; 0x80452a <g_event_start_time+0x3>
		g_event_finish_time = MAX_TIME;             /* run for a long long time */
    38e0:	8f ef       	ldi	r24, 0xFF	; 255
    38e2:	9f ef       	ldi	r25, 0xFF	; 255
    38e4:	dc 01       	movw	r26, r24
    38e6:	80 93 2b 45 	sts	0x452B, r24	; 0x80452b <g_event_finish_time>
    38ea:	90 93 2c 45 	sts	0x452C, r25	; 0x80452c <g_event_finish_time+0x1>
    38ee:	a0 93 2d 45 	sts	0x452D, r26	; 0x80452d <g_event_finish_time+0x2>
    38f2:	b0 93 2e 45 	sts	0x452E, r27	; 0x80452e <g_event_finish_time+0x3>
		g_on_air_seconds = 60;						/* on period is very long */
    38f6:	8c e3       	ldi	r24, 0x3C	; 60
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	80 93 0d 40 	sts	0x400D, r24	; 0x80400d <g_on_air_seconds>
    38fe:	90 93 0e 40 	sts	0x400E, r25	; 0x80400e <g_on_air_seconds+0x1>
		g_off_air_seconds = 240;                    /* off period is very short */
    3902:	20 ef       	ldi	r18, 0xF0	; 240
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	20 93 0f 40 	sts	0x400F, r18	; 0x80400f <g_off_air_seconds>
    390a:	30 93 10 40 	sts	0x4010, r19	; 0x804010 <g_off_air_seconds+0x1>
		g_on_the_air = 9999;                        /* start out transmitting */
    390e:	4f e0       	ldi	r20, 0x0F	; 15
    3910:	57 e2       	ldi	r21, 0x27	; 39
    3912:	60 e0       	ldi	r22, 0x00	; 0
    3914:	70 e0       	ldi	r23, 0x00	; 0
    3916:	40 93 ef 44 	sts	0x44EF, r20	; 0x8044ef <_ZL12g_on_the_air>
    391a:	50 93 f0 44 	sts	0x44F0, r21	; 0x8044f0 <_ZL12g_on_the_air+0x1>
    391e:	60 93 f1 44 	sts	0x44F1, r22	; 0x8044f1 <_ZL12g_on_the_air+0x2>
    3922:	70 93 f2 44 	sts	0x44F2, r23	; 0x8044f2 <_ZL12g_on_the_air+0x3>
		g_sendID_seconds_countdown = 60;			/* wait a long time to send the ID */
    3926:	80 93 f3 44 	sts	0x44F3, r24	; 0x8044f3 <_ZL26g_sendID_seconds_countdown>
    392a:	90 93 f4 44 	sts	0x44F4, r25	; 0x8044f4 <_ZL26g_sendID_seconds_countdown+0x1>
		g_event_commenced = TRUE;                   /* get things running immediately */
    392e:	10 93 30 45 	sts	0x4530, r17	; 0x804530 <g_event_commenced>
		g_event_enabled = TRUE;                     /* get things running immediately */
    3932:	10 93 2f 45 	sts	0x452F, r17	; 0x80452f <g_event_enabled>
		g_last_status_code = STATUS_CODE_EVENT_STARTED_NOW_TRANSMITTING;
    3936:	8d ef       	ldi	r24, 0xFD	; 253
    3938:	80 93 eb 44 	sts	0x44EB, r24	; 0x8044eb <_ZL18g_last_status_code>
		
// 		g_fox_counter = MAX(1, g_fox - g_fox_id_offset);
// 		g_seconds_since_sync = (g_fox_counter - 1) * g_on_air_interval_seconds; /* Total elapsed time since start of event */
 		g_use_rtc_for_startstop = FALSE;
    393c:	10 92 59 45 	sts	0x4559, r1	; 0x804559 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = FALSE;
    3940:	10 92 1c 40 	sts	0x401C, r1	; 0x80401c <g_transmissions_disabled>
    3944:	05 c0       	rjmp	.+10     	; 0x3950 <_Z11setupForFoxP5Fox_t13EventAction_t+0x202>
// 			{
// 				digitalWrite(PIN_PWDN, OFF); /* Turn off the radio until close to start time */
// 			}
 		}
 
 		g_use_rtc_for_startstop = TRUE;
    3946:	81 e0       	ldi	r24, 0x01	; 1
    3948:	80 93 59 45 	sts	0x4559, r24	; 0x804559 <g_use_rtc_for_startstop>
 		g_transmissions_disabled = TRUE;
    394c:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <g_transmissions_disabled>
// 	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
// 	g_sendAMmodulation = FALSE;
// 	g_LED_enunciating = FALSE;
// 	g_config_error = NULL_CONFIG;           /* Trigger a new configuration enunciation */

	sei();
    3950:	78 94       	sei
}
    3952:	0f 90       	pop	r0
    3954:	df 91       	pop	r29
    3956:	cf 91       	pop	r28
    3958:	1f 91       	pop	r17
    395a:	08 95       	ret

0000395c <_Z18validateTimeStringPcPma>:

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
    395c:	4f 92       	push	r4
    395e:	5f 92       	push	r5
    3960:	6f 92       	push	r6
    3962:	7f 92       	push	r7
    3964:	af 92       	push	r10
    3966:	bf 92       	push	r11
    3968:	cf 92       	push	r12
    396a:	df 92       	push	r13
    396c:	ef 92       	push	r14
    396e:	ff 92       	push	r15
    3970:	0f 93       	push	r16
    3972:	1f 93       	push	r17
    3974:	cf 93       	push	r28
    3976:	df 93       	push	r29
    3978:	8c 01       	movw	r16, r24
    397a:	a4 2e       	mov	r10, r20
	time_t valid = 0;
	int len = strlen(str);
    397c:	fc 01       	movw	r30, r24
    397e:	01 90       	ld	r0, Z+
    3980:	00 20       	and	r0, r0
    3982:	e9 f7       	brne	.-6      	; 0x397e <_Z18validateTimeStringPcPma+0x22>
    3984:	31 97       	sbiw	r30, 0x01	; 1
    3986:	ef 01       	movw	r28, r30
    3988:	c8 1b       	sub	r28, r24
    398a:	d9 0b       	sbc	r29, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
    398c:	25 e4       	ldi	r18, 0x45	; 69
    398e:	64 34       	cpi	r22, 0x44	; 68
    3990:	72 07       	cpc	r23, r18
    3992:	e1 f4       	brne	.+56     	; 0x39cc <_Z18validateTimeStringPcPma+0x70>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    3994:	c0 90 55 45 	lds	r12, 0x4555	; 0x804555 <g_current_epoch>
    3998:	d0 90 56 45 	lds	r13, 0x4556	; 0x804556 <g_current_epoch+0x1>
    399c:	e0 90 57 45 	lds	r14, 0x4557	; 0x804557 <g_current_epoch+0x2>
    39a0:	f0 90 58 45 	lds	r15, 0x4558	; 0x804558 <g_current_epoch+0x3>
    39a4:	c1 14       	cp	r12, r1
    39a6:	86 e6       	ldi	r24, 0x66	; 102
    39a8:	d8 06       	cpc	r13, r24
    39aa:	8e ee       	ldi	r24, 0xEE	; 238
    39ac:	e8 06       	cpc	r14, r24
    39ae:	8f e5       	ldi	r24, 0x5F	; 95
    39b0:	f8 06       	cpc	r15, r24
    39b2:	50 f5       	brcc	.+84     	; 0x3a08 <_Z18validateTimeStringPcPma+0xac>
		validationType = 1;
    39b4:	bb 24       	eor	r11, r11
    39b6:	b3 94       	inc	r11
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    39b8:	0f 2e       	mov	r0, r31
    39ba:	c1 2c       	mov	r12, r1
    39bc:	f6 e6       	ldi	r31, 0x66	; 102
    39be:	df 2e       	mov	r13, r31
    39c0:	fe ee       	ldi	r31, 0xEE	; 238
    39c2:	ef 2e       	mov	r14, r31
    39c4:	ff e5       	ldi	r31, 0x5F	; 95
    39c6:	ff 2e       	mov	r15, r31
    39c8:	f0 2d       	mov	r31, r0
    39ca:	2f c0       	rjmp	.+94     	; 0x3a2a <_Z18validateTimeStringPcPma+0xce>
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
    39cc:	68 54       	subi	r22, 0x48	; 72
    39ce:	75 44       	sbci	r23, 0x45	; 69
    39d0:	f1 f4       	brne	.+60     	; 0x3a0e <_Z18validateTimeStringPcPma+0xb2>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    39d2:	c0 90 44 45 	lds	r12, 0x4544	; 0x804544 <g_event_start_epoch>
    39d6:	d0 90 45 45 	lds	r13, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    39da:	e0 90 46 45 	lds	r14, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    39de:	f0 90 47 45 	lds	r15, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    39e2:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    39e6:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    39ea:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    39ee:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    39f2:	c8 16       	cp	r12, r24
    39f4:	d9 06       	cpc	r13, r25
    39f6:	ea 06       	cpc	r14, r26
    39f8:	fb 06       	cpc	r15, r27
    39fa:	a0 f4       	brcc	.+40     	; 0x3a24 <_Z18validateTimeStringPcPma+0xc8>
    39fc:	6c 01       	movw	r12, r24
    39fe:	7d 01       	movw	r14, r26
		validationType = 2;
    3a00:	68 94       	set
    3a02:	bb 24       	eor	r11, r11
    3a04:	b1 f8       	bld	r11, 1
    3a06:	11 c0       	rjmp	.+34     	; 0x3a2a <_Z18validateTimeStringPcPma+0xce>
	uint8_t validationType = 0;

	if(epochVar == &g_event_start_epoch)
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
    3a08:	bb 24       	eor	r11, r11
    3a0a:	b3 94       	inc	r11
    3a0c:	0e c0       	rjmp	.+28     	; 0x3a2a <_Z18validateTimeStringPcPma+0xce>
time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    3a0e:	b1 2c       	mov	r11, r1

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    3a10:	0f 2e       	mov	r0, r31
    3a12:	c1 2c       	mov	r12, r1
    3a14:	f6 e6       	ldi	r31, 0x66	; 102
    3a16:	df 2e       	mov	r13, r31
    3a18:	fe ee       	ldi	r31, 0xEE	; 238
    3a1a:	ef 2e       	mov	r14, r31
    3a1c:	ff e5       	ldi	r31, 0x5F	; 95
    3a1e:	ff 2e       	mov	r15, r31
    3a20:	f0 2d       	mov	r31, r0
    3a22:	03 c0       	rjmp	.+6      	; 0x3a2a <_Z18validateTimeStringPcPma+0xce>
		validationType = 1;
	}
	else if(epochVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
    3a24:	68 94       	set
    3a26:	bb 24       	eor	r11, r11
    3a28:	b1 f8       	bld	r11, 1
	}
	
	if(len == 10)
    3a2a:	ca 30       	cpi	r28, 0x0A	; 10
    3a2c:	d1 05       	cpc	r29, r1
    3a2e:	39 f4       	brne	.+14     	; 0x3a3e <_Z18validateTimeStringPcPma+0xe2>
	{
		str[10] = '0';
    3a30:	80 e3       	ldi	r24, 0x30	; 48
    3a32:	f8 01       	movw	r30, r16
    3a34:	82 87       	std	Z+10, r24	; 0x0a
		str[11] = '0';
    3a36:	83 87       	std	Z+11, r24	; 0x0b
		str[12] = '\0';
    3a38:	14 86       	std	Z+12, r1	; 0x0c
		len = 12;
    3a3a:	cc e0       	ldi	r28, 0x0C	; 12
    3a3c:	d0 e0       	ldi	r29, 0x00	; 0
	}

	if((len == 12) && (only_digits(str)))
    3a3e:	cc 30       	cpi	r28, 0x0C	; 12
    3a40:	d1 05       	cpc	r29, r1
    3a42:	39 f4       	brne	.+14     	; 0x3a52 <_Z18validateTimeStringPcPma+0xf6>
    3a44:	c8 01       	movw	r24, r16
    3a46:	0e 94 84 3d 	call	0x7b08	; 0x7b08 <_Z11only_digitsPc>
    3a4a:	88 23       	and	r24, r24
    3a4c:	21 f0       	breq	.+8      	; 0x3a56 <_Z18validateTimeStringPcPma+0xfa>
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	03 c0       	rjmp	.+6      	; 0x3a58 <_Z18validateTimeStringPcPma+0xfc>
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	01 c0       	rjmp	.+2      	; 0x3a58 <_Z18validateTimeStringPcPma+0xfc>
    3a56:	80 e0       	ldi	r24, 0x00	; 0
    3a58:	88 23       	and	r24, r24
    3a5a:	09 f4       	brne	.+2      	; 0x3a5e <_Z18validateTimeStringPcPma+0x102>
    3a5c:	4b c0       	rjmp	.+150    	; 0x3af4 <_Z18validateTimeStringPcPma+0x198>
	{
		time_t ep = RTC_String2Epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    3a5e:	b8 01       	movw	r22, r16
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	0e 94 69 24 	call	0x48d2	; 0x48d2 <RTC_String2Epoch>
    3a68:	2b 01       	movw	r4, r22
    3a6a:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    3a6c:	aa 2d       	mov	r26, r10
    3a6e:	aa 0c       	add	r10, r10
    3a70:	bb 0b       	sbc	r27, r27
    3a72:	20 e1       	ldi	r18, 0x10	; 16
    3a74:	3e e0       	ldi	r19, 0x0E	; 14
    3a76:	0e 94 62 40 	call	0x80c4	; 0x80c4 <__usmulhisi3>
    3a7a:	64 0d       	add	r22, r4
    3a7c:	75 1d       	adc	r23, r5
    3a7e:	86 1d       	adc	r24, r6
    3a80:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    3a82:	c6 16       	cp	r12, r22
    3a84:	d7 06       	cpc	r13, r23
    3a86:	e8 06       	cpc	r14, r24
    3a88:	f9 06       	cpc	r15, r25
    3a8a:	08 f4       	brcc	.+2      	; 0x3a8e <_Z18validateTimeStringPcPma+0x132>
    3a8c:	40 c0       	rjmp	.+128    	; 0x3b0e <_Z18validateTimeStringPcPma+0x1b2>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    3a8e:	f1 e0       	ldi	r31, 0x01	; 1
    3a90:	bf 12       	cpse	r11, r31
    3a92:	08 c0       	rjmp	.+16     	; 0x3aa4 <_Z18validateTimeStringPcPma+0x148>
			{
				sb_send_string(TEXT_ERR_START_IN_PAST_TXT);
    3a94:	85 e1       	ldi	r24, 0x15	; 21
    3a96:	93 e4       	ldi	r25, 0x43	; 67
    3a98:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3a9c:	60 e0       	ldi	r22, 0x00	; 0
    3a9e:	70 e0       	ldi	r23, 0x00	; 0
    3aa0:	cb 01       	movw	r24, r22
    3aa2:	35 c0       	rjmp	.+106    	; 0x3b0e <_Z18validateTimeStringPcPma+0x1b2>
		{
			if(validationType == 1)         /* start time validation */
			{
				sb_send_string(TEXT_ERR_START_IN_PAST_TXT);
			}
			else if(validationType == 2)    /* finish time validation */
    3aa4:	22 e0       	ldi	r18, 0x02	; 2
    3aa6:	b2 12       	cpse	r11, r18
    3aa8:	1d c0       	rjmp	.+58     	; 0x3ae4 <_Z18validateTimeStringPcPma+0x188>
			{
				if(ep < g_current_epoch)
    3aaa:	00 91 55 45 	lds	r16, 0x4555	; 0x804555 <g_current_epoch>
    3aae:	10 91 56 45 	lds	r17, 0x4556	; 0x804556 <g_current_epoch+0x1>
    3ab2:	20 91 57 45 	lds	r18, 0x4557	; 0x804557 <g_current_epoch+0x2>
    3ab6:	30 91 58 45 	lds	r19, 0x4558	; 0x804558 <g_current_epoch+0x3>
    3aba:	60 17       	cp	r22, r16
    3abc:	71 07       	cpc	r23, r17
    3abe:	82 07       	cpc	r24, r18
    3ac0:	93 07       	cpc	r25, r19
    3ac2:	40 f4       	brcc	.+16     	; 0x3ad4 <_Z18validateTimeStringPcPma+0x178>
				{
					sb_send_string(TEXT_ERR_FINISH_IN_PAST_TXT);
    3ac4:	8a e2       	ldi	r24, 0x2A	; 42
    3ac6:	93 e4       	ldi	r25, 0x43	; 67
    3ac8:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3acc:	60 e0       	ldi	r22, 0x00	; 0
    3ace:	70 e0       	ldi	r23, 0x00	; 0
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	1d c0       	rjmp	.+58     	; 0x3b0e <_Z18validateTimeStringPcPma+0x1b2>
				{
					sb_send_string(TEXT_ERR_FINISH_IN_PAST_TXT);
				}
				else
				{
					sb_send_string(TEXT_ERR_FINISH_BEFORE_START_TXT);
    3ad4:	80 e4       	ldi	r24, 0x40	; 64
    3ad6:	93 e4       	ldi	r25, 0x43	; 67
    3ad8:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3adc:	60 e0       	ldi	r22, 0x00	; 0
    3ade:	70 e0       	ldi	r23, 0x00	; 0
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	15 c0       	rjmp	.+42     	; 0x3b0e <_Z18validateTimeStringPcPma+0x1b2>
					sb_send_string(TEXT_ERR_FINISH_BEFORE_START_TXT);
				}
			}
			else    /* current time validation */
			{
				sb_send_string(TEXT_ERR_TIME_IN_PAST_TXT);
    3ae4:	8b e5       	ldi	r24, 0x5B	; 91
    3ae6:	93 e4       	ldi	r25, 0x43	; 67
    3ae8:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3aec:	60 e0       	ldi	r22, 0x00	; 0
    3aee:	70 e0       	ldi	r23, 0x00	; 0
    3af0:	cb 01       	movw	r24, r22
    3af2:	0d c0       	rjmp	.+26     	; 0x3b0e <_Z18validateTimeStringPcPma+0x1b2>
			{
				sb_send_string(TEXT_ERR_TIME_IN_PAST_TXT);
			}
		}
	}
	else if(len)
    3af4:	cd 2b       	or	r28, r29
    3af6:	41 f0       	breq	.+16     	; 0x3b08 <_Z18validateTimeStringPcPma+0x1ac>
	{
		sb_send_string(TEXT_ERR_INVALID_TIME_TXT);
    3af8:	8f e6       	ldi	r24, 0x6F	; 111
    3afa:	93 e4       	ldi	r25, 0x43	; 67
    3afc:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
	sei();
}

time_t validateTimeString(char* str, time_t* epochVar, int8_t offsetHours)
{
	time_t valid = 0;
    3b00:	60 e0       	ldi	r22, 0x00	; 0
    3b02:	70 e0       	ldi	r23, 0x00	; 0
    3b04:	cb 01       	movw	r24, r22
    3b06:	03 c0       	rjmp	.+6      	; 0x3b0e <_Z18validateTimeStringPcPma+0x1b2>
    3b08:	60 e0       	ldi	r22, 0x00	; 0
    3b0a:	70 e0       	ldi	r23, 0x00	; 0
    3b0c:	cb 01       	movw	r24, r22
	{
		sb_send_string(TEXT_ERR_INVALID_TIME_TXT);
	}

	return(valid);
}
    3b0e:	df 91       	pop	r29
    3b10:	cf 91       	pop	r28
    3b12:	1f 91       	pop	r17
    3b14:	0f 91       	pop	r16
    3b16:	ff 90       	pop	r15
    3b18:	ef 90       	pop	r14
    3b1a:	df 90       	pop	r13
    3b1c:	cf 90       	pop	r12
    3b1e:	bf 90       	pop	r11
    3b20:	af 90       	pop	r10
    3b22:	7f 90       	pop	r7
    3b24:	6f 90       	pop	r6
    3b26:	5f 90       	pop	r5
    3b28:	4f 90       	pop	r4
    3b2a:	08 95       	ret

00003b2c <_Z14reportTimeTillmmPKcS0_>:


BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    3b2c:	2f 92       	push	r2
    3b2e:	3f 92       	push	r3
    3b30:	4f 92       	push	r4
    3b32:	5f 92       	push	r5
    3b34:	6f 92       	push	r6
    3b36:	7f 92       	push	r7
    3b38:	8f 92       	push	r8
    3b3a:	9f 92       	push	r9
    3b3c:	af 92       	push	r10
    3b3e:	bf 92       	push	r11
    3b40:	cf 92       	push	r12
    3b42:	df 92       	push	r13
    3b44:	ef 92       	push	r14
    3b46:	ff 92       	push	r15
    3b48:	0f 93       	push	r16
    3b4a:	1f 93       	push	r17
    3b4c:	cf 93       	push	r28
    3b4e:	df 93       	push	r29
    3b50:	cd b7       	in	r28, 0x3d	; 61
    3b52:	de b7       	in	r29, 0x3e	; 62
    3b54:	2c 97       	sbiw	r28, 0x0c	; 12
    3b56:	cd bf       	out	0x3d, r28	; 61
    3b58:	de bf       	out	0x3e, r29	; 62
    3b5a:	2b 01       	movw	r4, r22
    3b5c:	3c 01       	movw	r6, r24
    3b5e:	49 01       	movw	r8, r18
    3b60:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    3b62:	62 17       	cp	r22, r18
    3b64:	73 07       	cpc	r23, r19
    3b66:	84 07       	cpc	r24, r20
    3b68:	95 07       	cpc	r25, r21
    3b6a:	48 f0       	brcs	.+18     	; 0x3b7e <_Z14reportTimeTillmmPKcS0_+0x52>
	{
		failure = TRUE;
		if(failMsg)
    3b6c:	e1 14       	cp	r14, r1
    3b6e:	f1 04       	cpc	r15, r1
    3b70:	09 f4       	brne	.+2      	; 0x3b74 <_Z14reportTimeTillmmPKcS0_+0x48>
    3b72:	fd c0       	rjmp	.+506    	; 0x3d6e <_Z14reportTimeTillmmPKcS0_+0x242>
		{
			sb_send_string((char*)failMsg);
    3b74:	c7 01       	movw	r24, r14
    3b76:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	f9 c0       	rjmp	.+498    	; 0x3d70 <_Z14reportTimeTillmmPKcS0_+0x244>
			sb_send_string((char*)failMsg);
		}
	}
	else
	{
		if(prefix)
    3b7e:	01 15       	cp	r16, r1
    3b80:	11 05       	cpc	r17, r1
    3b82:	19 f0       	breq	.+6      	; 0x3b8a <_Z14reportTimeTillmmPKcS0_+0x5e>
		{
			sb_send_string((char*)prefix);
    3b84:	c8 01       	movw	r24, r16
    3b86:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
		}
		time_t dif = until - from;
    3b8a:	75 01       	movw	r14, r10
    3b8c:	64 01       	movw	r12, r8
    3b8e:	c4 18       	sub	r12, r4
    3b90:	d5 08       	sbc	r13, r5
    3b92:	e6 08       	sbc	r14, r6
    3b94:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    3b96:	c7 01       	movw	r24, r14
    3b98:	b6 01       	movw	r22, r12
    3b9a:	20 e8       	ldi	r18, 0x80	; 128
    3b9c:	33 e3       	ldi	r19, 0x33	; 51
    3b9e:	41 ee       	ldi	r20, 0xE1	; 225
    3ba0:	51 e0       	ldi	r21, 0x01	; 1
    3ba2:	0e 94 09 40 	call	0x8012	; 0x8012 <__udivmodsi4>
    3ba6:	29 01       	movw	r4, r18
    3ba8:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    3baa:	44 27       	eor	r20, r20
    3bac:	55 27       	eor	r21, r21
    3bae:	60 e8       	ldi	r22, 0x80	; 128
    3bb0:	73 e3       	ldi	r23, 0x33	; 51
    3bb2:	81 ee       	ldi	r24, 0xE1	; 225
    3bb4:	91 e0       	ldi	r25, 0x01	; 1
    3bb6:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__mulsi3>
    3bba:	c6 1a       	sub	r12, r22
    3bbc:	d7 0a       	sbc	r13, r23
    3bbe:	e8 0a       	sbc	r14, r24
    3bc0:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    3bc2:	c7 01       	movw	r24, r14
    3bc4:	b6 01       	movw	r22, r12
    3bc6:	20 e8       	ldi	r18, 0x80	; 128
    3bc8:	31 e5       	ldi	r19, 0x51	; 81
    3bca:	41 e0       	ldi	r20, 0x01	; 1
    3bcc:	50 e0       	ldi	r21, 0x00	; 0
    3bce:	0e 94 09 40 	call	0x8012	; 0x8012 <__udivmodsi4>
    3bd2:	49 01       	movw	r8, r18
    3bd4:	5a 01       	movw	r10, r20
    3bd6:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    3bd8:	44 27       	eor	r20, r20
    3bda:	55 27       	eor	r21, r21
    3bdc:	60 e8       	ldi	r22, 0x80	; 128
    3bde:	71 e5       	ldi	r23, 0x51	; 81
    3be0:	81 e0       	ldi	r24, 0x01	; 1
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__mulsi3>
    3be8:	c6 1a       	sub	r12, r22
    3bea:	d7 0a       	sbc	r13, r23
    3bec:	e8 0a       	sbc	r14, r24
    3bee:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    3bf0:	c7 01       	movw	r24, r14
    3bf2:	b6 01       	movw	r22, r12
    3bf4:	20 e1       	ldi	r18, 0x10	; 16
    3bf6:	3e e0       	ldi	r19, 0x0E	; 14
    3bf8:	40 e0       	ldi	r20, 0x00	; 0
    3bfa:	50 e0       	ldi	r21, 0x00	; 0
    3bfc:	0e 94 09 40 	call	0x8012	; 0x8012 <__udivmodsi4>
    3c00:	29 83       	std	Y+1, r18	; 0x01
    3c02:	3a 83       	std	Y+2, r19	; 0x02
    3c04:	4b 83       	std	Y+3, r20	; 0x03
    3c06:	5c 83       	std	Y+4, r21	; 0x04
    3c08:	29 81       	ldd	r18, Y+1	; 0x01
    3c0a:	3a 81       	ldd	r19, Y+2	; 0x02
    3c0c:	29 87       	std	Y+9, r18	; 0x09
    3c0e:	3a 87       	std	Y+10, r19	; 0x0a
		hold -= (hours * HOUR);
    3c10:	29 81       	ldd	r18, Y+1	; 0x01
    3c12:	3a 81       	ldd	r19, Y+2	; 0x02
    3c14:	4b 81       	ldd	r20, Y+3	; 0x03
    3c16:	5c 81       	ldd	r21, Y+4	; 0x04
    3c18:	44 27       	eor	r20, r20
    3c1a:	55 27       	eor	r21, r21
    3c1c:	a0 e1       	ldi	r26, 0x10	; 16
    3c1e:	be e0       	ldi	r27, 0x0E	; 14
    3c20:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__muluhisi3>
    3c24:	c6 1a       	sub	r12, r22
    3c26:	d7 0a       	sbc	r13, r23
    3c28:	e8 0a       	sbc	r14, r24
    3c2a:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    3c2c:	c7 01       	movw	r24, r14
    3c2e:	b6 01       	movw	r22, r12
    3c30:	2c e3       	ldi	r18, 0x3C	; 60
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	40 e0       	ldi	r20, 0x00	; 0
    3c36:	50 e0       	ldi	r21, 0x00	; 0
    3c38:	0e 94 09 40 	call	0x8012	; 0x8012 <__udivmodsi4>
    3c3c:	2d 83       	std	Y+5, r18	; 0x05
    3c3e:	3e 83       	std	Y+6, r19	; 0x06
    3c40:	4f 83       	std	Y+7, r20	; 0x07
    3c42:	58 87       	std	Y+8, r21	; 0x08
    3c44:	0d 81       	ldd	r16, Y+5	; 0x05
    3c46:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    3c48:	2c e3       	ldi	r18, 0x3C	; 60
    3c4a:	20 9f       	mul	r18, r16
    3c4c:	c0 01       	movw	r24, r0
    3c4e:	21 9f       	mul	r18, r17
    3c50:	90 0d       	add	r25, r0
    3c52:	11 24       	eor	r1, r1
    3c54:	a6 01       	movw	r20, r12
    3c56:	48 1b       	sub	r20, r24
    3c58:	59 0b       	sbc	r21, r25
    3c5a:	4b 87       	std	Y+11, r20	; 0x0b
    3c5c:	5c 87       	std	Y+12, r21	; 0x0c

		g_tempStr[0] = '\0';
    3c5e:	10 92 d5 44 	sts	0x44D5, r1	; 0x8044d5 <_ZL9g_tempStr>

		if(years)
    3c62:	41 14       	cp	r4, r1
    3c64:	51 04       	cpc	r5, r1
    3c66:	b1 f0       	breq	.+44     	; 0x3c94 <_Z14reportTimeTillmmPKcS0_+0x168>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    3c68:	5f 92       	push	r5
    3c6a:	4f 92       	push	r4
    3c6c:	83 e8       	ldi	r24, 0x83	; 131
    3c6e:	93 e4       	ldi	r25, 0x43	; 67
    3c70:	9f 93       	push	r25
    3c72:	8f 93       	push	r24
    3c74:	85 ed       	ldi	r24, 0xD5	; 213
    3c76:	94 e4       	ldi	r25, 0x44	; 68
    3c78:	9f 93       	push	r25
    3c7a:	8f 93       	push	r24
    3c7c:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
			sb_send_string(g_tempStr);
    3c80:	85 ed       	ldi	r24, 0xD5	; 213
    3c82:	94 e4       	ldi	r25, 0x44	; 68
    3c84:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    3c88:	0f 90       	pop	r0
    3c8a:	0f 90       	pop	r0
    3c8c:	0f 90       	pop	r0
    3c8e:	0f 90       	pop	r0
    3c90:	0f 90       	pop	r0
    3c92:	0f 90       	pop	r0
		}

		if(days)
    3c94:	23 28       	or	r2, r3
    3c96:	b1 f0       	breq	.+44     	; 0x3cc4 <_Z14reportTimeTillmmPKcS0_+0x198>
		{
			sprintf(g_tempStr, "%d days ", days);
    3c98:	9f 92       	push	r9
    3c9a:	8f 92       	push	r8
    3c9c:	8b e8       	ldi	r24, 0x8B	; 139
    3c9e:	93 e4       	ldi	r25, 0x43	; 67
    3ca0:	9f 93       	push	r25
    3ca2:	8f 93       	push	r24
    3ca4:	85 ed       	ldi	r24, 0xD5	; 213
    3ca6:	94 e4       	ldi	r25, 0x44	; 68
    3ca8:	9f 93       	push	r25
    3caa:	8f 93       	push	r24
    3cac:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
			sb_send_string(g_tempStr);
    3cb0:	85 ed       	ldi	r24, 0xD5	; 213
    3cb2:	94 e4       	ldi	r25, 0x44	; 68
    3cb4:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    3cb8:	0f 90       	pop	r0
    3cba:	0f 90       	pop	r0
    3cbc:	0f 90       	pop	r0
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	0f 90       	pop	r0
		}

		if(hours)
    3cc4:	89 85       	ldd	r24, Y+9	; 0x09
    3cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc8:	89 2b       	or	r24, r25
    3cca:	c1 f0       	breq	.+48     	; 0x3cfc <_Z14reportTimeTillmmPKcS0_+0x1d0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    3ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cce:	9f 93       	push	r25
    3cd0:	e9 81       	ldd	r30, Y+1	; 0x01
    3cd2:	ef 93       	push	r30
    3cd4:	84 e9       	ldi	r24, 0x94	; 148
    3cd6:	93 e4       	ldi	r25, 0x43	; 67
    3cd8:	9f 93       	push	r25
    3cda:	8f 93       	push	r24
    3cdc:	85 ed       	ldi	r24, 0xD5	; 213
    3cde:	94 e4       	ldi	r25, 0x44	; 68
    3ce0:	9f 93       	push	r25
    3ce2:	8f 93       	push	r24
    3ce4:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
			sb_send_string(g_tempStr);
    3ce8:	85 ed       	ldi	r24, 0xD5	; 213
    3cea:	94 e4       	ldi	r25, 0x44	; 68
    3cec:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    3cf0:	0f 90       	pop	r0
    3cf2:	0f 90       	pop	r0
    3cf4:	0f 90       	pop	r0
    3cf6:	0f 90       	pop	r0
    3cf8:	0f 90       	pop	r0
    3cfa:	0f 90       	pop	r0
		}

		if(minutes)
    3cfc:	01 2b       	or	r16, r17
    3cfe:	c1 f0       	breq	.+48     	; 0x3d30 <_Z14reportTimeTillmmPKcS0_+0x204>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    3d00:	fe 81       	ldd	r31, Y+6	; 0x06
    3d02:	ff 93       	push	r31
    3d04:	2d 81       	ldd	r18, Y+5	; 0x05
    3d06:	2f 93       	push	r18
    3d08:	8c e9       	ldi	r24, 0x9C	; 156
    3d0a:	93 e4       	ldi	r25, 0x43	; 67
    3d0c:	9f 93       	push	r25
    3d0e:	8f 93       	push	r24
    3d10:	85 ed       	ldi	r24, 0xD5	; 213
    3d12:	94 e4       	ldi	r25, 0x44	; 68
    3d14:	9f 93       	push	r25
    3d16:	8f 93       	push	r24
    3d18:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
			sb_send_string(g_tempStr);
    3d1c:	85 ed       	ldi	r24, 0xD5	; 213
    3d1e:	94 e4       	ldi	r25, 0x44	; 68
    3d20:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    3d24:	0f 90       	pop	r0
    3d26:	0f 90       	pop	r0
    3d28:	0f 90       	pop	r0
    3d2a:	0f 90       	pop	r0
    3d2c:	0f 90       	pop	r0
    3d2e:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    3d30:	3c 85       	ldd	r19, Y+12	; 0x0c
    3d32:	3f 93       	push	r19
    3d34:	4b 85       	ldd	r20, Y+11	; 0x0b
    3d36:	4f 93       	push	r20
    3d38:	84 ea       	ldi	r24, 0xA4	; 164
    3d3a:	93 e4       	ldi	r25, 0x43	; 67
    3d3c:	9f 93       	push	r25
    3d3e:	8f 93       	push	r24
    3d40:	85 ed       	ldi	r24, 0xD5	; 213
    3d42:	94 e4       	ldi	r25, 0x44	; 68
    3d44:	9f 93       	push	r25
    3d46:	8f 93       	push	r24
    3d48:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
		sb_send_string(g_tempStr);
    3d4c:	85 ed       	ldi	r24, 0xD5	; 213
    3d4e:	94 e4       	ldi	r25, 0x44	; 68
    3d50:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>

		sb_send_NewLine();
    3d54:	0e 94 8a 32 	call	0x6514	; 0x6514 <sb_send_NewLine>
		g_tempStr[0] = '\0';
    3d58:	e5 ed       	ldi	r30, 0xD5	; 213
    3d5a:	f4 e4       	ldi	r31, 0x44	; 68
    3d5c:	10 82       	st	Z, r1
    3d5e:	0f 90       	pop	r0
    3d60:	0f 90       	pop	r0
    3d62:	0f 90       	pop	r0
    3d64:	0f 90       	pop	r0
    3d66:	0f 90       	pop	r0
    3d68:	0f 90       	pop	r0
}


BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	BOOL failure = FALSE;
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
    3d6c:	01 c0       	rjmp	.+2      	; 0x3d70 <_Z14reportTimeTillmmPKcS0_+0x244>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
		sb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    3d70:	2c 96       	adiw	r28, 0x0c	; 12
    3d72:	cd bf       	out	0x3d, r28	; 61
    3d74:	de bf       	out	0x3e, r29	; 62
    3d76:	df 91       	pop	r29
    3d78:	cf 91       	pop	r28
    3d7a:	1f 91       	pop	r17
    3d7c:	0f 91       	pop	r16
    3d7e:	ff 90       	pop	r15
    3d80:	ef 90       	pop	r14
    3d82:	df 90       	pop	r13
    3d84:	cf 90       	pop	r12
    3d86:	bf 90       	pop	r11
    3d88:	af 90       	pop	r10
    3d8a:	9f 90       	pop	r9
    3d8c:	8f 90       	pop	r8
    3d8e:	7f 90       	pop	r7
    3d90:	6f 90       	pop	r6
    3d92:	5f 90       	pop	r5
    3d94:	4f 90       	pop	r4
    3d96:	3f 90       	pop	r3
    3d98:	2f 90       	pop	r2
    3d9a:	08 95       	ret

00003d9c <_Z23clockConfigurationCheckv>:



ConfigurationState_t clockConfigurationCheck(void)
{
    3d9c:	0f 93       	push	r16
    3d9e:	1f 93       	push	r17
	if((g_event_finish_epoch < MINIMUM_EPOCH) || (g_event_start_epoch < MINIMUM_EPOCH) || (g_current_epoch < MINIMUM_EPOCH))
    3da0:	80 91 48 45 	lds	r24, 0x4548	; 0x804548 <g_event_finish_epoch>
    3da4:	90 91 49 45 	lds	r25, 0x4549	; 0x804549 <g_event_finish_epoch+0x1>
    3da8:	a0 91 4a 45 	lds	r26, 0x454A	; 0x80454a <g_event_finish_epoch+0x2>
    3dac:	b0 91 4b 45 	lds	r27, 0x454B	; 0x80454b <g_event_finish_epoch+0x3>
    3db0:	81 15       	cp	r24, r1
    3db2:	26 e6       	ldi	r18, 0x66	; 102
    3db4:	92 07       	cpc	r25, r18
    3db6:	2e ee       	ldi	r18, 0xEE	; 238
    3db8:	a2 07       	cpc	r26, r18
    3dba:	2f e5       	ldi	r18, 0x5F	; 95
    3dbc:	b2 07       	cpc	r27, r18
    3dbe:	d8 f1       	brcs	.+118    	; 0x3e36 <_Z23clockConfigurationCheckv+0x9a>
    3dc0:	40 91 44 45 	lds	r20, 0x4544	; 0x804544 <g_event_start_epoch>
    3dc4:	50 91 45 45 	lds	r21, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    3dc8:	60 91 46 45 	lds	r22, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    3dcc:	70 91 47 45 	lds	r23, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    3dd0:	41 15       	cp	r20, r1
    3dd2:	e6 e6       	ldi	r30, 0x66	; 102
    3dd4:	5e 07       	cpc	r21, r30
    3dd6:	ee ee       	ldi	r30, 0xEE	; 238
    3dd8:	6e 07       	cpc	r22, r30
    3dda:	ef e5       	ldi	r30, 0x5F	; 95
    3ddc:	7e 07       	cpc	r23, r30
    3dde:	68 f1       	brcs	.+90     	; 0x3e3a <_Z23clockConfigurationCheckv+0x9e>
    3de0:	00 91 55 45 	lds	r16, 0x4555	; 0x804555 <g_current_epoch>
    3de4:	10 91 56 45 	lds	r17, 0x4556	; 0x804556 <g_current_epoch+0x1>
    3de8:	20 91 57 45 	lds	r18, 0x4557	; 0x804557 <g_current_epoch+0x2>
    3dec:	30 91 58 45 	lds	r19, 0x4558	; 0x804558 <g_current_epoch+0x3>
    3df0:	01 15       	cp	r16, r1
    3df2:	e6 e6       	ldi	r30, 0x66	; 102
    3df4:	1e 07       	cpc	r17, r30
    3df6:	ee ee       	ldi	r30, 0xEE	; 238
    3df8:	2e 07       	cpc	r18, r30
    3dfa:	ef e5       	ldi	r30, 0x5F	; 95
    3dfc:	3e 07       	cpc	r19, r30
    3dfe:	f8 f0       	brcs	.+62     	; 0x3e3e <_Z23clockConfigurationCheckv+0xa2>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_event_finish_epoch <= g_event_start_epoch) /* Event configured to finish before it started */
    3e00:	48 17       	cp	r20, r24
    3e02:	59 07       	cpc	r21, r25
    3e04:	6a 07       	cpc	r22, r26
    3e06:	7b 07       	cpc	r23, r27
    3e08:	e0 f4       	brcc	.+56     	; 0x3e42 <_Z23clockConfigurationCheckv+0xa6>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_current_epoch > g_event_finish_epoch)  /* The scheduled event is over */
    3e0a:	80 17       	cp	r24, r16
    3e0c:	91 07       	cpc	r25, r17
    3e0e:	a2 07       	cpc	r26, r18
    3e10:	b3 07       	cpc	r27, r19
    3e12:	c8 f0       	brcs	.+50     	; 0x3e46 <_Z23clockConfigurationCheckv+0xaa>
	{
		return(CONFIGURATION_ERROR);
	}

	if(g_current_epoch > g_event_start_epoch)       /* Event should be running */
    3e14:	40 17       	cp	r20, r16
    3e16:	51 07       	cpc	r21, r17
    3e18:	62 07       	cpc	r22, r18
    3e1a:	73 07       	cpc	r23, r19
    3e1c:	30 f4       	brcc	.+12     	; 0x3e2a <_Z23clockConfigurationCheckv+0x8e>
	{
		if(g_transmissions_disabled)
    3e1e:	80 91 1c 40 	lds	r24, 0x401C	; 0x80401c <g_transmissions_disabled>
    3e22:	88 23       	and	r24, r24
    3e24:	91 f0       	breq	.+36     	; 0x3e4a <_Z23clockConfigurationCheckv+0xae>
		{
			return(SCHEDULED_EVENT_DID_NOT_START);  /* Event scheduled to be running isn't */
    3e26:	83 e0       	ldi	r24, 0x03	; 3
    3e28:	13 c0       	rjmp	.+38     	; 0x3e50 <_Z23clockConfigurationCheckv+0xb4>
		else
		{
			return(EVENT_IN_PROGRESS);              /* Event is running, so clock settings don't matter */
		}
	}
	else if(!g_use_rtc_for_startstop)
    3e2a:	80 91 59 45 	lds	r24, 0x4559	; 0x804559 <g_use_rtc_for_startstop>
    3e2e:	81 11       	cpse	r24, r1
    3e30:	0e c0       	rjmp	.+28     	; 0x3e4e <_Z23clockConfigurationCheckv+0xb2>
	{
		return(SCHEDULED_EVENT_WILL_NEVER_RUN);
    3e32:	84 e0       	ldi	r24, 0x04	; 4
    3e34:	0d c0       	rjmp	.+26     	; 0x3e50 <_Z23clockConfigurationCheckv+0xb4>

ConfigurationState_t clockConfigurationCheck(void)
{
	if((g_event_finish_epoch < MINIMUM_EPOCH) || (g_event_start_epoch < MINIMUM_EPOCH) || (g_current_epoch < MINIMUM_EPOCH))
	{
		return(CONFIGURATION_ERROR);
    3e36:	82 e0       	ldi	r24, 0x02	; 2
    3e38:	0b c0       	rjmp	.+22     	; 0x3e50 <_Z23clockConfigurationCheckv+0xb4>
    3e3a:	82 e0       	ldi	r24, 0x02	; 2
    3e3c:	09 c0       	rjmp	.+18     	; 0x3e50 <_Z23clockConfigurationCheckv+0xb4>
    3e3e:	82 e0       	ldi	r24, 0x02	; 2
    3e40:	07 c0       	rjmp	.+14     	; 0x3e50 <_Z23clockConfigurationCheckv+0xb4>
	}

	if(g_event_finish_epoch <= g_event_start_epoch) /* Event configured to finish before it started */
	{
		return(CONFIGURATION_ERROR);
    3e42:	82 e0       	ldi	r24, 0x02	; 2
    3e44:	05 c0       	rjmp	.+10     	; 0x3e50 <_Z23clockConfigurationCheckv+0xb4>
	}

	if(g_current_epoch > g_event_finish_epoch)  /* The scheduled event is over */
	{
		return(CONFIGURATION_ERROR);
    3e46:	82 e0       	ldi	r24, 0x02	; 2
    3e48:	03 c0       	rjmp	.+6      	; 0x3e50 <_Z23clockConfigurationCheckv+0xb4>
		{
			return(SCHEDULED_EVENT_DID_NOT_START);  /* Event scheduled to be running isn't */
		}
		else
		{
			return(EVENT_IN_PROGRESS);              /* Event is running, so clock settings don't matter */
    3e4a:	85 e0       	ldi	r24, 0x05	; 5
    3e4c:	01 c0       	rjmp	.+2      	; 0x3e50 <_Z23clockConfigurationCheckv+0xb4>
	else if(!g_use_rtc_for_startstop)
	{
		return(SCHEDULED_EVENT_WILL_NEVER_RUN);
	}

	return(WAITING_FOR_START);  /* Future event hasn't started yet */
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
}
    3e50:	1f 91       	pop	r17
    3e52:	0f 91       	pop	r16
    3e54:	08 95       	ret

00003e56 <_Z18reportConfigErrorsv>:

void reportConfigErrors(void)
{
	g_current_epoch = ds3231_get_epoch(null);
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	0e 94 1c 23 	call	0x4638	; 0x4638 <ds3231_get_epoch>
    3e5e:	60 93 55 45 	sts	0x4555, r22	; 0x804555 <g_current_epoch>
    3e62:	70 93 56 45 	sts	0x4556, r23	; 0x804556 <g_current_epoch+0x1>
    3e66:	80 93 57 45 	sts	0x4557, r24	; 0x804557 <g_current_epoch+0x2>
    3e6a:	90 93 58 45 	sts	0x4558, r25	; 0x804558 <g_current_epoch+0x3>

	if(g_messages_text[STATION_ID][0] == '\0')
    3e6e:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <g_messages_text+0x15>
    3e72:	81 11       	cpse	r24, r1
    3e74:	04 c0       	rjmp	.+8      	; 0x3e7e <_Z18reportConfigErrorsv+0x28>
	{
		sb_send_string(TEXT_SET_ID_TXT);
    3e76:	8b ea       	ldi	r24, 0xAB	; 171
    3e78:	93 e4       	ldi	r25, 0x43	; 67
    3e7a:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    3e7e:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    3e82:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    3e86:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    3e8a:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    3e8e:	81 15       	cp	r24, r1
    3e90:	96 46       	sbci	r25, 0x66	; 102
    3e92:	ae 4e       	sbci	r26, 0xEE	; 238
    3e94:	bf 45       	sbci	r27, 0x5F	; 95
    3e96:	20 f4       	brcc	.+8      	; 0x3ea0 <_Z18reportConfigErrorsv+0x4a>
	{
		sb_send_string(TEXT_SET_TIME_TXT);
    3e98:	8c ec       	ldi	r24, 0xCC	; 204
    3e9a:	93 e4       	ldi	r25, 0x43	; 67
    3e9c:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    3ea0:	40 91 48 45 	lds	r20, 0x4548	; 0x804548 <g_event_finish_epoch>
    3ea4:	50 91 49 45 	lds	r21, 0x4549	; 0x804549 <g_event_finish_epoch+0x1>
    3ea8:	60 91 4a 45 	lds	r22, 0x454A	; 0x80454a <g_event_finish_epoch+0x2>
    3eac:	70 91 4b 45 	lds	r23, 0x454B	; 0x80454b <g_event_finish_epoch+0x3>
    3eb0:	80 91 55 45 	lds	r24, 0x4555	; 0x804555 <g_current_epoch>
    3eb4:	90 91 56 45 	lds	r25, 0x4556	; 0x804556 <g_current_epoch+0x1>
    3eb8:	a0 91 57 45 	lds	r26, 0x4557	; 0x804557 <g_current_epoch+0x2>
    3ebc:	b0 91 58 45 	lds	r27, 0x4558	; 0x804558 <g_current_epoch+0x3>
    3ec0:	48 17       	cp	r20, r24
    3ec2:	59 07       	cpc	r21, r25
    3ec4:	6a 07       	cpc	r22, r26
    3ec6:	7b 07       	cpc	r23, r27
    3ec8:	b0 f4       	brcc	.+44     	; 0x3ef6 <_Z18reportConfigErrorsv+0xa0>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    3eca:	40 91 44 45 	lds	r20, 0x4544	; 0x804544 <g_event_start_epoch>
    3ece:	50 91 45 45 	lds	r21, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    3ed2:	60 91 46 45 	lds	r22, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    3ed6:	70 91 47 45 	lds	r23, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    3eda:	48 17       	cp	r20, r24
    3edc:	59 07       	cpc	r21, r25
    3ede:	6a 07       	cpc	r22, r26
    3ee0:	7b 07       	cpc	r23, r27
    3ee2:	20 f4       	brcc	.+8      	; 0x3eec <_Z18reportConfigErrorsv+0x96>
		{
			sb_send_string(TEXT_SET_START_TXT);
    3ee4:	84 ef       	ldi	r24, 0xF4	; 244
    3ee6:	93 e4       	ldi	r25, 0x43	; 67
    3ee8:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
		}

		sb_send_string(TEXT_SET_FINISH_TXT);
    3eec:	8a e1       	ldi	r24, 0x1A	; 26
    3eee:	94 e4       	ldi	r25, 0x44	; 68
    3ef0:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    3ef4:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    3ef6:	40 91 44 45 	lds	r20, 0x4544	; 0x804544 <g_event_start_epoch>
    3efa:	50 91 45 45 	lds	r21, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    3efe:	60 91 46 45 	lds	r22, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    3f02:	70 91 47 45 	lds	r23, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    3f06:	48 17       	cp	r20, r24
    3f08:	59 07       	cpc	r21, r25
    3f0a:	6a 07       	cpc	r22, r26
    3f0c:	7b 07       	cpc	r23, r27
    3f0e:	70 f4       	brcc	.+28     	; 0x3f2c <_Z18reportConfigErrorsv+0xd6>
	{
		if(g_event_start_epoch < MINIMUM_EPOCH)     /* Start in invalid */
    3f10:	41 15       	cp	r20, r1
    3f12:	56 46       	sbci	r21, 0x66	; 102
    3f14:	6e 4e       	sbci	r22, 0xEE	; 238
    3f16:	7f 45       	sbci	r23, 0x5F	; 95
    3f18:	28 f4       	brcc	.+10     	; 0x3f24 <_Z18reportConfigErrorsv+0xce>
		{
			sb_send_string(TEXT_SET_START_TXT);
    3f1a:	84 ef       	ldi	r24, 0xF4	; 244
    3f1c:	93 e4       	ldi	r25, 0x43	; 67
    3f1e:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    3f22:	08 95       	ret
		}
		else
		{
			sb_send_string((char*)"Event running...\n");
    3f24:	81 e4       	ldi	r24, 0x41	; 65
    3f26:	94 e4       	ldi	r25, 0x44	; 68
    3f28:	0e 94 9f 32 	call	0x653e	; 0x653e <sb_send_string>
    3f2c:	08 95       	ret

00003f2e <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
}
    3f2e:	0f 93       	push	r16
    3f30:	1f 93       	push	r17
    3f32:	cf 93       	push	r28
    3f34:	df 93       	push	r29
    3f36:	ec 01       	movw	r28, r24
    3f38:	8b 01       	movw	r16, r22
    3f3a:	01 97       	sbiw	r24, 0x01	; 1
    3f3c:	39 f4       	brne	.+14     	; 0x3f4c <_Z41__static_initialization_and_destruction_0ii+0x1e>
    3f3e:	6f 3f       	cpi	r22, 0xFF	; 255
    3f40:	7f 4f       	sbci	r23, 0xFF	; 255
    3f42:	21 f4       	brne	.+8      	; 0x3f4c <_Z41__static_initialization_and_destruction_0ii+0x1e>
//static volatile BOOL g_adcUpdated[NUMBER_OF_POLLED_ADC_CHANNELS] = { FALSE, FALSE, FALSE, FALSE, FALSE };
static volatile uint16_t g_lastConversionResult[NUMBER_OF_POLLED_ADC_CHANNELS];

extern Goertzel g_goertzel;

EepromManager g_ee_mgr;
    3f44:	83 e4       	ldi	r24, 0x43	; 67
    3f46:	95 e4       	ldi	r25, 0x45	; 69
    3f48:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <_ZN13EepromManagerC1Ev>
    3f4c:	cd 2b       	or	r28, r29
    3f4e:	39 f4       	brne	.+14     	; 0x3f5e <_Z41__static_initialization_and_destruction_0ii+0x30>
    3f50:	0f 3f       	cpi	r16, 0xFF	; 255
    3f52:	1f 4f       	sbci	r17, 0xFF	; 255
    3f54:	21 f4       	brne	.+8      	; 0x3f5e <_Z41__static_initialization_and_destruction_0ii+0x30>
    3f56:	83 e4       	ldi	r24, 0x43	; 67
    3f58:	95 e4       	ldi	r25, 0x45	; 69
    3f5a:	0e 94 e5 26 	call	0x4dca	; 0x4dca <_ZN13EepromManagerD1Ev>
		else
		{
			sb_send_string((char*)"Event running...\n");
		}
	}
}
    3f5e:	df 91       	pop	r29
    3f60:	cf 91       	pop	r28
    3f62:	1f 91       	pop	r17
    3f64:	0f 91       	pop	r16
    3f66:	08 95       	ret

00003f68 <_GLOBAL__sub_I_g_battery_type>:
    3f68:	6f ef       	ldi	r22, 0xFF	; 255
    3f6a:	7f ef       	ldi	r23, 0xFF	; 255
    3f6c:	81 e0       	ldi	r24, 0x01	; 1
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <_Z41__static_initialization_and_destruction_0ii>
    3f74:	08 95       	ret

00003f76 <_GLOBAL__sub_D_g_battery_type>:
    3f76:	6f ef       	ldi	r22, 0xFF	; 255
    3f78:	7f ef       	ldi	r23, 0xFF	; 255
    3f7a:	80 e0       	ldi	r24, 0x00	; 0
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <_Z41__static_initialization_and_destruction_0ii>
    3f82:	08 95       	ret

00003f84 <_ZL9PORT_initv>:
	}
	
	ADC0.MUXPOS = holdMux; /* Restore ADC registers */
	
	return(temperature_in_C);
}
    3f84:	e0 e6       	ldi	r30, 0x60	; 96
    3f86:	f4 e0       	ldi	r31, 0x04	; 4
    3f88:	82 89       	ldd	r24, Z+18	; 0x12
    3f8a:	88 7f       	andi	r24, 0xF8	; 248
    3f8c:	82 8b       	std	Z+18, r24	; 0x12
    3f8e:	82 89       	ldd	r24, Z+18	; 0x12
    3f90:	84 60       	ori	r24, 0x04	; 4
    3f92:	82 8b       	std	Z+18, r24	; 0x12
    3f94:	83 89       	ldd	r24, Z+19	; 0x13
    3f96:	88 7f       	andi	r24, 0xF8	; 248
    3f98:	83 8b       	std	Z+19, r24	; 0x13
    3f9a:	83 89       	ldd	r24, Z+19	; 0x13
    3f9c:	84 60       	ori	r24, 0x04	; 4
    3f9e:	83 8b       	std	Z+19, r24	; 0x13
    3fa0:	84 89       	ldd	r24, Z+20	; 0x14
    3fa2:	88 7f       	andi	r24, 0xF8	; 248
    3fa4:	84 8b       	std	Z+20, r24	; 0x14
    3fa6:	84 89       	ldd	r24, Z+20	; 0x14
    3fa8:	84 60       	ori	r24, 0x04	; 4
    3faa:	84 8b       	std	Z+20, r24	; 0x14
    3fac:	85 89       	ldd	r24, Z+21	; 0x15
    3fae:	88 7f       	andi	r24, 0xF8	; 248
    3fb0:	85 8b       	std	Z+21, r24	; 0x15
    3fb2:	85 89       	ldd	r24, Z+21	; 0x15
    3fb4:	84 60       	ori	r24, 0x04	; 4
    3fb6:	85 8b       	std	Z+21, r24	; 0x15
    3fb8:	82 89       	ldd	r24, Z+18	; 0x12
    3fba:	87 7f       	andi	r24, 0xF7	; 247
    3fbc:	82 8b       	std	Z+18, r24	; 0x12
    3fbe:	83 89       	ldd	r24, Z+19	; 0x13
    3fc0:	87 7f       	andi	r24, 0xF7	; 247
    3fc2:	83 8b       	std	Z+19, r24	; 0x13
    3fc4:	84 89       	ldd	r24, Z+20	; 0x14
    3fc6:	87 7f       	andi	r24, 0xF7	; 247
    3fc8:	84 8b       	std	Z+20, r24	; 0x14
    3fca:	85 89       	ldd	r24, Z+21	; 0x15
    3fcc:	87 7f       	andi	r24, 0xF7	; 247
    3fce:	85 8b       	std	Z+21, r24	; 0x15
    3fd0:	08 95       	ret

00003fd2 <_ZL10VREF0_initv>:
    3fd2:	81 e0       	ldi	r24, 0x01	; 1
    3fd4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    3fd8:	08 95       	ret

00003fda <_ZL9ADC0_initb>:
    3fda:	9a e0       	ldi	r25, 0x0A	; 10
    3fdc:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
    3fe0:	88 23       	and	r24, r24
    3fe2:	41 f0       	breq	.+16     	; 0x3ff4 <_ZL9ADC0_initb+0x1a>
    3fe4:	e0 e0       	ldi	r30, 0x00	; 0
    3fe6:	f6 e0       	ldi	r31, 0x06	; 6
    3fe8:	83 e0       	ldi	r24, 0x03	; 3
    3fea:	80 83       	st	Z, r24
    3fec:	81 e0       	ldi	r24, 0x01	; 1
    3fee:	84 87       	std	Z+12, r24	; 0x0c
    3ff0:	82 87       	std	Z+10, r24	; 0x0a
    3ff2:	08 95       	ret
    3ff4:	e0 e0       	ldi	r30, 0x00	; 0
    3ff6:	f6 e0       	ldi	r31, 0x06	; 6
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	80 83       	st	Z, r24
    3ffc:	14 86       	std	Z+12, r1	; 0x0c
    3ffe:	08 95       	ret

00004000 <_ZL16ADC0_SYSTEM_initb>:
    4000:	cf 93       	push	r28
    4002:	c8 2f       	mov	r28, r24
    4004:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <_ZL9PORT_initv>
    4008:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <_ZL10VREF0_initv>
    400c:	8c 2f       	mov	r24, r28
    400e:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_ZL9ADC0_initb>
    4012:	81 e0       	ldi	r24, 0x01	; 1
    4014:	80 93 6f 45 	sts	0x456F, r24	; 0x80456f <_ZL17g_adc_initialized>
    4018:	cf 91       	pop	r28
    401a:	08 95       	ret

0000401c <_ZL20ADC0_SYSTEM_shutdownv>:
    401c:	e0 e0       	ldi	r30, 0x00	; 0
    401e:	f6 e0       	ldi	r31, 0x06	; 6
    4020:	14 86       	std	Z+12, r1	; 0x0c
    4022:	10 82       	st	Z, r1
    4024:	10 92 6f 45 	sts	0x456F, r1	; 0x80456f <_ZL17g_adc_initialized>
    4028:	08 95       	ret

0000402a <_Z41__static_initialization_and_destruction_0ii>:
    402a:	ef 92       	push	r14
    402c:	ff 92       	push	r15
    402e:	0f 93       	push	r16
    4030:	1f 93       	push	r17
    4032:	cf 93       	push	r28
    4034:	df 93       	push	r29
    4036:	ec 01       	movw	r28, r24
    4038:	7b 01       	movw	r14, r22
    403a:	01 97       	sbiw	r24, 0x01	; 1
    403c:	79 f4       	brne	.+30     	; 0x405c <_Z41__static_initialization_and_destruction_0ii+0x32>
    403e:	6f 3f       	cpi	r22, 0xFF	; 255
    4040:	7f 4f       	sbci	r23, 0xFF	; 255
    4042:	61 f4       	brne	.+24     	; 0x405c <_Z41__static_initialization_and_destruction_0ii+0x32>
    4044:	00 e0       	ldi	r16, 0x00	; 0
    4046:	10 e4       	ldi	r17, 0x40	; 64
    4048:	2c eb       	ldi	r18, 0xBC	; 188
    404a:	36 e4       	ldi	r19, 0x46	; 70
    404c:	40 e0       	ldi	r20, 0x00	; 0
    404e:	50 e0       	ldi	r21, 0x00	; 0
    4050:	69 e4       	ldi	r22, 0x49	; 73
    4052:	73 e4       	ldi	r23, 0x43	; 67
    4054:	8e e6       	ldi	r24, 0x6E	; 110
    4056:	95 e4       	ldi	r25, 0x45	; 69
    4058:	0e 94 31 2a 	call	0x5462	; 0x5462 <_ZN8GoertzelC1Eff>
    405c:	cd 2b       	or	r28, r29
    405e:	39 f4       	brne	.+14     	; 0x406e <_Z41__static_initialization_and_destruction_0ii+0x44>
    4060:	ef 20       	and	r14, r15
    4062:	e0 94       	com	r14
    4064:	21 f4       	brne	.+8      	; 0x406e <_Z41__static_initialization_and_destruction_0ii+0x44>
    4066:	8e e6       	ldi	r24, 0x6E	; 110
    4068:	95 e4       	ldi	r25, 0x45	; 69
    406a:	0e 94 81 2a 	call	0x5502	; 0x5502 <_ZN8GoertzelD1Ev>
    406e:	df 91       	pop	r29
    4070:	cf 91       	pop	r28
    4072:	1f 91       	pop	r17
    4074:	0f 91       	pop	r16
    4076:	ff 90       	pop	r15
    4078:	ef 90       	pop	r14
    407a:	08 95       	ret

0000407c <_Z18ADC0_setADCChannel20ADC_Active_Channel_t>:
    407c:	83 30       	cpi	r24, 0x03	; 3
    407e:	c9 f0       	breq	.+50     	; 0x40b2 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x36>
    4080:	28 f4       	brcc	.+10     	; 0x408c <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x10>
    4082:	81 30       	cpi	r24, 0x01	; 1
    4084:	41 f0       	breq	.+16     	; 0x4096 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x1a>
    4086:	82 30       	cpi	r24, 0x02	; 2
    4088:	69 f0       	breq	.+26     	; 0x40a4 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x28>
    408a:	28 c0       	rjmp	.+80     	; 0x40dc <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x60>
    408c:	84 30       	cpi	r24, 0x04	; 4
    408e:	c1 f0       	breq	.+48     	; 0x40c0 <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x44>
    4090:	85 30       	cpi	r24, 0x05	; 5
    4092:	e9 f0       	breq	.+58     	; 0x40ce <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x52>
    4094:	23 c0       	rjmp	.+70     	; 0x40dc <_Z18ADC0_setADCChannel20ADC_Active_Channel_t+0x60>
    4096:	81 e0       	ldi	r24, 0x01	; 1
    4098:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZL16ADC0_SYSTEM_initb>
    409c:	82 e0       	ldi	r24, 0x02	; 2
    409e:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    40a2:	08 95       	ret
    40a4:	80 e0       	ldi	r24, 0x00	; 0
    40a6:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZL16ADC0_SYSTEM_initb>
    40aa:	83 e0       	ldi	r24, 0x03	; 3
    40ac:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    40b0:	08 95       	ret
    40b2:	80 e0       	ldi	r24, 0x00	; 0
    40b4:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZL16ADC0_SYSTEM_initb>
    40b8:	84 e0       	ldi	r24, 0x04	; 4
    40ba:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    40be:	08 95       	ret
    40c0:	80 e0       	ldi	r24, 0x00	; 0
    40c2:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZL16ADC0_SYSTEM_initb>
    40c6:	85 e0       	ldi	r24, 0x05	; 5
    40c8:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    40cc:	08 95       	ret
    40ce:	80 e0       	ldi	r24, 0x00	; 0
    40d0:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZL16ADC0_SYSTEM_initb>
    40d4:	82 e4       	ldi	r24, 0x42	; 66
    40d6:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
    40da:	08 95       	ret
    40dc:	0e 94 0e 20 	call	0x401c	; 0x401c <_ZL20ADC0_SYSTEM_shutdownv>
    40e0:	08 95       	ret

000040e2 <_Z9ADC0_readv>:
    40e2:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
    40e6:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
    40ea:	08 95       	ret

000040ec <__vector_24>:
	ADC0.CTRLA = ADC_RESSEL_12BIT_gc; /* Turn off ADC leaving 12-bit resolution set */
	g_adc_initialized = false;
}

ISR(ADC0_RESRDY_vect)
{
    40ec:	1f 92       	push	r1
    40ee:	0f 92       	push	r0
    40f0:	0f b6       	in	r0, 0x3f	; 63
    40f2:	0f 92       	push	r0
    40f4:	11 24       	eor	r1, r1
    40f6:	0b b6       	in	r0, 0x3b	; 59
    40f8:	0f 92       	push	r0
    40fa:	2f 93       	push	r18
    40fc:	3f 93       	push	r19
    40fe:	4f 93       	push	r20
    4100:	5f 93       	push	r21
    4102:	6f 93       	push	r22
    4104:	7f 93       	push	r23
    4106:	8f 93       	push	r24
    4108:	9f 93       	push	r25
    410a:	af 93       	push	r26
    410c:	bf 93       	push	r27
    410e:	ef 93       	push	r30
    4110:	ff 93       	push	r31
	/* Clear the interrupt flag by reading the result */
	int val = ADC0_read();
    4112:	0e 94 71 20 	call	0x40e2	; 0x40e2 <_Z9ADC0_readv>
//	LED_toggle_level();
	if(g_goertzel.DataPoint(val))
    4116:	bc 01       	movw	r22, r24
    4118:	8e e6       	ldi	r24, 0x6E	; 110
    411a:	95 e4       	ldi	r25, 0x45	; 69
    411c:	0e 94 88 2a 	call	0x5510	; 0x5510 <_ZN8Goertzel9DataPointEi>
    4120:	81 11       	cpse	r24, r1
	{
		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
    4122:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <__TEXT_REGION_LENGTH__+0x7e060c>
	}
    4126:	ff 91       	pop	r31
    4128:	ef 91       	pop	r30
    412a:	bf 91       	pop	r27
    412c:	af 91       	pop	r26
    412e:	9f 91       	pop	r25
    4130:	8f 91       	pop	r24
    4132:	7f 91       	pop	r23
    4134:	6f 91       	pop	r22
    4136:	5f 91       	pop	r21
    4138:	4f 91       	pop	r20
    413a:	3f 91       	pop	r19
    413c:	2f 91       	pop	r18
    413e:	0f 90       	pop	r0
    4140:	0b be       	out	0x3b, r0	; 59
    4142:	0f 90       	pop	r0
    4144:	0f be       	out	0x3f, r0	; 63
    4146:	0f 90       	pop	r0
    4148:	1f 90       	pop	r1
    414a:	18 95       	reti

0000414c <_GLOBAL__sub_I_g_activeADCChannel>:
    414c:	6f ef       	ldi	r22, 0xFF	; 255
    414e:	7f ef       	ldi	r23, 0xFF	; 255
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	0e 94 15 20 	call	0x402a	; 0x402a <_Z41__static_initialization_and_destruction_0ii>
    4158:	08 95       	ret

0000415a <_GLOBAL__sub_D_g_activeADCChannel>:
    415a:	6f ef       	ldi	r22, 0xFF	; 255
    415c:	7f ef       	ldi	r23, 0xFF	; 255
    415e:	80 e0       	ldi	r24, 0x00	; 0
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	0e 94 15 20 	call	0x402a	; 0x402a <_Z41__static_initialization_and_destruction_0ii>
    4166:	08 95       	ret

00004168 <_Z10wifi_powerb>:
} //~binio


void wifi_power(bool state)
{
	if(state == ON)
    4168:	88 23       	and	r24, r24
    416a:	21 f0       	breq	.+8      	; 0x4174 <_Z10wifi_powerb+0xc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    416c:	81 b1       	in	r24, 0x01	; 1
    416e:	80 62       	ori	r24, 0x20	; 32
    4170:	81 b9       	out	0x01, r24	; 1
    4172:	08 95       	ret
	} else {
		VPORTA.OUT &= ~(1 << pin);
    4174:	81 b1       	in	r24, 0x01	; 1
    4176:	8f 7d       	andi	r24, 0xDF	; 223
    4178:	81 b9       	out	0x01, r24	; 1
    417a:	08 95       	ret

0000417c <_Z10wifi_resetb>:
	}
}

void wifi_reset(bool state)
{
	if(state == ON)
    417c:	88 23       	and	r24, r24
    417e:	21 f0       	breq	.+8      	; 0x4188 <_Z10wifi_resetb+0xc>
    4180:	81 b1       	in	r24, 0x01	; 1
    4182:	8f 7b       	andi	r24, 0xBF	; 191
    4184:	81 b9       	out	0x01, r24	; 1
    4186:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    4188:	81 b1       	in	r24, 0x01	; 1
    418a:	80 64       	ori	r24, 0x40	; 64
    418c:	81 b9       	out	0x01, r24	; 1
    418e:	08 95       	ret

00004190 <_Z11wifiPresentv>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTD_get_pin_level(const uint8_t pin)
{
	return VPORTD.IN & (1 << pin);
    4190:	8e b1       	in	r24, 0x0e	; 14
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	88 0f       	add	r24, r24
    4196:	89 2f       	mov	r24, r25
    4198:	88 1f       	adc	r24, r24
    419a:	99 0b       	sbc	r25, r25
}

bool wifiPresent(void)
{
	return(PORTD_get_pin_level(WIFI_MODULE_DETECT));
}
    419c:	81 70       	andi	r24, 0x01	; 1
    419e:	08 95       	ret

000041a0 <__vector_29>:

/**
Handle switch closure interrupts
*/
ISR(PORTC_PORT_vect)
{
    41a0:	1f 92       	push	r1
    41a2:	0f 92       	push	r0
    41a4:	0f b6       	in	r0, 0x3f	; 63
    41a6:	0f 92       	push	r0
    41a8:	11 24       	eor	r1, r1
    41aa:	8f 93       	push	r24
    41ac:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTC.INTFLAGS & (1 << SWITCH))
    41ae:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    41b2:	88 23       	and	r24, r24
    41b4:	4c f4       	brge	.+18     	; 0x41c8 <__vector_29+0x28>
	{
		count++;
    41b6:	80 91 72 45 	lds	r24, 0x4572	; 0x804572 <_ZZ11__vector_29E5count>
    41ba:	90 91 73 45 	lds	r25, 0x4573	; 0x804573 <_ZZ11__vector_29E5count+0x1>
    41be:	01 96       	adiw	r24, 0x01	; 1
    41c0:	80 93 72 45 	sts	0x4572, r24	; 0x804572 <_ZZ11__vector_29E5count>
    41c4:	90 93 73 45 	sts	0x4573, r25	; 0x804573 <_ZZ11__vector_29E5count+0x1>
	}
	
	if(PORTC.INTFLAGS & (1 << X32KHZ_SQUAREWAVE))
    41c8:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
    41cc:	84 ff       	sbrs	r24, 4
    41ce:	09 c0       	rjmp	.+18     	; 0x41e2 <__vector_29+0x42>
	{
		count++;
    41d0:	80 91 72 45 	lds	r24, 0x4572	; 0x804572 <_ZZ11__vector_29E5count>
    41d4:	90 91 73 45 	lds	r25, 0x4573	; 0x804573 <_ZZ11__vector_29E5count+0x1>
    41d8:	01 96       	adiw	r24, 0x01	; 1
    41da:	80 93 72 45 	sts	0x4572, r24	; 0x804572 <_ZZ11__vector_29E5count>
    41de:	90 93 73 45 	sts	0x4573, r25	; 0x804573 <_ZZ11__vector_29E5count+0x1>
	}
	
	PORTC.INTFLAGS = 0xFF; /* Clear all flags */
    41e2:	8f ef       	ldi	r24, 0xFF	; 255
    41e4:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
}
    41e8:	9f 91       	pop	r25
    41ea:	8f 91       	pop	r24
    41ec:	0f 90       	pop	r0
    41ee:	0f be       	out	0x3f, r0	; 63
    41f0:	0f 90       	pop	r0
    41f2:	1f 90       	pop	r1
    41f4:	18 95       	reti

000041f6 <__vector_6>:

/**

*/
ISR(PORTA_PORT_vect)
{
    41f6:	1f 92       	push	r1
    41f8:	0f 92       	push	r0
    41fa:	0f b6       	in	r0, 0x3f	; 63
    41fc:	0f 92       	push	r0
    41fe:	11 24       	eor	r1, r1
    4200:	8f 93       	push	r24
    4202:	9f 93       	push	r25
	static int count = 0;
	
	if(PORTA.INTFLAGS & (1 << RTC_SQW))
    4204:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    4208:	82 ff       	sbrs	r24, 2
    420a:	09 c0       	rjmp	.+18     	; 0x421e <__vector_6+0x28>
	{
		count++;
    420c:	80 91 70 45 	lds	r24, 0x4570	; 0x804570 <_ZZ10__vector_6E5count>
    4210:	90 91 71 45 	lds	r25, 0x4571	; 0x804571 <_ZZ10__vector_6E5count+0x1>
    4214:	01 96       	adiw	r24, 0x01	; 1
    4216:	80 93 70 45 	sts	0x4570, r24	; 0x804570 <_ZZ10__vector_6E5count>
    421a:	90 93 71 45 	sts	0x4571, r25	; 0x804571 <_ZZ10__vector_6E5count+0x1>
	}
	
	if(PORTA.INTFLAGS & (1 << ANT_CONNECT_INT))
    421e:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
    4222:	84 ff       	sbrs	r24, 4
    4224:	09 c0       	rjmp	.+18     	; 0x4238 <__vector_6+0x42>
	{
		count++;
    4226:	80 91 70 45 	lds	r24, 0x4570	; 0x804570 <_ZZ10__vector_6E5count>
    422a:	90 91 71 45 	lds	r25, 0x4571	; 0x804571 <_ZZ10__vector_6E5count+0x1>
    422e:	01 96       	adiw	r24, 0x01	; 1
    4230:	80 93 70 45 	sts	0x4570, r24	; 0x804570 <_ZZ10__vector_6E5count>
    4234:	90 93 71 45 	sts	0x4571, r25	; 0x804571 <_ZZ10__vector_6E5count+0x1>
	}	
	
	PORTA.INTFLAGS = 0xFF; /* Clear all flags */
    4238:	8f ef       	ldi	r24, 0xFF	; 255
    423a:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
}
    423e:	9f 91       	pop	r25
    4240:	8f 91       	pop	r24
    4242:	0f 90       	pop	r0
    4244:	0f be       	out	0x3f, r0	; 63
    4246:	0f 90       	pop	r0
    4248:	1f 90       	pop	r1
    424a:	18 95       	reti

0000424c <_Z10BINIO_initv>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    424c:	80 b1       	in	r24, 0x00	; 0
    424e:	8b 7f       	andi	r24, 0xFB	; 251
    4250:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    4252:	e2 e1       	ldi	r30, 0x12	; 18
    4254:	f4 e0       	ldi	r31, 0x04	; 4
    4256:	80 81       	ld	r24, Z
    4258:	88 7f       	andi	r24, 0xF8	; 248
    425a:	82 60       	ori	r24, 0x02	; 2
    425c:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    425e:	80 b1       	in	r24, 0x00	; 0
    4260:	88 60       	ori	r24, 0x08	; 8
    4262:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    4264:	81 b1       	in	r24, 0x01	; 1
    4266:	87 7f       	andi	r24, 0xF7	; 247
    4268:	81 b9       	out	0x01, r24	; 1
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    426a:	80 b1       	in	r24, 0x00	; 0
    426c:	8f 7e       	andi	r24, 0xEF	; 239
    426e:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    4270:	e4 e1       	ldi	r30, 0x14	; 20
    4272:	f4 e0       	ldi	r31, 0x04	; 4
    4274:	80 81       	ld	r24, Z
    4276:	88 60       	ori	r24, 0x08	; 8
    4278:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    427a:	80 81       	ld	r24, Z
    427c:	88 7f       	andi	r24, 0xF8	; 248
    427e:	83 60       	ori	r24, 0x03	; 3
    4280:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    4282:	80 b1       	in	r24, 0x00	; 0
    4284:	80 62       	ori	r24, 0x20	; 32
    4286:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    4288:	81 b1       	in	r24, 0x01	; 1
    428a:	8f 7d       	andi	r24, 0xDF	; 223
    428c:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    428e:	80 b1       	in	r24, 0x00	; 0
    4290:	80 64       	ori	r24, 0x40	; 64
    4292:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    4294:	81 b1       	in	r24, 0x01	; 1
    4296:	8f 7b       	andi	r24, 0xBF	; 191
    4298:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    429a:	80 b1       	in	r24, 0x00	; 0
    429c:	80 68       	ori	r24, 0x80	; 128
    429e:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    42a0:	81 b1       	in	r24, 0x01	; 1
    42a2:	8f 77       	andi	r24, 0x7F	; 127
    42a4:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    42a6:	84 b1       	in	r24, 0x04	; 4
    42a8:	81 60       	ori	r24, 0x01	; 1
    42aa:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    42ac:	85 b1       	in	r24, 0x05	; 5
    42ae:	8e 7f       	andi	r24, 0xFE	; 254
    42b0:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    42b2:	84 b1       	in	r24, 0x04	; 4
    42b4:	82 60       	ori	r24, 0x02	; 2
    42b6:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    42b8:	85 b1       	in	r24, 0x05	; 5
    42ba:	8d 7f       	andi	r24, 0xFD	; 253
    42bc:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    42be:	84 b1       	in	r24, 0x04	; 4
    42c0:	80 61       	ori	r24, 0x10	; 16
    42c2:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    42c4:	85 b1       	in	r24, 0x05	; 5
    42c6:	8f 7e       	andi	r24, 0xEF	; 239
    42c8:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    42ca:	84 b1       	in	r24, 0x04	; 4
    42cc:	80 62       	ori	r24, 0x20	; 32
    42ce:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    42d0:	85 b1       	in	r24, 0x05	; 5
    42d2:	8f 7d       	andi	r24, 0xDF	; 223
    42d4:	85 b9       	out	0x05, r24	; 5
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    42d6:	88 b1       	in	r24, 0x08	; 8
    42d8:	8f 7e       	andi	r24, 0xEF	; 239
    42da:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    42dc:	88 b1       	in	r24, 0x08	; 8
    42de:	80 62       	ori	r24, 0x20	; 32
    42e0:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    42e2:	89 b1       	in	r24, 0x09	; 9
    42e4:	8f 7d       	andi	r24, 0xDF	; 223
    42e6:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    42e8:	88 b1       	in	r24, 0x08	; 8
    42ea:	80 64       	ori	r24, 0x40	; 64
    42ec:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    42ee:	89 b1       	in	r24, 0x09	; 9
    42f0:	8f 7b       	andi	r24, 0xBF	; 191
    42f2:	89 b9       	out	0x09, r24	; 9
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    42f4:	88 b1       	in	r24, 0x08	; 8
    42f6:	8f 77       	andi	r24, 0x7F	; 127
    42f8:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    42fa:	e7 e5       	ldi	r30, 0x57	; 87
    42fc:	f4 e0       	ldi	r31, 0x04	; 4
    42fe:	80 81       	ld	r24, Z
    4300:	88 60       	ori	r24, 0x08	; 8
    4302:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    4304:	80 81       	ld	r24, Z
    4306:	88 7f       	andi	r24, 0xF8	; 248
    4308:	83 60       	ori	r24, 0x03	; 3
    430a:	80 83       	st	Z, r24
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    430c:	8c b1       	in	r24, 0x0c	; 12
    430e:	8e 7f       	andi	r24, 0xFE	; 254
    4310:	8c b9       	out	0x0c, r24	; 12
    4312:	8c b1       	in	r24, 0x0c	; 12
    4314:	8d 7f       	andi	r24, 0xFD	; 253
    4316:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    4318:	a1 e7       	ldi	r26, 0x71	; 113
    431a:	b4 e0       	ldi	r27, 0x04	; 4
    431c:	8c 91       	ld	r24, X
    431e:	88 60       	ori	r24, 0x08	; 8
    4320:	8c 93       	st	X, r24
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    4322:	8c 91       	ld	r24, X
    4324:	88 7f       	andi	r24, 0xF8	; 248
    4326:	83 60       	ori	r24, 0x03	; 3
    4328:	8c 93       	st	X, r24
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    432a:	8c b1       	in	r24, 0x0c	; 12
    432c:	8f 77       	andi	r24, 0x7F	; 127
    432e:	8c b9       	out	0x0c, r24	; 12
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    4330:	80 81       	ld	r24, Z
    4332:	87 7f       	andi	r24, 0xF7	; 247
    4334:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTE + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    4336:	e0 e9       	ldi	r30, 0x90	; 144
    4338:	f4 e0       	ldi	r31, 0x04	; 4
    433a:	80 81       	ld	r24, Z
    433c:	88 60       	ori	r24, 0x08	; 8
    433e:	80 83       	st	Z, r24
    4340:	e1 e9       	ldi	r30, 0x91	; 145
    4342:	f4 e0       	ldi	r31, 0x04	; 4
    4344:	80 81       	ld	r24, Z
    4346:	88 60       	ori	r24, 0x08	; 8
    4348:	80 83       	st	Z, r24
    434a:	e2 e9       	ldi	r30, 0x92	; 146
    434c:	f4 e0       	ldi	r31, 0x04	; 4
    434e:	80 81       	ld	r24, Z
    4350:	88 60       	ori	r24, 0x08	; 8
    4352:	80 83       	st	Z, r24
    4354:	e3 e9       	ldi	r30, 0x93	; 147
    4356:	f4 e0       	ldi	r31, 0x04	; 4
    4358:	80 81       	ld	r24, Z
    435a:	88 60       	ori	r24, 0x08	; 8
    435c:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    435e:	e2 eb       	ldi	r30, 0xB2	; 178
    4360:	f4 e0       	ldi	r31, 0x04	; 4
    4362:	80 81       	ld	r24, Z
    4364:	88 60       	ori	r24, 0x08	; 8
    4366:	80 83       	st	Z, r24
    4368:	e3 eb       	ldi	r30, 0xB3	; 179
    436a:	f4 e0       	ldi	r31, 0x04	; 4
    436c:	80 81       	ld	r24, Z
    436e:	88 60       	ori	r24, 0x08	; 8
    4370:	80 83       	st	Z, r24
    4372:	e4 eb       	ldi	r30, 0xB4	; 180
    4374:	f4 e0       	ldi	r31, 0x04	; 4
    4376:	80 81       	ld	r24, Z
    4378:	88 60       	ori	r24, 0x08	; 8
    437a:	80 83       	st	Z, r24
    437c:	e5 eb       	ldi	r30, 0xB5	; 181
    437e:	f4 e0       	ldi	r31, 0x04	; 4
    4380:	80 81       	ld	r24, Z
    4382:	88 60       	ori	r24, 0x08	; 8
    4384:	80 83       	st	Z, r24
    4386:	08 95       	ret

00004388 <BOD_init>:
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */
    4388:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    438c:	80 e0       	ldi	r24, 0x00	; 0
    438e:	08 95       	ret

00004390 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    4390:	44 e2       	ldi	r20, 0x24	; 36
    4392:	68 ed       	ldi	r22, 0xD8	; 216
    4394:	88 e6       	ldi	r24, 0x68	; 104
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	0e 94 09 31 	call	0x6212	; 0x6212 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    439c:	80 e0       	ldi	r24, 0x00	; 0
    439e:	08 95       	ret

000043a0 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
    43a0:	78 94       	sei

	return 0;
}
    43a2:	80 e0       	ldi	r24, 0x00	; 0
    43a4:	08 95       	ret

000043a6 <_ZL9VREF_initv>:
static void VREF_init(void)
{
//	VREF.DAC0REF = VREF_REFSEL_2V048_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	VREF.DAC0REF = VREF_REFSEL_2V500_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	| VREF_ALWAYSON_bm;    /* Set the Voltage Reference in Always On mode */
	VREF.DAC0REF = VREF_REFSEL_2V500_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
    43a6:	83 e0       	ldi	r24, 0x03	; 3
    43a8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
	/* Wait VREF start-up time */
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
    43ac:	6a e0       	ldi	r22, 0x0A	; 10
    43ae:	70 e0       	ldi	r23, 0x00	; 0
    43b0:	80 e0       	ldi	r24, 0x00	; 0
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <util_delay_ms>
    43b8:	81 11       	cpse	r24, r1
    43ba:	f8 cf       	rjmp	.-16     	; 0x43ac <_ZL9VREF_initv+0x6>
}
    43bc:	08 95       	ret

000043be <_Z11DAC0_setValj>:
}

void DAC0_setVal(uint16_t value)
{
	/* Store the two LSbs in DAC0.DATAL */
	DAC0.DATAL = (value & LSB_MASK) << 6;
    43be:	28 2f       	mov	r18, r24
    43c0:	22 95       	swap	r18
    43c2:	22 0f       	add	r18, r18
    43c4:	22 0f       	add	r18, r18
    43c6:	20 7c       	andi	r18, 0xC0	; 192
    43c8:	e0 ea       	ldi	r30, 0xA0	; 160
    43ca:	f6 e0       	ldi	r31, 0x06	; 6
    43cc:	22 83       	std	Z+2, r18	; 0x02
	/* Store the eight MSbs in DAC0.DATAH */
	DAC0.DATAH = value >> 2;
    43ce:	96 95       	lsr	r25
    43d0:	87 95       	ror	r24
    43d2:	96 95       	lsr	r25
    43d4:	87 95       	ror	r24
    43d6:	83 83       	std	Z+3, r24	; 0x03
    43d8:	08 95       	ret

000043da <_Z9DAC0_initv>:
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
}

void DAC0_init(void)
{
	VREF_init();
    43da:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <_ZL9VREF_initv>
	/* Disable digital input buffer */
	PORTD.PIN6CTRL &= ~PORT_ISC_gm;
    43de:	e0 e6       	ldi	r30, 0x60	; 96
    43e0:	f4 e0       	ldi	r31, 0x04	; 4
    43e2:	86 89       	ldd	r24, Z+22	; 0x16
    43e4:	88 7f       	andi	r24, 0xF8	; 248
    43e6:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
    43e8:	86 89       	ldd	r24, Z+22	; 0x16
    43ea:	84 60       	ori	r24, 0x04	; 4
    43ec:	86 8b       	std	Z+22, r24	; 0x16
	/* Disable pull-up resistor */
	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
    43ee:	86 89       	ldd	r24, Z+22	; 0x16
    43f0:	87 7f       	andi	r24, 0xF7	; 247
    43f2:	86 8b       	std	Z+22, r24	; 0x16
	DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
	| DAC_OUTEN_bm           /* Enable output buffer */
	| DAC_RUNSTDBY_bm;       /* Enable Run in Standby mode */
    43f4:	81 ec       	ldi	r24, 0xC1	; 193
    43f6:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
	
	DAC0_setVal(DAC_DEFAULT_VALUE);
    43fa:	80 e0       	ldi	r24, 0x00	; 0
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	0e 94 df 21 	call	0x43be	; 0x43be <_Z11DAC0_setValj>
    4402:	08 95       	ret

00004404 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    4404:	80 e0       	ldi	r24, 0x00	; 0
    4406:	88 30       	cpi	r24, 0x08	; 8
    4408:	48 f4       	brcc	.+18     	; 0x441c <mcu_init+0x18>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    440a:	e8 2f       	mov	r30, r24
    440c:	f0 e0       	ldi	r31, 0x00	; 0
    440e:	e0 5f       	subi	r30, 0xF0	; 240
    4410:	fb 4f       	sbci	r31, 0xFB	; 251
    4412:	90 81       	ld	r25, Z
    4414:	98 60       	ori	r25, 0x08	; 8
    4416:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    4418:	8f 5f       	subi	r24, 0xFF	; 255
    441a:	f5 cf       	rjmp	.-22     	; 0x4406 <mcu_init+0x2>
    441c:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    441e:	88 30       	cpi	r24, 0x08	; 8
    4420:	48 f4       	brcc	.+18     	; 0x4434 <mcu_init+0x30>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    4422:	e8 2f       	mov	r30, r24
    4424:	f0 e0       	ldi	r31, 0x00	; 0
    4426:	e0 5d       	subi	r30, 0xD0	; 208
    4428:	fb 4f       	sbci	r31, 0xFB	; 251
    442a:	90 81       	ld	r25, Z
    442c:	98 60       	ori	r25, 0x08	; 8
    442e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    4430:	8f 5f       	subi	r24, 0xFF	; 255
    4432:	f5 cf       	rjmp	.-22     	; 0x441e <mcu_init+0x1a>
    4434:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    4436:	88 30       	cpi	r24, 0x08	; 8
    4438:	48 f4       	brcc	.+18     	; 0x444c <mcu_init+0x48>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    443a:	e8 2f       	mov	r30, r24
    443c:	f0 e0       	ldi	r31, 0x00	; 0
    443e:	e0 5b       	subi	r30, 0xB0	; 176
    4440:	fb 4f       	sbci	r31, 0xFB	; 251
    4442:	90 81       	ld	r25, Z
    4444:	98 60       	ori	r25, 0x08	; 8
    4446:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    4448:	8f 5f       	subi	r24, 0xFF	; 255
    444a:	f5 cf       	rjmp	.-22     	; 0x4436 <mcu_init+0x32>
    444c:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    444e:	88 30       	cpi	r24, 0x08	; 8
    4450:	48 f4       	brcc	.+18     	; 0x4464 <mcu_init+0x60>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    4452:	e8 2f       	mov	r30, r24
    4454:	f0 e0       	ldi	r31, 0x00	; 0
    4456:	e0 59       	subi	r30, 0x90	; 144
    4458:	fb 4f       	sbci	r31, 0xFB	; 251
    445a:	90 81       	ld	r25, Z
    445c:	98 60       	ori	r25, 0x08	; 8
    445e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    4460:	8f 5f       	subi	r24, 0xFF	; 255
    4462:	f5 cf       	rjmp	.-22     	; 0x444e <mcu_init+0x4a>
    4464:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    4466:	88 30       	cpi	r24, 0x08	; 8
    4468:	48 f4       	brcc	.+18     	; 0x447c <mcu_init+0x78>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    446a:	e8 2f       	mov	r30, r24
    446c:	f0 e0       	ldi	r31, 0x00	; 0
    446e:	e0 57       	subi	r30, 0x70	; 112
    4470:	fb 4f       	sbci	r31, 0xFB	; 251
    4472:	90 81       	ld	r25, Z
    4474:	98 60       	ori	r25, 0x08	; 8
    4476:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    4478:	8f 5f       	subi	r24, 0xFF	; 255
    447a:	f5 cf       	rjmp	.-22     	; 0x4466 <mcu_init+0x62>
    447c:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    447e:	88 30       	cpi	r24, 0x08	; 8
    4480:	48 f4       	brcc	.+18     	; 0x4494 <mcu_init+0x90>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    4482:	e8 2f       	mov	r30, r24
    4484:	f0 e0       	ldi	r31, 0x00	; 0
    4486:	e0 55       	subi	r30, 0x50	; 80
    4488:	fb 4f       	sbci	r31, 0xFB	; 251
    448a:	90 81       	ld	r25, Z
    448c:	98 60       	ori	r25, 0x08	; 8
    448e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    4490:	8f 5f       	subi	r24, 0xFF	; 255
    4492:	f5 cf       	rjmp	.-22     	; 0x447e <mcu_init+0x7a>
    4494:	08 95       	ret

00004496 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    4496:	0e 94 02 22 	call	0x4404	; 0x4404 <mcu_init>

	CLKCTRL_init(); /* Set CPU clock speed appropriately */
    449a:	0e 94 c8 21 	call	0x4390	; 0x4390 <CLKCTRL_init>
	TIMERB_init(); /* Timers must be initialized before utility_delay functions will work */
    449e:	0e 94 41 3a 	call	0x7482	; 0x7482 <TIMERB_init>
	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
    44a2:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <CPUINT_init>
	BINIO_init();
    44a6:	0e 94 26 21 	call	0x424c	; 0x424c <_Z10BINIO_initv>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    44aa:	88 b1       	in	r24, 0x08	; 8
    44ac:	80 64       	ori	r24, 0x40	; 64
    44ae:	88 b9       	out	0x08, r24	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    44b0:	89 b1       	in	r24, 0x09	; 9
    44b2:	80 64       	ori	r24, 0x40	; 64
    44b4:	89 b9       	out	0x09, r24	; 9

	LED_set_dir(PORT_DIR_OUT);
	LED_set_level(OFF);

	SLPCTRL_init();
    44b6:	0e 94 3f 3a 	call	0x747e	; 0x747e <SLPCTRL_init>
	
	DAC0_init();
    44ba:	0e 94 ed 21 	call	0x43da	; 0x43da <_Z9DAC0_initv>

	linkbus_init(LB_BAUD, LINKBUS_USART);
    44be:	44 e0       	ldi	r20, 0x04	; 4
    44c0:	60 e8       	ldi	r22, 0x80	; 128
    44c2:	75 e2       	ldi	r23, 0x25	; 37
    44c4:	80 e0       	ldi	r24, 0x00	; 0
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <_Z12linkbus_initm14USART_Number_t>
	serialbus_init(SB_BAUD, SERIALBUS_USART);
    44cc:	41 e0       	ldi	r20, 0x01	; 1
    44ce:	60 e8       	ldi	r22, 0x80	; 128
    44d0:	75 e2       	ldi	r23, 0x25	; 37
    44d2:	80 e0       	ldi	r24, 0x00	; 0
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	0e 94 12 32 	call	0x6424	; 0x6424 <serialbus_init>

	BOD_init();
    44da:	0e 94 c4 21 	call	0x4388	; 0x4388 <BOD_init>
    44de:	08 95       	ret

000044e0 <_Z7bcd2dech>:
		else
		{
			data[0] = 0x04;
			I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_CONTROL, data, 1);
		}
	}
    44e0:	28 2f       	mov	r18, r24
    44e2:	30 e0       	ldi	r19, 0x00	; 0
    44e4:	35 95       	asr	r19
    44e6:	27 95       	ror	r18
    44e8:	35 95       	asr	r19
    44ea:	27 95       	ror	r18
    44ec:	35 95       	asr	r19
    44ee:	27 95       	ror	r18
    44f0:	35 95       	asr	r19
    44f2:	27 95       	ror	r18
    44f4:	22 0f       	add	r18, r18
    44f6:	92 2f       	mov	r25, r18
    44f8:	99 0f       	add	r25, r25
    44fa:	99 0f       	add	r25, r25
    44fc:	29 0f       	add	r18, r25
    44fe:	8f 70       	andi	r24, 0x0F	; 15
    4500:	82 0f       	add	r24, r18
    4502:	08 95       	ret

00004504 <_Z7dec2bcdh>:
    4504:	2d ec       	ldi	r18, 0xCD	; 205
    4506:	82 9f       	mul	r24, r18
    4508:	21 2d       	mov	r18, r1
    450a:	11 24       	eor	r1, r1
    450c:	92 2f       	mov	r25, r18
    450e:	96 95       	lsr	r25
    4510:	96 95       	lsr	r25
    4512:	96 95       	lsr	r25
    4514:	99 0f       	add	r25, r25
    4516:	39 2f       	mov	r19, r25
    4518:	33 0f       	add	r19, r19
    451a:	33 0f       	add	r19, r19
    451c:	93 0f       	add	r25, r19
    451e:	89 1b       	sub	r24, r25
    4520:	98 2f       	mov	r25, r24
    4522:	26 95       	lsr	r18
    4524:	26 95       	lsr	r18
    4526:	26 95       	lsr	r18
    4528:	80 e1       	ldi	r24, 0x10	; 16
    452a:	28 9f       	mul	r18, r24
    452c:	90 01       	movw	r18, r0
    452e:	11 24       	eor	r1, r1
    4530:	89 2f       	mov	r24, r25
    4532:	82 2b       	or	r24, r18
    4534:	08 95       	ret

00004536 <_Z8char2bcdPc>:
    4536:	fc 01       	movw	r30, r24
    4538:	20 81       	ld	r18, Z
    453a:	81 81       	ldd	r24, Z+1	; 0x01
    453c:	f0 e1       	ldi	r31, 0x10	; 16
    453e:	2f 9f       	mul	r18, r31
    4540:	80 0d       	add	r24, r0
    4542:	11 24       	eor	r1, r1
    4544:	80 53       	subi	r24, 0x30	; 48
    4546:	08 95       	ret

00004548 <_Z14epoch_from_ltmP2tm>:
    4548:	cf 92       	push	r12
    454a:	df 92       	push	r13
    454c:	ef 92       	push	r14
    454e:	ff 92       	push	r15
    4550:	fc 01       	movw	r30, r24
    4552:	80 81       	ld	r24, Z
    4554:	21 81       	ldd	r18, Z+1	; 0x01
    4556:	08 2e       	mov	r0, r24
    4558:	00 0c       	add	r0, r0
    455a:	99 0b       	sbc	r25, r25
    455c:	ac 01       	movw	r20, r24
    455e:	3c e3       	ldi	r19, 0x3C	; 60
    4560:	23 02       	muls	r18, r19
    4562:	40 0d       	add	r20, r0
    4564:	51 1d       	adc	r21, r1
    4566:	11 24       	eor	r1, r1
    4568:	a2 81       	ldd	r26, Z+2	; 0x02
    456a:	0a 2e       	mov	r0, r26
    456c:	00 0c       	add	r0, r0
    456e:	bb 0b       	sbc	r27, r27
    4570:	20 e1       	ldi	r18, 0x10	; 16
    4572:	3e e0       	ldi	r19, 0x0E	; 14
    4574:	0e 94 62 40 	call	0x80c4	; 0x80c4 <__usmulhisi3>
    4578:	6a 01       	movw	r12, r20
    457a:	55 0f       	add	r21, r21
    457c:	ee 08       	sbc	r14, r14
    457e:	ff 08       	sbc	r15, r15
    4580:	c6 0e       	add	r12, r22
    4582:	d7 1e       	adc	r13, r23
    4584:	e8 1e       	adc	r14, r24
    4586:	f9 1e       	adc	r15, r25
    4588:	a0 85       	ldd	r26, Z+8	; 0x08
    458a:	b1 85       	ldd	r27, Z+9	; 0x09
    458c:	20 e8       	ldi	r18, 0x80	; 128
    458e:	31 e5       	ldi	r19, 0x51	; 81
    4590:	41 e0       	ldi	r20, 0x01	; 1
    4592:	50 e0       	ldi	r21, 0x00	; 0
    4594:	0e 94 74 40 	call	0x80e8	; 0x80e8 <__mulshisi3>
    4598:	c6 0e       	add	r12, r22
    459a:	d7 1e       	adc	r13, r23
    459c:	e8 1e       	adc	r14, r24
    459e:	f9 1e       	adc	r15, r25
    45a0:	06 80       	ldd	r0, Z+6	; 0x06
    45a2:	f7 81       	ldd	r31, Z+7	; 0x07
    45a4:	e0 2d       	mov	r30, r0
    45a6:	df 01       	movw	r26, r30
    45a8:	a6 54       	subi	r26, 0x46	; 70
    45aa:	b1 09       	sbc	r27, r1
    45ac:	20 e8       	ldi	r18, 0x80	; 128
    45ae:	33 e3       	ldi	r19, 0x33	; 51
    45b0:	41 ee       	ldi	r20, 0xE1	; 225
    45b2:	51 e0       	ldi	r21, 0x01	; 1
    45b4:	0e 94 74 40 	call	0x80e8	; 0x80e8 <__mulshisi3>
    45b8:	c6 0e       	add	r12, r22
    45ba:	d7 1e       	adc	r13, r23
    45bc:	e8 1e       	adc	r14, r24
    45be:	f9 1e       	adc	r15, r25
    45c0:	cf 01       	movw	r24, r30
    45c2:	85 54       	subi	r24, 0x45	; 69
    45c4:	91 09       	sbc	r25, r1
    45c6:	dc 01       	movw	r26, r24
    45c8:	0a f4       	brpl	.+2      	; 0x45cc <_Z14epoch_from_ltmP2tm+0x84>
    45ca:	13 96       	adiw	r26, 0x03	; 3
    45cc:	b5 95       	asr	r27
    45ce:	a7 95       	ror	r26
    45d0:	b5 95       	asr	r27
    45d2:	a7 95       	ror	r26
    45d4:	20 e8       	ldi	r18, 0x80	; 128
    45d6:	31 e5       	ldi	r19, 0x51	; 81
    45d8:	41 e0       	ldi	r20, 0x01	; 1
    45da:	50 e0       	ldi	r21, 0x00	; 0
    45dc:	0e 94 74 40 	call	0x80e8	; 0x80e8 <__mulshisi3>
    45e0:	c6 0e       	add	r12, r22
    45e2:	d7 1e       	adc	r13, r23
    45e4:	e8 1e       	adc	r14, r24
    45e6:	f9 1e       	adc	r15, r25
    45e8:	cf 01       	movw	r24, r30
    45ea:	01 97       	sbiw	r24, 0x01	; 1
    45ec:	64 e6       	ldi	r22, 0x64	; 100
    45ee:	70 e0       	ldi	r23, 0x00	; 0
    45f0:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <__divmodhi4>
    45f4:	db 01       	movw	r26, r22
    45f6:	20 e8       	ldi	r18, 0x80	; 128
    45f8:	3e ea       	ldi	r19, 0xAE	; 174
    45fa:	4e ef       	ldi	r20, 0xFE	; 254
    45fc:	5f ef       	ldi	r21, 0xFF	; 255
    45fe:	0e 94 74 40 	call	0x80e8	; 0x80e8 <__mulshisi3>
    4602:	c6 0e       	add	r12, r22
    4604:	d7 1e       	adc	r13, r23
    4606:	e8 1e       	adc	r14, r24
    4608:	f9 1e       	adc	r15, r25
    460a:	cf 01       	movw	r24, r30
    460c:	85 5d       	subi	r24, 0xD5	; 213
    460e:	9e 4f       	sbci	r25, 0xFE	; 254
    4610:	60 e9       	ldi	r22, 0x90	; 144
    4612:	71 e0       	ldi	r23, 0x01	; 1
    4614:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <__divmodhi4>
    4618:	db 01       	movw	r26, r22
    461a:	20 e8       	ldi	r18, 0x80	; 128
    461c:	31 e5       	ldi	r19, 0x51	; 81
    461e:	41 e0       	ldi	r20, 0x01	; 1
    4620:	50 e0       	ldi	r21, 0x00	; 0
    4622:	0e 94 74 40 	call	0x80e8	; 0x80e8 <__mulshisi3>
    4626:	6c 0d       	add	r22, r12
    4628:	7d 1d       	adc	r23, r13
    462a:	8e 1d       	adc	r24, r14
    462c:	9f 1d       	adc	r25, r15
    462e:	ff 90       	pop	r15
    4630:	ef 90       	pop	r14
    4632:	df 90       	pop	r13
    4634:	cf 90       	pop	r12
    4636:	08 95       	ret

00004638 <ds3231_get_epoch>:
    4638:	4f 92       	push	r4
    463a:	5f 92       	push	r5
    463c:	6f 92       	push	r6
    463e:	7f 92       	push	r7
    4640:	8f 92       	push	r8
    4642:	9f 92       	push	r9
    4644:	af 92       	push	r10
    4646:	bf 92       	push	r11
    4648:	cf 92       	push	r12
    464a:	df 92       	push	r13
    464c:	ef 92       	push	r14
    464e:	ff 92       	push	r15
    4650:	0f 93       	push	r16
    4652:	1f 93       	push	r17
    4654:	cf 93       	push	r28
    4656:	df 93       	push	r29
    4658:	cd b7       	in	r28, 0x3d	; 61
    465a:	de b7       	in	r29, 0x3e	; 62
    465c:	63 97       	sbiw	r28, 0x13	; 19
    465e:	cd bf       	out	0x3d, r28	; 61
    4660:	de bf       	out	0x3e, r29	; 62
    4662:	5c 01       	movw	r10, r24
    4664:	ae 01       	movw	r20, r28
    4666:	4f 5f       	subi	r20, 0xFF	; 255
    4668:	5f 4f       	sbci	r21, 0xFF	; 255
    466a:	87 e0       	ldi	r24, 0x07	; 7
    466c:	da 01       	movw	r26, r20
    466e:	1d 92       	st	X+, r1
    4670:	8a 95       	dec	r24
    4672:	e9 f7       	brne	.-6      	; 0x466e <ds3231_get_epoch+0x36>
    4674:	27 e0       	ldi	r18, 0x07	; 7
    4676:	60 e0       	ldi	r22, 0x00	; 0
    4678:	80 ed       	ldi	r24, 0xD0	; 208
    467a:	0e 94 b1 2b 	call	0x5762	; 0x5762 <I2C_0_GetData>
    467e:	98 2e       	mov	r9, r24
    4680:	b7 e0       	ldi	r27, 0x07	; 7
    4682:	8b 13       	cpse	r24, r27
    4684:	04 c1       	rjmp	.+520    	; 0x488e <ds3231_get_epoch+0x256>
    4686:	fe 01       	movw	r30, r28
    4688:	38 96       	adiw	r30, 0x08	; 8
    468a:	8c e0       	ldi	r24, 0x0C	; 12
    468c:	df 01       	movw	r26, r30
    468e:	1d 92       	st	X+, r1
    4690:	8a 95       	dec	r24
    4692:	e9 f7       	brne	.-6      	; 0x468e <ds3231_get_epoch+0x56>
    4694:	2f 81       	ldd	r18, Y+7	; 0x07
    4696:	82 2f       	mov	r24, r18
    4698:	8f 70       	andi	r24, 0x0F	; 15
    469a:	e8 2e       	mov	r14, r24
    469c:	f1 2c       	mov	r15, r1
    469e:	c7 01       	movw	r24, r14
    46a0:	8c 59       	subi	r24, 0x9C	; 156
    46a2:	9f 4f       	sbci	r25, 0xFF	; 255
    46a4:	22 95       	swap	r18
    46a6:	2f 70       	andi	r18, 0x0F	; 15
    46a8:	30 e0       	ldi	r19, 0x00	; 0
    46aa:	79 01       	movw	r14, r18
    46ac:	ee 0c       	add	r14, r14
    46ae:	ff 1c       	adc	r15, r15
    46b0:	22 0f       	add	r18, r18
    46b2:	33 1f       	adc	r19, r19
    46b4:	22 0f       	add	r18, r18
    46b6:	33 1f       	adc	r19, r19
    46b8:	22 0f       	add	r18, r18
    46ba:	33 1f       	adc	r19, r19
    46bc:	2e 0d       	add	r18, r14
    46be:	3f 1d       	adc	r19, r15
    46c0:	7c 01       	movw	r14, r24
    46c2:	e2 0e       	add	r14, r18
    46c4:	f3 1e       	adc	r15, r19
    46c6:	67 01       	movw	r12, r14
    46c8:	b4 e9       	ldi	r27, 0x94	; 148
    46ca:	cb 1a       	sub	r12, r27
    46cc:	b8 ef       	ldi	r27, 0xF8	; 248
    46ce:	db 0a       	sbc	r13, r27
    46d0:	8e 81       	ldd	r24, Y+6	; 0x06
    46d2:	98 2f       	mov	r25, r24
    46d4:	9f 70       	andi	r25, 0x0F	; 15
    46d6:	82 95       	swap	r24
    46d8:	8f 70       	andi	r24, 0x0F	; 15
    46da:	88 0f       	add	r24, r24
    46dc:	08 2f       	mov	r16, r24
    46de:	00 0f       	add	r16, r16
    46e0:	00 0f       	add	r16, r16
    46e2:	80 0f       	add	r24, r16
    46e4:	08 2f       	mov	r16, r24
    46e6:	09 0f       	add	r16, r25
    46e8:	ed 81       	ldd	r30, Y+5	; 0x05
    46ea:	8e 2f       	mov	r24, r30
    46ec:	8f 70       	andi	r24, 0x0F	; 15
    46ee:	e2 95       	swap	r30
    46f0:	ef 70       	andi	r30, 0x0F	; 15
    46f2:	ee 0f       	add	r30, r30
    46f4:	8e 2e       	mov	r8, r30
    46f6:	88 0c       	add	r8, r8
    46f8:	88 0c       	add	r8, r8
    46fa:	e8 0d       	add	r30, r8
    46fc:	8e 2e       	mov	r8, r30
    46fe:	88 0e       	add	r8, r24
    4700:	11 e0       	ldi	r17, 0x01	; 1
    4702:	10 17       	cp	r17, r16
    4704:	60 f4       	brcc	.+24     	; 0x471e <ds3231_get_epoch+0xe6>
    4706:	61 2f       	mov	r22, r17
    4708:	c6 01       	movw	r24, r12
    470a:	0e 94 49 01 	call	0x292	; 0x292 <month_length>
    470e:	28 89       	ldd	r18, Y+16	; 0x10
    4710:	39 89       	ldd	r19, Y+17	; 0x11
    4712:	28 0f       	add	r18, r24
    4714:	31 1d       	adc	r19, r1
    4716:	28 8b       	std	Y+16, r18	; 0x10
    4718:	39 8b       	std	Y+17, r19	; 0x11
    471a:	1f 5f       	subi	r17, 0xFF	; 255
    471c:	f2 cf       	rjmp	.-28     	; 0x4702 <ds3231_get_epoch+0xca>
    471e:	e8 2d       	mov	r30, r8
    4720:	88 0c       	add	r8, r8
    4722:	ff 0b       	sbc	r31, r31
    4724:	31 97       	sbiw	r30, 0x01	; 1
    4726:	88 89       	ldd	r24, Y+16	; 0x10
    4728:	99 89       	ldd	r25, Y+17	; 0x11
    472a:	e8 0f       	add	r30, r24
    472c:	f9 1f       	adc	r31, r25
    472e:	89 81       	ldd	r24, Y+1	; 0x01
    4730:	98 2f       	mov	r25, r24
    4732:	92 95       	swap	r25
    4734:	9f 70       	andi	r25, 0x0F	; 15
    4736:	99 0f       	add	r25, r25
    4738:	49 2f       	mov	r20, r25
    473a:	44 0f       	add	r20, r20
    473c:	44 0f       	add	r20, r20
    473e:	49 0f       	add	r20, r25
    4740:	8f 70       	andi	r24, 0x0F	; 15
    4742:	48 0f       	add	r20, r24
    4744:	3a 81       	ldd	r19, Y+2	; 0x02
    4746:	23 2f       	mov	r18, r19
    4748:	22 95       	swap	r18
    474a:	2f 70       	andi	r18, 0x0F	; 15
    474c:	22 0f       	add	r18, r18
    474e:	92 2f       	mov	r25, r18
    4750:	99 0f       	add	r25, r25
    4752:	99 0f       	add	r25, r25
    4754:	82 2f       	mov	r24, r18
    4756:	89 0f       	add	r24, r25
    4758:	23 2f       	mov	r18, r19
    475a:	2f 70       	andi	r18, 0x0F	; 15
    475c:	28 0f       	add	r18, r24
    475e:	ab 81       	ldd	r26, Y+3	; 0x03
    4760:	6a 2f       	mov	r22, r26
    4762:	70 e0       	ldi	r23, 0x00	; 0
    4764:	cb 01       	movw	r24, r22
    4766:	95 95       	asr	r25
    4768:	87 95       	ror	r24
    476a:	95 95       	asr	r25
    476c:	87 95       	ror	r24
    476e:	95 95       	asr	r25
    4770:	87 95       	ror	r24
    4772:	95 95       	asr	r25
    4774:	87 95       	ror	r24
    4776:	95 95       	asr	r25
    4778:	87 95       	ror	r24
    477a:	38 2f       	mov	r19, r24
    477c:	31 70       	andi	r19, 0x01	; 1
    477e:	cb 01       	movw	r24, r22
    4780:	95 95       	asr	r25
    4782:	87 95       	ror	r24
    4784:	95 95       	asr	r25
    4786:	87 95       	ror	r24
    4788:	95 95       	asr	r25
    478a:	87 95       	ror	r24
    478c:	95 95       	asr	r25
    478e:	87 95       	ror	r24
    4790:	81 70       	andi	r24, 0x01	; 1
    4792:	88 0f       	add	r24, r24
    4794:	98 2f       	mov	r25, r24
    4796:	99 0f       	add	r25, r25
    4798:	99 0f       	add	r25, r25
    479a:	89 0f       	add	r24, r25
    479c:	af 70       	andi	r26, 0x0F	; 15
    479e:	a8 0f       	add	r26, r24
    47a0:	06 2e       	mov	r0, r22
    47a2:	67 2f       	mov	r22, r23
    47a4:	00 0c       	add	r0, r0
    47a6:	66 1f       	adc	r22, r22
    47a8:	77 0b       	sbc	r23, r23
    47aa:	00 0c       	add	r0, r0
    47ac:	66 1f       	adc	r22, r22
    47ae:	77 1f       	adc	r23, r23
    47b0:	60 ff       	sbrs	r22, 0
    47b2:	04 c0       	rjmp	.+8      	; 0x47bc <ds3231_get_epoch+0x184>
    47b4:	33 23       	and	r19, r19
    47b6:	21 f0       	breq	.+8      	; 0x47c0 <ds3231_get_epoch+0x188>
    47b8:	a4 5f       	subi	r26, 0xF4	; 244
    47ba:	02 c0       	rjmp	.+4      	; 0x47c0 <ds3231_get_epoch+0x188>
    47bc:	31 11       	cpse	r19, r1
    47be:	ac 5e       	subi	r26, 0xEC	; 236
    47c0:	04 2e       	mov	r0, r20
    47c2:	00 0c       	add	r0, r0
    47c4:	55 0b       	sbc	r21, r21
    47c6:	8c e3       	ldi	r24, 0x3C	; 60
    47c8:	28 02       	muls	r18, r24
    47ca:	40 0d       	add	r20, r0
    47cc:	51 1d       	adc	r21, r1
    47ce:	11 24       	eor	r1, r1
    47d0:	0a 2e       	mov	r0, r26
    47d2:	00 0c       	add	r0, r0
    47d4:	bb 0b       	sbc	r27, r27
    47d6:	20 e1       	ldi	r18, 0x10	; 16
    47d8:	3e e0       	ldi	r19, 0x0E	; 14
    47da:	0e 94 62 40 	call	0x80c4	; 0x80c4 <__usmulhisi3>
    47de:	2a 01       	movw	r4, r20
    47e0:	55 0f       	add	r21, r21
    47e2:	66 08       	sbc	r6, r6
    47e4:	77 08       	sbc	r7, r7
    47e6:	46 0e       	add	r4, r22
    47e8:	57 1e       	adc	r5, r23
    47ea:	68 1e       	adc	r6, r24
    47ec:	79 1e       	adc	r7, r25
    47ee:	df 01       	movw	r26, r30
    47f0:	20 e8       	ldi	r18, 0x80	; 128
    47f2:	31 e5       	ldi	r19, 0x51	; 81
    47f4:	41 e0       	ldi	r20, 0x01	; 1
    47f6:	50 e0       	ldi	r21, 0x00	; 0
    47f8:	0e 94 74 40 	call	0x80e8	; 0x80e8 <__mulshisi3>
    47fc:	46 0e       	add	r4, r22
    47fe:	57 1e       	adc	r5, r23
    4800:	68 1e       	adc	r6, r24
    4802:	79 1e       	adc	r7, r25
    4804:	d7 01       	movw	r26, r14
    4806:	a6 54       	subi	r26, 0x46	; 70
    4808:	b1 09       	sbc	r27, r1
    480a:	20 e8       	ldi	r18, 0x80	; 128
    480c:	33 e3       	ldi	r19, 0x33	; 51
    480e:	41 ee       	ldi	r20, 0xE1	; 225
    4810:	51 e0       	ldi	r21, 0x01	; 1
    4812:	0e 94 74 40 	call	0x80e8	; 0x80e8 <__mulshisi3>
    4816:	46 0e       	add	r4, r22
    4818:	57 1e       	adc	r5, r23
    481a:	68 1e       	adc	r6, r24
    481c:	79 1e       	adc	r7, r25
    481e:	c7 01       	movw	r24, r14
    4820:	85 54       	subi	r24, 0x45	; 69
    4822:	91 09       	sbc	r25, r1
    4824:	dc 01       	movw	r26, r24
    4826:	0a f4       	brpl	.+2      	; 0x482a <ds3231_get_epoch+0x1f2>
    4828:	13 96       	adiw	r26, 0x03	; 3
    482a:	b5 95       	asr	r27
    482c:	a7 95       	ror	r26
    482e:	b5 95       	asr	r27
    4830:	a7 95       	ror	r26
    4832:	20 e8       	ldi	r18, 0x80	; 128
    4834:	31 e5       	ldi	r19, 0x51	; 81
    4836:	41 e0       	ldi	r20, 0x01	; 1
    4838:	50 e0       	ldi	r21, 0x00	; 0
    483a:	0e 94 74 40 	call	0x80e8	; 0x80e8 <__mulshisi3>
    483e:	46 0e       	add	r4, r22
    4840:	57 1e       	adc	r5, r23
    4842:	68 1e       	adc	r6, r24
    4844:	79 1e       	adc	r7, r25
    4846:	c7 01       	movw	r24, r14
    4848:	01 97       	sbiw	r24, 0x01	; 1
    484a:	64 e6       	ldi	r22, 0x64	; 100
    484c:	70 e0       	ldi	r23, 0x00	; 0
    484e:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <__divmodhi4>
    4852:	db 01       	movw	r26, r22
    4854:	20 e8       	ldi	r18, 0x80	; 128
    4856:	3e ea       	ldi	r19, 0xAE	; 174
    4858:	4e ef       	ldi	r20, 0xFE	; 254
    485a:	5f ef       	ldi	r21, 0xFF	; 255
    485c:	0e 94 74 40 	call	0x80e8	; 0x80e8 <__mulshisi3>
    4860:	46 0e       	add	r4, r22
    4862:	57 1e       	adc	r5, r23
    4864:	68 1e       	adc	r6, r24
    4866:	79 1e       	adc	r7, r25
    4868:	c7 01       	movw	r24, r14
    486a:	85 5d       	subi	r24, 0xD5	; 213
    486c:	9e 4f       	sbci	r25, 0xFE	; 254
    486e:	60 e9       	ldi	r22, 0x90	; 144
    4870:	71 e0       	ldi	r23, 0x01	; 1
    4872:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <__divmodhi4>
    4876:	db 01       	movw	r26, r22
    4878:	20 e8       	ldi	r18, 0x80	; 128
    487a:	31 e5       	ldi	r19, 0x51	; 81
    487c:	41 e0       	ldi	r20, 0x01	; 1
    487e:	50 e0       	ldi	r21, 0x00	; 0
    4880:	0e 94 74 40 	call	0x80e8	; 0x80e8 <__mulshisi3>
    4884:	64 0d       	add	r22, r4
    4886:	75 1d       	adc	r23, r5
    4888:	86 1d       	adc	r24, r6
    488a:	97 1d       	adc	r25, r7
    488c:	03 c0       	rjmp	.+6      	; 0x4894 <ds3231_get_epoch+0x25c>
    488e:	60 e0       	ldi	r22, 0x00	; 0
    4890:	70 e0       	ldi	r23, 0x00	; 0
    4892:	cb 01       	movw	r24, r22
    4894:	a1 14       	cp	r10, r1
    4896:	b1 04       	cpc	r11, r1
    4898:	41 f0       	breq	.+16     	; 0x48aa <ds3231_get_epoch+0x272>
    489a:	a7 e0       	ldi	r26, 0x07	; 7
    489c:	9a 16       	cp	r9, r26
    489e:	11 f0       	breq	.+4      	; 0x48a4 <ds3231_get_epoch+0x26c>
    48a0:	2c ef       	ldi	r18, 0xFC	; 252
    48a2:	01 c0       	rjmp	.+2      	; 0x48a6 <ds3231_get_epoch+0x26e>
    48a4:	20 e0       	ldi	r18, 0x00	; 0
    48a6:	f5 01       	movw	r30, r10
    48a8:	20 83       	st	Z, r18
    48aa:	63 96       	adiw	r28, 0x13	; 19
    48ac:	cd bf       	out	0x3d, r28	; 61
    48ae:	de bf       	out	0x3e, r29	; 62
    48b0:	df 91       	pop	r29
    48b2:	cf 91       	pop	r28
    48b4:	1f 91       	pop	r17
    48b6:	0f 91       	pop	r16
    48b8:	ff 90       	pop	r15
    48ba:	ef 90       	pop	r14
    48bc:	df 90       	pop	r13
    48be:	cf 90       	pop	r12
    48c0:	bf 90       	pop	r11
    48c2:	af 90       	pop	r10
    48c4:	9f 90       	pop	r9
    48c6:	8f 90       	pop	r8
    48c8:	7f 90       	pop	r7
    48ca:	6f 90       	pop	r6
    48cc:	5f 90       	pop	r5
    48ce:	4f 90       	pop	r4
    48d0:	08 95       	ret

000048d2 <RTC_String2Epoch>:
    48d2:	7f 92       	push	r7
    48d4:	8f 92       	push	r8
    48d6:	9f 92       	push	r9
    48d8:	af 92       	push	r10
    48da:	bf 92       	push	r11
    48dc:	cf 92       	push	r12
    48de:	df 92       	push	r13
    48e0:	ef 92       	push	r14
    48e2:	ff 92       	push	r15
    48e4:	0f 93       	push	r16
    48e6:	1f 93       	push	r17
    48e8:	cf 93       	push	r28
    48ea:	df 93       	push	r29
    48ec:	cd b7       	in	r28, 0x3d	; 61
    48ee:	de b7       	in	r29, 0x3e	; 62
    48f0:	2c 97       	sbiw	r28, 0x0c	; 12
    48f2:	cd bf       	out	0x3d, r28	; 61
    48f4:	de bf       	out	0x3e, r29	; 62
    48f6:	6c 01       	movw	r12, r24
    48f8:	8b 01       	movw	r16, r22
    48fa:	fe 01       	movw	r30, r28
    48fc:	31 96       	adiw	r30, 0x01	; 1
    48fe:	8c e0       	ldi	r24, 0x0C	; 12
    4900:	df 01       	movw	r26, r30
    4902:	1d 92       	st	X+, r1
    4904:	8a 95       	dec	r24
    4906:	e9 f7       	brne	.-6      	; 0x4902 <RTC_String2Epoch+0x30>
    4908:	61 15       	cp	r22, r1
    490a:	71 05       	cpc	r23, r1
    490c:	09 f4       	brne	.+2      	; 0x4910 <RTC_String2Epoch+0x3e>
    490e:	63 c0       	rjmp	.+198    	; 0x49d6 <RTC_String2Epoch+0x104>
    4910:	cb 01       	movw	r24, r22
    4912:	0a 96       	adiw	r24, 0x0a	; 10
    4914:	0e 94 9b 22 	call	0x4536	; 0x4536 <_Z8char2bcdPc>
    4918:	a8 2e       	mov	r10, r24
    491a:	c8 01       	movw	r24, r16
    491c:	08 96       	adiw	r24, 0x08	; 8
    491e:	0e 94 9b 22 	call	0x4536	; 0x4536 <_Z8char2bcdPc>
    4922:	b8 2e       	mov	r11, r24
    4924:	c8 01       	movw	r24, r16
    4926:	06 96       	adiw	r24, 0x06	; 6
    4928:	0e 94 9b 22 	call	0x4536	; 0x4536 <_Z8char2bcdPc>
    492c:	f8 2e       	mov	r15, r24
    492e:	c8 01       	movw	r24, r16
    4930:	04 96       	adiw	r24, 0x04	; 4
    4932:	0e 94 9b 22 	call	0x4536	; 0x4536 <_Z8char2bcdPc>
    4936:	88 2e       	mov	r8, r24
    4938:	c8 01       	movw	r24, r16
    493a:	02 96       	adiw	r24, 0x02	; 2
    493c:	0e 94 9b 22 	call	0x4536	; 0x4536 <_Z8char2bcdPc>
    4940:	78 2e       	mov	r7, r24
    4942:	c8 01       	movw	r24, r16
    4944:	0e 94 9b 22 	call	0x4536	; 0x4536 <_Z8char2bcdPc>
    4948:	18 2f       	mov	r17, r24
    494a:	8f 2d       	mov	r24, r15
    494c:	0e 94 70 22 	call	0x44e0	; 0x44e0 <_Z7bcd2dech>
    4950:	98 2e       	mov	r9, r24
    4952:	81 2f       	mov	r24, r17
    4954:	0e 94 70 22 	call	0x44e0	; 0x44e0 <_Z7bcd2dech>
    4958:	e8 2e       	mov	r14, r24
    495a:	f1 2c       	mov	r15, r1
    495c:	c7 01       	movw	r24, r14
    495e:	8c 59       	subi	r24, 0x9C	; 156
    4960:	9f 4f       	sbci	r25, 0xFF	; 255
    4962:	8f 83       	std	Y+7, r24	; 0x07
    4964:	98 87       	std	Y+8, r25	; 0x08
    4966:	b0 e3       	ldi	r27, 0x30	; 48
    4968:	eb 1a       	sub	r14, r27
    496a:	b8 ef       	ldi	r27, 0xF8	; 248
    496c:	fb 0a       	sbc	r15, r27
    496e:	87 2d       	mov	r24, r7
    4970:	0e 94 70 22 	call	0x44e0	; 0x44e0 <_Z7bcd2dech>
    4974:	08 2f       	mov	r16, r24
    4976:	8f ef       	ldi	r24, 0xFF	; 255
    4978:	80 0f       	add	r24, r16
    497a:	8e 83       	std	Y+6, r24	; 0x06
    497c:	88 2d       	mov	r24, r8
    497e:	0e 94 70 22 	call	0x44e0	; 0x44e0 <_Z7bcd2dech>
    4982:	8c 83       	std	Y+4, r24	; 0x04
    4984:	11 e0       	ldi	r17, 0x01	; 1
    4986:	10 17       	cp	r17, r16
    4988:	60 f4       	brcc	.+24     	; 0x49a2 <RTC_String2Epoch+0xd0>
    498a:	61 2f       	mov	r22, r17
    498c:	c7 01       	movw	r24, r14
    498e:	0e 94 49 01 	call	0x292	; 0x292 <month_length>
    4992:	29 85       	ldd	r18, Y+9	; 0x09
    4994:	3a 85       	ldd	r19, Y+10	; 0x0a
    4996:	28 0f       	add	r18, r24
    4998:	31 1d       	adc	r19, r1
    499a:	29 87       	std	Y+9, r18	; 0x09
    499c:	3a 87       	std	Y+10, r19	; 0x0a
    499e:	1f 5f       	subi	r17, 0xFF	; 255
    49a0:	f2 cf       	rjmp	.-28     	; 0x4986 <RTC_String2Epoch+0xb4>
    49a2:	8c 81       	ldd	r24, Y+4	; 0x04
    49a4:	08 2e       	mov	r0, r24
    49a6:	00 0c       	add	r0, r0
    49a8:	99 0b       	sbc	r25, r25
    49aa:	01 97       	sbiw	r24, 0x01	; 1
    49ac:	29 85       	ldd	r18, Y+9	; 0x09
    49ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    49b0:	82 0f       	add	r24, r18
    49b2:	93 1f       	adc	r25, r19
    49b4:	89 87       	std	Y+9, r24	; 0x09
    49b6:	9a 87       	std	Y+10, r25	; 0x0a
    49b8:	8a 2d       	mov	r24, r10
    49ba:	0e 94 70 22 	call	0x44e0	; 0x44e0 <_Z7bcd2dech>
    49be:	18 2f       	mov	r17, r24
    49c0:	8b 2d       	mov	r24, r11
    49c2:	0e 94 70 22 	call	0x44e0	; 0x44e0 <_Z7bcd2dech>
    49c6:	9b 82       	std	Y+3, r9	; 0x03
    49c8:	8a 83       	std	Y+2, r24	; 0x02
    49ca:	19 83       	std	Y+1, r17	; 0x01
    49cc:	ce 01       	movw	r24, r28
    49ce:	01 96       	adiw	r24, 0x01	; 1
    49d0:	0e 94 a4 22 	call	0x4548	; 0x4548 <_Z14epoch_from_ltmP2tm>
    49d4:	04 c0       	rjmp	.+8      	; 0x49de <RTC_String2Epoch+0x10c>
    49d6:	80 e0       	ldi	r24, 0x00	; 0
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	0e 94 1c 23 	call	0x4638	; 0x4638 <ds3231_get_epoch>
    49de:	c1 14       	cp	r12, r1
    49e0:	d1 04       	cpc	r13, r1
    49e2:	49 f0       	breq	.+18     	; 0x49f6 <RTC_String2Epoch+0x124>
    49e4:	21 e0       	ldi	r18, 0x01	; 1
    49e6:	61 15       	cp	r22, r1
    49e8:	71 05       	cpc	r23, r1
    49ea:	81 05       	cpc	r24, r1
    49ec:	91 05       	cpc	r25, r1
    49ee:	09 f0       	breq	.+2      	; 0x49f2 <RTC_String2Epoch+0x120>
    49f0:	20 e0       	ldi	r18, 0x00	; 0
    49f2:	f6 01       	movw	r30, r12
    49f4:	20 83       	st	Z, r18
    49f6:	2c 96       	adiw	r28, 0x0c	; 12
    49f8:	cd bf       	out	0x3d, r28	; 61
    49fa:	de bf       	out	0x3e, r29	; 62
    49fc:	df 91       	pop	r29
    49fe:	cf 91       	pop	r28
    4a00:	1f 91       	pop	r17
    4a02:	0f 91       	pop	r16
    4a04:	ff 90       	pop	r15
    4a06:	ef 90       	pop	r14
    4a08:	df 90       	pop	r13
    4a0a:	cf 90       	pop	r12
    4a0c:	bf 90       	pop	r11
    4a0e:	af 90       	pop	r10
    4a10:	9f 90       	pop	r9
    4a12:	8f 90       	pop	r8
    4a14:	7f 90       	pop	r7
    4a16:	08 95       	ret

00004a18 <ds3231_get_temp>:
    4a18:	0f 93       	push	r16
    4a1a:	1f 93       	push	r17
    4a1c:	cf 93       	push	r28
    4a1e:	df 93       	push	r29
    4a20:	00 d0       	rcall	.+0      	; 0x4a22 <ds3231_get_temp+0xa>
    4a22:	cd b7       	in	r28, 0x3d	; 61
    4a24:	de b7       	in	r29, 0x3e	; 62
    4a26:	8c 01       	movw	r16, r24
    4a28:	19 82       	std	Y+1, r1	; 0x01
    4a2a:	1a 82       	std	Y+2, r1	; 0x02
    4a2c:	22 e0       	ldi	r18, 0x02	; 2
    4a2e:	ae 01       	movw	r20, r28
    4a30:	4f 5f       	subi	r20, 0xFF	; 255
    4a32:	5f 4f       	sbci	r21, 0xFF	; 255
    4a34:	61 e1       	ldi	r22, 0x11	; 17
    4a36:	80 ed       	ldi	r24, 0xD0	; 208
    4a38:	0e 94 b1 2b 	call	0x5762	; 0x5762 <I2C_0_GetData>
    4a3c:	91 e0       	ldi	r25, 0x01	; 1
    4a3e:	82 30       	cpi	r24, 0x02	; 2
    4a40:	09 f4       	brne	.+2      	; 0x4a44 <ds3231_get_temp+0x2c>
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	82 30       	cpi	r24, 0x02	; 2
    4a46:	49 f4       	brne	.+18     	; 0x4a5a <ds3231_get_temp+0x42>
    4a48:	29 81       	ldd	r18, Y+1	; 0x01
    4a4a:	30 e0       	ldi	r19, 0x00	; 0
    4a4c:	32 2f       	mov	r19, r18
    4a4e:	22 27       	eor	r18, r18
    4a50:	8a 81       	ldd	r24, Y+2	; 0x02
    4a52:	28 2b       	or	r18, r24
    4a54:	f8 01       	movw	r30, r16
    4a56:	20 83       	st	Z, r18
    4a58:	31 83       	std	Z+1, r19	; 0x01
    4a5a:	89 2f       	mov	r24, r25
    4a5c:	0f 90       	pop	r0
    4a5e:	0f 90       	pop	r0
    4a60:	df 91       	pop	r29
    4a62:	cf 91       	pop	r28
    4a64:	1f 91       	pop	r17
    4a66:	0f 91       	pop	r16
    4a68:	08 95       	ret

00004a6a <ds3231_set_date_time_arducon>:
    4a6a:	ff 92       	push	r15
    4a6c:	0f 93       	push	r16
    4a6e:	1f 93       	push	r17
    4a70:	cf 93       	push	r28
    4a72:	df 93       	push	r29
    4a74:	cd b7       	in	r28, 0x3d	; 61
    4a76:	de b7       	in	r29, 0x3e	; 62
    4a78:	27 97       	sbiw	r28, 0x07	; 7
    4a7a:	cd bf       	out	0x3d, r28	; 61
    4a7c:	de bf       	out	0x3e, r29	; 62
    4a7e:	fe 01       	movw	r30, r28
    4a80:	31 96       	adiw	r30, 0x01	; 1
    4a82:	27 e0       	ldi	r18, 0x07	; 7
    4a84:	df 01       	movw	r26, r30
    4a86:	1d 92       	st	X+, r1
    4a88:	2a 95       	dec	r18
    4a8a:	e9 f7       	brne	.-6      	; 0x4a86 <ds3231_set_date_time_arducon+0x1c>
    4a8c:	00 97       	sbiw	r24, 0x00	; 0
    4a8e:	81 f1       	breq	.+96     	; 0x4af0 <ds3231_set_date_time_arducon+0x86>
    4a90:	f6 2e       	mov	r15, r22
    4a92:	8c 01       	movw	r16, r24
    4a94:	0a 96       	adiw	r24, 0x0a	; 10
    4a96:	0e 94 9b 22 	call	0x4536	; 0x4536 <_Z8char2bcdPc>
    4a9a:	89 83       	std	Y+1, r24	; 0x01
    4a9c:	c8 01       	movw	r24, r16
    4a9e:	08 96       	adiw	r24, 0x08	; 8
    4aa0:	0e 94 9b 22 	call	0x4536	; 0x4536 <_Z8char2bcdPc>
    4aa4:	8a 83       	std	Y+2, r24	; 0x02
    4aa6:	c8 01       	movw	r24, r16
    4aa8:	06 96       	adiw	r24, 0x06	; 6
    4aaa:	0e 94 9b 22 	call	0x4536	; 0x4536 <_Z8char2bcdPc>
    4aae:	8b 83       	std	Y+3, r24	; 0x03
    4ab0:	c8 01       	movw	r24, r16
    4ab2:	04 96       	adiw	r24, 0x04	; 4
    4ab4:	0e 94 9b 22 	call	0x4536	; 0x4536 <_Z8char2bcdPc>
    4ab8:	8d 83       	std	Y+5, r24	; 0x05
    4aba:	c8 01       	movw	r24, r16
    4abc:	02 96       	adiw	r24, 0x02	; 2
    4abe:	0e 94 9b 22 	call	0x4536	; 0x4536 <_Z8char2bcdPc>
    4ac2:	8e 83       	std	Y+6, r24	; 0x06
    4ac4:	c8 01       	movw	r24, r16
    4ac6:	0e 94 9b 22 	call	0x4536	; 0x4536 <_Z8char2bcdPc>
    4aca:	8f 83       	std	Y+7, r24	; 0x07
    4acc:	6f 2d       	mov	r22, r15
    4ace:	66 0f       	add	r22, r22
    4ad0:	66 0f       	add	r22, r22
    4ad2:	66 0f       	add	r22, r22
    4ad4:	6f 19       	sub	r22, r15
    4ad6:	27 e0       	ldi	r18, 0x07	; 7
    4ad8:	ae 01       	movw	r20, r28
    4ada:	4f 5f       	subi	r20, 0xFF	; 255
    4adc:	5f 4f       	sbci	r21, 0xFF	; 255
    4ade:	80 ed       	ldi	r24, 0xD0	; 208
    4ae0:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <I2C_0_SendData>
    4ae4:	91 e0       	ldi	r25, 0x01	; 1
    4ae6:	87 30       	cpi	r24, 0x07	; 7
    4ae8:	09 f4       	brne	.+2      	; 0x4aec <ds3231_set_date_time_arducon+0x82>
    4aea:	90 e0       	ldi	r25, 0x00	; 0
    4aec:	89 2f       	mov	r24, r25
    4aee:	01 c0       	rjmp	.+2      	; 0x4af2 <ds3231_set_date_time_arducon+0x88>
    4af0:	81 e0       	ldi	r24, 0x01	; 1
    4af2:	27 96       	adiw	r28, 0x07	; 7
    4af4:	cd bf       	out	0x3d, r28	; 61
    4af6:	de bf       	out	0x3e, r29	; 62
    4af8:	df 91       	pop	r29
    4afa:	cf 91       	pop	r28
    4afc:	1f 91       	pop	r17
    4afe:	0f 91       	pop	r16
    4b00:	ff 90       	pop	r15
    4b02:	08 95       	ret

00004b04 <ds3231_set_date_time>:
    4b04:	cf 93       	push	r28
    4b06:	df 93       	push	r29
    4b08:	cd b7       	in	r28, 0x3d	; 61
    4b0a:	de b7       	in	r29, 0x3e	; 62
    4b0c:	27 97       	sbiw	r28, 0x07	; 7
    4b0e:	cd bf       	out	0x3d, r28	; 61
    4b10:	de bf       	out	0x3e, r29	; 62
    4b12:	fc 01       	movw	r30, r24
    4b14:	81 e0       	ldi	r24, 0x01	; 1
    4b16:	8c 83       	std	Y+4, r24	; 0x04
    4b18:	82 89       	ldd	r24, Z+18	; 0x12
    4b1a:	20 ed       	ldi	r18, 0xD0	; 208
    4b1c:	28 0f       	add	r18, r24
    4b1e:	91 89       	ldd	r25, Z+17	; 0x11
    4b20:	89 2f       	mov	r24, r25
    4b22:	90 e0       	ldi	r25, 0x00	; 0
    4b24:	c0 97       	sbiw	r24, 0x30	; 48
    4b26:	82 95       	swap	r24
    4b28:	92 95       	swap	r25
    4b2a:	90 7f       	andi	r25, 0xF0	; 240
    4b2c:	98 27       	eor	r25, r24
    4b2e:	80 7f       	andi	r24, 0xF0	; 240
    4b30:	98 27       	eor	r25, r24
    4b32:	82 2b       	or	r24, r18
    4b34:	89 83       	std	Y+1, r24	; 0x01
    4b36:	87 85       	ldd	r24, Z+15	; 0x0f
    4b38:	20 ed       	ldi	r18, 0xD0	; 208
    4b3a:	28 0f       	add	r18, r24
    4b3c:	96 85       	ldd	r25, Z+14	; 0x0e
    4b3e:	89 2f       	mov	r24, r25
    4b40:	90 e0       	ldi	r25, 0x00	; 0
    4b42:	c0 97       	sbiw	r24, 0x30	; 48
    4b44:	82 95       	swap	r24
    4b46:	92 95       	swap	r25
    4b48:	90 7f       	andi	r25, 0xF0	; 240
    4b4a:	98 27       	eor	r25, r24
    4b4c:	80 7f       	andi	r24, 0xF0	; 240
    4b4e:	98 27       	eor	r25, r24
    4b50:	82 2b       	or	r24, r18
    4b52:	8a 83       	std	Y+2, r24	; 0x02
    4b54:	84 85       	ldd	r24, Z+12	; 0x0c
    4b56:	20 ed       	ldi	r18, 0xD0	; 208
    4b58:	28 0f       	add	r18, r24
    4b5a:	93 85       	ldd	r25, Z+11	; 0x0b
    4b5c:	89 2f       	mov	r24, r25
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	c0 97       	sbiw	r24, 0x30	; 48
    4b62:	82 95       	swap	r24
    4b64:	92 95       	swap	r25
    4b66:	90 7f       	andi	r25, 0xF0	; 240
    4b68:	98 27       	eor	r25, r24
    4b6a:	80 7f       	andi	r24, 0xF0	; 240
    4b6c:	98 27       	eor	r25, r24
    4b6e:	82 2b       	or	r24, r18
    4b70:	8b 83       	std	Y+3, r24	; 0x03
    4b72:	81 85       	ldd	r24, Z+9	; 0x09
    4b74:	20 ed       	ldi	r18, 0xD0	; 208
    4b76:	28 0f       	add	r18, r24
    4b78:	90 85       	ldd	r25, Z+8	; 0x08
    4b7a:	89 2f       	mov	r24, r25
    4b7c:	90 e0       	ldi	r25, 0x00	; 0
    4b7e:	c0 97       	sbiw	r24, 0x30	; 48
    4b80:	82 95       	swap	r24
    4b82:	92 95       	swap	r25
    4b84:	90 7f       	andi	r25, 0xF0	; 240
    4b86:	98 27       	eor	r25, r24
    4b88:	80 7f       	andi	r24, 0xF0	; 240
    4b8a:	98 27       	eor	r25, r24
    4b8c:	82 2b       	or	r24, r18
    4b8e:	8d 83       	std	Y+5, r24	; 0x05
    4b90:	86 81       	ldd	r24, Z+6	; 0x06
    4b92:	20 ed       	ldi	r18, 0xD0	; 208
    4b94:	28 0f       	add	r18, r24
    4b96:	95 81       	ldd	r25, Z+5	; 0x05
    4b98:	89 2f       	mov	r24, r25
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	c0 97       	sbiw	r24, 0x30	; 48
    4b9e:	82 95       	swap	r24
    4ba0:	92 95       	swap	r25
    4ba2:	90 7f       	andi	r25, 0xF0	; 240
    4ba4:	98 27       	eor	r25, r24
    4ba6:	80 7f       	andi	r24, 0xF0	; 240
    4ba8:	98 27       	eor	r25, r24
    4baa:	82 2b       	or	r24, r18
    4bac:	8e 83       	std	Y+6, r24	; 0x06
    4bae:	83 81       	ldd	r24, Z+3	; 0x03
    4bb0:	20 ed       	ldi	r18, 0xD0	; 208
    4bb2:	28 0f       	add	r18, r24
    4bb4:	92 81       	ldd	r25, Z+2	; 0x02
    4bb6:	89 2f       	mov	r24, r25
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	c0 97       	sbiw	r24, 0x30	; 48
    4bbc:	82 95       	swap	r24
    4bbe:	92 95       	swap	r25
    4bc0:	90 7f       	andi	r25, 0xF0	; 240
    4bc2:	98 27       	eor	r25, r24
    4bc4:	80 7f       	andi	r24, 0xF0	; 240
    4bc6:	98 27       	eor	r25, r24
    4bc8:	82 2b       	or	r24, r18
    4bca:	8f 83       	std	Y+7, r24	; 0x07
    4bcc:	86 2f       	mov	r24, r22
    4bce:	88 0f       	add	r24, r24
    4bd0:	88 0f       	add	r24, r24
    4bd2:	88 0f       	add	r24, r24
    4bd4:	86 1b       	sub	r24, r22
    4bd6:	68 2f       	mov	r22, r24
    4bd8:	27 e0       	ldi	r18, 0x07	; 7
    4bda:	ae 01       	movw	r20, r28
    4bdc:	4f 5f       	subi	r20, 0xFF	; 255
    4bde:	5f 4f       	sbci	r21, 0xFF	; 255
    4be0:	80 ed       	ldi	r24, 0xD0	; 208
    4be2:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <I2C_0_SendData>
    4be6:	27 96       	adiw	r28, 0x07	; 7
    4be8:	cd bf       	out	0x3d, r28	; 61
    4bea:	de bf       	out	0x3e, r29	; 62
    4bec:	df 91       	pop	r29
    4bee:	cf 91       	pop	r28
    4bf0:	08 95       	ret

00004bf2 <ds3231_set_aging>:


	void ds3231_set_aging(int8_t data_in)
	{
    4bf2:	cf 93       	push	r28
    4bf4:	df 93       	push	r29
    4bf6:	1f 92       	push	r1
    4bf8:	cd b7       	in	r28, 0x3d	; 61
    4bfa:	de b7       	in	r29, 0x3e	; 62
		int8_t data[1];
		
		data[0] = data_in;
    4bfc:	89 83       	std	Y+1, r24	; 0x01
		I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1);
    4bfe:	21 e0       	ldi	r18, 0x01	; 1
    4c00:	ae 01       	movw	r20, r28
    4c02:	4f 5f       	subi	r20, 0xFF	; 255
    4c04:	5f 4f       	sbci	r21, 0xFF	; 255
    4c06:	60 e1       	ldi	r22, 0x10	; 16
    4c08:	80 ed       	ldi	r24, 0xD0	; 208
    4c0a:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <I2C_0_SendData>
	}
    4c0e:	0f 90       	pop	r0
    4c10:	df 91       	pop	r29
    4c12:	cf 91       	pop	r28
    4c14:	08 95       	ret

00004c16 <ds3231_get_aging>:


	int8_t ds3231_get_aging()
	{
    4c16:	cf 93       	push	r28
    4c18:	df 93       	push	r29
    4c1a:	1f 92       	push	r1
    4c1c:	cd b7       	in	r28, 0x3d	; 61
    4c1e:	de b7       	in	r29, 0x3e	; 62
		int8_t data[1];
		
		I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1);
    4c20:	21 e0       	ldi	r18, 0x01	; 1
    4c22:	ae 01       	movw	r20, r28
    4c24:	4f 5f       	subi	r20, 0xFF	; 255
    4c26:	5f 4f       	sbci	r21, 0xFF	; 255
    4c28:	60 e1       	ldi	r22, 0x10	; 16
    4c2a:	80 ed       	ldi	r24, 0xD0	; 208
    4c2c:	0e 94 b1 2b 	call	0x5762	; 0x5762 <I2C_0_GetData>
		return(data[0]);
	}
    4c30:	89 81       	ldd	r24, Y+1	; 0x01
    4c32:	0f 90       	pop	r0
    4c34:	df 91       	pop	r29
    4c36:	cf 91       	pop	r28
    4c38:	08 95       	ret

00004c3a <ds3231_responding>:

	bool ds3231_responding()
	{
    4c3a:	cf 93       	push	r28
    4c3c:	df 93       	push	r29
    4c3e:	1f 92       	push	r1
    4c40:	cd b7       	in	r28, 0x3d	; 61
    4c42:	de b7       	in	r29, 0x3e	; 62
		bool responseReceived = false;
		int8_t data[1];		
		responseReceived = (I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_AGING, (uint8_t *)data, 1) == 1);
    4c44:	21 e0       	ldi	r18, 0x01	; 1
    4c46:	ae 01       	movw	r20, r28
    4c48:	4f 5f       	subi	r20, 0xFF	; 255
    4c4a:	5f 4f       	sbci	r21, 0xFF	; 255
    4c4c:	60 e1       	ldi	r22, 0x10	; 16
    4c4e:	80 ed       	ldi	r24, 0xD0	; 208
    4c50:	0e 94 b1 2b 	call	0x5762	; 0x5762 <I2C_0_GetData>
    4c54:	91 e0       	ldi	r25, 0x01	; 1
    4c56:	81 30       	cpi	r24, 0x01	; 1
    4c58:	09 f0       	breq	.+2      	; 0x4c5c <ds3231_responding+0x22>
    4c5a:	90 e0       	ldi	r25, 0x00	; 0
		return(responseReceived);
	}
    4c5c:	89 2f       	mov	r24, r25
    4c5e:	0f 90       	pop	r0
    4c60:	df 91       	pop	r29
    4c62:	cf 91       	pop	r28
    4c64:	08 95       	ret

00004c66 <ds3231_init>:

time_t epoch_from_ltm(tm *ltm);

bool ds3231_init()
{
	I2C_0_Init();
    4c66:	0e 94 57 2b 	call	0x56ae	; 0x56ae <I2C_0_Init>
	return (!ds3231_responding());
    4c6a:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <ds3231_responding>
}
    4c6e:	91 e0       	ldi	r25, 0x01	; 1
    4c70:	89 27       	eor	r24, r25
    4c72:	08 95       	ret

00004c74 <ds3231_sync2nearestMinute>:

/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
BOOL ds3231_sync2nearestMinute()
{
    4c74:	ff 92       	push	r15
    4c76:	0f 93       	push	r16
    4c78:	1f 93       	push	r17
    4c7a:	cf 93       	push	r28
    4c7c:	df 93       	push	r29
    4c7e:	cd b7       	in	r28, 0x3d	; 61
    4c80:	de b7       	in	r29, 0x3e	; 62
    4c82:	28 97       	sbiw	r28, 0x08	; 8
    4c84:	cd bf       	out	0x3d, r28	; 61
    4c86:	de bf       	out	0x3e, r29	; 62
	BOOL err = FALSE;
	uint8_t data[8] = { 0, 0, 0 };
    4c88:	ae 01       	movw	r20, r28
    4c8a:	4f 5f       	subi	r20, 0xFF	; 255
    4c8c:	5f 4f       	sbci	r21, 0xFF	; 255
    4c8e:	88 e0       	ldi	r24, 0x08	; 8
    4c90:	fa 01       	movw	r30, r20
    4c92:	11 92       	st	Z+, r1
    4c94:	8a 95       	dec	r24
    4c96:	e9 f7       	brne	.-6      	; 0x4c92 <ds3231_sync2nearestMinute+0x1e>

	if(I2C_0_GetData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 3) == 3)
    4c98:	23 e0       	ldi	r18, 0x03	; 3
    4c9a:	60 e0       	ldi	r22, 0x00	; 0
    4c9c:	80 ed       	ldi	r24, 0xD0	; 208
    4c9e:	0e 94 b1 2b 	call	0x5762	; 0x5762 <I2C_0_GetData>
    4ca2:	83 30       	cpi	r24, 0x03	; 3
    4ca4:	09 f0       	breq	.+2      	; 0x4ca8 <ds3231_sync2nearestMinute+0x34>
    4ca6:	86 c0       	rjmp	.+268    	; 0x4db4 <ds3231_sync2nearestMinute+0x140>
		uint8_t hour10;
		uint8_t hour;
		BOOL am_pm;
		BOOL twelvehour;

		seconds = bcd2dec(data[0]);
    4ca8:	89 81       	ldd	r24, Y+1	; 0x01
    4caa:	0e 94 70 22 	call	0x44e0	; 0x44e0 <_Z7bcd2dech>
    4cae:	08 2f       	mov	r16, r24
		minutes = bcd2dec(data[1]);
    4cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    4cb2:	0e 94 70 22 	call	0x44e0	; 0x44e0 <_Z7bcd2dech>
    4cb6:	68 2f       	mov	r22, r24
		am_pm = ((data[2] >> 5) & 0x01);
    4cb8:	1b 81       	ldd	r17, Y+3	; 0x03
    4cba:	41 2f       	mov	r20, r17
    4cbc:	50 e0       	ldi	r21, 0x00	; 0
    4cbe:	9a 01       	movw	r18, r20
    4cc0:	35 95       	asr	r19
    4cc2:	27 95       	ror	r18
    4cc4:	35 95       	asr	r19
    4cc6:	27 95       	ror	r18
    4cc8:	35 95       	asr	r19
    4cca:	27 95       	ror	r18
    4ccc:	35 95       	asr	r19
    4cce:	27 95       	ror	r18
    4cd0:	35 95       	asr	r19
    4cd2:	27 95       	ror	r18
    4cd4:	92 2f       	mov	r25, r18
    4cd6:	91 70       	andi	r25, 0x01	; 1
		hour10 = ((data[2] >> 4) & 0x01);
    4cd8:	9a 01       	movw	r18, r20
    4cda:	35 95       	asr	r19
    4cdc:	27 95       	ror	r18
    4cde:	35 95       	asr	r19
    4ce0:	27 95       	ror	r18
    4ce2:	35 95       	asr	r19
    4ce4:	27 95       	ror	r18
    4ce6:	35 95       	asr	r19
    4ce8:	27 95       	ror	r18
    4cea:	21 70       	andi	r18, 0x01	; 1
		hour = (data[2] & 0x0f);
    4cec:	1f 70       	andi	r17, 0x0F	; 15

		twelvehour = ((data[2] >> 6) & 0x01);
    4cee:	04 2e       	mov	r0, r20
    4cf0:	45 2f       	mov	r20, r21
    4cf2:	00 0c       	add	r0, r0
    4cf4:	44 1f       	adc	r20, r20
    4cf6:	55 0b       	sbc	r21, r21
    4cf8:	00 0c       	add	r0, r0
    4cfa:	44 1f       	adc	r20, r20
    4cfc:	55 1f       	adc	r21, r21

		if(!twelvehour && am_pm)
    4cfe:	f4 2f       	mov	r31, r20
    4d00:	f1 70       	andi	r31, 0x01	; 1
    4d02:	ff 2e       	mov	r15, r31
    4d04:	40 fd       	sbrc	r20, 0
    4d06:	02 c0       	rjmp	.+4      	; 0x4d0c <ds3231_sync2nearestMinute+0x98>
    4d08:	91 11       	cpse	r25, r1
		{
			hour10 = 2;
    4d0a:	22 e0       	ldi	r18, 0x02	; 2
		}

		hours = 10 * hour10 + hour;
    4d0c:	22 0f       	add	r18, r18
    4d0e:	92 2f       	mov	r25, r18
    4d10:	99 0f       	add	r25, r25
    4d12:	99 0f       	add	r25, r25
    4d14:	29 0f       	add	r18, r25
    4d16:	12 0f       	add	r17, r18

		if(seconds > 30)
    4d18:	0f 31       	cpi	r16, 0x1F	; 31
    4d1a:	48 f0       	brcs	.+18     	; 0x4d2e <ds3231_sync2nearestMinute+0xba>
		{
			minutes++;
    4d1c:	6f 5f       	subi	r22, 0xFF	; 255

			if(minutes > 59)
    4d1e:	6c 33       	cpi	r22, 0x3C	; 60
    4d20:	40 f0       	brcs	.+16     	; 0x4d32 <ds3231_sync2nearestMinute+0xbe>
			{
				minutes = 0;
				hours++;
    4d22:	1f 5f       	subi	r17, 0xFF	; 255

				if(hours > 23) /* Don't attempt to synchronize at midnight */
    4d24:	18 31       	cpi	r17, 0x18	; 24
    4d26:	38 f4       	brcc	.+14     	; 0x4d36 <ds3231_sync2nearestMinute+0xc2>
		{
			minutes++;

			if(minutes > 59)
			{
				minutes = 0;
    4d28:	60 e0       	ldi	r22, 0x00	; 0
/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
BOOL ds3231_sync2nearestMinute()
{
	BOOL err = FALSE;
    4d2a:	80 e0       	ldi	r24, 0x00	; 0
    4d2c:	06 c0       	rjmp	.+12     	; 0x4d3a <ds3231_sync2nearestMinute+0xc6>
    4d2e:	80 e0       	ldi	r24, 0x00	; 0
    4d30:	04 c0       	rjmp	.+8      	; 0x4d3a <ds3231_sync2nearestMinute+0xc6>
    4d32:	80 e0       	ldi	r24, 0x00	; 0
    4d34:	02 c0       	rjmp	.+4      	; 0x4d3a <ds3231_sync2nearestMinute+0xc6>
		{
			minutes++;

			if(minutes > 59)
			{
				minutes = 0;
    4d36:	60 e0       	ldi	r22, 0x00	; 0
				hours++;

				if(hours > 23) /* Don't attempt to synchronize at midnight */
				{
					err = TRUE;
    4d38:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
		}

		if(!err)
    4d3a:	81 11       	cpse	r24, r1
    4d3c:	3c c0       	rjmp	.+120    	; 0x4db6 <ds3231_sync2nearestMinute+0x142>
		{
			data[0] = 0; /* seconds = 00 */
    4d3e:	19 82       	std	Y+1, r1	; 0x01
			data[1] = dec2bcd(minutes);
    4d40:	86 2f       	mov	r24, r22
    4d42:	0e 94 82 22 	call	0x4504	; 0x4504 <_Z7dec2bcdh>
    4d46:	8a 83       	std	Y+2, r24	; 0x02
			data[2] = 0;
    4d48:	1b 82       	std	Y+3, r1	; 0x03

			if(twelvehour)
    4d4a:	ff 20       	and	r15, r15
    4d4c:	61 f0       	breq	.+24     	; 0x4d66 <ds3231_sync2nearestMinute+0xf2>
			{
				data[2] |= 0x40; /* set  12-hour bit */
    4d4e:	80 e4       	ldi	r24, 0x40	; 64
    4d50:	8b 83       	std	Y+3, r24	; 0x03

				if(hours >= 12)
    4d52:	1c 30       	cpi	r17, 0x0C	; 12
    4d54:	10 f0       	brcs	.+4      	; 0x4d5a <ds3231_sync2nearestMinute+0xe6>
				{
					data[2] |= 0x20; /* set pm bit */
    4d56:	80 e6       	ldi	r24, 0x60	; 96
    4d58:	8b 83       	std	Y+3, r24	; 0x03
				}

				if(hours >= 10)
    4d5a:	1a 30       	cpi	r17, 0x0A	; 10
    4d5c:	68 f0       	brcs	.+26     	; 0x4d78 <ds3231_sync2nearestMinute+0x104>
				{
					data[2] |= 0x10;
    4d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d60:	80 61       	ori	r24, 0x10	; 16
    4d62:	8b 83       	std	Y+3, r24	; 0x03
    4d64:	09 c0       	rjmp	.+18     	; 0x4d78 <ds3231_sync2nearestMinute+0x104>
				}
			}
			else
			{
				if(hours >= 20)
    4d66:	14 31       	cpi	r17, 0x14	; 20
    4d68:	18 f0       	brcs	.+6      	; 0x4d70 <ds3231_sync2nearestMinute+0xfc>
				{
					data[2] |= 0x20; /* set 20 bit */
    4d6a:	80 e2       	ldi	r24, 0x20	; 32
    4d6c:	8b 83       	std	Y+3, r24	; 0x03
    4d6e:	04 c0       	rjmp	.+8      	; 0x4d78 <ds3231_sync2nearestMinute+0x104>
				}
				else if(hours >= 10)
    4d70:	1a 30       	cpi	r17, 0x0A	; 10
    4d72:	10 f0       	brcs	.+4      	; 0x4d78 <ds3231_sync2nearestMinute+0x104>
				{
					data[2] |= 0x10; /* set 10 bit */
    4d74:	80 e1       	ldi	r24, 0x10	; 16
    4d76:	8b 83       	std	Y+3, r24	; 0x03
				}
			}

			data[2] |= hours % 10;
    4d78:	8d ec       	ldi	r24, 0xCD	; 205
    4d7a:	18 9f       	mul	r17, r24
    4d7c:	81 2d       	mov	r24, r1
    4d7e:	11 24       	eor	r1, r1
    4d80:	86 95       	lsr	r24
    4d82:	86 95       	lsr	r24
    4d84:	86 95       	lsr	r24
    4d86:	88 0f       	add	r24, r24
    4d88:	98 2f       	mov	r25, r24
    4d8a:	99 0f       	add	r25, r25
    4d8c:	99 0f       	add	r25, r25
    4d8e:	89 0f       	add	r24, r25
    4d90:	18 1b       	sub	r17, r24
    4d92:	8b 81       	ldd	r24, Y+3	; 0x03
    4d94:	18 2b       	or	r17, r24
    4d96:	1b 83       	std	Y+3, r17	; 0x03
			
			err = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 4) != 4);
    4d98:	24 e0       	ldi	r18, 0x04	; 4
    4d9a:	ae 01       	movw	r20, r28
    4d9c:	4f 5f       	subi	r20, 0xFF	; 255
    4d9e:	5f 4f       	sbci	r21, 0xFF	; 255
    4da0:	60 e0       	ldi	r22, 0x00	; 0
    4da2:	80 ed       	ldi	r24, 0xD0	; 208
    4da4:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <I2C_0_SendData>
    4da8:	91 e0       	ldi	r25, 0x01	; 1
    4daa:	84 30       	cpi	r24, 0x04	; 4
    4dac:	09 f4       	brne	.+2      	; 0x4db0 <ds3231_sync2nearestMinute+0x13c>
    4dae:	90 e0       	ldi	r25, 0x00	; 0
    4db0:	89 2f       	mov	r24, r25
    4db2:	01 c0       	rjmp	.+2      	; 0x4db6 <ds3231_sync2nearestMinute+0x142>
/* This simple synchronization approach works for all times except 12 midnight. If synchronization
results in the advancement to the next day, then one day would be lost. Instead of introducing that
error, this function merely fails to synchronize at midnight. */
BOOL ds3231_sync2nearestMinute()
{
	BOOL err = FALSE;
    4db4:	80 e0       	ldi	r24, 0x00	; 0
			err = (I2C_0_SendData(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, (uint8_t *)data, 4) != 4);
		}
	}

	return err;
}
    4db6:	28 96       	adiw	r28, 0x08	; 8
    4db8:	cd bf       	out	0x3d, r28	; 61
    4dba:	de bf       	out	0x3e, r29	; 62
    4dbc:	df 91       	pop	r29
    4dbe:	cf 91       	pop	r28
    4dc0:	1f 91       	pop	r17
    4dc2:	0f 91       	pop	r16
    4dc4:	ff 90       	pop	r15
    4dc6:	08 95       	ret

00004dc8 <_ZN13EepromManagerC1Ev>:
extern uint16_t g_80m_power_level_mW;

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
    4dc8:	08 95       	ret

00004dca <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
    4dca:	08 95       	ret

00004dcc <_Z21avr_eeprom_write_bytejh>:
#include <avr/io.h>

typedef uint16_t eeprom_addr_t;

// to write
void avr_eeprom_write_byte(eeprom_addr_t index, uint8_t in) {
    4dcc:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    4dce:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    4dd2:	91 fd       	sbrc	r25, 1
    4dd4:	fc cf       	rjmp	.-8      	; 0x4dce <_Z21avr_eeprom_write_bytejh+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    4dd6:	8d e9       	ldi	r24, 0x9D	; 157
    4dd8:	93 e1       	ldi	r25, 0x13	; 19
    4dda:	84 bf       	out	0x34, r24	; 52
    4ddc:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint8_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    4de0:	f9 01       	movw	r30, r18
    4de2:	fc 5e       	subi	r31, 0xEC	; 236
    4de4:	60 83       	st	Z, r22
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    4de6:	90 e0       	ldi	r25, 0x00	; 0
    4de8:	84 bf       	out	0x34, r24	; 52
    4dea:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    4dee:	08 95       	ret

00004df0 <_Z21avr_eeprom_write_wordjj>:
}

void avr_eeprom_write_word(eeprom_addr_t index, uint16_t in) {
    4df0:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    4df2:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    4df6:	91 fd       	sbrc	r25, 1
    4df8:	fc cf       	rjmp	.-8      	; 0x4df2 <_Z21avr_eeprom_write_wordjj+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    4dfa:	8d e9       	ldi	r24, 0x9D	; 157
    4dfc:	93 e1       	ldi	r25, 0x13	; 19
    4dfe:	84 bf       	out	0x34, r24	; 52
    4e00:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint16_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    4e04:	f9 01       	movw	r30, r18
    4e06:	fc 5e       	subi	r31, 0xEC	; 236
    4e08:	60 83       	st	Z, r22
    4e0a:	71 83       	std	Z+1, r23	; 0x01
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    4e0c:	90 e0       	ldi	r25, 0x00	; 0
    4e0e:	84 bf       	out	0x34, r24	; 52
    4e10:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    4e14:	08 95       	ret

00004e16 <_Z22avr_eeprom_write_dwordjm>:
}

void avr_eeprom_write_dword(eeprom_addr_t index, uint32_t in) {
    4e16:	9c 01       	movw	r18, r24
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
    4e18:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    4e1c:	91 fd       	sbrc	r25, 1
    4e1e:	fc cf       	rjmp	.-8      	; 0x4e18 <_Z22avr_eeprom_write_dwordjm+0x2>
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    4e20:	8d e9       	ldi	r24, 0x9D	; 157
    4e22:	93 e1       	ldi	r25, 0x13	; 19
    4e24:	84 bf       	out	0x34, r24	; 52
    4e26:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
	*(uint32_t*)(eeprom_addr_t)(MAPPED_EEPROM_START+index) = in;
    4e2a:	f9 01       	movw	r30, r18
    4e2c:	fc 5e       	subi	r31, 0xEC	; 236
    4e2e:	40 83       	st	Z, r20
    4e30:	51 83       	std	Z+1, r21	; 0x01
    4e32:	62 83       	std	Z+2, r22	; 0x02
    4e34:	73 83       	std	Z+3, r23	; 0x03
	_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    4e36:	90 e0       	ldi	r25, 0x00	; 0
    4e38:	84 bf       	out	0x34, r24	; 52
    4e3a:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    4e3e:	08 95       	ret

00004e40 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
}

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
    4e40:	0f 93       	push	r16
    4e42:	1f 93       	push	r17
    4e44:	cf 93       	push	r28
    4e46:	df 93       	push	r29
	if(!val)
    4e48:	41 15       	cp	r20, r1
    4e4a:	51 05       	cpc	r21, r1
    4e4c:	09 f4       	brne	.+2      	; 0x4e50 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
    4e4e:	7c c0       	rjmp	.+248    	; 0x4f48 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
	{
		return;
	}

	switch(v)
    4e50:	86 2f       	mov	r24, r22
    4e52:	90 e0       	ldi	r25, 0x00	; 0
    4e54:	84 33       	cpi	r24, 0x34	; 52
    4e56:	91 05       	cpc	r25, r1
    4e58:	08 f0       	brcs	.+2      	; 0x4e5c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x1c>
    4e5a:	76 c0       	rjmp	.+236    	; 0x4f48 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
    4e5c:	ea 01       	movw	r28, r20
    4e5e:	fc 01       	movw	r30, r24
    4e60:	ec 58       	subi	r30, 0x8C	; 140
    4e62:	ff 4f       	sbci	r31, 0xFF	; 255
    4e64:	0c 94 4a 40 	jmp	0x8094	; 0x8094 <__tablejump2__>
	{
		case Frequency:
		{
			avr_eeprom_write_dword(Frequency, *(uint32_t*)val);
    4e68:	48 81       	ld	r20, Y
    4e6a:	59 81       	ldd	r21, Y+1	; 0x01
    4e6c:	6a 81       	ldd	r22, Y+2	; 0x02
    4e6e:	7b 81       	ldd	r23, Y+3	; 0x03
    4e70:	8b e2       	ldi	r24, 0x2B	; 43
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    4e78:	67 c0       	rjmp	.+206    	; 0x4f48 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case RTTY_offset:
		{
			avr_eeprom_write_dword(RTTY_offset, *(uint32_t*)val);
    4e7a:	48 81       	ld	r20, Y
    4e7c:	59 81       	ldd	r21, Y+1	; 0x01
    4e7e:	6a 81       	ldd	r22, Y+2	; 0x02
    4e80:	7b 81       	ldd	r23, Y+3	; 0x03
    4e82:	8f e2       	ldi	r24, 0x2F	; 47
    4e84:	90 e0       	ldi	r25, 0x00	; 0
    4e86:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    4e8a:	5e c0       	rjmp	.+188    	; 0x4f48 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case RF_Power:
		{
			avr_eeprom_write_word(RF_Power, *(uint32_t*)val);			
    4e8c:	68 81       	ld	r22, Y
    4e8e:	79 81       	ldd	r23, Y+1	; 0x01
    4e90:	83 e3       	ldi	r24, 0x33	; 51
    4e92:	90 e0       	ldi	r25, 0x00	; 0
    4e94:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <_Z21avr_eeprom_write_wordjj>
		}
		break;
    4e98:	57 c0       	rjmp	.+174    	; 0x4f48 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>
		
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
    4e9a:	8a 01       	movw	r16, r20
    4e9c:	0f 5f       	subi	r16, 0xFF	; 255
    4e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    4ea0:	68 81       	ld	r22, Y
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;
    4ea2:	8a e0       	ldi	r24, 0x0A	; 10
    4ea4:	90 e0       	ldi	r25, 0x00	; 0

			while(c)
    4ea6:	66 23       	and	r22, r22
    4ea8:	51 f0       	breq	.+20     	; 0x4ebe <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x7e>
			{
				avr_eeprom_write_byte(j++, c);
    4eaa:	ec 01       	movw	r28, r24
    4eac:	21 96       	adiw	r28, 0x01	; 1
    4eae:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <_Z21avr_eeprom_write_bytejh>
				c = *char_addr++;
    4eb2:	f8 01       	movw	r30, r16
    4eb4:	60 81       	ld	r22, Z
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;

			while(c)
			{
				avr_eeprom_write_byte(j++, c);
    4eb6:	ce 01       	movw	r24, r28
				c = *char_addr++;
    4eb8:	0f 5f       	subi	r16, 0xFF	; 255
    4eba:	1f 4f       	sbci	r17, 0xFF	; 255
			char* char_addr = (char*)val;
			char c = *char_addr++;
			
			eeprom_addr_t j = (eeprom_addr_t)StationID_text;

			while(c)
    4ebc:	f4 cf       	rjmp	.-24     	; 0x4ea6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x66>
			{
				avr_eeprom_write_byte(j++, c);
				c = *char_addr++;
			}

			avr_eeprom_write_byte(j, 0);
    4ebe:	60 e0       	ldi	r22, 0x00	; 0
    4ec0:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <_Z21avr_eeprom_write_bytejh>
		}
		break;
    4ec4:	41 c0       	rjmp	.+130    	; 0x4f48 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
    4ec6:	8a 01       	movw	r16, r20
    4ec8:	0f 5f       	subi	r16, 0xFF	; 255
    4eca:	1f 4f       	sbci	r17, 0xFF	; 255
    4ecc:	68 81       	ld	r22, Y
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
    4ece:	8f e1       	ldi	r24, 0x1F	; 31
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
    4ed0:	66 23       	and	r22, r22
    4ed2:	59 f0       	breq	.+22     	; 0x4eea <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				avr_eeprom_write_byte(j++, c);
    4ed4:	c1 e0       	ldi	r28, 0x01	; 1
    4ed6:	c8 0f       	add	r28, r24
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <_Z21avr_eeprom_write_bytejh>
				c = *uint8_addr++;
    4ede:	f8 01       	movw	r30, r16
    4ee0:	60 81       	ld	r22, Z
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
			{
				avr_eeprom_write_byte(j++, c);
    4ee2:	8c 2f       	mov	r24, r28
				c = *uint8_addr++;
    4ee4:	0f 5f       	subi	r16, 0xFF	; 255
    4ee6:	1f 4f       	sbci	r17, 0xFF	; 255
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
			uint8_t j = (uint8_t)UnlockCode;
			
			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
    4ee8:	f3 cf       	rjmp	.-26     	; 0x4ed0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x90>
			{
				avr_eeprom_write_byte(j++, c);
				c = *uint8_addr++;
			}

			avr_eeprom_write_byte(j, 0);
    4eea:	60 e0       	ldi	r22, 0x00	; 0
    4eec:	90 e0       	ldi	r25, 0x00	; 0
    4eee:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <_Z21avr_eeprom_write_bytejh>
		}
		break;
    4ef2:	2a c0       	rjmp	.+84     	; 0x4f48 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Id_codespeed:
		{
			avr_eeprom_write_byte(Id_codespeed, *(uint8_t*)val);
    4ef4:	68 81       	ld	r22, Y
    4ef6:	88 e2       	ldi	r24, 0x28	; 40
    4ef8:	90 e0       	ldi	r25, 0x00	; 0
    4efa:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <_Z21avr_eeprom_write_bytejh>
		}
		break;
    4efe:	24 c0       	rjmp	.+72     	; 0x4f48 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Fox_setting:
		{
			avr_eeprom_write_byte(Fox_setting, *(uint8_t*)val);
    4f00:	68 81       	ld	r22, Y
    4f02:	89 e2       	ldi	r24, 0x29	; 41
    4f04:	90 e0       	ldi	r25, 0x00	; 0
    4f06:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <_Z21avr_eeprom_write_bytejh>
		}
		break;
    4f0a:	1e c0       	rjmp	.+60     	; 0x4f48 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Event_start_epoch:
		{
			avr_eeprom_write_dword(Event_start_epoch, *(uint32_t*)val);
    4f0c:	48 81       	ld	r20, Y
    4f0e:	59 81       	ldd	r21, Y+1	; 0x01
    4f10:	6a 81       	ldd	r22, Y+2	; 0x02
    4f12:	7b 81       	ldd	r23, Y+3	; 0x03
    4f14:	82 e0       	ldi	r24, 0x02	; 2
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    4f1c:	15 c0       	rjmp	.+42     	; 0x4f48 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Event_finish_epoch:
		{
			avr_eeprom_write_dword(Event_finish_epoch, *(uint32_t*)val);
    4f1e:	48 81       	ld	r20, Y
    4f20:	59 81       	ldd	r21, Y+1	; 0x01
    4f22:	6a 81       	ldd	r22, Y+2	; 0x02
    4f24:	7b 81       	ldd	r23, Y+3	; 0x03
    4f26:	86 e0       	ldi	r24, 0x06	; 6
    4f28:	90 e0       	ldi	r25, 0x00	; 0
    4f2a:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <_Z22avr_eeprom_write_dwordjm>
		}
		break;
    4f2e:	0c c0       	rjmp	.+24     	; 0x4f48 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Utc_offset:
		{
			avr_eeprom_write_byte(Utc_offset, *(uint8_t*)val);
    4f30:	68 81       	ld	r22, Y
    4f32:	8a e2       	ldi	r24, 0x2A	; 42
    4f34:	90 e0       	ldi	r25, 0x00	; 0
    4f36:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <_Z21avr_eeprom_write_bytejh>
		}
		break;
    4f3a:	06 c0       	rjmp	.+12     	; 0x4f48 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x108>

		case Eeprom_initialization_flag:
		{
			avr_eeprom_write_word(Eeprom_initialization_flag, *(uint16_t*)val);
    4f3c:	68 81       	ld	r22, Y
    4f3e:	79 81       	ldd	r23, Y+1	; 0x01
    4f40:	80 e0       	ldi	r24, 0x00	; 0
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <_Z21avr_eeprom_write_wordjj>
		{

		}
		break;
	}
}
    4f48:	df 91       	pop	r29
    4f4a:	cf 91       	pop	r28
    4f4c:	1f 91       	pop	r17
    4f4e:	0f 91       	pop	r16
    4f50:	08 95       	ret

00004f52 <_ZN13EepromManager13saveAllEEPROMEv>:

/** 
 * Store any changed EEPROM variables
 */
void EepromManager::saveAllEEPROM(void)
{
    4f52:	ef 92       	push	r14
    4f54:	ff 92       	push	r15
    4f56:	0f 93       	push	r16
    4f58:	1f 93       	push	r17
    4f5a:	cf 93       	push	r28
    4f5c:	df 93       	push	r29
    4f5e:	7c 01       	movw	r14, r24
	uint16_t i;
	
	if(g_id_codespeed != eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)))
    4f60:	88 e2       	ldi	r24, 0x28	; 40
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <eeprom_read_byte>
    4f68:	90 91 0b 40 	lds	r25, 0x400B	; 0x80400b <g_id_codespeed>
    4f6c:	89 17       	cp	r24, r25
    4f6e:	31 f0       	breq	.+12     	; 0x4f7c <_ZN13EepromManager13saveAllEEPROMEv+0x2a>
	{
		updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    4f70:	4b e0       	ldi	r20, 0x0B	; 11
    4f72:	50 e4       	ldi	r21, 0x40	; 64
    4f74:	68 e2       	ldi	r22, 0x28	; 40
    4f76:	c7 01       	movw	r24, r14
    4f78:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_fox != eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)))
    4f7c:	89 e2       	ldi	r24, 0x29	; 41
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <eeprom_read_byte>
    4f84:	90 91 1b 40 	lds	r25, 0x401B	; 0x80401b <g_fox>
    4f88:	89 17       	cp	r24, r25
    4f8a:	31 f0       	breq	.+12     	; 0x4f98 <_ZN13EepromManager13saveAllEEPROMEv+0x46>
	{
		updateEEPROMVar(Fox_setting, (void*)&g_fox);
    4f8c:	4b e1       	ldi	r20, 0x1B	; 27
    4f8e:	50 e4       	ldi	r21, 0x40	; 64
    4f90:	69 e2       	ldi	r22, 0x29	; 41
    4f92:	c7 01       	movw	r24, r14
    4f94:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_event_start_epoch != eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch)))
    4f98:	82 e0       	ldi	r24, 0x02	; 2
    4f9a:	90 e0       	ldi	r25, 0x00	; 0
    4f9c:	0e 94 16 45 	call	0x8a2c	; 0x8a2c <eeprom_read_dword>
    4fa0:	00 91 44 45 	lds	r16, 0x4544	; 0x804544 <g_event_start_epoch>
    4fa4:	10 91 45 45 	lds	r17, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    4fa8:	20 91 46 45 	lds	r18, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    4fac:	30 91 47 45 	lds	r19, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    4fb0:	60 17       	cp	r22, r16
    4fb2:	71 07       	cpc	r23, r17
    4fb4:	82 07       	cpc	r24, r18
    4fb6:	93 07       	cpc	r25, r19
    4fb8:	31 f0       	breq	.+12     	; 0x4fc6 <_ZN13EepromManager13saveAllEEPROMEv+0x74>
	{
		updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    4fba:	44 e4       	ldi	r20, 0x44	; 68
    4fbc:	55 e4       	ldi	r21, 0x45	; 69
    4fbe:	62 e0       	ldi	r22, 0x02	; 2
    4fc0:	c7 01       	movw	r24, r14
    4fc2:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_event_finish_epoch != eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch)))
    4fc6:	86 e0       	ldi	r24, 0x06	; 6
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	0e 94 16 45 	call	0x8a2c	; 0x8a2c <eeprom_read_dword>
    4fce:	00 91 48 45 	lds	r16, 0x4548	; 0x804548 <g_event_finish_epoch>
    4fd2:	10 91 49 45 	lds	r17, 0x4549	; 0x804549 <g_event_finish_epoch+0x1>
    4fd6:	20 91 4a 45 	lds	r18, 0x454A	; 0x80454a <g_event_finish_epoch+0x2>
    4fda:	30 91 4b 45 	lds	r19, 0x454B	; 0x80454b <g_event_finish_epoch+0x3>
    4fde:	60 17       	cp	r22, r16
    4fe0:	71 07       	cpc	r23, r17
    4fe2:	82 07       	cpc	r24, r18
    4fe4:	93 07       	cpc	r25, r19
    4fe6:	31 f0       	breq	.+12     	; 0x4ff4 <_ZN13EepromManager13saveAllEEPROMEv+0xa2>
	{
		updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    4fe8:	48 e4       	ldi	r20, 0x48	; 72
    4fea:	55 e4       	ldi	r21, 0x45	; 69
    4fec:	66 e0       	ldi	r22, 0x06	; 6
    4fee:	c7 01       	movw	r24, r14
    4ff0:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_utc_offset != eeprom_read_byte(&(EepromManager::ee_vars.utc_offset)))
    4ff4:	c0 91 4c 45 	lds	r28, 0x454C	; 0x80454c <g_utc_offset>
    4ff8:	0c 2e       	mov	r0, r28
    4ffa:	00 0c       	add	r0, r0
    4ffc:	dd 0b       	sbc	r29, r29
    4ffe:	8a e2       	ldi	r24, 0x2A	; 42
    5000:	90 e0       	ldi	r25, 0x00	; 0
    5002:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <eeprom_read_byte>
    5006:	90 e0       	ldi	r25, 0x00	; 0
    5008:	c8 17       	cp	r28, r24
    500a:	d9 07       	cpc	r29, r25
    500c:	31 f0       	breq	.+12     	; 0x501a <_ZN13EepromManager13saveAllEEPROMEv+0xc8>
	{
		updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
    500e:	4c e4       	ldi	r20, 0x4C	; 76
    5010:	55 e4       	ldi	r21, 0x45	; 69
    5012:	6a e2       	ldi	r22, 0x2A	; 42
    5014:	c7 01       	movw	r24, r14
    5016:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    501a:	c0 e0       	ldi	r28, 0x00	; 0
    501c:	d0 e0       	ldi	r29, 0x00	; 0
    501e:	c4 31       	cpi	r28, 0x14	; 20
    5020:	d1 05       	cpc	r29, r1
    5022:	a0 f4       	brcc	.+40     	; 0x504c <_ZN13EepromManager13saveAllEEPROMEv+0xfa>
	{
		if(g_messages_text[STATION_ID][i] != (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i]))))
    5024:	fe 01       	movw	r30, r28
    5026:	e7 50       	subi	r30, 0x07	; 7
    5028:	fb 4b       	sbci	r31, 0xBB	; 187
    502a:	15 89       	ldd	r17, Z+21	; 0x15
    502c:	ce 01       	movw	r24, r28
    502e:	86 5f       	subi	r24, 0xF6	; 246
    5030:	9f 4f       	sbci	r25, 0xFF	; 255
    5032:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <eeprom_read_byte>
    5036:	18 17       	cp	r17, r24
    5038:	39 f0       	breq	.+14     	; 0x5048 <_ZN13EepromManager13saveAllEEPROMEv+0xf6>
		{
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    503a:	4e e0       	ldi	r20, 0x0E	; 14
    503c:	55 e4       	ldi	r21, 0x45	; 69
    503e:	6a e0       	ldi	r22, 0x0A	; 10
    5040:	c7 01       	movw	r24, r14
    5042:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
			break;
    5046:	02 c0       	rjmp	.+4      	; 0x504c <_ZN13EepromManager13saveAllEEPROMEv+0xfa>
	if(g_utc_offset != eeprom_read_byte(&(EepromManager::ee_vars.utc_offset)))
	{
		updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
	}
	
	for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    5048:	21 96       	adiw	r28, 0x01	; 1
    504a:	e9 cf       	rjmp	.-46     	; 0x501e <_ZN13EepromManager13saveAllEEPROMEv+0xcc>
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
			break;
		}
	}

	for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    504c:	c0 e0       	ldi	r28, 0x00	; 0
    504e:	d0 e0       	ldi	r29, 0x00	; 0
    5050:	c8 30       	cpi	r28, 0x08	; 8
    5052:	d1 05       	cpc	r29, r1
    5054:	a0 f4       	brcc	.+40     	; 0x507e <_ZN13EepromManager13saveAllEEPROMEv+0x12c>
	{
		if(g_unlockCode[i] != (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i]))))
    5056:	fe 01       	movw	r30, r28
    5058:	e3 5b       	subi	r30, 0xB3	; 179
    505a:	fa 4b       	sbci	r31, 0xBA	; 186
    505c:	10 81       	ld	r17, Z
    505e:	ce 01       	movw	r24, r28
    5060:	81 5e       	subi	r24, 0xE1	; 225
    5062:	9f 4f       	sbci	r25, 0xFF	; 255
    5064:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <eeprom_read_byte>
    5068:	18 17       	cp	r17, r24
    506a:	39 f0       	breq	.+14     	; 0x507a <_ZN13EepromManager13saveAllEEPROMEv+0x128>
		{
			updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    506c:	4d e4       	ldi	r20, 0x4D	; 77
    506e:	55 e4       	ldi	r21, 0x45	; 69
    5070:	6f e1       	ldi	r22, 0x1F	; 31
    5072:	c7 01       	movw	r24, r14
    5074:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
			break;
    5078:	02 c0       	rjmp	.+4      	; 0x507e <_ZN13EepromManager13saveAllEEPROMEv+0x12c>
			updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
			break;
		}
	}

	for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    507a:	21 96       	adiw	r28, 0x01	; 1
    507c:	e9 cf       	rjmp	.-46     	; 0x5050 <_ZN13EepromManager13saveAllEEPROMEv+0xfe>
			updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
			break;
		}
	}
	
	if(g_80m_frequency != eeprom_read_dword(&(EepromManager::ee_vars.frequency)))
    507e:	8b e2       	ldi	r24, 0x2B	; 43
    5080:	90 e0       	ldi	r25, 0x00	; 0
    5082:	0e 94 16 45 	call	0x8a2c	; 0x8a2c <eeprom_read_dword>
    5086:	00 91 2c 40 	lds	r16, 0x402C	; 0x80402c <g_80m_frequency>
    508a:	10 91 2d 40 	lds	r17, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    508e:	20 91 2e 40 	lds	r18, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    5092:	30 91 2f 40 	lds	r19, 0x402F	; 0x80402f <g_80m_frequency+0x3>
    5096:	60 17       	cp	r22, r16
    5098:	71 07       	cpc	r23, r17
    509a:	82 07       	cpc	r24, r18
    509c:	93 07       	cpc	r25, r19
    509e:	31 f0       	breq	.+12     	; 0x50ac <_ZN13EepromManager13saveAllEEPROMEv+0x15a>
	{
		updateEEPROMVar(Frequency, (void*)&g_80m_frequency);
    50a0:	4c e2       	ldi	r20, 0x2C	; 44
    50a2:	50 e4       	ldi	r21, 0x40	; 64
    50a4:	6b e2       	ldi	r22, 0x2B	; 43
    50a6:	c7 01       	movw	r24, r14
    50a8:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_rtty_offset != eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset)))
    50ac:	8f e2       	ldi	r24, 0x2F	; 47
    50ae:	90 e0       	ldi	r25, 0x00	; 0
    50b0:	0e 94 16 45 	call	0x8a2c	; 0x8a2c <eeprom_read_dword>
    50b4:	00 91 32 40 	lds	r16, 0x4032	; 0x804032 <g_rtty_offset>
    50b8:	10 91 33 40 	lds	r17, 0x4033	; 0x804033 <g_rtty_offset+0x1>
    50bc:	20 91 34 40 	lds	r18, 0x4034	; 0x804034 <g_rtty_offset+0x2>
    50c0:	30 91 35 40 	lds	r19, 0x4035	; 0x804035 <g_rtty_offset+0x3>
    50c4:	60 17       	cp	r22, r16
    50c6:	71 07       	cpc	r23, r17
    50c8:	82 07       	cpc	r24, r18
    50ca:	93 07       	cpc	r25, r19
    50cc:	31 f0       	breq	.+12     	; 0x50da <_ZN13EepromManager13saveAllEEPROMEv+0x188>
	{
		updateEEPROMVar(RTTY_offset, (void*)&g_rtty_offset);
    50ce:	42 e3       	ldi	r20, 0x32	; 50
    50d0:	50 e4       	ldi	r21, 0x40	; 64
    50d2:	6f e2       	ldi	r22, 0x2F	; 47
    50d4:	c7 01       	movw	r24, r14
    50d6:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
	
	if(g_80m_power_level_mW != eeprom_read_word(&(EepromManager::ee_vars.rf_power)))
    50da:	83 e3       	ldi	r24, 0x33	; 51
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	0e 94 1d 45 	call	0x8a3a	; 0x8a3a <eeprom_read_word>
    50e2:	20 91 30 40 	lds	r18, 0x4030	; 0x804030 <g_80m_power_level_mW>
    50e6:	30 91 31 40 	lds	r19, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
    50ea:	82 17       	cp	r24, r18
    50ec:	93 07       	cpc	r25, r19
    50ee:	31 f0       	breq	.+12     	; 0x50fc <_ZN13EepromManager13saveAllEEPROMEv+0x1aa>
	{
		updateEEPROMVar(RF_Power, (void*)&g_80m_power_level_mW);
    50f0:	40 e3       	ldi	r20, 0x30	; 48
    50f2:	50 e4       	ldi	r21, 0x40	; 64
    50f4:	63 e3       	ldi	r22, 0x33	; 51
    50f6:	c7 01       	movw	r24, r14
    50f8:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
	}
}
    50fc:	df 91       	pop	r29
    50fe:	cf 91       	pop	r28
    5100:	1f 91       	pop	r17
    5102:	0f 91       	pop	r16
    5104:	ff 90       	pop	r15
    5106:	ef 90       	pop	r14
    5108:	08 95       	ret

0000510a <_ZN13EepromManager11readNonVolsEv>:


BOOL EepromManager::readNonVols(void)
{
    510a:	cf 93       	push	r28
    510c:	df 93       	push	r29
	BOOL failure = TRUE;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(0);
    510e:	80 e0       	ldi	r24, 0x00	; 0
    5110:	90 e0       	ldi	r25, 0x00	; 0
    5112:	0e 94 1d 45 	call	0x8a3a	; 0x8a3a <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
    5116:	8e 3c       	cpi	r24, 0xCE	; 206
    5118:	91 05       	cpc	r25, r1
    511a:	09 f0       	breq	.+2      	; 0x511e <_ZN13EepromManager11readNonVolsEv+0x14>
    511c:	dc c0       	rjmp	.+440    	; 0x52d6 <_ZN13EepromManager11readNonVolsEv+0x1cc>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
    511e:	88 e2       	ldi	r24, 0x28	; 40
    5120:	90 e0       	ldi	r25, 0x00	; 0
    5122:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <eeprom_read_byte>
    5126:	85 31       	cpi	r24, 0x15	; 21
    5128:	20 f4       	brcc	.+8      	; 0x5132 <_ZN13EepromManager11readNonVolsEv+0x28>
    512a:	85 30       	cpi	r24, 0x05	; 5
    512c:	18 f4       	brcc	.+6      	; 0x5134 <_ZN13EepromManager11readNonVolsEv+0x2a>
    512e:	85 e0       	ldi	r24, 0x05	; 5
    5130:	01 c0       	rjmp	.+2      	; 0x5134 <_ZN13EepromManager11readNonVolsEv+0x2a>
    5132:	84 e1       	ldi	r24, 0x14	; 20
    5134:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
    5138:	89 e2       	ldi	r24, 0x29	; 41
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <eeprom_read_byte>
    5140:	82 31       	cpi	r24, 0x12	; 18
    5142:	08 f0       	brcs	.+2      	; 0x5146 <_ZN13EepromManager11readNonVolsEv+0x3c>
    5144:	81 e1       	ldi	r24, 0x11	; 17
    5146:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
    514a:	82 e0       	ldi	r24, 0x02	; 2
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	0e 94 16 45 	call	0x8a2c	; 0x8a2c <eeprom_read_dword>
    5152:	60 93 44 45 	sts	0x4544, r22	; 0x804544 <g_event_start_epoch>
    5156:	70 93 45 45 	sts	0x4545, r23	; 0x804545 <g_event_start_epoch+0x1>
    515a:	80 93 46 45 	sts	0x4546, r24	; 0x804546 <g_event_start_epoch+0x2>
    515e:	90 93 47 45 	sts	0x4547, r25	; 0x804547 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
    5162:	86 e0       	ldi	r24, 0x06	; 6
    5164:	90 e0       	ldi	r25, 0x00	; 0
    5166:	0e 94 16 45 	call	0x8a2c	; 0x8a2c <eeprom_read_dword>
    516a:	60 93 48 45 	sts	0x4548, r22	; 0x804548 <g_event_finish_epoch>
    516e:	70 93 49 45 	sts	0x4549, r23	; 0x804549 <g_event_finish_epoch+0x1>
    5172:	80 93 4a 45 	sts	0x454A, r24	; 0x80454a <g_event_finish_epoch+0x2>
    5176:	90 93 4b 45 	sts	0x454B, r25	; 0x80454b <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
    517a:	8a e2       	ldi	r24, 0x2A	; 42
    517c:	90 e0       	ldi	r25, 0x00	; 0
    517e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <eeprom_read_byte>
    5182:	80 93 4c 45 	sts	0x454C, r24	; 0x80454c <g_utc_offset>

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    5186:	c0 e0       	ldi	r28, 0x00	; 0
    5188:	d0 e0       	ldi	r29, 0x00	; 0
    518a:	c4 31       	cpi	r28, 0x14	; 20
    518c:	d1 05       	cpc	r29, r1
    518e:	58 f4       	brcc	.+22     	; 0x51a6 <_ZN13EepromManager11readNonVolsEv+0x9c>
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
    5190:	ce 01       	movw	r24, r28
    5192:	86 5f       	subi	r24, 0xF6	; 246
    5194:	9f 4f       	sbci	r25, 0xFF	; 255
    5196:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <eeprom_read_byte>
    519a:	fe 01       	movw	r30, r28
    519c:	e7 50       	subi	r30, 0x07	; 7
    519e:	fb 4b       	sbci	r31, 0xBB	; 187
    51a0:	85 8b       	std	Z+21, r24	; 0x15
			if(!g_messages_text[STATION_ID][i])
    51a2:	81 11       	cpse	r24, r1
    51a4:	03 c0       	rjmp	.+6      	; 0x51ac <_ZN13EepromManager11readNonVolsEv+0xa2>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), SPRINT_F5);
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    51a6:	c0 e0       	ldi	r28, 0x00	; 0
    51a8:	d0 e0       	ldi	r29, 0x00	; 0
    51aa:	02 c0       	rjmp	.+4      	; 0x51b0 <_ZN13EepromManager11readNonVolsEv+0xa6>
    51ac:	21 96       	adiw	r28, 0x01	; 1
    51ae:	ed cf       	rjmp	.-38     	; 0x518a <_ZN13EepromManager11readNonVolsEv+0x80>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    51b0:	c8 30       	cpi	r28, 0x08	; 8
    51b2:	d1 05       	cpc	r29, r1
    51b4:	68 f4       	brcc	.+26     	; 0x51d0 <_ZN13EepromManager11readNonVolsEv+0xc6>
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
    51b6:	ce 01       	movw	r24, r28
    51b8:	81 5e       	subi	r24, 0xE1	; 225
    51ba:	9f 4f       	sbci	r25, 0xFF	; 255
    51bc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <eeprom_read_byte>
    51c0:	fe 01       	movw	r30, r28
    51c2:	e3 5b       	subi	r30, 0xB3	; 179
    51c4:	fa 4b       	sbci	r31, 0xBA	; 186
    51c6:	80 83       	st	Z, r24
			if(!g_unlockCode[i])
    51c8:	88 23       	and	r24, r24
    51ca:	11 f0       	breq	.+4      	; 0x51d0 <_ZN13EepromManager11readNonVolsEv+0xc6>
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
    51cc:	21 96       	adiw	r28, 0x01	; 1
    51ce:	f0 cf       	rjmp	.-32     	; 0x51b0 <_ZN13EepromManager11readNonVolsEv+0xa6>
			{
				break;
			}
		}
		
		g_80m_frequency = CLAMP(TX_MINIMUM_80M_FREQUENCY, eeprom_read_dword(&(EepromManager::ee_vars.frequency)), TX_MAXIMUM_80M_FREQUENCY);
    51d0:	8b e2       	ldi	r24, 0x2B	; 43
    51d2:	90 e0       	ldi	r25, 0x00	; 0
    51d4:	0e 94 16 45 	call	0x8a2c	; 0x8a2c <eeprom_read_dword>
    51d8:	61 30       	cpi	r22, 0x01	; 1
    51da:	29 e0       	ldi	r18, 0x09	; 9
    51dc:	72 07       	cpc	r23, r18
    51de:	2d e3       	ldi	r18, 0x3D	; 61
    51e0:	82 07       	cpc	r24, r18
    51e2:	91 05       	cpc	r25, r1
    51e4:	60 f4       	brcc	.+24     	; 0x51fe <_ZN13EepromManager11readNonVolsEv+0xf4>
    51e6:	60 3e       	cpi	r22, 0xE0	; 224
    51e8:	27 e6       	ldi	r18, 0x67	; 103
    51ea:	72 07       	cpc	r23, r18
    51ec:	25 e3       	ldi	r18, 0x35	; 53
    51ee:	82 07       	cpc	r24, r18
    51f0:	91 05       	cpc	r25, r1
    51f2:	50 f4       	brcc	.+20     	; 0x5208 <_ZN13EepromManager11readNonVolsEv+0xfe>
    51f4:	40 ee       	ldi	r20, 0xE0	; 224
    51f6:	37 e6       	ldi	r19, 0x67	; 103
    51f8:	25 e3       	ldi	r18, 0x35	; 53
    51fa:	80 e0       	ldi	r24, 0x00	; 0
    51fc:	09 c0       	rjmp	.+18     	; 0x5210 <_ZN13EepromManager11readNonVolsEv+0x106>
    51fe:	40 e0       	ldi	r20, 0x00	; 0
    5200:	39 e0       	ldi	r19, 0x09	; 9
    5202:	2d e3       	ldi	r18, 0x3D	; 61
    5204:	80 e0       	ldi	r24, 0x00	; 0
    5206:	04 c0       	rjmp	.+8      	; 0x5210 <_ZN13EepromManager11readNonVolsEv+0x106>
    5208:	46 2f       	mov	r20, r22
    520a:	37 2f       	mov	r19, r23
    520c:	28 2f       	mov	r18, r24
    520e:	89 2f       	mov	r24, r25
    5210:	40 93 2c 40 	sts	0x402C, r20	; 0x80402c <g_80m_frequency>
    5214:	30 93 2d 40 	sts	0x402D, r19	; 0x80402d <g_80m_frequency+0x1>
    5218:	20 93 2e 40 	sts	0x402E, r18	; 0x80402e <g_80m_frequency+0x2>
    521c:	80 93 2f 40 	sts	0x402F, r24	; 0x80402f <g_80m_frequency+0x3>
		g_rtty_offset =eeprom_read_dword(&(EepromManager::ee_vars.rtty_offset));
    5220:	8f e2       	ldi	r24, 0x2F	; 47
    5222:	90 e0       	ldi	r25, 0x00	; 0
    5224:	0e 94 16 45 	call	0x8a2c	; 0x8a2c <eeprom_read_dword>
    5228:	60 93 32 40 	sts	0x4032, r22	; 0x804032 <g_rtty_offset>
    522c:	70 93 33 40 	sts	0x4033, r23	; 0x804033 <g_rtty_offset+0x1>
    5230:	80 93 34 40 	sts	0x4034, r24	; 0x804034 <g_rtty_offset+0x2>
    5234:	90 93 35 40 	sts	0x4035, r25	; 0x804035 <g_rtty_offset+0x3>
		g_80m_power_level_mW = CLAMP(MIN_RF_POWER_MW, eeprom_read_word(&(EepromManager::ee_vars.rf_power)), MAX_TX_POWER_80M_MW);
    5238:	83 e3       	ldi	r24, 0x33	; 51
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	0e 94 1d 45 	call	0x8a3a	; 0x8a3a <eeprom_read_word>
    5240:	89 38       	cpi	r24, 0x89	; 137
    5242:	23 e1       	ldi	r18, 0x13	; 19
    5244:	92 07       	cpc	r25, r18
    5246:	18 f0       	brcs	.+6      	; 0x524e <_ZN13EepromManager11readNonVolsEv+0x144>
    5248:	28 e8       	ldi	r18, 0x88	; 136
    524a:	83 e1       	ldi	r24, 0x13	; 19
    524c:	02 c0       	rjmp	.+4      	; 0x5252 <_ZN13EepromManager11readNonVolsEv+0x148>
    524e:	28 2f       	mov	r18, r24
    5250:	89 2f       	mov	r24, r25
    5252:	20 93 30 40 	sts	0x4030, r18	; 0x804030 <g_80m_power_level_mW>
    5256:	80 93 31 40 	sts	0x4031, r24	; 0x804031 <g_80m_power_level_mW+0x1>

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
    525a:	80 91 44 45 	lds	r24, 0x4544	; 0x804544 <g_event_start_epoch>
    525e:	90 91 45 45 	lds	r25, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    5262:	a0 91 46 45 	lds	r26, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    5266:	b0 91 47 45 	lds	r27, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    526a:	89 2b       	or	r24, r25
    526c:	8a 2b       	or	r24, r26
    526e:	8b 2b       	or	r24, r27
    5270:	b9 f0       	breq	.+46     	; 0x52a0 <_ZN13EepromManager11readNonVolsEv+0x196>
    5272:	40 91 48 45 	lds	r20, 0x4548	; 0x804548 <g_event_finish_epoch>
    5276:	50 91 49 45 	lds	r21, 0x4549	; 0x804549 <g_event_finish_epoch+0x1>
    527a:	60 91 4a 45 	lds	r22, 0x454A	; 0x80454a <g_event_finish_epoch+0x2>
    527e:	70 91 4b 45 	lds	r23, 0x454B	; 0x80454b <g_event_finish_epoch+0x3>
    5282:	80 91 44 45 	lds	r24, 0x4544	; 0x804544 <g_event_start_epoch>
    5286:	90 91 45 45 	lds	r25, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    528a:	a0 91 46 45 	lds	r26, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    528e:	b0 91 47 45 	lds	r27, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    5292:	84 17       	cp	r24, r20
    5294:	95 07       	cpc	r25, r21
    5296:	a6 07       	cpc	r26, r22
    5298:	b7 07       	cpc	r27, r23
    529a:	20 f4       	brcc	.+8      	; 0x52a4 <_ZN13EepromManager11readNonVolsEv+0x19a>
    529c:	80 e0       	ldi	r24, 0x00	; 0
    529e:	03 c0       	rjmp	.+6      	; 0x52a6 <_ZN13EepromManager11readNonVolsEv+0x19c>
    52a0:	80 e0       	ldi	r24, 0x00	; 0
    52a2:	01 c0       	rjmp	.+2      	; 0x52a6 <_ZN13EepromManager11readNonVolsEv+0x19c>
    52a4:	81 e0       	ldi	r24, 0x01	; 1
    52a6:	88 23       	and	r24, r24
    52a8:	c1 f0       	breq	.+48     	; 0x52da <_ZN13EepromManager11readNonVolsEv+0x1d0>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
    52aa:	80 91 44 45 	lds	r24, 0x4544	; 0x804544 <g_event_start_epoch>
    52ae:	90 91 45 45 	lds	r25, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    52b2:	a0 91 46 45 	lds	r26, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    52b6:	b0 91 47 45 	lds	r27, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    52ba:	80 58       	subi	r24, 0x80	; 128
    52bc:	9e 4a       	sbci	r25, 0xAE	; 174
    52be:	ae 4f       	sbci	r26, 0xFE	; 254
    52c0:	bf 4f       	sbci	r27, 0xFF	; 255
    52c2:	80 93 48 45 	sts	0x4548, r24	; 0x804548 <g_event_finish_epoch>
    52c6:	90 93 49 45 	sts	0x4549, r25	; 0x804549 <g_event_finish_epoch+0x1>
    52ca:	a0 93 4a 45 	sts	0x454A, r26	; 0x80454a <g_event_finish_epoch+0x2>
    52ce:	b0 93 4b 45 	sts	0x454B, r27	; 0x80454b <g_event_finish_epoch+0x3>
		}

		failure = FALSE;
    52d2:	80 e0       	ldi	r24, 0x00	; 0
    52d4:	03 c0       	rjmp	.+6      	; 0x52dc <_ZN13EepromManager11readNonVolsEv+0x1d2>
}


BOOL EepromManager::readNonVols(void)
{
	BOOL failure = TRUE;
    52d6:	81 e0       	ldi	r24, 0x01	; 1
    52d8:	01 c0       	rjmp	.+2      	; 0x52dc <_ZN13EepromManager11readNonVolsEv+0x1d2>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
    52da:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
    52dc:	df 91       	pop	r29
    52de:	cf 91       	pop	r28
    52e0:	08 95       	ret

000052e2 <_ZN13EepromManager20initializeEEPROMVarsEv>:

/*
 * Set volatile variables to their values stored in EEPROM
 */
	BOOL EepromManager::initializeEEPROMVars(void)
	{
    52e2:	ef 92       	push	r14
    52e4:	ff 92       	push	r15
    52e6:	0f 93       	push	r16
    52e8:	1f 93       	push	r17
    52ea:	cf 93       	push	r28
    52ec:	df 93       	push	r29
		BOOL err = FALSE;
		uint16_t i, j;

		uint16_t initialization_flag = eeprom_read_word(0);
    52ee:	80 e0       	ldi	r24, 0x00	; 0
    52f0:	90 e0       	ldi	r25, 0x00	; 0
    52f2:	0e 94 1d 45 	call	0x8a3a	; 0x8a3a <eeprom_read_word>

		if(initialization_flag != EEPROM_INITIALIZED_FLAG)
    52f6:	8e 3c       	cpi	r24, 0xCE	; 206
    52f8:	91 05       	cpc	r25, r1
    52fa:	09 f4       	brne	.+2      	; 0x52fe <_ZN13EepromManager20initializeEEPROMVarsEv+0x1c>
    52fc:	aa c0       	rjmp	.+340    	; 0x5452 <_ZN13EepromManager20initializeEEPROMVarsEv+0x170>
		{
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    52fe:	84 e1       	ldi	r24, 0x14	; 20
    5300:	80 93 0b 40 	sts	0x400B, r24	; 0x80400b <g_id_codespeed>
			avr_eeprom_write_byte(Id_codespeed, g_id_codespeed);
    5304:	60 91 0b 40 	lds	r22, 0x400B	; 0x80400b <g_id_codespeed>
    5308:	88 e2       	ldi	r24, 0x28	; 40
    530a:	90 e0       	ldi	r25, 0x00	; 0
    530c:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <_Z21avr_eeprom_write_bytejh>

			g_fox = EEPROM_FOX_SETTING_DEFAULT;
    5310:	81 e0       	ldi	r24, 0x01	; 1
    5312:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <g_fox>
			avr_eeprom_write_byte(Fox_setting, g_fox);
    5316:	60 91 1b 40 	lds	r22, 0x401B	; 0x80401b <g_fox>
    531a:	89 e2       	ldi	r24, 0x29	; 41
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <_Z21avr_eeprom_write_bytejh>

			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    5322:	10 92 44 45 	sts	0x4544, r1	; 0x804544 <g_event_start_epoch>
    5326:	10 92 45 45 	sts	0x4545, r1	; 0x804545 <g_event_start_epoch+0x1>
    532a:	10 92 46 45 	sts	0x4546, r1	; 0x804546 <g_event_start_epoch+0x2>
    532e:	10 92 47 45 	sts	0x4547, r1	; 0x804547 <g_event_start_epoch+0x3>
			avr_eeprom_write_dword(Event_start_epoch, g_event_start_epoch);
    5332:	40 91 44 45 	lds	r20, 0x4544	; 0x804544 <g_event_start_epoch>
    5336:	50 91 45 45 	lds	r21, 0x4545	; 0x804545 <g_event_start_epoch+0x1>
    533a:	60 91 46 45 	lds	r22, 0x4546	; 0x804546 <g_event_start_epoch+0x2>
    533e:	70 91 47 45 	lds	r23, 0x4547	; 0x804547 <g_event_start_epoch+0x3>
    5342:	82 e0       	ldi	r24, 0x02	; 2
    5344:	90 e0       	ldi	r25, 0x00	; 0
    5346:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <_Z22avr_eeprom_write_dwordjm>

			g_event_finish_epoch = EEPROM_FINISH_EPOCH_DEFAULT;
    534a:	10 92 48 45 	sts	0x4548, r1	; 0x804548 <g_event_finish_epoch>
    534e:	10 92 49 45 	sts	0x4549, r1	; 0x804549 <g_event_finish_epoch+0x1>
    5352:	10 92 4a 45 	sts	0x454A, r1	; 0x80454a <g_event_finish_epoch+0x2>
    5356:	10 92 4b 45 	sts	0x454B, r1	; 0x80454b <g_event_finish_epoch+0x3>
			avr_eeprom_write_dword(Event_finish_epoch, g_event_finish_epoch);
    535a:	40 91 48 45 	lds	r20, 0x4548	; 0x804548 <g_event_finish_epoch>
    535e:	50 91 49 45 	lds	r21, 0x4549	; 0x804549 <g_event_finish_epoch+0x1>
    5362:	60 91 4a 45 	lds	r22, 0x454A	; 0x80454a <g_event_finish_epoch+0x2>
    5366:	70 91 4b 45 	lds	r23, 0x454B	; 0x80454b <g_event_finish_epoch+0x3>
    536a:	86 e0       	ldi	r24, 0x06	; 6
    536c:	90 e0       	ldi	r25, 0x00	; 0
    536e:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <_Z22avr_eeprom_write_dwordjm>

			g_utc_offset = EEPROM_UTC_OFFSET_DEFAULT;
    5372:	10 92 4c 45 	sts	0x454C, r1	; 0x80454c <g_utc_offset>
			avr_eeprom_write_byte(Utc_offset, (uint8_t)g_utc_offset);
    5376:	60 91 4c 45 	lds	r22, 0x454C	; 0x80454c <g_utc_offset>
    537a:	8a e2       	ldi	r24, 0x2A	; 42
    537c:	90 e0       	ldi	r25, 0x00	; 0
    537e:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <_Z21avr_eeprom_write_bytejh>

			g_messages_text[STATION_ID][0] = '\0';
    5382:	10 92 0e 45 	sts	0x450E, r1	; 0x80450e <g_messages_text+0x15>
			avr_eeprom_write_byte(StationID_text, 0);
    5386:	60 e0       	ldi	r22, 0x00	; 0
    5388:	8a e0       	ldi	r24, 0x0A	; 10
    538a:	90 e0       	ldi	r25, 0x00	; 0
    538c:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <_Z21avr_eeprom_write_bytejh>

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
    5390:	e9 e5       	ldi	r30, 0x59	; 89
    5392:	f4 e4       	ldi	r31, 0x44	; 68
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    5394:	c0 e0       	ldi	r28, 0x00	; 0
    5396:	d0 e0       	ldi	r29, 0x00	; 0

			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
    5398:	8f e1       	ldi	r24, 0x1F	; 31
    539a:	90 e0       	ldi	r25, 0x00	; 0
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    539c:	c4 30       	cpi	r28, 0x04	; 4
    539e:	d1 05       	cpc	r29, r1
    53a0:	90 f4       	brcc	.+36     	; 0x53c6 <_ZN13EepromManager20initializeEEPROMVarsEv+0xe4>
			{
				g_unlockCode[j] = *v;
    53a2:	df 01       	movw	r26, r30
    53a4:	2d 91       	ld	r18, X+
    53a6:	8d 01       	movw	r16, r26
    53a8:	de 01       	movw	r26, r28
    53aa:	a3 5b       	subi	r26, 0xB3	; 179
    53ac:	ba 4b       	sbci	r27, 0xBA	; 186
    53ae:	2c 93       	st	X, r18
				avr_eeprom_write_byte(i++, *v++);
    53b0:	60 81       	ld	r22, Z
    53b2:	7c 01       	movw	r14, r24
    53b4:	bf ef       	ldi	r27, 0xFF	; 255
    53b6:	eb 1a       	sub	r14, r27
    53b8:	fb 0a       	sbc	r15, r27
    53ba:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <_Z21avr_eeprom_write_bytejh>
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    53be:	21 96       	adiw	r28, 0x01	; 1
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
    53c0:	f8 01       	movw	r30, r16
    53c2:	c7 01       	movw	r24, r14
			g_messages_text[STATION_ID][0] = '\0';
			avr_eeprom_write_byte(StationID_text, 0);

			uint8_t *v = (uint8_t*)EEPROM_DTMF_UNLOCK_CODE_DEFAULT;
			i = UnlockCode;
			for(j = 0; j < strlen(EEPROM_DTMF_UNLOCK_CODE_DEFAULT); j++)
    53c4:	eb cf       	rjmp	.-42     	; 0x539c <_ZN13EepromManager20initializeEEPROMVarsEv+0xba>
			{
				g_unlockCode[j] = *v;
				avr_eeprom_write_byte(i++, *v++);
			}

			avr_eeprom_write_byte(i, 0);
    53c6:	60 e0       	ldi	r22, 0x00	; 0
    53c8:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <_Z21avr_eeprom_write_bytejh>
			g_unlockCode[j] = '\0';
    53cc:	c3 5b       	subi	r28, 0xB3	; 179
    53ce:	da 4b       	sbci	r29, 0xBA	; 186
    53d0:	18 82       	st	Y, r1
			
			g_80m_frequency = EEPROM_TX_80M_FREQUENCY_DEFAULT;
    53d2:	80 e2       	ldi	r24, 0x20	; 32
    53d4:	94 e0       	ldi	r25, 0x04	; 4
    53d6:	a6 e3       	ldi	r26, 0x36	; 54
    53d8:	b0 e0       	ldi	r27, 0x00	; 0
    53da:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <g_80m_frequency>
    53de:	90 93 2d 40 	sts	0x402D, r25	; 0x80402d <g_80m_frequency+0x1>
    53e2:	a0 93 2e 40 	sts	0x402E, r26	; 0x80402e <g_80m_frequency+0x2>
    53e6:	b0 93 2f 40 	sts	0x402F, r27	; 0x80402f <g_80m_frequency+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    53ea:	40 e2       	ldi	r20, 0x20	; 32
    53ec:	54 e0       	ldi	r21, 0x04	; 4
    53ee:	66 e3       	ldi	r22, 0x36	; 54
    53f0:	70 e0       	ldi	r23, 0x00	; 0
    53f2:	8b e2       	ldi	r24, 0x2B	; 43
    53f4:	90 e0       	ldi	r25, 0x00	; 0
    53f6:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <_Z22avr_eeprom_write_dwordjm>

			g_rtty_offset = EEPROM_RTTY_OFFSET_FREQUENCY_DEFAULT;
    53fa:	8a ea       	ldi	r24, 0xAA	; 170
    53fc:	90 e0       	ldi	r25, 0x00	; 0
    53fe:	a0 e0       	ldi	r26, 0x00	; 0
    5400:	b0 e0       	ldi	r27, 0x00	; 0
    5402:	80 93 32 40 	sts	0x4032, r24	; 0x804032 <g_rtty_offset>
    5406:	90 93 33 40 	sts	0x4033, r25	; 0x804033 <g_rtty_offset+0x1>
    540a:	a0 93 34 40 	sts	0x4034, r26	; 0x804034 <g_rtty_offset+0x2>
    540e:	b0 93 35 40 	sts	0x4035, r27	; 0x804035 <g_rtty_offset+0x3>
			avr_eeprom_write_dword(Frequency, g_80m_frequency);
    5412:	40 91 2c 40 	lds	r20, 0x402C	; 0x80402c <g_80m_frequency>
    5416:	50 91 2d 40 	lds	r21, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    541a:	60 91 2e 40 	lds	r22, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    541e:	70 91 2f 40 	lds	r23, 0x402F	; 0x80402f <g_80m_frequency+0x3>
    5422:	8b e2       	ldi	r24, 0x2B	; 43
    5424:	90 e0       	ldi	r25, 0x00	; 0
    5426:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <_Z22avr_eeprom_write_dwordjm>

			g_80m_power_level_mW = EEPROM_TX_80M_POWER_MW_DEFAULT;
    542a:	84 ef       	ldi	r24, 0xF4	; 244
    542c:	91 e0       	ldi	r25, 0x01	; 1
    542e:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <g_80m_power_level_mW>
    5432:	90 93 31 40 	sts	0x4031, r25	; 0x804031 <g_80m_power_level_mW+0x1>
			avr_eeprom_write_dword(RF_Power, g_80m_power_level_mW);
    5436:	44 ef       	ldi	r20, 0xF4	; 244
    5438:	51 e0       	ldi	r21, 0x01	; 1
    543a:	60 e0       	ldi	r22, 0x00	; 0
    543c:	70 e0       	ldi	r23, 0x00	; 0
    543e:	83 e3       	ldi	r24, 0x33	; 51
    5440:	90 e0       	ldi	r25, 0x00	; 0
    5442:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <_Z22avr_eeprom_write_dwordjm>

			/* Done */

			avr_eeprom_write_word(0, EEPROM_INITIALIZED_FLAG);
    5446:	6e ec       	ldi	r22, 0xCE	; 206
    5448:	70 e0       	ldi	r23, 0x00	; 0
    544a:	80 e0       	ldi	r24, 0x00	; 0
    544c:	90 e0       	ldi	r25, 0x00	; 0
    544e:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <_Z21avr_eeprom_write_wordjj>
		}
		
		return(err);
	}
    5452:	80 e0       	ldi	r24, 0x00	; 0
    5454:	df 91       	pop	r29
    5456:	cf 91       	pop	r28
    5458:	1f 91       	pop	r17
    545a:	0f 91       	pop	r16
    545c:	ff 90       	pop	r15
    545e:	ef 90       	pop	r14
    5460:	08 95       	ret

00005462 <_ZN8GoertzelC1Eff>:
		highValueCount++;
	}

	Q2 = Q1;
	Q1 = Q0;
}
    5462:	ef 92       	push	r14
    5464:	ff 92       	push	r15
    5466:	0f 93       	push	r16
    5468:	1f 93       	push	r17
    546a:	cf 93       	push	r28
    546c:	df 93       	push	r29
    546e:	e4 2e       	mov	r14, r20
    5470:	f5 2e       	mov	r15, r21
    5472:	d6 2f       	mov	r29, r22
    5474:	c7 2f       	mov	r28, r23
    5476:	00 93 7b 45 	sts	0x457B, r16	; 0x80457b <_SAMPLING_FREQUENCY>
    547a:	10 93 7c 45 	sts	0x457C, r17	; 0x80457c <_SAMPLING_FREQUENCY+0x1>
    547e:	20 93 7d 45 	sts	0x457D, r18	; 0x80457d <_SAMPLING_FREQUENCY+0x2>
    5482:	30 93 7e 45 	sts	0x457E, r19	; 0x80457e <_SAMPLING_FREQUENCY+0x3>
    5486:	20 e0       	ldi	r18, 0x00	; 0
    5488:	30 e0       	ldi	r19, 0x00	; 0
    548a:	41 e5       	ldi	r20, 0x51	; 81
    548c:	53 e4       	ldi	r21, 0x43	; 67
    548e:	6e 2d       	mov	r22, r14
    5490:	7f 2d       	mov	r23, r15
    5492:	8d 2f       	mov	r24, r29
    5494:	9c 2f       	mov	r25, r28
    5496:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <__gesf2>
    549a:	18 16       	cp	r1, r24
    549c:	8c f0       	brlt	.+34     	; 0x54c0 <_ZN8GoertzelC1Eff+0x5e>
    549e:	20 e0       	ldi	r18, 0x00	; 0
    54a0:	30 e0       	ldi	r19, 0x00	; 0
    54a2:	48 ec       	ldi	r20, 0xC8	; 200
    54a4:	52 e4       	ldi	r21, 0x42	; 66
    54a6:	6e 2d       	mov	r22, r14
    54a8:	7f 2d       	mov	r23, r15
    54aa:	8d 2f       	mov	r24, r29
    54ac:	9c 2f       	mov	r25, r28
    54ae:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__cmpsf2>
    54b2:	88 23       	and	r24, r24
    54b4:	4c f4       	brge	.+18     	; 0x54c8 <_ZN8GoertzelC1Eff+0x66>
    54b6:	e1 2c       	mov	r14, r1
    54b8:	f1 2c       	mov	r15, r1
    54ba:	d8 ec       	ldi	r29, 0xC8	; 200
    54bc:	c2 e4       	ldi	r28, 0x42	; 66
    54be:	04 c0       	rjmp	.+8      	; 0x54c8 <_ZN8GoertzelC1Eff+0x66>
    54c0:	e1 2c       	mov	r14, r1
    54c2:	f1 2c       	mov	r15, r1
    54c4:	d1 e5       	ldi	r29, 0x51	; 81
    54c6:	c3 e4       	ldi	r28, 0x43	; 67
    54c8:	6e 2d       	mov	r22, r14
    54ca:	7f 2d       	mov	r23, r15
    54cc:	8d 2f       	mov	r24, r29
    54ce:	9c 2f       	mov	r25, r28
    54d0:	0e 94 77 3e 	call	0x7cee	; 0x7cee <__fixsfsi>
    54d4:	60 93 79 45 	sts	0x4579, r22	; 0x804579 <_N>
    54d8:	70 93 7a 45 	sts	0x457A, r23	; 0x80457a <_N+0x1>
    54dc:	80 91 79 45 	lds	r24, 0x4579	; 0x804579 <_N>
    54e0:	90 91 7a 45 	lds	r25, 0x457A	; 0x80457a <_N+0x1>
    54e4:	88 0f       	add	r24, r24
    54e6:	99 1f       	adc	r25, r25
    54e8:	0e 94 7c 40 	call	0x80f8	; 0x80f8 <malloc>
    54ec:	80 93 74 45 	sts	0x4574, r24	; 0x804574 <testData>
    54f0:	90 93 75 45 	sts	0x4575, r25	; 0x804575 <testData+0x1>
    54f4:	df 91       	pop	r29
    54f6:	cf 91       	pop	r28
    54f8:	1f 91       	pop	r17
    54fa:	0f 91       	pop	r16
    54fc:	ff 90       	pop	r15
    54fe:	ef 90       	pop	r14
    5500:	08 95       	ret

00005502 <_ZN8GoertzelD1Ev>:
    5502:	80 91 74 45 	lds	r24, 0x4574	; 0x804574 <testData>
    5506:	90 91 75 45 	lds	r25, 0x4575	; 0x804575 <testData+0x1>
    550a:	0e 94 14 41 	call	0x8228	; 0x8228 <free>
    550e:	08 95       	ret

00005510 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
    5510:	80 91 76 45 	lds	r24, 0x4576	; 0x804576 <_samplesReady>
    5514:	88 23       	and	r24, r24
    5516:	19 f0       	breq	.+6      	; 0x551e <_ZN8Goertzel9DataPointEi+0xe>
	{
		return(_samplesReady);
    5518:	80 91 76 45 	lds	r24, 0x4576	; 0x804576 <_samplesReady>
    551c:	08 95       	ret
	}

	testData[_index] = data;
    551e:	e0 91 77 45 	lds	r30, 0x4577	; 0x804577 <_index>
    5522:	f0 91 78 45 	lds	r31, 0x4578	; 0x804578 <_index+0x1>
    5526:	ee 0f       	add	r30, r30
    5528:	ff 1f       	adc	r31, r31
    552a:	80 91 74 45 	lds	r24, 0x4574	; 0x804574 <testData>
    552e:	90 91 75 45 	lds	r25, 0x4575	; 0x804575 <testData+0x1>
    5532:	e8 0f       	add	r30, r24
    5534:	f9 1f       	adc	r31, r25
    5536:	60 83       	st	Z, r22
    5538:	71 83       	std	Z+1, r23	; 0x01
	_index++;
    553a:	80 91 77 45 	lds	r24, 0x4577	; 0x804577 <_index>
    553e:	90 91 78 45 	lds	r25, 0x4578	; 0x804578 <_index+0x1>
    5542:	01 96       	adiw	r24, 0x01	; 1
    5544:	80 93 77 45 	sts	0x4577, r24	; 0x804577 <_index>
    5548:	90 93 78 45 	sts	0x4578, r25	; 0x804578 <_index+0x1>
	if(_index >= _N)
    554c:	20 91 77 45 	lds	r18, 0x4577	; 0x804577 <_index>
    5550:	30 91 78 45 	lds	r19, 0x4578	; 0x804578 <_index+0x1>
    5554:	80 91 79 45 	lds	r24, 0x4579	; 0x804579 <_N>
    5558:	90 91 7a 45 	lds	r25, 0x457A	; 0x80457a <_N+0x1>
    555c:	28 17       	cp	r18, r24
    555e:	39 07       	cpc	r19, r25
    5560:	3c f0       	brlt	.+14     	; 0x5570 <_ZN8Goertzel9DataPointEi+0x60>
	{
		_index = 0;
    5562:	10 92 77 45 	sts	0x4577, r1	; 0x804577 <_index>
    5566:	10 92 78 45 	sts	0x4578, r1	; 0x804578 <_index+0x1>
		_samplesReady = true;
    556a:	81 e0       	ldi	r24, 0x01	; 1
    556c:	80 93 76 45 	sts	0x4576, r24	; 0x804576 <_samplesReady>
	}

	return(_samplesReady);
    5570:	80 91 76 45 	lds	r24, 0x4576	; 0x804576 <_samplesReady>
}
    5574:	08 95       	ret

00005576 <_ZL11i2c_0_WaitWv>:
	return retVal;
}

void I2C_0_EndSession(void)
{
	TWI0.MCTRLB = TWI_MCMD_STOP_gc;
    5576:	8c e2       	ldi	r24, 0x2C	; 44
    5578:	91 e0       	ldi	r25, 0x01	; 1
    557a:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    557e:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    5582:	80 e0       	ldi	r24, 0x00	; 0
    5584:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    5588:	90 7c       	andi	r25, 0xC0	; 192
    558a:	31 f0       	breq	.+12     	; 0x5598 <_ZL11i2c_0_WaitWv+0x22>
    558c:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    5590:	84 fd       	sbrc	r24, 4
    5592:	07 c0       	rjmp	.+14     	; 0x55a2 <_ZL11i2c_0_WaitWv+0x2c>
    5594:	81 e0       	ldi	r24, 0x01	; 1
    5596:	08 c0       	rjmp	.+16     	; 0x55a8 <_ZL11i2c_0_WaitWv+0x32>
    5598:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    559c:	9c 70       	andi	r25, 0x0C	; 12
    559e:	19 f4       	brne	.+6      	; 0x55a6 <_ZL11i2c_0_WaitWv+0x30>
    55a0:	03 c0       	rjmp	.+6      	; 0x55a8 <_ZL11i2c_0_WaitWv+0x32>
    55a2:	82 e0       	ldi	r24, 0x02	; 2
    55a4:	01 c0       	rjmp	.+2      	; 0x55a8 <_ZL11i2c_0_WaitWv+0x32>
    55a6:	84 e0       	ldi	r24, 0x04	; 4
    55a8:	81 11       	cpse	r24, r1
    55aa:	08 c0       	rjmp	.+16     	; 0x55bc <_ZL11i2c_0_WaitWv+0x46>
    55ac:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    55b0:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    55b4:	23 2b       	or	r18, r19
    55b6:	21 f4       	brne	.+8      	; 0x55c0 <_ZL11i2c_0_WaitWv+0x4a>
    55b8:	90 e0       	ldi	r25, 0x00	; 0
    55ba:	03 c0       	rjmp	.+6      	; 0x55c2 <_ZL11i2c_0_WaitWv+0x4c>
    55bc:	90 e0       	ldi	r25, 0x00	; 0
    55be:	01 c0       	rjmp	.+2      	; 0x55c2 <_ZL11i2c_0_WaitWv+0x4c>
    55c0:	91 e0       	ldi	r25, 0x01	; 1
    55c2:	91 11       	cpse	r25, r1
    55c4:	df cf       	rjmp	.-66     	; 0x5584 <_ZL11i2c_0_WaitWv+0xe>
    55c6:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    55ca:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    55ce:	23 2b       	or	r18, r19
    55d0:	09 f4       	brne	.+2      	; 0x55d4 <_ZL11i2c_0_WaitWv+0x5e>
    55d2:	84 e0       	ldi	r24, 0x04	; 4
    55d4:	08 95       	ret

000055d6 <_ZL11i2c_0_WaitRv>:
    55d6:	88 ec       	ldi	r24, 0xC8	; 200
    55d8:	90 e0       	ldi	r25, 0x00	; 0
    55da:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    55de:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    55e2:	80 e0       	ldi	r24, 0x00	; 0
    55e4:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    55e8:	90 7c       	andi	r25, 0xC0	; 192
    55ea:	29 f4       	brne	.+10     	; 0x55f6 <_ZL11i2c_0_WaitRv+0x20>
    55ec:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    55f0:	9c 70       	andi	r25, 0x0C	; 12
    55f2:	19 f4       	brne	.+6      	; 0x55fa <_ZL11i2c_0_WaitRv+0x24>
    55f4:	03 c0       	rjmp	.+6      	; 0x55fc <_ZL11i2c_0_WaitRv+0x26>
    55f6:	83 e0       	ldi	r24, 0x03	; 3
    55f8:	01 c0       	rjmp	.+2      	; 0x55fc <_ZL11i2c_0_WaitRv+0x26>
    55fa:	84 e0       	ldi	r24, 0x04	; 4
    55fc:	81 11       	cpse	r24, r1
    55fe:	08 c0       	rjmp	.+16     	; 0x5610 <_ZL11i2c_0_WaitRv+0x3a>
    5600:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    5604:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    5608:	23 2b       	or	r18, r19
    560a:	21 f4       	brne	.+8      	; 0x5614 <_ZL11i2c_0_WaitRv+0x3e>
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	03 c0       	rjmp	.+6      	; 0x5616 <_ZL11i2c_0_WaitRv+0x40>
    5610:	90 e0       	ldi	r25, 0x00	; 0
    5612:	01 c0       	rjmp	.+2      	; 0x5616 <_ZL11i2c_0_WaitRv+0x40>
    5614:	91 e0       	ldi	r25, 0x01	; 1
    5616:	91 11       	cpse	r25, r1
    5618:	e5 cf       	rjmp	.-54     	; 0x55e4 <_ZL11i2c_0_WaitRv+0xe>
    561a:	08 95       	ret

0000561c <_ZL11i2c_1_WaitWv>:
    561c:	88 ec       	ldi	r24, 0xC8	; 200
    561e:	90 e0       	ldi	r25, 0x00	; 0
    5620:	80 93 1e 40 	sts	0x401E, r24	; 0x80401e <g_i2c1_timeout_ticks>
    5624:	90 93 1f 40 	sts	0x401F, r25	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    5628:	80 e0       	ldi	r24, 0x00	; 0
    562a:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    562e:	29 2f       	mov	r18, r25
    5630:	20 7c       	andi	r18, 0xC0	; 192
    5632:	21 f0       	breq	.+8      	; 0x563c <_ZL11i2c_1_WaitWv+0x20>
    5634:	94 fd       	sbrc	r25, 4
    5636:	05 c0       	rjmp	.+10     	; 0x5642 <_ZL11i2c_1_WaitWv+0x26>
    5638:	81 e0       	ldi	r24, 0x01	; 1
    563a:	06 c0       	rjmp	.+12     	; 0x5648 <_ZL11i2c_1_WaitWv+0x2c>
    563c:	9c 70       	andi	r25, 0x0C	; 12
    563e:	19 f4       	brne	.+6      	; 0x5646 <_ZL11i2c_1_WaitWv+0x2a>
    5640:	03 c0       	rjmp	.+6      	; 0x5648 <_ZL11i2c_1_WaitWv+0x2c>
    5642:	82 e0       	ldi	r24, 0x02	; 2
    5644:	01 c0       	rjmp	.+2      	; 0x5648 <_ZL11i2c_1_WaitWv+0x2c>
    5646:	84 e0       	ldi	r24, 0x04	; 4
    5648:	81 11       	cpse	r24, r1
    564a:	08 c0       	rjmp	.+16     	; 0x565c <_ZL11i2c_1_WaitWv+0x40>
    564c:	20 91 1e 40 	lds	r18, 0x401E	; 0x80401e <g_i2c1_timeout_ticks>
    5650:	30 91 1f 40 	lds	r19, 0x401F	; 0x80401f <g_i2c1_timeout_ticks+0x1>
    5654:	23 2b       	or	r18, r19
    5656:	21 f4       	brne	.+8      	; 0x5660 <_ZL11i2c_1_WaitWv+0x44>
    5658:	90 e0       	ldi	r25, 0x00	; 0
    565a:	03 c0       	rjmp	.+6      	; 0x5662 <_ZL11i2c_1_WaitWv+0x46>
    565c:	90 e0       	ldi	r25, 0x00	; 0
    565e:	01 c0       	rjmp	.+2      	; 0x5662 <_ZL11i2c_1_WaitWv+0x46>
    5660:	91 e0       	ldi	r25, 0x01	; 1
    5662:	91 11       	cpse	r25, r1
    5664:	e2 cf       	rjmp	.-60     	; 0x562a <_ZL11i2c_1_WaitWv+0xe>
    5666:	08 95       	ret

00005668 <_ZL11I2C_1_WaitRv>:
    5668:	88 ec       	ldi	r24, 0xC8	; 200
    566a:	90 e0       	ldi	r25, 0x00	; 0
    566c:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <g_i2c0_timeout_ticks>
    5670:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    5674:	80 e0       	ldi	r24, 0x00	; 0
    5676:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    567a:	90 7c       	andi	r25, 0xC0	; 192
    567c:	29 f4       	brne	.+10     	; 0x5688 <_ZL11I2C_1_WaitRv+0x20>
    567e:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
    5682:	9c 70       	andi	r25, 0x0C	; 12
    5684:	19 f4       	brne	.+6      	; 0x568c <_ZL11I2C_1_WaitRv+0x24>
    5686:	03 c0       	rjmp	.+6      	; 0x568e <_ZL11I2C_1_WaitRv+0x26>
    5688:	83 e0       	ldi	r24, 0x03	; 3
    568a:	01 c0       	rjmp	.+2      	; 0x568e <_ZL11I2C_1_WaitRv+0x26>
    568c:	84 e0       	ldi	r24, 0x04	; 4
    568e:	81 11       	cpse	r24, r1
    5690:	08 c0       	rjmp	.+16     	; 0x56a2 <_ZL11I2C_1_WaitRv+0x3a>
    5692:	20 91 20 40 	lds	r18, 0x4020	; 0x804020 <g_i2c0_timeout_ticks>
    5696:	30 91 21 40 	lds	r19, 0x4021	; 0x804021 <g_i2c0_timeout_ticks+0x1>
    569a:	23 2b       	or	r18, r19
    569c:	21 f4       	brne	.+8      	; 0x56a6 <_ZL11I2C_1_WaitRv+0x3e>
    569e:	90 e0       	ldi	r25, 0x00	; 0
    56a0:	03 c0       	rjmp	.+6      	; 0x56a8 <_ZL11I2C_1_WaitRv+0x40>
    56a2:	90 e0       	ldi	r25, 0x00	; 0
    56a4:	01 c0       	rjmp	.+2      	; 0x56a8 <_ZL11I2C_1_WaitRv+0x40>
    56a6:	91 e0       	ldi	r25, 0x01	; 1
    56a8:	91 11       	cpse	r25, r1
    56aa:	e5 cf       	rjmp	.-54     	; 0x5676 <_ZL11I2C_1_WaitRv+0xe>
    56ac:	08 95       	ret

000056ae <I2C_0_Init>:
    56ae:	e0 ee       	ldi	r30, 0xE0	; 224
    56b0:	f5 e0       	ldi	r31, 0x05	; 5
    56b2:	85 81       	ldd	r24, Z+5	; 0x05
    56b4:	8a 70       	andi	r24, 0x0A	; 10
    56b6:	85 83       	std	Z+5, r24	; 0x05
    56b8:	85 81       	ldd	r24, Z+5	; 0x05
    56ba:	82 60       	ori	r24, 0x02	; 2
    56bc:	85 83       	std	Z+5, r24	; 0x05
    56be:	e0 e0       	ldi	r30, 0x00	; 0
    56c0:	f9 e0       	ldi	r31, 0x09	; 9
    56c2:	8f e6       	ldi	r24, 0x6F	; 111
    56c4:	86 83       	std	Z+6, r24	; 0x06
    56c6:	81 e0       	ldi	r24, 0x01	; 1
    56c8:	83 83       	std	Z+3, r24	; 0x03
    56ca:	17 82       	std	Z+7, r1	; 0x07
    56cc:	10 86       	std	Z+8, r1	; 0x08
    56ce:	85 83       	std	Z+5, r24	; 0x05
    56d0:	e2 e5       	ldi	r30, 0x52	; 82
    56d2:	f4 e0       	ldi	r31, 0x04	; 4
    56d4:	80 81       	ld	r24, Z
    56d6:	88 60       	ori	r24, 0x08	; 8
    56d8:	80 83       	st	Z, r24
    56da:	e3 e5       	ldi	r30, 0x53	; 83
    56dc:	f4 e0       	ldi	r31, 0x04	; 4
    56de:	80 81       	ld	r24, Z
    56e0:	88 60       	ori	r24, 0x08	; 8
    56e2:	80 83       	st	Z, r24
    56e4:	08 95       	ret

000056e6 <I2C_0_SendData>:
    56e6:	ff 92       	push	r15
    56e8:	0f 93       	push	r16
    56ea:	1f 93       	push	r17
    56ec:	cf 93       	push	r28
    56ee:	df 93       	push	r29
    56f0:	c6 2f       	mov	r28, r22
    56f2:	8a 01       	movw	r16, r20
    56f4:	d2 2f       	mov	r29, r18
    56f6:	8e 7f       	andi	r24, 0xFE	; 254
    56f8:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    56fc:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZL11i2c_0_WaitWv>
    5700:	81 30       	cpi	r24, 0x01	; 1
    5702:	f1 f4       	brne	.+60     	; 0x5740 <I2C_0_SendData+0x5a>
    5704:	c0 93 08 09 	sts	0x0908, r28	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    5708:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZL11i2c_0_WaitWv>
    570c:	81 30       	cpi	r24, 0x01	; 1
    570e:	d1 f4       	brne	.+52     	; 0x5744 <I2C_0_SendData+0x5e>
    5710:	dd 23       	and	r29, r29
    5712:	d1 f0       	breq	.+52     	; 0x5748 <I2C_0_SendData+0x62>
    5714:	01 15       	cp	r16, r1
    5716:	11 05       	cpc	r17, r1
    5718:	c9 f0       	breq	.+50     	; 0x574c <I2C_0_SendData+0x66>
    571a:	c0 e0       	ldi	r28, 0x00	; 0
    571c:	ff 24       	eor	r15, r15
    571e:	fa 94       	dec	r15
    5720:	fd 0e       	add	r15, r29
    5722:	dd 23       	and	r29, r29
    5724:	a9 f0       	breq	.+42     	; 0x5750 <I2C_0_SendData+0x6a>
    5726:	f8 01       	movw	r30, r16
    5728:	80 81       	ld	r24, Z
    572a:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    572e:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZL11i2c_0_WaitWv>
    5732:	81 30       	cpi	r24, 0x01	; 1
    5734:	79 f4       	brne	.+30     	; 0x5754 <I2C_0_SendData+0x6e>
    5736:	cf 5f       	subi	r28, 0xFF	; 255
    5738:	0f 5f       	subi	r16, 0xFF	; 255
    573a:	1f 4f       	sbci	r17, 0xFF	; 255
    573c:	df 2d       	mov	r29, r15
    573e:	ee cf       	rjmp	.-36     	; 0x571c <I2C_0_SendData+0x36>
    5740:	8f ef       	ldi	r24, 0xFF	; 255
    5742:	09 c0       	rjmp	.+18     	; 0x5756 <I2C_0_SendData+0x70>
    5744:	8f ef       	ldi	r24, 0xFF	; 255
    5746:	07 c0       	rjmp	.+14     	; 0x5756 <I2C_0_SendData+0x70>
    5748:	80 e0       	ldi	r24, 0x00	; 0
    574a:	05 c0       	rjmp	.+10     	; 0x5756 <I2C_0_SendData+0x70>
    574c:	80 e0       	ldi	r24, 0x00	; 0
    574e:	03 c0       	rjmp	.+6      	; 0x5756 <I2C_0_SendData+0x70>
    5750:	8c 2f       	mov	r24, r28
    5752:	01 c0       	rjmp	.+2      	; 0x5756 <I2C_0_SendData+0x70>
    5754:	8c 2f       	mov	r24, r28
    5756:	df 91       	pop	r29
    5758:	cf 91       	pop	r28
    575a:	1f 91       	pop	r17
    575c:	0f 91       	pop	r16
    575e:	ff 90       	pop	r15
    5760:	08 95       	ret

00005762 <I2C_0_GetData>:
    5762:	ef 92       	push	r14
    5764:	ff 92       	push	r15
    5766:	1f 93       	push	r17
    5768:	cf 93       	push	r28
    576a:	df 93       	push	r29
    576c:	c8 2f       	mov	r28, r24
    576e:	d6 2f       	mov	r29, r22
    5770:	7a 01       	movw	r14, r20
    5772:	12 2f       	mov	r17, r18
    5774:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    5778:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZL11i2c_0_WaitWv>
    577c:	81 30       	cpi	r24, 0x01	; 1
    577e:	61 f5       	brne	.+88     	; 0x57d8 <I2C_0_GetData+0x76>
    5780:	d0 93 08 09 	sts	0x0908, r29	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    5784:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZL11i2c_0_WaitWv>
    5788:	81 30       	cpi	r24, 0x01	; 1
    578a:	41 f5       	brne	.+80     	; 0x57dc <I2C_0_GetData+0x7a>
    578c:	c1 60       	ori	r28, 0x01	; 1
    578e:	c0 93 07 09 	sts	0x0907, r28	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
    5792:	0e 94 bb 2a 	call	0x5576	; 0x5576 <_ZL11i2c_0_WaitWv>
    5796:	81 30       	cpi	r24, 0x01	; 1
    5798:	19 f5       	brne	.+70     	; 0x57e0 <I2C_0_GetData+0x7e>
    579a:	11 23       	and	r17, r17
    579c:	19 f1       	breq	.+70     	; 0x57e4 <I2C_0_GetData+0x82>
    579e:	e1 14       	cp	r14, r1
    57a0:	f1 04       	cpc	r15, r1
    57a2:	11 f1       	breq	.+68     	; 0x57e8 <I2C_0_GetData+0x86>
    57a4:	c0 e0       	ldi	r28, 0x00	; 0
    57a6:	df ef       	ldi	r29, 0xFF	; 255
    57a8:	d1 0f       	add	r29, r17
    57aa:	11 23       	and	r17, r17
    57ac:	f9 f0       	breq	.+62     	; 0x57ec <I2C_0_GetData+0x8a>
    57ae:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <_ZL11i2c_0_WaitRv>
    57b2:	83 30       	cpi	r24, 0x03	; 3
    57b4:	e9 f4       	brne	.+58     	; 0x57f0 <I2C_0_GetData+0x8e>
    57b6:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    57ba:	f7 01       	movw	r30, r14
    57bc:	80 83       	st	Z, r24
    57be:	d1 11       	cpse	r29, r1
    57c0:	02 c0       	rjmp	.+4      	; 0x57c6 <I2C_0_GetData+0x64>
    57c2:	87 e0       	ldi	r24, 0x07	; 7
    57c4:	01 c0       	rjmp	.+2      	; 0x57c8 <I2C_0_GetData+0x66>
    57c6:	82 e0       	ldi	r24, 0x02	; 2
    57c8:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
    57cc:	cf 5f       	subi	r28, 0xFF	; 255
    57ce:	ff ef       	ldi	r31, 0xFF	; 255
    57d0:	ef 1a       	sub	r14, r31
    57d2:	ff 0a       	sbc	r15, r31
    57d4:	1d 2f       	mov	r17, r29
    57d6:	e7 cf       	rjmp	.-50     	; 0x57a6 <I2C_0_GetData+0x44>
    57d8:	8f ef       	ldi	r24, 0xFF	; 255
    57da:	0b c0       	rjmp	.+22     	; 0x57f2 <I2C_0_GetData+0x90>
    57dc:	8f ef       	ldi	r24, 0xFF	; 255
    57de:	09 c0       	rjmp	.+18     	; 0x57f2 <I2C_0_GetData+0x90>
    57e0:	8f ef       	ldi	r24, 0xFF	; 255
    57e2:	07 c0       	rjmp	.+14     	; 0x57f2 <I2C_0_GetData+0x90>
    57e4:	80 e0       	ldi	r24, 0x00	; 0
    57e6:	05 c0       	rjmp	.+10     	; 0x57f2 <I2C_0_GetData+0x90>
    57e8:	80 e0       	ldi	r24, 0x00	; 0
    57ea:	03 c0       	rjmp	.+6      	; 0x57f2 <I2C_0_GetData+0x90>
    57ec:	8c 2f       	mov	r24, r28
    57ee:	01 c0       	rjmp	.+2      	; 0x57f2 <I2C_0_GetData+0x90>
    57f0:	8c 2f       	mov	r24, r28
    57f2:	df 91       	pop	r29
    57f4:	cf 91       	pop	r28
    57f6:	1f 91       	pop	r17
    57f8:	ff 90       	pop	r15
    57fa:	ef 90       	pop	r14
    57fc:	08 95       	ret

000057fe <I2C_1_Init>:


void I2C_1_Init(void)
{
	/* Select I2C pins PB2/PB3 */
	PORTMUX.TWIROUTEA &= 0x03;
    57fe:	e0 ee       	ldi	r30, 0xE0	; 224
    5800:	f5 e0       	ldi	r31, 0x05	; 5
    5802:	85 81       	ldd	r24, Z+5	; 0x05
    5804:	83 70       	andi	r24, 0x03	; 3
    5806:	85 83       	std	Z+5, r24	; 0x05
	PORTMUX.TWIROUTEA |= 0x08;
    5808:	85 81       	ldd	r24, Z+5	; 0x05
    580a:	88 60       	ori	r24, 0x08	; 8
    580c:	85 83       	std	Z+5, r24	; 0x05
	
	/* Host Baud Rate Control */
	TWI1.MBAUD = TWI_BAUD((I2C_SCL_FREQ), 0.3);
    580e:	e0 e2       	ldi	r30, 0x20	; 32
    5810:	f9 e0       	ldi	r31, 0x09	; 9
    5812:	8f e6       	ldi	r24, 0x6F	; 111
    5814:	86 83       	std	Z+6, r24	; 0x06
	
	/* Enable TWI */
	TWI1.MCTRLA = TWI_ENABLE_bm;
    5816:	81 e0       	ldi	r24, 0x01	; 1
    5818:	83 83       	std	Z+3, r24	; 0x03
	
	/* Initialize the address register */
	TWI1.MADDR = 0x00;
    581a:	17 82       	std	Z+7, r1	; 0x07
	
	/* Initialize the data register */
	TWI1.MDATA = 0x00;
    581c:	10 86       	std	Z+8, r1	; 0x08
	
	/* Set bus state idle */
	TWI1.MSTATUS = TWI_BUSSTATE_IDLE_gc;
    581e:	85 83       	std	Z+5, r24	; 0x05
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    5820:	e2 e3       	ldi	r30, 0x32	; 50
    5822:	f4 e0       	ldi	r31, 0x04	; 4
    5824:	80 81       	ld	r24, Z
    5826:	88 60       	ori	r24, 0x08	; 8
    5828:	80 83       	st	Z, r24
    582a:	e3 e3       	ldi	r30, 0x33	; 51
    582c:	f4 e0       	ldi	r31, 0x04	; 4
    582e:	80 81       	ld	r24, Z
    5830:	88 60       	ori	r24, 0x08	; 8
    5832:	80 83       	st	Z, r24
    5834:	08 95       	ret

00005836 <I2C_1_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_1_SendData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    5836:	ff 92       	push	r15
    5838:	0f 93       	push	r16
    583a:	1f 93       	push	r17
    583c:	cf 93       	push	r28
    583e:	df 93       	push	r29
    5840:	c6 2f       	mov	r28, r22
    5842:	8a 01       	movw	r16, r20
    5844:	d2 2f       	mov	r29, r18
	uint8_t retVal = (uint8_t) - 1;
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
    5846:	8e 7f       	andi	r24, 0xFE	; 254
    5848:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    584c:	0e 94 0e 2b 	call	0x561c	; 0x561c <_ZL11i2c_1_WaitWv>
    5850:	81 30       	cpi	r24, 0x01	; 1
    5852:	f1 f4       	brne	.+60     	; 0x5890 <I2C_1_SendData+0x5a>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    5854:	c0 93 28 09 	sts	0x0928, r28	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    5858:	0e 94 0e 2b 	call	0x561c	; 0x561c <_ZL11i2c_1_WaitWv>
    585c:	81 30       	cpi	r24, 0x01	; 1
    585e:	d1 f4       	brne	.+52     	; 0x5894 <I2C_1_SendData+0x5e>
	{
		return retVal;
	}	

	retVal = 0;
	if((len != 0) && (pData != null))
    5860:	dd 23       	and	r29, r29
    5862:	d1 f0       	breq	.+52     	; 0x5898 <I2C_1_SendData+0x62>
    5864:	01 15       	cp	r16, r1
    5866:	11 05       	cpc	r17, r1
    5868:	c9 f0       	breq	.+50     	; 0x589c <I2C_1_SendData+0x66>
    586a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    586c:	ff 24       	eor	r15, r15
    586e:	fa 94       	dec	r15
    5870:	fd 0e       	add	r15, r29
    5872:	dd 23       	and	r29, r29
    5874:	a9 f0       	breq	.+42     	; 0x58a0 <I2C_1_SendData+0x6a>
		{
			TWI1.MDATA = *pData;
    5876:	f8 01       	movw	r30, r16
    5878:	80 81       	ld	r24, Z
    587a:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
			if(i2c_1_WaitW() == I2C_ACKED)
    587e:	0e 94 0e 2b 	call	0x561c	; 0x561c <_ZL11i2c_1_WaitWv>
    5882:	81 30       	cpi	r24, 0x01	; 1
    5884:	79 f4       	brne	.+30     	; 0x58a4 <I2C_1_SendData+0x6e>
			{
				retVal++;
    5886:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    5888:	0f 5f       	subi	r16, 0xFF	; 255
    588a:	1f 4f       	sbci	r17, 0xFF	; 255
	}	

	retVal = 0;
	if((len != 0) && (pData != null))
	{
		while(len--)
    588c:	df 2d       	mov	r29, r15
    588e:	ee cf       	rjmp	.-36     	; 0x586c <I2C_1_SendData+0x36>
	
	/* Send the slave address */
	TWI1.MADDR = slaveAddr & ~0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    5890:	8f ef       	ldi	r24, 0xFF	; 255
    5892:	09 c0       	rjmp	.+18     	; 0x58a6 <I2C_1_SendData+0x70>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    5894:	8f ef       	ldi	r24, 0xFF	; 255
    5896:	07 c0       	rjmp	.+14     	; 0x58a6 <I2C_1_SendData+0x70>
	}	

	retVal = 0;
    5898:	80 e0       	ldi	r24, 0x00	; 0
    589a:	05 c0       	rjmp	.+10     	; 0x58a6 <I2C_1_SendData+0x70>
    589c:	80 e0       	ldi	r24, 0x00	; 0
    589e:	03 c0       	rjmp	.+6      	; 0x58a6 <I2C_1_SendData+0x70>
    58a0:	8c 2f       	mov	r24, r28
    58a2:	01 c0       	rjmp	.+2      	; 0x58a6 <I2C_1_SendData+0x70>
    58a4:	8c 2f       	mov	r24, r28
			}
		}
	}
	
	return retVal;
}
    58a6:	df 91       	pop	r29
    58a8:	cf 91       	pop	r28
    58aa:	1f 91       	pop	r17
    58ac:	0f 91       	pop	r16
    58ae:	ff 90       	pop	r15
    58b0:	08 95       	ret

000058b2 <I2C_1_GetData>:


/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_1_GetData(uint8_t slaveAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
    58b2:	ef 92       	push	r14
    58b4:	ff 92       	push	r15
    58b6:	1f 93       	push	r17
    58b8:	cf 93       	push	r28
    58ba:	df 93       	push	r29
    58bc:	c8 2f       	mov	r28, r24
    58be:	d6 2f       	mov	r29, r22
    58c0:	7a 01       	movw	r14, r20
    58c2:	12 2f       	mov	r17, r18
	uint8_t retVal = (uint8_t) -1;
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
    58c4:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    58c8:	0e 94 0e 2b 	call	0x561c	; 0x561c <_ZL11i2c_1_WaitWv>
    58cc:	81 30       	cpi	r24, 0x01	; 1
    58ce:	61 f5       	brne	.+88     	; 0x5928 <I2C_1_GetData+0x76>
	{
		return retVal;
	}
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
    58d0:	d0 93 28 09 	sts	0x0928, r29	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
	if(i2c_1_WaitW() != I2C_ACKED)
    58d4:	0e 94 0e 2b 	call	0x561c	; 0x561c <_ZL11i2c_1_WaitWv>
    58d8:	81 30       	cpi	r24, 0x01	; 1
    58da:	41 f5       	brne	.+80     	; 0x592c <I2C_1_GetData+0x7a>
	{
		return retVal;
	}
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
    58dc:	c1 60       	ori	r28, 0x01	; 1
    58de:	c0 93 27 09 	sts	0x0927, r28	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(i2c_1_WaitW() != I2C_ACKED)
    58e2:	0e 94 0e 2b 	call	0x561c	; 0x561c <_ZL11i2c_1_WaitWv>
    58e6:	81 30       	cpi	r24, 0x01	; 1
    58e8:	19 f5       	brne	.+70     	; 0x5930 <I2C_1_GetData+0x7e>
	{
		return retVal;	
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
    58ea:	11 23       	and	r17, r17
    58ec:	19 f1       	breq	.+70     	; 0x5934 <I2C_1_GetData+0x82>
    58ee:	e1 14       	cp	r14, r1
    58f0:	f1 04       	cpc	r15, r1
    58f2:	11 f1       	breq	.+68     	; 0x5938 <I2C_1_GetData+0x86>
    58f4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
    58f6:	df ef       	ldi	r29, 0xFF	; 255
    58f8:	d1 0f       	add	r29, r17
    58fa:	11 23       	and	r17, r17
    58fc:	f9 f0       	breq	.+62     	; 0x593c <I2C_1_GetData+0x8a>
		{
			if(I2C_1_WaitR() == I2C_READY)
    58fe:	0e 94 34 2b 	call	0x5668	; 0x5668 <_ZL11I2C_1_WaitRv>
    5902:	83 30       	cpi	r24, 0x03	; 3
    5904:	e9 f4       	brne	.+58     	; 0x5940 <I2C_1_GetData+0x8e>
			{
				*pData = TWI1.MDATA;
    5906:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
    590a:	f7 01       	movw	r30, r14
    590c:	80 83       	st	Z, r24
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
    590e:	d1 11       	cpse	r29, r1
    5910:	02 c0       	rjmp	.+4      	; 0x5916 <I2C_1_GetData+0x64>
    5912:	87 e0       	ldi	r24, 0x07	; 7
    5914:	01 c0       	rjmp	.+2      	; 0x5918 <I2C_1_GetData+0x66>
    5916:	82 e0       	ldi	r24, 0x02	; 2
    5918:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <__TEXT_REGION_LENGTH__+0x7e0924>
				retVal++;
    591c:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
    591e:	ff ef       	ldi	r31, 0xFF	; 255
    5920:	ef 1a       	sub	r14, r31
    5922:	ff 0a       	sbc	r15, r31
	}
	
	retVal = 0;
	if((len != 0) && (pData !=null ))
	{
		while(len--)
    5924:	1d 2f       	mov	r17, r29
    5926:	e7 cf       	rjmp	.-50     	; 0x58f6 <I2C_1_GetData+0x44>
	
	/* Send the client address for write */
	TWI1.MADDR = slaveAddr;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    5928:	8f ef       	ldi	r24, 0xFF	; 255
    592a:	0b c0       	rjmp	.+22     	; 0x5942 <I2C_1_GetData+0x90>
	
	/* Send the register address */
	TWI1.MDATA = regAddr;	
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;
    592c:	8f ef       	ldi	r24, 0xFF	; 255
    592e:	09 c0       	rjmp	.+18     	; 0x5942 <I2C_1_GetData+0x90>
	
	/* Send the client address for read */
	TWI1.MADDR = slaveAddr | 0x01;
	if(i2c_1_WaitW() != I2C_ACKED)
	{
		return retVal;	
    5930:	8f ef       	ldi	r24, 0xFF	; 255
    5932:	07 c0       	rjmp	.+14     	; 0x5942 <I2C_1_GetData+0x90>
	}
	
	retVal = 0;
    5934:	80 e0       	ldi	r24, 0x00	; 0
    5936:	05 c0       	rjmp	.+10     	; 0x5942 <I2C_1_GetData+0x90>
    5938:	80 e0       	ldi	r24, 0x00	; 0
    593a:	03 c0       	rjmp	.+6      	; 0x5942 <I2C_1_GetData+0x90>
    593c:	8c 2f       	mov	r24, r28
    593e:	01 c0       	rjmp	.+2      	; 0x5942 <I2C_1_GetData+0x90>
    5940:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
    5942:	df 91       	pop	r29
    5944:	cf 91       	pop	r28
    5946:	1f 91       	pop	r17
    5948:	ff 90       	pop	r15
    594a:	ef 90       	pop	r14
    594c:	08 95       	ret

0000594e <_ZL21USART4_initializationm>:


void lb_send_sync(void)
{
	sprintf(g_tempMsgBuff, ".....");
	lb_send_text(g_tempMsgBuff);
    594e:	20 b3       	in	r18, 0x10	; 16
    5950:	2d 7f       	andi	r18, 0xFD	; 253
    5952:	20 bb       	out	0x10, r18	; 16
    5954:	e1 e9       	ldi	r30, 0x91	; 145
    5956:	f4 e0       	ldi	r31, 0x04	; 4
    5958:	20 81       	ld	r18, Z
    595a:	27 7f       	andi	r18, 0xF7	; 247
    595c:	20 83       	st	Z, r18
    595e:	20 b3       	in	r18, 0x10	; 16
    5960:	21 60       	ori	r18, 0x01	; 1
    5962:	20 bb       	out	0x10, r18	; 16
    5964:	21 b3       	in	r18, 0x11	; 17
    5966:	21 60       	ori	r18, 0x01	; 1
    5968:	21 bb       	out	0x11, r18	; 17
    596a:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <USART4_init>
    596e:	08 95       	ret

00005970 <_ZL21USART1_initializationm>:
    5970:	28 b1       	in	r18, 0x08	; 8
    5972:	2d 7f       	andi	r18, 0xFD	; 253
    5974:	28 b9       	out	0x08, r18	; 8
    5976:	e1 e5       	ldi	r30, 0x51	; 81
    5978:	f4 e0       	ldi	r31, 0x04	; 4
    597a:	20 81       	ld	r18, Z
    597c:	27 7f       	andi	r18, 0xF7	; 247
    597e:	20 83       	st	Z, r18
    5980:	28 b1       	in	r18, 0x08	; 8
    5982:	21 60       	ori	r18, 0x01	; 1
    5984:	28 b9       	out	0x08, r18	; 8
    5986:	29 b1       	in	r18, 0x09	; 9
    5988:	21 60       	ori	r18, 0x01	; 1
    598a:	29 b9       	out	0x09, r18	; 9
    598c:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <USART1_init>
    5990:	08 95       	ret

00005992 <_ZL16linkbus_start_txv>:
    5992:	cf 93       	push	r28
    5994:	80 91 cf 46 	lds	r24, 0x46CF	; 0x8046cf <_ZL17linkbus_tx_active>
    5998:	c1 e0       	ldi	r28, 0x01	; 1
    599a:	81 11       	cpse	r24, r1
    599c:	c0 e0       	ldi	r28, 0x00	; 0
    599e:	81 11       	cpse	r24, r1
    59a0:	0c c0       	rjmp	.+24     	; 0x59ba <_ZL16linkbus_start_txv+0x28>
    59a2:	81 e0       	ldi	r24, 0x01	; 1
    59a4:	80 93 cf 46 	sts	0x46CF, r24	; 0x8046cf <_ZL17linkbus_tx_active>
    59a8:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    59ac:	81 11       	cpse	r24, r1
    59ae:	03 c0       	rjmp	.+6      	; 0x59b6 <_ZL16linkbus_start_txv+0x24>
    59b0:	0e 94 63 3d 	call	0x7ac6	; 0x7ac6 <USART4_enable_tx>
    59b4:	02 c0       	rjmp	.+4      	; 0x59ba <_ZL16linkbus_start_txv+0x28>
    59b6:	0e 94 2f 3d 	call	0x7a5e	; 0x7a5e <USART1_enable_tx>
    59ba:	8c 2f       	mov	r24, r28
    59bc:	cf 91       	pop	r28
    59be:	08 95       	ret

000059c0 <_Z18nextFullLBTxBufferv>:
    59c0:	90 e0       	ldi	r25, 0x00	; 0
    59c2:	80 91 82 45 	lds	r24, 0x4582	; 0x804582 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    59c6:	28 2f       	mov	r18, r24
    59c8:	30 e0       	ldi	r19, 0x00	; 0
    59ca:	42 e3       	ldi	r20, 0x32	; 50
    59cc:	42 9f       	mul	r20, r18
    59ce:	f0 01       	movw	r30, r0
    59d0:	43 9f       	mul	r20, r19
    59d2:	f0 0d       	add	r31, r0
    59d4:	11 24       	eor	r1, r1
    59d6:	e9 5f       	subi	r30, 0xF9	; 249
    59d8:	f9 4b       	sbci	r31, 0xB9	; 185
    59da:	40 81       	ld	r20, Z
    59dc:	41 11       	cpse	r20, r1
    59de:	0b c0       	rjmp	.+22     	; 0x59f6 <_Z18nextFullLBTxBufferv+0x36>
    59e0:	9f 5f       	subi	r25, 0xFF	; 255
    59e2:	94 30       	cpi	r25, 0x04	; 4
    59e4:	50 f4       	brcc	.+20     	; 0x59fa <_Z18nextFullLBTxBufferv+0x3a>
    59e6:	8f 5f       	subi	r24, 0xFF	; 255
    59e8:	80 93 82 45 	sts	0x4582, r24	; 0x804582 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    59ec:	84 30       	cpi	r24, 0x04	; 4
    59ee:	48 f3       	brcs	.-46     	; 0x59c2 <_Z18nextFullLBTxBufferv+0x2>
    59f0:	10 92 82 45 	sts	0x4582, r1	; 0x804582 <_ZZ18nextFullLBTxBuffervE11bufferIndex>
    59f4:	e6 cf       	rjmp	.-52     	; 0x59c2 <_Z18nextFullLBTxBufferv+0x2>
    59f6:	81 e0       	ldi	r24, 0x01	; 1
    59f8:	01 c0       	rjmp	.+2      	; 0x59fc <_Z18nextFullLBTxBufferv+0x3c>
    59fa:	80 e0       	ldi	r24, 0x00	; 0
    59fc:	88 23       	and	r24, r24
    59fe:	49 f0       	breq	.+18     	; 0x5a12 <_Z18nextFullLBTxBufferv+0x52>
    5a00:	42 e3       	ldi	r20, 0x32	; 50
    5a02:	42 9f       	mul	r20, r18
    5a04:	c0 01       	movw	r24, r0
    5a06:	43 9f       	mul	r20, r19
    5a08:	90 0d       	add	r25, r0
    5a0a:	11 24       	eor	r1, r1
    5a0c:	89 5f       	subi	r24, 0xF9	; 249
    5a0e:	99 4b       	sbci	r25, 0xB9	; 185
    5a10:	08 95       	ret
    5a12:	80 e0       	ldi	r24, 0x00	; 0
    5a14:	90 e0       	ldi	r25, 0x00	; 0
    5a16:	08 95       	ret

00005a18 <_Z19nextEmptyLBTxBufferv>:
    5a18:	90 e0       	ldi	r25, 0x00	; 0
    5a1a:	80 91 81 45 	lds	r24, 0x4581	; 0x804581 <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    5a1e:	28 2f       	mov	r18, r24
    5a20:	30 e0       	ldi	r19, 0x00	; 0
    5a22:	42 e3       	ldi	r20, 0x32	; 50
    5a24:	42 9f       	mul	r20, r18
    5a26:	f0 01       	movw	r30, r0
    5a28:	43 9f       	mul	r20, r19
    5a2a:	f0 0d       	add	r31, r0
    5a2c:	11 24       	eor	r1, r1
    5a2e:	e9 5f       	subi	r30, 0xF9	; 249
    5a30:	f9 4b       	sbci	r31, 0xB9	; 185
    5a32:	40 81       	ld	r20, Z
    5a34:	44 23       	and	r20, r20
    5a36:	59 f0       	breq	.+22     	; 0x5a4e <_Z19nextEmptyLBTxBufferv+0x36>
    5a38:	9f 5f       	subi	r25, 0xFF	; 255
    5a3a:	94 30       	cpi	r25, 0x04	; 4
    5a3c:	50 f4       	brcc	.+20     	; 0x5a52 <_Z19nextEmptyLBTxBufferv+0x3a>
    5a3e:	8f 5f       	subi	r24, 0xFF	; 255
    5a40:	80 93 81 45 	sts	0x4581, r24	; 0x804581 <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    5a44:	84 30       	cpi	r24, 0x04	; 4
    5a46:	48 f3       	brcs	.-46     	; 0x5a1a <_Z19nextEmptyLBTxBufferv+0x2>
    5a48:	10 92 81 45 	sts	0x4581, r1	; 0x804581 <_ZZ19nextEmptyLBTxBuffervE11bufferIndex>
    5a4c:	e6 cf       	rjmp	.-52     	; 0x5a1a <_Z19nextEmptyLBTxBufferv+0x2>
    5a4e:	81 e0       	ldi	r24, 0x01	; 1
    5a50:	01 c0       	rjmp	.+2      	; 0x5a54 <_Z19nextEmptyLBTxBufferv+0x3c>
    5a52:	80 e0       	ldi	r24, 0x00	; 0
    5a54:	88 23       	and	r24, r24
    5a56:	49 f0       	breq	.+18     	; 0x5a6a <_Z19nextEmptyLBTxBufferv+0x52>
    5a58:	42 e3       	ldi	r20, 0x32	; 50
    5a5a:	42 9f       	mul	r20, r18
    5a5c:	c0 01       	movw	r24, r0
    5a5e:	43 9f       	mul	r20, r19
    5a60:	90 0d       	add	r25, r0
    5a62:	11 24       	eor	r1, r1
    5a64:	89 5f       	subi	r24, 0xF9	; 249
    5a66:	99 4b       	sbci	r25, 0xB9	; 185
    5a68:	08 95       	ret
    5a6a:	80 e0       	ldi	r24, 0x00	; 0
    5a6c:	90 e0       	ldi	r25, 0x00	; 0
    5a6e:	08 95       	ret

00005a70 <_Z19nextEmptyLBRxBufferv>:
    5a70:	90 e0       	ldi	r25, 0x00	; 0
    5a72:	80 91 80 45 	lds	r24, 0x4580	; 0x804580 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    5a76:	28 2f       	mov	r18, r24
    5a78:	30 e0       	ldi	r19, 0x00	; 0
    5a7a:	42 e4       	ldi	r20, 0x42	; 66
    5a7c:	42 9f       	mul	r20, r18
    5a7e:	f0 01       	movw	r30, r0
    5a80:	43 9f       	mul	r20, r19
    5a82:	f0 0d       	add	r31, r0
    5a84:	11 24       	eor	r1, r1
    5a86:	ed 57       	subi	r30, 0x7D	; 125
    5a88:	fa 4b       	sbci	r31, 0xBA	; 186
    5a8a:	41 81       	ldd	r20, Z+1	; 0x01
    5a8c:	52 81       	ldd	r21, Z+2	; 0x02
    5a8e:	45 2b       	or	r20, r21
    5a90:	59 f0       	breq	.+22     	; 0x5aa8 <_Z19nextEmptyLBRxBufferv+0x38>
    5a92:	9f 5f       	subi	r25, 0xFF	; 255
    5a94:	92 30       	cpi	r25, 0x02	; 2
    5a96:	50 f4       	brcc	.+20     	; 0x5aac <_Z19nextEmptyLBRxBufferv+0x3c>
    5a98:	8f 5f       	subi	r24, 0xFF	; 255
    5a9a:	80 93 80 45 	sts	0x4580, r24	; 0x804580 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    5a9e:	82 30       	cpi	r24, 0x02	; 2
    5aa0:	40 f3       	brcs	.-48     	; 0x5a72 <_Z19nextEmptyLBRxBufferv+0x2>
    5aa2:	10 92 80 45 	sts	0x4580, r1	; 0x804580 <_ZZ19nextEmptyLBRxBuffervE11bufferIndex>
    5aa6:	e5 cf       	rjmp	.-54     	; 0x5a72 <_Z19nextEmptyLBRxBufferv+0x2>
    5aa8:	81 e0       	ldi	r24, 0x01	; 1
    5aaa:	01 c0       	rjmp	.+2      	; 0x5aae <_Z19nextEmptyLBRxBufferv+0x3e>
    5aac:	80 e0       	ldi	r24, 0x00	; 0
    5aae:	88 23       	and	r24, r24
    5ab0:	49 f0       	breq	.+18     	; 0x5ac4 <_Z19nextEmptyLBRxBufferv+0x54>
    5ab2:	42 e4       	ldi	r20, 0x42	; 66
    5ab4:	42 9f       	mul	r20, r18
    5ab6:	c0 01       	movw	r24, r0
    5ab8:	43 9f       	mul	r20, r19
    5aba:	90 0d       	add	r25, r0
    5abc:	11 24       	eor	r1, r1
    5abe:	8d 57       	subi	r24, 0x7D	; 125
    5ac0:	9a 4b       	sbci	r25, 0xBA	; 186
    5ac2:	08 95       	ret
    5ac4:	80 e0       	ldi	r24, 0x00	; 0
    5ac6:	90 e0       	ldi	r25, 0x00	; 0
    5ac8:	08 95       	ret

00005aca <_Z18nextFullLBRxBufferv>:
    5aca:	90 e0       	ldi	r25, 0x00	; 0
    5acc:	80 91 7f 45 	lds	r24, 0x457F	; 0x80457f <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    5ad0:	28 2f       	mov	r18, r24
    5ad2:	30 e0       	ldi	r19, 0x00	; 0
    5ad4:	42 e4       	ldi	r20, 0x42	; 66
    5ad6:	42 9f       	mul	r20, r18
    5ad8:	f0 01       	movw	r30, r0
    5ada:	43 9f       	mul	r20, r19
    5adc:	f0 0d       	add	r31, r0
    5ade:	11 24       	eor	r1, r1
    5ae0:	ed 57       	subi	r30, 0x7D	; 125
    5ae2:	fa 4b       	sbci	r31, 0xBA	; 186
    5ae4:	41 81       	ldd	r20, Z+1	; 0x01
    5ae6:	52 81       	ldd	r21, Z+2	; 0x02
    5ae8:	45 2b       	or	r20, r21
    5aea:	59 f4       	brne	.+22     	; 0x5b02 <_Z18nextFullLBRxBufferv+0x38>
    5aec:	9f 5f       	subi	r25, 0xFF	; 255
    5aee:	92 30       	cpi	r25, 0x02	; 2
    5af0:	50 f4       	brcc	.+20     	; 0x5b06 <_Z18nextFullLBRxBufferv+0x3c>
    5af2:	8f 5f       	subi	r24, 0xFF	; 255
    5af4:	80 93 7f 45 	sts	0x457F, r24	; 0x80457f <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    5af8:	82 30       	cpi	r24, 0x02	; 2
    5afa:	40 f3       	brcs	.-48     	; 0x5acc <_Z18nextFullLBRxBufferv+0x2>
    5afc:	10 92 7f 45 	sts	0x457F, r1	; 0x80457f <_ZZ18nextFullLBRxBuffervE11bufferIndex>
    5b00:	e5 cf       	rjmp	.-54     	; 0x5acc <_Z18nextFullLBRxBufferv+0x2>
    5b02:	81 e0       	ldi	r24, 0x01	; 1
    5b04:	01 c0       	rjmp	.+2      	; 0x5b08 <_Z18nextFullLBRxBufferv+0x3e>
    5b06:	80 e0       	ldi	r24, 0x00	; 0
    5b08:	88 23       	and	r24, r24
    5b0a:	49 f0       	breq	.+18     	; 0x5b1e <_Z18nextFullLBRxBufferv+0x54>
    5b0c:	42 e4       	ldi	r20, 0x42	; 66
    5b0e:	42 9f       	mul	r20, r18
    5b10:	c0 01       	movw	r24, r0
    5b12:	43 9f       	mul	r20, r19
    5b14:	90 0d       	add	r25, r0
    5b16:	11 24       	eor	r1, r1
    5b18:	8d 57       	subi	r24, 0x7D	; 125
    5b1a:	9a 4b       	sbci	r25, 0xBA	; 186
    5b1c:	08 95       	ret
    5b1e:	80 e0       	ldi	r24, 0x00	; 0
    5b20:	90 e0       	ldi	r25, 0x00	; 0
    5b22:	08 95       	ret

00005b24 <_Z19linkbusTxInProgressv>:
    5b24:	80 91 cf 46 	lds	r24, 0x46CF	; 0x8046cf <_ZL17linkbus_tx_active>
    5b28:	08 95       	ret

00005b2a <_Z14linkbus_end_txv>:
    5b2a:	80 91 cf 46 	lds	r24, 0x46CF	; 0x8046cf <_ZL17linkbus_tx_active>
    5b2e:	88 23       	and	r24, r24
    5b30:	89 f0       	breq	.+34     	; 0x5b54 <_Z14linkbus_end_txv+0x2a>
    5b32:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    5b36:	81 11       	cpse	r24, r1
    5b38:	06 c0       	rjmp	.+12     	; 0x5b46 <_Z14linkbus_end_txv+0x1c>
    5b3a:	e0 e8       	ldi	r30, 0x80	; 128
    5b3c:	f8 e0       	ldi	r31, 0x08	; 8
    5b3e:	85 81       	ldd	r24, Z+5	; 0x05
    5b40:	8f 7d       	andi	r24, 0xDF	; 223
    5b42:	85 83       	std	Z+5, r24	; 0x05
    5b44:	05 c0       	rjmp	.+10     	; 0x5b50 <_Z14linkbus_end_txv+0x26>
    5b46:	e0 e2       	ldi	r30, 0x20	; 32
    5b48:	f8 e0       	ldi	r31, 0x08	; 8
    5b4a:	85 81       	ldd	r24, Z+5	; 0x05
    5b4c:	8f 7d       	andi	r24, 0xDF	; 223
    5b4e:	85 83       	std	Z+5, r24	; 0x05
    5b50:	10 92 cf 46 	sts	0x46CF, r1	; 0x8046cf <_ZL17linkbus_tx_active>
    5b54:	08 95       	ret

00005b56 <_Z16linkbus_reset_rxv>:
    5b56:	cf 93       	push	r28
    5b58:	df 93       	push	r29
    5b5a:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    5b5e:	81 11       	cpse	r24, r1
    5b60:	14 c0       	rjmp	.+40     	; 0x5b8a <_Z16linkbus_reset_rxv+0x34>
    5b62:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <__TEXT_REGION_LENGTH__+0x7e0886>
    5b66:	88 23       	and	r24, r24
    5b68:	1c f5       	brge	.+70     	; 0x5bb0 <_Z16linkbus_reset_rxv+0x5a>
    5b6a:	e0 e8       	ldi	r30, 0x80	; 128
    5b6c:	f8 e0       	ldi	r31, 0x08	; 8
    5b6e:	86 81       	ldd	r24, Z+6	; 0x06
    5b70:	8f 77       	andi	r24, 0x7F	; 127
    5b72:	86 83       	std	Z+6, r24	; 0x06
    5b74:	84 e8       	ldi	r24, 0x84	; 132
    5b76:	a3 e8       	ldi	r26, 0x83	; 131
    5b78:	b5 e4       	ldi	r27, 0x45	; 69
    5b7a:	ed 01       	movw	r28, r26
    5b7c:	19 92       	st	Y+, r1
    5b7e:	8a 95       	dec	r24
    5b80:	e9 f7       	brne	.-6      	; 0x5b7c <_Z16linkbus_reset_rxv+0x26>
    5b82:	86 81       	ldd	r24, Z+6	; 0x06
    5b84:	80 68       	ori	r24, 0x80	; 128
    5b86:	86 83       	std	Z+6, r24	; 0x06
    5b88:	13 c0       	rjmp	.+38     	; 0x5bb0 <_Z16linkbus_reset_rxv+0x5a>
    5b8a:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x7e0826>
    5b8e:	88 23       	and	r24, r24
    5b90:	7c f4       	brge	.+30     	; 0x5bb0 <_Z16linkbus_reset_rxv+0x5a>
    5b92:	e0 e2       	ldi	r30, 0x20	; 32
    5b94:	f8 e0       	ldi	r31, 0x08	; 8
    5b96:	86 81       	ldd	r24, Z+6	; 0x06
    5b98:	8f 77       	andi	r24, 0x7F	; 127
    5b9a:	86 83       	std	Z+6, r24	; 0x06
    5b9c:	84 e8       	ldi	r24, 0x84	; 132
    5b9e:	a3 e8       	ldi	r26, 0x83	; 131
    5ba0:	b5 e4       	ldi	r27, 0x45	; 69
    5ba2:	ed 01       	movw	r28, r26
    5ba4:	19 92       	st	Y+, r1
    5ba6:	8a 95       	dec	r24
    5ba8:	e9 f7       	brne	.-6      	; 0x5ba4 <_Z16linkbus_reset_rxv+0x4e>
    5baa:	86 81       	ldd	r24, Z+6	; 0x06
    5bac:	80 68       	ori	r24, 0x80	; 128
    5bae:	86 83       	std	Z+6, r24	; 0x06
    5bb0:	df 91       	pop	r29
    5bb2:	cf 91       	pop	r28
    5bb4:	08 95       	ret

00005bb6 <_Z12linkbus_initm14USART_Number_t>:
    5bb6:	cf 92       	push	r12
    5bb8:	df 92       	push	r13
    5bba:	ef 92       	push	r14
    5bbc:	ff 92       	push	r15
    5bbe:	cf 93       	push	r28
    5bc0:	6b 01       	movw	r12, r22
    5bc2:	7c 01       	movw	r14, r24
    5bc4:	84 e8       	ldi	r24, 0x84	; 132
    5bc6:	e3 e8       	ldi	r30, 0x83	; 131
    5bc8:	f5 e4       	ldi	r31, 0x45	; 69
    5bca:	df 01       	movw	r26, r30
    5bcc:	1d 92       	st	X+, r1
    5bce:	8a 95       	dec	r24
    5bd0:	e9 f7       	brne	.-6      	; 0x5bcc <_Z12linkbus_initm14USART_Number_t+0x16>
    5bd2:	80 e0       	ldi	r24, 0x00	; 0
    5bd4:	90 e0       	ldi	r25, 0x00	; 0
    5bd6:	84 30       	cpi	r24, 0x04	; 4
    5bd8:	91 05       	cpc	r25, r1
    5bda:	5c f4       	brge	.+22     	; 0x5bf2 <_Z12linkbus_initm14USART_Number_t+0x3c>
    5bdc:	22 e3       	ldi	r18, 0x32	; 50
    5bde:	28 9f       	mul	r18, r24
    5be0:	f0 01       	movw	r30, r0
    5be2:	29 9f       	mul	r18, r25
    5be4:	f0 0d       	add	r31, r0
    5be6:	11 24       	eor	r1, r1
    5be8:	e9 5f       	subi	r30, 0xF9	; 249
    5bea:	f9 4b       	sbci	r31, 0xB9	; 185
    5bec:	10 82       	st	Z, r1
    5bee:	01 96       	adiw	r24, 0x01	; 1
    5bf0:	f2 cf       	rjmp	.-28     	; 0x5bd6 <_Z12linkbus_initm14USART_Number_t+0x20>
    5bf2:	46 30       	cpi	r20, 0x06	; 6
    5bf4:	21 f4       	brne	.+8      	; 0x5bfe <_Z12linkbus_initm14USART_Number_t+0x48>
    5bf6:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    5bfa:	87 30       	cpi	r24, 0x07	; 7
    5bfc:	61 f4       	brne	.+24     	; 0x5c16 <_Z12linkbus_initm14USART_Number_t+0x60>
    5bfe:	c4 2f       	mov	r28, r20
    5c00:	c7 01       	movw	r24, r14
    5c02:	b6 01       	movw	r22, r12
    5c04:	41 11       	cpse	r20, r1
    5c06:	03 c0       	rjmp	.+6      	; 0x5c0e <_Z12linkbus_initm14USART_Number_t+0x58>
    5c08:	0e 94 a7 2c 	call	0x594e	; 0x594e <_ZL21USART4_initializationm>
    5c0c:	02 c0       	rjmp	.+4      	; 0x5c12 <_Z12linkbus_initm14USART_Number_t+0x5c>
    5c0e:	0e 94 b8 2c 	call	0x5970	; 0x5970 <_ZL21USART1_initializationm>
    5c12:	c0 93 22 40 	sts	0x4022, r28	; 0x804022 <g_linkbus_usart_number>
    5c16:	10 92 23 40 	sts	0x4023, r1	; 0x804023 <_ZL14g_bus_disabled>
    5c1a:	cf 91       	pop	r28
    5c1c:	ff 90       	pop	r15
    5c1e:	ef 90       	pop	r14
    5c20:	df 90       	pop	r13
    5c22:	cf 90       	pop	r12
    5c24:	08 95       	ret

00005c26 <_Z15linkbus_disablev>:
    5c26:	81 e0       	ldi	r24, 0x01	; 1
    5c28:	80 93 23 40 	sts	0x4023, r24	; 0x804023 <_ZL14g_bus_disabled>
    5c2c:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <g_linkbus_usart_number>
    5c30:	84 30       	cpi	r24, 0x04	; 4
    5c32:	19 f4       	brne	.+6      	; 0x5c3a <_Z15linkbus_disablev+0x14>
    5c34:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <USART4_disable>
    5c38:	02 c0       	rjmp	.+4      	; 0x5c3e <_Z15linkbus_disablev+0x18>
    5c3a:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <USART1_disable>
    5c3e:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <_Z14linkbus_end_txv>
    5c42:	84 e8       	ldi	r24, 0x84	; 132
    5c44:	e3 e8       	ldi	r30, 0x83	; 131
    5c46:	f5 e4       	ldi	r31, 0x45	; 69
    5c48:	df 01       	movw	r26, r30
    5c4a:	1d 92       	st	X+, r1
    5c4c:	8a 95       	dec	r24
    5c4e:	e9 f7       	brne	.-6      	; 0x5c4a <_Z15linkbus_disablev+0x24>
    5c50:	80 e0       	ldi	r24, 0x00	; 0
    5c52:	84 30       	cpi	r24, 0x04	; 4
    5c54:	48 f4       	brcc	.+18     	; 0x5c68 <_Z15linkbus_disablev+0x42>
    5c56:	b2 e3       	ldi	r27, 0x32	; 50
    5c58:	8b 9f       	mul	r24, r27
    5c5a:	f0 01       	movw	r30, r0
    5c5c:	11 24       	eor	r1, r1
    5c5e:	e9 5f       	subi	r30, 0xF9	; 249
    5c60:	f9 4b       	sbci	r31, 0xB9	; 185
    5c62:	10 82       	st	Z, r1
    5c64:	8f 5f       	subi	r24, 0xFF	; 255
    5c66:	f5 cf       	rjmp	.-22     	; 0x5c52 <_Z15linkbus_disablev+0x2c>
    5c68:	08 95       	ret

00005c6a <_Z12lb_send_textPc>:
    5c6a:	0f 93       	push	r16
    5c6c:	1f 93       	push	r17
    5c6e:	cf 93       	push	r28
    5c70:	df 93       	push	r29
    5c72:	20 91 23 40 	lds	r18, 0x4023	; 0x804023 <_ZL14g_bus_disabled>
    5c76:	21 11       	cpse	r18, r1
    5c78:	2f c0       	rjmp	.+94     	; 0x5cd8 <_Z12lb_send_textPc+0x6e>
    5c7a:	00 97       	sbiw	r24, 0x00	; 0
    5c7c:	79 f1       	breq	.+94     	; 0x5cdc <_Z12lb_send_textPc+0x72>
    5c7e:	8c 01       	movw	r16, r24
    5c80:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <_Z19nextEmptyLBTxBufferv>
    5c84:	c8 ec       	ldi	r28, 0xC8	; 200
    5c86:	d0 e0       	ldi	r29, 0x00	; 0
    5c88:	00 97       	sbiw	r24, 0x00	; 0
    5c8a:	b1 f4       	brne	.+44     	; 0x5cb8 <_Z12lb_send_textPc+0x4e>
    5c8c:	20 97       	sbiw	r28, 0x00	; 0
    5c8e:	a1 f0       	breq	.+40     	; 0x5cb8 <_Z12lb_send_textPc+0x4e>
    5c90:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <_Z19linkbusTxInProgressv>
    5c94:	88 23       	and	r24, r24
    5c96:	21 f0       	breq	.+8      	; 0x5ca0 <_Z12lb_send_textPc+0x36>
    5c98:	20 97       	sbiw	r28, 0x00	; 0
    5c9a:	21 f4       	brne	.+8      	; 0x5ca4 <_Z12lb_send_textPc+0x3a>
    5c9c:	90 e0       	ldi	r25, 0x00	; 0
    5c9e:	03 c0       	rjmp	.+6      	; 0x5ca6 <_Z12lb_send_textPc+0x3c>
    5ca0:	90 e0       	ldi	r25, 0x00	; 0
    5ca2:	01 c0       	rjmp	.+2      	; 0x5ca6 <_Z12lb_send_textPc+0x3c>
    5ca4:	91 e0       	ldi	r25, 0x01	; 1
    5ca6:	99 23       	and	r25, r25
    5ca8:	21 f0       	breq	.+8      	; 0x5cb2 <_Z12lb_send_textPc+0x48>
    5caa:	20 97       	sbiw	r28, 0x00	; 0
    5cac:	89 f3       	breq	.-30     	; 0x5c90 <_Z12lb_send_textPc+0x26>
    5cae:	21 97       	sbiw	r28, 0x01	; 1
    5cb0:	ef cf       	rjmp	.-34     	; 0x5c90 <_Z12lb_send_textPc+0x26>
    5cb2:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <_Z19nextEmptyLBTxBufferv>
    5cb6:	e8 cf       	rjmp	.-48     	; 0x5c88 <_Z12lb_send_textPc+0x1e>
    5cb8:	00 97       	sbiw	r24, 0x00	; 0
    5cba:	91 f0       	breq	.+36     	; 0x5ce0 <_Z12lb_send_textPc+0x76>
    5cbc:	1f 93       	push	r17
    5cbe:	0f 93       	push	r16
    5cc0:	9f 93       	push	r25
    5cc2:	8f 93       	push	r24
    5cc4:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    5cc8:	0e 94 c9 2c 	call	0x5992	; 0x5992 <_ZL16linkbus_start_txv>
    5ccc:	0f 90       	pop	r0
    5cce:	0f 90       	pop	r0
    5cd0:	0f 90       	pop	r0
    5cd2:	0f 90       	pop	r0
    5cd4:	80 e0       	ldi	r24, 0x00	; 0
    5cd6:	05 c0       	rjmp	.+10     	; 0x5ce2 <_Z12lb_send_textPc+0x78>
    5cd8:	81 e0       	ldi	r24, 0x01	; 1
    5cda:	03 c0       	rjmp	.+6      	; 0x5ce2 <_Z12lb_send_textPc+0x78>
    5cdc:	81 e0       	ldi	r24, 0x01	; 1
    5cde:	01 c0       	rjmp	.+2      	; 0x5ce2 <_Z12lb_send_textPc+0x78>
    5ce0:	81 e0       	ldi	r24, 0x01	; 1
    5ce2:	df 91       	pop	r29
    5ce4:	cf 91       	pop	r28
    5ce6:	1f 91       	pop	r17
    5ce8:	0f 91       	pop	r16
    5cea:	08 95       	ret

00005cec <_Z11lb_send_msg13LBMessageTypePKcPc>:
    5cec:	83 30       	cpi	r24, 0x03	; 3
    5cee:	29 f0       	breq	.+10     	; 0x5cfa <_Z11lb_send_msg13LBMessageTypePKcPc+0xe>
    5cf0:	82 30       	cpi	r24, 0x02	; 2
    5cf2:	31 f0       	breq	.+12     	; 0x5d00 <_Z11lb_send_msg13LBMessageTypePKcPc+0x14>
    5cf4:	9b e3       	ldi	r25, 0x3B	; 59
    5cf6:	84 e2       	ldi	r24, 0x24	; 36
    5cf8:	05 c0       	rjmp	.+10     	; 0x5d04 <_Z11lb_send_msg13LBMessageTypePKcPc+0x18>
    5cfa:	9b e3       	ldi	r25, 0x3B	; 59
    5cfc:	81 e2       	ldi	r24, 0x21	; 33
    5cfe:	02 c0       	rjmp	.+4      	; 0x5d04 <_Z11lb_send_msg13LBMessageTypePKcPc+0x18>
    5d00:	9f e3       	ldi	r25, 0x3F	; 63
    5d02:	84 e2       	ldi	r24, 0x24	; 36
    5d04:	1f 92       	push	r1
    5d06:	9f 93       	push	r25
    5d08:	5f 93       	push	r21
    5d0a:	4f 93       	push	r20
    5d0c:	7f 93       	push	r23
    5d0e:	6f 93       	push	r22
    5d10:	1f 92       	push	r1
    5d12:	8f 93       	push	r24
    5d14:	8e e5       	ldi	r24, 0x5E	; 94
    5d16:	94 e4       	ldi	r25, 0x44	; 68
    5d18:	9f 93       	push	r25
    5d1a:	8f 93       	push	r24
    5d1c:	80 ed       	ldi	r24, 0xD0	; 208
    5d1e:	96 e4       	ldi	r25, 0x46	; 70
    5d20:	9f 93       	push	r25
    5d22:	8f 93       	push	r24
    5d24:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    5d28:	80 ed       	ldi	r24, 0xD0	; 208
    5d2a:	96 e4       	ldi	r25, 0x46	; 70
    5d2c:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_Z12lb_send_textPc>
    5d30:	8d b7       	in	r24, 0x3d	; 61
    5d32:	9e b7       	in	r25, 0x3e	; 62
    5d34:	0c 96       	adiw	r24, 0x0c	; 12
    5d36:	8d bf       	out	0x3d, r24	; 61
    5d38:	9e bf       	out	0x3e, r25	; 62
    5d3a:	08 95       	ret

00005d3c <_Z16lb_broadcast_numjPKc>:
}


void lb_broadcast_num(uint16_t data, const char* str)
{
    5d3c:	0f 93       	push	r16
    5d3e:	1f 93       	push	r17
    5d40:	cf 93       	push	r28
    5d42:	df 93       	push	r29
    5d44:	cd b7       	in	r28, 0x3d	; 61
    5d46:	de b7       	in	r29, 0x3e	; 62
    5d48:	26 97       	sbiw	r28, 0x06	; 6
    5d4a:	cd bf       	out	0x3d, r28	; 61
    5d4c:	de bf       	out	0x3e, r29	; 62
    5d4e:	8b 01       	movw	r16, r22
	char t[6] = "\0";
    5d50:	20 91 53 44 	lds	r18, 0x4453	; 0x804453 <g_80m_power_table+0x41c>
    5d54:	30 91 54 44 	lds	r19, 0x4454	; 0x804454 <g_80m_power_table+0x41d>
    5d58:	29 83       	std	Y+1, r18	; 0x01
    5d5a:	3a 83       	std	Y+2, r19	; 0x02
    5d5c:	fe 01       	movw	r30, r28
    5d5e:	33 96       	adiw	r30, 0x03	; 3
    5d60:	24 e0       	ldi	r18, 0x04	; 4
    5d62:	df 01       	movw	r26, r30
    5d64:	1d 92       	st	X+, r1
    5d66:	2a 95       	dec	r18
    5d68:	e9 f7       	brne	.-6      	; 0x5d64 <_Z16lb_broadcast_numjPKc+0x28>

	sprintf(t, "%u", data);
    5d6a:	9f 93       	push	r25
    5d6c:	8f 93       	push	r24
    5d6e:	8e e6       	ldi	r24, 0x6E	; 110
    5d70:	94 e4       	ldi	r25, 0x44	; 68
    5d72:	9f 93       	push	r25
    5d74:	8f 93       	push	r24
    5d76:	ce 01       	movw	r24, r28
    5d78:	01 96       	adiw	r24, 0x01	; 1
    5d7a:	9f 93       	push	r25
    5d7c:	8f 93       	push	r24
    5d7e:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
	g_tempMsgBuff[0] = '\0';
    5d82:	10 92 d0 46 	sts	0x46D0, r1	; 0x8046d0 <_ZL13g_tempMsgBuff>

	if(str)
    5d86:	0f 90       	pop	r0
    5d88:	0f 90       	pop	r0
    5d8a:	0f 90       	pop	r0
    5d8c:	0f 90       	pop	r0
    5d8e:	0f 90       	pop	r0
    5d90:	0f 90       	pop	r0
    5d92:	01 15       	cp	r16, r1
    5d94:	11 05       	cpc	r17, r1
    5d96:	91 f0       	breq	.+36     	; 0x5dbc <_Z16lb_broadcast_numjPKc+0x80>
	{
		sprintf(g_tempMsgBuff, "%s,%s;", str, t);
    5d98:	ce 01       	movw	r24, r28
    5d9a:	01 96       	adiw	r24, 0x01	; 1
    5d9c:	9f 93       	push	r25
    5d9e:	8f 93       	push	r24
    5da0:	1f 93       	push	r17
    5da2:	0f 93       	push	r16
    5da4:	81 e7       	ldi	r24, 0x71	; 113
    5da6:	94 e4       	ldi	r25, 0x44	; 68
    5da8:	9f 93       	push	r25
    5daa:	8f 93       	push	r24
    5dac:	80 ed       	ldi	r24, 0xD0	; 208
    5dae:	96 e4       	ldi	r25, 0x46	; 70
    5db0:	9f 93       	push	r25
    5db2:	8f 93       	push	r24
    5db4:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>
    5db8:	cd bf       	out	0x3d, r28	; 61
    5dba:	de bf       	out	0x3e, r29	; 62
	}

	if(g_tempMsgBuff[0]) lb_send_text(g_tempMsgBuff);
    5dbc:	80 91 d0 46 	lds	r24, 0x46D0	; 0x8046d0 <_ZL13g_tempMsgBuff>
    5dc0:	88 23       	and	r24, r24
    5dc2:	21 f0       	breq	.+8      	; 0x5dcc <_Z16lb_broadcast_numjPKc+0x90>
    5dc4:	80 ed       	ldi	r24, 0xD0	; 208
    5dc6:	96 e4       	ldi	r25, 0x46	; 70
    5dc8:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_Z12lb_send_textPc>
}
    5dcc:	26 96       	adiw	r28, 0x06	; 6
    5dce:	cd bf       	out	0x3d, r28	; 61
    5dd0:	de bf       	out	0x3e, r29	; 62
    5dd2:	df 91       	pop	r29
    5dd4:	cf 91       	pop	r28
    5dd6:	1f 91       	pop	r17
    5dd8:	0f 91       	pop	r16
    5dda:	08 95       	ret

00005ddc <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    5ddc:	90 e0       	ldi	r25, 0x00	; 0
    5dde:	fc 01       	movw	r30, r24
    5de0:	b0 97       	sbiw	r30, 0x20	; 32
    5de2:	ed 35       	cpi	r30, 0x5D	; 93
    5de4:	f1 05       	cpc	r31, r1
    5de6:	08 f0       	brcs	.+2      	; 0x5dea <_Z12getMorseCharc+0xe>
    5de8:	e8 c0       	rjmp	.+464    	; 0x5fba <_Z12getMorseCharc+0x1de>
    5dea:	e8 55       	subi	r30, 0x58	; 88
    5dec:	ff 4f       	sbci	r31, 0xFF	; 255
    5dee:	0c 94 4a 40 	jmp	0x8094	; 0x8094 <__tablejump2__>
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5df2:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 2;
    5df4:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    5df6:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    5df8:	08 95       	ret

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5dfa:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 4;
    5dfc:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    5dfe:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    5e00:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    5e02:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
    5e04:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    5e06:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    5e08:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5e0a:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
    5e0c:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    5e0e:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    5e10:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5e12:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
    5e14:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 1;
    5e16:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
    5e18:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    5e1a:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
    5e1c:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    5e1e:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    5e20:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5e22:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
    5e24:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    5e26:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    5e28:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5e2a:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
    5e2c:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 7;
    5e2e:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    5e30:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5e32:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
    5e34:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 3;
    5e36:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    5e38:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    5e3a:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
    5e3c:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    5e3e:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    5e40:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    5e42:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
    5e44:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    5e46:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    5e48:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5e4a:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
    5e4c:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    5e4e:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    5e50:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5e52:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
    5e54:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 7;
    5e56:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    5e58:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5e5a:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
    5e5c:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
    5e5e:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    5e60:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    5e62:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
    5e64:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 11;
    5e66:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    5e68:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    5e6a:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
    5e6c:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    5e6e:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    5e70:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    5e72:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
    5e74:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    5e76:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    5e78:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5e7a:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
    5e7c:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    5e7e:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    5e80:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5e82:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
    5e84:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 5;
    5e86:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
    5e88:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5e8a:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
    5e8c:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 3;
    5e8e:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
    5e90:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    5e92:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
    5e94:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
    5e96:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    5e98:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    5e9a:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
    5e9c:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
    5e9e:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    5ea0:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    5ea2:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
    5ea4:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
    5ea6:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    5ea8:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    5eaa:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
    5eac:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    5eae:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    5eb0:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    5eb2:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
    5eb4:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
    5eb6:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    5eb8:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5eba:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
    5ebc:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
    5ebe:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    5ec0:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    5ec2:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    5ec4:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    5ec6:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    5ec8:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    5eca:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
    5ecc:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    5ece:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    5ed0:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    5ed2:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
    5ed4:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    5ed6:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    5ed8:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    5eda:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
    5edc:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    5ede:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    5ee0:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    5ee2:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
    5ee4:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    5ee6:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    5ee8:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    5eea:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
    5eec:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 9;
    5eee:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
    5ef0:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    5ef2:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
    5ef4:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    5ef6:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    5ef8:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    5efa:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
    5efc:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    5efe:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    5f00:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    5f02:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
    5f04:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    5f06:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    5f08:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    5f0a:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
    5f0c:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
    5f0e:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    5f10:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    5f12:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
    5f14:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    5f16:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    5f18:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    5f1a:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
    5f1c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    5f1e:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    5f20:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    5f22:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
    5f24:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    5f26:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    5f28:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    5f2a:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
    5f2c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    5f2e:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    5f30:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    5f32:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
    5f34:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    5f36:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    5f38:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    5f3a:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
    5f3c:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    5f3e:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    5f40:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    5f42:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
    5f44:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
    5f46:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    5f48:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    5f4a:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
    5f4c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
    5f4e:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    5f50:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    5f52:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
    5f54:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
    5f56:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
    5f58:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    5f5a:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
    5f5c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    5f5e:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    5f60:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    5f62:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
    5f64:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 12;
    5f66:	8c e0       	ldi	r24, 0x0C	; 12
		}
		break;
    5f68:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    5f6a:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
    5f6c:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    5f6e:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    5f70:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    5f72:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
    5f74:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
    5f76:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
    5f78:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    5f7a:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
    5f7c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    5f7e:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    5f80:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    5f82:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
    5f84:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    5f86:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    5f88:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    5f8a:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
    5f8c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
    5f8e:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
    5f90:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    5f92:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
    5f94:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
    5f96:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    5f98:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    5f9a:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
    5f9c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
    5f9e:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
    5fa0:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    5fa2:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
    5fa4:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    5fa6:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;
    5fa8:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    5faa:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
    5fac:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    5fae:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
    5fb0:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    5fb2:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    5fb4:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    5fb6:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    5fb8:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    5fba:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
    5fbc:	70 e0       	ldi	r23, 0x00	; 0
			morse.lengthInElements = 0;
    5fbe:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}

	return( morse);
}
    5fc0:	08 95       	ret

00005fc2 <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    5fc2:	cf 93       	push	r28
    5fc4:	df 93       	push	r29
    5fc6:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    5fc8:	00 97       	sbiw	r24, 0x00	; 0
    5fca:	b1 f1       	breq	.+108    	; 0x6038 <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    5fcc:	10 92 0d 47 	sts	0x470D, r1	; 0x80470d <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    5fd0:	61 15       	cp	r22, r1
    5fd2:	71 05       	cpc	r23, r1
    5fd4:	21 f0       	breq	.+8      	; 0x5fde <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    5fd6:	db 01       	movw	r26, r22
    5fd8:	2c 91       	ld	r18, X
    5fda:	20 93 25 40 	sts	0x4025, r18	; 0x804025 <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    5fde:	fc 01       	movw	r30, r24
    5fe0:	20 81       	ld	r18, Z
    5fe2:	22 23       	and	r18, r18
    5fe4:	d9 f0       	breq	.+54     	; 0x601c <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    5fe6:	80 93 0b 47 	sts	0x470B, r24	; 0x80470b <_ZZ9makeMorsePcPhS0_E3str>
    5fea:	90 93 0c 47 	sts	0x470C, r25	; 0x80470c <_ZZ9makeMorsePcPhS0_E3str+0x1>
			c = ' ';
    5fee:	80 e2       	ldi	r24, 0x20	; 32
    5ff0:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    5ff4:	82 2f       	mov	r24, r18
    5ff6:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <_Z12getMorseCharc>
    5ffa:	60 93 08 47 	sts	0x4708, r22	; 0x804708 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    5ffe:	70 93 09 47 	sts	0x4709, r23	; 0x804709 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    6002:	80 93 0a 47 	sts	0x470A, r24	; 0x80470a <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    6006:	10 92 07 47 	sts	0x4707, r1	; 0x804707 <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    600a:	10 92 06 47 	sts	0x4706, r1	; 0x804706 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    600e:	10 92 05 47 	sts	0x4705, r1	; 0x804705 <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    6012:	10 92 04 47 	sts	0x4704, r1	; 0x804704 <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    6016:	10 92 03 47 	sts	0x4703, r1	; 0x804703 <_ZZ9makeMorsePcPhS0_E15completedString>
    601a:	0a c0       	rjmp	.+20     	; 0x6030 <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    601c:	10 92 0b 47 	sts	0x470B, r1	; 0x80470b <_ZZ9makeMorsePcPhS0_E3str>
    6020:	10 92 0c 47 	sts	0x470C, r1	; 0x80470c <_ZZ9makeMorsePcPhS0_E3str+0x1>
			completedString = TRUE;
    6024:	81 e0       	ldi	r24, 0x01	; 1
    6026:	80 93 03 47 	sts	0x4703, r24	; 0x804703 <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    602a:	20 97       	sbiw	r28, 0x00	; 0
    602c:	09 f0       	breq	.+2      	; 0x6030 <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    602e:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    6030:	10 92 02 47 	sts	0x4702, r1	; 0x804702 <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    6034:	80 e0       	ldi	r24, 0x00	; 0
    6036:	bb c0       	rjmp	.+374    	; 0x61ae <_Z9makeMorsePcPhS0_+0x1ec>
	}
	else if(str)
    6038:	e0 91 0b 47 	lds	r30, 0x470B	; 0x80470b <_ZZ9makeMorsePcPhS0_E3str>
    603c:	f0 91 0c 47 	lds	r31, 0x470C	; 0x80470c <_ZZ9makeMorsePcPhS0_E3str+0x1>
    6040:	30 97       	sbiw	r30, 0x00	; 0
    6042:	09 f4       	brne	.+2      	; 0x6046 <_Z9makeMorsePcPhS0_+0x84>
    6044:	a5 c0       	rjmp	.+330    	; 0x6190 <_Z9makeMorsePcPhS0_+0x1ce>
	{
		if(repeating)
    6046:	61 15       	cp	r22, r1
    6048:	71 05       	cpc	r23, r1
    604a:	21 f0       	breq	.+8      	; 0x6054 <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    604c:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPhS0_E6repeat>
    6050:	db 01       	movw	r26, r22
    6052:	8c 93       	st	X, r24
		}

		if(completedString)
    6054:	80 91 03 47 	lds	r24, 0x4703	; 0x804703 <_ZZ9makeMorsePcPhS0_E15completedString>
    6058:	88 23       	and	r24, r24
    605a:	49 f0       	breq	.+18     	; 0x606e <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    605c:	20 97       	sbiw	r28, 0x00	; 0
    605e:	09 f4       	brne	.+2      	; 0x6062 <_Z9makeMorsePcPhS0_+0xa0>
    6060:	a3 c0       	rjmp	.+326    	; 0x61a8 <_Z9makeMorsePcPhS0_+0x1e6>
			{
				*finished = TRUE;
    6062:	81 e0       	ldi	r24, 0x01	; 1
    6064:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    6066:	10 92 0d 47 	sts	0x470D, r1	; 0x80470d <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    606a:	80 e0       	ldi	r24, 0x00	; 0
    606c:	a0 c0       	rjmp	.+320    	; 0x61ae <_Z9makeMorsePcPhS0_+0x1ec>
		}

		if(elementIndex)
    606e:	80 91 05 47 	lds	r24, 0x4705	; 0x804705 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    6072:	88 23       	and	r24, r24
    6074:	21 f0       	breq	.+8      	; 0x607e <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    6076:	81 50       	subi	r24, 0x01	; 1
    6078:	80 93 05 47 	sts	0x4705, r24	; 0x804705 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    607c:	7f c0       	rjmp	.+254    	; 0x617c <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    607e:	80 91 02 47 	lds	r24, 0x4702	; 0x804702 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    6082:	88 23       	and	r24, r24
    6084:	81 f0       	breq	.+32     	; 0x60a6 <_Z9makeMorsePcPhS0_+0xe4>
    6086:	80 91 0d 47 	lds	r24, 0x470D	; 0x80470d <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    608a:	81 11       	cpse	r24, r1
    608c:	0c c0       	rjmp	.+24     	; 0x60a6 <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    608e:	10 92 02 47 	sts	0x4702, r1	; 0x804702 <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    6092:	80 91 04 47 	lds	r24, 0x4704	; 0x804704 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    6096:	88 23       	and	r24, r24
    6098:	09 f4       	brne	.+2      	; 0x609c <_Z9makeMorsePcPhS0_+0xda>
    609a:	70 c0       	rjmp	.+224    	; 0x617c <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    609c:	80 93 05 47 	sts	0x4705, r24	; 0x804705 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    60a0:	10 92 04 47 	sts	0x4704, r1	; 0x804704 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    60a4:	6b c0       	rjmp	.+214    	; 0x617c <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    60a6:	90 91 09 47 	lds	r25, 0x4709	; 0x804709 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    60aa:	80 91 06 47 	lds	r24, 0x4706	; 0x804706 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    60ae:	89 17       	cp	r24, r25
    60b0:	90 f1       	brcs	.+100    	; 0x6116 <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    60b2:	80 91 07 47 	lds	r24, 0x4707	; 0x804707 <_ZZ9makeMorsePcPhS0_E9charIndex>
    60b6:	8f 5f       	subi	r24, 0xFF	; 255
    60b8:	80 93 07 47 	sts	0x4707, r24	; 0x804707 <_ZZ9makeMorsePcPhS0_E9charIndex>
    60bc:	df 01       	movw	r26, r30
    60be:	a8 0f       	add	r26, r24
    60c0:	b1 1d       	adc	r27, r1
    60c2:	8c 91       	ld	r24, X
    60c4:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    60c8:	81 11       	cpse	r24, r1
    60ca:	19 c0       	rjmp	.+50     	; 0x60fe <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    60cc:	80 91 25 40 	lds	r24, 0x4025	; 0x804025 <_ZZ9makeMorsePcPhS0_E6repeat>
    60d0:	88 23       	and	r24, r24
    60d2:	31 f0       	breq	.+12     	; 0x60e0 <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    60d4:	80 81       	ld	r24, Z
    60d6:	80 93 24 40 	sts	0x4024, r24	; 0x804024 <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    60da:	10 92 07 47 	sts	0x4707, r1	; 0x804707 <_ZZ9makeMorsePcPhS0_E9charIndex>
    60de:	0f c0       	rjmp	.+30     	; 0x60fe <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    60e0:	10 92 0b 47 	sts	0x470B, r1	; 0x80470b <_ZZ9makeMorsePcPhS0_E3str>
    60e4:	10 92 0c 47 	sts	0x470C, r1	; 0x80470c <_ZZ9makeMorsePcPhS0_E3str+0x1>
						carrierOn = OFF;
    60e8:	10 92 02 47 	sts	0x4702, r1	; 0x804702 <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    60ec:	91 e0       	ldi	r25, 0x01	; 1
    60ee:	90 93 03 47 	sts	0x4703, r25	; 0x804703 <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    60f2:	20 97       	sbiw	r28, 0x00	; 0
    60f4:	09 f0       	breq	.+2      	; 0x60f8 <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    60f6:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    60f8:	10 92 0d 47 	sts	0x470D, r1	; 0x80470d <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    60fc:	58 c0       	rjmp	.+176    	; 0x61ae <_Z9makeMorsePcPhS0_+0x1ec>
					}
				}

				morseInProgress = getMorseChar(c);
    60fe:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPhS0_E1c>
    6102:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <_Z12getMorseCharc>
    6106:	60 93 08 47 	sts	0x4708, r22	; 0x804708 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    610a:	70 93 09 47 	sts	0x4709, r23	; 0x804709 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    610e:	80 93 0a 47 	sts	0x470A, r24	; 0x80470a <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    6112:	10 92 06 47 	sts	0x4706, r1	; 0x804706 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    6116:	20 91 08 47 	lds	r18, 0x4708	; 0x804708 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    611a:	2d 3f       	cpi	r18, 0xFD	; 253
    611c:	00 f5       	brcc	.+64     	; 0x615e <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    611e:	40 91 06 47 	lds	r20, 0x4706	; 0x804706 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    6122:	31 e0       	ldi	r19, 0x01	; 1
    6124:	34 0f       	add	r19, r20
    6126:	30 93 06 47 	sts	0x4706, r19	; 0x804706 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    612a:	81 e0       	ldi	r24, 0x01	; 1
    612c:	90 e0       	ldi	r25, 0x00	; 0
    612e:	02 c0       	rjmp	.+4      	; 0x6134 <_Z9makeMorsePcPhS0_+0x172>
    6130:	88 0f       	add	r24, r24
    6132:	99 1f       	adc	r25, r25
    6134:	4a 95       	dec	r20
    6136:	e2 f7       	brpl	.-8      	; 0x6130 <_Z9makeMorsePcPhS0_+0x16e>
    6138:	82 23       	and	r24, r18

				if(isDah)
    613a:	21 f0       	breq	.+8      	; 0x6144 <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    613c:	82 e0       	ldi	r24, 0x02	; 2
    613e:	80 93 05 47 	sts	0x4705, r24	; 0x804705 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    6142:	02 c0       	rjmp	.+4      	; 0x6148 <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    6144:	10 92 05 47 	sts	0x4705, r1	; 0x804705 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    6148:	81 e0       	ldi	r24, 0x01	; 1
    614a:	80 93 02 47 	sts	0x4702, r24	; 0x804702 <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    614e:	80 91 09 47 	lds	r24, 0x4709	; 0x804709 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    6152:	38 17       	cp	r19, r24
    6154:	98 f0       	brcs	.+38     	; 0x617c <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    6156:	82 e0       	ldi	r24, 0x02	; 2
    6158:	80 93 04 47 	sts	0x4704, r24	; 0x804704 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    615c:	0f c0       	rjmp	.+30     	; 0x617c <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    615e:	80 91 09 47 	lds	r24, 0x4709	; 0x804709 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    6162:	9f ef       	ldi	r25, 0xFF	; 255
    6164:	90 93 06 47 	sts	0x4706, r25	; 0x804706 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    6168:	10 92 02 47 	sts	0x4702, r1	; 0x804702 <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    616c:	84 30       	cpi	r24, 0x04	; 4
    616e:	20 f0       	brcs	.+8      	; 0x6178 <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    6170:	84 50       	subi	r24, 0x04	; 4
    6172:	80 93 05 47 	sts	0x4705, r24	; 0x804705 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    6176:	02 c0       	rjmp	.+4      	; 0x617c <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    6178:	10 92 05 47 	sts	0x4705, r1	; 0x804705 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    617c:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <_ZZ9makeMorsePcPhS0_E1c>
    6180:	8c 33       	cpi	r24, 0x3C	; 60
    6182:	21 f4       	brne	.+8      	; 0x618c <_Z9makeMorsePcPhS0_+0x1ca>
		{
			holdKeyDown = TRUE;
    6184:	81 e0       	ldi	r24, 0x01	; 1
    6186:	80 93 0d 47 	sts	0x470D, r24	; 0x80470d <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    618a:	02 c0       	rjmp	.+4      	; 0x6190 <_Z9makeMorsePcPhS0_+0x1ce>
		}
		else
		{
			holdKeyDown = FALSE;
    618c:	10 92 0d 47 	sts	0x470D, r1	; 0x80470d <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    6190:	20 97       	sbiw	r28, 0x00	; 0
    6192:	19 f0       	breq	.+6      	; 0x619a <_Z9makeMorsePcPhS0_+0x1d8>
	{
		*finished = completedString;
    6194:	80 91 03 47 	lds	r24, 0x4703	; 0x804703 <_ZZ9makeMorsePcPhS0_E15completedString>
    6198:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    619a:	80 91 0d 47 	lds	r24, 0x470D	; 0x80470d <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    619e:	81 11       	cpse	r24, r1
    61a0:	05 c0       	rjmp	.+10     	; 0x61ac <_Z9makeMorsePcPhS0_+0x1ea>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    61a2:	80 91 02 47 	lds	r24, 0x4702	; 0x804702 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    61a6:	03 c0       	rjmp	.+6      	; 0x61ae <_Z9makeMorsePcPhS0_+0x1ec>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    61a8:	80 e0       	ldi	r24, 0x00	; 0
    61aa:	01 c0       	rjmp	.+2      	; 0x61ae <_Z9makeMorsePcPhS0_+0x1ec>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    61ac:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    61ae:	df 91       	pop	r29
    61b0:	cf 91       	pop	r28
    61b2:	08 95       	ret

000061b4 <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    61b4:	cf 92       	push	r12
    61b6:	df 92       	push	r13
    61b8:	ef 92       	push	r14
    61ba:	ff 92       	push	r15
    61bc:	1f 93       	push	r17
    61be:	cf 93       	push	r28
    61c0:	df 93       	push	r29
    61c2:	6c 01       	movw	r12, r24
    61c4:	7b 01       	movw	r14, r22
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    61c6:	c0 e0       	ldi	r28, 0x00	; 0
    61c8:	d0 e0       	ldi	r29, 0x00	; 0
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    61ca:	10 e0       	ldi	r17, 0x00	; 0
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    61cc:	c4 31       	cpi	r28, 0x14	; 20
    61ce:	d1 05       	cpc	r29, r1
    61d0:	74 f4       	brge	.+28     	; 0x61ee <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
	{
		c = str[i];
    61d2:	f6 01       	movw	r30, r12
    61d4:	ec 0f       	add	r30, r28
    61d6:	fd 1f       	adc	r31, r29
    61d8:	80 81       	ld	r24, Z
		if(!c)
    61da:	88 23       	and	r24, r24
    61dc:	41 f0       	breq	.+16     	; 0x61ee <_Z26timeRequiredToSendStrAtWPMPcj+0x3a>
		{
			break;
		}
		m = getMorseChar(c);
    61de:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    61e2:	6d 3f       	cpi	r22, 0xFD	; 253
    61e4:	08 f4       	brcc	.+2      	; 0x61e8 <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
		{
			elements += 3;
    61e6:	1d 5f       	subi	r17, 0xFD	; 253
		}
		elements += m.lengthInElements;
    61e8:	18 0f       	add	r17, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    61ea:	21 96       	adiw	r28, 0x01	; 1
    61ec:	ef cf       	rjmp	.-34     	; 0x61cc <_Z26timeRequiredToSendStrAtWPMPcj+0x18>
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    61ee:	80 eb       	ldi	r24, 0xB0	; 176
    61f0:	94 e0       	ldi	r25, 0x04	; 4
    61f2:	b7 01       	movw	r22, r14
    61f4:	0e 94 e1 3f 	call	0x7fc2	; 0x7fc2 <__udivmodhi4>
}
    61f8:	16 9f       	mul	r17, r22
    61fa:	c0 01       	movw	r24, r0
    61fc:	17 9f       	mul	r17, r23
    61fe:	90 0d       	add	r25, r0
    6200:	11 24       	eor	r1, r1
    6202:	df 91       	pop	r29
    6204:	cf 91       	pop	r28
    6206:	1f 91       	pop	r17
    6208:	ff 90       	pop	r15
    620a:	ef 90       	pop	r14
    620c:	df 90       	pop	r13
    620e:	cf 90       	pop	r12
    6210:	08 95       	ret

00006212 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    6212:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    6214:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    6216:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    6218:	40 83       	st	Z, r20
	ret                             // Return to caller
    621a:	08 95       	ret

0000621c <_ZL21USART4_initializationm>:
	}
	
	serialbus_end_tx();
	memset(rx_buffer, 0, sizeof(rx_buffer));

	for(bufferIndex=0; bufferIndex<SERIALBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
    621c:	20 b3       	in	r18, 0x10	; 16
    621e:	2d 7f       	andi	r18, 0xFD	; 253
    6220:	20 bb       	out	0x10, r18	; 16
    6222:	e1 e9       	ldi	r30, 0x91	; 145
    6224:	f4 e0       	ldi	r31, 0x04	; 4
    6226:	20 81       	ld	r18, Z
    6228:	27 7f       	andi	r18, 0xF7	; 247
    622a:	20 83       	st	Z, r18
    622c:	20 b3       	in	r18, 0x10	; 16
    622e:	21 60       	ori	r18, 0x01	; 1
    6230:	20 bb       	out	0x10, r18	; 16
    6232:	21 b3       	in	r18, 0x11	; 17
    6234:	21 60       	ori	r18, 0x01	; 1
    6236:	21 bb       	out	0x11, r18	; 17
    6238:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <USART4_init>
    623c:	08 95       	ret

0000623e <_ZL21USART1_initializationm>:
    623e:	28 b1       	in	r18, 0x08	; 8
    6240:	2d 7f       	andi	r18, 0xFD	; 253
    6242:	28 b9       	out	0x08, r18	; 8
    6244:	e1 e5       	ldi	r30, 0x51	; 81
    6246:	f4 e0       	ldi	r31, 0x04	; 4
    6248:	20 81       	ld	r18, Z
    624a:	27 7f       	andi	r18, 0xF7	; 247
    624c:	20 83       	st	Z, r18
    624e:	28 b1       	in	r18, 0x08	; 8
    6250:	21 60       	ori	r18, 0x01	; 1
    6252:	28 b9       	out	0x08, r18	; 8
    6254:	29 b1       	in	r18, 0x09	; 9
    6256:	21 60       	ori	r18, 0x01	; 1
    6258:	29 b9       	out	0x09, r18	; 9
    625a:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <USART1_init>
    625e:	08 95       	ret

00006260 <nextFullSBTxBuffer>:
    6260:	90 e0       	ldi	r25, 0x00	; 0
    6262:	80 91 11 47 	lds	r24, 0x4711	; 0x804711 <_ZZ18nextFullSBTxBufferE11bufferIndex>
    6266:	28 2f       	mov	r18, r24
    6268:	30 e0       	ldi	r19, 0x00	; 0
    626a:	49 e2       	ldi	r20, 0x29	; 41
    626c:	42 9f       	mul	r20, r18
    626e:	f0 01       	movw	r30, r0
    6270:	43 9f       	mul	r20, r19
    6272:	f0 0d       	add	r31, r0
    6274:	11 24       	eor	r1, r1
    6276:	e0 57       	subi	r30, 0x70	; 112
    6278:	f8 4b       	sbci	r31, 0xB8	; 184
    627a:	40 81       	ld	r20, Z
    627c:	41 11       	cpse	r20, r1
    627e:	0b c0       	rjmp	.+22     	; 0x6296 <nextFullSBTxBuffer+0x36>
    6280:	9f 5f       	subi	r25, 0xFF	; 255
    6282:	93 30       	cpi	r25, 0x03	; 3
    6284:	50 f4       	brcc	.+20     	; 0x629a <nextFullSBTxBuffer+0x3a>
    6286:	8f 5f       	subi	r24, 0xFF	; 255
    6288:	80 93 11 47 	sts	0x4711, r24	; 0x804711 <_ZZ18nextFullSBTxBufferE11bufferIndex>
    628c:	83 30       	cpi	r24, 0x03	; 3
    628e:	48 f3       	brcs	.-46     	; 0x6262 <nextFullSBTxBuffer+0x2>
    6290:	10 92 11 47 	sts	0x4711, r1	; 0x804711 <_ZZ18nextFullSBTxBufferE11bufferIndex>
    6294:	e6 cf       	rjmp	.-52     	; 0x6262 <nextFullSBTxBuffer+0x2>
    6296:	81 e0       	ldi	r24, 0x01	; 1
    6298:	01 c0       	rjmp	.+2      	; 0x629c <nextFullSBTxBuffer+0x3c>
    629a:	80 e0       	ldi	r24, 0x00	; 0
    629c:	88 23       	and	r24, r24
    629e:	49 f0       	breq	.+18     	; 0x62b2 <nextFullSBTxBuffer+0x52>
    62a0:	49 e2       	ldi	r20, 0x29	; 41
    62a2:	42 9f       	mul	r20, r18
    62a4:	c0 01       	movw	r24, r0
    62a6:	43 9f       	mul	r20, r19
    62a8:	90 0d       	add	r25, r0
    62aa:	11 24       	eor	r1, r1
    62ac:	80 57       	subi	r24, 0x70	; 112
    62ae:	98 4b       	sbci	r25, 0xB8	; 184
    62b0:	08 95       	ret
    62b2:	80 e0       	ldi	r24, 0x00	; 0
    62b4:	90 e0       	ldi	r25, 0x00	; 0
    62b6:	08 95       	ret

000062b8 <nextEmptySBTxBuffer>:
    62b8:	90 e0       	ldi	r25, 0x00	; 0
    62ba:	80 91 10 47 	lds	r24, 0x4710	; 0x804710 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    62be:	28 2f       	mov	r18, r24
    62c0:	30 e0       	ldi	r19, 0x00	; 0
    62c2:	49 e2       	ldi	r20, 0x29	; 41
    62c4:	42 9f       	mul	r20, r18
    62c6:	f0 01       	movw	r30, r0
    62c8:	43 9f       	mul	r20, r19
    62ca:	f0 0d       	add	r31, r0
    62cc:	11 24       	eor	r1, r1
    62ce:	e0 57       	subi	r30, 0x70	; 112
    62d0:	f8 4b       	sbci	r31, 0xB8	; 184
    62d2:	40 81       	ld	r20, Z
    62d4:	44 23       	and	r20, r20
    62d6:	59 f0       	breq	.+22     	; 0x62ee <nextEmptySBTxBuffer+0x36>
    62d8:	9f 5f       	subi	r25, 0xFF	; 255
    62da:	93 30       	cpi	r25, 0x03	; 3
    62dc:	50 f4       	brcc	.+20     	; 0x62f2 <nextEmptySBTxBuffer+0x3a>
    62de:	8f 5f       	subi	r24, 0xFF	; 255
    62e0:	80 93 10 47 	sts	0x4710, r24	; 0x804710 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    62e4:	83 30       	cpi	r24, 0x03	; 3
    62e6:	48 f3       	brcs	.-46     	; 0x62ba <nextEmptySBTxBuffer+0x2>
    62e8:	10 92 10 47 	sts	0x4710, r1	; 0x804710 <_ZZ19nextEmptySBTxBufferE11bufferIndex>
    62ec:	e6 cf       	rjmp	.-52     	; 0x62ba <nextEmptySBTxBuffer+0x2>
    62ee:	81 e0       	ldi	r24, 0x01	; 1
    62f0:	01 c0       	rjmp	.+2      	; 0x62f4 <nextEmptySBTxBuffer+0x3c>
    62f2:	80 e0       	ldi	r24, 0x00	; 0
    62f4:	88 23       	and	r24, r24
    62f6:	49 f0       	breq	.+18     	; 0x630a <nextEmptySBTxBuffer+0x52>
    62f8:	49 e2       	ldi	r20, 0x29	; 41
    62fa:	42 9f       	mul	r20, r18
    62fc:	c0 01       	movw	r24, r0
    62fe:	43 9f       	mul	r20, r19
    6300:	90 0d       	add	r25, r0
    6302:	11 24       	eor	r1, r1
    6304:	80 57       	subi	r24, 0x70	; 112
    6306:	98 4b       	sbci	r25, 0xB8	; 184
    6308:	08 95       	ret
    630a:	80 e0       	ldi	r24, 0x00	; 0
    630c:	90 e0       	ldi	r25, 0x00	; 0
    630e:	08 95       	ret

00006310 <nextEmptySBRxBuffer>:
    6310:	90 e0       	ldi	r25, 0x00	; 0
    6312:	80 91 0f 47 	lds	r24, 0x470F	; 0x80470f <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    6316:	28 2f       	mov	r18, r24
    6318:	30 e0       	ldi	r19, 0x00	; 0
    631a:	4f e3       	ldi	r20, 0x3F	; 63
    631c:	42 9f       	mul	r20, r18
    631e:	f0 01       	movw	r30, r0
    6320:	43 9f       	mul	r20, r19
    6322:	f0 0d       	add	r31, r0
    6324:	11 24       	eor	r1, r1
    6326:	ee 5e       	subi	r30, 0xEE	; 238
    6328:	f8 4b       	sbci	r31, 0xB8	; 184
    632a:	41 81       	ldd	r20, Z+1	; 0x01
    632c:	52 81       	ldd	r21, Z+2	; 0x02
    632e:	45 2b       	or	r20, r21
    6330:	59 f0       	breq	.+22     	; 0x6348 <nextEmptySBRxBuffer+0x38>
    6332:	9f 5f       	subi	r25, 0xFF	; 255
    6334:	92 30       	cpi	r25, 0x02	; 2
    6336:	50 f4       	brcc	.+20     	; 0x634c <nextEmptySBRxBuffer+0x3c>
    6338:	8f 5f       	subi	r24, 0xFF	; 255
    633a:	80 93 0f 47 	sts	0x470F, r24	; 0x80470f <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    633e:	82 30       	cpi	r24, 0x02	; 2
    6340:	40 f3       	brcs	.-48     	; 0x6312 <nextEmptySBRxBuffer+0x2>
    6342:	10 92 0f 47 	sts	0x470F, r1	; 0x80470f <_ZZ19nextEmptySBRxBufferE11bufferIndex>
    6346:	e5 cf       	rjmp	.-54     	; 0x6312 <nextEmptySBRxBuffer+0x2>
    6348:	81 e0       	ldi	r24, 0x01	; 1
    634a:	01 c0       	rjmp	.+2      	; 0x634e <nextEmptySBRxBuffer+0x3e>
    634c:	80 e0       	ldi	r24, 0x00	; 0
    634e:	88 23       	and	r24, r24
    6350:	49 f0       	breq	.+18     	; 0x6364 <nextEmptySBRxBuffer+0x54>
    6352:	4f e3       	ldi	r20, 0x3F	; 63
    6354:	42 9f       	mul	r20, r18
    6356:	c0 01       	movw	r24, r0
    6358:	43 9f       	mul	r20, r19
    635a:	90 0d       	add	r25, r0
    635c:	11 24       	eor	r1, r1
    635e:	8e 5e       	subi	r24, 0xEE	; 238
    6360:	98 4b       	sbci	r25, 0xB8	; 184
    6362:	08 95       	ret
    6364:	80 e0       	ldi	r24, 0x00	; 0
    6366:	90 e0       	ldi	r25, 0x00	; 0
    6368:	08 95       	ret

0000636a <nextFullSBRxBuffer>:
    636a:	90 e0       	ldi	r25, 0x00	; 0
    636c:	80 91 0e 47 	lds	r24, 0x470E	; 0x80470e <_ZZ18nextFullSBRxBufferE11bufferIndex>
    6370:	28 2f       	mov	r18, r24
    6372:	30 e0       	ldi	r19, 0x00	; 0
    6374:	4f e3       	ldi	r20, 0x3F	; 63
    6376:	42 9f       	mul	r20, r18
    6378:	f0 01       	movw	r30, r0
    637a:	43 9f       	mul	r20, r19
    637c:	f0 0d       	add	r31, r0
    637e:	11 24       	eor	r1, r1
    6380:	ee 5e       	subi	r30, 0xEE	; 238
    6382:	f8 4b       	sbci	r31, 0xB8	; 184
    6384:	41 81       	ldd	r20, Z+1	; 0x01
    6386:	52 81       	ldd	r21, Z+2	; 0x02
    6388:	45 2b       	or	r20, r21
    638a:	59 f4       	brne	.+22     	; 0x63a2 <nextFullSBRxBuffer+0x38>
    638c:	9f 5f       	subi	r25, 0xFF	; 255
    638e:	92 30       	cpi	r25, 0x02	; 2
    6390:	50 f4       	brcc	.+20     	; 0x63a6 <nextFullSBRxBuffer+0x3c>
    6392:	8f 5f       	subi	r24, 0xFF	; 255
    6394:	80 93 0e 47 	sts	0x470E, r24	; 0x80470e <_ZZ18nextFullSBRxBufferE11bufferIndex>
    6398:	82 30       	cpi	r24, 0x02	; 2
    639a:	40 f3       	brcs	.-48     	; 0x636c <nextFullSBRxBuffer+0x2>
    639c:	10 92 0e 47 	sts	0x470E, r1	; 0x80470e <_ZZ18nextFullSBRxBufferE11bufferIndex>
    63a0:	e5 cf       	rjmp	.-54     	; 0x636c <nextFullSBRxBuffer+0x2>
    63a2:	81 e0       	ldi	r24, 0x01	; 1
    63a4:	01 c0       	rjmp	.+2      	; 0x63a8 <nextFullSBRxBuffer+0x3e>
    63a6:	80 e0       	ldi	r24, 0x00	; 0
    63a8:	88 23       	and	r24, r24
    63aa:	49 f0       	breq	.+18     	; 0x63be <nextFullSBRxBuffer+0x54>
    63ac:	4f e3       	ldi	r20, 0x3F	; 63
    63ae:	42 9f       	mul	r20, r18
    63b0:	c0 01       	movw	r24, r0
    63b2:	43 9f       	mul	r20, r19
    63b4:	90 0d       	add	r25, r0
    63b6:	11 24       	eor	r1, r1
    63b8:	8e 5e       	subi	r24, 0xEE	; 238
    63ba:	98 4b       	sbci	r25, 0xB8	; 184
    63bc:	08 95       	ret
    63be:	80 e0       	ldi	r24, 0x00	; 0
    63c0:	90 e0       	ldi	r25, 0x00	; 0
    63c2:	08 95       	ret

000063c4 <serialbusTxInProgress>:
    63c4:	80 91 0b 48 	lds	r24, 0x480B	; 0x80480b <_ZL19serialbus_tx_active>
    63c8:	08 95       	ret

000063ca <_Z18serialbus_start_txv>:
    63ca:	cf 93       	push	r28
    63cc:	80 91 0b 48 	lds	r24, 0x480B	; 0x80480b <_ZL19serialbus_tx_active>
    63d0:	c1 e0       	ldi	r28, 0x01	; 1
    63d2:	81 11       	cpse	r24, r1
    63d4:	c0 e0       	ldi	r28, 0x00	; 0
    63d6:	81 11       	cpse	r24, r1
    63d8:	0c c0       	rjmp	.+24     	; 0x63f2 <_Z18serialbus_start_txv+0x28>
    63da:	81 e0       	ldi	r24, 0x01	; 1
    63dc:	80 93 0b 48 	sts	0x480B, r24	; 0x80480b <_ZL19serialbus_tx_active>
    63e0:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    63e4:	81 11       	cpse	r24, r1
    63e6:	03 c0       	rjmp	.+6      	; 0x63ee <_Z18serialbus_start_txv+0x24>
    63e8:	0e 94 63 3d 	call	0x7ac6	; 0x7ac6 <USART4_enable_tx>
    63ec:	02 c0       	rjmp	.+4      	; 0x63f2 <_Z18serialbus_start_txv+0x28>
    63ee:	0e 94 2f 3d 	call	0x7a5e	; 0x7a5e <USART1_enable_tx>
    63f2:	8c 2f       	mov	r24, r28
    63f4:	cf 91       	pop	r28
    63f6:	08 95       	ret

000063f8 <serialbus_end_tx>:
    63f8:	80 91 0b 48 	lds	r24, 0x480B	; 0x80480b <_ZL19serialbus_tx_active>
    63fc:	88 23       	and	r24, r24
    63fe:	89 f0       	breq	.+34     	; 0x6422 <serialbus_end_tx+0x2a>
    6400:	80 91 27 40 	lds	r24, 0x4027	; 0x804027 <g_serialbus_usart_number>
    6404:	84 30       	cpi	r24, 0x04	; 4
    6406:	31 f4       	brne	.+12     	; 0x6414 <serialbus_end_tx+0x1c>
    6408:	e0 e8       	ldi	r30, 0x80	; 128
    640a:	f8 e0       	ldi	r31, 0x08	; 8
    640c:	85 81       	ldd	r24, Z+5	; 0x05
    640e:	8f 7d       	andi	r24, 0xDF	; 223
    6410:	85 83       	std	Z+5, r24	; 0x05
    6412:	05 c0       	rjmp	.+10     	; 0x641e <serialbus_end_tx+0x26>
    6414:	e0 e2       	ldi	r30, 0x20	; 32
    6416:	f8 e0       	ldi	r31, 0x08	; 8
    6418:	85 81       	ldd	r24, Z+5	; 0x05
    641a:	8f 7d       	andi	r24, 0xDF	; 223
    641c:	85 83       	std	Z+5, r24	; 0x05
    641e:	10 92 0b 48 	sts	0x480B, r1	; 0x80480b <_ZL19serialbus_tx_active>
    6422:	08 95       	ret

00006424 <serialbus_init>:
    6424:	cf 93       	push	r28
    6426:	2e e7       	ldi	r18, 0x7E	; 126
    6428:	e2 e1       	ldi	r30, 0x12	; 18
    642a:	f7 e4       	ldi	r31, 0x47	; 71
    642c:	df 01       	movw	r26, r30
    642e:	1d 92       	st	X+, r1
    6430:	2a 95       	dec	r18
    6432:	e9 f7       	brne	.-6      	; 0x642e <serialbus_init+0xa>
    6434:	a0 e0       	ldi	r26, 0x00	; 0
    6436:	b0 e0       	ldi	r27, 0x00	; 0
    6438:	a3 30       	cpi	r26, 0x03	; 3
    643a:	b1 05       	cpc	r27, r1
    643c:	5c f4       	brge	.+22     	; 0x6454 <serialbus_init+0x30>
    643e:	29 e2       	ldi	r18, 0x29	; 41
    6440:	2a 9f       	mul	r18, r26
    6442:	f0 01       	movw	r30, r0
    6444:	2b 9f       	mul	r18, r27
    6446:	f0 0d       	add	r31, r0
    6448:	11 24       	eor	r1, r1
    644a:	e0 57       	subi	r30, 0x70	; 112
    644c:	f8 4b       	sbci	r31, 0xB8	; 184
    644e:	10 82       	st	Z, r1
    6450:	11 96       	adiw	r26, 0x01	; 1
    6452:	f2 cf       	rjmp	.-28     	; 0x6438 <serialbus_init+0x14>
    6454:	46 30       	cpi	r20, 0x06	; 6
    6456:	21 f4       	brne	.+8      	; 0x6460 <serialbus_init+0x3c>
    6458:	20 91 27 40 	lds	r18, 0x4027	; 0x804027 <g_serialbus_usart_number>
    645c:	27 30       	cpi	r18, 0x07	; 7
    645e:	51 f4       	brne	.+20     	; 0x6474 <serialbus_init+0x50>
    6460:	c4 2f       	mov	r28, r20
    6462:	44 30       	cpi	r20, 0x04	; 4
    6464:	19 f4       	brne	.+6      	; 0x646c <serialbus_init+0x48>
    6466:	0e 94 0e 31 	call	0x621c	; 0x621c <_ZL21USART4_initializationm>
    646a:	02 c0       	rjmp	.+4      	; 0x6470 <serialbus_init+0x4c>
    646c:	0e 94 1f 31 	call	0x623e	; 0x623e <_ZL21USART1_initializationm>
    6470:	c0 93 27 40 	sts	0x4027, r28	; 0x804027 <g_serialbus_usart_number>
    6474:	10 92 26 40 	sts	0x4026, r1	; 0x804026 <_ZL14g_bus_disabled>
    6478:	cf 91       	pop	r28
    647a:	08 95       	ret

0000647c <_Z19serialbus_send_textPc>:
	}
}


BOOL serialbus_send_text(char* text)
{
    647c:	0f 93       	push	r16
    647e:	1f 93       	push	r17
    6480:	cf 93       	push	r28
    6482:	df 93       	push	r29
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled)
    6484:	20 91 26 40 	lds	r18, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    6488:	21 11       	cpse	r18, r1
    648a:	2f c0       	rjmp	.+94     	; 0x64ea <_Z19serialbus_send_textPc+0x6e>
	{
		return( err);
	}

	if(text)
    648c:	00 97       	sbiw	r24, 0x00	; 0
    648e:	79 f1       	breq	.+94     	; 0x64ee <_Z19serialbus_send_textPc+0x72>
    6490:	8c 01       	movw	r16, r24
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();
    6492:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <nextEmptySBTxBuffer>


BOOL serialbus_send_text(char* text)
{
	BOOL err = TRUE;
	uint16_t tries = 200;
    6496:	c8 ec       	ldi	r28, 0xC8	; 200
    6498:	d0 e0       	ldi	r29, 0x00	; 0

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    649a:	00 97       	sbiw	r24, 0x00	; 0
    649c:	b1 f4       	brne	.+44     	; 0x64ca <_Z19serialbus_send_textPc+0x4e>
    649e:	20 97       	sbiw	r28, 0x00	; 0
    64a0:	a1 f0       	breq	.+40     	; 0x64ca <_Z19serialbus_send_textPc+0x4e>
		{
			while(serialbusTxInProgress() && tries)
    64a2:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <serialbusTxInProgress>
    64a6:	88 23       	and	r24, r24
    64a8:	21 f0       	breq	.+8      	; 0x64b2 <_Z19serialbus_send_textPc+0x36>
    64aa:	20 97       	sbiw	r28, 0x00	; 0
    64ac:	21 f4       	brne	.+8      	; 0x64b6 <_Z19serialbus_send_textPc+0x3a>
    64ae:	90 e0       	ldi	r25, 0x00	; 0
    64b0:	03 c0       	rjmp	.+6      	; 0x64b8 <_Z19serialbus_send_textPc+0x3c>
    64b2:	90 e0       	ldi	r25, 0x00	; 0
    64b4:	01 c0       	rjmp	.+2      	; 0x64b8 <_Z19serialbus_send_textPc+0x3c>
    64b6:	91 e0       	ldi	r25, 0x01	; 1
    64b8:	99 23       	and	r25, r25
    64ba:	21 f0       	breq	.+8      	; 0x64c4 <_Z19serialbus_send_textPc+0x48>
			{
				if(tries)
    64bc:	20 97       	sbiw	r28, 0x00	; 0
    64be:	89 f3       	breq	.-30     	; 0x64a2 <_Z19serialbus_send_textPc+0x26>
				{
					tries--;    /* wait until transmit finishes */
    64c0:	21 97       	sbiw	r28, 0x01	; 1
    64c2:	ef cf       	rjmp	.-34     	; 0x64a2 <_Z19serialbus_send_textPc+0x26>
				}
			}
			buff = nextEmptySBTxBuffer();
    64c4:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <nextEmptySBTxBuffer>

	if(text)
	{
		SerialbusTxBuffer* buff = nextEmptySBTxBuffer();

		while(!buff && tries)
    64c8:	e8 cf       	rjmp	.-48     	; 0x649a <_Z19serialbus_send_textPc+0x1e>
				}
			}
			buff = nextEmptySBTxBuffer();
		}

		if(buff)
    64ca:	00 97       	sbiw	r24, 0x00	; 0
    64cc:	91 f0       	breq	.+36     	; 0x64f2 <_Z19serialbus_send_textPc+0x76>
		{
			sprintf(*buff, text);
    64ce:	1f 93       	push	r17
    64d0:	0f 93       	push	r16
    64d2:	9f 93       	push	r25
    64d4:	8f 93       	push	r24
    64d6:	0e 94 31 42 	call	0x8462	; 0x8462 <sprintf>

			serialbus_start_tx();
    64da:	0e 94 e5 31 	call	0x63ca	; 0x63ca <_Z18serialbus_start_txv>
    64de:	0f 90       	pop	r0
    64e0:	0f 90       	pop	r0
    64e2:	0f 90       	pop	r0
    64e4:	0f 90       	pop	r0
			err = FALSE;
    64e6:	80 e0       	ldi	r24, 0x00	; 0
    64e8:	05 c0       	rjmp	.+10     	; 0x64f4 <_Z19serialbus_send_textPc+0x78>
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled)
	{
		return( err);
    64ea:	81 e0       	ldi	r24, 0x01	; 1
    64ec:	03 c0       	rjmp	.+6      	; 0x64f4 <_Z19serialbus_send_textPc+0x78>
}


BOOL serialbus_send_text(char* text)
{
	BOOL err = TRUE;
    64ee:	81 e0       	ldi	r24, 0x01	; 1
    64f0:	01 c0       	rjmp	.+2      	; 0x64f4 <_Z19serialbus_send_textPc+0x78>
    64f2:	81 e0       	ldi	r24, 0x01	; 1
			err = FALSE;
		}
	}

	return(err);
}
    64f4:	df 91       	pop	r29
    64f6:	cf 91       	pop	r28
    64f8:	1f 91       	pop	r17
    64fa:	0f 91       	pop	r16
    64fc:	08 95       	ret

000064fe <sb_send_NewPrompt>:
 *  Support for creating and sending various Terminal Mode Serialbus messages is provided below.
 ************************************************************************************/

void sb_send_NewPrompt(void)
{
	if(g_bus_disabled)
    64fe:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    6502:	81 11       	cpse	r24, r1
    6504:	06 c0       	rjmp	.+12     	; 0x6512 <sb_send_NewPrompt+0x14>
	{
		return;
	}

	while(serialbus_send_text((char*)textPrompt))
    6506:	88 e7       	ldi	r24, 0x78	; 120
    6508:	94 e4       	ldi	r25, 0x44	; 68
    650a:	0e 94 3e 32 	call	0x647c	; 0x647c <_Z19serialbus_send_textPc>
    650e:	81 11       	cpse	r24, r1
    6510:	fa cf       	rjmp	.-12     	; 0x6506 <sb_send_NewPrompt+0x8>
    6512:	08 95       	ret

00006514 <sb_send_NewLine>:
	}
}

void sb_send_NewLine(void)
{
	if(g_bus_disabled)
    6514:	80 91 26 40 	lds	r24, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    6518:	81 11       	cpse	r24, r1
    651a:	04 c0       	rjmp	.+8      	; 0x6524 <sb_send_NewLine+0x10>
	{
		return;
	}
	serialbus_send_text((char*)crlf);
    651c:	8b e7       	ldi	r24, 0x7B	; 123
    651e:	94 e4       	ldi	r25, 0x44	; 68
    6520:	0e 94 3e 32 	call	0x647c	; 0x647c <_Z19serialbus_send_textPc>
    6524:	08 95       	ret

00006526 <sb_echo_char>:
}

void sb_echo_char(uint8_t c)
{
	if(g_bus_disabled)
    6526:	90 91 26 40 	lds	r25, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    652a:	91 11       	cpse	r25, r1
    652c:	07 c0       	rjmp	.+14     	; 0x653c <sb_echo_char+0x16>
	{
		return;
	}
	g_tempMsgBuff[0] = c;
    652e:	ec e0       	ldi	r30, 0x0C	; 12
    6530:	f8 e4       	ldi	r31, 0x48	; 72
    6532:	80 83       	st	Z, r24
	g_tempMsgBuff[1] = '\0';
    6534:	11 82       	std	Z+1, r1	; 0x01
	serialbus_send_text(g_tempMsgBuff);
    6536:	cf 01       	movw	r24, r30
    6538:	0e 94 3e 32 	call	0x647c	; 0x647c <_Z19serialbus_send_textPc>
    653c:	08 95       	ret

0000653e <sb_send_string>:
}

BOOL sb_send_string(char* str)
{
    653e:	af 92       	push	r10
    6540:	bf 92       	push	r11
    6542:	cf 92       	push	r12
    6544:	df 92       	push	r13
    6546:	ef 92       	push	r14
    6548:	ff 92       	push	r15
    654a:	0f 93       	push	r16
    654c:	1f 93       	push	r17
    654e:	cf 93       	push	r28
	BOOL err = FALSE;
	uint16_t length, lengthToSend, lengthSent=0;
	bool done = false;

	if(g_bus_disabled)
    6550:	20 91 26 40 	lds	r18, 0x4026	; 0x804026 <_ZL14g_bus_disabled>
    6554:	21 11       	cpse	r18, r1
    6556:	44 c0       	rjmp	.+136    	; 0x65e0 <sb_send_string+0xa2>
	{
		return( TRUE);
	}

	if(str == NULL)
    6558:	00 97       	sbiw	r24, 0x00	; 0
    655a:	09 f4       	brne	.+2      	; 0x655e <sb_send_string+0x20>
    655c:	43 c0       	rjmp	.+134    	; 0x65e4 <sb_send_string+0xa6>
	{
		return( TRUE);
	}

	if(!*str)
    655e:	fc 01       	movw	r30, r24
    6560:	20 81       	ld	r18, Z
    6562:	22 23       	and	r18, r18
    6564:	09 f4       	brne	.+2      	; 0x6568 <sb_send_string+0x2a>
    6566:	40 c0       	rjmp	.+128    	; 0x65e8 <sb_send_string+0xaa>
    6568:	5c 01       	movw	r10, r24
	{
		return(TRUE);
	}

	length = strlen(str);
    656a:	01 90       	ld	r0, Z+
    656c:	00 20       	and	r0, r0
    656e:	e9 f7       	brne	.-6      	; 0x656a <sb_send_string+0x2c>
    6570:	31 97       	sbiw	r30, 0x01	; 1
    6572:	6f 01       	movw	r12, r30
    6574:	c8 1a       	sub	r12, r24
    6576:	d9 0a       	sbc	r13, r25
}

BOOL sb_send_string(char* str)
{
	BOOL err = FALSE;
	uint16_t length, lengthToSend, lengthSent=0;
    6578:	e1 2c       	mov	r14, r1
    657a:	f1 2c       	mov	r15, r1

	length = strlen(str);

	do
	{
		lengthToSend = MIN(length-lengthSent, (uint16_t)SERIALBUS_MAX_TX_MSG_LENGTH);
    657c:	86 01       	movw	r16, r12
    657e:	0e 19       	sub	r16, r14
    6580:	1f 09       	sbc	r17, r15
    6582:	09 32       	cpi	r16, 0x29	; 41
    6584:	11 05       	cpc	r17, r1
    6586:	10 f0       	brcs	.+4      	; 0x658c <sb_send_string+0x4e>
    6588:	09 e2       	ldi	r16, 0x29	; 41
    658a:	10 e0       	ldi	r17, 0x00	; 0
		strncpy(g_tempMsgBuff, &str[lengthSent], lengthToSend);
    658c:	a8 01       	movw	r20, r16
    658e:	b5 01       	movw	r22, r10
    6590:	6e 0d       	add	r22, r14
    6592:	7f 1d       	adc	r23, r15
    6594:	8c e0       	ldi	r24, 0x0C	; 12
    6596:	98 e4       	ldi	r25, 0x48	; 72
    6598:	0e 94 05 42 	call	0x840a	; 0x840a <strncpy>
		if(lengthToSend < SERIALBUS_MAX_TX_MSG_LENGTH)
    659c:	09 32       	cpi	r16, 0x29	; 41
    659e:	11 05       	cpc	r17, r1
    65a0:	20 f4       	brcc	.+8      	; 0x65aa <sb_send_string+0x6c>
		{
			g_tempMsgBuff[lengthToSend] = '\0';
    65a2:	f8 01       	movw	r30, r16
    65a4:	e4 5f       	subi	r30, 0xF4	; 244
    65a6:	f7 4b       	sbci	r31, 0xB7	; 183
    65a8:	10 82       	st	Z, r1
		}
		while((err = serialbus_send_text(g_tempMsgBuff)))
    65aa:	8c e0       	ldi	r24, 0x0C	; 12
    65ac:	98 e4       	ldi	r25, 0x48	; 72
    65ae:	0e 94 3e 32 	call	0x647c	; 0x647c <_Z19serialbus_send_textPc>
    65b2:	c8 2f       	mov	r28, r24
    65b4:	81 11       	cpse	r24, r1
    65b6:	f9 cf       	rjmp	.-14     	; 0x65aa <sb_send_string+0x6c>
		{
			;
		}
		while(!err && serialbusTxInProgress())
    65b8:	c1 11       	cpse	r28, r1
    65ba:	06 c0       	rjmp	.+12     	; 0x65c8 <sb_send_string+0x8a>
    65bc:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <serialbusTxInProgress>
    65c0:	88 23       	and	r24, r24
    65c2:	21 f0       	breq	.+8      	; 0x65cc <sb_send_string+0x8e>
    65c4:	91 e0       	ldi	r25, 0x01	; 1
    65c6:	03 c0       	rjmp	.+6      	; 0x65ce <sb_send_string+0x90>
    65c8:	90 e0       	ldi	r25, 0x00	; 0
    65ca:	01 c0       	rjmp	.+2      	; 0x65ce <sb_send_string+0x90>
    65cc:	90 e0       	ldi	r25, 0x00	; 0
    65ce:	91 11       	cpse	r25, r1
    65d0:	f3 cf       	rjmp	.-26     	; 0x65b8 <sb_send_string+0x7a>
		{
			;
		}
		
		lengthSent += lengthToSend;
    65d2:	e0 0e       	add	r14, r16
    65d4:	f1 1e       	adc	r15, r17
		done = lengthSent >= length;
	}while(!done);
    65d6:	ec 14       	cp	r14, r12
    65d8:	fd 04       	cpc	r15, r13
    65da:	80 f2       	brcs	.-96     	; 0x657c <sb_send_string+0x3e>

	return( err);
    65dc:	8c 2f       	mov	r24, r28
    65de:	05 c0       	rjmp	.+10     	; 0x65ea <sb_send_string+0xac>
	uint16_t length, lengthToSend, lengthSent=0;
	bool done = false;

	if(g_bus_disabled)
	{
		return( TRUE);
    65e0:	81 e0       	ldi	r24, 0x01	; 1
    65e2:	03 c0       	rjmp	.+6      	; 0x65ea <sb_send_string+0xac>
	}

	if(str == NULL)
	{
		return( TRUE);
    65e4:	81 e0       	ldi	r24, 0x01	; 1
    65e6:	01 c0       	rjmp	.+2      	; 0x65ea <sb_send_string+0xac>
	}

	if(!*str)
	{
		return(TRUE);
    65e8:	81 e0       	ldi	r24, 0x01	; 1
		lengthSent += lengthToSend;
		done = lengthSent >= length;
	}while(!done);

	return( err);
}
    65ea:	cf 91       	pop	r28
    65ec:	1f 91       	pop	r17
    65ee:	0f 91       	pop	r16
    65f0:	ff 90       	pop	r15
    65f2:	ef 90       	pop	r14
    65f4:	df 90       	pop	r13
    65f6:	cf 90       	pop	r12
    65f8:	bf 90       	pop	r11
    65fa:	af 90       	pop	r10
    65fc:	08 95       	ret

000065fe <_Z13reduce_by_gcdPmS_>:
 *
 */
	void si5351_set_vcoB_freq(Frequency_Hz freq_VCO)
	{
		freqVCOB = freq_VCO;
		set_pll(freq_VCO, SI5351_PLLB);
    65fe:	4f 92       	push	r4
    6600:	5f 92       	push	r5
    6602:	6f 92       	push	r6
    6604:	7f 92       	push	r7
    6606:	8f 92       	push	r8
    6608:	9f 92       	push	r9
    660a:	af 92       	push	r10
    660c:	bf 92       	push	r11
    660e:	cf 92       	push	r12
    6610:	df 92       	push	r13
    6612:	ef 92       	push	r14
    6614:	ff 92       	push	r15
    6616:	0f 93       	push	r16
    6618:	1f 93       	push	r17
    661a:	cf 93       	push	r28
    661c:	df 93       	push	r29
    661e:	8c 01       	movw	r16, r24
    6620:	eb 01       	movw	r28, r22
    6622:	fc 01       	movw	r30, r24
    6624:	40 80       	ld	r4, Z
    6626:	51 80       	ldd	r5, Z+1	; 0x01
    6628:	62 80       	ldd	r6, Z+2	; 0x02
    662a:	73 80       	ldd	r7, Z+3	; 0x03
    662c:	88 80       	ld	r8, Y
    662e:	99 80       	ldd	r9, Y+1	; 0x01
    6630:	aa 80       	ldd	r10, Y+2	; 0x02
    6632:	bb 80       	ldd	r11, Y+3	; 0x03
    6634:	41 14       	cp	r4, r1
    6636:	51 04       	cpc	r5, r1
    6638:	61 04       	cpc	r6, r1
    663a:	71 04       	cpc	r7, r1
    663c:	e1 f1       	breq	.+120    	; 0x66b6 <_Z13reduce_by_gcdPmS_+0xb8>
    663e:	81 14       	cp	r8, r1
    6640:	91 04       	cpc	r9, r1
    6642:	a1 04       	cpc	r10, r1
    6644:	b1 04       	cpc	r11, r1
    6646:	b9 f1       	breq	.+110    	; 0x66b6 <_Z13reduce_by_gcdPmS_+0xb8>
    6648:	c3 01       	movw	r24, r6
    664a:	b2 01       	movw	r22, r4
    664c:	a5 01       	movw	r20, r10
    664e:	94 01       	movw	r18, r8
    6650:	0e 94 09 40 	call	0x8012	; 0x8012 <__udivmodsi4>
    6654:	6b 01       	movw	r12, r22
    6656:	7c 01       	movw	r14, r24
    6658:	c1 14       	cp	r12, r1
    665a:	d1 04       	cpc	r13, r1
    665c:	e1 04       	cpc	r14, r1
    665e:	f1 04       	cpc	r15, r1
    6660:	69 f0       	breq	.+26     	; 0x667c <_Z13reduce_by_gcdPmS_+0x7e>
    6662:	c5 01       	movw	r24, r10
    6664:	b4 01       	movw	r22, r8
    6666:	a7 01       	movw	r20, r14
    6668:	96 01       	movw	r18, r12
    666a:	0e 94 09 40 	call	0x8012	; 0x8012 <__udivmodsi4>
    666e:	46 01       	movw	r8, r12
    6670:	57 01       	movw	r10, r14
    6672:	c6 2e       	mov	r12, r22
    6674:	d7 2e       	mov	r13, r23
    6676:	e8 2e       	mov	r14, r24
    6678:	f9 2e       	mov	r15, r25
    667a:	ee cf       	rjmp	.-36     	; 0x6658 <_Z13reduce_by_gcdPmS_+0x5a>
    667c:	f2 e0       	ldi	r31, 0x02	; 2
    667e:	8f 16       	cp	r8, r31
    6680:	91 04       	cpc	r9, r1
    6682:	a1 04       	cpc	r10, r1
    6684:	b1 04       	cpc	r11, r1
    6686:	b8 f0       	brcs	.+46     	; 0x66b6 <_Z13reduce_by_gcdPmS_+0xb8>
    6688:	c3 01       	movw	r24, r6
    668a:	b2 01       	movw	r22, r4
    668c:	a5 01       	movw	r20, r10
    668e:	94 01       	movw	r18, r8
    6690:	0e 94 09 40 	call	0x8012	; 0x8012 <__udivmodsi4>
    6694:	f8 01       	movw	r30, r16
    6696:	20 83       	st	Z, r18
    6698:	31 83       	std	Z+1, r19	; 0x01
    669a:	42 83       	std	Z+2, r20	; 0x02
    669c:	53 83       	std	Z+3, r21	; 0x03
    669e:	68 81       	ld	r22, Y
    66a0:	79 81       	ldd	r23, Y+1	; 0x01
    66a2:	8a 81       	ldd	r24, Y+2	; 0x02
    66a4:	9b 81       	ldd	r25, Y+3	; 0x03
    66a6:	a5 01       	movw	r20, r10
    66a8:	94 01       	movw	r18, r8
    66aa:	0e 94 09 40 	call	0x8012	; 0x8012 <__udivmodsi4>
    66ae:	28 83       	st	Y, r18
    66b0:	39 83       	std	Y+1, r19	; 0x01
    66b2:	4a 83       	std	Y+2, r20	; 0x02
    66b4:	5b 83       	std	Y+3, r21	; 0x03
    66b6:	df 91       	pop	r29
    66b8:	cf 91       	pop	r28
    66ba:	1f 91       	pop	r17
    66bc:	0f 91       	pop	r16
    66be:	ff 90       	pop	r15
    66c0:	ef 90       	pop	r14
    66c2:	df 90       	pop	r13
    66c4:	cf 90       	pop	r12
    66c6:	bf 90       	pop	r11
    66c8:	af 90       	pop	r10
    66ca:	9f 90       	pop	r9
    66cc:	8f 90       	pop	r8
    66ce:	7f 90       	pop	r7
    66d0:	6f 90       	pop	r6
    66d2:	5f 90       	pop	r5
    66d4:	4f 90       	pop	r4
    66d6:	08 95       	ret

000066d8 <_Z8pll_calcmP13u_si5351_regs>:
    66d8:	4f 92       	push	r4
    66da:	5f 92       	push	r5
    66dc:	6f 92       	push	r6
    66de:	7f 92       	push	r7
    66e0:	8f 92       	push	r8
    66e2:	9f 92       	push	r9
    66e4:	af 92       	push	r10
    66e6:	bf 92       	push	r11
    66e8:	cf 92       	push	r12
    66ea:	df 92       	push	r13
    66ec:	ef 92       	push	r14
    66ee:	ff 92       	push	r15
    66f0:	0f 93       	push	r16
    66f2:	1f 93       	push	r17
    66f4:	cf 93       	push	r28
    66f6:	df 93       	push	r29
    66f8:	cd b7       	in	r28, 0x3d	; 61
    66fa:	de b7       	in	r29, 0x3e	; 62
    66fc:	28 97       	sbiw	r28, 0x08	; 8
    66fe:	cd bf       	out	0x3d, r28	; 61
    6700:	de bf       	out	0x3e, r29	; 62
    6702:	8a 01       	movw	r16, r20
    6704:	80 90 28 40 	lds	r8, 0x4028	; 0x804028 <_ZL9xtal_freq>
    6708:	90 90 29 40 	lds	r9, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    670c:	a0 90 2a 40 	lds	r10, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    6710:	b0 90 2b 40 	lds	r11, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    6714:	a5 01       	movw	r20, r10
    6716:	94 01       	movw	r18, r8
    6718:	0e 94 09 40 	call	0x8012	; 0x8012 <__udivmodsi4>
    671c:	69 01       	movw	r12, r18
    671e:	7a 01       	movw	r14, r20
    6720:	69 83       	std	Y+1, r22	; 0x01
    6722:	7a 83       	std	Y+2, r23	; 0x02
    6724:	8b 83       	std	Y+3, r24	; 0x03
    6726:	9c 83       	std	Y+4, r25	; 0x04
    6728:	8d 82       	std	Y+5, r8	; 0x05
    672a:	9e 82       	std	Y+6, r9	; 0x06
    672c:	af 82       	std	Y+7, r10	; 0x07
    672e:	b8 86       	std	Y+8, r11	; 0x08
    6730:	be 01       	movw	r22, r28
    6732:	6b 5f       	subi	r22, 0xFB	; 251
    6734:	7f 4f       	sbci	r23, 0xFF	; 255
    6736:	ce 01       	movw	r24, r28
    6738:	01 96       	adiw	r24, 0x01	; 1
    673a:	0e 94 ff 32 	call	0x65fe	; 0x65fe <_Z13reduce_by_gcdPmS_>
    673e:	89 80       	ldd	r8, Y+1	; 0x01
    6740:	9a 80       	ldd	r9, Y+2	; 0x02
    6742:	ab 80       	ldd	r10, Y+3	; 0x03
    6744:	bc 80       	ldd	r11, Y+4	; 0x04
    6746:	88 0c       	add	r8, r8
    6748:	99 1c       	adc	r9, r9
    674a:	aa 1c       	adc	r10, r10
    674c:	bb 1c       	adc	r11, r11
    674e:	88 0c       	add	r8, r8
    6750:	99 1c       	adc	r9, r9
    6752:	aa 1c       	adc	r10, r10
    6754:	bb 1c       	adc	r11, r11
    6756:	88 0c       	add	r8, r8
    6758:	99 1c       	adc	r9, r9
    675a:	aa 1c       	adc	r10, r10
    675c:	bb 1c       	adc	r11, r11
    675e:	88 0c       	add	r8, r8
    6760:	99 1c       	adc	r9, r9
    6762:	aa 1c       	adc	r10, r10
    6764:	bb 1c       	adc	r11, r11
    6766:	88 0c       	add	r8, r8
    6768:	99 1c       	adc	r9, r9
    676a:	aa 1c       	adc	r10, r10
    676c:	bb 1c       	adc	r11, r11
    676e:	88 0c       	add	r8, r8
    6770:	99 1c       	adc	r9, r9
    6772:	aa 1c       	adc	r10, r10
    6774:	bb 1c       	adc	r11, r11
    6776:	88 0c       	add	r8, r8
    6778:	99 1c       	adc	r9, r9
    677a:	aa 1c       	adc	r10, r10
    677c:	bb 1c       	adc	r11, r11
    677e:	4d 80       	ldd	r4, Y+5	; 0x05
    6780:	5e 80       	ldd	r5, Y+6	; 0x06
    6782:	6f 80       	ldd	r6, Y+7	; 0x07
    6784:	78 84       	ldd	r7, Y+8	; 0x08
    6786:	c5 01       	movw	r24, r10
    6788:	b4 01       	movw	r22, r8
    678a:	a3 01       	movw	r20, r6
    678c:	92 01       	movw	r18, r4
    678e:	0e 94 09 40 	call	0x8012	; 0x8012 <__udivmodsi4>
    6792:	cc 0c       	add	r12, r12
    6794:	dd 1c       	adc	r13, r13
    6796:	ee 1c       	adc	r14, r14
    6798:	ff 1c       	adc	r15, r15
    679a:	cc 0c       	add	r12, r12
    679c:	dd 1c       	adc	r13, r13
    679e:	ee 1c       	adc	r14, r14
    67a0:	ff 1c       	adc	r15, r15
    67a2:	cc 0c       	add	r12, r12
    67a4:	dd 1c       	adc	r13, r13
    67a6:	ee 1c       	adc	r14, r14
    67a8:	ff 1c       	adc	r15, r15
    67aa:	cc 0c       	add	r12, r12
    67ac:	dd 1c       	adc	r13, r13
    67ae:	ee 1c       	adc	r14, r14
    67b0:	ff 1c       	adc	r15, r15
    67b2:	cc 0c       	add	r12, r12
    67b4:	dd 1c       	adc	r13, r13
    67b6:	ee 1c       	adc	r14, r14
    67b8:	ff 1c       	adc	r15, r15
    67ba:	cc 0c       	add	r12, r12
    67bc:	dd 1c       	adc	r13, r13
    67be:	ee 1c       	adc	r14, r14
    67c0:	ff 1c       	adc	r15, r15
    67c2:	cc 0c       	add	r12, r12
    67c4:	dd 1c       	adc	r13, r13
    67c6:	ee 1c       	adc	r14, r14
    67c8:	ff 1c       	adc	r15, r15
    67ca:	c2 0e       	add	r12, r18
    67cc:	d3 1e       	adc	r13, r19
    67ce:	e4 1e       	adc	r14, r20
    67d0:	f5 1e       	adc	r15, r21
    67d2:	82 e0       	ldi	r24, 0x02	; 2
    67d4:	d8 1a       	sub	r13, r24
    67d6:	e1 08       	sbc	r14, r1
    67d8:	f1 08       	sbc	r15, r1
    67da:	f8 01       	movw	r30, r16
    67dc:	c0 82       	st	Z, r12
    67de:	d1 82       	std	Z+1, r13	; 0x01
    67e0:	e2 82       	std	Z+2, r14	; 0x02
    67e2:	f3 82       	std	Z+3, r15	; 0x03
    67e4:	c3 01       	movw	r24, r6
    67e6:	b2 01       	movw	r22, r4
    67e8:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__mulsi3>
    67ec:	86 1a       	sub	r8, r22
    67ee:	97 0a       	sbc	r9, r23
    67f0:	a8 0a       	sbc	r10, r24
    67f2:	b9 0a       	sbc	r11, r25
    67f4:	84 82       	std	Z+4, r8	; 0x04
    67f6:	95 82       	std	Z+5, r9	; 0x05
    67f8:	a6 82       	std	Z+6, r10	; 0x06
    67fa:	b7 82       	std	Z+7, r11	; 0x07
    67fc:	40 86       	std	Z+8, r4	; 0x08
    67fe:	51 86       	std	Z+9, r5	; 0x09
    6800:	62 86       	std	Z+10, r6	; 0x0a
    6802:	73 86       	std	Z+11, r7	; 0x0b
    6804:	80 e0       	ldi	r24, 0x00	; 0
    6806:	28 96       	adiw	r28, 0x08	; 8
    6808:	cd bf       	out	0x3d, r28	; 61
    680a:	de bf       	out	0x3e, r29	; 62
    680c:	df 91       	pop	r29
    680e:	cf 91       	pop	r28
    6810:	1f 91       	pop	r17
    6812:	0f 91       	pop	r16
    6814:	ff 90       	pop	r15
    6816:	ef 90       	pop	r14
    6818:	df 90       	pop	r13
    681a:	cf 90       	pop	r12
    681c:	bf 90       	pop	r11
    681e:	af 90       	pop	r10
    6820:	9f 90       	pop	r9
    6822:	8f 90       	pop	r8
    6824:	7f 90       	pop	r7
    6826:	6f 90       	pop	r6
    6828:	5f 90       	pop	r5
    682a:	4f 90       	pop	r4
    682c:	08 95       	ret

0000682e <_Z15multisynth_calcmP13u_si5351_regsPhS1_>:
    682e:	2f 92       	push	r2
    6830:	3f 92       	push	r3
    6832:	4f 92       	push	r4
    6834:	5f 92       	push	r5
    6836:	6f 92       	push	r6
    6838:	7f 92       	push	r7
    683a:	8f 92       	push	r8
    683c:	9f 92       	push	r9
    683e:	af 92       	push	r10
    6840:	bf 92       	push	r11
    6842:	cf 92       	push	r12
    6844:	df 92       	push	r13
    6846:	ef 92       	push	r14
    6848:	ff 92       	push	r15
    684a:	0f 93       	push	r16
    684c:	1f 93       	push	r17
    684e:	cf 93       	push	r28
    6850:	df 93       	push	r29
    6852:	cd b7       	in	r28, 0x3d	; 61
    6854:	de b7       	in	r29, 0x3e	; 62
    6856:	25 97       	sbiw	r28, 0x05	; 5
    6858:	cd bf       	out	0x3d, r28	; 61
    685a:	de bf       	out	0x3e, r29	; 62
    685c:	2b 01       	movw	r4, r22
    685e:	3c 01       	movw	r6, r24
    6860:	4a 83       	std	Y+2, r20	; 0x02
    6862:	5b 83       	std	Y+3, r21	; 0x03
    6864:	18 01       	movw	r2, r16
    6866:	81 e0       	ldi	r24, 0x01	; 1
    6868:	f9 01       	movw	r30, r18
    686a:	80 83       	st	Z, r24
    686c:	f0 e8       	ldi	r31, 0x80	; 128
    686e:	4f 16       	cp	r4, r31
    6870:	f1 ed       	ldi	r31, 0xD1	; 209
    6872:	5f 06       	cpc	r5, r31
    6874:	f0 ef       	ldi	r31, 0xF0	; 240
    6876:	6f 06       	cpc	r6, r31
    6878:	f8 e0       	ldi	r31, 0x08	; 8
    687a:	7f 06       	cpc	r7, r31
    687c:	d0 f0       	brcs	.+52     	; 0x68b2 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x84>
    687e:	c3 01       	movw	r24, r6
    6880:	b2 01       	movw	r22, r4
    6882:	66 0f       	add	r22, r22
    6884:	77 1f       	adc	r23, r23
    6886:	88 1f       	adc	r24, r24
    6888:	99 1f       	adc	r25, r25
    688a:	66 0f       	add	r22, r22
    688c:	77 1f       	adc	r23, r23
    688e:	88 1f       	adc	r24, r24
    6890:	99 1f       	adc	r25, r25
    6892:	c1 2c       	mov	r12, r1
    6894:	d1 2c       	mov	r13, r1
    6896:	76 01       	movw	r14, r12
    6898:	68 94       	set
    689a:	c2 f8       	bld	r12, 2
    689c:	48 c0       	rjmp	.+144    	; 0x692e <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x100>
    689e:	21 e0       	ldi	r18, 0x01	; 1
    68a0:	2d 83       	std	Y+5, r18	; 0x05
    68a2:	0d c0       	rjmp	.+26     	; 0x68be <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x90>
    68a4:	69 01       	movw	r12, r18
    68a6:	7a 01       	movw	r14, r20
    68a8:	31 e0       	ldi	r19, 0x01	; 1
    68aa:	39 83       	std	Y+1, r19	; 0x01
    68ac:	81 e0       	ldi	r24, 0x01	; 1
    68ae:	8d 83       	std	Y+5, r24	; 0x05
    68b0:	06 c0       	rjmp	.+12     	; 0x68be <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x90>
    68b2:	1c 82       	std	Y+4, r1	; 0x04
    68b4:	19 82       	std	Y+1, r1	; 0x01
    68b6:	1d 82       	std	Y+5, r1	; 0x05
    68b8:	c1 2c       	mov	r12, r1
    68ba:	d1 2c       	mov	r13, r1
    68bc:	76 01       	movw	r14, r12
    68be:	8d 80       	ldd	r8, Y+5	; 0x05
    68c0:	81 10       	cpse	r8, r1
    68c2:	28 c0       	rjmp	.+80     	; 0x6914 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0xe6>
    68c4:	9c 80       	ldd	r9, Y+4	; 0x04
    68c6:	a9 2d       	mov	r26, r9
    68c8:	b0 e0       	ldi	r27, 0x00	; 0
    68ca:	a3 01       	movw	r20, r6
    68cc:	92 01       	movw	r18, r4
    68ce:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__muluhisi3>
    68d2:	00 e0       	ldi	r16, 0x00	; 0
    68d4:	19 ee       	ldi	r17, 0xE9	; 233
    68d6:	24 ea       	ldi	r18, 0xA4	; 164
    68d8:	35 e3       	ldi	r19, 0x35	; 53
    68da:	48 01       	movw	r8, r16
    68dc:	59 01       	movw	r10, r18
    68de:	86 1a       	sub	r8, r22
    68e0:	97 0a       	sbc	r9, r23
    68e2:	a8 0a       	sbc	r10, r24
    68e4:	b9 0a       	sbc	r11, r25
    68e6:	c5 01       	movw	r24, r10
    68e8:	b4 01       	movw	r22, r8
    68ea:	2c 81       	ldd	r18, Y+4	; 0x04
    68ec:	2e 5f       	subi	r18, 0xFE	; 254
    68ee:	2c 83       	std	Y+4, r18	; 0x04
    68f0:	81 14       	cp	r8, r1
    68f2:	36 e4       	ldi	r19, 0x46	; 70
    68f4:	93 06       	cpc	r9, r19
    68f6:	33 ec       	ldi	r19, 0xC3	; 195
    68f8:	a3 06       	cpc	r10, r19
    68fa:	33 e2       	ldi	r19, 0x23	; 35
    68fc:	b3 06       	cpc	r11, r19
    68fe:	78 f2       	brcs	.-98     	; 0x689e <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x70>
    6900:	a3 01       	movw	r20, r6
    6902:	92 01       	movw	r18, r4
    6904:	0e 94 09 40 	call	0x8012	; 0x8012 <__udivmodsi4>
    6908:	24 30       	cpi	r18, 0x04	; 4
    690a:	31 05       	cpc	r19, r1
    690c:	41 05       	cpc	r20, r1
    690e:	51 05       	cpc	r21, r1
    6910:	48 f6       	brcc	.-110    	; 0x68a4 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x76>
    6912:	d5 cf       	rjmp	.-86     	; 0x68be <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x90>
    6914:	89 80       	ldd	r8, Y+1	; 0x01
    6916:	88 20       	and	r8, r8
    6918:	39 f0       	breq	.+14     	; 0x6928 <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0xfa>
    691a:	a7 01       	movw	r20, r14
    691c:	96 01       	movw	r18, r12
    691e:	c3 01       	movw	r24, r6
    6920:	b2 01       	movw	r22, r4
    6922:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__mulsi3>
    6926:	03 c0       	rjmp	.+6      	; 0x692e <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x100>
    6928:	60 e0       	ldi	r22, 0x00	; 0
    692a:	70 e0       	ldi	r23, 0x00	; 0
    692c:	cb 01       	movw	r24, r22
    692e:	21 e0       	ldi	r18, 0x01	; 1
    6930:	34 e0       	ldi	r19, 0x04	; 4
    6932:	c3 16       	cp	r12, r19
    6934:	d1 04       	cpc	r13, r1
    6936:	e1 04       	cpc	r14, r1
    6938:	f1 04       	cpc	r15, r1
    693a:	09 f0       	breq	.+2      	; 0x693e <_Z15multisynth_calcmP13u_si5351_regsPhS1_+0x110>
    693c:	20 e0       	ldi	r18, 0x00	; 0
    693e:	f1 01       	movw	r30, r2
    6940:	20 83       	st	Z, r18
    6942:	cc 0c       	add	r12, r12
    6944:	dd 1c       	adc	r13, r13
    6946:	ee 1c       	adc	r14, r14
    6948:	ff 1c       	adc	r15, r15
    694a:	cc 0c       	add	r12, r12
    694c:	dd 1c       	adc	r13, r13
    694e:	ee 1c       	adc	r14, r14
    6950:	ff 1c       	adc	r15, r15
    6952:	cc 0c       	add	r12, r12
    6954:	dd 1c       	adc	r13, r13
    6956:	ee 1c       	adc	r14, r14
    6958:	ff 1c       	adc	r15, r15
    695a:	cc 0c       	add	r12, r12
    695c:	dd 1c       	adc	r13, r13
    695e:	ee 1c       	adc	r14, r14
    6960:	ff 1c       	adc	r15, r15
    6962:	cc 0c       	add	r12, r12
    6964:	dd 1c       	adc	r13, r13
    6966:	ee 1c       	adc	r14, r14
    6968:	ff 1c       	adc	r15, r15
    696a:	cc 0c       	add	r12, r12
    696c:	dd 1c       	adc	r13, r13
    696e:	ee 1c       	adc	r14, r14
    6970:	ff 1c       	adc	r15, r15
    6972:	cc 0c       	add	r12, r12
    6974:	dd 1c       	adc	r13, r13
    6976:	ee 1c       	adc	r14, r14
    6978:	ff 1c       	adc	r15, r15
    697a:	f2 e0       	ldi	r31, 0x02	; 2
    697c:	df 1a       	sub	r13, r31
    697e:	e1 08       	sbc	r14, r1
    6980:	f1 08       	sbc	r15, r1
    6982:	ea 81       	ldd	r30, Y+2	; 0x02
    6984:	fb 81       	ldd	r31, Y+3	; 0x03
    6986:	c0 82       	st	Z, r12
    6988:	d1 82       	std	Z+1, r13	; 0x01
    698a:	e2 82       	std	Z+2, r14	; 0x02
    698c:	f3 82       	std	Z+3, r15	; 0x03
    698e:	14 82       	std	Z+4, r1	; 0x04
    6990:	15 82       	std	Z+5, r1	; 0x05
    6992:	16 82       	std	Z+6, r1	; 0x06
    6994:	17 82       	std	Z+7, r1	; 0x07
    6996:	01 e0       	ldi	r16, 0x01	; 1
    6998:	10 e0       	ldi	r17, 0x00	; 0
    699a:	20 e0       	ldi	r18, 0x00	; 0
    699c:	30 e0       	ldi	r19, 0x00	; 0
    699e:	00 87       	std	Z+8, r16	; 0x08
    69a0:	11 87       	std	Z+9, r17	; 0x09
    69a2:	22 87       	std	Z+10, r18	; 0x0a
    69a4:	33 87       	std	Z+11, r19	; 0x0b
    69a6:	25 96       	adiw	r28, 0x05	; 5
    69a8:	cd bf       	out	0x3d, r28	; 61
    69aa:	de bf       	out	0x3e, r29	; 62
    69ac:	df 91       	pop	r29
    69ae:	cf 91       	pop	r28
    69b0:	1f 91       	pop	r17
    69b2:	0f 91       	pop	r16
    69b4:	ff 90       	pop	r15
    69b6:	ef 90       	pop	r14
    69b8:	df 90       	pop	r13
    69ba:	cf 90       	pop	r12
    69bc:	bf 90       	pop	r11
    69be:	af 90       	pop	r10
    69c0:	9f 90       	pop	r9
    69c2:	8f 90       	pop	r8
    69c4:	7f 90       	pop	r7
    69c6:	6f 90       	pop	r6
    69c8:	5f 90       	pop	r5
    69ca:	4f 90       	pop	r4
    69cc:	3f 90       	pop	r3
    69ce:	2f 90       	pop	r2
    69d0:	08 95       	ret

000069d2 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_>:
    69d2:	2f 92       	push	r2
    69d4:	3f 92       	push	r3
    69d6:	4f 92       	push	r4
    69d8:	5f 92       	push	r5
    69da:	6f 92       	push	r6
    69dc:	7f 92       	push	r7
    69de:	8f 92       	push	r8
    69e0:	9f 92       	push	r9
    69e2:	af 92       	push	r10
    69e4:	bf 92       	push	r11
    69e6:	cf 92       	push	r12
    69e8:	df 92       	push	r13
    69ea:	ef 92       	push	r14
    69ec:	ff 92       	push	r15
    69ee:	0f 93       	push	r16
    69f0:	1f 93       	push	r17
    69f2:	cf 93       	push	r28
    69f4:	df 93       	push	r29
    69f6:	cd b7       	in	r28, 0x3d	; 61
    69f8:	de b7       	in	r29, 0x3e	; 62
    69fa:	62 97       	sbiw	r28, 0x12	; 18
    69fc:	cd bf       	out	0x3d, r28	; 61
    69fe:	de bf       	out	0x3e, r29	; 62
    6a00:	4b 01       	movw	r8, r22
    6a02:	5c 01       	movw	r10, r24
    6a04:	1a 01       	movw	r2, r20
    6a06:	29 8b       	std	Y+17, r18	; 0x11
    6a08:	3a 8b       	std	Y+18, r19	; 0x12
    6a0a:	60 91 4d 48 	lds	r22, 0x484D	; 0x80484d <_ZL8freqVCOB>
    6a0e:	70 91 4e 48 	lds	r23, 0x484E	; 0x80484e <_ZL8freqVCOB+0x1>
    6a12:	80 91 4f 48 	lds	r24, 0x484F	; 0x80484f <_ZL8freqVCOB+0x2>
    6a16:	90 91 50 48 	lds	r25, 0x4850	; 0x804850 <_ZL8freqVCOB+0x3>
    6a1a:	a5 01       	movw	r20, r10
    6a1c:	94 01       	movw	r18, r8
    6a1e:	0e 94 09 40 	call	0x8012	; 0x8012 <__udivmodsi4>
    6a22:	29 87       	std	Y+9, r18	; 0x09
    6a24:	3a 87       	std	Y+10, r19	; 0x0a
    6a26:	4b 87       	std	Y+11, r20	; 0x0b
    6a28:	5c 87       	std	Y+12, r21	; 0x0c
    6a2a:	69 01       	movw	r12, r18
    6a2c:	7a 01       	movw	r14, r20
    6a2e:	69 83       	std	Y+1, r22	; 0x01
    6a30:	7a 83       	std	Y+2, r23	; 0x02
    6a32:	8b 83       	std	Y+3, r24	; 0x03
    6a34:	9c 83       	std	Y+4, r25	; 0x04
    6a36:	8d 82       	std	Y+5, r8	; 0x05
    6a38:	9e 82       	std	Y+6, r9	; 0x06
    6a3a:	af 82       	std	Y+7, r10	; 0x07
    6a3c:	b8 86       	std	Y+8, r11	; 0x08
    6a3e:	be 01       	movw	r22, r28
    6a40:	6b 5f       	subi	r22, 0xFB	; 251
    6a42:	7f 4f       	sbci	r23, 0xFF	; 255
    6a44:	ce 01       	movw	r24, r28
    6a46:	01 96       	adiw	r24, 0x01	; 1
    6a48:	0e 94 ff 32 	call	0x65fe	; 0x65fe <_Z13reduce_by_gcdPmS_>
    6a4c:	80 91 4d 48 	lds	r24, 0x484D	; 0x80484d <_ZL8freqVCOB>
    6a50:	90 91 4e 48 	lds	r25, 0x484E	; 0x80484e <_ZL8freqVCOB+0x1>
    6a54:	a0 91 4f 48 	lds	r26, 0x484F	; 0x80484f <_ZL8freqVCOB+0x2>
    6a58:	b0 91 50 48 	lds	r27, 0x4850	; 0x804850 <_ZL8freqVCOB+0x3>
    6a5c:	8d 87       	std	Y+13, r24	; 0x0d
    6a5e:	9e 87       	std	Y+14, r25	; 0x0e
    6a60:	af 87       	std	Y+15, r26	; 0x0f
    6a62:	b8 8b       	std	Y+16, r27	; 0x10
    6a64:	4d 80       	ldd	r4, Y+5	; 0x05
    6a66:	5e 80       	ldd	r5, Y+6	; 0x06
    6a68:	6f 80       	ldd	r6, Y+7	; 0x07
    6a6a:	78 84       	ldd	r7, Y+8	; 0x08
    6a6c:	29 85       	ldd	r18, Y+9	; 0x09
    6a6e:	3a 85       	ldd	r19, Y+10	; 0x0a
    6a70:	4b 85       	ldd	r20, Y+11	; 0x0b
    6a72:	5c 85       	ldd	r21, Y+12	; 0x0c
    6a74:	c3 01       	movw	r24, r6
    6a76:	b2 01       	movw	r22, r4
    6a78:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__mulsi3>
    6a7c:	89 80       	ldd	r8, Y+1	; 0x01
    6a7e:	9a 80       	ldd	r9, Y+2	; 0x02
    6a80:	ab 80       	ldd	r10, Y+3	; 0x03
    6a82:	bc 80       	ldd	r11, Y+4	; 0x04
    6a84:	9b 01       	movw	r18, r22
    6a86:	ac 01       	movw	r20, r24
    6a88:	28 0d       	add	r18, r8
    6a8a:	39 1d       	adc	r19, r9
    6a8c:	4a 1d       	adc	r20, r10
    6a8e:	5b 1d       	adc	r21, r11
    6a90:	6d 85       	ldd	r22, Y+13	; 0x0d
    6a92:	7e 85       	ldd	r23, Y+14	; 0x0e
    6a94:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a96:	98 89       	ldd	r25, Y+16	; 0x10
    6a98:	0e 94 09 40 	call	0x8012	; 0x8012 <__udivmodsi4>
    6a9c:	ca 01       	movw	r24, r20
    6a9e:	b9 01       	movw	r22, r18
    6aa0:	a3 01       	movw	r20, r6
    6aa2:	92 01       	movw	r18, r4
    6aa4:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__mulsi3>
    6aa8:	6d 87       	std	Y+13, r22	; 0x0d
    6aaa:	7e 87       	std	Y+14, r23	; 0x0e
    6aac:	8f 87       	std	Y+15, r24	; 0x0f
    6aae:	98 8b       	std	Y+16, r25	; 0x10
    6ab0:	89 28       	or	r8, r9
    6ab2:	8a 28       	or	r8, r10
    6ab4:	8b 28       	or	r8, r11
    6ab6:	29 f4       	brne	.+10     	; 0x6ac2 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0xf0>
    6ab8:	99 85       	ldd	r25, Y+9	; 0x09
    6aba:	90 ff       	sbrs	r25, 0
    6abc:	04 c0       	rjmp	.+8      	; 0x6ac6 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0xf4>
    6abe:	80 e0       	ldi	r24, 0x00	; 0
    6ac0:	03 c0       	rjmp	.+6      	; 0x6ac8 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0xf6>
    6ac2:	80 e0       	ldi	r24, 0x00	; 0
    6ac4:	01 c0       	rjmp	.+2      	; 0x6ac8 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0xf6>
    6ac6:	81 e0       	ldi	r24, 0x01	; 1
    6ac8:	a9 89       	ldd	r26, Y+17	; 0x11
    6aca:	ba 89       	ldd	r27, Y+18	; 0x12
    6acc:	8c 93       	st	X, r24
    6ace:	b4 e0       	ldi	r27, 0x04	; 4
    6ad0:	cb 16       	cp	r12, r27
    6ad2:	d1 04       	cpc	r13, r1
    6ad4:	e1 04       	cpc	r14, r1
    6ad6:	f1 04       	cpc	r15, r1
    6ad8:	21 f4       	brne	.+8      	; 0x6ae2 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0x110>
    6ada:	81 11       	cpse	r24, r1
    6adc:	04 c0       	rjmp	.+8      	; 0x6ae6 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0x114>
    6ade:	80 e0       	ldi	r24, 0x00	; 0
    6ae0:	03 c0       	rjmp	.+6      	; 0x6ae8 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0x116>
    6ae2:	80 e0       	ldi	r24, 0x00	; 0
    6ae4:	01 c0       	rjmp	.+2      	; 0x6ae8 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0x116>
    6ae6:	81 e0       	ldi	r24, 0x01	; 1
    6ae8:	f8 01       	movw	r30, r16
    6aea:	80 83       	st	Z, r24
    6aec:	88 23       	and	r24, r24
    6aee:	a1 f0       	breq	.+40     	; 0x6b18 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0x146>
    6af0:	d1 01       	movw	r26, r2
    6af2:	1d 92       	st	X+, r1
    6af4:	1d 92       	st	X+, r1
    6af6:	1d 92       	st	X+, r1
    6af8:	1c 92       	st	X, r1
    6afa:	13 97       	sbiw	r26, 0x03	; 3
    6afc:	f1 01       	movw	r30, r2
    6afe:	14 82       	std	Z+4, r1	; 0x04
    6b00:	15 82       	std	Z+5, r1	; 0x05
    6b02:	16 82       	std	Z+6, r1	; 0x06
    6b04:	17 82       	std	Z+7, r1	; 0x07
    6b06:	81 e0       	ldi	r24, 0x01	; 1
    6b08:	90 e0       	ldi	r25, 0x00	; 0
    6b0a:	a0 e0       	ldi	r26, 0x00	; 0
    6b0c:	b0 e0       	ldi	r27, 0x00	; 0
    6b0e:	80 87       	std	Z+8, r24	; 0x08
    6b10:	91 87       	std	Z+9, r25	; 0x09
    6b12:	a2 87       	std	Z+10, r26	; 0x0a
    6b14:	b3 87       	std	Z+11, r27	; 0x0b
    6b16:	69 c0       	rjmp	.+210    	; 0x6bea <_Z19multisynth_estimatemP13u_si5351_regsPhS1_+0x218>
    6b18:	89 80       	ldd	r8, Y+1	; 0x01
    6b1a:	9a 80       	ldd	r9, Y+2	; 0x02
    6b1c:	ab 80       	ldd	r10, Y+3	; 0x03
    6b1e:	bc 80       	ldd	r11, Y+4	; 0x04
    6b20:	88 0c       	add	r8, r8
    6b22:	99 1c       	adc	r9, r9
    6b24:	aa 1c       	adc	r10, r10
    6b26:	bb 1c       	adc	r11, r11
    6b28:	88 0c       	add	r8, r8
    6b2a:	99 1c       	adc	r9, r9
    6b2c:	aa 1c       	adc	r10, r10
    6b2e:	bb 1c       	adc	r11, r11
    6b30:	88 0c       	add	r8, r8
    6b32:	99 1c       	adc	r9, r9
    6b34:	aa 1c       	adc	r10, r10
    6b36:	bb 1c       	adc	r11, r11
    6b38:	88 0c       	add	r8, r8
    6b3a:	99 1c       	adc	r9, r9
    6b3c:	aa 1c       	adc	r10, r10
    6b3e:	bb 1c       	adc	r11, r11
    6b40:	88 0c       	add	r8, r8
    6b42:	99 1c       	adc	r9, r9
    6b44:	aa 1c       	adc	r10, r10
    6b46:	bb 1c       	adc	r11, r11
    6b48:	88 0c       	add	r8, r8
    6b4a:	99 1c       	adc	r9, r9
    6b4c:	aa 1c       	adc	r10, r10
    6b4e:	bb 1c       	adc	r11, r11
    6b50:	88 0c       	add	r8, r8
    6b52:	99 1c       	adc	r9, r9
    6b54:	aa 1c       	adc	r10, r10
    6b56:	bb 1c       	adc	r11, r11
    6b58:	4d 80       	ldd	r4, Y+5	; 0x05
    6b5a:	5e 80       	ldd	r5, Y+6	; 0x06
    6b5c:	6f 80       	ldd	r6, Y+7	; 0x07
    6b5e:	78 84       	ldd	r7, Y+8	; 0x08
    6b60:	c5 01       	movw	r24, r10
    6b62:	b4 01       	movw	r22, r8
    6b64:	a3 01       	movw	r20, r6
    6b66:	92 01       	movw	r18, r4
    6b68:	0e 94 09 40 	call	0x8012	; 0x8012 <__udivmodsi4>
    6b6c:	c9 84       	ldd	r12, Y+9	; 0x09
    6b6e:	da 84       	ldd	r13, Y+10	; 0x0a
    6b70:	eb 84       	ldd	r14, Y+11	; 0x0b
    6b72:	fc 84       	ldd	r15, Y+12	; 0x0c
    6b74:	cc 0c       	add	r12, r12
    6b76:	dd 1c       	adc	r13, r13
    6b78:	ee 1c       	adc	r14, r14
    6b7a:	ff 1c       	adc	r15, r15
    6b7c:	cc 0c       	add	r12, r12
    6b7e:	dd 1c       	adc	r13, r13
    6b80:	ee 1c       	adc	r14, r14
    6b82:	ff 1c       	adc	r15, r15
    6b84:	cc 0c       	add	r12, r12
    6b86:	dd 1c       	adc	r13, r13
    6b88:	ee 1c       	adc	r14, r14
    6b8a:	ff 1c       	adc	r15, r15
    6b8c:	cc 0c       	add	r12, r12
    6b8e:	dd 1c       	adc	r13, r13
    6b90:	ee 1c       	adc	r14, r14
    6b92:	ff 1c       	adc	r15, r15
    6b94:	cc 0c       	add	r12, r12
    6b96:	dd 1c       	adc	r13, r13
    6b98:	ee 1c       	adc	r14, r14
    6b9a:	ff 1c       	adc	r15, r15
    6b9c:	cc 0c       	add	r12, r12
    6b9e:	dd 1c       	adc	r13, r13
    6ba0:	ee 1c       	adc	r14, r14
    6ba2:	ff 1c       	adc	r15, r15
    6ba4:	cc 0c       	add	r12, r12
    6ba6:	dd 1c       	adc	r13, r13
    6ba8:	ee 1c       	adc	r14, r14
    6baa:	ff 1c       	adc	r15, r15
    6bac:	c2 0e       	add	r12, r18
    6bae:	d3 1e       	adc	r13, r19
    6bb0:	e4 1e       	adc	r14, r20
    6bb2:	f5 1e       	adc	r15, r21
    6bb4:	f2 e0       	ldi	r31, 0x02	; 2
    6bb6:	df 1a       	sub	r13, r31
    6bb8:	e1 08       	sbc	r14, r1
    6bba:	f1 08       	sbc	r15, r1
    6bbc:	d1 01       	movw	r26, r2
    6bbe:	cd 92       	st	X+, r12
    6bc0:	dd 92       	st	X+, r13
    6bc2:	ed 92       	st	X+, r14
    6bc4:	fc 92       	st	X, r15
    6bc6:	13 97       	sbiw	r26, 0x03	; 3
    6bc8:	c3 01       	movw	r24, r6
    6bca:	b2 01       	movw	r22, r4
    6bcc:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__mulsi3>
    6bd0:	86 1a       	sub	r8, r22
    6bd2:	97 0a       	sbc	r9, r23
    6bd4:	a8 0a       	sbc	r10, r24
    6bd6:	b9 0a       	sbc	r11, r25
    6bd8:	f1 01       	movw	r30, r2
    6bda:	84 82       	std	Z+4, r8	; 0x04
    6bdc:	95 82       	std	Z+5, r9	; 0x05
    6bde:	a6 82       	std	Z+6, r10	; 0x06
    6be0:	b7 82       	std	Z+7, r11	; 0x07
    6be2:	40 86       	std	Z+8, r4	; 0x08
    6be4:	51 86       	std	Z+9, r5	; 0x09
    6be6:	62 86       	std	Z+10, r6	; 0x0a
    6be8:	73 86       	std	Z+11, r7	; 0x0b
    6bea:	6d 85       	ldd	r22, Y+13	; 0x0d
    6bec:	7e 85       	ldd	r23, Y+14	; 0x0e
    6bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    6bf0:	98 89       	ldd	r25, Y+16	; 0x10
    6bf2:	62 96       	adiw	r28, 0x12	; 18
    6bf4:	cd bf       	out	0x3d, r28	; 61
    6bf6:	de bf       	out	0x3e, r29	; 62
    6bf8:	df 91       	pop	r29
    6bfa:	cf 91       	pop	r28
    6bfc:	1f 91       	pop	r17
    6bfe:	0f 91       	pop	r16
    6c00:	ff 90       	pop	r15
    6c02:	ef 90       	pop	r14
    6c04:	df 90       	pop	r13
    6c06:	cf 90       	pop	r12
    6c08:	bf 90       	pop	r11
    6c0a:	af 90       	pop	r10
    6c0c:	9f 90       	pop	r9
    6c0e:	8f 90       	pop	r8
    6c10:	7f 90       	pop	r7
    6c12:	6f 90       	pop	r6
    6c14:	5f 90       	pop	r5
    6c16:	4f 90       	pop	r4
    6c18:	3f 90       	pop	r3
    6c1a:	2f 90       	pop	r2
    6c1c:	08 95       	ret

00006c1e <_Z17si5351_write_bulkhPhh>:
    6c1e:	cf 93       	push	r28
    6c20:	c4 2f       	mov	r28, r20
    6c22:	24 2f       	mov	r18, r20
    6c24:	ab 01       	movw	r20, r22
    6c26:	68 2f       	mov	r22, r24
    6c28:	80 ec       	ldi	r24, 0xC0	; 192
    6c2a:	0e 94 1b 2c 	call	0x5836	; 0x5836 <I2C_1_SendData>
    6c2e:	91 e0       	ldi	r25, 0x01	; 1
    6c30:	c8 13       	cpse	r28, r24
    6c32:	01 c0       	rjmp	.+2      	; 0x6c36 <_Z17si5351_write_bulkhPhh+0x18>
    6c34:	90 e0       	ldi	r25, 0x00	; 0
    6c36:	89 2f       	mov	r24, r25
    6c38:	cf 91       	pop	r28
    6c3a:	08 95       	ret

00006c3c <_Z7set_pllm10si5351_pll>:
    6c3c:	1f 93       	push	r17
    6c3e:	cf 93       	push	r28
    6c40:	df 93       	push	r29
    6c42:	cd b7       	in	r28, 0x3d	; 61
    6c44:	de b7       	in	r29, 0x3e	; 62
    6c46:	66 97       	sbiw	r28, 0x16	; 22
    6c48:	cd bf       	out	0x3d, r28	; 61
    6c4a:	de bf       	out	0x3e, r29	; 62
    6c4c:	14 2f       	mov	r17, r20
    6c4e:	ae 01       	movw	r20, r28
    6c50:	4f 5f       	subi	r20, 0xFF	; 255
    6c52:	5f 4f       	sbci	r21, 0xFF	; 255
    6c54:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <_Z8pll_calcmP13u_si5351_regs>
    6c58:	81 11       	cpse	r24, r1
    6c5a:	2f c0       	rjmp	.+94     	; 0x6cba <_Z7set_pllm10si5351_pll+0x7e>
    6c5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    6c5e:	8d 87       	std	Y+13, r24	; 0x0d
    6c60:	89 85       	ldd	r24, Y+9	; 0x09
    6c62:	8e 87       	std	Y+14, r24	; 0x0e
    6c64:	8b 81       	ldd	r24, Y+3	; 0x03
    6c66:	83 70       	andi	r24, 0x03	; 3
    6c68:	8f 87       	std	Y+15, r24	; 0x0f
    6c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    6c6c:	88 8b       	std	Y+16, r24	; 0x10
    6c6e:	89 81       	ldd	r24, Y+1	; 0x01
    6c70:	89 8b       	std	Y+17, r24	; 0x11
    6c72:	9b 85       	ldd	r25, Y+11	; 0x0b
    6c74:	8f 81       	ldd	r24, Y+7	; 0x07
    6c76:	8f 70       	andi	r24, 0x0F	; 15
    6c78:	20 e1       	ldi	r18, 0x10	; 16
    6c7a:	92 9f       	mul	r25, r18
    6c7c:	80 0d       	add	r24, r0
    6c7e:	11 24       	eor	r1, r1
    6c80:	8a 8b       	std	Y+18, r24	; 0x12
    6c82:	8e 81       	ldd	r24, Y+6	; 0x06
    6c84:	8b 8b       	std	Y+19, r24	; 0x13
    6c86:	8d 81       	ldd	r24, Y+5	; 0x05
    6c88:	8c 8b       	std	Y+20, r24	; 0x14
    6c8a:	11 30       	cpi	r17, 0x01	; 1
    6c8c:	59 f4       	brne	.+22     	; 0x6ca4 <_Z7set_pllm10si5351_pll+0x68>
    6c8e:	48 e0       	ldi	r20, 0x08	; 8
    6c90:	be 01       	movw	r22, r28
    6c92:	63 5f       	subi	r22, 0xF3	; 243
    6c94:	7f 4f       	sbci	r23, 0xFF	; 255
    6c96:	8a e1       	ldi	r24, 0x1A	; 26
    6c98:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    6c9c:	88 23       	and	r24, r24
    6c9e:	79 f0       	breq	.+30     	; 0x6cbe <_Z7set_pllm10si5351_pll+0x82>
    6ca0:	81 e0       	ldi	r24, 0x01	; 1
    6ca2:	10 c0       	rjmp	.+32     	; 0x6cc4 <_Z7set_pllm10si5351_pll+0x88>
    6ca4:	48 e0       	ldi	r20, 0x08	; 8
    6ca6:	be 01       	movw	r22, r28
    6ca8:	63 5f       	subi	r22, 0xF3	; 243
    6caa:	7f 4f       	sbci	r23, 0xFF	; 255
    6cac:	82 e2       	ldi	r24, 0x22	; 34
    6cae:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    6cb2:	88 23       	and	r24, r24
    6cb4:	31 f0       	breq	.+12     	; 0x6cc2 <_Z7set_pllm10si5351_pll+0x86>
    6cb6:	81 e0       	ldi	r24, 0x01	; 1
    6cb8:	05 c0       	rjmp	.+10     	; 0x6cc4 <_Z7set_pllm10si5351_pll+0x88>
    6cba:	81 e0       	ldi	r24, 0x01	; 1
    6cbc:	03 c0       	rjmp	.+6      	; 0x6cc4 <_Z7set_pllm10si5351_pll+0x88>
    6cbe:	80 e0       	ldi	r24, 0x00	; 0
    6cc0:	01 c0       	rjmp	.+2      	; 0x6cc4 <_Z7set_pllm10si5351_pll+0x88>
    6cc2:	80 e0       	ldi	r24, 0x00	; 0
    6cc4:	66 96       	adiw	r28, 0x16	; 22
    6cc6:	cd bf       	out	0x3d, r28	; 61
    6cc8:	de bf       	out	0x3e, r29	; 62
    6cca:	df 91       	pop	r29
    6ccc:	cf 91       	pop	r28
    6cce:	1f 91       	pop	r17
    6cd0:	08 95       	ret

00006cd2 <_Z16si5351_read_bulkhPhh>:
	{
		return( I2C_1_SendData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes);
	}

	BOOL si5351_read_bulk(uint8_t regAddr, uint8_t *data, uint8_t bytes)
	{
    6cd2:	cf 93       	push	r28
    6cd4:	c4 2f       	mov	r28, r20
		return( I2C_1_GetData(SI5351_I2C_SLAVE_ADDR, regAddr, data, bytes) != bytes);
    6cd6:	24 2f       	mov	r18, r20
    6cd8:	ab 01       	movw	r20, r22
    6cda:	68 2f       	mov	r22, r24
    6cdc:	80 ec       	ldi	r24, 0xC0	; 192
    6cde:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <I2C_1_GetData>
    6ce2:	91 e0       	ldi	r25, 0x01	; 1
    6ce4:	c8 13       	cpse	r28, r24
    6ce6:	01 c0       	rjmp	.+2      	; 0x6cea <_Z16si5351_read_bulkhPhh+0x18>
    6ce8:	90 e0       	ldi	r25, 0x00	; 0
	}
    6cea:	89 2f       	mov	r24, r25
    6cec:	cf 91       	pop	r28
    6cee:	08 95       	ret

00006cf0 <si5351_init>:
 * xtal_load_c - Crystal load capacitance.
 * ref_osc_freq - Crystal/reference oscillator frequency (Hz).
 *
 */
	BOOL si5351_init(Si5351_Xtal_load_pF xtal_load_c, Frequency_Hz ref_osc_freq)
	{
    6cf0:	cf 92       	push	r12
    6cf2:	df 92       	push	r13
    6cf4:	ef 92       	push	r14
    6cf6:	ff 92       	push	r15
    6cf8:	1f 93       	push	r17
    6cfa:	cf 93       	push	r28
    6cfc:	df 93       	push	r29
    6cfe:	00 d0       	rcall	.+0      	; 0x6d00 <si5351_init+0x10>
    6d00:	cd b7       	in	r28, 0x3d	; 61
    6d02:	de b7       	in	r29, 0x3e	; 62
    6d04:	18 2f       	mov	r17, r24
    6d06:	6a 01       	movw	r12, r20
    6d08:	7b 01       	movw	r14, r22
//		static BOOL err = FALSE;
		uint8_t data[2];
		
#ifndef DEBUG_WITHOUT_I2C
			/* Start I2C comms */
			I2C_1_Init();
    6d0a:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <I2C_1_Init>
			uint8_t result_val = 0x00;
			BOOL result = FALSE;
#endif
		uint8_t reg_val;

		freqVCOB = 0;
    6d0e:	10 92 4d 48 	sts	0x484D, r1	; 0x80484d <_ZL8freqVCOB>
    6d12:	10 92 4e 48 	sts	0x484E, r1	; 0x80484e <_ZL8freqVCOB+0x1>
    6d16:	10 92 4f 48 	sts	0x484F, r1	; 0x80484f <_ZL8freqVCOB+0x2>
    6d1a:	10 92 50 48 	sts	0x4850, r1	; 0x804850 <_ZL8freqVCOB+0x3>
		xtal_freq = SI5351_XTAL_FREQ;
    6d1e:	80 e4       	ldi	r24, 0x40	; 64
    6d20:	98 e7       	ldi	r25, 0x78	; 120
    6d22:	ad e7       	ldi	r26, 0x7D	; 125
    6d24:	b1 e0       	ldi	r27, 0x01	; 1
    6d26:	80 93 28 40 	sts	0x4028, r24	; 0x804028 <_ZL9xtal_freq>
    6d2a:	90 93 29 40 	sts	0x4029, r25	; 0x804029 <_ZL9xtal_freq+0x1>
    6d2e:	a0 93 2a 40 	sts	0x402A, r26	; 0x80402a <_ZL9xtal_freq+0x2>
    6d32:	b0 93 2b 40 	sts	0x402B, r27	; 0x80402b <_ZL9xtal_freq+0x3>
		enabledClocksMask = 0x00;
    6d36:	10 92 4c 48 	sts	0x484C, r1	; 0x80484c <_ZL17enabledClocksMask>

		/* Disable Outputs */
		/* Set CLKx_DIS high; Reg. 3 = 0xFF */
		data[0] = 0xFF;
    6d3a:	8f ef       	ldi	r24, 0xFF	; 255
    6d3c:	89 83       	std	Y+1, r24	; 0x01
		err = si5351_write_bulk(0x03, data, 1);
    6d3e:	41 e0       	ldi	r20, 0x01	; 1
    6d40:	be 01       	movw	r22, r28
    6d42:	6f 5f       	subi	r22, 0xFF	; 255
    6d44:	7f 4f       	sbci	r23, 0xFF	; 255
    6d46:	83 e0       	ldi	r24, 0x03	; 3
    6d48:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    6d4c:	80 93 3e 48 	sts	0x483E, r24	; 0x80483e <err>
		
		if(err) return err;
    6d50:	81 11       	cpse	r24, r1
    6d52:	79 c0       	rjmp	.+242    	; 0x6e46 <si5351_init+0x156>
		/* Power down clocks */
		data[0] = 0xCC;
    6d54:	8c ec       	ldi	r24, 0xCC	; 204
    6d56:	89 83       	std	Y+1, r24	; 0x01
		err |= si5351_write_bulk(0x10, data, 1);
    6d58:	41 e0       	ldi	r20, 0x01	; 1
    6d5a:	be 01       	movw	r22, r28
    6d5c:	6f 5f       	subi	r22, 0xFF	; 255
    6d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    6d60:	80 e1       	ldi	r24, 0x10	; 16
    6d62:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    6d66:	90 91 3e 48 	lds	r25, 0x483E	; 0x80483e <err>
    6d6a:	89 2b       	or	r24, r25
    6d6c:	80 93 3e 48 	sts	0x483E, r24	; 0x80483e <err>
		err |= si5351_write_bulk(0x11, data, 1);
    6d70:	41 e0       	ldi	r20, 0x01	; 1
    6d72:	be 01       	movw	r22, r28
    6d74:	6f 5f       	subi	r22, 0xFF	; 255
    6d76:	7f 4f       	sbci	r23, 0xFF	; 255
    6d78:	81 e1       	ldi	r24, 0x11	; 17
    6d7a:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    6d7e:	90 91 3e 48 	lds	r25, 0x483E	; 0x80483e <err>
    6d82:	89 2b       	or	r24, r25
    6d84:	80 93 3e 48 	sts	0x483E, r24	; 0x80483e <err>
		err |= si5351_write_bulk(0x12, data, 1);
    6d88:	41 e0       	ldi	r20, 0x01	; 1
    6d8a:	be 01       	movw	r22, r28
    6d8c:	6f 5f       	subi	r22, 0xFF	; 255
    6d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    6d90:	82 e1       	ldi	r24, 0x12	; 18
    6d92:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    6d96:	90 91 3e 48 	lds	r25, 0x483E	; 0x80483e <err>
    6d9a:	89 2b       	or	r24, r25
    6d9c:	80 93 3e 48 	sts	0x483E, r24	; 0x80483e <err>

		/* Set crystal load capacitance */
		reg_val = 0x12; /* 0b010010 reserved value bits */
		reg_val |= xtal_load_c;
    6da0:	12 61       	ori	r17, 0x12	; 18

		data[0] = reg_val;
    6da2:	19 83       	std	Y+1, r17	; 0x01
		err |= si5351_write_bulk(SI5351_CRYSTAL_LOAD, data, 1);
    6da4:	41 e0       	ldi	r20, 0x01	; 1
    6da6:	be 01       	movw	r22, r28
    6da8:	6f 5f       	subi	r22, 0xFF	; 255
    6daa:	7f 4f       	sbci	r23, 0xFF	; 255
    6dac:	87 eb       	ldi	r24, 0xB7	; 183
    6dae:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    6db2:	90 91 3e 48 	lds	r25, 0x483E	; 0x80483e <err>
    6db6:	89 2b       	or	r24, r25
    6db8:	80 93 3e 48 	sts	0x483E, r24	; 0x80483e <err>

		if(!ref_osc_freq)
    6dbc:	c1 14       	cp	r12, r1
    6dbe:	d1 04       	cpc	r13, r1
    6dc0:	e1 04       	cpc	r14, r1
    6dc2:	f1 04       	cpc	r15, r1
    6dc4:	51 f4       	brne	.+20     	; 0x6dda <si5351_init+0xea>
		{
			ref_osc_freq = SI5351_XTAL_FREQ;
    6dc6:	0f 2e       	mov	r0, r31
    6dc8:	f0 e4       	ldi	r31, 0x40	; 64
    6dca:	cf 2e       	mov	r12, r31
    6dcc:	f8 e7       	ldi	r31, 0x78	; 120
    6dce:	df 2e       	mov	r13, r31
    6dd0:	fd e7       	ldi	r31, 0x7D	; 125
    6dd2:	ef 2e       	mov	r14, r31
    6dd4:	ff 24       	eor	r15, r15
    6dd6:	f3 94       	inc	r15
    6dd8:	f0 2d       	mov	r31, r0
		}

		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
    6dda:	80 91 28 40 	lds	r24, 0x4028	; 0x804028 <_ZL9xtal_freq>
    6dde:	90 91 29 40 	lds	r25, 0x4029	; 0x804029 <_ZL9xtal_freq+0x1>
    6de2:	a0 91 2a 40 	lds	r26, 0x402A	; 0x80402a <_ZL9xtal_freq+0x2>
    6de6:	b0 91 2b 40 	lds	r27, 0x402B	; 0x80402b <_ZL9xtal_freq+0x3>
    6dea:	c8 16       	cp	r12, r24
    6dec:	d9 06       	cpc	r13, r25
    6dee:	ea 06       	cpc	r14, r26
    6df0:	fb 06       	cpc	r15, r27
    6df2:	01 f1       	breq	.+64     	; 0x6e34 <si5351_init+0x144>
		{
			if(si5351_read_bulk(SI5351_PLL_INPUT_SOURCE, data, 1))
    6df4:	41 e0       	ldi	r20, 0x01	; 1
    6df6:	be 01       	movw	r22, r28
    6df8:	6f 5f       	subi	r22, 0xFF	; 255
    6dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    6dfc:	8f e0       	ldi	r24, 0x0F	; 15
    6dfe:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <_Z16si5351_read_bulkhPhh>
    6e02:	81 11       	cpse	r24, r1
    6e04:	1f c0       	rjmp	.+62     	; 0x6e44 <si5351_init+0x154>
			{
				return TRUE;
			}
			
			reg_val = data[0];
    6e06:	89 81       	ldd	r24, Y+1	; 0x01

			/* Clear the bits first */
			reg_val &= ~(SI5351_CLKIN_DIV_MASK);
    6e08:	8f 73       	andi	r24, 0x3F	; 63

			xtal_freq = ref_osc_freq;
    6e0a:	c0 92 28 40 	sts	0x4028, r12	; 0x804028 <_ZL9xtal_freq>
    6e0e:	d0 92 29 40 	sts	0x4029, r13	; 0x804029 <_ZL9xtal_freq+0x1>
    6e12:	e0 92 2a 40 	sts	0x402A, r14	; 0x80402a <_ZL9xtal_freq+0x2>
    6e16:	f0 92 2b 40 	sts	0x402B, r15	; 0x80402b <_ZL9xtal_freq+0x3>
					reg_val |= SI5351_CLKIN_DIV_4;
				}

#endif  /* #ifndef DIVIDE_XTAL_FREQ_IF_NEEDED */

			data[0] = reg_val;
    6e1a:	89 83       	std	Y+1, r24	; 0x01
			err |= si5351_write_bulk(SI5351_PLL_INPUT_SOURCE, data, 1);
    6e1c:	41 e0       	ldi	r20, 0x01	; 1
    6e1e:	be 01       	movw	r22, r28
    6e20:	6f 5f       	subi	r22, 0xFF	; 255
    6e22:	7f 4f       	sbci	r23, 0xFF	; 255
    6e24:	8f e0       	ldi	r24, 0x0F	; 15
    6e26:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    6e2a:	90 91 3e 48 	lds	r25, 0x483E	; 0x80483e <err>
    6e2e:	89 2b       	or	r24, r25
    6e30:	80 93 3e 48 	sts	0x483E, r24	; 0x80483e <err>
		}
		
		g_si5351_initialized = !err;
    6e34:	80 91 3e 48 	lds	r24, 0x483E	; 0x80483e <err>
    6e38:	91 e0       	ldi	r25, 0x01	; 1
    6e3a:	81 11       	cpse	r24, r1
    6e3c:	90 e0       	ldi	r25, 0x00	; 0
    6e3e:	90 93 3f 48 	sts	0x483F, r25	; 0x80483f <g_si5351_initialized>

		return err;
    6e42:	01 c0       	rjmp	.+2      	; 0x6e46 <si5351_init+0x156>
		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
		{
			if(si5351_read_bulk(SI5351_PLL_INPUT_SOURCE, data, 1))
			{
				return TRUE;
    6e44:	81 e0       	ldi	r24, 0x01	; 1
		}
		
		g_si5351_initialized = !err;

		return err;
	}
    6e46:	0f 90       	pop	r0
    6e48:	0f 90       	pop	r0
    6e4a:	df 91       	pop	r29
    6e4c:	cf 91       	pop	r28
    6e4e:	1f 91       	pop	r17
    6e50:	ff 90       	pop	r15
    6e52:	ef 90       	pop	r14
    6e54:	df 90       	pop	r13
    6e56:	cf 90       	pop	r12
    6e58:	08 95       	ret

00006e5a <si5351_clock_enable>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	EC si5351_clock_enable(Si5351_clock clk, BOOL enable)
	{
    6e5a:	0f 93       	push	r16
    6e5c:	1f 93       	push	r17
    6e5e:	cf 93       	push	r28
    6e60:	df 93       	push	r29
    6e62:	00 d0       	rcall	.+0      	; 0x6e64 <si5351_clock_enable+0xa>
    6e64:	cd b7       	in	r28, 0x3d	; 61
    6e66:	de b7       	in	r29, 0x3e	; 62
    6e68:	18 2f       	mov	r17, r24
    6e6a:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
    6e6c:	41 e0       	ldi	r20, 0x01	; 1
    6e6e:	be 01       	movw	r22, r28
    6e70:	6f 5f       	subi	r22, 0xFF	; 255
    6e72:	7f 4f       	sbci	r23, 0xFF	; 255
    6e74:	83 e0       	ldi	r24, 0x03	; 3
    6e76:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <_Z16si5351_read_bulkhPhh>
    6e7a:	81 11       	cpse	r24, r1
    6e7c:	23 c0       	rjmp	.+70     	; 0x6ec4 <si5351_clock_enable+0x6a>
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    6e7e:	99 81       	ldd	r25, Y+1	; 0x01

		if(enable)
    6e80:	00 23       	and	r16, r16
    6e82:	59 f0       	breq	.+22     	; 0x6e9a <si5351_clock_enable+0x40>
		{
			reg_val &= ~(1 << (uint8_t)clk);
    6e84:	21 e0       	ldi	r18, 0x01	; 1
    6e86:	30 e0       	ldi	r19, 0x00	; 0
    6e88:	02 c0       	rjmp	.+4      	; 0x6e8e <si5351_clock_enable+0x34>
    6e8a:	22 0f       	add	r18, r18
    6e8c:	33 1f       	adc	r19, r19
    6e8e:	1a 95       	dec	r17
    6e90:	e2 f7       	brpl	.-8      	; 0x6e8a <si5351_clock_enable+0x30>
    6e92:	82 2f       	mov	r24, r18
    6e94:	80 95       	com	r24
    6e96:	89 23       	and	r24, r25
    6e98:	09 c0       	rjmp	.+18     	; 0x6eac <si5351_clock_enable+0x52>
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    6e9a:	21 e0       	ldi	r18, 0x01	; 1
    6e9c:	30 e0       	ldi	r19, 0x00	; 0
    6e9e:	02 c0       	rjmp	.+4      	; 0x6ea4 <si5351_clock_enable+0x4a>
    6ea0:	22 0f       	add	r18, r18
    6ea2:	33 1f       	adc	r19, r19
    6ea4:	1a 95       	dec	r17
    6ea6:	e2 f7       	brpl	.-8      	; 0x6ea0 <si5351_clock_enable+0x46>
    6ea8:	89 2f       	mov	r24, r25
    6eaa:	82 2b       	or	r24, r18
		}

		data[0] = reg_val;
    6eac:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;
    6eae:	41 e0       	ldi	r20, 0x01	; 1
    6eb0:	be 01       	movw	r22, r28
    6eb2:	6f 5f       	subi	r22, 0xFF	; 255
    6eb4:	7f 4f       	sbci	r23, 0xFF	; 255
    6eb6:	83 e0       	ldi	r24, 0x03	; 3
    6eb8:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    6ebc:	88 23       	and	r24, r24
    6ebe:	21 f0       	breq	.+8      	; 0x6ec8 <si5351_clock_enable+0x6e>
    6ec0:	8c ef       	ldi	r24, 0xFC	; 252
    6ec2:	03 c0       	rjmp	.+6      	; 0x6eca <si5351_clock_enable+0x70>
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) 
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
    6ec4:	8c ef       	ldi	r24, 0xFC	; 252
    6ec6:	01 c0       	rjmp	.+2      	; 0x6eca <si5351_clock_enable+0x70>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_OUTPUT_ENABLE_CTRL, data, 1)) return ERROR_CODE_RTC_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    6ec8:	80 e0       	ldi	r24, 0x00	; 0
	}
    6eca:	0f 90       	pop	r0
    6ecc:	0f 90       	pop	r0
    6ece:	df 91       	pop	r29
    6ed0:	cf 91       	pop	r28
    6ed2:	1f 91       	pop	r17
    6ed4:	0f 91       	pop	r16
    6ed6:	08 95       	ret

00006ed8 <si5351_drive_strength>:
 * clk - Clock output
 * drive - Desired drive level
 *
 */
	EC si5351_drive_strength(Si5351_clock clk, Si5351_drive drive)
	{
    6ed8:	0f 93       	push	r16
    6eda:	1f 93       	push	r17
    6edc:	cf 93       	push	r28
    6ede:	df 93       	push	r29
    6ee0:	00 d0       	rcall	.+0      	; 0x6ee2 <si5351_drive_strength+0xa>
    6ee2:	cd b7       	in	r28, 0x3d	; 61
    6ee4:	de b7       	in	r29, 0x3e	; 62
    6ee6:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    6ee8:	10 e1       	ldi	r17, 0x10	; 16
    6eea:	18 0f       	add	r17, r24
    6eec:	41 e0       	ldi	r20, 0x01	; 1
    6eee:	be 01       	movw	r22, r28
    6ef0:	6f 5f       	subi	r22, 0xFF	; 255
    6ef2:	7f 4f       	sbci	r23, 0xFF	; 255
    6ef4:	81 2f       	mov	r24, r17
    6ef6:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <_Z16si5351_read_bulkhPhh>
    6efa:	81 11       	cpse	r24, r1
    6efc:	1e c0       	rjmp	.+60     	; 0x6f3a <si5351_drive_strength+0x62>
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    6efe:	89 81       	ldd	r24, Y+1	; 0x01

		switch(drive)
    6f00:	01 30       	cpi	r16, 0x01	; 1
    6f02:	41 f0       	breq	.+16     	; 0x6f14 <si5351_drive_strength+0x3c>
    6f04:	28 f0       	brcs	.+10     	; 0x6f10 <si5351_drive_strength+0x38>
    6f06:	02 30       	cpi	r16, 0x02	; 2
    6f08:	41 f0       	breq	.+16     	; 0x6f1a <si5351_drive_strength+0x42>
    6f0a:	03 30       	cpi	r16, 0x03	; 3
    6f0c:	49 f0       	breq	.+18     	; 0x6f20 <si5351_drive_strength+0x48>
    6f0e:	09 c0       	rjmp	.+18     	; 0x6f22 <si5351_drive_strength+0x4a>
		{
			case SI5351_DRIVE_2MA:
			{
				reg_val &= ~(mask);
    6f10:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x00;
			}
			break;
    6f12:	07 c0       	rjmp	.+14     	; 0x6f22 <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_4MA:
			{
				reg_val &= ~(mask);
    6f14:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x01;
    6f16:	81 60       	ori	r24, 0x01	; 1
			}
			break;
    6f18:	04 c0       	rjmp	.+8      	; 0x6f22 <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_6MA:
			{
				reg_val &= ~(mask);
    6f1a:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x02;
    6f1c:	82 60       	ori	r24, 0x02	; 2
			}
			break;
    6f1e:	01 c0       	rjmp	.+2      	; 0x6f22 <si5351_drive_strength+0x4a>

			case SI5351_DRIVE_8MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x03;
    6f20:	83 60       	ori	r24, 0x03	; 3
			{
			}
			break;
		}

		data[0] = reg_val;
    6f22:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    6f24:	41 e0       	ldi	r20, 0x01	; 1
    6f26:	be 01       	movw	r22, r28
    6f28:	6f 5f       	subi	r22, 0xFF	; 255
    6f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    6f2c:	81 2f       	mov	r24, r17
    6f2e:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    6f32:	88 23       	and	r24, r24
    6f34:	21 f0       	breq	.+8      	; 0x6f3e <si5351_drive_strength+0x66>
    6f36:	8b ef       	ldi	r24, 0xFB	; 251
    6f38:	03 c0       	rjmp	.+6      	; 0x6f40 <si5351_drive_strength+0x68>
		uint8_t data[2];
		const uint8_t mask = 0x03;

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
		{
			return ERROR_CODE_CLKGEN_NONRESPONSIVE;
    6f3a:	8b ef       	ldi	r24, 0xFB	; 251
    6f3c:	01 c0       	rjmp	.+2      	; 0x6f40 <si5351_drive_strength+0x68>
		}

		data[0] = reg_val;
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1)) return ERROR_CODE_CLKGEN_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    6f3e:	80 e0       	ldi	r24, 0x00	; 0
	}
    6f40:	0f 90       	pop	r0
    6f42:	0f 90       	pop	r0
    6f44:	df 91       	pop	r29
    6f46:	cf 91       	pop	r28
    6f48:	1f 91       	pop	r17
    6f4a:	0f 91       	pop	r16
    6f4c:	08 95       	ret

00006f4e <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>:
 *
 * Set the desired PLL source for a multisynth.
 *
 */
	bool set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
	{
    6f4e:	0f 93       	push	r16
    6f50:	1f 93       	push	r17
    6f52:	cf 93       	push	r28
    6f54:	df 93       	push	r29
    6f56:	00 d0       	rcall	.+0      	; 0x6f58 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0xa>
    6f58:	cd b7       	in	r28, 0x3d	; 61
    6f5a:	de b7       	in	r29, 0x3e	; 62
    6f5c:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    6f5e:	10 e1       	ldi	r17, 0x10	; 16
    6f60:	18 0f       	add	r17, r24
    6f62:	41 e0       	ldi	r20, 0x01	; 1
    6f64:	be 01       	movw	r22, r28
    6f66:	6f 5f       	subi	r22, 0xFF	; 255
    6f68:	7f 4f       	sbci	r23, 0xFF	; 255
    6f6a:	81 2f       	mov	r24, r17
    6f6c:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <_Z16si5351_read_bulkhPhh>
    6f70:	81 11       	cpse	r24, r1
    6f72:	14 c0       	rjmp	.+40     	; 0x6f9c <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x4e>
		{
			return(true);
		}
		
		reg_val = data[0];
    6f74:	89 81       	ldd	r24, Y+1	; 0x01

		if(pll == SI5351_PLLA)
    6f76:	01 30       	cpi	r16, 0x01	; 1
    6f78:	11 f4       	brne	.+4      	; 0x6f7e <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x30>
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
    6f7a:	8f 7d       	andi	r24, 0xDF	; 223
    6f7c:	03 c0       	rjmp	.+6      	; 0x6f84 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		}
		else if(pll == SI5351_PLLB)
    6f7e:	02 30       	cpi	r16, 0x02	; 2
    6f80:	09 f4       	brne	.+2      	; 0x6f84 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x36>
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
    6f82:	80 62       	ori	r24, 0x20	; 32
		}

		data[0] = reg_val;
    6f84:	89 83       	std	Y+1, r24	; 0x01
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    6f86:	41 e0       	ldi	r20, 0x01	; 1
    6f88:	be 01       	movw	r22, r28
    6f8a:	6f 5f       	subi	r22, 0xFF	; 255
    6f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    6f8e:	81 2f       	mov	r24, r17
    6f90:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    6f94:	88 23       	and	r24, r24
    6f96:	21 f0       	breq	.+8      	; 0x6fa0 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x52>
		{
			return(true);
    6f98:	81 e0       	ldi	r24, 0x01	; 1
    6f9a:	03 c0       	rjmp	.+6      	; 0x6fa2 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x54>
		uint8_t reg_val;
		uint8_t data[2];
		
		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
		{
			return(true);
    6f9c:	81 e0       	ldi	r24, 0x01	; 1
    6f9e:	01 c0       	rjmp	.+2      	; 0x6fa2 <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll+0x54>
		if(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
		{
			return(true);
		}
		
		return(false);
    6fa0:	80 e0       	ldi	r24, 0x00	; 0
	}
    6fa2:	0f 90       	pop	r0
    6fa4:	0f 90       	pop	r0
    6fa6:	df 91       	pop	r29
    6fa8:	cf 91       	pop	r28
    6faa:	1f 91       	pop	r17
    6fac:	0f 91       	pop	r16
    6fae:	08 95       	ret

00006fb0 <_Z16set_integer_mode12si5351_clockh>:
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
	bool set_integer_mode(Si5351_clock clk, BOOL enable)
	{
    6fb0:	0f 93       	push	r16
    6fb2:	1f 93       	push	r17
    6fb4:	cf 93       	push	r28
    6fb6:	df 93       	push	r29
    6fb8:	00 d0       	rcall	.+0      	; 0x6fba <_Z16set_integer_mode12si5351_clockh+0xa>
    6fba:	cd b7       	in	r28, 0x3d	; 61
    6fbc:	de b7       	in	r29, 0x3e	; 62
    6fbe:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
    6fc0:	10 e1       	ldi	r17, 0x10	; 16
    6fc2:	18 0f       	add	r17, r24
    6fc4:	41 e0       	ldi	r20, 0x01	; 1
    6fc6:	be 01       	movw	r22, r28
    6fc8:	6f 5f       	subi	r22, 0xFF	; 255
    6fca:	7f 4f       	sbci	r23, 0xFF	; 255
    6fcc:	81 2f       	mov	r24, r17
    6fce:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <_Z16si5351_read_bulkhPhh>
    6fd2:	81 11       	cpse	r24, r1
    6fd4:	13 c0       	rjmp	.+38     	; 0x6ffc <_Z16set_integer_mode12si5351_clockh+0x4c>
		{
			return(true);
		}
		
		reg_val = data[0];
    6fd6:	89 81       	ldd	r24, Y+1	; 0x01

		if(enable)
    6fd8:	00 23       	and	r16, r16
    6fda:	11 f0       	breq	.+4      	; 0x6fe0 <_Z16set_integer_mode12si5351_clockh+0x30>
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
    6fdc:	80 64       	ori	r24, 0x40	; 64
    6fde:	01 c0       	rjmp	.+2      	; 0x6fe2 <_Z16set_integer_mode12si5351_clockh+0x32>
		}
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
    6fe0:	8f 7b       	andi	r24, 0xBF	; 191
		}

		data[0] = reg_val;
    6fe2:	89 83       	std	Y+1, r24	; 0x01
		return(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1));
    6fe4:	41 e0       	ldi	r20, 0x01	; 1
    6fe6:	be 01       	movw	r22, r28
    6fe8:	6f 5f       	subi	r22, 0xFF	; 255
    6fea:	7f 4f       	sbci	r23, 0xFF	; 255
    6fec:	81 2f       	mov	r24, r17
    6fee:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    6ff2:	91 e0       	ldi	r25, 0x01	; 1
    6ff4:	81 11       	cpse	r24, r1
    6ff6:	03 c0       	rjmp	.+6      	; 0x6ffe <_Z16set_integer_mode12si5351_clockh+0x4e>
    6ff8:	90 e0       	ldi	r25, 0x00	; 0
    6ffa:	01 c0       	rjmp	.+2      	; 0x6ffe <_Z16set_integer_mode12si5351_clockh+0x4e>
		uint8_t reg_val;
		uint8_t data[2];

		if(si5351_read_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1))
		{
			return(true);
    6ffc:	91 e0       	ldi	r25, 0x01	; 1
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
		}

		data[0] = reg_val;
		return(si5351_write_bulk(SI5351_CLK0_CTRL + (uint8_t)clk, data, 1));
	}
    6ffe:	89 2f       	mov	r24, r25
    7000:	0f 90       	pop	r0
    7002:	0f 90       	pop	r0
    7004:	df 91       	pop	r29
    7006:	cf 91       	pop	r28
    7008:	1f 91       	pop	r17
    700a:	0f 91       	pop	r16
    700c:	08 95       	ret

0000700e <_Z6ms_div12si5351_clockhh>:


	bool ms_div(Si5351_clock clk, uint8_t r_div, BOOL div_by_4)
	{
    700e:	ff 92       	push	r15
    7010:	0f 93       	push	r16
    7012:	1f 93       	push	r17
    7014:	cf 93       	push	r28
    7016:	df 93       	push	r29
    7018:	00 d0       	rcall	.+0      	; 0x701a <_Z6ms_div12si5351_clockhh+0xc>
    701a:	cd b7       	in	r28, 0x3d	; 61
    701c:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val, reg_addr;
		uint8_t data[2];

		switch(clk)
    701e:	81 30       	cpi	r24, 0x01	; 1
    7020:	71 f0       	breq	.+28     	; 0x703e <_Z6ms_div12si5351_clockhh+0x30>
    7022:	18 f0       	brcs	.+6      	; 0x702a <_Z6ms_div12si5351_clockhh+0x1c>
    7024:	82 30       	cpi	r24, 0x02	; 2
    7026:	31 f0       	breq	.+12     	; 0x7034 <_Z6ms_div12si5351_clockhh+0x26>
    7028:	30 c0       	rjmp	.+96     	; 0x708a <_Z6ms_div12si5351_clockhh+0x7c>
		{
			case SI5351_CLK0:
			{
				reg_addr = SI5351_CLK0_PARAMETERS + 2;
    702a:	0f 2e       	mov	r0, r31
    702c:	fc e2       	ldi	r31, 0x2C	; 44
    702e:	ff 2e       	mov	r15, r31
    7030:	f0 2d       	mov	r31, r0
    7032:	09 c0       	rjmp	.+18     	; 0x7046 <_Z6ms_div12si5351_clockhh+0x38>
			}
			break;

			case SI5351_CLK2:
			{
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
    7034:	0f 2e       	mov	r0, r31
    7036:	fc e3       	ldi	r31, 0x3C	; 60
    7038:	ff 2e       	mov	r15, r31
    703a:	f0 2d       	mov	r31, r0
			}
			break;
    703c:	04 c0       	rjmp	.+8      	; 0x7046 <_Z6ms_div12si5351_clockhh+0x38>
			}
			break;

			case SI5351_CLK1:
			{
				reg_addr = SI5351_CLK1_PARAMETERS + 2;
    703e:	0f 2e       	mov	r0, r31
    7040:	f4 e3       	ldi	r31, 0x34	; 52
    7042:	ff 2e       	mov	r15, r31
    7044:	f0 2d       	mov	r31, r0
    7046:	04 2f       	mov	r16, r20
    7048:	16 2f       	mov	r17, r22

			default:
				return(true);
		}

		if(si5351_read_bulk(reg_addr, data, 1))
    704a:	41 e0       	ldi	r20, 0x01	; 1
    704c:	be 01       	movw	r22, r28
    704e:	6f 5f       	subi	r22, 0xFF	; 255
    7050:	7f 4f       	sbci	r23, 0xFF	; 255
    7052:	8f 2d       	mov	r24, r15
    7054:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <_Z16si5351_read_bulkhPhh>
    7058:	81 11       	cpse	r24, r1
    705a:	19 c0       	rjmp	.+50     	; 0x708e <_Z6ms_div12si5351_clockhh+0x80>
		{
			return(true);
		}
		
		reg_val = data[0];
    705c:	69 81       	ldd	r22, Y+1	; 0x01

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    705e:	86 2f       	mov	r24, r22
    7060:	83 78       	andi	r24, 0x83	; 131

		if(div_by_4)
    7062:	01 11       	cpse	r16, r1
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
    7064:	8c 60       	ori	r24, 0x0C	; 12
		else
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
    7066:	90 e1       	ldi	r25, 0x10	; 16
    7068:	19 9f       	mul	r17, r25
    706a:	b0 01       	movw	r22, r0
    706c:	11 24       	eor	r1, r1
    706e:	68 2b       	or	r22, r24

		data[0] = reg_val;
    7070:	69 83       	std	Y+1, r22	; 0x01
		return(si5351_write_bulk(reg_addr, data, 1));
    7072:	41 e0       	ldi	r20, 0x01	; 1
    7074:	be 01       	movw	r22, r28
    7076:	6f 5f       	subi	r22, 0xFF	; 255
    7078:	7f 4f       	sbci	r23, 0xFF	; 255
    707a:	8f 2d       	mov	r24, r15
    707c:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    7080:	91 e0       	ldi	r25, 0x01	; 1
    7082:	81 11       	cpse	r24, r1
    7084:	05 c0       	rjmp	.+10     	; 0x7090 <_Z6ms_div12si5351_clockhh+0x82>
    7086:	90 e0       	ldi	r25, 0x00	; 0
    7088:	03 c0       	rjmp	.+6      	; 0x7090 <_Z6ms_div12si5351_clockhh+0x82>
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
			}
			break;

			default:
				return(true);
    708a:	91 e0       	ldi	r25, 0x01	; 1
    708c:	01 c0       	rjmp	.+2      	; 0x7090 <_Z6ms_div12si5351_clockhh+0x82>
		}

		if(si5351_read_bulk(reg_addr, data, 1))
		{
			return(true);
    708e:	91 e0       	ldi	r25, 0x01	; 1

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);

		data[0] = reg_val;
		return(si5351_write_bulk(reg_addr, data, 1));
	}
    7090:	89 2f       	mov	r24, r25
    7092:	0f 90       	pop	r0
    7094:	0f 90       	pop	r0
    7096:	df 91       	pop	r29
    7098:	cf 91       	pop	r28
    709a:	1f 91       	pop	r17
    709c:	0f 91       	pop	r16
    709e:	ff 90       	pop	r15
    70a0:	08 95       	ret

000070a2 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh>:
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
	bool set_multisynth_registers(Si5351_clock clk, Union_si5351_regs ms_reg, BOOL int_mode, uint8_t r_div, BOOL div_by_4)
	{
    70a2:	8f 92       	push	r8
    70a4:	af 92       	push	r10
    70a6:	cf 92       	push	r12
    70a8:	df 92       	push	r13
    70aa:	ef 92       	push	r14
    70ac:	ff 92       	push	r15
    70ae:	0f 93       	push	r16
    70b0:	1f 93       	push	r17
    70b2:	cf 93       	push	r28
    70b4:	df 93       	push	r29
    70b6:	cd b7       	in	r28, 0x3d	; 61
    70b8:	de b7       	in	r29, 0x3e	; 62
    70ba:	69 97       	sbiw	r28, 0x19	; 25
    70bc:	cd bf       	out	0x3d, r28	; 61
    70be:	de bf       	out	0x3e, r29	; 62
    70c0:	f8 2e       	mov	r15, r24
    70c2:	ce 86       	std	Y+14, r12	; 0x0e
    70c4:	df 86       	std	Y+15, r13	; 0x0f
    70c6:	e8 8a       	std	Y+16, r14	; 0x10
    70c8:	0a 8b       	std	Y+18, r16	; 0x12
    70ca:	1b 8b       	std	Y+19, r17	; 0x13
    70cc:	2c 8b       	std	Y+20, r18	; 0x14
    70ce:	68 8f       	std	Y+24, r22	; 0x18
		uint8_t i = 0;
		uint8_t reg_val;
		uint8_t data[2];

		/* Registers 42-43 for CLK0; 50-51 for CLK1 */
		params[i++] = ms_reg.reg.p3_1;
    70d0:	59 83       	std	Y+1, r21	; 0x01
		params[i++] = ms_reg.reg.p3_0;
    70d2:	4a 83       	std	Y+2, r20	; 0x02

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read_bulk((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), data, 1))
    70d4:	88 0f       	add	r24, r24
    70d6:	88 0f       	add	r24, r24
    70d8:	88 0f       	add	r24, r24
    70da:	41 e0       	ldi	r20, 0x01	; 1
    70dc:	be 01       	movw	r22, r28
    70de:	64 5f       	subi	r22, 0xF4	; 244
    70e0:	7f 4f       	sbci	r23, 0xFF	; 255
    70e2:	84 5d       	subi	r24, 0xD4	; 212
    70e4:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <_Z16si5351_read_bulkhPhh>
    70e8:	81 11       	cpse	r24, r1
    70ea:	49 c0       	rjmp	.+146    	; 0x717e <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xdc>
		{
			return(true);
		}
		
		reg_val = data[0];
    70ec:	8c 85       	ldd	r24, Y+12	; 0x0c

		reg_val &= 0xFC;    /*~(0x03); */
    70ee:	98 2f       	mov	r25, r24
    70f0:	9c 7f       	andi	r25, 0xFC	; 252
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    70f2:	88 89       	ldd	r24, Y+16	; 0x10
    70f4:	83 70       	andi	r24, 0x03	; 3
    70f6:	89 2b       	or	r24, r25
    70f8:	8b 83       	std	Y+3, r24	; 0x03

		/* Registers 45-46 for CLK0 */
		params[i++] = ms_reg.reg.p1_1;
    70fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    70fc:	8c 83       	std	Y+4, r24	; 0x04
		params[i++] = ms_reg.reg.p1_0;
    70fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    7100:	8d 83       	std	Y+5, r24	; 0x05

		/* Register 47 for CLK0 */
		params[i] = (ms_reg.reg.p3_2 << 4);
    7102:	98 8d       	ldd	r25, Y+24	; 0x18
		params[i++] += (ms_reg.reg.p2_2 & 0x0F);
    7104:	8c 89       	ldd	r24, Y+20	; 0x14
    7106:	8f 70       	andi	r24, 0x0F	; 15
    7108:	20 e1       	ldi	r18, 0x10	; 16
    710a:	92 9f       	mul	r25, r18
    710c:	80 0d       	add	r24, r0
    710e:	11 24       	eor	r1, r1
    7110:	8e 83       	std	Y+6, r24	; 0x06

		/* Registers 48-49 for CLK0 */
		params[i++] = ms_reg.reg.p2_1;
    7112:	8b 89       	ldd	r24, Y+19	; 0x13
    7114:	8f 83       	std	Y+7, r24	; 0x07
		params[i++] = ms_reg.reg.p2_0;
    7116:	8a 89       	ldd	r24, Y+18	; 0x12
    7118:	88 87       	std	Y+8, r24	; 0x08

		/* Write the parameters */
		switch(clk)
    711a:	81 e0       	ldi	r24, 0x01	; 1
    711c:	f8 16       	cp	r15, r24
    711e:	81 f0       	breq	.+32     	; 0x7140 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0x9e>
    7120:	f8 16       	cp	r15, r24
    7122:	20 f0       	brcs	.+8      	; 0x712c <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0x8a>
    7124:	22 e0       	ldi	r18, 0x02	; 2
    7126:	f2 16       	cp	r15, r18
    7128:	a9 f0       	breq	.+42     	; 0x7154 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xb2>
    712a:	1d c0       	rjmp	.+58     	; 0x7166 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xc4>
		{
			case SI5351_CLK0:
			{
				if(si5351_write_bulk(SI5351_CLK0_PARAMETERS, params, i))
    712c:	48 e0       	ldi	r20, 0x08	; 8
    712e:	be 01       	movw	r22, r28
    7130:	6f 5f       	subi	r22, 0xFF	; 255
    7132:	7f 4f       	sbci	r23, 0xFF	; 255
    7134:	8a e2       	ldi	r24, 0x2A	; 42
    7136:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    713a:	88 23       	and	r24, r24
    713c:	a1 f0       	breq	.+40     	; 0x7166 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xc4>
    713e:	21 c0       	rjmp	.+66     	; 0x7182 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xe0>
			}
			break;

			case SI5351_CLK1:
			{
				if(si5351_write_bulk(SI5351_CLK1_PARAMETERS, params, i))
    7140:	48 e0       	ldi	r20, 0x08	; 8
    7142:	be 01       	movw	r22, r28
    7144:	6f 5f       	subi	r22, 0xFF	; 255
    7146:	7f 4f       	sbci	r23, 0xFF	; 255
    7148:	82 e3       	ldi	r24, 0x32	; 50
    714a:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    714e:	88 23       	and	r24, r24
    7150:	51 f0       	breq	.+20     	; 0x7166 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xc4>
    7152:	19 c0       	rjmp	.+50     	; 0x7186 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xe4>
			}
			break;

			case SI5351_CLK2:
			{
				if(si5351_write_bulk(SI5351_CLK2_PARAMETERS, params, i))
    7154:	48 e0       	ldi	r20, 0x08	; 8
    7156:	be 01       	movw	r22, r28
    7158:	6f 5f       	subi	r22, 0xFF	; 255
    715a:	7f 4f       	sbci	r23, 0xFF	; 255
    715c:	8a e3       	ldi	r24, 0x3A	; 58
    715e:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    7162:	81 11       	cpse	r24, r1
    7164:	12 c0       	rjmp	.+36     	; 0x718a <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xe8>
			{
			}
			break;
		}

		if(set_integer_mode(clk, int_mode))
    7166:	6a 2d       	mov	r22, r10
    7168:	8f 2d       	mov	r24, r15
    716a:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <_Z16set_integer_mode12si5351_clockh>
    716e:	81 11       	cpse	r24, r1
    7170:	0d c0       	rjmp	.+26     	; 0x718c <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xea>
		{
			return(true);
		}
		
		if(ms_div(clk, r_div, div_by_4))
    7172:	4e a1       	ldd	r20, Y+38	; 0x26
    7174:	68 2d       	mov	r22, r8
    7176:	8f 2d       	mov	r24, r15
    7178:	0e 94 07 38 	call	0x700e	; 0x700e <_Z6ms_div12si5351_clockhh>
    717c:	07 c0       	rjmp	.+14     	; 0x718c <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xea>
		params[i++] = ms_reg.reg.p3_0;

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read_bulk((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), data, 1))
		{
			return(true);
    717e:	81 e0       	ldi	r24, 0x01	; 1
    7180:	05 c0       	rjmp	.+10     	; 0x718c <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xea>
		{
			case SI5351_CLK0:
			{
				if(si5351_write_bulk(SI5351_CLK0_PARAMETERS, params, i))
				{
					return(true);
    7182:	81 e0       	ldi	r24, 0x01	; 1
    7184:	03 c0       	rjmp	.+6      	; 0x718c <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xea>

			case SI5351_CLK1:
			{
				if(si5351_write_bulk(SI5351_CLK1_PARAMETERS, params, i))
				{
					return(true);
    7186:	81 e0       	ldi	r24, 0x01	; 1
    7188:	01 c0       	rjmp	.+2      	; 0x718c <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh+0xea>

			case SI5351_CLK2:
			{
				if(si5351_write_bulk(SI5351_CLK2_PARAMETERS, params, i))
				{
					return(true);
    718a:	81 e0       	ldi	r24, 0x01	; 1
		{
			return(true);
		}
		
		return(false);
	}
    718c:	69 96       	adiw	r28, 0x19	; 25
    718e:	cd bf       	out	0x3d, r28	; 61
    7190:	de bf       	out	0x3e, r29	; 62
    7192:	df 91       	pop	r29
    7194:	cf 91       	pop	r28
    7196:	1f 91       	pop	r17
    7198:	0f 91       	pop	r16
    719a:	ff 90       	pop	r15
    719c:	ef 90       	pop	r14
    719e:	df 90       	pop	r13
    71a0:	cf 90       	pop	r12
    71a2:	af 90       	pop	r10
    71a4:	8f 90       	pop	r8
    71a6:	08 95       	ret

000071a8 <si5351_set_freq>:
 *
 * Returns TRUE on failure
 *
 */
	BOOL si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, BOOL clocksOff)
	{
    71a8:	2f 92       	push	r2
    71aa:	3f 92       	push	r3
    71ac:	4f 92       	push	r4
    71ae:	5f 92       	push	r5
    71b0:	6f 92       	push	r6
    71b2:	7f 92       	push	r7
    71b4:	8f 92       	push	r8
    71b6:	9f 92       	push	r9
    71b8:	af 92       	push	r10
    71ba:	bf 92       	push	r11
    71bc:	cf 92       	push	r12
    71be:	df 92       	push	r13
    71c0:	ef 92       	push	r14
    71c2:	ff 92       	push	r15
    71c4:	0f 93       	push	r16
    71c6:	1f 93       	push	r17
    71c8:	cf 93       	push	r28
    71ca:	df 93       	push	r29
    71cc:	cd b7       	in	r28, 0x3d	; 61
    71ce:	de b7       	in	r29, 0x3e	; 62
    71d0:	60 97       	sbiw	r28, 0x10	; 16
    71d2:	cd bf       	out	0x3d, r28	; 61
    71d4:	de bf       	out	0x3e, r29	; 62
    71d6:	6b 01       	movw	r12, r22
    71d8:	7c 01       	movw	r14, r24
    71da:	b4 2e       	mov	r11, r20
    71dc:	92 2e       	mov	r9, r18
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
		Si5351_pll target_pll;
		uint8_t clock_ctrl_addr;
		uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
		BOOL int_mode = FALSE;
    71de:	1d 86       	std	Y+13, r1	; 0x0d
		BOOL div_by_4 = FALSE;
    71e0:	1e 86       	std	Y+14, r1	; 0x0e
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    71e2:	80 91 3f 48 	lds	r24, 0x483F	; 0x80483f <g_si5351_initialized>
    71e6:	88 23       	and	r24, r24
    71e8:	09 f4       	brne	.+2      	; 0x71ec <si5351_set_freq+0x44>
    71ea:	1e c1       	rjmp	.+572    	; 0x7428 <si5351_set_freq+0x280>
#endif

#ifdef PREVENT_UNACHIEVABLE_FREQUENCIES
			/* Prevent unachievable frequencies from being entered. The Si5351 will accept these, but some may result */
			/* in no clock output. */
			if(freq_Fout > 999999)
    71ec:	80 e4       	ldi	r24, 0x40	; 64
    71ee:	c8 16       	cp	r12, r24
    71f0:	82 e4       	ldi	r24, 0x42	; 66
    71f2:	d8 06       	cpc	r13, r24
    71f4:	8f e0       	ldi	r24, 0x0F	; 15
    71f6:	e8 06       	cpc	r14, r24
    71f8:	f1 04       	cpc	r15, r1
    71fa:	70 f0       	brcs	.+28     	; 0x7218 <si5351_set_freq+0x70>
			{
				freq_Fout /= 100;
    71fc:	c7 01       	movw	r24, r14
    71fe:	b6 01       	movw	r22, r12
    7200:	24 e6       	ldi	r18, 0x64	; 100
    7202:	30 e0       	ldi	r19, 0x00	; 0
    7204:	40 e0       	ldi	r20, 0x00	; 0
    7206:	50 e0       	ldi	r21, 0x00	; 0
    7208:	0e 94 09 40 	call	0x8012	; 0x8012 <__udivmodsi4>
				freq_Fout *= 100;
    720c:	a4 e6       	ldi	r26, 0x64	; 100
    720e:	b0 e0       	ldi	r27, 0x00	; 0
    7210:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__muluhisi3>
    7214:	6b 01       	movw	r12, r22
    7216:	7c 01       	movw	r14, r24
		/* Determine which PLL to use: CLK0 gets PLLA, CLK1 and CLK2 get PLLB */
		/* The first of CLK1 or CLK2 to be configured, determines the VCO frequency used for PLLB. */
		/* The second of CLK1 or CLK2 to be configured will attempt to achieve Fout by adjusting the */
		/* Multisynth Divider values only. */
		/* Only good for Si5351A3 variant */
		switch(clk)
    7218:	81 e0       	ldi	r24, 0x01	; 1
    721a:	b8 16       	cp	r11, r24
    721c:	c9 f0       	breq	.+50     	; 0x7250 <si5351_set_freq+0xa8>
    721e:	b8 16       	cp	r11, r24
    7220:	20 f0       	brcs	.+8      	; 0x722a <si5351_set_freq+0x82>
    7222:	82 e0       	ldi	r24, 0x02	; 2
    7224:	b8 16       	cp	r11, r24
    7226:	a9 f1       	breq	.+106    	; 0x7292 <si5351_set_freq+0xea>
    7228:	01 c1       	rjmp	.+514    	; 0x742c <si5351_set_freq+0x284>
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
    722a:	80 91 4c 48 	lds	r24, 0x484C	; 0x80484c <_ZL17enabledClocksMask>
    722e:	81 60       	ori	r24, 0x01	; 1
    7230:	80 93 4c 48 	sts	0x484C, r24	; 0x80484c <_ZL17enabledClocksMask>
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
    7234:	c0 92 40 48 	sts	0x4840, r12	; 0x804840 <_ZL9clock_out>
    7238:	d0 92 41 48 	sts	0x4841, r13	; 0x804841 <_ZL9clock_out+0x1>
    723c:	e0 92 42 48 	sts	0x4842, r14	; 0x804842 <_ZL9clock_out+0x2>
    7240:	f0 92 43 48 	sts	0x4843, r15	; 0x804843 <_ZL9clock_out+0x3>
		switch(clk)
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
				clock_ctrl_addr = 16;
    7244:	68 94       	set
    7246:	33 24       	eor	r3, r3
    7248:	34 f8       	bld	r3, 4
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
// 				data[0] = ~enabledClocksMask | 0xF9;
/*			si5351_write_bulk(0x03, data, 1); // only disable CLK0 */

				target_pll = SI5351_PLLA;
    724a:	22 24       	eor	r2, r2
    724c:	23 94       	inc	r2
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
			}
			break;
    724e:	41 c0       	rjmp	.+130    	; 0x72d2 <si5351_set_freq+0x12a>
			case SI5351_CLK1:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
    7250:	80 91 4c 48 	lds	r24, 0x484C	; 0x80484c <_ZL17enabledClocksMask>
    7254:	82 60       	ori	r24, 0x02	; 2
    7256:	80 93 4c 48 	sts	0x484C, r24	; 0x80484c <_ZL17enabledClocksMask>
				clock_ctrl_addr = 17;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFA;
    725a:	80 95       	com	r24
    725c:	8a 6f       	ori	r24, 0xFA	; 250
    725e:	8f 87       	std	Y+15, r24	; 0x0f
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    7260:	41 e0       	ldi	r20, 0x01	; 1
    7262:	be 01       	movw	r22, r28
    7264:	61 5f       	subi	r22, 0xF1	; 241
    7266:	7f 4f       	sbci	r23, 0xFF	; 255
    7268:	83 e0       	ldi	r24, 0x03	; 3
    726a:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    726e:	81 11       	cpse	r24, r1
    7270:	df c0       	rjmp	.+446    	; 0x7430 <si5351_set_freq+0x288>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
    7272:	c0 92 44 48 	sts	0x4844, r12	; 0x804844 <_ZL9clock_out+0x4>
    7276:	d0 92 45 48 	sts	0x4845, r13	; 0x804845 <_ZL9clock_out+0x5>
    727a:	e0 92 46 48 	sts	0x4846, r14	; 0x804846 <_ZL9clock_out+0x6>
    727e:	f0 92 47 48 	sts	0x4847, r15	; 0x804847 <_ZL9clock_out+0x7>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
				clock_ctrl_addr = 17;
    7282:	0f 2e       	mov	r0, r31
    7284:	f1 e1       	ldi	r31, 0x11	; 17
    7286:	3f 2e       	mov	r3, r31
    7288:	f0 2d       	mov	r31, r0
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
    728a:	68 94       	set
    728c:	22 24       	eor	r2, r2
    728e:	21 f8       	bld	r2, 1
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
			}
			break;
    7290:	20 c0       	rjmp	.+64     	; 0x72d2 <si5351_set_freq+0x12a>
			case SI5351_CLK2:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
    7292:	80 91 4c 48 	lds	r24, 0x484C	; 0x80484c <_ZL17enabledClocksMask>
    7296:	84 60       	ori	r24, 0x04	; 4
    7298:	80 93 4c 48 	sts	0x484C, r24	; 0x80484c <_ZL17enabledClocksMask>
				clock_ctrl_addr = 18;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFC; /* only disable CLK2 */
    729c:	80 95       	com	r24
    729e:	8c 6f       	ori	r24, 0xFC	; 252
    72a0:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
    72a2:	41 e0       	ldi	r20, 0x01	; 1
    72a4:	be 01       	movw	r22, r28
    72a6:	61 5f       	subi	r22, 0xF1	; 241
    72a8:	7f 4f       	sbci	r23, 0xFF	; 255
    72aa:	83 e0       	ldi	r24, 0x03	; 3
    72ac:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    72b0:	81 11       	cpse	r24, r1
    72b2:	c0 c0       	rjmp	.+384    	; 0x7434 <si5351_set_freq+0x28c>
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
    72b4:	c0 92 48 48 	sts	0x4848, r12	; 0x804848 <_ZL9clock_out+0x8>
    72b8:	d0 92 49 48 	sts	0x4849, r13	; 0x804849 <_ZL9clock_out+0x9>
    72bc:	e0 92 4a 48 	sts	0x484A, r14	; 0x80484a <_ZL9clock_out+0xa>
    72c0:	f0 92 4b 48 	sts	0x484B, r15	; 0x80484b <_ZL9clock_out+0xb>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
				clock_ctrl_addr = 18;
    72c4:	0f 2e       	mov	r0, r31
    72c6:	f2 e1       	ldi	r31, 0x12	; 18
    72c8:	3f 2e       	mov	r3, r31
    72ca:	f0 2d       	mov	r31, r0
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
				} 

				target_pll = SI5351_PLLB;
    72cc:	68 94       	set
    72ce:	22 24       	eor	r2, r2
    72d0:	21 f8       	bld	r2, 1
			Frequency_Hz freq_VCO_calc;
			Frequency_Hz fout_calc;
			int32_t f_err;
#endif

		if((target_pll == SI5351_PLLA) || !freqVCOB)
    72d2:	81 e0       	ldi	r24, 0x01	; 1
    72d4:	28 16       	cp	r2, r24
    72d6:	61 f0       	breq	.+24     	; 0x72f0 <si5351_set_freq+0x148>
    72d8:	80 91 4d 48 	lds	r24, 0x484D	; 0x80484d <_ZL8freqVCOB>
    72dc:	90 91 4e 48 	lds	r25, 0x484E	; 0x80484e <_ZL8freqVCOB+0x1>
    72e0:	a0 91 4f 48 	lds	r26, 0x484F	; 0x80484f <_ZL8freqVCOB+0x2>
    72e4:	b0 91 50 48 	lds	r27, 0x4850	; 0x804850 <_ZL8freqVCOB+0x3>
    72e8:	89 2b       	or	r24, r25
    72ea:	8a 2b       	or	r24, r26
    72ec:	8b 2b       	or	r24, r27
    72ee:	81 f4       	brne	.+32     	; 0x7310 <si5351_set_freq+0x168>
		{
#ifdef DEBUGGING_ONLY
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4, &div);
#else
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    72f0:	8e 01       	movw	r16, r28
    72f2:	02 5f       	subi	r16, 0xF2	; 242
    72f4:	1f 4f       	sbci	r17, 0xFF	; 255
    72f6:	9e 01       	movw	r18, r28
    72f8:	23 5f       	subi	r18, 0xF3	; 243
    72fa:	3f 4f       	sbci	r19, 0xFF	; 255
    72fc:	ae 01       	movw	r20, r28
    72fe:	4f 5f       	subi	r20, 0xFF	; 255
    7300:	5f 4f       	sbci	r21, 0xFF	; 255
    7302:	c7 01       	movw	r24, r14
    7304:	b6 01       	movw	r22, r12
    7306:	0e 94 17 34 	call	0x682e	; 0x682e <_Z15multisynth_calcmP13u_si5351_regsPhS1_>
    730a:	2b 01       	movw	r4, r22
    730c:	3c 01       	movw	r6, r24
    730e:	10 c0       	rjmp	.+32     	; 0x7330 <si5351_set_freq+0x188>
		else
		{
#ifdef DEBUGGING_ONLY
				fout_calc = freq_Fout;  /* save the intended output frequency */
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    7310:	8e 01       	movw	r16, r28
    7312:	02 5f       	subi	r16, 0xF2	; 242
    7314:	1f 4f       	sbci	r17, 0xFF	; 255
    7316:	9e 01       	movw	r18, r28
    7318:	23 5f       	subi	r18, 0xF3	; 243
    731a:	3f 4f       	sbci	r19, 0xFF	; 255
    731c:	ae 01       	movw	r20, r28
    731e:	4f 5f       	subi	r20, 0xFF	; 255
    7320:	5f 4f       	sbci	r21, 0xFF	; 255
    7322:	c7 01       	movw	r24, r14
    7324:	b6 01       	movw	r22, r12
    7326:	0e 94 e9 34 	call	0x69d2	; 0x69d2 <_Z19multisynth_estimatemP13u_si5351_regsPhS1_>
 *
 */
	BOOL si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, BOOL clocksOff)
	{
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
    732a:	41 2c       	mov	r4, r1
    732c:	51 2c       	mov	r5, r1
    732e:	32 01       	movw	r6, r4
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
		}

		/* Set multisynth registers (MS must be set before PLL) */
		if(set_multisynth_registers_source(clk, target_pll))
    7330:	62 2d       	mov	r22, r2
    7332:	8b 2d       	mov	r24, r11
    7334:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <_Z31set_multisynth_registers_source12si5351_clock10si5351_pll>
    7338:	81 11       	cpse	r24, r1
    733a:	7e c0       	rjmp	.+252    	; 0x7438 <si5351_set_freq+0x290>
		{
			return(true);
		}
		
		if(set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4))
    733c:	8e 85       	ldd	r24, Y+14	; 0x0e
    733e:	ad 84       	ldd	r10, Y+13	; 0x0d
    7340:	8f 93       	push	r24
    7342:	81 2c       	mov	r8, r1
    7344:	c9 80       	ldd	r12, Y+1	; 0x01
    7346:	da 80       	ldd	r13, Y+2	; 0x02
    7348:	eb 80       	ldd	r14, Y+3	; 0x03
    734a:	fc 80       	ldd	r15, Y+4	; 0x04
    734c:	0d 81       	ldd	r16, Y+5	; 0x05
    734e:	1e 81       	ldd	r17, Y+6	; 0x06
    7350:	2f 81       	ldd	r18, Y+7	; 0x07
    7352:	38 85       	ldd	r19, Y+8	; 0x08
    7354:	49 85       	ldd	r20, Y+9	; 0x09
    7356:	5a 85       	ldd	r21, Y+10	; 0x0a
    7358:	6b 85       	ldd	r22, Y+11	; 0x0b
    735a:	7c 85       	ldd	r23, Y+12	; 0x0c
    735c:	8b 2d       	mov	r24, r11
    735e:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_Z24set_multisynth_registers12si5351_clock13u_si5351_regshhh>
    7362:	0f 90       	pop	r0
    7364:	81 11       	cpse	r24, r1
    7366:	6a c0       	rjmp	.+212    	; 0x743c <si5351_set_freq+0x294>
				fout_calc = freq_VCO_calc / div;
			}

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
    7368:	41 14       	cp	r4, r1
    736a:	51 04       	cpc	r5, r1
    736c:	61 04       	cpc	r6, r1
    736e:	71 04       	cpc	r7, r1
    7370:	29 f0       	breq	.+10     	; 0x737c <si5351_set_freq+0x1d4>
			{
				set_pll(freq_VCO, target_pll);
    7372:	42 2d       	mov	r20, r2
    7374:	c3 01       	movw	r24, r6
    7376:	b2 01       	movw	r22, r4
    7378:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <_Z7set_pllm10si5351_pll>
/*	pll_reset(target_pll); */

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		if(clocksOff)
    737c:	99 20       	and	r9, r9
    737e:	69 f0       	breq	.+26     	; 0x739a <si5351_set_freq+0x1f2>
		{
 			data[0] = enabledClocksMask;
    7380:	80 91 4c 48 	lds	r24, 0x484C	; 0x80484c <_ZL17enabledClocksMask>
    7384:	8f 87       	std	Y+15, r24	; 0x0f
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
    7386:	41 e0       	ldi	r20, 0x01	; 1
    7388:	be 01       	movw	r22, r28
    738a:	61 5f       	subi	r22, 0xF1	; 241
    738c:	7f 4f       	sbci	r23, 0xFF	; 255
    738e:	83 e0       	ldi	r24, 0x03	; 3
    7390:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    7394:	88 23       	and	r24, r24
    7396:	71 f0       	breq	.+28     	; 0x73b4 <si5351_set_freq+0x20c>
    7398:	53 c0       	rjmp	.+166    	; 0x7440 <si5351_set_freq+0x298>
				return true;
			} 
		}
		else
		{
 			data[0] = ~enabledClocksMask;
    739a:	80 91 4c 48 	lds	r24, 0x484C	; 0x80484c <_ZL17enabledClocksMask>
    739e:	80 95       	com	r24
    73a0:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
    73a2:	41 e0       	ldi	r20, 0x01	; 1
    73a4:	be 01       	movw	r22, r28
    73a6:	61 5f       	subi	r22, 0xF1	; 241
    73a8:	7f 4f       	sbci	r23, 0xFF	; 255
    73aa:	83 e0       	ldi	r24, 0x03	; 3
    73ac:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    73b0:	81 11       	cpse	r24, r1
    73b2:	48 c0       	rjmp	.+144    	; 0x7444 <si5351_set_freq+0x29c>
				return true;
			} 
		}

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
    73b4:	81 e0       	ldi	r24, 0x01	; 1
    73b6:	28 12       	cpse	r2, r24
    73b8:	0e c0       	rjmp	.+28     	; 0x73d6 <si5351_set_freq+0x22e>
		{
 			data[0] = 0x4C;
    73ba:	8c e4       	ldi	r24, 0x4C	; 76
    73bc:	8f 87       	std	Y+15, r24	; 0x0f
 			if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    73be:	41 e0       	ldi	r20, 0x01	; 1
    73c0:	be 01       	movw	r22, r28
    73c2:	61 5f       	subi	r22, 0xF1	; 241
    73c4:	7f 4f       	sbci	r23, 0xFF	; 255
    73c6:	83 2d       	mov	r24, r3
    73c8:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    73cc:	88 23       	and	r24, r24
    73ce:	09 f4       	brne	.+2      	; 0x73d2 <si5351_set_freq+0x22a>
    73d0:	40 c0       	rjmp	.+128    	; 0x7452 <si5351_set_freq+0x2aa>
			{
				return true;
    73d2:	81 e0       	ldi	r24, 0x01	; 1
    73d4:	3e c0       	rjmp	.+124    	; 0x7452 <si5351_set_freq+0x2aa>
			/*   o Integer mode set */
			/*   o Clock powered up */
		}
		else
		{
			if(int_mode)
    73d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    73d8:	88 23       	and	r24, r24
    73da:	61 f0       	breq	.+24     	; 0x73f4 <si5351_set_freq+0x24c>
			{
 				data[0] = 0x6C;
    73dc:	8c e6       	ldi	r24, 0x6C	; 108
    73de:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    73e0:	41 e0       	ldi	r20, 0x01	; 1
    73e2:	be 01       	movw	r22, r28
    73e4:	61 5f       	subi	r22, 0xF1	; 241
    73e6:	7f 4f       	sbci	r23, 0xFF	; 255
    73e8:	83 2d       	mov	r24, r3
    73ea:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    73ee:	88 23       	and	r24, r24
    73f0:	61 f0       	breq	.+24     	; 0x740a <si5351_set_freq+0x262>
    73f2:	2a c0       	rjmp	.+84     	; 0x7448 <si5351_set_freq+0x2a0>
				/*   o Integer mode set */
				/*   o Clock powered up */
			}
			else
			{
 				data[0] = 0x2C;
    73f4:	8c e2       	ldi	r24, 0x2C	; 44
    73f6:	8f 87       	std	Y+15, r24	; 0x0f
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
    73f8:	41 e0       	ldi	r20, 0x01	; 1
    73fa:	be 01       	movw	r22, r28
    73fc:	61 5f       	subi	r22, 0xF1	; 241
    73fe:	7f 4f       	sbci	r23, 0xFF	; 255
    7400:	83 2d       	mov	r24, r3
    7402:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_Z17si5351_write_bulkhPhh>
    7406:	81 11       	cpse	r24, r1
    7408:	21 c0       	rjmp	.+66     	; 0x744c <si5351_set_freq+0x2a4>
				/*   o PLLB is multisynth source */
				/*   o Integer mode cleared */
				/*   o Clock powered up */
			}

			if(freq_VCO)
    740a:	41 14       	cp	r4, r1
    740c:	51 04       	cpc	r5, r1
    740e:	61 04       	cpc	r6, r1
    7410:	71 04       	cpc	r7, r1
    7412:	f1 f0       	breq	.+60     	; 0x7450 <si5351_set_freq+0x2a8>
			{
				freqVCOB = freq_VCO;
    7414:	40 92 4d 48 	sts	0x484D, r4	; 0x80484d <_ZL8freqVCOB>
    7418:	50 92 4e 48 	sts	0x484E, r5	; 0x80484e <_ZL8freqVCOB+0x1>
    741c:	60 92 4f 48 	sts	0x484F, r6	; 0x80484f <_ZL8freqVCOB+0x2>
    7420:	70 92 50 48 	sts	0x4850, r7	; 0x804850 <_ZL8freqVCOB+0x3>
			}
		}

		return(FALSE);
    7424:	80 e0       	ldi	r24, 0x00	; 0
    7426:	15 c0       	rjmp	.+42     	; 0x7452 <si5351_set_freq+0x2aa>
		uint8_t data[2];

#ifdef DEBUGGING_ONLY
			uint32_t div = 0;
#endif
		if(!g_si5351_initialized) return(true);
    7428:	81 e0       	ldi	r24, 0x01	; 1
    742a:	13 c0       	rjmp	.+38     	; 0x7452 <si5351_set_freq+0x2aa>
			}
			break;

			default:
			{
				return(TRUE);
    742c:	81 e0       	ldi	r24, 0x01	; 1
    742e:	11 c0       	rjmp	.+34     	; 0x7452 <si5351_set_freq+0x2aa>
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFA;
				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
    7430:	81 e0       	ldi	r24, 0x01	; 1
    7432:	0f c0       	rjmp	.+30     	; 0x7452 <si5351_set_freq+0x2aa>
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
 				data[0] = ~enabledClocksMask | 0xFC; /* only disable CLK2 */
 				if(si5351_write_bulk(0x03, data, 1)) /* only disable CLK1 */
				{
					return true;
    7434:	81 e0       	ldi	r24, 0x01	; 1
    7436:	0d c0       	rjmp	.+26     	; 0x7452 <si5351_set_freq+0x2aa>
		}

		/* Set multisynth registers (MS must be set before PLL) */
		if(set_multisynth_registers_source(clk, target_pll))
		{
			return(true);
    7438:	81 e0       	ldi	r24, 0x01	; 1
    743a:	0b c0       	rjmp	.+22     	; 0x7452 <si5351_set_freq+0x2aa>
		}
		
		if(set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4))
		{
			return(true);
    743c:	81 e0       	ldi	r24, 0x01	; 1
    743e:	09 c0       	rjmp	.+18     	; 0x7452 <si5351_set_freq+0x2aa>
		if(clocksOff)
		{
 			data[0] = enabledClocksMask;
			if(si5351_write_bulk(0x03, data, 1))    /* disable clock(s) in use */
			{
				return true;
    7440:	81 e0       	ldi	r24, 0x01	; 1
    7442:	07 c0       	rjmp	.+14     	; 0x7452 <si5351_set_freq+0x2aa>
		else
		{
 			data[0] = ~enabledClocksMask;
 			if(si5351_write_bulk(0x03, data, 1))  /* only enable clock(s) in use */
			{
				return true;
    7444:	81 e0       	ldi	r24, 0x01	; 1
    7446:	05 c0       	rjmp	.+10     	; 0x7452 <si5351_set_freq+0x2aa>
			if(int_mode)
			{
 				data[0] = 0x6C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    7448:	81 e0       	ldi	r24, 0x01	; 1
    744a:	03 c0       	rjmp	.+6      	; 0x7452 <si5351_set_freq+0x2aa>
			else
			{
 				data[0] = 0x2C;
 				if(si5351_write_bulk(clock_ctrl_addr, data, 1))  /* power up only clock being set, leaving that clock configured as follows: */
				{
					return true;
    744c:	81 e0       	ldi	r24, 0x01	; 1
    744e:	01 c0       	rjmp	.+2      	; 0x7452 <si5351_set_freq+0x2aa>
			{
				freqVCOB = freq_VCO;
			}
		}

		return(FALSE);
    7450:	80 e0       	ldi	r24, 0x00	; 0
	}
    7452:	60 96       	adiw	r28, 0x10	; 16
    7454:	cd bf       	out	0x3d, r28	; 61
    7456:	de bf       	out	0x3e, r29	; 62
    7458:	df 91       	pop	r29
    745a:	cf 91       	pop	r28
    745c:	1f 91       	pop	r17
    745e:	0f 91       	pop	r16
    7460:	ff 90       	pop	r15
    7462:	ef 90       	pop	r14
    7464:	df 90       	pop	r13
    7466:	cf 90       	pop	r12
    7468:	bf 90       	pop	r11
    746a:	af 90       	pop	r10
    746c:	9f 90       	pop	r9
    746e:	8f 90       	pop	r8
    7470:	7f 90       	pop	r7
    7472:	6f 90       	pop	r6
    7474:	5f 90       	pop	r5
    7476:	4f 90       	pop	r4
    7478:	3f 90       	pop	r3
    747a:	2f 90       	pop	r2
    747c:	08 95       	ret

0000747e <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    747e:	80 e0       	ldi	r24, 0x00	; 0
    7480:	08 95       	ret

00007482 <TIMERB_init>:
 * \return Initialization status.
 */
int8_t TIMERB_init()
{
TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    7482:	e0 e0       	ldi	r30, 0x00	; 0
    7484:	fb e0       	ldi	r31, 0x0B	; 11
    7486:	81 e0       	ldi	r24, 0x01	; 1
    7488:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB0.CCMP = 0x9C40;
    748a:	20 e4       	ldi	r18, 0x40	; 64
    748c:	3c e9       	ldi	r19, 0x9C	; 156
    748e:	24 87       	std	Z+12, r18	; 0x0c
    7490:	35 87       	std	Z+13, r19	; 0x0d

TCB0.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    7492:	93 e0       	ldi	r25, 0x03	; 3
    7494:	90 83       	st	Z, r25

TCB0.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    7496:	86 83       	std	Z+6, r24	; 0x06

/********************************************************************************/

TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    7498:	e0 e1       	ldi	r30, 0x10	; 16
    749a:	fb e0       	ldi	r31, 0x0B	; 11
    749c:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB1.CCMP = 0x5DC0;
    749e:	40 ec       	ldi	r20, 0xC0	; 192
    74a0:	5d e5       	ldi	r21, 0x5D	; 93
    74a2:	44 87       	std	Z+12, r20	; 0x0c
    74a4:	55 87       	std	Z+13, r21	; 0x0d

TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    74a6:	80 83       	st	Z, r24

TCB1.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    74a8:	86 83       	std	Z+6, r24	; 0x06


/********************************************************************************/

TCB3.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    74aa:	e0 e3       	ldi	r30, 0x30	; 48
    74ac:	fb e0       	ldi	r31, 0x0B	; 11
    74ae:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB3.CCMP = 0x9C40;
    74b0:	24 87       	std	Z+12, r18	; 0x0c
    74b2:	35 87       	std	Z+13, r19	; 0x0d

TCB3.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    74b4:	90 83       	st	Z, r25

TCB3.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    74b6:	86 83       	std	Z+6, r24	; 0x06

	return 0;
}
    74b8:	80 e0       	ldi	r24, 0x00	; 0
    74ba:	08 95       	ret

000074bc <util_delay_ms>:


bool util_delay_ms(uint32_t delayValue)
{
    74bc:	0f 93       	push	r16
    74be:	1f 93       	push	r17
	static uint32_t countdownValue=0;
	static bool counting = false;
	
	if(delayValue)
    74c0:	61 15       	cp	r22, r1
    74c2:	71 05       	cpc	r23, r1
    74c4:	81 05       	cpc	r24, r1
    74c6:	91 05       	cpc	r25, r1
    74c8:	09 f4       	brne	.+2      	; 0x74cc <util_delay_ms+0x10>
    74ca:	67 c0       	rjmp	.+206    	; 0x759a <util_delay_ms+0xde>
	{
		if(counting)
    74cc:	20 91 55 48 	lds	r18, 0x4855	; 0x804855 <_ZZ13util_delay_msE8counting>
    74d0:	22 23       	and	r18, r18
    74d2:	f1 f1       	breq	.+124    	; 0x7550 <util_delay_ms+0x94>
		{
			if(!g_ms_counter)
    74d4:	00 91 56 48 	lds	r16, 0x4856	; 0x804856 <_ZL12g_ms_counter>
    74d8:	10 91 57 48 	lds	r17, 0x4857	; 0x804857 <_ZL12g_ms_counter+0x1>
    74dc:	20 91 58 48 	lds	r18, 0x4858	; 0x804858 <_ZL12g_ms_counter+0x2>
    74e0:	30 91 59 48 	lds	r19, 0x4859	; 0x804859 <_ZL12g_ms_counter+0x3>
    74e4:	01 2b       	or	r16, r17
    74e6:	02 2b       	or	r16, r18
    74e8:	03 2b       	or	r16, r19
    74ea:	71 f4       	brne	.+28     	; 0x7508 <util_delay_ms+0x4c>
			{
				TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
				| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    74ec:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

				counting = false;
    74f0:	10 92 55 48 	sts	0x4855, r1	; 0x804855 <_ZZ13util_delay_msE8counting>
				countdownValue = 0;
    74f4:	10 92 51 48 	sts	0x4851, r1	; 0x804851 <_ZZ13util_delay_msE14countdownValue>
    74f8:	10 92 52 48 	sts	0x4852, r1	; 0x804852 <_ZZ13util_delay_msE14countdownValue+0x1>
    74fc:	10 92 53 48 	sts	0x4853, r1	; 0x804853 <_ZZ13util_delay_msE14countdownValue+0x2>
    7500:	10 92 54 48 	sts	0x4854, r1	; 0x804854 <_ZZ13util_delay_msE14countdownValue+0x3>
				return(false); /* time expired */
    7504:	80 e0       	ldi	r24, 0x00	; 0
    7506:	62 c0       	rjmp	.+196    	; 0x75cc <util_delay_ms+0x110>
			}
			else if(delayValue != countdownValue) /* countdown delay changed */
    7508:	00 91 51 48 	lds	r16, 0x4851	; 0x804851 <_ZZ13util_delay_msE14countdownValue>
    750c:	10 91 52 48 	lds	r17, 0x4852	; 0x804852 <_ZZ13util_delay_msE14countdownValue+0x1>
    7510:	20 91 53 48 	lds	r18, 0x4853	; 0x804853 <_ZZ13util_delay_msE14countdownValue+0x2>
    7514:	30 91 54 48 	lds	r19, 0x4854	; 0x804854 <_ZZ13util_delay_msE14countdownValue+0x3>
    7518:	60 17       	cp	r22, r16
    751a:	71 07       	cpc	r23, r17
    751c:	82 07       	cpc	r24, r18
    751e:	93 07       	cpc	r25, r19
    7520:	09 f4       	brne	.+2      	; 0x7524 <util_delay_ms+0x68>
    7522:	51 c0       	rjmp	.+162    	; 0x75c6 <util_delay_ms+0x10a>
			{
				TCB1.CNT = 0x0000;
    7524:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    7528:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
				countdownValue = delayValue;
    752c:	60 93 51 48 	sts	0x4851, r22	; 0x804851 <_ZZ13util_delay_msE14countdownValue>
    7530:	70 93 52 48 	sts	0x4852, r23	; 0x804852 <_ZZ13util_delay_msE14countdownValue+0x1>
    7534:	80 93 53 48 	sts	0x4853, r24	; 0x804853 <_ZZ13util_delay_msE14countdownValue+0x2>
    7538:	90 93 54 48 	sts	0x4854, r25	; 0x804854 <_ZZ13util_delay_msE14countdownValue+0x3>
				g_ms_counter = delayValue;
    753c:	60 93 56 48 	sts	0x4856, r22	; 0x804856 <_ZL12g_ms_counter>
    7540:	70 93 57 48 	sts	0x4857, r23	; 0x804857 <_ZL12g_ms_counter+0x1>
    7544:	80 93 58 48 	sts	0x4858, r24	; 0x804858 <_ZL12g_ms_counter+0x2>
    7548:	90 93 59 48 	sts	0x4859, r25	; 0x804859 <_ZL12g_ms_counter+0x3>
				return(false);
    754c:	80 e0       	ldi	r24, 0x00	; 0
    754e:	3e c0       	rjmp	.+124    	; 0x75cc <util_delay_ms+0x110>
			}
		}
		else if(delayValue != countdownValue)
    7550:	00 91 51 48 	lds	r16, 0x4851	; 0x804851 <_ZZ13util_delay_msE14countdownValue>
    7554:	10 91 52 48 	lds	r17, 0x4852	; 0x804852 <_ZZ13util_delay_msE14countdownValue+0x1>
    7558:	20 91 53 48 	lds	r18, 0x4853	; 0x804853 <_ZZ13util_delay_msE14countdownValue+0x2>
    755c:	30 91 54 48 	lds	r19, 0x4854	; 0x804854 <_ZZ13util_delay_msE14countdownValue+0x3>
    7560:	60 17       	cp	r22, r16
    7562:	71 07       	cpc	r23, r17
    7564:	82 07       	cpc	r24, r18
    7566:	93 07       	cpc	r25, r19
    7568:	71 f1       	breq	.+92     	; 0x75c6 <util_delay_ms+0x10a>
		{
			TCB1.CNT = 0x0000;
    756a:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    756e:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
			countdownValue = delayValue;
    7572:	60 93 51 48 	sts	0x4851, r22	; 0x804851 <_ZZ13util_delay_msE14countdownValue>
    7576:	70 93 52 48 	sts	0x4852, r23	; 0x804852 <_ZZ13util_delay_msE14countdownValue+0x1>
    757a:	80 93 53 48 	sts	0x4853, r24	; 0x804853 <_ZZ13util_delay_msE14countdownValue+0x2>
    757e:	90 93 54 48 	sts	0x4854, r25	; 0x804854 <_ZZ13util_delay_msE14countdownValue+0x3>
			g_ms_counter = delayValue;
    7582:	60 93 56 48 	sts	0x4856, r22	; 0x804856 <_ZL12g_ms_counter>
    7586:	70 93 57 48 	sts	0x4857, r23	; 0x804857 <_ZL12g_ms_counter+0x1>
    758a:	80 93 58 48 	sts	0x4858, r24	; 0x804858 <_ZL12g_ms_counter+0x2>
    758e:	90 93 59 48 	sts	0x4859, r25	; 0x804859 <_ZL12g_ms_counter+0x3>
			counting = true;
    7592:	81 e0       	ldi	r24, 0x01	; 1
    7594:	80 93 55 48 	sts	0x4855, r24	; 0x804855 <_ZZ13util_delay_msE8counting>
    7598:	16 c0       	rjmp	.+44     	; 0x75c6 <util_delay_ms+0x10a>
		}
	}
	else
	{
		TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
		| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    759a:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

		counting = false;
    759e:	10 92 55 48 	sts	0x4855, r1	; 0x804855 <_ZZ13util_delay_msE8counting>
		countdownValue = 0;
    75a2:	10 92 51 48 	sts	0x4851, r1	; 0x804851 <_ZZ13util_delay_msE14countdownValue>
    75a6:	10 92 52 48 	sts	0x4852, r1	; 0x804852 <_ZZ13util_delay_msE14countdownValue+0x1>
    75aa:	10 92 53 48 	sts	0x4853, r1	; 0x804853 <_ZZ13util_delay_msE14countdownValue+0x2>
    75ae:	10 92 54 48 	sts	0x4854, r1	; 0x804854 <_ZZ13util_delay_msE14countdownValue+0x3>
		g_ms_counter = 0;
    75b2:	10 92 56 48 	sts	0x4856, r1	; 0x804856 <_ZL12g_ms_counter>
    75b6:	10 92 57 48 	sts	0x4857, r1	; 0x804857 <_ZL12g_ms_counter+0x1>
    75ba:	10 92 58 48 	sts	0x4858, r1	; 0x804858 <_ZL12g_ms_counter+0x2>
    75be:	10 92 59 48 	sts	0x4859, r1	; 0x804859 <_ZL12g_ms_counter+0x3>
		return(false); /* timer reset */
    75c2:	80 e0       	ldi	r24, 0x00	; 0
    75c4:	03 c0       	rjmp	.+6      	; 0x75cc <util_delay_ms+0x110>
	}
	
	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
	| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    75c6:	81 e0       	ldi	r24, 0x01	; 1
    75c8:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
	
	return(true);
}
    75cc:	1f 91       	pop	r17
    75ce:	0f 91       	pop	r16
    75d0:	08 95       	ret

000075d2 <__vector_13>:

/**
One millisecond utility counter based on CPU clock.
*/
ISR(TCB1_INT_vect)
{
    75d2:	1f 92       	push	r1
    75d4:	0f 92       	push	r0
    75d6:	0f b6       	in	r0, 0x3f	; 63
    75d8:	0f 92       	push	r0
    75da:	11 24       	eor	r1, r1
    75dc:	8f 93       	push	r24
    75de:	9f 93       	push	r25
    75e0:	af 93       	push	r26
    75e2:	bf 93       	push	r27
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    75e4:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    75e8:	80 ff       	sbrs	r24, 0
    75ea:	1d c0       	rjmp	.+58     	; 0x7626 <__vector_13+0x54>
    {
		if(g_ms_counter) /* check for 1-second interval */
    75ec:	80 91 56 48 	lds	r24, 0x4856	; 0x804856 <_ZL12g_ms_counter>
    75f0:	90 91 57 48 	lds	r25, 0x4857	; 0x804857 <_ZL12g_ms_counter+0x1>
    75f4:	a0 91 58 48 	lds	r26, 0x4858	; 0x804858 <_ZL12g_ms_counter+0x2>
    75f8:	b0 91 59 48 	lds	r27, 0x4859	; 0x804859 <_ZL12g_ms_counter+0x3>
    75fc:	00 97       	sbiw	r24, 0x00	; 0
    75fe:	a1 05       	cpc	r26, r1
    7600:	b1 05       	cpc	r27, r1
    7602:	61 f0       	breq	.+24     	; 0x761c <__vector_13+0x4a>
		{
			g_ms_counter--;	
    7604:	01 97       	sbiw	r24, 0x01	; 1
    7606:	a1 09       	sbc	r26, r1
    7608:	b1 09       	sbc	r27, r1
    760a:	80 93 56 48 	sts	0x4856, r24	; 0x804856 <_ZL12g_ms_counter>
    760e:	90 93 57 48 	sts	0x4857, r25	; 0x804857 <_ZL12g_ms_counter+0x1>
    7612:	a0 93 58 48 	sts	0x4858, r26	; 0x804858 <_ZL12g_ms_counter+0x2>
    7616:	b0 93 59 48 	sts	0x4859, r27	; 0x804859 <_ZL12g_ms_counter+0x3>
    761a:	02 c0       	rjmp	.+4      	; 0x7620 <__vector_13+0x4e>
		}
		else
		{
			TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
			| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    761c:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
		}

        TCB1.INTFLAGS = TCB_CAPT_bm; /* clear interrupt flag */
    7620:	81 e0       	ldi	r24, 0x01	; 1
    7622:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    }
}
    7626:	bf 91       	pop	r27
    7628:	af 91       	pop	r26
    762a:	9f 91       	pop	r25
    762c:	8f 91       	pop	r24
    762e:	0f 90       	pop	r0
    7630:	0f be       	out	0x3f, r0	; 63
    7632:	0f 90       	pop	r0
    7634:	1f 90       	pop	r1
    7636:	18 95       	reti

00007638 <_Z14txSetFrequencyPmh>:
 *       This function sets the VFO frequency (CLK0 of the Si5351) based on the intended frequency passed in by the parameter (freq),
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	BOOL txSetFrequency(Frequency_Hz *freq, BOOL leaveClockOff)
	{
    7638:	0f 93       	push	r16
    763a:	1f 93       	push	r17
    763c:	cf 93       	push	r28
    763e:	df 93       	push	r29
    7640:	fc 01       	movw	r30, r24
    7642:	46 2f       	mov	r20, r22
		BOOL err = FALSE;

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
    7644:	60 81       	ld	r22, Z
    7646:	71 81       	ldd	r23, Z+1	; 0x01
    7648:	82 81       	ldd	r24, Z+2	; 0x02
    764a:	93 81       	ldd	r25, Z+3	; 0x03
    764c:	8b 01       	movw	r16, r22
    764e:	9c 01       	movw	r18, r24
    7650:	01 5e       	subi	r16, 0xE1	; 225
    7652:	17 46       	sbci	r17, 0x67	; 103
    7654:	25 43       	sbci	r18, 0x35	; 53
    7656:	31 09       	sbc	r19, r1
    7658:	0f 31       	cpi	r16, 0x1F	; 31
    765a:	11 4a       	sbci	r17, 0xA1	; 161
    765c:	27 40       	sbci	r18, 0x07	; 7
    765e:	31 05       	cpc	r19, r1
    7660:	a8 f4       	brcc	.+42     	; 0x768c <_Z14txSetFrequencyPmh+0x54>
    7662:	24 2f       	mov	r18, r20
    7664:	ef 01       	movw	r28, r30
		{
			if(si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff))
    7666:	41 e0       	ldi	r20, 0x01	; 1
    7668:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <si5351_set_freq>
    766c:	81 11       	cpse	r24, r1
    766e:	10 c0       	rjmp	.+32     	; 0x7690 <_Z14txSetFrequencyPmh+0x58>
			{
				err = true; 
			}
			else
			{
				g_80m_frequency = *freq;
    7670:	88 81       	ld	r24, Y
    7672:	99 81       	ldd	r25, Y+1	; 0x01
    7674:	aa 81       	ldd	r26, Y+2	; 0x02
    7676:	bb 81       	ldd	r27, Y+3	; 0x03
    7678:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <g_80m_frequency>
    767c:	90 93 2d 40 	sts	0x402D, r25	; 0x80402d <g_80m_frequency+0x1>
    7680:	a0 93 2e 40 	sts	0x402E, r26	; 0x80402e <g_80m_frequency+0x2>
    7684:	b0 93 2f 40 	sts	0x402F, r27	; 0x80402f <g_80m_frequency+0x3>
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended  frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the frequency.
 */
	BOOL txSetFrequency(Frequency_Hz *freq, BOOL leaveClockOff)
	{
		BOOL err = FALSE;
    7688:	80 e0       	ldi	r24, 0x00	; 0
    768a:	03 c0       	rjmp	.+6      	; 0x7692 <_Z14txSetFrequencyPmh+0x5a>
    768c:	80 e0       	ldi	r24, 0x00	; 0
    768e:	01 c0       	rjmp	.+2      	; 0x7692 <_Z14txSetFrequencyPmh+0x5a>

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
		{
			if(si5351_set_freq(*freq, TX_CLOCK_HF_0, leaveClockOff))
			{
				err = true; 
    7690:	81 e0       	ldi	r24, 0x01	; 1
				g_80m_frequency = *freq;
			}
		}

		return(err);
	}
    7692:	df 91       	pop	r29
    7694:	cf 91       	pop	r28
    7696:	1f 91       	pop	r17
    7698:	0f 91       	pop	r16
    769a:	08 95       	ret

0000769c <_Z14txGetFrequencyv>:

	Frequency_Hz txGetFrequency(void)
	{
		return( g_80m_frequency);
    769c:	60 91 2c 40 	lds	r22, 0x402C	; 0x80402c <g_80m_frequency>
    76a0:	70 91 2d 40 	lds	r23, 0x402D	; 0x80402d <g_80m_frequency+0x1>
    76a4:	80 91 2e 40 	lds	r24, 0x402E	; 0x80402e <g_80m_frequency+0x2>
    76a8:	90 91 2f 40 	lds	r25, 0x402F	; 0x80402f <g_80m_frequency+0x3>
	}
    76ac:	08 95       	ret

000076ae <_Z18powerToTransmitterh>:
		{
// 			PORTB &= ~(1 << PORTB1);  /* Turn off 80m band */
		}

		return(result);
	}
    76ae:	80 e0       	ldi	r24, 0x00	; 0
    76b0:	08 95       	ret

000076b2 <_Z14keyTransmitterh>:

	void keyTransmitter(BOOL on)
	{
		if(g_tx_initialized)
    76b2:	90 91 5a 48 	lds	r25, 0x485A	; 0x80485a <_ZL16g_tx_initialized>
    76b6:	99 23       	and	r25, r25
    76b8:	c1 f0       	breq	.+48     	; 0x76ea <_Z14keyTransmitterh+0x38>
		{			
			if(on)
    76ba:	88 23       	and	r24, r24
    76bc:	71 f0       	breq	.+28     	; 0x76da <_Z14keyTransmitterh+0x28>
			{
				if(!g_transmitter_keyed)
    76be:	80 91 5b 48 	lds	r24, 0x485B	; 0x80485b <_ZL19g_transmitter_keyed>
    76c2:	81 11       	cpse	r24, r1
    76c4:	12 c0       	rjmp	.+36     	; 0x76ea <_Z14keyTransmitterh+0x38>
				{
					if(si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_ENABLED) == ERROR_CODE_NO_ERROR)
    76c6:	61 e0       	ldi	r22, 0x01	; 1
    76c8:	81 e0       	ldi	r24, 0x01	; 1
    76ca:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <si5351_clock_enable>
    76ce:	81 11       	cpse	r24, r1
    76d0:	0c c0       	rjmp	.+24     	; 0x76ea <_Z14keyTransmitterh+0x38>
					{
						g_transmitter_keyed = TRUE;
    76d2:	81 e0       	ldi	r24, 0x01	; 1
    76d4:	80 93 5b 48 	sts	0x485B, r24	; 0x80485b <_ZL19g_transmitter_keyed>
    76d8:	08 95       	ret
					}
				}
			}
			else
			{
				if(si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED) == ERROR_CODE_NO_ERROR)
    76da:	60 e0       	ldi	r22, 0x00	; 0
    76dc:	81 e0       	ldi	r24, 0x01	; 1
    76de:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <si5351_clock_enable>
    76e2:	81 11       	cpse	r24, r1
    76e4:	02 c0       	rjmp	.+4      	; 0x76ea <_Z14keyTransmitterh+0x38>
				{
					g_transmitter_keyed = FALSE;
    76e6:	10 92 5b 48 	sts	0x485B, r1	; 0x80485b <_ZL19g_transmitter_keyed>
    76ea:	08 95       	ret

000076ec <_Z12txGetPowerMwv>:
		}
	}

	uint16_t txGetPowerMw(void)
	{
		return( g_80m_power_level_mW);
    76ec:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <g_80m_power_level_mW>
    76f0:	90 91 31 40 	lds	r25, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
	}
    76f4:	08 95       	ret

000076f6 <_Z15txSetParametersPjPh>:

	EC __attribute__((optimize("O0"))) txSetParameters(uint16_t* power_mW, BOOL* enableDriverPwr)
/*	EC txSetParameters(uint16_t* power_mW, BOOL* enableDriverPwr) */
	{
    76f6:	cf 93       	push	r28
    76f8:	df 93       	push	r29
    76fa:	cd b7       	in	r28, 0x3d	; 61
    76fc:	de b7       	in	r29, 0x3e	; 62
    76fe:	2b 97       	sbiw	r28, 0x0b	; 11
    7700:	cd bf       	out	0x3d, r28	; 61
    7702:	de bf       	out	0x3e, r29	; 62
    7704:	88 87       	std	Y+8, r24	; 0x08
    7706:	99 87       	std	Y+9, r25	; 0x09
    7708:	6a 87       	std	Y+10, r22	; 0x0a
    770a:	7b 87       	std	Y+11, r23	; 0x0b
		BOOL err = FALSE;
    770c:	19 82       	std	Y+1, r1	; 0x01
		EC code = ERROR_CODE_NO_ERROR;
    770e:	1a 82       	std	Y+2, r1	; 0x02
		uint16_t power = 0;
    7710:	1b 82       	std	Y+3, r1	; 0x03
    7712:	1c 82       	std	Y+4, r1	; 0x04

		if(power_mW)
    7714:	88 85       	ldd	r24, Y+8	; 0x08
    7716:	99 85       	ldd	r25, Y+9	; 0x09
    7718:	89 2b       	or	r24, r25
    771a:	39 f0       	breq	.+14     	; 0x772a <_Z15txSetParametersPjPh+0x34>
		{
			power = *power_mW;
    771c:	88 85       	ldd	r24, Y+8	; 0x08
    771e:	99 85       	ldd	r25, Y+9	; 0x09
    7720:	fc 01       	movw	r30, r24
    7722:	80 81       	ld	r24, Z
    7724:	91 81       	ldd	r25, Z+1	; 0x01
    7726:	8b 83       	std	Y+3, r24	; 0x03
    7728:	9c 83       	std	Y+4, r25	; 0x04
		}

		if(power_mW != NULL)
    772a:	88 85       	ldd	r24, Y+8	; 0x08
    772c:	99 85       	ldd	r25, Y+9	; 0x09
    772e:	89 2b       	or	r24, r25
    7730:	09 f4       	brne	.+2      	; 0x7734 <_Z15txSetParametersPjPh+0x3e>
    7732:	4e c0       	rjmp	.+156    	; 0x77d0 <_Z15txSetParametersPjPh+0xda>
		{
			if(power <= MAX_TX_POWER_80M_MW)
    7734:	8b 81       	ldd	r24, Y+3	; 0x03
    7736:	9c 81       	ldd	r25, Y+4	; 0x04
    7738:	89 38       	cpi	r24, 0x89	; 137
    773a:	93 41       	sbci	r25, 0x13	; 19
    773c:	08 f0       	brcs	.+2      	; 0x7740 <_Z15txSetParametersPjPh+0x4a>
    773e:	44 c0       	rjmp	.+136    	; 0x77c8 <_Z15txSetParametersPjPh+0xd2>
			{
				uint8_t drainVoltageDAC, modLevelHigh, modLevelLow;
				code = txMilliwattsToSettings(&power, &drainVoltageDAC, &modLevelHigh, &modLevelLow);
    7740:	9e 01       	movw	r18, r28
    7742:	29 5f       	subi	r18, 0xF9	; 249
    7744:	3f 4f       	sbci	r19, 0xFF	; 255
    7746:	ae 01       	movw	r20, r28
    7748:	4a 5f       	subi	r20, 0xFA	; 250
    774a:	5f 4f       	sbci	r21, 0xFF	; 255
    774c:	be 01       	movw	r22, r28
    774e:	6b 5f       	subi	r22, 0xFB	; 251
    7750:	7f 4f       	sbci	r23, 0xFF	; 255
    7752:	ce 01       	movw	r24, r28
    7754:	03 96       	adiw	r24, 0x03	; 3
    7756:	0e 94 33 3c 	call	0x7866	; 0x7866 <_Z22txMilliwattsToSettingsPjPhS0_S0_>
    775a:	8a 83       	std	Y+2, r24	; 0x02
				err = (code == ERROR_CODE_SW_LOGIC_ERROR);
    775c:	81 e0       	ldi	r24, 0x01	; 1
    775e:	9a 81       	ldd	r25, Y+2	; 0x02
    7760:	9f 3c       	cpi	r25, 0xCF	; 207
    7762:	09 f0       	breq	.+2      	; 0x7766 <_Z15txSetParametersPjPh+0x70>
    7764:	80 e0       	ldi	r24, 0x00	; 0
    7766:	89 83       	std	Y+1, r24	; 0x01

				g_tx_power_is_zero = (power == 0);
    7768:	8b 81       	ldd	r24, Y+3	; 0x03
    776a:	9c 81       	ldd	r25, Y+4	; 0x04
    776c:	21 e0       	ldi	r18, 0x01	; 1
    776e:	89 2b       	or	r24, r25
    7770:	09 f0       	breq	.+2      	; 0x7774 <_Z15txSetParametersPjPh+0x7e>
    7772:	20 e0       	ldi	r18, 0x00	; 0
    7774:	82 2f       	mov	r24, r18
    7776:	80 93 36 40 	sts	0x4036, r24	; 0x804036 <g_tx_power_is_zero>

				if(!err)
    777a:	89 81       	ldd	r24, Y+1	; 0x01
    777c:	88 23       	and	r24, r24
    777e:	e1 f4       	brne	.+56     	; 0x77b8 <_Z15txSetParametersPjPh+0xc2>
				{
					g_80m_power_level_mW = power;
    7780:	8b 81       	ldd	r24, Y+3	; 0x03
    7782:	9c 81       	ldd	r25, Y+4	; 0x04
    7784:	80 93 30 40 	sts	0x4030, r24	; 0x804030 <g_80m_power_level_mW>
    7788:	90 93 31 40 	sts	0x4031, r25	; 0x804031 <g_80m_power_level_mW+0x1>

					if(txIsAntennaForBand())
    778c:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <_Z18txIsAntennaForBandv>
    7790:	98 2f       	mov	r25, r24
    7792:	81 e0       	ldi	r24, 0x01	; 1
    7794:	99 23       	and	r25, r25
    7796:	09 f4       	brne	.+2      	; 0x779a <_Z15txSetParametersPjPh+0xa4>
    7798:	80 e0       	ldi	r24, 0x00	; 0
    779a:	88 23       	and	r24, r24
    779c:	39 f4       	brne	.+14     	; 0x77ac <_Z15txSetParametersPjPh+0xb6>
// 							code = ERROR_CODE_DAC1_NONRESPONSIVE;
// 						}
					}
					else
					{
						g_tx_power_is_zero = TRUE;
    779e:	81 e0       	ldi	r24, 0x01	; 1
    77a0:	80 93 36 40 	sts	0x4036, r24	; 0x804036 <g_tx_power_is_zero>
						err = TRUE;
    77a4:	81 e0       	ldi	r24, 0x01	; 1
    77a6:	89 83       	std	Y+1, r24	; 0x01
						code = ERROR_CODE_NO_ANTENNA_PREVENTS_POWER_SETTING;
    77a8:	86 ef       	ldi	r24, 0xF6	; 246
    77aa:	8a 83       	std	Y+2, r24	; 0x02
					}

					if(g_tx_power_is_zero || err || (drainVoltageDAC == 0))
    77ac:	80 91 36 40 	lds	r24, 0x4036	; 0x804036 <g_tx_power_is_zero>
    77b0:	88 23       	and	r24, r24
    77b2:	09 f4       	brne	.+2      	; 0x77b6 <_Z15txSetParametersPjPh+0xc0>
    77b4:	89 81       	ldd	r24, Y+1	; 0x01
    77b6:	00 00       	nop
					{
// 							PORTB |= (1 << PORTB6);     /* Turn on Tx power */
					}
				}

				*power_mW = power;
    77b8:	2b 81       	ldd	r18, Y+3	; 0x03
    77ba:	3c 81       	ldd	r19, Y+4	; 0x04
    77bc:	88 85       	ldd	r24, Y+8	; 0x08
    77be:	99 85       	ldd	r25, Y+9	; 0x09
    77c0:	fc 01       	movw	r30, r24
    77c2:	20 83       	st	Z, r18
    77c4:	31 83       	std	Z+1, r19	; 0x01
    77c6:	04 c0       	rjmp	.+8      	; 0x77d0 <_Z15txSetParametersPjPh+0xda>
			}
			else
			{
				err = TRUE;
    77c8:	81 e0       	ldi	r24, 0x01	; 1
    77ca:	89 83       	std	Y+1, r24	; 0x01
				code = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    77cc:	85 ef       	ldi	r24, 0xF5	; 245
    77ce:	8a 83       	std	Y+2, r24	; 0x02
			}
		}

		if(!err)
    77d0:	89 81       	ldd	r24, Y+1	; 0x01
			{
				powerToTransmitter(*enableDriverPwr);
			}
		}

		return(code);
    77d2:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    77d4:	2b 96       	adiw	r28, 0x0b	; 11
    77d6:	cd bf       	out	0x3d, r28	; 61
    77d8:	de bf       	out	0x3e, r29	; 62
    77da:	df 91       	pop	r29
    77dc:	cf 91       	pop	r28
    77de:	08 95       	ret

000077e0 <_Z16init_transmitterv>:


	EC init_transmitter(void)
	{
    77e0:	1f 93       	push	r17
    77e2:	cf 93       	push	r28
    77e4:	df 93       	push	r29
    77e6:	00 d0       	rcall	.+0      	; 0x77e8 <_Z16init_transmitterv+0x8>
    77e8:	cd b7       	in	r28, 0x3d	; 61
    77ea:	de b7       	in	r29, 0x3e	; 62
		EC code;

		if((code = (EC)si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)))
    77ec:	40 e0       	ldi	r20, 0x00	; 0
    77ee:	50 e0       	ldi	r21, 0x00	; 0
    77f0:	ba 01       	movw	r22, r20
    77f2:	80 e4       	ldi	r24, 0x40	; 64
    77f4:	0e 94 78 36 	call	0x6cf0	; 0x6cf0 <si5351_init>
    77f8:	81 11       	cpse	r24, r1
    77fa:	2f c0       	rjmp	.+94     	; 0x785a <_Z16init_transmitterv+0x7a>
		{
			return( code);
		}

		if((code = txSetParameters(NULL, NULL)))
    77fc:	60 e0       	ldi	r22, 0x00	; 0
    77fe:	70 e0       	ldi	r23, 0x00	; 0
    7800:	80 e0       	ldi	r24, 0x00	; 0
    7802:	90 e0       	ldi	r25, 0x00	; 0
    7804:	0e 94 7b 3b 	call	0x76f6	; 0x76f6 <_Z15txSetParametersPjPh>
    7808:	81 11       	cpse	r24, r1
    780a:	27 c0       	rjmp	.+78     	; 0x785a <_Z16init_transmitterv+0x7a>
		{
			return( code);
		}

		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
    780c:	63 e0       	ldi	r22, 0x03	; 3
    780e:	81 e0       	ldi	r24, 0x01	; 1
    7810:	0e 94 6c 37 	call	0x6ed8	; 0x6ed8 <si5351_drive_strength>
    7814:	81 11       	cpse	r24, r1
    7816:	21 c0       	rjmp	.+66     	; 0x785a <_Z16init_transmitterv+0x7a>
		{
			return( code);
		}
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    7818:	60 e0       	ldi	r22, 0x00	; 0
    781a:	81 e0       	ldi	r24, 0x01	; 1
    781c:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <si5351_clock_enable>
    7820:	18 2f       	mov	r17, r24
    7822:	81 11       	cpse	r24, r1
    7824:	18 c0       	rjmp	.+48     	; 0x7856 <_Z16init_transmitterv+0x76>
// 		if((code = si5351_clock_enable(TX_CLOCK_VHF_FM, SI5351_CLK_DISABLED)))
// 		{
// 			return( code);
// 		}

		uint16_t pwr_mW = g_80m_power_level_mW;
    7826:	80 91 30 40 	lds	r24, 0x4030	; 0x804030 <g_80m_power_level_mW>
    782a:	90 91 31 40 	lds	r25, 0x4031	; 0x804031 <g_80m_power_level_mW+0x1>
    782e:	89 83       	std	Y+1, r24	; 0x01
    7830:	9a 83       	std	Y+2, r25	; 0x02
		if(txSetFrequency((Frequency_Hz*)&g_80m_frequency, TRUE))
    7832:	61 e0       	ldi	r22, 0x01	; 1
    7834:	8c e2       	ldi	r24, 0x2C	; 44
    7836:	90 e4       	ldi	r25, 0x40	; 64
    7838:	0e 94 1c 3b 	call	0x7638	; 0x7638 <_Z14txSetFrequencyPmh>
    783c:	81 11       	cpse	r24, r1
    783e:	0c c0       	rjmp	.+24     	; 0x7858 <_Z16init_transmitterv+0x78>
		{
			code = ERROR_CODE_RF_OSCILLATOR_ERROR;
		}
		else
		{
			txSetParameters(&pwr_mW, NULL);
    7840:	60 e0       	ldi	r22, 0x00	; 0
    7842:	70 e0       	ldi	r23, 0x00	; 0
    7844:	ce 01       	movw	r24, r28
    7846:	01 96       	adiw	r24, 0x01	; 1
    7848:	0e 94 7b 3b 	call	0x76f6	; 0x76f6 <_Z15txSetParametersPjPh>
			g_tx_initialized = TRUE;
    784c:	81 e0       	ldi	r24, 0x01	; 1
    784e:	80 93 5a 48 	sts	0x485A, r24	; 0x80485a <_ZL16g_tx_initialized>

		if((code = si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA)))
		{
			return( code);
		}
		if((code = si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED)))
    7852:	81 2f       	mov	r24, r17
    7854:	02 c0       	rjmp	.+4      	; 0x785a <_Z16init_transmitterv+0x7a>
    7856:	01 c0       	rjmp	.+2      	; 0x785a <_Z16init_transmitterv+0x7a>
// 		}

		uint16_t pwr_mW = g_80m_power_level_mW;
		if(txSetFrequency((Frequency_Hz*)&g_80m_frequency, TRUE))
		{
			code = ERROR_CODE_RF_OSCILLATOR_ERROR;
    7858:	82 ed       	ldi	r24, 0xD2	; 210
			txSetParameters(&pwr_mW, NULL);
			g_tx_initialized = TRUE;
		}

		return( code);
	}
    785a:	0f 90       	pop	r0
    785c:	0f 90       	pop	r0
    785e:	df 91       	pop	r29
    7860:	cf 91       	pop	r28
    7862:	1f 91       	pop	r17
    7864:	08 95       	ret

00007866 <_Z22txMilliwattsToSettingsPjPhS0_S0_>:


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
    7866:	cf 93       	push	r28
    7868:	df 93       	push	r29
    786a:	dc 01       	movw	r26, r24
	EC ec = ERROR_CODE_NO_ERROR;
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
    786c:	89 2b       	or	r24, r25
    786e:	09 f4       	brne	.+2      	; 0x7872 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xc>
    7870:	b8 c0       	rjmp	.+368    	; 0x79e2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17c>
		return(ERROR_CODE_SW_LOGIC_ERROR);
	}

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
    7872:	ed 91       	ld	r30, X+
    7874:	fc 91       	ld	r31, X
    7876:	11 97       	sbiw	r26, 0x01	; 1
    7878:	e9 38       	cpi	r30, 0x89	; 137
    787a:	83 e1       	ldi	r24, 0x13	; 19
    787c:	f8 07       	cpc	r31, r24
    787e:	14 f4       	brge	.+4      	; 0x7884 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x1e>
	}


EC txMilliwattsToSettings(uint16_t* powerMW, uint8_t* driveLevel, uint8_t* modLevelHigh, uint8_t* modLevelLow)
{
	EC ec = ERROR_CODE_NO_ERROR;
    7880:	80 e0       	ldi	r24, 0x00	; 0
    7882:	01 c0       	rjmp	.+2      	; 0x7886 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x20>

	maxPwr = MAX_TX_POWER_80M_MW;

	if((int16_t)*powerMW > maxPwr)
	{
		ec = ERROR_CODE_POWER_LEVEL_NOT_SUPPORTED;
    7884:	85 ef       	ldi	r24, 0xF5	; 245
	}

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);
    7886:	e9 38       	cpi	r30, 0x89	; 137
    7888:	93 e1       	ldi	r25, 0x13	; 19
    788a:	f9 07       	cpc	r31, r25
    788c:	2c f4       	brge	.+10     	; 0x7898 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x32>
    788e:	ff 23       	and	r31, r31
    7890:	2c f4       	brge	.+10     	; 0x789c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    7892:	e0 e0       	ldi	r30, 0x00	; 0
    7894:	f0 e0       	ldi	r31, 0x00	; 0
    7896:	02 c0       	rjmp	.+4      	; 0x789c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x36>
    7898:	e8 e8       	ldi	r30, 0x88	; 136
    789a:	f3 e1       	ldi	r31, 0x13	; 19
    789c:	ef 01       	movw	r28, r30
    789e:	ed 93       	st	X+, r30
    78a0:	fc 93       	st	X, r31
    78a2:	11 97       	sbiw	r26, 0x01	; 1

	if(*powerMW < 5)
    78a4:	e5 30       	cpi	r30, 0x05	; 5
    78a6:	f1 05       	cpc	r31, r1
    78a8:	20 f4       	brcc	.+8      	; 0x78b2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x4c>
	{
		index = 0;
		*powerMW = 0;
    78aa:	1d 92       	st	X+, r1
    78ac:	1c 92       	st	X, r1

	*powerMW = CLAMP(0, (int16_t)*powerMW, maxPwr);

	if(*powerMW < 5)
	{
		index = 0;
    78ae:	e0 e0       	ldi	r30, 0x00	; 0
    78b0:	8d c0       	rjmp	.+282    	; 0x79cc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 0;
	}
	else if(*powerMW < 50)
    78b2:	e2 33       	cpi	r30, 0x32	; 50
    78b4:	f1 05       	cpc	r31, r1
    78b6:	30 f4       	brcc	.+12     	; 0x78c4 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x5e>
	{
		index = 1;
		*powerMW = 10;
    78b8:	ea e0       	ldi	r30, 0x0A	; 10
    78ba:	f0 e0       	ldi	r31, 0x00	; 0
    78bc:	ed 93       	st	X+, r30
    78be:	fc 93       	st	X, r31
		index = 0;
		*powerMW = 0;
	}
	else if(*powerMW < 50)
	{
		index = 1;
    78c0:	e1 e0       	ldi	r30, 0x01	; 1
    78c2:	84 c0       	rjmp	.+264    	; 0x79cc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 10;
	}
	else if(*powerMW < 150)
    78c4:	e6 39       	cpi	r30, 0x96	; 150
    78c6:	f1 05       	cpc	r31, r1
    78c8:	30 f4       	brcc	.+12     	; 0x78d6 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x70>
	{
		index = 2;
		*powerMW = 100;
    78ca:	e4 e6       	ldi	r30, 0x64	; 100
    78cc:	f0 e0       	ldi	r31, 0x00	; 0
    78ce:	ed 93       	st	X+, r30
    78d0:	fc 93       	st	X, r31
		index = 1;
		*powerMW = 10;
	}
	else if(*powerMW < 150)
	{
		index = 2;
    78d2:	e2 e0       	ldi	r30, 0x02	; 2
    78d4:	7b c0       	rjmp	.+246    	; 0x79cc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 100;
	}
	else if(*powerMW < 250)
    78d6:	ea 3f       	cpi	r30, 0xFA	; 250
    78d8:	f1 05       	cpc	r31, r1
    78da:	30 f4       	brcc	.+12     	; 0x78e8 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x82>
	{
		index = 3;
		*powerMW = 200;
    78dc:	e8 ec       	ldi	r30, 0xC8	; 200
    78de:	f0 e0       	ldi	r31, 0x00	; 0
    78e0:	ed 93       	st	X+, r30
    78e2:	fc 93       	st	X, r31
		index = 2;
		*powerMW = 100;
	}
	else if(*powerMW < 250)
	{
		index = 3;
    78e4:	e3 e0       	ldi	r30, 0x03	; 3
    78e6:	72 c0       	rjmp	.+228    	; 0x79cc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 200;
	}
	else if(*powerMW < 350)
    78e8:	ce 35       	cpi	r28, 0x5E	; 94
    78ea:	e1 e0       	ldi	r30, 0x01	; 1
    78ec:	de 07       	cpc	r29, r30
    78ee:	30 f4       	brcc	.+12     	; 0x78fc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x96>
	{
		index = 4;
		*powerMW = 300;
    78f0:	ec e2       	ldi	r30, 0x2C	; 44
    78f2:	f1 e0       	ldi	r31, 0x01	; 1
    78f4:	ed 93       	st	X+, r30
    78f6:	fc 93       	st	X, r31
		index = 3;
		*powerMW = 200;
	}
	else if(*powerMW < 350)
	{
		index = 4;
    78f8:	e4 e0       	ldi	r30, 0x04	; 4
    78fa:	68 c0       	rjmp	.+208    	; 0x79cc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 300;
	}
	else if(*powerMW < 450)
    78fc:	c2 3c       	cpi	r28, 0xC2	; 194
    78fe:	f1 e0       	ldi	r31, 0x01	; 1
    7900:	df 07       	cpc	r29, r31
    7902:	30 f4       	brcc	.+12     	; 0x7910 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xaa>
	{
		index = 5;
		*powerMW = 400;
    7904:	e0 e9       	ldi	r30, 0x90	; 144
    7906:	f1 e0       	ldi	r31, 0x01	; 1
    7908:	ed 93       	st	X+, r30
    790a:	fc 93       	st	X, r31
		index = 4;
		*powerMW = 300;
	}
	else if(*powerMW < 450)
	{
		index = 5;
    790c:	e5 e0       	ldi	r30, 0x05	; 5
    790e:	5e c0       	rjmp	.+188    	; 0x79cc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 400;
	}
	else if(*powerMW < 550)
    7910:	c6 32       	cpi	r28, 0x26	; 38
    7912:	92 e0       	ldi	r25, 0x02	; 2
    7914:	d9 07       	cpc	r29, r25
    7916:	30 f4       	brcc	.+12     	; 0x7924 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xbe>
	{
		index = 6;
		*powerMW = 500;
    7918:	e4 ef       	ldi	r30, 0xF4	; 244
    791a:	f1 e0       	ldi	r31, 0x01	; 1
    791c:	ed 93       	st	X+, r30
    791e:	fc 93       	st	X, r31
		index = 5;
		*powerMW = 400;
	}
	else if(*powerMW < 550)
	{
		index = 6;
    7920:	e6 e0       	ldi	r30, 0x06	; 6
    7922:	54 c0       	rjmp	.+168    	; 0x79cc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 500;
	}
	else if(*powerMW < 650)
    7924:	ca 38       	cpi	r28, 0x8A	; 138
    7926:	e2 e0       	ldi	r30, 0x02	; 2
    7928:	de 07       	cpc	r29, r30
    792a:	30 f4       	brcc	.+12     	; 0x7938 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xd2>
	{
		index = 7;
		*powerMW = 600;
    792c:	e8 e5       	ldi	r30, 0x58	; 88
    792e:	f2 e0       	ldi	r31, 0x02	; 2
    7930:	ed 93       	st	X+, r30
    7932:	fc 93       	st	X, r31
		index = 6;
		*powerMW = 500;
	}
	else if(*powerMW < 650)
	{
		index = 7;
    7934:	e7 e0       	ldi	r30, 0x07	; 7
    7936:	4a c0       	rjmp	.+148    	; 0x79cc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 600;
	}
	else if(*powerMW < 900)
    7938:	c4 38       	cpi	r28, 0x84	; 132
    793a:	f3 e0       	ldi	r31, 0x03	; 3
    793c:	df 07       	cpc	r29, r31
    793e:	30 f4       	brcc	.+12     	; 0x794c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xe6>
	{
		index = 8;
		*powerMW = 800;
    7940:	e0 e2       	ldi	r30, 0x20	; 32
    7942:	f3 e0       	ldi	r31, 0x03	; 3
    7944:	ed 93       	st	X+, r30
    7946:	fc 93       	st	X, r31
		index = 7;
		*powerMW = 600;
	}
	else if(*powerMW < 900)
	{
		index = 8;
    7948:	e8 e0       	ldi	r30, 0x08	; 8
    794a:	40 c0       	rjmp	.+128    	; 0x79cc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
    794c:	c2 3e       	cpi	r28, 0xE2	; 226
    794e:	94 e0       	ldi	r25, 0x04	; 4
    7950:	d9 07       	cpc	r29, r25
    7952:	30 f4       	brcc	.+12     	; 0x7960 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0xfa>
	{
		index = 9;
		*powerMW = 1000;
    7954:	e8 ee       	ldi	r30, 0xE8	; 232
    7956:	f3 e0       	ldi	r31, 0x03	; 3
    7958:	ed 93       	st	X+, r30
    795a:	fc 93       	st	X, r31
		index = 8;
		*powerMW = 800;
	}
	else if(*powerMW < 1250)
	{
		index = 9;
    795c:	e9 e0       	ldi	r30, 0x09	; 9
    795e:	36 c0       	rjmp	.+108    	; 0x79cc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
    7960:	c6 3d       	cpi	r28, 0xD6	; 214
    7962:	e6 e0       	ldi	r30, 0x06	; 6
    7964:	de 07       	cpc	r29, r30
    7966:	30 f4       	brcc	.+12     	; 0x7974 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x10e>
	{
		index = 10;
		*powerMW = 1500;
    7968:	ec ed       	ldi	r30, 0xDC	; 220
    796a:	f5 e0       	ldi	r31, 0x05	; 5
    796c:	ed 93       	st	X+, r30
    796e:	fc 93       	st	X, r31
		index = 9;
		*powerMW = 1000;
	}
	else if(*powerMW < 1750)
	{
		index = 10;
    7970:	ea e0       	ldi	r30, 0x0A	; 10
    7972:	2c c0       	rjmp	.+88     	; 0x79cc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
    7974:	ca 3c       	cpi	r28, 0xCA	; 202
    7976:	f8 e0       	ldi	r31, 0x08	; 8
    7978:	df 07       	cpc	r29, r31
    797a:	30 f4       	brcc	.+12     	; 0x7988 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x122>
	{
		index = 11;
		*powerMW = 2000;
    797c:	e0 ed       	ldi	r30, 0xD0	; 208
    797e:	f7 e0       	ldi	r31, 0x07	; 7
    7980:	ed 93       	st	X+, r30
    7982:	fc 93       	st	X, r31
		index = 10;
		*powerMW = 1500;
	}
	else if(*powerMW < 2250)
	{
		index = 11;
    7984:	eb e0       	ldi	r30, 0x0B	; 11
    7986:	22 c0       	rjmp	.+68     	; 0x79cc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
    7988:	ce 3b       	cpi	r28, 0xBE	; 190
    798a:	9a e0       	ldi	r25, 0x0A	; 10
    798c:	d9 07       	cpc	r29, r25
    798e:	30 f4       	brcc	.+12     	; 0x799c <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x136>
	{
		index = 12;
		*powerMW = 2500;
    7990:	e4 ec       	ldi	r30, 0xC4	; 196
    7992:	f9 e0       	ldi	r31, 0x09	; 9
    7994:	ed 93       	st	X+, r30
    7996:	fc 93       	st	X, r31
		index = 11;
		*powerMW = 2000;
	}
	else if(*powerMW < 2750)
	{
		index = 12;
    7998:	ec e0       	ldi	r30, 0x0C	; 12
    799a:	18 c0       	rjmp	.+48     	; 0x79cc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
    799c:	cc 3a       	cpi	r28, 0xAC	; 172
    799e:	ed e0       	ldi	r30, 0x0D	; 13
    79a0:	de 07       	cpc	r29, r30
    79a2:	30 f4       	brcc	.+12     	; 0x79b0 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x14a>
	{
		index = 13;
		*powerMW = 3000;
    79a4:	e8 eb       	ldi	r30, 0xB8	; 184
    79a6:	fb e0       	ldi	r31, 0x0B	; 11
    79a8:	ed 93       	st	X+, r30
    79aa:	fc 93       	st	X, r31
		index = 12;
		*powerMW = 2500;
	}
	else if(*powerMW < 3500)
	{
		index = 13;
    79ac:	ed e0       	ldi	r30, 0x0D	; 13
    79ae:	0e c0       	rjmp	.+28     	; 0x79cc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
    79b0:	c4 39       	cpi	r28, 0x94	; 148
    79b2:	d1 41       	sbci	r29, 0x11	; 17
    79b4:	30 f4       	brcc	.+12     	; 0x79c2 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x15c>
	{
		index = 14;
		*powerMW = 4000;
    79b6:	e0 ea       	ldi	r30, 0xA0	; 160
    79b8:	ff e0       	ldi	r31, 0x0F	; 15
    79ba:	ed 93       	st	X+, r30
    79bc:	fc 93       	st	X, r31
		index = 13;
		*powerMW = 3000;
	}
	else if(*powerMW < 4500)
	{
		index = 14;
    79be:	ee e0       	ldi	r30, 0x0E	; 14
    79c0:	05 c0       	rjmp	.+10     	; 0x79cc <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x166>
		*powerMW = 4000;
	}
	else
	{
		index = 15;
		*powerMW = 5000;
    79c2:	e8 e8       	ldi	r30, 0x88	; 136
    79c4:	f3 e1       	ldi	r31, 0x13	; 19
    79c6:	ed 93       	st	X+, r30
    79c8:	fc 93       	st	X, r31
		index = 14;
		*powerMW = 4000;
	}
	else
	{
		index = 15;
    79ca:	ef e0       	ldi	r30, 0x0F	; 15
		*powerMW = 5000;
	}

	*driveLevel = g_80m_power_table[index];
    79cc:	f0 e0       	ldi	r31, 0x00	; 0
    79ce:	e9 5c       	subi	r30, 0xC9	; 201
    79d0:	ff 4b       	sbci	r31, 0xBF	; 191
    79d2:	90 81       	ld	r25, Z
    79d4:	fb 01       	movw	r30, r22
    79d6:	90 83       	st	Z, r25
	*modLevelHigh = 0;
    79d8:	fa 01       	movw	r30, r20
    79da:	10 82       	st	Z, r1
	*modLevelLow = 0;
    79dc:	f9 01       	movw	r30, r18
    79de:	10 82       	st	Z, r1
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
    79e0:	01 c0       	rjmp	.+2      	; 0x79e4 <_Z22txMilliwattsToSettingsPjPhS0_S0_+0x17e>
	int16_t maxPwr;
	uint8_t index;

	if(powerMW == NULL)
	{
		return(ERROR_CODE_SW_LOGIC_ERROR);
    79e2:	8f ec       	ldi	r24, 0xCF	; 207
	*modLevelHigh = 0;
	*modLevelLow = 0;
	*driveLevel = MIN(*driveLevel, MAX_80M_PWR_SETTING);

	return(ec);
}
    79e4:	df 91       	pop	r29
    79e6:	cf 91       	pop	r28
    79e8:	08 95       	ret

000079ea <_Z18txIsAntennaForBandv>:

/**
 */
BOOL __attribute__((optimize("O0"))) txIsAntennaForBand(void)
{
    79ea:	cf 93       	push	r28
    79ec:	df 93       	push	r29
    79ee:	1f 92       	push	r1
    79f0:	cd b7       	in	r28, 0x3d	; 61
    79f2:	de b7       	in	r29, 0x3e	; 62
	BOOL result = FALSE;
    79f4:	19 82       	std	Y+1, r1	; 0x01

	switch(g_antenna_connect_state)
    79f6:	80 91 ee 44 	lds	r24, 0x44EE	; 0x8044ee <g_antenna_connect_state>
    79fa:	88 2f       	mov	r24, r24
    79fc:	90 e0       	ldi	r25, 0x00	; 0
    79fe:	02 97       	sbiw	r24, 0x02	; 2
    7a00:	09 f0       	breq	.+2      	; 0x7a04 <_Z18txIsAntennaForBandv+0x1a>

		default:
		{

		}
		break;
    7a02:	03 c0       	rjmp	.+6      	; 0x7a0a <_Z18txIsAntennaForBandv+0x20>

	switch(g_antenna_connect_state)
	{
		case ANT_80M_CONNECTED:
		{
			result = TRUE;
    7a04:	81 e0       	ldi	r24, 0x01	; 1
    7a06:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
    7a08:	00 00       	nop

		}
		break;
	}

	return( result);
    7a0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    7a0c:	0f 90       	pop	r0
    7a0e:	df 91       	pop	r29
    7a10:	cf 91       	pop	r28
    7a12:	08 95       	ret

00007a14 <USART0_get_data>:
 *
 * \return Nothing
 */
void USART4_enable_rx()
{
	USART4.CTRLB |= USART_RXEN_bm;
    7a14:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7e0800>
    7a18:	08 95       	ret

00007a1a <USART1_init>:
    7a1a:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatunsisf>
    7a1e:	20 e0       	ldi	r18, 0x00	; 0
    7a20:	30 e0       	ldi	r19, 0x00	; 0
    7a22:	40 e8       	ldi	r20, 0x80	; 128
    7a24:	51 e4       	ldi	r21, 0x41	; 65
    7a26:	0e 94 64 3f 	call	0x7ec8	; 0x7ec8 <__mulsf3>
    7a2a:	9b 01       	movw	r18, r22
    7a2c:	ac 01       	movw	r20, r24
    7a2e:	60 e0       	ldi	r22, 0x00	; 0
    7a30:	74 e2       	ldi	r23, 0x24	; 36
    7a32:	84 e7       	ldi	r24, 0x74	; 116
    7a34:	9d e4       	ldi	r25, 0x4D	; 77
    7a36:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__divsf3>
    7a3a:	20 e0       	ldi	r18, 0x00	; 0
    7a3c:	30 e0       	ldi	r19, 0x00	; 0
    7a3e:	40 e0       	ldi	r20, 0x00	; 0
    7a40:	5f e3       	ldi	r21, 0x3F	; 63
    7a42:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <__addsf3>
    7a46:	0e 94 7e 3e 	call	0x7cfc	; 0x7cfc <__fixunssfsi>
    7a4a:	e0 e2       	ldi	r30, 0x20	; 32
    7a4c:	f8 e0       	ldi	r31, 0x08	; 8
    7a4e:	60 87       	std	Z+8, r22	; 0x08
    7a50:	71 87       	std	Z+9, r23	; 0x09
    7a52:	80 e8       	ldi	r24, 0x80	; 128
    7a54:	85 83       	std	Z+5, r24	; 0x05
    7a56:	80 ec       	ldi	r24, 0xC0	; 192
    7a58:	86 83       	std	Z+6, r24	; 0x06
    7a5a:	80 e0       	ldi	r24, 0x00	; 0
    7a5c:	08 95       	ret

00007a5e <USART1_enable_tx>:
    7a5e:	e0 e2       	ldi	r30, 0x20	; 32
    7a60:	f8 e0       	ldi	r31, 0x08	; 8
    7a62:	86 81       	ldd	r24, Z+6	; 0x06
    7a64:	80 64       	ori	r24, 0x40	; 64
    7a66:	86 83       	std	Z+6, r24	; 0x06
    7a68:	85 81       	ldd	r24, Z+5	; 0x05
    7a6a:	80 62       	ori	r24, 0x20	; 32
    7a6c:	85 83       	std	Z+5, r24	; 0x05
    7a6e:	08 95       	ret

00007a70 <USART1_disable>:
    7a70:	e0 e2       	ldi	r30, 0x20	; 32
    7a72:	f8 e0       	ldi	r31, 0x08	; 8
    7a74:	86 81       	ldd	r24, Z+6	; 0x06
    7a76:	8f 73       	andi	r24, 0x3F	; 63
    7a78:	86 83       	std	Z+6, r24	; 0x06
    7a7a:	08 95       	ret

00007a7c <USART1_get_data>:
    7a7c:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
    7a80:	08 95       	ret

00007a82 <USART4_init>:
    7a82:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <__floatunsisf>
    7a86:	20 e0       	ldi	r18, 0x00	; 0
    7a88:	30 e0       	ldi	r19, 0x00	; 0
    7a8a:	40 e8       	ldi	r20, 0x80	; 128
    7a8c:	51 e4       	ldi	r21, 0x41	; 65
    7a8e:	0e 94 64 3f 	call	0x7ec8	; 0x7ec8 <__mulsf3>
    7a92:	9b 01       	movw	r18, r22
    7a94:	ac 01       	movw	r20, r24
    7a96:	60 e0       	ldi	r22, 0x00	; 0
    7a98:	74 e2       	ldi	r23, 0x24	; 36
    7a9a:	84 e7       	ldi	r24, 0x74	; 116
    7a9c:	9d e4       	ldi	r25, 0x4D	; 77
    7a9e:	0e 94 05 3e 	call	0x7c0a	; 0x7c0a <__divsf3>
    7aa2:	20 e0       	ldi	r18, 0x00	; 0
    7aa4:	30 e0       	ldi	r19, 0x00	; 0
    7aa6:	40 e0       	ldi	r20, 0x00	; 0
    7aa8:	5f e3       	ldi	r21, 0x3F	; 63
    7aaa:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <__addsf3>
    7aae:	0e 94 7e 3e 	call	0x7cfc	; 0x7cfc <__fixunssfsi>
    7ab2:	e0 e8       	ldi	r30, 0x80	; 128
    7ab4:	f8 e0       	ldi	r31, 0x08	; 8
    7ab6:	60 87       	std	Z+8, r22	; 0x08
    7ab8:	71 87       	std	Z+9, r23	; 0x09
    7aba:	80 e8       	ldi	r24, 0x80	; 128
    7abc:	85 83       	std	Z+5, r24	; 0x05
    7abe:	80 ec       	ldi	r24, 0xC0	; 192
    7ac0:	86 83       	std	Z+6, r24	; 0x06
    7ac2:	80 e0       	ldi	r24, 0x00	; 0
    7ac4:	08 95       	ret

00007ac6 <USART4_enable_tx>:
 *
 * \return Nothing
 */
void USART4_enable_tx()
{
	USART4.CTRLB |= USART_TXEN_bm;
    7ac6:	e0 e8       	ldi	r30, 0x80	; 128
    7ac8:	f8 e0       	ldi	r31, 0x08	; 8
    7aca:	86 81       	ldd	r24, Z+6	; 0x06
    7acc:	80 64       	ori	r24, 0x40	; 64
    7ace:	86 83       	std	Z+6, r24	; 0x06
	USART4.CTRLA |= 1 << USART_DREIE_bp; /* Transmit Data Ready Interrupt Enable: enable */
    7ad0:	85 81       	ldd	r24, Z+5	; 0x05
    7ad2:	80 62       	ori	r24, 0x20	; 32
    7ad4:	85 83       	std	Z+5, r24	; 0x05
    7ad6:	08 95       	ret

00007ad8 <USART4_disable>:
 *
 * \return Nothing
 */
void USART4_disable()
{
	USART4.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
    7ad8:	e0 e8       	ldi	r30, 0x80	; 128
    7ada:	f8 e0       	ldi	r31, 0x08	; 8
    7adc:	86 81       	ldd	r24, Z+6	; 0x06
    7ade:	8f 73       	andi	r24, 0x3F	; 63
    7ae0:	86 83       	std	Z+6, r24	; 0x06
    7ae2:	08 95       	ret

00007ae4 <USART4_get_data>:
 *
 * \return Data register from USART4 module
 */
uint8_t USART4_get_data()
{
	return USART4.RXDATAL;
    7ae4:	80 91 80 08 	lds	r24, 0x0880	; 0x800880 <__TEXT_REGION_LENGTH__+0x7e0880>
}
    7ae8:	08 95       	ret

00007aea <_Z7timeDifmm>:
    (ltm.tm_year-70)*31536000L + ((ltm.tm_year-69)/4)*86400L -
    ((ltm.tm_year-1)/100)*86400L + ((ltm.tm_year+299)/400)*86400L;
  }

  return result;
}
    7aea:	26 17       	cp	r18, r22
    7aec:	37 07       	cpc	r19, r23
    7aee:	48 07       	cpc	r20, r24
    7af0:	59 07       	cpc	r21, r25
    7af2:	28 f4       	brcc	.+10     	; 0x7afe <_Z7timeDifmm+0x14>
    7af4:	62 1b       	sub	r22, r18
    7af6:	73 0b       	sbc	r23, r19
    7af8:	84 0b       	sbc	r24, r20
    7afa:	95 0b       	sbc	r25, r21
    7afc:	08 95       	ret
    7afe:	62 1b       	sub	r22, r18
    7b00:	73 0b       	sbc	r23, r19
    7b02:	84 0b       	sbc	r24, r20
    7b04:	95 0b       	sbc	r25, r21
    7b06:	08 95       	ret

00007b08 <_Z11only_digitsPc>:

/** 
 * Checks a string to see if it contains only numerical characters
 */
BOOL only_digits(char *s)
{
    7b08:	fc 01       	movw	r30, r24
	while(*s)
    7b0a:	20 81       	ld	r18, Z
    7b0c:	22 23       	and	r18, r18
    7b0e:	49 f0       	breq	.+18     	; 0x7b22 <_Z11only_digitsPc+0x1a>
	{
		if(isdigit(*s++) == 0)
    7b10:	31 96       	adiw	r30, 0x01	; 1
    7b12:	30 e0       	ldi	r19, 0x00	; 0
    7b14:	20 53       	subi	r18, 0x30	; 48
    7b16:	31 09       	sbc	r19, r1
    7b18:	2a 30       	cpi	r18, 0x0A	; 10
    7b1a:	31 05       	cpc	r19, r1
    7b1c:	b0 f3       	brcs	.-20     	; 0x7b0a <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    7b1e:	80 e0       	ldi	r24, 0x00	; 0
    7b20:	08 95       	ret
		}
	}

	return( TRUE);
    7b22:	81 e0       	ldi	r24, 0x01	; 1
}
    7b24:	08 95       	ret

00007b26 <__subsf3>:
    7b26:	50 58       	subi	r21, 0x80	; 128

00007b28 <__addsf3>:
    7b28:	bb 27       	eor	r27, r27
    7b2a:	aa 27       	eor	r26, r26
    7b2c:	0e 94 ab 3d 	call	0x7b56	; 0x7b56 <__addsf3x>
    7b30:	0c 94 25 3f 	jmp	0x7e4a	; 0x7e4a <__fp_round>
    7b34:	0e 94 17 3f 	call	0x7e2e	; 0x7e2e <__fp_pscA>
    7b38:	38 f0       	brcs	.+14     	; 0x7b48 <__addsf3+0x20>
    7b3a:	0e 94 1e 3f 	call	0x7e3c	; 0x7e3c <__fp_pscB>
    7b3e:	20 f0       	brcs	.+8      	; 0x7b48 <__addsf3+0x20>
    7b40:	39 f4       	brne	.+14     	; 0x7b50 <__addsf3+0x28>
    7b42:	9f 3f       	cpi	r25, 0xFF	; 255
    7b44:	19 f4       	brne	.+6      	; 0x7b4c <__addsf3+0x24>
    7b46:	26 f4       	brtc	.+8      	; 0x7b50 <__addsf3+0x28>
    7b48:	0c 94 14 3f 	jmp	0x7e28	; 0x7e28 <__fp_nan>
    7b4c:	0e f4       	brtc	.+2      	; 0x7b50 <__addsf3+0x28>
    7b4e:	e0 95       	com	r30
    7b50:	e7 fb       	bst	r30, 7
    7b52:	0c 94 0e 3f 	jmp	0x7e1c	; 0x7e1c <__fp_inf>

00007b56 <__addsf3x>:
    7b56:	e9 2f       	mov	r30, r25
    7b58:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <__fp_split3>
    7b5c:	58 f3       	brcs	.-42     	; 0x7b34 <__addsf3+0xc>
    7b5e:	ba 17       	cp	r27, r26
    7b60:	62 07       	cpc	r22, r18
    7b62:	73 07       	cpc	r23, r19
    7b64:	84 07       	cpc	r24, r20
    7b66:	95 07       	cpc	r25, r21
    7b68:	20 f0       	brcs	.+8      	; 0x7b72 <__addsf3x+0x1c>
    7b6a:	79 f4       	brne	.+30     	; 0x7b8a <__addsf3x+0x34>
    7b6c:	a6 f5       	brtc	.+104    	; 0x7bd6 <__addsf3x+0x80>
    7b6e:	0c 94 58 3f 	jmp	0x7eb0	; 0x7eb0 <__fp_zero>
    7b72:	0e f4       	brtc	.+2      	; 0x7b76 <__addsf3x+0x20>
    7b74:	e0 95       	com	r30
    7b76:	0b 2e       	mov	r0, r27
    7b78:	ba 2f       	mov	r27, r26
    7b7a:	a0 2d       	mov	r26, r0
    7b7c:	0b 01       	movw	r0, r22
    7b7e:	b9 01       	movw	r22, r18
    7b80:	90 01       	movw	r18, r0
    7b82:	0c 01       	movw	r0, r24
    7b84:	ca 01       	movw	r24, r20
    7b86:	a0 01       	movw	r20, r0
    7b88:	11 24       	eor	r1, r1
    7b8a:	ff 27       	eor	r31, r31
    7b8c:	59 1b       	sub	r21, r25
    7b8e:	99 f0       	breq	.+38     	; 0x7bb6 <__addsf3x+0x60>
    7b90:	59 3f       	cpi	r21, 0xF9	; 249
    7b92:	50 f4       	brcc	.+20     	; 0x7ba8 <__addsf3x+0x52>
    7b94:	50 3e       	cpi	r21, 0xE0	; 224
    7b96:	68 f1       	brcs	.+90     	; 0x7bf2 <__addsf3x+0x9c>
    7b98:	1a 16       	cp	r1, r26
    7b9a:	f0 40       	sbci	r31, 0x00	; 0
    7b9c:	a2 2f       	mov	r26, r18
    7b9e:	23 2f       	mov	r18, r19
    7ba0:	34 2f       	mov	r19, r20
    7ba2:	44 27       	eor	r20, r20
    7ba4:	58 5f       	subi	r21, 0xF8	; 248
    7ba6:	f3 cf       	rjmp	.-26     	; 0x7b8e <__addsf3x+0x38>
    7ba8:	46 95       	lsr	r20
    7baa:	37 95       	ror	r19
    7bac:	27 95       	ror	r18
    7bae:	a7 95       	ror	r26
    7bb0:	f0 40       	sbci	r31, 0x00	; 0
    7bb2:	53 95       	inc	r21
    7bb4:	c9 f7       	brne	.-14     	; 0x7ba8 <__addsf3x+0x52>
    7bb6:	7e f4       	brtc	.+30     	; 0x7bd6 <__addsf3x+0x80>
    7bb8:	1f 16       	cp	r1, r31
    7bba:	ba 0b       	sbc	r27, r26
    7bbc:	62 0b       	sbc	r22, r18
    7bbe:	73 0b       	sbc	r23, r19
    7bc0:	84 0b       	sbc	r24, r20
    7bc2:	ba f0       	brmi	.+46     	; 0x7bf2 <__addsf3x+0x9c>
    7bc4:	91 50       	subi	r25, 0x01	; 1
    7bc6:	a1 f0       	breq	.+40     	; 0x7bf0 <__addsf3x+0x9a>
    7bc8:	ff 0f       	add	r31, r31
    7bca:	bb 1f       	adc	r27, r27
    7bcc:	66 1f       	adc	r22, r22
    7bce:	77 1f       	adc	r23, r23
    7bd0:	88 1f       	adc	r24, r24
    7bd2:	c2 f7       	brpl	.-16     	; 0x7bc4 <__addsf3x+0x6e>
    7bd4:	0e c0       	rjmp	.+28     	; 0x7bf2 <__addsf3x+0x9c>
    7bd6:	ba 0f       	add	r27, r26
    7bd8:	62 1f       	adc	r22, r18
    7bda:	73 1f       	adc	r23, r19
    7bdc:	84 1f       	adc	r24, r20
    7bde:	48 f4       	brcc	.+18     	; 0x7bf2 <__addsf3x+0x9c>
    7be0:	87 95       	ror	r24
    7be2:	77 95       	ror	r23
    7be4:	67 95       	ror	r22
    7be6:	b7 95       	ror	r27
    7be8:	f7 95       	ror	r31
    7bea:	9e 3f       	cpi	r25, 0xFE	; 254
    7bec:	08 f0       	brcs	.+2      	; 0x7bf0 <__addsf3x+0x9a>
    7bee:	b0 cf       	rjmp	.-160    	; 0x7b50 <__addsf3+0x28>
    7bf0:	93 95       	inc	r25
    7bf2:	88 0f       	add	r24, r24
    7bf4:	08 f0       	brcs	.+2      	; 0x7bf8 <__addsf3x+0xa2>
    7bf6:	99 27       	eor	r25, r25
    7bf8:	ee 0f       	add	r30, r30
    7bfa:	97 95       	ror	r25
    7bfc:	87 95       	ror	r24
    7bfe:	08 95       	ret

00007c00 <__cmpsf2>:
    7c00:	0e 94 ea 3e 	call	0x7dd4	; 0x7dd4 <__fp_cmp>
    7c04:	08 f4       	brcc	.+2      	; 0x7c08 <__cmpsf2+0x8>
    7c06:	81 e0       	ldi	r24, 0x01	; 1
    7c08:	08 95       	ret

00007c0a <__divsf3>:
    7c0a:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <__divsf3x>
    7c0e:	0c 94 25 3f 	jmp	0x7e4a	; 0x7e4a <__fp_round>
    7c12:	0e 94 1e 3f 	call	0x7e3c	; 0x7e3c <__fp_pscB>
    7c16:	58 f0       	brcs	.+22     	; 0x7c2e <__divsf3+0x24>
    7c18:	0e 94 17 3f 	call	0x7e2e	; 0x7e2e <__fp_pscA>
    7c1c:	40 f0       	brcs	.+16     	; 0x7c2e <__divsf3+0x24>
    7c1e:	29 f4       	brne	.+10     	; 0x7c2a <__divsf3+0x20>
    7c20:	5f 3f       	cpi	r21, 0xFF	; 255
    7c22:	29 f0       	breq	.+10     	; 0x7c2e <__divsf3+0x24>
    7c24:	0c 94 0e 3f 	jmp	0x7e1c	; 0x7e1c <__fp_inf>
    7c28:	51 11       	cpse	r21, r1
    7c2a:	0c 94 59 3f 	jmp	0x7eb2	; 0x7eb2 <__fp_szero>
    7c2e:	0c 94 14 3f 	jmp	0x7e28	; 0x7e28 <__fp_nan>

00007c32 <__divsf3x>:
    7c32:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <__fp_split3>
    7c36:	68 f3       	brcs	.-38     	; 0x7c12 <__divsf3+0x8>

00007c38 <__divsf3_pse>:
    7c38:	99 23       	and	r25, r25
    7c3a:	b1 f3       	breq	.-20     	; 0x7c28 <__divsf3+0x1e>
    7c3c:	55 23       	and	r21, r21
    7c3e:	91 f3       	breq	.-28     	; 0x7c24 <__divsf3+0x1a>
    7c40:	95 1b       	sub	r25, r21
    7c42:	55 0b       	sbc	r21, r21
    7c44:	bb 27       	eor	r27, r27
    7c46:	aa 27       	eor	r26, r26
    7c48:	62 17       	cp	r22, r18
    7c4a:	73 07       	cpc	r23, r19
    7c4c:	84 07       	cpc	r24, r20
    7c4e:	38 f0       	brcs	.+14     	; 0x7c5e <__divsf3_pse+0x26>
    7c50:	9f 5f       	subi	r25, 0xFF	; 255
    7c52:	5f 4f       	sbci	r21, 0xFF	; 255
    7c54:	22 0f       	add	r18, r18
    7c56:	33 1f       	adc	r19, r19
    7c58:	44 1f       	adc	r20, r20
    7c5a:	aa 1f       	adc	r26, r26
    7c5c:	a9 f3       	breq	.-22     	; 0x7c48 <__divsf3_pse+0x10>
    7c5e:	35 d0       	rcall	.+106    	; 0x7cca <__divsf3_pse+0x92>
    7c60:	0e 2e       	mov	r0, r30
    7c62:	3a f0       	brmi	.+14     	; 0x7c72 <__divsf3_pse+0x3a>
    7c64:	e0 e8       	ldi	r30, 0x80	; 128
    7c66:	32 d0       	rcall	.+100    	; 0x7ccc <__divsf3_pse+0x94>
    7c68:	91 50       	subi	r25, 0x01	; 1
    7c6a:	50 40       	sbci	r21, 0x00	; 0
    7c6c:	e6 95       	lsr	r30
    7c6e:	00 1c       	adc	r0, r0
    7c70:	ca f7       	brpl	.-14     	; 0x7c64 <__divsf3_pse+0x2c>
    7c72:	2b d0       	rcall	.+86     	; 0x7cca <__divsf3_pse+0x92>
    7c74:	fe 2f       	mov	r31, r30
    7c76:	29 d0       	rcall	.+82     	; 0x7cca <__divsf3_pse+0x92>
    7c78:	66 0f       	add	r22, r22
    7c7a:	77 1f       	adc	r23, r23
    7c7c:	88 1f       	adc	r24, r24
    7c7e:	bb 1f       	adc	r27, r27
    7c80:	26 17       	cp	r18, r22
    7c82:	37 07       	cpc	r19, r23
    7c84:	48 07       	cpc	r20, r24
    7c86:	ab 07       	cpc	r26, r27
    7c88:	b0 e8       	ldi	r27, 0x80	; 128
    7c8a:	09 f0       	breq	.+2      	; 0x7c8e <__divsf3_pse+0x56>
    7c8c:	bb 0b       	sbc	r27, r27
    7c8e:	80 2d       	mov	r24, r0
    7c90:	bf 01       	movw	r22, r30
    7c92:	ff 27       	eor	r31, r31
    7c94:	93 58       	subi	r25, 0x83	; 131
    7c96:	5f 4f       	sbci	r21, 0xFF	; 255
    7c98:	3a f0       	brmi	.+14     	; 0x7ca8 <__divsf3_pse+0x70>
    7c9a:	9e 3f       	cpi	r25, 0xFE	; 254
    7c9c:	51 05       	cpc	r21, r1
    7c9e:	78 f0       	brcs	.+30     	; 0x7cbe <__divsf3_pse+0x86>
    7ca0:	0c 94 0e 3f 	jmp	0x7e1c	; 0x7e1c <__fp_inf>
    7ca4:	0c 94 59 3f 	jmp	0x7eb2	; 0x7eb2 <__fp_szero>
    7ca8:	5f 3f       	cpi	r21, 0xFF	; 255
    7caa:	e4 f3       	brlt	.-8      	; 0x7ca4 <__divsf3_pse+0x6c>
    7cac:	98 3e       	cpi	r25, 0xE8	; 232
    7cae:	d4 f3       	brlt	.-12     	; 0x7ca4 <__divsf3_pse+0x6c>
    7cb0:	86 95       	lsr	r24
    7cb2:	77 95       	ror	r23
    7cb4:	67 95       	ror	r22
    7cb6:	b7 95       	ror	r27
    7cb8:	f7 95       	ror	r31
    7cba:	9f 5f       	subi	r25, 0xFF	; 255
    7cbc:	c9 f7       	brne	.-14     	; 0x7cb0 <__divsf3_pse+0x78>
    7cbe:	88 0f       	add	r24, r24
    7cc0:	91 1d       	adc	r25, r1
    7cc2:	96 95       	lsr	r25
    7cc4:	87 95       	ror	r24
    7cc6:	97 f9       	bld	r25, 7
    7cc8:	08 95       	ret
    7cca:	e1 e0       	ldi	r30, 0x01	; 1
    7ccc:	66 0f       	add	r22, r22
    7cce:	77 1f       	adc	r23, r23
    7cd0:	88 1f       	adc	r24, r24
    7cd2:	bb 1f       	adc	r27, r27
    7cd4:	62 17       	cp	r22, r18
    7cd6:	73 07       	cpc	r23, r19
    7cd8:	84 07       	cpc	r24, r20
    7cda:	ba 07       	cpc	r27, r26
    7cdc:	20 f0       	brcs	.+8      	; 0x7ce6 <__divsf3_pse+0xae>
    7cde:	62 1b       	sub	r22, r18
    7ce0:	73 0b       	sbc	r23, r19
    7ce2:	84 0b       	sbc	r24, r20
    7ce4:	ba 0b       	sbc	r27, r26
    7ce6:	ee 1f       	adc	r30, r30
    7ce8:	88 f7       	brcc	.-30     	; 0x7ccc <__divsf3_pse+0x94>
    7cea:	e0 95       	com	r30
    7cec:	08 95       	ret

00007cee <__fixsfsi>:
    7cee:	0e 94 7e 3e 	call	0x7cfc	; 0x7cfc <__fixunssfsi>
    7cf2:	68 94       	set
    7cf4:	b1 11       	cpse	r27, r1
    7cf6:	0c 94 59 3f 	jmp	0x7eb2	; 0x7eb2 <__fp_szero>
    7cfa:	08 95       	ret

00007cfc <__fixunssfsi>:
    7cfc:	0e 94 3e 3f 	call	0x7e7c	; 0x7e7c <__fp_splitA>
    7d00:	88 f0       	brcs	.+34     	; 0x7d24 <__fixunssfsi+0x28>
    7d02:	9f 57       	subi	r25, 0x7F	; 127
    7d04:	98 f0       	brcs	.+38     	; 0x7d2c <__fixunssfsi+0x30>
    7d06:	b9 2f       	mov	r27, r25
    7d08:	99 27       	eor	r25, r25
    7d0a:	b7 51       	subi	r27, 0x17	; 23
    7d0c:	b0 f0       	brcs	.+44     	; 0x7d3a <__fixunssfsi+0x3e>
    7d0e:	e1 f0       	breq	.+56     	; 0x7d48 <__fixunssfsi+0x4c>
    7d10:	66 0f       	add	r22, r22
    7d12:	77 1f       	adc	r23, r23
    7d14:	88 1f       	adc	r24, r24
    7d16:	99 1f       	adc	r25, r25
    7d18:	1a f0       	brmi	.+6      	; 0x7d20 <__fixunssfsi+0x24>
    7d1a:	ba 95       	dec	r27
    7d1c:	c9 f7       	brne	.-14     	; 0x7d10 <__fixunssfsi+0x14>
    7d1e:	14 c0       	rjmp	.+40     	; 0x7d48 <__fixunssfsi+0x4c>
    7d20:	b1 30       	cpi	r27, 0x01	; 1
    7d22:	91 f0       	breq	.+36     	; 0x7d48 <__fixunssfsi+0x4c>
    7d24:	0e 94 58 3f 	call	0x7eb0	; 0x7eb0 <__fp_zero>
    7d28:	b1 e0       	ldi	r27, 0x01	; 1
    7d2a:	08 95       	ret
    7d2c:	0c 94 58 3f 	jmp	0x7eb0	; 0x7eb0 <__fp_zero>
    7d30:	67 2f       	mov	r22, r23
    7d32:	78 2f       	mov	r23, r24
    7d34:	88 27       	eor	r24, r24
    7d36:	b8 5f       	subi	r27, 0xF8	; 248
    7d38:	39 f0       	breq	.+14     	; 0x7d48 <__fixunssfsi+0x4c>
    7d3a:	b9 3f       	cpi	r27, 0xF9	; 249
    7d3c:	cc f3       	brlt	.-14     	; 0x7d30 <__fixunssfsi+0x34>
    7d3e:	86 95       	lsr	r24
    7d40:	77 95       	ror	r23
    7d42:	67 95       	ror	r22
    7d44:	b3 95       	inc	r27
    7d46:	d9 f7       	brne	.-10     	; 0x7d3e <__fixunssfsi+0x42>
    7d48:	3e f4       	brtc	.+14     	; 0x7d58 <__fixunssfsi+0x5c>
    7d4a:	90 95       	com	r25
    7d4c:	80 95       	com	r24
    7d4e:	70 95       	com	r23
    7d50:	61 95       	neg	r22
    7d52:	7f 4f       	sbci	r23, 0xFF	; 255
    7d54:	8f 4f       	sbci	r24, 0xFF	; 255
    7d56:	9f 4f       	sbci	r25, 0xFF	; 255
    7d58:	08 95       	ret

00007d5a <__floatunsisf>:
    7d5a:	e8 94       	clt
    7d5c:	09 c0       	rjmp	.+18     	; 0x7d70 <__floatsisf+0x12>

00007d5e <__floatsisf>:
    7d5e:	97 fb       	bst	r25, 7
    7d60:	3e f4       	brtc	.+14     	; 0x7d70 <__floatsisf+0x12>
    7d62:	90 95       	com	r25
    7d64:	80 95       	com	r24
    7d66:	70 95       	com	r23
    7d68:	61 95       	neg	r22
    7d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    7d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    7d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    7d70:	99 23       	and	r25, r25
    7d72:	a9 f0       	breq	.+42     	; 0x7d9e <__floatsisf+0x40>
    7d74:	f9 2f       	mov	r31, r25
    7d76:	96 e9       	ldi	r25, 0x96	; 150
    7d78:	bb 27       	eor	r27, r27
    7d7a:	93 95       	inc	r25
    7d7c:	f6 95       	lsr	r31
    7d7e:	87 95       	ror	r24
    7d80:	77 95       	ror	r23
    7d82:	67 95       	ror	r22
    7d84:	b7 95       	ror	r27
    7d86:	f1 11       	cpse	r31, r1
    7d88:	f8 cf       	rjmp	.-16     	; 0x7d7a <__floatsisf+0x1c>
    7d8a:	fa f4       	brpl	.+62     	; 0x7dca <__floatsisf+0x6c>
    7d8c:	bb 0f       	add	r27, r27
    7d8e:	11 f4       	brne	.+4      	; 0x7d94 <__floatsisf+0x36>
    7d90:	60 ff       	sbrs	r22, 0
    7d92:	1b c0       	rjmp	.+54     	; 0x7dca <__floatsisf+0x6c>
    7d94:	6f 5f       	subi	r22, 0xFF	; 255
    7d96:	7f 4f       	sbci	r23, 0xFF	; 255
    7d98:	8f 4f       	sbci	r24, 0xFF	; 255
    7d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    7d9c:	16 c0       	rjmp	.+44     	; 0x7dca <__floatsisf+0x6c>
    7d9e:	88 23       	and	r24, r24
    7da0:	11 f0       	breq	.+4      	; 0x7da6 <__floatsisf+0x48>
    7da2:	96 e9       	ldi	r25, 0x96	; 150
    7da4:	11 c0       	rjmp	.+34     	; 0x7dc8 <__floatsisf+0x6a>
    7da6:	77 23       	and	r23, r23
    7da8:	21 f0       	breq	.+8      	; 0x7db2 <__floatsisf+0x54>
    7daa:	9e e8       	ldi	r25, 0x8E	; 142
    7dac:	87 2f       	mov	r24, r23
    7dae:	76 2f       	mov	r23, r22
    7db0:	05 c0       	rjmp	.+10     	; 0x7dbc <__floatsisf+0x5e>
    7db2:	66 23       	and	r22, r22
    7db4:	71 f0       	breq	.+28     	; 0x7dd2 <__floatsisf+0x74>
    7db6:	96 e8       	ldi	r25, 0x86	; 134
    7db8:	86 2f       	mov	r24, r22
    7dba:	70 e0       	ldi	r23, 0x00	; 0
    7dbc:	60 e0       	ldi	r22, 0x00	; 0
    7dbe:	2a f0       	brmi	.+10     	; 0x7dca <__floatsisf+0x6c>
    7dc0:	9a 95       	dec	r25
    7dc2:	66 0f       	add	r22, r22
    7dc4:	77 1f       	adc	r23, r23
    7dc6:	88 1f       	adc	r24, r24
    7dc8:	da f7       	brpl	.-10     	; 0x7dc0 <__floatsisf+0x62>
    7dca:	88 0f       	add	r24, r24
    7dcc:	96 95       	lsr	r25
    7dce:	87 95       	ror	r24
    7dd0:	97 f9       	bld	r25, 7
    7dd2:	08 95       	ret

00007dd4 <__fp_cmp>:
    7dd4:	99 0f       	add	r25, r25
    7dd6:	00 08       	sbc	r0, r0
    7dd8:	55 0f       	add	r21, r21
    7dda:	aa 0b       	sbc	r26, r26
    7ddc:	e0 e8       	ldi	r30, 0x80	; 128
    7dde:	fe ef       	ldi	r31, 0xFE	; 254
    7de0:	16 16       	cp	r1, r22
    7de2:	17 06       	cpc	r1, r23
    7de4:	e8 07       	cpc	r30, r24
    7de6:	f9 07       	cpc	r31, r25
    7de8:	c0 f0       	brcs	.+48     	; 0x7e1a <__fp_cmp+0x46>
    7dea:	12 16       	cp	r1, r18
    7dec:	13 06       	cpc	r1, r19
    7dee:	e4 07       	cpc	r30, r20
    7df0:	f5 07       	cpc	r31, r21
    7df2:	98 f0       	brcs	.+38     	; 0x7e1a <__fp_cmp+0x46>
    7df4:	62 1b       	sub	r22, r18
    7df6:	73 0b       	sbc	r23, r19
    7df8:	84 0b       	sbc	r24, r20
    7dfa:	95 0b       	sbc	r25, r21
    7dfc:	39 f4       	brne	.+14     	; 0x7e0c <__fp_cmp+0x38>
    7dfe:	0a 26       	eor	r0, r26
    7e00:	61 f0       	breq	.+24     	; 0x7e1a <__fp_cmp+0x46>
    7e02:	23 2b       	or	r18, r19
    7e04:	24 2b       	or	r18, r20
    7e06:	25 2b       	or	r18, r21
    7e08:	21 f4       	brne	.+8      	; 0x7e12 <__fp_cmp+0x3e>
    7e0a:	08 95       	ret
    7e0c:	0a 26       	eor	r0, r26
    7e0e:	09 f4       	brne	.+2      	; 0x7e12 <__fp_cmp+0x3e>
    7e10:	a1 40       	sbci	r26, 0x01	; 1
    7e12:	a6 95       	lsr	r26
    7e14:	8f ef       	ldi	r24, 0xFF	; 255
    7e16:	81 1d       	adc	r24, r1
    7e18:	81 1d       	adc	r24, r1
    7e1a:	08 95       	ret

00007e1c <__fp_inf>:
    7e1c:	97 f9       	bld	r25, 7
    7e1e:	9f 67       	ori	r25, 0x7F	; 127
    7e20:	80 e8       	ldi	r24, 0x80	; 128
    7e22:	70 e0       	ldi	r23, 0x00	; 0
    7e24:	60 e0       	ldi	r22, 0x00	; 0
    7e26:	08 95       	ret

00007e28 <__fp_nan>:
    7e28:	9f ef       	ldi	r25, 0xFF	; 255
    7e2a:	80 ec       	ldi	r24, 0xC0	; 192
    7e2c:	08 95       	ret

00007e2e <__fp_pscA>:
    7e2e:	00 24       	eor	r0, r0
    7e30:	0a 94       	dec	r0
    7e32:	16 16       	cp	r1, r22
    7e34:	17 06       	cpc	r1, r23
    7e36:	18 06       	cpc	r1, r24
    7e38:	09 06       	cpc	r0, r25
    7e3a:	08 95       	ret

00007e3c <__fp_pscB>:
    7e3c:	00 24       	eor	r0, r0
    7e3e:	0a 94       	dec	r0
    7e40:	12 16       	cp	r1, r18
    7e42:	13 06       	cpc	r1, r19
    7e44:	14 06       	cpc	r1, r20
    7e46:	05 06       	cpc	r0, r21
    7e48:	08 95       	ret

00007e4a <__fp_round>:
    7e4a:	09 2e       	mov	r0, r25
    7e4c:	03 94       	inc	r0
    7e4e:	00 0c       	add	r0, r0
    7e50:	11 f4       	brne	.+4      	; 0x7e56 <__fp_round+0xc>
    7e52:	88 23       	and	r24, r24
    7e54:	52 f0       	brmi	.+20     	; 0x7e6a <__fp_round+0x20>
    7e56:	bb 0f       	add	r27, r27
    7e58:	40 f4       	brcc	.+16     	; 0x7e6a <__fp_round+0x20>
    7e5a:	bf 2b       	or	r27, r31
    7e5c:	11 f4       	brne	.+4      	; 0x7e62 <__fp_round+0x18>
    7e5e:	60 ff       	sbrs	r22, 0
    7e60:	04 c0       	rjmp	.+8      	; 0x7e6a <__fp_round+0x20>
    7e62:	6f 5f       	subi	r22, 0xFF	; 255
    7e64:	7f 4f       	sbci	r23, 0xFF	; 255
    7e66:	8f 4f       	sbci	r24, 0xFF	; 255
    7e68:	9f 4f       	sbci	r25, 0xFF	; 255
    7e6a:	08 95       	ret

00007e6c <__fp_split3>:
    7e6c:	57 fd       	sbrc	r21, 7
    7e6e:	90 58       	subi	r25, 0x80	; 128
    7e70:	44 0f       	add	r20, r20
    7e72:	55 1f       	adc	r21, r21
    7e74:	59 f0       	breq	.+22     	; 0x7e8c <__fp_splitA+0x10>
    7e76:	5f 3f       	cpi	r21, 0xFF	; 255
    7e78:	71 f0       	breq	.+28     	; 0x7e96 <__fp_splitA+0x1a>
    7e7a:	47 95       	ror	r20

00007e7c <__fp_splitA>:
    7e7c:	88 0f       	add	r24, r24
    7e7e:	97 fb       	bst	r25, 7
    7e80:	99 1f       	adc	r25, r25
    7e82:	61 f0       	breq	.+24     	; 0x7e9c <__fp_splitA+0x20>
    7e84:	9f 3f       	cpi	r25, 0xFF	; 255
    7e86:	79 f0       	breq	.+30     	; 0x7ea6 <__fp_splitA+0x2a>
    7e88:	87 95       	ror	r24
    7e8a:	08 95       	ret
    7e8c:	12 16       	cp	r1, r18
    7e8e:	13 06       	cpc	r1, r19
    7e90:	14 06       	cpc	r1, r20
    7e92:	55 1f       	adc	r21, r21
    7e94:	f2 cf       	rjmp	.-28     	; 0x7e7a <__fp_split3+0xe>
    7e96:	46 95       	lsr	r20
    7e98:	f1 df       	rcall	.-30     	; 0x7e7c <__fp_splitA>
    7e9a:	08 c0       	rjmp	.+16     	; 0x7eac <__fp_splitA+0x30>
    7e9c:	16 16       	cp	r1, r22
    7e9e:	17 06       	cpc	r1, r23
    7ea0:	18 06       	cpc	r1, r24
    7ea2:	99 1f       	adc	r25, r25
    7ea4:	f1 cf       	rjmp	.-30     	; 0x7e88 <__fp_splitA+0xc>
    7ea6:	86 95       	lsr	r24
    7ea8:	71 05       	cpc	r23, r1
    7eaa:	61 05       	cpc	r22, r1
    7eac:	08 94       	sec
    7eae:	08 95       	ret

00007eb0 <__fp_zero>:
    7eb0:	e8 94       	clt

00007eb2 <__fp_szero>:
    7eb2:	bb 27       	eor	r27, r27
    7eb4:	66 27       	eor	r22, r22
    7eb6:	77 27       	eor	r23, r23
    7eb8:	cb 01       	movw	r24, r22
    7eba:	97 f9       	bld	r25, 7
    7ebc:	08 95       	ret

00007ebe <__gesf2>:
    7ebe:	0e 94 ea 3e 	call	0x7dd4	; 0x7dd4 <__fp_cmp>
    7ec2:	08 f4       	brcc	.+2      	; 0x7ec6 <__gesf2+0x8>
    7ec4:	8f ef       	ldi	r24, 0xFF	; 255
    7ec6:	08 95       	ret

00007ec8 <__mulsf3>:
    7ec8:	0e 94 77 3f 	call	0x7eee	; 0x7eee <__mulsf3x>
    7ecc:	0c 94 25 3f 	jmp	0x7e4a	; 0x7e4a <__fp_round>
    7ed0:	0e 94 17 3f 	call	0x7e2e	; 0x7e2e <__fp_pscA>
    7ed4:	38 f0       	brcs	.+14     	; 0x7ee4 <__mulsf3+0x1c>
    7ed6:	0e 94 1e 3f 	call	0x7e3c	; 0x7e3c <__fp_pscB>
    7eda:	20 f0       	brcs	.+8      	; 0x7ee4 <__mulsf3+0x1c>
    7edc:	95 23       	and	r25, r21
    7ede:	11 f0       	breq	.+4      	; 0x7ee4 <__mulsf3+0x1c>
    7ee0:	0c 94 0e 3f 	jmp	0x7e1c	; 0x7e1c <__fp_inf>
    7ee4:	0c 94 14 3f 	jmp	0x7e28	; 0x7e28 <__fp_nan>
    7ee8:	11 24       	eor	r1, r1
    7eea:	0c 94 59 3f 	jmp	0x7eb2	; 0x7eb2 <__fp_szero>

00007eee <__mulsf3x>:
    7eee:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <__fp_split3>
    7ef2:	70 f3       	brcs	.-36     	; 0x7ed0 <__mulsf3+0x8>

00007ef4 <__mulsf3_pse>:
    7ef4:	95 9f       	mul	r25, r21
    7ef6:	c1 f3       	breq	.-16     	; 0x7ee8 <__mulsf3+0x20>
    7ef8:	95 0f       	add	r25, r21
    7efa:	50 e0       	ldi	r21, 0x00	; 0
    7efc:	55 1f       	adc	r21, r21
    7efe:	62 9f       	mul	r22, r18
    7f00:	f0 01       	movw	r30, r0
    7f02:	72 9f       	mul	r23, r18
    7f04:	bb 27       	eor	r27, r27
    7f06:	f0 0d       	add	r31, r0
    7f08:	b1 1d       	adc	r27, r1
    7f0a:	63 9f       	mul	r22, r19
    7f0c:	aa 27       	eor	r26, r26
    7f0e:	f0 0d       	add	r31, r0
    7f10:	b1 1d       	adc	r27, r1
    7f12:	aa 1f       	adc	r26, r26
    7f14:	64 9f       	mul	r22, r20
    7f16:	66 27       	eor	r22, r22
    7f18:	b0 0d       	add	r27, r0
    7f1a:	a1 1d       	adc	r26, r1
    7f1c:	66 1f       	adc	r22, r22
    7f1e:	82 9f       	mul	r24, r18
    7f20:	22 27       	eor	r18, r18
    7f22:	b0 0d       	add	r27, r0
    7f24:	a1 1d       	adc	r26, r1
    7f26:	62 1f       	adc	r22, r18
    7f28:	73 9f       	mul	r23, r19
    7f2a:	b0 0d       	add	r27, r0
    7f2c:	a1 1d       	adc	r26, r1
    7f2e:	62 1f       	adc	r22, r18
    7f30:	83 9f       	mul	r24, r19
    7f32:	a0 0d       	add	r26, r0
    7f34:	61 1d       	adc	r22, r1
    7f36:	22 1f       	adc	r18, r18
    7f38:	74 9f       	mul	r23, r20
    7f3a:	33 27       	eor	r19, r19
    7f3c:	a0 0d       	add	r26, r0
    7f3e:	61 1d       	adc	r22, r1
    7f40:	23 1f       	adc	r18, r19
    7f42:	84 9f       	mul	r24, r20
    7f44:	60 0d       	add	r22, r0
    7f46:	21 1d       	adc	r18, r1
    7f48:	82 2f       	mov	r24, r18
    7f4a:	76 2f       	mov	r23, r22
    7f4c:	6a 2f       	mov	r22, r26
    7f4e:	11 24       	eor	r1, r1
    7f50:	9f 57       	subi	r25, 0x7F	; 127
    7f52:	50 40       	sbci	r21, 0x00	; 0
    7f54:	9a f0       	brmi	.+38     	; 0x7f7c <__mulsf3_pse+0x88>
    7f56:	f1 f0       	breq	.+60     	; 0x7f94 <__mulsf3_pse+0xa0>
    7f58:	88 23       	and	r24, r24
    7f5a:	4a f0       	brmi	.+18     	; 0x7f6e <__mulsf3_pse+0x7a>
    7f5c:	ee 0f       	add	r30, r30
    7f5e:	ff 1f       	adc	r31, r31
    7f60:	bb 1f       	adc	r27, r27
    7f62:	66 1f       	adc	r22, r22
    7f64:	77 1f       	adc	r23, r23
    7f66:	88 1f       	adc	r24, r24
    7f68:	91 50       	subi	r25, 0x01	; 1
    7f6a:	50 40       	sbci	r21, 0x00	; 0
    7f6c:	a9 f7       	brne	.-22     	; 0x7f58 <__mulsf3_pse+0x64>
    7f6e:	9e 3f       	cpi	r25, 0xFE	; 254
    7f70:	51 05       	cpc	r21, r1
    7f72:	80 f0       	brcs	.+32     	; 0x7f94 <__mulsf3_pse+0xa0>
    7f74:	0c 94 0e 3f 	jmp	0x7e1c	; 0x7e1c <__fp_inf>
    7f78:	0c 94 59 3f 	jmp	0x7eb2	; 0x7eb2 <__fp_szero>
    7f7c:	5f 3f       	cpi	r21, 0xFF	; 255
    7f7e:	e4 f3       	brlt	.-8      	; 0x7f78 <__mulsf3_pse+0x84>
    7f80:	98 3e       	cpi	r25, 0xE8	; 232
    7f82:	d4 f3       	brlt	.-12     	; 0x7f78 <__mulsf3_pse+0x84>
    7f84:	86 95       	lsr	r24
    7f86:	77 95       	ror	r23
    7f88:	67 95       	ror	r22
    7f8a:	b7 95       	ror	r27
    7f8c:	f7 95       	ror	r31
    7f8e:	e7 95       	ror	r30
    7f90:	9f 5f       	subi	r25, 0xFF	; 255
    7f92:	c1 f7       	brne	.-16     	; 0x7f84 <__mulsf3_pse+0x90>
    7f94:	fe 2b       	or	r31, r30
    7f96:	88 0f       	add	r24, r24
    7f98:	91 1d       	adc	r25, r1
    7f9a:	96 95       	lsr	r25
    7f9c:	87 95       	ror	r24
    7f9e:	97 f9       	bld	r25, 7
    7fa0:	08 95       	ret

00007fa2 <__mulsi3>:
    7fa2:	db 01       	movw	r26, r22
    7fa4:	8f 93       	push	r24
    7fa6:	9f 93       	push	r25
    7fa8:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__muluhisi3>
    7fac:	bf 91       	pop	r27
    7fae:	af 91       	pop	r26
    7fb0:	a2 9f       	mul	r26, r18
    7fb2:	80 0d       	add	r24, r0
    7fb4:	91 1d       	adc	r25, r1
    7fb6:	a3 9f       	mul	r26, r19
    7fb8:	90 0d       	add	r25, r0
    7fba:	b2 9f       	mul	r27, r18
    7fbc:	90 0d       	add	r25, r0
    7fbe:	11 24       	eor	r1, r1
    7fc0:	08 95       	ret

00007fc2 <__udivmodhi4>:
    7fc2:	aa 1b       	sub	r26, r26
    7fc4:	bb 1b       	sub	r27, r27
    7fc6:	51 e1       	ldi	r21, 0x11	; 17
    7fc8:	07 c0       	rjmp	.+14     	; 0x7fd8 <__udivmodhi4_ep>

00007fca <__udivmodhi4_loop>:
    7fca:	aa 1f       	adc	r26, r26
    7fcc:	bb 1f       	adc	r27, r27
    7fce:	a6 17       	cp	r26, r22
    7fd0:	b7 07       	cpc	r27, r23
    7fd2:	10 f0       	brcs	.+4      	; 0x7fd8 <__udivmodhi4_ep>
    7fd4:	a6 1b       	sub	r26, r22
    7fd6:	b7 0b       	sbc	r27, r23

00007fd8 <__udivmodhi4_ep>:
    7fd8:	88 1f       	adc	r24, r24
    7fda:	99 1f       	adc	r25, r25
    7fdc:	5a 95       	dec	r21
    7fde:	a9 f7       	brne	.-22     	; 0x7fca <__udivmodhi4_loop>
    7fe0:	80 95       	com	r24
    7fe2:	90 95       	com	r25
    7fe4:	bc 01       	movw	r22, r24
    7fe6:	cd 01       	movw	r24, r26
    7fe8:	08 95       	ret

00007fea <__divmodhi4>:
    7fea:	97 fb       	bst	r25, 7
    7fec:	07 2e       	mov	r0, r23
    7fee:	16 f4       	brtc	.+4      	; 0x7ff4 <__divmodhi4+0xa>
    7ff0:	00 94       	com	r0
    7ff2:	07 d0       	rcall	.+14     	; 0x8002 <__divmodhi4_neg1>
    7ff4:	77 fd       	sbrc	r23, 7
    7ff6:	09 d0       	rcall	.+18     	; 0x800a <__divmodhi4_neg2>
    7ff8:	0e 94 e1 3f 	call	0x7fc2	; 0x7fc2 <__udivmodhi4>
    7ffc:	07 fc       	sbrc	r0, 7
    7ffe:	05 d0       	rcall	.+10     	; 0x800a <__divmodhi4_neg2>
    8000:	3e f4       	brtc	.+14     	; 0x8010 <__divmodhi4_exit>

00008002 <__divmodhi4_neg1>:
    8002:	90 95       	com	r25
    8004:	81 95       	neg	r24
    8006:	9f 4f       	sbci	r25, 0xFF	; 255
    8008:	08 95       	ret

0000800a <__divmodhi4_neg2>:
    800a:	70 95       	com	r23
    800c:	61 95       	neg	r22
    800e:	7f 4f       	sbci	r23, 0xFF	; 255

00008010 <__divmodhi4_exit>:
    8010:	08 95       	ret

00008012 <__udivmodsi4>:
    8012:	a1 e2       	ldi	r26, 0x21	; 33
    8014:	1a 2e       	mov	r1, r26
    8016:	aa 1b       	sub	r26, r26
    8018:	bb 1b       	sub	r27, r27
    801a:	fd 01       	movw	r30, r26
    801c:	0d c0       	rjmp	.+26     	; 0x8038 <__udivmodsi4_ep>

0000801e <__udivmodsi4_loop>:
    801e:	aa 1f       	adc	r26, r26
    8020:	bb 1f       	adc	r27, r27
    8022:	ee 1f       	adc	r30, r30
    8024:	ff 1f       	adc	r31, r31
    8026:	a2 17       	cp	r26, r18
    8028:	b3 07       	cpc	r27, r19
    802a:	e4 07       	cpc	r30, r20
    802c:	f5 07       	cpc	r31, r21
    802e:	20 f0       	brcs	.+8      	; 0x8038 <__udivmodsi4_ep>
    8030:	a2 1b       	sub	r26, r18
    8032:	b3 0b       	sbc	r27, r19
    8034:	e4 0b       	sbc	r30, r20
    8036:	f5 0b       	sbc	r31, r21

00008038 <__udivmodsi4_ep>:
    8038:	66 1f       	adc	r22, r22
    803a:	77 1f       	adc	r23, r23
    803c:	88 1f       	adc	r24, r24
    803e:	99 1f       	adc	r25, r25
    8040:	1a 94       	dec	r1
    8042:	69 f7       	brne	.-38     	; 0x801e <__udivmodsi4_loop>
    8044:	60 95       	com	r22
    8046:	70 95       	com	r23
    8048:	80 95       	com	r24
    804a:	90 95       	com	r25
    804c:	9b 01       	movw	r18, r22
    804e:	ac 01       	movw	r20, r24
    8050:	bd 01       	movw	r22, r26
    8052:	cf 01       	movw	r24, r30
    8054:	08 95       	ret

00008056 <__divmodsi4>:
    8056:	05 2e       	mov	r0, r21
    8058:	97 fb       	bst	r25, 7
    805a:	1e f4       	brtc	.+6      	; 0x8062 <__divmodsi4+0xc>
    805c:	00 94       	com	r0
    805e:	0e 94 42 40 	call	0x8084	; 0x8084 <__negsi2>
    8062:	57 fd       	sbrc	r21, 7
    8064:	07 d0       	rcall	.+14     	; 0x8074 <__divmodsi4_neg2>
    8066:	0e 94 09 40 	call	0x8012	; 0x8012 <__udivmodsi4>
    806a:	07 fc       	sbrc	r0, 7
    806c:	03 d0       	rcall	.+6      	; 0x8074 <__divmodsi4_neg2>
    806e:	4e f4       	brtc	.+18     	; 0x8082 <__divmodsi4_exit>
    8070:	0c 94 42 40 	jmp	0x8084	; 0x8084 <__negsi2>

00008074 <__divmodsi4_neg2>:
    8074:	50 95       	com	r21
    8076:	40 95       	com	r20
    8078:	30 95       	com	r19
    807a:	21 95       	neg	r18
    807c:	3f 4f       	sbci	r19, 0xFF	; 255
    807e:	4f 4f       	sbci	r20, 0xFF	; 255
    8080:	5f 4f       	sbci	r21, 0xFF	; 255

00008082 <__divmodsi4_exit>:
    8082:	08 95       	ret

00008084 <__negsi2>:
    8084:	90 95       	com	r25
    8086:	80 95       	com	r24
    8088:	70 95       	com	r23
    808a:	61 95       	neg	r22
    808c:	7f 4f       	sbci	r23, 0xFF	; 255
    808e:	8f 4f       	sbci	r24, 0xFF	; 255
    8090:	9f 4f       	sbci	r25, 0xFF	; 255
    8092:	08 95       	ret

00008094 <__tablejump2__>:
    8094:	ee 0f       	add	r30, r30
    8096:	ff 1f       	adc	r31, r31
    8098:	00 24       	eor	r0, r0
    809a:	00 1c       	adc	r0, r0
    809c:	0b be       	out	0x3b, r0	; 59
    809e:	07 90       	elpm	r0, Z+
    80a0:	f6 91       	elpm	r31, Z
    80a2:	e0 2d       	mov	r30, r0
    80a4:	09 94       	ijmp

000080a6 <__umulhisi3>:
    80a6:	a2 9f       	mul	r26, r18
    80a8:	b0 01       	movw	r22, r0
    80aa:	b3 9f       	mul	r27, r19
    80ac:	c0 01       	movw	r24, r0
    80ae:	a3 9f       	mul	r26, r19
    80b0:	70 0d       	add	r23, r0
    80b2:	81 1d       	adc	r24, r1
    80b4:	11 24       	eor	r1, r1
    80b6:	91 1d       	adc	r25, r1
    80b8:	b2 9f       	mul	r27, r18
    80ba:	70 0d       	add	r23, r0
    80bc:	81 1d       	adc	r24, r1
    80be:	11 24       	eor	r1, r1
    80c0:	91 1d       	adc	r25, r1
    80c2:	08 95       	ret

000080c4 <__usmulhisi3>:
    80c4:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__umulhisi3>

000080c8 <__usmulhisi3_tail>:
    80c8:	b7 ff       	sbrs	r27, 7
    80ca:	08 95       	ret
    80cc:	82 1b       	sub	r24, r18
    80ce:	93 0b       	sbc	r25, r19
    80d0:	08 95       	ret

000080d2 <__muluhisi3>:
    80d2:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__umulhisi3>
    80d6:	a5 9f       	mul	r26, r21
    80d8:	90 0d       	add	r25, r0
    80da:	b4 9f       	mul	r27, r20
    80dc:	90 0d       	add	r25, r0
    80de:	a4 9f       	mul	r26, r20
    80e0:	80 0d       	add	r24, r0
    80e2:	91 1d       	adc	r25, r1
    80e4:	11 24       	eor	r1, r1
    80e6:	08 95       	ret

000080e8 <__mulshisi3>:
    80e8:	b7 ff       	sbrs	r27, 7
    80ea:	0c 94 69 40 	jmp	0x80d2	; 0x80d2 <__muluhisi3>

000080ee <__mulohisi3>:
    80ee:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__muluhisi3>
    80f2:	82 1b       	sub	r24, r18
    80f4:	93 0b       	sbc	r25, r19
    80f6:	08 95       	ret

000080f8 <malloc>:
    80f8:	0f 93       	push	r16
    80fa:	1f 93       	push	r17
    80fc:	cf 93       	push	r28
    80fe:	df 93       	push	r29
    8100:	82 30       	cpi	r24, 0x02	; 2
    8102:	91 05       	cpc	r25, r1
    8104:	10 f4       	brcc	.+4      	; 0x810a <malloc+0x12>
    8106:	82 e0       	ldi	r24, 0x02	; 2
    8108:	90 e0       	ldi	r25, 0x00	; 0
    810a:	e0 91 5e 48 	lds	r30, 0x485E	; 0x80485e <__flp>
    810e:	f0 91 5f 48 	lds	r31, 0x485F	; 0x80485f <__flp+0x1>
    8112:	20 e0       	ldi	r18, 0x00	; 0
    8114:	30 e0       	ldi	r19, 0x00	; 0
    8116:	a0 e0       	ldi	r26, 0x00	; 0
    8118:	b0 e0       	ldi	r27, 0x00	; 0
    811a:	30 97       	sbiw	r30, 0x00	; 0
    811c:	19 f1       	breq	.+70     	; 0x8164 <malloc+0x6c>
    811e:	40 81       	ld	r20, Z
    8120:	51 81       	ldd	r21, Z+1	; 0x01
    8122:	02 81       	ldd	r16, Z+2	; 0x02
    8124:	13 81       	ldd	r17, Z+3	; 0x03
    8126:	48 17       	cp	r20, r24
    8128:	59 07       	cpc	r21, r25
    812a:	c8 f0       	brcs	.+50     	; 0x815e <malloc+0x66>
    812c:	84 17       	cp	r24, r20
    812e:	95 07       	cpc	r25, r21
    8130:	69 f4       	brne	.+26     	; 0x814c <malloc+0x54>
    8132:	10 97       	sbiw	r26, 0x00	; 0
    8134:	31 f0       	breq	.+12     	; 0x8142 <malloc+0x4a>
    8136:	12 96       	adiw	r26, 0x02	; 2
    8138:	0c 93       	st	X, r16
    813a:	12 97       	sbiw	r26, 0x02	; 2
    813c:	13 96       	adiw	r26, 0x03	; 3
    813e:	1c 93       	st	X, r17
    8140:	27 c0       	rjmp	.+78     	; 0x8190 <malloc+0x98>
    8142:	00 93 5e 48 	sts	0x485E, r16	; 0x80485e <__flp>
    8146:	10 93 5f 48 	sts	0x485F, r17	; 0x80485f <__flp+0x1>
    814a:	22 c0       	rjmp	.+68     	; 0x8190 <malloc+0x98>
    814c:	21 15       	cp	r18, r1
    814e:	31 05       	cpc	r19, r1
    8150:	19 f0       	breq	.+6      	; 0x8158 <malloc+0x60>
    8152:	42 17       	cp	r20, r18
    8154:	53 07       	cpc	r21, r19
    8156:	18 f4       	brcc	.+6      	; 0x815e <malloc+0x66>
    8158:	9a 01       	movw	r18, r20
    815a:	bd 01       	movw	r22, r26
    815c:	ef 01       	movw	r28, r30
    815e:	df 01       	movw	r26, r30
    8160:	f8 01       	movw	r30, r16
    8162:	db cf       	rjmp	.-74     	; 0x811a <malloc+0x22>
    8164:	21 15       	cp	r18, r1
    8166:	31 05       	cpc	r19, r1
    8168:	f9 f0       	breq	.+62     	; 0x81a8 <malloc+0xb0>
    816a:	28 1b       	sub	r18, r24
    816c:	39 0b       	sbc	r19, r25
    816e:	24 30       	cpi	r18, 0x04	; 4
    8170:	31 05       	cpc	r19, r1
    8172:	80 f4       	brcc	.+32     	; 0x8194 <malloc+0x9c>
    8174:	8a 81       	ldd	r24, Y+2	; 0x02
    8176:	9b 81       	ldd	r25, Y+3	; 0x03
    8178:	61 15       	cp	r22, r1
    817a:	71 05       	cpc	r23, r1
    817c:	21 f0       	breq	.+8      	; 0x8186 <malloc+0x8e>
    817e:	fb 01       	movw	r30, r22
    8180:	82 83       	std	Z+2, r24	; 0x02
    8182:	93 83       	std	Z+3, r25	; 0x03
    8184:	04 c0       	rjmp	.+8      	; 0x818e <malloc+0x96>
    8186:	80 93 5e 48 	sts	0x485E, r24	; 0x80485e <__flp>
    818a:	90 93 5f 48 	sts	0x485F, r25	; 0x80485f <__flp+0x1>
    818e:	fe 01       	movw	r30, r28
    8190:	32 96       	adiw	r30, 0x02	; 2
    8192:	44 c0       	rjmp	.+136    	; 0x821c <malloc+0x124>
    8194:	fe 01       	movw	r30, r28
    8196:	e2 0f       	add	r30, r18
    8198:	f3 1f       	adc	r31, r19
    819a:	81 93       	st	Z+, r24
    819c:	91 93       	st	Z+, r25
    819e:	22 50       	subi	r18, 0x02	; 2
    81a0:	31 09       	sbc	r19, r1
    81a2:	28 83       	st	Y, r18
    81a4:	39 83       	std	Y+1, r19	; 0x01
    81a6:	3a c0       	rjmp	.+116    	; 0x821c <malloc+0x124>
    81a8:	20 91 5c 48 	lds	r18, 0x485C	; 0x80485c <__brkval>
    81ac:	30 91 5d 48 	lds	r19, 0x485D	; 0x80485d <__brkval+0x1>
    81b0:	23 2b       	or	r18, r19
    81b2:	41 f4       	brne	.+16     	; 0x81c4 <malloc+0xcc>
    81b4:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    81b8:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    81bc:	20 93 5c 48 	sts	0x485C, r18	; 0x80485c <__brkval>
    81c0:	30 93 5d 48 	sts	0x485D, r19	; 0x80485d <__brkval+0x1>
    81c4:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    81c8:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    81cc:	21 15       	cp	r18, r1
    81ce:	31 05       	cpc	r19, r1
    81d0:	41 f4       	brne	.+16     	; 0x81e2 <malloc+0xea>
    81d2:	2d b7       	in	r18, 0x3d	; 61
    81d4:	3e b7       	in	r19, 0x3e	; 62
    81d6:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    81da:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    81de:	24 1b       	sub	r18, r20
    81e0:	35 0b       	sbc	r19, r21
    81e2:	e0 91 5c 48 	lds	r30, 0x485C	; 0x80485c <__brkval>
    81e6:	f0 91 5d 48 	lds	r31, 0x485D	; 0x80485d <__brkval+0x1>
    81ea:	e2 17       	cp	r30, r18
    81ec:	f3 07       	cpc	r31, r19
    81ee:	a0 f4       	brcc	.+40     	; 0x8218 <malloc+0x120>
    81f0:	2e 1b       	sub	r18, r30
    81f2:	3f 0b       	sbc	r19, r31
    81f4:	28 17       	cp	r18, r24
    81f6:	39 07       	cpc	r19, r25
    81f8:	78 f0       	brcs	.+30     	; 0x8218 <malloc+0x120>
    81fa:	ac 01       	movw	r20, r24
    81fc:	4e 5f       	subi	r20, 0xFE	; 254
    81fe:	5f 4f       	sbci	r21, 0xFF	; 255
    8200:	24 17       	cp	r18, r20
    8202:	35 07       	cpc	r19, r21
    8204:	48 f0       	brcs	.+18     	; 0x8218 <malloc+0x120>
    8206:	4e 0f       	add	r20, r30
    8208:	5f 1f       	adc	r21, r31
    820a:	40 93 5c 48 	sts	0x485C, r20	; 0x80485c <__brkval>
    820e:	50 93 5d 48 	sts	0x485D, r21	; 0x80485d <__brkval+0x1>
    8212:	81 93       	st	Z+, r24
    8214:	91 93       	st	Z+, r25
    8216:	02 c0       	rjmp	.+4      	; 0x821c <malloc+0x124>
    8218:	e0 e0       	ldi	r30, 0x00	; 0
    821a:	f0 e0       	ldi	r31, 0x00	; 0
    821c:	cf 01       	movw	r24, r30
    821e:	df 91       	pop	r29
    8220:	cf 91       	pop	r28
    8222:	1f 91       	pop	r17
    8224:	0f 91       	pop	r16
    8226:	08 95       	ret

00008228 <free>:
    8228:	cf 93       	push	r28
    822a:	df 93       	push	r29
    822c:	00 97       	sbiw	r24, 0x00	; 0
    822e:	09 f4       	brne	.+2      	; 0x8232 <free+0xa>
    8230:	81 c0       	rjmp	.+258    	; 0x8334 <free+0x10c>
    8232:	fc 01       	movw	r30, r24
    8234:	32 97       	sbiw	r30, 0x02	; 2
    8236:	12 82       	std	Z+2, r1	; 0x02
    8238:	13 82       	std	Z+3, r1	; 0x03
    823a:	a0 91 5e 48 	lds	r26, 0x485E	; 0x80485e <__flp>
    823e:	b0 91 5f 48 	lds	r27, 0x485F	; 0x80485f <__flp+0x1>
    8242:	10 97       	sbiw	r26, 0x00	; 0
    8244:	81 f4       	brne	.+32     	; 0x8266 <free+0x3e>
    8246:	20 81       	ld	r18, Z
    8248:	31 81       	ldd	r19, Z+1	; 0x01
    824a:	82 0f       	add	r24, r18
    824c:	93 1f       	adc	r25, r19
    824e:	20 91 5c 48 	lds	r18, 0x485C	; 0x80485c <__brkval>
    8252:	30 91 5d 48 	lds	r19, 0x485D	; 0x80485d <__brkval+0x1>
    8256:	28 17       	cp	r18, r24
    8258:	39 07       	cpc	r19, r25
    825a:	51 f5       	brne	.+84     	; 0x82b0 <free+0x88>
    825c:	e0 93 5c 48 	sts	0x485C, r30	; 0x80485c <__brkval>
    8260:	f0 93 5d 48 	sts	0x485D, r31	; 0x80485d <__brkval+0x1>
    8264:	67 c0       	rjmp	.+206    	; 0x8334 <free+0x10c>
    8266:	ed 01       	movw	r28, r26
    8268:	20 e0       	ldi	r18, 0x00	; 0
    826a:	30 e0       	ldi	r19, 0x00	; 0
    826c:	ce 17       	cp	r28, r30
    826e:	df 07       	cpc	r29, r31
    8270:	40 f4       	brcc	.+16     	; 0x8282 <free+0x5a>
    8272:	4a 81       	ldd	r20, Y+2	; 0x02
    8274:	5b 81       	ldd	r21, Y+3	; 0x03
    8276:	9e 01       	movw	r18, r28
    8278:	41 15       	cp	r20, r1
    827a:	51 05       	cpc	r21, r1
    827c:	f1 f0       	breq	.+60     	; 0x82ba <free+0x92>
    827e:	ea 01       	movw	r28, r20
    8280:	f5 cf       	rjmp	.-22     	; 0x826c <free+0x44>
    8282:	c2 83       	std	Z+2, r28	; 0x02
    8284:	d3 83       	std	Z+3, r29	; 0x03
    8286:	40 81       	ld	r20, Z
    8288:	51 81       	ldd	r21, Z+1	; 0x01
    828a:	84 0f       	add	r24, r20
    828c:	95 1f       	adc	r25, r21
    828e:	c8 17       	cp	r28, r24
    8290:	d9 07       	cpc	r29, r25
    8292:	59 f4       	brne	.+22     	; 0x82aa <free+0x82>
    8294:	88 81       	ld	r24, Y
    8296:	99 81       	ldd	r25, Y+1	; 0x01
    8298:	84 0f       	add	r24, r20
    829a:	95 1f       	adc	r25, r21
    829c:	02 96       	adiw	r24, 0x02	; 2
    829e:	80 83       	st	Z, r24
    82a0:	91 83       	std	Z+1, r25	; 0x01
    82a2:	8a 81       	ldd	r24, Y+2	; 0x02
    82a4:	9b 81       	ldd	r25, Y+3	; 0x03
    82a6:	82 83       	std	Z+2, r24	; 0x02
    82a8:	93 83       	std	Z+3, r25	; 0x03
    82aa:	21 15       	cp	r18, r1
    82ac:	31 05       	cpc	r19, r1
    82ae:	29 f4       	brne	.+10     	; 0x82ba <free+0x92>
    82b0:	e0 93 5e 48 	sts	0x485E, r30	; 0x80485e <__flp>
    82b4:	f0 93 5f 48 	sts	0x485F, r31	; 0x80485f <__flp+0x1>
    82b8:	3d c0       	rjmp	.+122    	; 0x8334 <free+0x10c>
    82ba:	e9 01       	movw	r28, r18
    82bc:	ea 83       	std	Y+2, r30	; 0x02
    82be:	fb 83       	std	Y+3, r31	; 0x03
    82c0:	49 91       	ld	r20, Y+
    82c2:	59 91       	ld	r21, Y+
    82c4:	c4 0f       	add	r28, r20
    82c6:	d5 1f       	adc	r29, r21
    82c8:	ec 17       	cp	r30, r28
    82ca:	fd 07       	cpc	r31, r29
    82cc:	61 f4       	brne	.+24     	; 0x82e6 <free+0xbe>
    82ce:	80 81       	ld	r24, Z
    82d0:	91 81       	ldd	r25, Z+1	; 0x01
    82d2:	84 0f       	add	r24, r20
    82d4:	95 1f       	adc	r25, r21
    82d6:	02 96       	adiw	r24, 0x02	; 2
    82d8:	e9 01       	movw	r28, r18
    82da:	88 83       	st	Y, r24
    82dc:	99 83       	std	Y+1, r25	; 0x01
    82de:	82 81       	ldd	r24, Z+2	; 0x02
    82e0:	93 81       	ldd	r25, Z+3	; 0x03
    82e2:	8a 83       	std	Y+2, r24	; 0x02
    82e4:	9b 83       	std	Y+3, r25	; 0x03
    82e6:	e0 e0       	ldi	r30, 0x00	; 0
    82e8:	f0 e0       	ldi	r31, 0x00	; 0
    82ea:	12 96       	adiw	r26, 0x02	; 2
    82ec:	8d 91       	ld	r24, X+
    82ee:	9c 91       	ld	r25, X
    82f0:	13 97       	sbiw	r26, 0x03	; 3
    82f2:	00 97       	sbiw	r24, 0x00	; 0
    82f4:	19 f0       	breq	.+6      	; 0x82fc <free+0xd4>
    82f6:	fd 01       	movw	r30, r26
    82f8:	dc 01       	movw	r26, r24
    82fa:	f7 cf       	rjmp	.-18     	; 0x82ea <free+0xc2>
    82fc:	8d 91       	ld	r24, X+
    82fe:	9c 91       	ld	r25, X
    8300:	11 97       	sbiw	r26, 0x01	; 1
    8302:	9d 01       	movw	r18, r26
    8304:	2e 5f       	subi	r18, 0xFE	; 254
    8306:	3f 4f       	sbci	r19, 0xFF	; 255
    8308:	82 0f       	add	r24, r18
    830a:	93 1f       	adc	r25, r19
    830c:	20 91 5c 48 	lds	r18, 0x485C	; 0x80485c <__brkval>
    8310:	30 91 5d 48 	lds	r19, 0x485D	; 0x80485d <__brkval+0x1>
    8314:	28 17       	cp	r18, r24
    8316:	39 07       	cpc	r19, r25
    8318:	69 f4       	brne	.+26     	; 0x8334 <free+0x10c>
    831a:	30 97       	sbiw	r30, 0x00	; 0
    831c:	29 f4       	brne	.+10     	; 0x8328 <free+0x100>
    831e:	10 92 5e 48 	sts	0x485E, r1	; 0x80485e <__flp>
    8322:	10 92 5f 48 	sts	0x485F, r1	; 0x80485f <__flp+0x1>
    8326:	02 c0       	rjmp	.+4      	; 0x832c <free+0x104>
    8328:	12 82       	std	Z+2, r1	; 0x02
    832a:	13 82       	std	Z+3, r1	; 0x03
    832c:	a0 93 5c 48 	sts	0x485C, r26	; 0x80485c <__brkval>
    8330:	b0 93 5d 48 	sts	0x485D, r27	; 0x80485d <__brkval+0x1>
    8334:	df 91       	pop	r29
    8336:	cf 91       	pop	r28
    8338:	08 95       	ret

0000833a <atoi>:
    833a:	fc 01       	movw	r30, r24
    833c:	88 27       	eor	r24, r24
    833e:	99 27       	eor	r25, r25
    8340:	e8 94       	clt
    8342:	21 91       	ld	r18, Z+
    8344:	20 32       	cpi	r18, 0x20	; 32
    8346:	e9 f3       	breq	.-6      	; 0x8342 <atoi+0x8>
    8348:	29 30       	cpi	r18, 0x09	; 9
    834a:	10 f0       	brcs	.+4      	; 0x8350 <atoi+0x16>
    834c:	2e 30       	cpi	r18, 0x0E	; 14
    834e:	c8 f3       	brcs	.-14     	; 0x8342 <atoi+0x8>
    8350:	2b 32       	cpi	r18, 0x2B	; 43
    8352:	41 f0       	breq	.+16     	; 0x8364 <atoi+0x2a>
    8354:	2d 32       	cpi	r18, 0x2D	; 45
    8356:	39 f4       	brne	.+14     	; 0x8366 <atoi+0x2c>
    8358:	68 94       	set
    835a:	04 c0       	rjmp	.+8      	; 0x8364 <atoi+0x2a>
    835c:	0e 94 29 42 	call	0x8452	; 0x8452 <__mulhi_const_10>
    8360:	82 0f       	add	r24, r18
    8362:	91 1d       	adc	r25, r1
    8364:	21 91       	ld	r18, Z+
    8366:	20 53       	subi	r18, 0x30	; 48
    8368:	2a 30       	cpi	r18, 0x0A	; 10
    836a:	c0 f3       	brcs	.-16     	; 0x835c <atoi+0x22>
    836c:	1e f4       	brtc	.+6      	; 0x8374 <atoi+0x3a>
    836e:	90 95       	com	r25
    8370:	81 95       	neg	r24
    8372:	9f 4f       	sbci	r25, 0xFF	; 255
    8374:	08 95       	ret

00008376 <atol>:
    8376:	1f 93       	push	r17
    8378:	fc 01       	movw	r30, r24
    837a:	99 27       	eor	r25, r25
    837c:	88 27       	eor	r24, r24
    837e:	bc 01       	movw	r22, r24
    8380:	e8 94       	clt
    8382:	11 91       	ld	r17, Z+
    8384:	10 32       	cpi	r17, 0x20	; 32
    8386:	e9 f3       	breq	.-6      	; 0x8382 <atol+0xc>
    8388:	19 30       	cpi	r17, 0x09	; 9
    838a:	10 f0       	brcs	.+4      	; 0x8390 <atol+0x1a>
    838c:	1e 30       	cpi	r17, 0x0E	; 14
    838e:	c8 f3       	brcs	.-14     	; 0x8382 <atol+0xc>
    8390:	1b 32       	cpi	r17, 0x2B	; 43
    8392:	51 f0       	breq	.+20     	; 0x83a8 <atol+0x32>
    8394:	1d 32       	cpi	r17, 0x2D	; 45
    8396:	49 f4       	brne	.+18     	; 0x83aa <atol+0x34>
    8398:	68 94       	set
    839a:	06 c0       	rjmp	.+12     	; 0x83a8 <atol+0x32>
    839c:	0e 94 14 42 	call	0x8428	; 0x8428 <__mulsi_const_10>
    83a0:	61 0f       	add	r22, r17
    83a2:	71 1d       	adc	r23, r1
    83a4:	81 1d       	adc	r24, r1
    83a6:	91 1d       	adc	r25, r1
    83a8:	11 91       	ld	r17, Z+
    83aa:	10 53       	subi	r17, 0x30	; 48
    83ac:	1a 30       	cpi	r17, 0x0A	; 10
    83ae:	b0 f3       	brcs	.-20     	; 0x839c <atol+0x26>
    83b0:	3e f4       	brtc	.+14     	; 0x83c0 <atol+0x4a>
    83b2:	90 95       	com	r25
    83b4:	80 95       	com	r24
    83b6:	70 95       	com	r23
    83b8:	61 95       	neg	r22
    83ba:	7f 4f       	sbci	r23, 0xFF	; 255
    83bc:	8f 4f       	sbci	r24, 0xFF	; 255
    83be:	9f 4f       	sbci	r25, 0xFF	; 255
    83c0:	1f 91       	pop	r17
    83c2:	08 95       	ret

000083c4 <toupper>:
    83c4:	91 11       	cpse	r25, r1
    83c6:	08 95       	ret
    83c8:	81 56       	subi	r24, 0x61	; 97
    83ca:	8a 51       	subi	r24, 0x1A	; 26
    83cc:	08 f4       	brcc	.+2      	; 0x83d0 <toupper+0xc>
    83ce:	80 52       	subi	r24, 0x20	; 32
    83d0:	85 58       	subi	r24, 0x85	; 133
    83d2:	08 95       	ret

000083d4 <strcat>:
    83d4:	fb 01       	movw	r30, r22
    83d6:	dc 01       	movw	r26, r24
    83d8:	0d 90       	ld	r0, X+
    83da:	00 20       	and	r0, r0
    83dc:	e9 f7       	brne	.-6      	; 0x83d8 <strcat+0x4>
    83de:	11 97       	sbiw	r26, 0x01	; 1
    83e0:	01 90       	ld	r0, Z+
    83e2:	0d 92       	st	X+, r0
    83e4:	00 20       	and	r0, r0
    83e6:	e1 f7       	brne	.-8      	; 0x83e0 <strcat+0xc>
    83e8:	08 95       	ret

000083ea <strcpy>:
    83ea:	fb 01       	movw	r30, r22
    83ec:	dc 01       	movw	r26, r24
    83ee:	01 90       	ld	r0, Z+
    83f0:	0d 92       	st	X+, r0
    83f2:	00 20       	and	r0, r0
    83f4:	e1 f7       	brne	.-8      	; 0x83ee <strcpy+0x4>
    83f6:	08 95       	ret

000083f8 <strlen>:
    83f8:	fc 01       	movw	r30, r24
    83fa:	01 90       	ld	r0, Z+
    83fc:	00 20       	and	r0, r0
    83fe:	e9 f7       	brne	.-6      	; 0x83fa <strlen+0x2>
    8400:	80 95       	com	r24
    8402:	90 95       	com	r25
    8404:	8e 0f       	add	r24, r30
    8406:	9f 1f       	adc	r25, r31
    8408:	08 95       	ret

0000840a <strncpy>:
    840a:	fb 01       	movw	r30, r22
    840c:	dc 01       	movw	r26, r24
    840e:	41 50       	subi	r20, 0x01	; 1
    8410:	50 40       	sbci	r21, 0x00	; 0
    8412:	48 f0       	brcs	.+18     	; 0x8426 <strncpy+0x1c>
    8414:	01 90       	ld	r0, Z+
    8416:	0d 92       	st	X+, r0
    8418:	00 20       	and	r0, r0
    841a:	c9 f7       	brne	.-14     	; 0x840e <strncpy+0x4>
    841c:	01 c0       	rjmp	.+2      	; 0x8420 <strncpy+0x16>
    841e:	1d 92       	st	X+, r1
    8420:	41 50       	subi	r20, 0x01	; 1
    8422:	50 40       	sbci	r21, 0x00	; 0
    8424:	e0 f7       	brcc	.-8      	; 0x841e <strncpy+0x14>
    8426:	08 95       	ret

00008428 <__mulsi_const_10>:
    8428:	59 2f       	mov	r21, r25
    842a:	48 2f       	mov	r20, r24
    842c:	37 2f       	mov	r19, r23
    842e:	26 2f       	mov	r18, r22
    8430:	66 0f       	add	r22, r22
    8432:	77 1f       	adc	r23, r23
    8434:	88 1f       	adc	r24, r24
    8436:	99 1f       	adc	r25, r25
    8438:	66 0f       	add	r22, r22
    843a:	77 1f       	adc	r23, r23
    843c:	88 1f       	adc	r24, r24
    843e:	99 1f       	adc	r25, r25
    8440:	62 0f       	add	r22, r18
    8442:	73 1f       	adc	r23, r19
    8444:	84 1f       	adc	r24, r20
    8446:	95 1f       	adc	r25, r21
    8448:	66 0f       	add	r22, r22
    844a:	77 1f       	adc	r23, r23
    844c:	88 1f       	adc	r24, r24
    844e:	99 1f       	adc	r25, r25
    8450:	08 95       	ret

00008452 <__mulhi_const_10>:
    8452:	7a e0       	ldi	r23, 0x0A	; 10
    8454:	97 9f       	mul	r25, r23
    8456:	90 2d       	mov	r25, r0
    8458:	87 9f       	mul	r24, r23
    845a:	80 2d       	mov	r24, r0
    845c:	91 0d       	add	r25, r1
    845e:	11 24       	eor	r1, r1
    8460:	08 95       	ret

00008462 <sprintf>:
    8462:	0f 93       	push	r16
    8464:	1f 93       	push	r17
    8466:	cf 93       	push	r28
    8468:	df 93       	push	r29
    846a:	cd b7       	in	r28, 0x3d	; 61
    846c:	de b7       	in	r29, 0x3e	; 62
    846e:	2e 97       	sbiw	r28, 0x0e	; 14
    8470:	cd bf       	out	0x3d, r28	; 61
    8472:	de bf       	out	0x3e, r29	; 62
    8474:	0d 89       	ldd	r16, Y+21	; 0x15
    8476:	1e 89       	ldd	r17, Y+22	; 0x16
    8478:	86 e0       	ldi	r24, 0x06	; 6
    847a:	8c 83       	std	Y+4, r24	; 0x04
    847c:	09 83       	std	Y+1, r16	; 0x01
    847e:	1a 83       	std	Y+2, r17	; 0x02
    8480:	8f ef       	ldi	r24, 0xFF	; 255
    8482:	9f e7       	ldi	r25, 0x7F	; 127
    8484:	8d 83       	std	Y+5, r24	; 0x05
    8486:	9e 83       	std	Y+6, r25	; 0x06
    8488:	ae 01       	movw	r20, r28
    848a:	47 5e       	subi	r20, 0xE7	; 231
    848c:	5f 4f       	sbci	r21, 0xFF	; 255
    848e:	6f 89       	ldd	r22, Y+23	; 0x17
    8490:	78 8d       	ldd	r23, Y+24	; 0x18
    8492:	ce 01       	movw	r24, r28
    8494:	01 96       	adiw	r24, 0x01	; 1
    8496:	0e 94 5a 42 	call	0x84b4	; 0x84b4 <vfprintf>
    849a:	ef 81       	ldd	r30, Y+7	; 0x07
    849c:	f8 85       	ldd	r31, Y+8	; 0x08
    849e:	e0 0f       	add	r30, r16
    84a0:	f1 1f       	adc	r31, r17
    84a2:	10 82       	st	Z, r1
    84a4:	2e 96       	adiw	r28, 0x0e	; 14
    84a6:	cd bf       	out	0x3d, r28	; 61
    84a8:	de bf       	out	0x3e, r29	; 62
    84aa:	df 91       	pop	r29
    84ac:	cf 91       	pop	r28
    84ae:	1f 91       	pop	r17
    84b0:	0f 91       	pop	r16
    84b2:	08 95       	ret

000084b4 <vfprintf>:
    84b4:	2f 92       	push	r2
    84b6:	3f 92       	push	r3
    84b8:	4f 92       	push	r4
    84ba:	5f 92       	push	r5
    84bc:	6f 92       	push	r6
    84be:	7f 92       	push	r7
    84c0:	8f 92       	push	r8
    84c2:	9f 92       	push	r9
    84c4:	af 92       	push	r10
    84c6:	bf 92       	push	r11
    84c8:	cf 92       	push	r12
    84ca:	df 92       	push	r13
    84cc:	ef 92       	push	r14
    84ce:	ff 92       	push	r15
    84d0:	0f 93       	push	r16
    84d2:	1f 93       	push	r17
    84d4:	cf 93       	push	r28
    84d6:	df 93       	push	r29
    84d8:	cd b7       	in	r28, 0x3d	; 61
    84da:	de b7       	in	r29, 0x3e	; 62
    84dc:	2b 97       	sbiw	r28, 0x0b	; 11
    84de:	cd bf       	out	0x3d, r28	; 61
    84e0:	de bf       	out	0x3e, r29	; 62
    84e2:	6c 01       	movw	r12, r24
    84e4:	7b 01       	movw	r14, r22
    84e6:	8a 01       	movw	r16, r20
    84e8:	fc 01       	movw	r30, r24
    84ea:	16 82       	std	Z+6, r1	; 0x06
    84ec:	17 82       	std	Z+7, r1	; 0x07
    84ee:	83 81       	ldd	r24, Z+3	; 0x03
    84f0:	81 ff       	sbrs	r24, 1
    84f2:	cc c1       	rjmp	.+920    	; 0x888c <vfprintf+0x3d8>
    84f4:	ce 01       	movw	r24, r28
    84f6:	01 96       	adiw	r24, 0x01	; 1
    84f8:	3c 01       	movw	r6, r24
    84fa:	f6 01       	movw	r30, r12
    84fc:	93 81       	ldd	r25, Z+3	; 0x03
    84fe:	f7 01       	movw	r30, r14
    8500:	93 fd       	sbrc	r25, 3
    8502:	85 91       	lpm	r24, Z+
    8504:	93 ff       	sbrs	r25, 3
    8506:	81 91       	ld	r24, Z+
    8508:	7f 01       	movw	r14, r30
    850a:	88 23       	and	r24, r24
    850c:	09 f4       	brne	.+2      	; 0x8510 <vfprintf+0x5c>
    850e:	ba c1       	rjmp	.+884    	; 0x8884 <vfprintf+0x3d0>
    8510:	85 32       	cpi	r24, 0x25	; 37
    8512:	39 f4       	brne	.+14     	; 0x8522 <vfprintf+0x6e>
    8514:	93 fd       	sbrc	r25, 3
    8516:	85 91       	lpm	r24, Z+
    8518:	93 ff       	sbrs	r25, 3
    851a:	81 91       	ld	r24, Z+
    851c:	7f 01       	movw	r14, r30
    851e:	85 32       	cpi	r24, 0x25	; 37
    8520:	29 f4       	brne	.+10     	; 0x852c <vfprintf+0x78>
    8522:	b6 01       	movw	r22, r12
    8524:	90 e0       	ldi	r25, 0x00	; 0
    8526:	0e 94 74 44 	call	0x88e8	; 0x88e8 <fputc>
    852a:	e7 cf       	rjmp	.-50     	; 0x84fa <vfprintf+0x46>
    852c:	91 2c       	mov	r9, r1
    852e:	21 2c       	mov	r2, r1
    8530:	31 2c       	mov	r3, r1
    8532:	ff e1       	ldi	r31, 0x1F	; 31
    8534:	f3 15       	cp	r31, r3
    8536:	d8 f0       	brcs	.+54     	; 0x856e <vfprintf+0xba>
    8538:	8b 32       	cpi	r24, 0x2B	; 43
    853a:	79 f0       	breq	.+30     	; 0x855a <vfprintf+0xa6>
    853c:	38 f4       	brcc	.+14     	; 0x854c <vfprintf+0x98>
    853e:	80 32       	cpi	r24, 0x20	; 32
    8540:	79 f0       	breq	.+30     	; 0x8560 <vfprintf+0xac>
    8542:	83 32       	cpi	r24, 0x23	; 35
    8544:	a1 f4       	brne	.+40     	; 0x856e <vfprintf+0xba>
    8546:	23 2d       	mov	r18, r3
    8548:	20 61       	ori	r18, 0x10	; 16
    854a:	1d c0       	rjmp	.+58     	; 0x8586 <vfprintf+0xd2>
    854c:	8d 32       	cpi	r24, 0x2D	; 45
    854e:	61 f0       	breq	.+24     	; 0x8568 <vfprintf+0xb4>
    8550:	80 33       	cpi	r24, 0x30	; 48
    8552:	69 f4       	brne	.+26     	; 0x856e <vfprintf+0xba>
    8554:	23 2d       	mov	r18, r3
    8556:	21 60       	ori	r18, 0x01	; 1
    8558:	16 c0       	rjmp	.+44     	; 0x8586 <vfprintf+0xd2>
    855a:	83 2d       	mov	r24, r3
    855c:	82 60       	ori	r24, 0x02	; 2
    855e:	38 2e       	mov	r3, r24
    8560:	e3 2d       	mov	r30, r3
    8562:	e4 60       	ori	r30, 0x04	; 4
    8564:	3e 2e       	mov	r3, r30
    8566:	2a c0       	rjmp	.+84     	; 0x85bc <vfprintf+0x108>
    8568:	f3 2d       	mov	r31, r3
    856a:	f8 60       	ori	r31, 0x08	; 8
    856c:	1d c0       	rjmp	.+58     	; 0x85a8 <vfprintf+0xf4>
    856e:	37 fc       	sbrc	r3, 7
    8570:	2d c0       	rjmp	.+90     	; 0x85cc <vfprintf+0x118>
    8572:	20 ed       	ldi	r18, 0xD0	; 208
    8574:	28 0f       	add	r18, r24
    8576:	2a 30       	cpi	r18, 0x0A	; 10
    8578:	40 f0       	brcs	.+16     	; 0x858a <vfprintf+0xd6>
    857a:	8e 32       	cpi	r24, 0x2E	; 46
    857c:	b9 f4       	brne	.+46     	; 0x85ac <vfprintf+0xf8>
    857e:	36 fc       	sbrc	r3, 6
    8580:	81 c1       	rjmp	.+770    	; 0x8884 <vfprintf+0x3d0>
    8582:	23 2d       	mov	r18, r3
    8584:	20 64       	ori	r18, 0x40	; 64
    8586:	32 2e       	mov	r3, r18
    8588:	19 c0       	rjmp	.+50     	; 0x85bc <vfprintf+0x108>
    858a:	36 fe       	sbrs	r3, 6
    858c:	06 c0       	rjmp	.+12     	; 0x859a <vfprintf+0xe6>
    858e:	8a e0       	ldi	r24, 0x0A	; 10
    8590:	98 9e       	mul	r9, r24
    8592:	20 0d       	add	r18, r0
    8594:	11 24       	eor	r1, r1
    8596:	92 2e       	mov	r9, r18
    8598:	11 c0       	rjmp	.+34     	; 0x85bc <vfprintf+0x108>
    859a:	ea e0       	ldi	r30, 0x0A	; 10
    859c:	2e 9e       	mul	r2, r30
    859e:	20 0d       	add	r18, r0
    85a0:	11 24       	eor	r1, r1
    85a2:	22 2e       	mov	r2, r18
    85a4:	f3 2d       	mov	r31, r3
    85a6:	f0 62       	ori	r31, 0x20	; 32
    85a8:	3f 2e       	mov	r3, r31
    85aa:	08 c0       	rjmp	.+16     	; 0x85bc <vfprintf+0x108>
    85ac:	8c 36       	cpi	r24, 0x6C	; 108
    85ae:	21 f4       	brne	.+8      	; 0x85b8 <vfprintf+0x104>
    85b0:	83 2d       	mov	r24, r3
    85b2:	80 68       	ori	r24, 0x80	; 128
    85b4:	38 2e       	mov	r3, r24
    85b6:	02 c0       	rjmp	.+4      	; 0x85bc <vfprintf+0x108>
    85b8:	88 36       	cpi	r24, 0x68	; 104
    85ba:	41 f4       	brne	.+16     	; 0x85cc <vfprintf+0x118>
    85bc:	f7 01       	movw	r30, r14
    85be:	93 fd       	sbrc	r25, 3
    85c0:	85 91       	lpm	r24, Z+
    85c2:	93 ff       	sbrs	r25, 3
    85c4:	81 91       	ld	r24, Z+
    85c6:	7f 01       	movw	r14, r30
    85c8:	81 11       	cpse	r24, r1
    85ca:	b3 cf       	rjmp	.-154    	; 0x8532 <vfprintf+0x7e>
    85cc:	98 2f       	mov	r25, r24
    85ce:	9f 7d       	andi	r25, 0xDF	; 223
    85d0:	95 54       	subi	r25, 0x45	; 69
    85d2:	93 30       	cpi	r25, 0x03	; 3
    85d4:	28 f4       	brcc	.+10     	; 0x85e0 <vfprintf+0x12c>
    85d6:	0c 5f       	subi	r16, 0xFC	; 252
    85d8:	1f 4f       	sbci	r17, 0xFF	; 255
    85da:	9f e3       	ldi	r25, 0x3F	; 63
    85dc:	99 83       	std	Y+1, r25	; 0x01
    85de:	0d c0       	rjmp	.+26     	; 0x85fa <vfprintf+0x146>
    85e0:	83 36       	cpi	r24, 0x63	; 99
    85e2:	31 f0       	breq	.+12     	; 0x85f0 <vfprintf+0x13c>
    85e4:	83 37       	cpi	r24, 0x73	; 115
    85e6:	71 f0       	breq	.+28     	; 0x8604 <vfprintf+0x150>
    85e8:	83 35       	cpi	r24, 0x53	; 83
    85ea:	09 f0       	breq	.+2      	; 0x85ee <vfprintf+0x13a>
    85ec:	59 c0       	rjmp	.+178    	; 0x86a0 <vfprintf+0x1ec>
    85ee:	21 c0       	rjmp	.+66     	; 0x8632 <vfprintf+0x17e>
    85f0:	f8 01       	movw	r30, r16
    85f2:	80 81       	ld	r24, Z
    85f4:	89 83       	std	Y+1, r24	; 0x01
    85f6:	0e 5f       	subi	r16, 0xFE	; 254
    85f8:	1f 4f       	sbci	r17, 0xFF	; 255
    85fa:	88 24       	eor	r8, r8
    85fc:	83 94       	inc	r8
    85fe:	91 2c       	mov	r9, r1
    8600:	53 01       	movw	r10, r6
    8602:	13 c0       	rjmp	.+38     	; 0x862a <vfprintf+0x176>
    8604:	28 01       	movw	r4, r16
    8606:	f2 e0       	ldi	r31, 0x02	; 2
    8608:	4f 0e       	add	r4, r31
    860a:	51 1c       	adc	r5, r1
    860c:	f8 01       	movw	r30, r16
    860e:	a0 80       	ld	r10, Z
    8610:	b1 80       	ldd	r11, Z+1	; 0x01
    8612:	36 fe       	sbrs	r3, 6
    8614:	03 c0       	rjmp	.+6      	; 0x861c <vfprintf+0x168>
    8616:	69 2d       	mov	r22, r9
    8618:	70 e0       	ldi	r23, 0x00	; 0
    861a:	02 c0       	rjmp	.+4      	; 0x8620 <vfprintf+0x16c>
    861c:	6f ef       	ldi	r22, 0xFF	; 255
    861e:	7f ef       	ldi	r23, 0xFF	; 255
    8620:	c5 01       	movw	r24, r10
    8622:	0e 94 69 44 	call	0x88d2	; 0x88d2 <strnlen>
    8626:	4c 01       	movw	r8, r24
    8628:	82 01       	movw	r16, r4
    862a:	f3 2d       	mov	r31, r3
    862c:	ff 77       	andi	r31, 0x7F	; 127
    862e:	3f 2e       	mov	r3, r31
    8630:	16 c0       	rjmp	.+44     	; 0x865e <vfprintf+0x1aa>
    8632:	28 01       	movw	r4, r16
    8634:	22 e0       	ldi	r18, 0x02	; 2
    8636:	42 0e       	add	r4, r18
    8638:	51 1c       	adc	r5, r1
    863a:	f8 01       	movw	r30, r16
    863c:	a0 80       	ld	r10, Z
    863e:	b1 80       	ldd	r11, Z+1	; 0x01
    8640:	36 fe       	sbrs	r3, 6
    8642:	03 c0       	rjmp	.+6      	; 0x864a <vfprintf+0x196>
    8644:	69 2d       	mov	r22, r9
    8646:	70 e0       	ldi	r23, 0x00	; 0
    8648:	02 c0       	rjmp	.+4      	; 0x864e <vfprintf+0x19a>
    864a:	6f ef       	ldi	r22, 0xFF	; 255
    864c:	7f ef       	ldi	r23, 0xFF	; 255
    864e:	c5 01       	movw	r24, r10
    8650:	0e 94 5e 44 	call	0x88bc	; 0x88bc <strnlen_P>
    8654:	4c 01       	movw	r8, r24
    8656:	f3 2d       	mov	r31, r3
    8658:	f0 68       	ori	r31, 0x80	; 128
    865a:	3f 2e       	mov	r3, r31
    865c:	82 01       	movw	r16, r4
    865e:	33 fc       	sbrc	r3, 3
    8660:	1b c0       	rjmp	.+54     	; 0x8698 <vfprintf+0x1e4>
    8662:	82 2d       	mov	r24, r2
    8664:	90 e0       	ldi	r25, 0x00	; 0
    8666:	88 16       	cp	r8, r24
    8668:	99 06       	cpc	r9, r25
    866a:	b0 f4       	brcc	.+44     	; 0x8698 <vfprintf+0x1e4>
    866c:	b6 01       	movw	r22, r12
    866e:	80 e2       	ldi	r24, 0x20	; 32
    8670:	90 e0       	ldi	r25, 0x00	; 0
    8672:	0e 94 74 44 	call	0x88e8	; 0x88e8 <fputc>
    8676:	2a 94       	dec	r2
    8678:	f4 cf       	rjmp	.-24     	; 0x8662 <vfprintf+0x1ae>
    867a:	f5 01       	movw	r30, r10
    867c:	37 fc       	sbrc	r3, 7
    867e:	85 91       	lpm	r24, Z+
    8680:	37 fe       	sbrs	r3, 7
    8682:	81 91       	ld	r24, Z+
    8684:	5f 01       	movw	r10, r30
    8686:	b6 01       	movw	r22, r12
    8688:	90 e0       	ldi	r25, 0x00	; 0
    868a:	0e 94 74 44 	call	0x88e8	; 0x88e8 <fputc>
    868e:	21 10       	cpse	r2, r1
    8690:	2a 94       	dec	r2
    8692:	21 e0       	ldi	r18, 0x01	; 1
    8694:	82 1a       	sub	r8, r18
    8696:	91 08       	sbc	r9, r1
    8698:	81 14       	cp	r8, r1
    869a:	91 04       	cpc	r9, r1
    869c:	71 f7       	brne	.-36     	; 0x867a <vfprintf+0x1c6>
    869e:	e8 c0       	rjmp	.+464    	; 0x8870 <vfprintf+0x3bc>
    86a0:	84 36       	cpi	r24, 0x64	; 100
    86a2:	11 f0       	breq	.+4      	; 0x86a8 <vfprintf+0x1f4>
    86a4:	89 36       	cpi	r24, 0x69	; 105
    86a6:	41 f5       	brne	.+80     	; 0x86f8 <vfprintf+0x244>
    86a8:	f8 01       	movw	r30, r16
    86aa:	37 fe       	sbrs	r3, 7
    86ac:	07 c0       	rjmp	.+14     	; 0x86bc <vfprintf+0x208>
    86ae:	60 81       	ld	r22, Z
    86b0:	71 81       	ldd	r23, Z+1	; 0x01
    86b2:	82 81       	ldd	r24, Z+2	; 0x02
    86b4:	93 81       	ldd	r25, Z+3	; 0x03
    86b6:	0c 5f       	subi	r16, 0xFC	; 252
    86b8:	1f 4f       	sbci	r17, 0xFF	; 255
    86ba:	08 c0       	rjmp	.+16     	; 0x86cc <vfprintf+0x218>
    86bc:	60 81       	ld	r22, Z
    86be:	71 81       	ldd	r23, Z+1	; 0x01
    86c0:	07 2e       	mov	r0, r23
    86c2:	00 0c       	add	r0, r0
    86c4:	88 0b       	sbc	r24, r24
    86c6:	99 0b       	sbc	r25, r25
    86c8:	0e 5f       	subi	r16, 0xFE	; 254
    86ca:	1f 4f       	sbci	r17, 0xFF	; 255
    86cc:	f3 2d       	mov	r31, r3
    86ce:	ff 76       	andi	r31, 0x6F	; 111
    86d0:	3f 2e       	mov	r3, r31
    86d2:	97 ff       	sbrs	r25, 7
    86d4:	09 c0       	rjmp	.+18     	; 0x86e8 <vfprintf+0x234>
    86d6:	90 95       	com	r25
    86d8:	80 95       	com	r24
    86da:	70 95       	com	r23
    86dc:	61 95       	neg	r22
    86de:	7f 4f       	sbci	r23, 0xFF	; 255
    86e0:	8f 4f       	sbci	r24, 0xFF	; 255
    86e2:	9f 4f       	sbci	r25, 0xFF	; 255
    86e4:	f0 68       	ori	r31, 0x80	; 128
    86e6:	3f 2e       	mov	r3, r31
    86e8:	2a e0       	ldi	r18, 0x0A	; 10
    86ea:	30 e0       	ldi	r19, 0x00	; 0
    86ec:	a3 01       	movw	r20, r6
    86ee:	0e 94 b0 44 	call	0x8960	; 0x8960 <__ultoa_invert>
    86f2:	88 2e       	mov	r8, r24
    86f4:	86 18       	sub	r8, r6
    86f6:	45 c0       	rjmp	.+138    	; 0x8782 <vfprintf+0x2ce>
    86f8:	85 37       	cpi	r24, 0x75	; 117
    86fa:	31 f4       	brne	.+12     	; 0x8708 <vfprintf+0x254>
    86fc:	23 2d       	mov	r18, r3
    86fe:	2f 7e       	andi	r18, 0xEF	; 239
    8700:	b2 2e       	mov	r11, r18
    8702:	2a e0       	ldi	r18, 0x0A	; 10
    8704:	30 e0       	ldi	r19, 0x00	; 0
    8706:	25 c0       	rjmp	.+74     	; 0x8752 <vfprintf+0x29e>
    8708:	93 2d       	mov	r25, r3
    870a:	99 7f       	andi	r25, 0xF9	; 249
    870c:	b9 2e       	mov	r11, r25
    870e:	8f 36       	cpi	r24, 0x6F	; 111
    8710:	c1 f0       	breq	.+48     	; 0x8742 <vfprintf+0x28e>
    8712:	18 f4       	brcc	.+6      	; 0x871a <vfprintf+0x266>
    8714:	88 35       	cpi	r24, 0x58	; 88
    8716:	79 f0       	breq	.+30     	; 0x8736 <vfprintf+0x282>
    8718:	b5 c0       	rjmp	.+362    	; 0x8884 <vfprintf+0x3d0>
    871a:	80 37       	cpi	r24, 0x70	; 112
    871c:	19 f0       	breq	.+6      	; 0x8724 <vfprintf+0x270>
    871e:	88 37       	cpi	r24, 0x78	; 120
    8720:	21 f0       	breq	.+8      	; 0x872a <vfprintf+0x276>
    8722:	b0 c0       	rjmp	.+352    	; 0x8884 <vfprintf+0x3d0>
    8724:	e9 2f       	mov	r30, r25
    8726:	e0 61       	ori	r30, 0x10	; 16
    8728:	be 2e       	mov	r11, r30
    872a:	b4 fe       	sbrs	r11, 4
    872c:	0d c0       	rjmp	.+26     	; 0x8748 <vfprintf+0x294>
    872e:	fb 2d       	mov	r31, r11
    8730:	f4 60       	ori	r31, 0x04	; 4
    8732:	bf 2e       	mov	r11, r31
    8734:	09 c0       	rjmp	.+18     	; 0x8748 <vfprintf+0x294>
    8736:	34 fe       	sbrs	r3, 4
    8738:	0a c0       	rjmp	.+20     	; 0x874e <vfprintf+0x29a>
    873a:	29 2f       	mov	r18, r25
    873c:	26 60       	ori	r18, 0x06	; 6
    873e:	b2 2e       	mov	r11, r18
    8740:	06 c0       	rjmp	.+12     	; 0x874e <vfprintf+0x29a>
    8742:	28 e0       	ldi	r18, 0x08	; 8
    8744:	30 e0       	ldi	r19, 0x00	; 0
    8746:	05 c0       	rjmp	.+10     	; 0x8752 <vfprintf+0x29e>
    8748:	20 e1       	ldi	r18, 0x10	; 16
    874a:	30 e0       	ldi	r19, 0x00	; 0
    874c:	02 c0       	rjmp	.+4      	; 0x8752 <vfprintf+0x29e>
    874e:	20 e1       	ldi	r18, 0x10	; 16
    8750:	32 e0       	ldi	r19, 0x02	; 2
    8752:	f8 01       	movw	r30, r16
    8754:	b7 fe       	sbrs	r11, 7
    8756:	07 c0       	rjmp	.+14     	; 0x8766 <vfprintf+0x2b2>
    8758:	60 81       	ld	r22, Z
    875a:	71 81       	ldd	r23, Z+1	; 0x01
    875c:	82 81       	ldd	r24, Z+2	; 0x02
    875e:	93 81       	ldd	r25, Z+3	; 0x03
    8760:	0c 5f       	subi	r16, 0xFC	; 252
    8762:	1f 4f       	sbci	r17, 0xFF	; 255
    8764:	06 c0       	rjmp	.+12     	; 0x8772 <vfprintf+0x2be>
    8766:	60 81       	ld	r22, Z
    8768:	71 81       	ldd	r23, Z+1	; 0x01
    876a:	80 e0       	ldi	r24, 0x00	; 0
    876c:	90 e0       	ldi	r25, 0x00	; 0
    876e:	0e 5f       	subi	r16, 0xFE	; 254
    8770:	1f 4f       	sbci	r17, 0xFF	; 255
    8772:	a3 01       	movw	r20, r6
    8774:	0e 94 b0 44 	call	0x8960	; 0x8960 <__ultoa_invert>
    8778:	88 2e       	mov	r8, r24
    877a:	86 18       	sub	r8, r6
    877c:	fb 2d       	mov	r31, r11
    877e:	ff 77       	andi	r31, 0x7F	; 127
    8780:	3f 2e       	mov	r3, r31
    8782:	36 fe       	sbrs	r3, 6
    8784:	0d c0       	rjmp	.+26     	; 0x87a0 <vfprintf+0x2ec>
    8786:	23 2d       	mov	r18, r3
    8788:	2e 7f       	andi	r18, 0xFE	; 254
    878a:	a2 2e       	mov	r10, r18
    878c:	89 14       	cp	r8, r9
    878e:	58 f4       	brcc	.+22     	; 0x87a6 <vfprintf+0x2f2>
    8790:	34 fe       	sbrs	r3, 4
    8792:	0b c0       	rjmp	.+22     	; 0x87aa <vfprintf+0x2f6>
    8794:	32 fc       	sbrc	r3, 2
    8796:	09 c0       	rjmp	.+18     	; 0x87aa <vfprintf+0x2f6>
    8798:	83 2d       	mov	r24, r3
    879a:	8e 7e       	andi	r24, 0xEE	; 238
    879c:	a8 2e       	mov	r10, r24
    879e:	05 c0       	rjmp	.+10     	; 0x87aa <vfprintf+0x2f6>
    87a0:	b8 2c       	mov	r11, r8
    87a2:	a3 2c       	mov	r10, r3
    87a4:	03 c0       	rjmp	.+6      	; 0x87ac <vfprintf+0x2f8>
    87a6:	b8 2c       	mov	r11, r8
    87a8:	01 c0       	rjmp	.+2      	; 0x87ac <vfprintf+0x2f8>
    87aa:	b9 2c       	mov	r11, r9
    87ac:	a4 fe       	sbrs	r10, 4
    87ae:	0f c0       	rjmp	.+30     	; 0x87ce <vfprintf+0x31a>
    87b0:	fe 01       	movw	r30, r28
    87b2:	e8 0d       	add	r30, r8
    87b4:	f1 1d       	adc	r31, r1
    87b6:	80 81       	ld	r24, Z
    87b8:	80 33       	cpi	r24, 0x30	; 48
    87ba:	21 f4       	brne	.+8      	; 0x87c4 <vfprintf+0x310>
    87bc:	9a 2d       	mov	r25, r10
    87be:	99 7e       	andi	r25, 0xE9	; 233
    87c0:	a9 2e       	mov	r10, r25
    87c2:	09 c0       	rjmp	.+18     	; 0x87d6 <vfprintf+0x322>
    87c4:	a2 fe       	sbrs	r10, 2
    87c6:	06 c0       	rjmp	.+12     	; 0x87d4 <vfprintf+0x320>
    87c8:	b3 94       	inc	r11
    87ca:	b3 94       	inc	r11
    87cc:	04 c0       	rjmp	.+8      	; 0x87d6 <vfprintf+0x322>
    87ce:	8a 2d       	mov	r24, r10
    87d0:	86 78       	andi	r24, 0x86	; 134
    87d2:	09 f0       	breq	.+2      	; 0x87d6 <vfprintf+0x322>
    87d4:	b3 94       	inc	r11
    87d6:	a3 fc       	sbrc	r10, 3
    87d8:	11 c0       	rjmp	.+34     	; 0x87fc <vfprintf+0x348>
    87da:	a0 fe       	sbrs	r10, 0
    87dc:	06 c0       	rjmp	.+12     	; 0x87ea <vfprintf+0x336>
    87de:	b2 14       	cp	r11, r2
    87e0:	88 f4       	brcc	.+34     	; 0x8804 <vfprintf+0x350>
    87e2:	28 0c       	add	r2, r8
    87e4:	92 2c       	mov	r9, r2
    87e6:	9b 18       	sub	r9, r11
    87e8:	0e c0       	rjmp	.+28     	; 0x8806 <vfprintf+0x352>
    87ea:	b2 14       	cp	r11, r2
    87ec:	60 f4       	brcc	.+24     	; 0x8806 <vfprintf+0x352>
    87ee:	b6 01       	movw	r22, r12
    87f0:	80 e2       	ldi	r24, 0x20	; 32
    87f2:	90 e0       	ldi	r25, 0x00	; 0
    87f4:	0e 94 74 44 	call	0x88e8	; 0x88e8 <fputc>
    87f8:	b3 94       	inc	r11
    87fa:	f7 cf       	rjmp	.-18     	; 0x87ea <vfprintf+0x336>
    87fc:	b2 14       	cp	r11, r2
    87fe:	18 f4       	brcc	.+6      	; 0x8806 <vfprintf+0x352>
    8800:	2b 18       	sub	r2, r11
    8802:	02 c0       	rjmp	.+4      	; 0x8808 <vfprintf+0x354>
    8804:	98 2c       	mov	r9, r8
    8806:	21 2c       	mov	r2, r1
    8808:	a4 fe       	sbrs	r10, 4
    880a:	10 c0       	rjmp	.+32     	; 0x882c <vfprintf+0x378>
    880c:	b6 01       	movw	r22, r12
    880e:	80 e3       	ldi	r24, 0x30	; 48
    8810:	90 e0       	ldi	r25, 0x00	; 0
    8812:	0e 94 74 44 	call	0x88e8	; 0x88e8 <fputc>
    8816:	a2 fe       	sbrs	r10, 2
    8818:	17 c0       	rjmp	.+46     	; 0x8848 <vfprintf+0x394>
    881a:	a1 fc       	sbrc	r10, 1
    881c:	03 c0       	rjmp	.+6      	; 0x8824 <vfprintf+0x370>
    881e:	88 e7       	ldi	r24, 0x78	; 120
    8820:	90 e0       	ldi	r25, 0x00	; 0
    8822:	02 c0       	rjmp	.+4      	; 0x8828 <vfprintf+0x374>
    8824:	88 e5       	ldi	r24, 0x58	; 88
    8826:	90 e0       	ldi	r25, 0x00	; 0
    8828:	b6 01       	movw	r22, r12
    882a:	0c c0       	rjmp	.+24     	; 0x8844 <vfprintf+0x390>
    882c:	8a 2d       	mov	r24, r10
    882e:	86 78       	andi	r24, 0x86	; 134
    8830:	59 f0       	breq	.+22     	; 0x8848 <vfprintf+0x394>
    8832:	a1 fe       	sbrs	r10, 1
    8834:	02 c0       	rjmp	.+4      	; 0x883a <vfprintf+0x386>
    8836:	8b e2       	ldi	r24, 0x2B	; 43
    8838:	01 c0       	rjmp	.+2      	; 0x883c <vfprintf+0x388>
    883a:	80 e2       	ldi	r24, 0x20	; 32
    883c:	a7 fc       	sbrc	r10, 7
    883e:	8d e2       	ldi	r24, 0x2D	; 45
    8840:	b6 01       	movw	r22, r12
    8842:	90 e0       	ldi	r25, 0x00	; 0
    8844:	0e 94 74 44 	call	0x88e8	; 0x88e8 <fputc>
    8848:	89 14       	cp	r8, r9
    884a:	38 f4       	brcc	.+14     	; 0x885a <vfprintf+0x3a6>
    884c:	b6 01       	movw	r22, r12
    884e:	80 e3       	ldi	r24, 0x30	; 48
    8850:	90 e0       	ldi	r25, 0x00	; 0
    8852:	0e 94 74 44 	call	0x88e8	; 0x88e8 <fputc>
    8856:	9a 94       	dec	r9
    8858:	f7 cf       	rjmp	.-18     	; 0x8848 <vfprintf+0x394>
    885a:	8a 94       	dec	r8
    885c:	f3 01       	movw	r30, r6
    885e:	e8 0d       	add	r30, r8
    8860:	f1 1d       	adc	r31, r1
    8862:	80 81       	ld	r24, Z
    8864:	b6 01       	movw	r22, r12
    8866:	90 e0       	ldi	r25, 0x00	; 0
    8868:	0e 94 74 44 	call	0x88e8	; 0x88e8 <fputc>
    886c:	81 10       	cpse	r8, r1
    886e:	f5 cf       	rjmp	.-22     	; 0x885a <vfprintf+0x3a6>
    8870:	22 20       	and	r2, r2
    8872:	09 f4       	brne	.+2      	; 0x8876 <vfprintf+0x3c2>
    8874:	42 ce       	rjmp	.-892    	; 0x84fa <vfprintf+0x46>
    8876:	b6 01       	movw	r22, r12
    8878:	80 e2       	ldi	r24, 0x20	; 32
    887a:	90 e0       	ldi	r25, 0x00	; 0
    887c:	0e 94 74 44 	call	0x88e8	; 0x88e8 <fputc>
    8880:	2a 94       	dec	r2
    8882:	f6 cf       	rjmp	.-20     	; 0x8870 <vfprintf+0x3bc>
    8884:	f6 01       	movw	r30, r12
    8886:	86 81       	ldd	r24, Z+6	; 0x06
    8888:	97 81       	ldd	r25, Z+7	; 0x07
    888a:	02 c0       	rjmp	.+4      	; 0x8890 <vfprintf+0x3dc>
    888c:	8f ef       	ldi	r24, 0xFF	; 255
    888e:	9f ef       	ldi	r25, 0xFF	; 255
    8890:	2b 96       	adiw	r28, 0x0b	; 11
    8892:	cd bf       	out	0x3d, r28	; 61
    8894:	de bf       	out	0x3e, r29	; 62
    8896:	df 91       	pop	r29
    8898:	cf 91       	pop	r28
    889a:	1f 91       	pop	r17
    889c:	0f 91       	pop	r16
    889e:	ff 90       	pop	r15
    88a0:	ef 90       	pop	r14
    88a2:	df 90       	pop	r13
    88a4:	cf 90       	pop	r12
    88a6:	bf 90       	pop	r11
    88a8:	af 90       	pop	r10
    88aa:	9f 90       	pop	r9
    88ac:	8f 90       	pop	r8
    88ae:	7f 90       	pop	r7
    88b0:	6f 90       	pop	r6
    88b2:	5f 90       	pop	r5
    88b4:	4f 90       	pop	r4
    88b6:	3f 90       	pop	r3
    88b8:	2f 90       	pop	r2
    88ba:	08 95       	ret

000088bc <strnlen_P>:
    88bc:	fc 01       	movw	r30, r24
    88be:	05 90       	lpm	r0, Z+
    88c0:	61 50       	subi	r22, 0x01	; 1
    88c2:	70 40       	sbci	r23, 0x00	; 0
    88c4:	01 10       	cpse	r0, r1
    88c6:	d8 f7       	brcc	.-10     	; 0x88be <strnlen_P+0x2>
    88c8:	80 95       	com	r24
    88ca:	90 95       	com	r25
    88cc:	8e 0f       	add	r24, r30
    88ce:	9f 1f       	adc	r25, r31
    88d0:	08 95       	ret

000088d2 <strnlen>:
    88d2:	fc 01       	movw	r30, r24
    88d4:	61 50       	subi	r22, 0x01	; 1
    88d6:	70 40       	sbci	r23, 0x00	; 0
    88d8:	01 90       	ld	r0, Z+
    88da:	01 10       	cpse	r0, r1
    88dc:	d8 f7       	brcc	.-10     	; 0x88d4 <strnlen+0x2>
    88de:	80 95       	com	r24
    88e0:	90 95       	com	r25
    88e2:	8e 0f       	add	r24, r30
    88e4:	9f 1f       	adc	r25, r31
    88e6:	08 95       	ret

000088e8 <fputc>:
    88e8:	0f 93       	push	r16
    88ea:	1f 93       	push	r17
    88ec:	cf 93       	push	r28
    88ee:	df 93       	push	r29
    88f0:	fb 01       	movw	r30, r22
    88f2:	23 81       	ldd	r18, Z+3	; 0x03
    88f4:	21 fd       	sbrc	r18, 1
    88f6:	03 c0       	rjmp	.+6      	; 0x88fe <fputc+0x16>
    88f8:	8f ef       	ldi	r24, 0xFF	; 255
    88fa:	9f ef       	ldi	r25, 0xFF	; 255
    88fc:	2c c0       	rjmp	.+88     	; 0x8956 <fputc+0x6e>
    88fe:	22 ff       	sbrs	r18, 2
    8900:	16 c0       	rjmp	.+44     	; 0x892e <fputc+0x46>
    8902:	46 81       	ldd	r20, Z+6	; 0x06
    8904:	57 81       	ldd	r21, Z+7	; 0x07
    8906:	24 81       	ldd	r18, Z+4	; 0x04
    8908:	35 81       	ldd	r19, Z+5	; 0x05
    890a:	42 17       	cp	r20, r18
    890c:	53 07       	cpc	r21, r19
    890e:	44 f4       	brge	.+16     	; 0x8920 <fputc+0x38>
    8910:	a0 81       	ld	r26, Z
    8912:	b1 81       	ldd	r27, Z+1	; 0x01
    8914:	9d 01       	movw	r18, r26
    8916:	2f 5f       	subi	r18, 0xFF	; 255
    8918:	3f 4f       	sbci	r19, 0xFF	; 255
    891a:	20 83       	st	Z, r18
    891c:	31 83       	std	Z+1, r19	; 0x01
    891e:	8c 93       	st	X, r24
    8920:	26 81       	ldd	r18, Z+6	; 0x06
    8922:	37 81       	ldd	r19, Z+7	; 0x07
    8924:	2f 5f       	subi	r18, 0xFF	; 255
    8926:	3f 4f       	sbci	r19, 0xFF	; 255
    8928:	26 83       	std	Z+6, r18	; 0x06
    892a:	37 83       	std	Z+7, r19	; 0x07
    892c:	14 c0       	rjmp	.+40     	; 0x8956 <fputc+0x6e>
    892e:	8b 01       	movw	r16, r22
    8930:	ec 01       	movw	r28, r24
    8932:	fb 01       	movw	r30, r22
    8934:	00 84       	ldd	r0, Z+8	; 0x08
    8936:	f1 85       	ldd	r31, Z+9	; 0x09
    8938:	e0 2d       	mov	r30, r0
    893a:	09 95       	icall
    893c:	89 2b       	or	r24, r25
    893e:	e1 f6       	brne	.-72     	; 0x88f8 <fputc+0x10>
    8940:	d8 01       	movw	r26, r16
    8942:	16 96       	adiw	r26, 0x06	; 6
    8944:	8d 91       	ld	r24, X+
    8946:	9c 91       	ld	r25, X
    8948:	17 97       	sbiw	r26, 0x07	; 7
    894a:	01 96       	adiw	r24, 0x01	; 1
    894c:	16 96       	adiw	r26, 0x06	; 6
    894e:	8d 93       	st	X+, r24
    8950:	9c 93       	st	X, r25
    8952:	17 97       	sbiw	r26, 0x07	; 7
    8954:	ce 01       	movw	r24, r28
    8956:	df 91       	pop	r29
    8958:	cf 91       	pop	r28
    895a:	1f 91       	pop	r17
    895c:	0f 91       	pop	r16
    895e:	08 95       	ret

00008960 <__ultoa_invert>:
    8960:	fa 01       	movw	r30, r20
    8962:	aa 27       	eor	r26, r26
    8964:	28 30       	cpi	r18, 0x08	; 8
    8966:	51 f1       	breq	.+84     	; 0x89bc <__ultoa_invert+0x5c>
    8968:	20 31       	cpi	r18, 0x10	; 16
    896a:	81 f1       	breq	.+96     	; 0x89cc <__ultoa_invert+0x6c>
    896c:	e8 94       	clt
    896e:	6f 93       	push	r22
    8970:	6e 7f       	andi	r22, 0xFE	; 254
    8972:	6e 5f       	subi	r22, 0xFE	; 254
    8974:	7f 4f       	sbci	r23, 0xFF	; 255
    8976:	8f 4f       	sbci	r24, 0xFF	; 255
    8978:	9f 4f       	sbci	r25, 0xFF	; 255
    897a:	af 4f       	sbci	r26, 0xFF	; 255
    897c:	b1 e0       	ldi	r27, 0x01	; 1
    897e:	3e d0       	rcall	.+124    	; 0x89fc <__ultoa_invert+0x9c>
    8980:	b4 e0       	ldi	r27, 0x04	; 4
    8982:	3c d0       	rcall	.+120    	; 0x89fc <__ultoa_invert+0x9c>
    8984:	67 0f       	add	r22, r23
    8986:	78 1f       	adc	r23, r24
    8988:	89 1f       	adc	r24, r25
    898a:	9a 1f       	adc	r25, r26
    898c:	a1 1d       	adc	r26, r1
    898e:	68 0f       	add	r22, r24
    8990:	79 1f       	adc	r23, r25
    8992:	8a 1f       	adc	r24, r26
    8994:	91 1d       	adc	r25, r1
    8996:	a1 1d       	adc	r26, r1
    8998:	6a 0f       	add	r22, r26
    899a:	71 1d       	adc	r23, r1
    899c:	81 1d       	adc	r24, r1
    899e:	91 1d       	adc	r25, r1
    89a0:	a1 1d       	adc	r26, r1
    89a2:	20 d0       	rcall	.+64     	; 0x89e4 <__ultoa_invert+0x84>
    89a4:	09 f4       	brne	.+2      	; 0x89a8 <__ultoa_invert+0x48>
    89a6:	68 94       	set
    89a8:	3f 91       	pop	r19
    89aa:	2a e0       	ldi	r18, 0x0A	; 10
    89ac:	26 9f       	mul	r18, r22
    89ae:	11 24       	eor	r1, r1
    89b0:	30 19       	sub	r19, r0
    89b2:	30 5d       	subi	r19, 0xD0	; 208
    89b4:	31 93       	st	Z+, r19
    89b6:	de f6       	brtc	.-74     	; 0x896e <__ultoa_invert+0xe>
    89b8:	cf 01       	movw	r24, r30
    89ba:	08 95       	ret
    89bc:	46 2f       	mov	r20, r22
    89be:	47 70       	andi	r20, 0x07	; 7
    89c0:	40 5d       	subi	r20, 0xD0	; 208
    89c2:	41 93       	st	Z+, r20
    89c4:	b3 e0       	ldi	r27, 0x03	; 3
    89c6:	0f d0       	rcall	.+30     	; 0x89e6 <__ultoa_invert+0x86>
    89c8:	c9 f7       	brne	.-14     	; 0x89bc <__ultoa_invert+0x5c>
    89ca:	f6 cf       	rjmp	.-20     	; 0x89b8 <__ultoa_invert+0x58>
    89cc:	46 2f       	mov	r20, r22
    89ce:	4f 70       	andi	r20, 0x0F	; 15
    89d0:	40 5d       	subi	r20, 0xD0	; 208
    89d2:	4a 33       	cpi	r20, 0x3A	; 58
    89d4:	18 f0       	brcs	.+6      	; 0x89dc <__ultoa_invert+0x7c>
    89d6:	49 5d       	subi	r20, 0xD9	; 217
    89d8:	31 fd       	sbrc	r19, 1
    89da:	40 52       	subi	r20, 0x20	; 32
    89dc:	41 93       	st	Z+, r20
    89de:	02 d0       	rcall	.+4      	; 0x89e4 <__ultoa_invert+0x84>
    89e0:	a9 f7       	brne	.-22     	; 0x89cc <__ultoa_invert+0x6c>
    89e2:	ea cf       	rjmp	.-44     	; 0x89b8 <__ultoa_invert+0x58>
    89e4:	b4 e0       	ldi	r27, 0x04	; 4
    89e6:	a6 95       	lsr	r26
    89e8:	97 95       	ror	r25
    89ea:	87 95       	ror	r24
    89ec:	77 95       	ror	r23
    89ee:	67 95       	ror	r22
    89f0:	ba 95       	dec	r27
    89f2:	c9 f7       	brne	.-14     	; 0x89e6 <__ultoa_invert+0x86>
    89f4:	00 97       	sbiw	r24, 0x00	; 0
    89f6:	61 05       	cpc	r22, r1
    89f8:	71 05       	cpc	r23, r1
    89fa:	08 95       	ret
    89fc:	9b 01       	movw	r18, r22
    89fe:	ac 01       	movw	r20, r24
    8a00:	0a 2e       	mov	r0, r26
    8a02:	06 94       	lsr	r0
    8a04:	57 95       	ror	r21
    8a06:	47 95       	ror	r20
    8a08:	37 95       	ror	r19
    8a0a:	27 95       	ror	r18
    8a0c:	ba 95       	dec	r27
    8a0e:	c9 f7       	brne	.-14     	; 0x8a02 <__ultoa_invert+0xa2>
    8a10:	62 0f       	add	r22, r18
    8a12:	73 1f       	adc	r23, r19
    8a14:	84 1f       	adc	r24, r20
    8a16:	95 1f       	adc	r25, r21
    8a18:	a0 1d       	adc	r26, r0
    8a1a:	08 95       	ret

00008a1c <eeprom_read_byte>:
    8a1c:	03 d0       	rcall	.+6      	; 0x8a24 <eeprom_mapen>
    8a1e:	80 81       	ld	r24, Z
    8a20:	99 27       	eor	r25, r25
    8a22:	08 95       	ret

00008a24 <eeprom_mapen>:
    8a24:	fc 01       	movw	r30, r24
    8a26:	e0 50       	subi	r30, 0x00	; 0
    8a28:	fc 4e       	sbci	r31, 0xEC	; 236
    8a2a:	08 95       	ret

00008a2c <eeprom_read_dword>:
    8a2c:	0e 94 12 45 	call	0x8a24	; 0x8a24 <eeprom_mapen>
    8a30:	60 81       	ld	r22, Z
    8a32:	71 81       	ldd	r23, Z+1	; 0x01
    8a34:	82 81       	ldd	r24, Z+2	; 0x02
    8a36:	93 81       	ldd	r25, Z+3	; 0x03
    8a38:	08 95       	ret

00008a3a <eeprom_read_word>:
    8a3a:	0e 94 12 45 	call	0x8a24	; 0x8a24 <eeprom_mapen>
    8a3e:	80 81       	ld	r24, Z
    8a40:	91 81       	ldd	r25, Z+1	; 0x01
    8a42:	08 95       	ret

00008a44 <__do_global_dtors>:
    8a44:	11 e0       	ldi	r17, 0x01	; 1
    8a46:	c7 e0       	ldi	r28, 0x07	; 7
    8a48:	d1 e0       	ldi	r29, 0x01	; 1
    8a4a:	04 c0       	rjmp	.+8      	; 0x8a54 <__do_global_dtors+0x10>
    8a4c:	fe 01       	movw	r30, r28
    8a4e:	0e 94 4a 40 	call	0x8094	; 0x8094 <__tablejump2__>
    8a52:	21 96       	adiw	r28, 0x01	; 1
    8a54:	c9 30       	cpi	r28, 0x09	; 9
    8a56:	d1 07       	cpc	r29, r17
    8a58:	c9 f7       	brne	.-14     	; 0x8a4c <__do_global_dtors+0x8>
    8a5a:	f8 94       	cli

00008a5c <__stop_program>:
    8a5c:	ff cf       	rjmp	.-2      	; 0x8a5c <__stop_program>
