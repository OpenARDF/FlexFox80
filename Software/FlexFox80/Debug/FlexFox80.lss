
FlexFox80.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00804000  00001ef6  00001faa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ef6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001d4  00804078  00804078  00002022  2**0
                  ALLOC
  3 .eeprom       0000001f  00810000  00810000  00002022  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00002041  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020a0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000550  00000000  00000000  000020e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a06e  00000000  00000000  00002630  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004528  00000000  00000000  0000c69e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000411f  00000000  00000000  00010bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000efc  00000000  00000000  00014ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004770  00000000  00000000  00015be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000457a  00000000  00000000  0001a354  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000510  00000000  00000000  0001e8ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_12>
      34:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <__vector_13>
      38:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 95 04 	jmp	0x92a	; 0x92a <__vector_24>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      68:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      6c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      70:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      74:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      78:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_30>
      7c:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_31>
      80:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_32>
      84:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      88:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      8c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      90:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      94:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      98:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      9c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      a0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      a4:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_41>
      a8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      ac:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      b0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      b4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      b8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      bc:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      c0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      c4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      c8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      cc:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      d0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      d4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      d8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      dc:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      e0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      e4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      e8:	fb 07       	cpc	r31, r27
      ea:	bf 07       	cpc	r27, r31
      ec:	eb 07       	cpc	r30, r27
      ee:	03 08       	sbc	r0, r3
      f0:	ef 07       	cpc	r30, r31
      f2:	03 08       	sbc	r0, r3
      f4:	cf 07       	cpc	r28, r31
      f6:	bb 07       	cpc	r27, r27
      f8:	c7 07       	cpc	r28, r23
      fa:	cb 07       	cpc	r28, r27
      fc:	03 08       	sbc	r0, r3
      fe:	df 07       	cpc	r29, r31
     100:	b3 07       	cpc	r27, r19
     102:	e3 07       	cpc	r30, r19
     104:	af 07       	cpc	r26, r31
     106:	c3 07       	cpc	r28, r19
     108:	87 07       	cpc	r24, r23
     10a:	8b 07       	cpc	r24, r27
     10c:	8f 07       	cpc	r24, r31
     10e:	93 07       	cpc	r25, r19
     110:	97 07       	cpc	r25, r23
     112:	9b 07       	cpc	r25, r27
     114:	9f 07       	cpc	r25, r31
     116:	a3 07       	cpc	r26, r19
     118:	a7 07       	cpc	r26, r23
     11a:	ab 07       	cpc	r26, r27
     11c:	d3 07       	cpc	r29, r19
     11e:	d7 07       	cpc	r29, r23
     120:	ff 07       	cpc	r31, r31
     122:	db 07       	cpc	r29, r27
     124:	03 08       	sbc	r0, r3
     126:	b7 07       	cpc	r27, r23
     128:	f3 07       	cpc	r31, r19
     12a:	1f 07       	cpc	r17, r31
     12c:	23 07       	cpc	r18, r19
     12e:	27 07       	cpc	r18, r23
     130:	2b 07       	cpc	r18, r27
     132:	2f 07       	cpc	r18, r31
     134:	33 07       	cpc	r19, r19
     136:	37 07       	cpc	r19, r23
     138:	3b 07       	cpc	r19, r27
     13a:	3f 07       	cpc	r19, r31
     13c:	43 07       	cpc	r20, r19
     13e:	47 07       	cpc	r20, r23
     140:	4b 07       	cpc	r20, r27
     142:	4f 07       	cpc	r20, r31
     144:	53 07       	cpc	r21, r19
     146:	57 07       	cpc	r21, r23
     148:	5b 07       	cpc	r21, r27
     14a:	5f 07       	cpc	r21, r31
     14c:	63 07       	cpc	r22, r19
     14e:	67 07       	cpc	r22, r23
     150:	6b 07       	cpc	r22, r27
     152:	6f 07       	cpc	r22, r31
     154:	73 07       	cpc	r23, r19
     156:	77 07       	cpc	r23, r23
     158:	7b 07       	cpc	r23, r27
     15a:	7f 07       	cpc	r23, r31
     15c:	83 07       	cpc	r24, r19
     15e:	03 08       	sbc	r0, r3
     160:	03 08       	sbc	r0, r3
     162:	03 08       	sbc	r0, r3
     164:	03 08       	sbc	r0, r3
     166:	e7 07       	cpc	r30, r23
     168:	03 08       	sbc	r0, r3
     16a:	03 08       	sbc	r0, r3
     16c:	03 08       	sbc	r0, r3
     16e:	03 08       	sbc	r0, r3
     170:	03 08       	sbc	r0, r3
     172:	03 08       	sbc	r0, r3
     174:	03 08       	sbc	r0, r3
     176:	03 08       	sbc	r0, r3
     178:	03 08       	sbc	r0, r3
     17a:	03 08       	sbc	r0, r3
     17c:	03 08       	sbc	r0, r3
     17e:	03 08       	sbc	r0, r3
     180:	03 08       	sbc	r0, r3
     182:	03 08       	sbc	r0, r3
     184:	03 08       	sbc	r0, r3
     186:	03 08       	sbc	r0, r3
     188:	03 08       	sbc	r0, r3
     18a:	03 08       	sbc	r0, r3
     18c:	03 08       	sbc	r0, r3
     18e:	03 08       	sbc	r0, r3
     190:	03 08       	sbc	r0, r3
     192:	03 08       	sbc	r0, r3
     194:	03 08       	sbc	r0, r3
     196:	03 08       	sbc	r0, r3
     198:	03 08       	sbc	r0, r3
     19a:	03 08       	sbc	r0, r3
     19c:	03 08       	sbc	r0, r3
     19e:	03 08       	sbc	r0, r3
     1a0:	f7 07       	cpc	r31, r23

000001a2 <__ctors_end>:
     1a2:	11 24       	eor	r1, r1
     1a4:	1f be       	out	0x3f, r1	; 63
     1a6:	cf ef       	ldi	r28, 0xFF	; 255
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	df e7       	ldi	r29, 0x7F	; 127
     1ac:	de bf       	out	0x3e, r29	; 62

000001ae <__do_copy_data>:
     1ae:	10 e4       	ldi	r17, 0x40	; 64
     1b0:	a0 e0       	ldi	r26, 0x00	; 0
     1b2:	b0 e4       	ldi	r27, 0x40	; 64
     1b4:	e6 ef       	ldi	r30, 0xF6	; 246
     1b6:	fe e1       	ldi	r31, 0x1E	; 30
     1b8:	00 e0       	ldi	r16, 0x00	; 0
     1ba:	0b bf       	out	0x3b, r16	; 59
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x14>
     1be:	07 90       	elpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	a8 37       	cpi	r26, 0x78	; 120
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0x10>

000001c8 <__do_clear_bss>:
     1c8:	22 e4       	ldi	r18, 0x42	; 66
     1ca:	a8 e7       	ldi	r26, 0x78	; 120
     1cc:	b0 e4       	ldi	r27, 0x40	; 64
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	ac 34       	cpi	r26, 0x4C	; 76
     1d4:	b2 07       	cpc	r27, r18
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
     1d8:	0e 94 1b 04 	call	0x836	; 0x836 <main>
     1dc:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     1e4:	0e 94 44 05 	call	0xa88	; 0xa88 <system_init>
     1e8:	08 95       	ret

000001ea <__vector_30>:
#include "include/usart_basic.h"
#include "include/morse.h"


ISR(TCB2_INT_vect)
{
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	8f 93       	push	r24
	if(TCB2.INTFLAGS & TCB_CAPT_bm)
     1f6:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
     1fa:	80 ff       	sbrs	r24, 0
     1fc:	03 c0       	rjmp	.+6      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
    {
        TCB2.INTFLAGS = TCB_CAPT_bm;
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    }
}
     204:	8f 91       	pop	r24
     206:	0f 90       	pop	r0
     208:	0f be       	out	0x3f, r0	; 63
     20a:	0f 90       	pop	r0
     20c:	1f 90       	pop	r1
     20e:	18 95       	reti

00000210 <__vector_31>:

/**

*/
ISR(USART1_RXC_vect)
{
     210:	1f 92       	push	r1
     212:	0f 92       	push	r0
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	0f 92       	push	r0
     218:	11 24       	eor	r1, r1
     21a:	0b b6       	in	r0, 0x3b	; 59
     21c:	0f 92       	push	r0
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	2f 93       	push	r18
     224:	3f 93       	push	r19
     226:	4f 93       	push	r20
     228:	5f 93       	push	r21
     22a:	6f 93       	push	r22
     22c:	7f 93       	push	r23
     22e:	8f 93       	push	r24
     230:	9f 93       	push	r25
     232:	af 93       	push	r26
     234:	bf 93       	push	r27
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	ef 93       	push	r30
     23c:	ff 93       	push	r31
	static uint8_t field_len = 0;
	static uint32_t tempMsg_ID = 0;
	static BOOL receiving_msg = FALSE;
	uint8_t rx_char;

	rx_char = USART1_get_data();
     23e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <USART1_get_data>
     242:	18 2f       	mov	r17, r24

	if(!buff)
     244:	80 91 83 40 	lds	r24, 0x4083	; 0x804083 <_ZZ11__vector_31E4buff>
     248:	90 91 84 40 	lds	r25, 0x4084	; 0x804084 <_ZZ11__vector_31E4buff+0x1>
     24c:	89 2b       	or	r24, r25
     24e:	31 f4       	brne	.+12     	; 0x25c <__vector_31+0x4c>
	{
		buff = nextEmptyRxBuffer();
     250:	0e 94 56 06 	call	0xcac	; 0xcac <_Z17nextEmptyRxBufferv>
     254:	80 93 83 40 	sts	0x4083, r24	; 0x804083 <_ZZ11__vector_31E4buff>
     258:	90 93 84 40 	sts	0x4084, r25	; 0x804084 <_ZZ11__vector_31E4buff+0x1>
	}

	if(buff)
     25c:	c0 91 83 40 	lds	r28, 0x4083	; 0x804083 <_ZZ11__vector_31E4buff>
     260:	d0 91 84 40 	lds	r29, 0x4084	; 0x804084 <_ZZ11__vector_31E4buff+0x1>
     264:	20 97       	sbiw	r28, 0x00	; 0
     266:	09 f4       	brne	.+2      	; 0x26a <__vector_31+0x5a>
     268:	e3 c0       	rjmp	.+454    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	{
		rx_char = toupper(rx_char);
     26a:	81 2f       	mov	r24, r17
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 94 0c 	call	0x1928	; 0x1928 <toupper>
//		SMCR = 0x00;                                /* exit power-down mode */

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
     272:	84 32       	cpi	r24, 0x24	; 36
     274:	11 f0       	breq	.+4      	; 0x27a <__vector_31+0x6a>
     276:	81 32       	cpi	r24, 0x21	; 33
     278:	49 f5       	brne	.+82     	; 0x2cc <__vector_31+0xbc>
		{
			charIndex = 0;
     27a:	10 92 82 40 	sts	0x4082, r1	; 0x804082 <_ZZ11__vector_31E9charIndex>
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
     27e:	81 32       	cpi	r24, 0x21	; 33
     280:	11 f4       	brne	.+4      	; 0x286 <__vector_31+0x76>
     282:	83 e0       	ldi	r24, 0x03	; 3
     284:	01 c0       	rjmp	.+2      	; 0x288 <__vector_31+0x78>
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	88 83       	st	Y, r24
			field_len = 0;
     28a:	10 92 81 40 	sts	0x4081, r1	; 0x804081 <_ZZ11__vector_31E9field_len>
			tempMsg_ID = 0;
     28e:	10 92 7d 40 	sts	0x407D, r1	; 0x80407d <_ZZ11__vector_31E10tempMsg_ID>
     292:	10 92 7e 40 	sts	0x407E, r1	; 0x80407e <_ZZ11__vector_31E10tempMsg_ID+0x1>
     296:	10 92 7f 40 	sts	0x407F, r1	; 0x80407f <_ZZ11__vector_31E10tempMsg_ID+0x2>
     29a:	10 92 80 40 	sts	0x4080, r1	; 0x804080 <_ZZ11__vector_31E10tempMsg_ID+0x3>
			receiving_msg = TRUE;
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	80 93 7c 40 	sts	0x407C, r24	; 0x80407c <_ZZ11__vector_31E13receiving_msg>

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
     2a4:	10 92 7b 40 	sts	0x407B, r1	; 0x80407b <_ZZ11__vector_31E11field_index>
     2a8:	80 91 7b 40 	lds	r24, 0x407B	; 0x80407b <_ZZ11__vector_31E11field_index>
     2ac:	83 30       	cpi	r24, 0x03	; 3
     2ae:	58 f4       	brcc	.+22     	; 0x2c6 <__vector_31+0xb6>
			{
				buff->fields[field_index][0] = '\0';
     2b0:	fe 01       	movw	r30, r28
     2b2:	05 e1       	ldi	r16, 0x15	; 21
     2b4:	80 9f       	mul	r24, r16
     2b6:	e0 0d       	add	r30, r0
     2b8:	f1 1d       	adc	r31, r1
     2ba:	11 24       	eor	r1, r1
     2bc:	13 82       	std	Z+3, r1	; 0x03
			field_len = 0;
			tempMsg_ID = 0;
			receiving_msg = TRUE;

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
     2be:	8f 5f       	subi	r24, 0xFF	; 255
     2c0:	80 93 7b 40 	sts	0x407B, r24	; 0x80407b <_ZZ11__vector_31E11field_index>
     2c4:	f1 cf       	rjmp	.-30     	; 0x2a8 <__vector_31+0x98>
			{
				buff->fields[field_index][0] = '\0';
			}

			field_index = 0;
     2c6:	10 92 7b 40 	sts	0x407B, r1	; 0x80407b <_ZZ11__vector_31E11field_index>
     2ca:	a7 c0       	rjmp	.+334    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		}
		else if(receiving_msg)
     2cc:	90 91 7c 40 	lds	r25, 0x407C	; 0x80407c <_ZZ11__vector_31E13receiving_msg>
     2d0:	99 23       	and	r25, r25
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <__vector_31+0xc6>
     2d4:	8b c0       	rjmp	.+278    	; 0x3ec <__vector_31+0x1dc>
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
     2d6:	8c 32       	cpi	r24, 0x2C	; 44
     2d8:	29 f0       	breq	.+10     	; 0x2e4 <__vector_31+0xd4>
     2da:	8b 33       	cpi	r24, 0x3B	; 59
     2dc:	19 f0       	breq	.+6      	; 0x2e4 <__vector_31+0xd4>
     2de:	8f 33       	cpi	r24, 0x3F	; 63
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <__vector_31+0xd4>
     2e2:	42 c0       	rjmp	.+132    	; 0x368 <__vector_31+0x158>
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
     2e4:	90 91 7b 40 	lds	r25, 0x407B	; 0x80407b <_ZZ11__vector_31E11field_index>
     2e8:	99 23       	and	r25, r25
     2ea:	89 f0       	breq	.+34     	; 0x30e <__vector_31+0xfe>
				{
					buff->fields[field_index - 1][field_len] = 0;
     2ec:	29 2f       	mov	r18, r25
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	21 50       	subi	r18, 0x01	; 1
     2f2:	31 09       	sbc	r19, r1
     2f4:	40 91 81 40 	lds	r20, 0x4081	; 0x804081 <_ZZ11__vector_31E9field_len>
     2f8:	55 e1       	ldi	r21, 0x15	; 21
     2fa:	52 9f       	mul	r21, r18
     2fc:	f0 01       	movw	r30, r0
     2fe:	53 9f       	mul	r21, r19
     300:	f0 0d       	add	r31, r0
     302:	11 24       	eor	r1, r1
     304:	ec 0f       	add	r30, r28
     306:	fd 1f       	adc	r31, r29
     308:	e4 0f       	add	r30, r20
     30a:	f1 1d       	adc	r31, r1
     30c:	13 82       	std	Z+3, r1	; 0x03
				}

				field_index++;
     30e:	9f 5f       	subi	r25, 0xFF	; 255
     310:	90 93 7b 40 	sts	0x407B, r25	; 0x80407b <_ZZ11__vector_31E11field_index>
				field_len = 0;
     314:	10 92 81 40 	sts	0x4081, r1	; 0x804081 <_ZZ11__vector_31E9field_len>

				if(rx_char == ';')
     318:	8b 33       	cpi	r24, 0x3B	; 59
     31a:	69 f4       	brne	.+26     	; 0x336 <__vector_31+0x126>
				{
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
     31c:	80 91 82 40 	lds	r24, 0x4082	; 0x804082 <_ZZ11__vector_31E9charIndex>
     320:	84 30       	cpi	r24, 0x04	; 4
     322:	30 f0       	brcs	.+12     	; 0x330 <__vector_31+0x120>
					{
						buff->id = (LBMessageID)tempMsg_ID;
     324:	80 91 7d 40 	lds	r24, 0x407D	; 0x80407d <_ZZ11__vector_31E10tempMsg_ID>
     328:	90 91 7e 40 	lds	r25, 0x407E	; 0x80407e <_ZZ11__vector_31E10tempMsg_ID+0x1>
     32c:	89 83       	std	Y+1, r24	; 0x01
     32e:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = FALSE;
     330:	10 92 7c 40 	sts	0x407C, r1	; 0x80407c <_ZZ11__vector_31E13receiving_msg>
     334:	10 c0       	rjmp	.+32     	; 0x356 <__vector_31+0x146>
				}
				else if(rx_char == '?')
     336:	8f 33       	cpi	r24, 0x3F	; 63
     338:	71 f4       	brne	.+28     	; 0x356 <__vector_31+0x146>
				{
					buff->type = LINKBUS_MSG_QUERY;
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	88 83       	st	Y, r24
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
     33e:	80 91 82 40 	lds	r24, 0x4082	; 0x804082 <_ZZ11__vector_31E9charIndex>
     342:	84 30       	cpi	r24, 0x04	; 4
     344:	30 f0       	brcs	.+12     	; 0x352 <__vector_31+0x142>
					{
						buff->id = (LBMessageID)tempMsg_ID;
     346:	80 91 7d 40 	lds	r24, 0x407D	; 0x80407d <_ZZ11__vector_31E10tempMsg_ID>
     34a:	90 91 7e 40 	lds	r25, 0x407E	; 0x80407e <_ZZ11__vector_31E10tempMsg_ID+0x1>
     34e:	89 83       	std	Y+1, r24	; 0x01
     350:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = FALSE;
     352:	10 92 7c 40 	sts	0x407C, r1	; 0x80407c <_ZZ11__vector_31E13receiving_msg>
				}

				if(!receiving_msg)
     356:	80 91 7c 40 	lds	r24, 0x407C	; 0x80407c <_ZZ11__vector_31E13receiving_msg>
     35a:	81 11       	cpse	r24, r1
     35c:	5e c0       	rjmp	.+188    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				{
					buff = 0;
     35e:	10 92 83 40 	sts	0x4083, r1	; 0x804083 <_ZZ11__vector_31E4buff>
     362:	10 92 84 40 	sts	0x4084, r1	; 0x804084 <_ZZ11__vector_31E4buff+0x1>
     366:	59 c0       	rjmp	.+178    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				}
			}
			else
			{
				if(field_index == 0)    /* message ID received */
     368:	20 91 7b 40 	lds	r18, 0x407B	; 0x80407b <_ZZ11__vector_31E11field_index>
     36c:	21 11       	cpse	r18, r1
     36e:	29 c0       	rjmp	.+82     	; 0x3c2 <__vector_31+0x1b2>
				{
					tempMsg_ID = tempMsg_ID * 10 + rx_char;
     370:	40 91 7d 40 	lds	r20, 0x407D	; 0x80407d <_ZZ11__vector_31E10tempMsg_ID>
     374:	50 91 7e 40 	lds	r21, 0x407E	; 0x80407e <_ZZ11__vector_31E10tempMsg_ID+0x1>
     378:	60 91 7f 40 	lds	r22, 0x407F	; 0x80407f <_ZZ11__vector_31E10tempMsg_ID+0x2>
     37c:	70 91 80 40 	lds	r23, 0x4080	; 0x804080 <_ZZ11__vector_31E10tempMsg_ID+0x3>
     380:	44 0f       	add	r20, r20
     382:	55 1f       	adc	r21, r21
     384:	66 1f       	adc	r22, r22
     386:	77 1f       	adc	r23, r23
     388:	8a 01       	movw	r16, r20
     38a:	9b 01       	movw	r18, r22
     38c:	00 0f       	add	r16, r16
     38e:	11 1f       	adc	r17, r17
     390:	22 1f       	adc	r18, r18
     392:	33 1f       	adc	r19, r19
     394:	00 0f       	add	r16, r16
     396:	11 1f       	adc	r17, r17
     398:	22 1f       	adc	r18, r18
     39a:	33 1f       	adc	r19, r19
     39c:	40 0f       	add	r20, r16
     39e:	51 1f       	adc	r21, r17
     3a0:	62 1f       	adc	r22, r18
     3a2:	73 1f       	adc	r23, r19
     3a4:	8a 01       	movw	r16, r20
     3a6:	9b 01       	movw	r18, r22
     3a8:	08 0f       	add	r16, r24
     3aa:	11 1d       	adc	r17, r1
     3ac:	21 1d       	adc	r18, r1
     3ae:	31 1d       	adc	r19, r1
     3b0:	00 93 7d 40 	sts	0x407D, r16	; 0x80407d <_ZZ11__vector_31E10tempMsg_ID>
     3b4:	10 93 7e 40 	sts	0x407E, r17	; 0x80407e <_ZZ11__vector_31E10tempMsg_ID+0x1>
     3b8:	20 93 7f 40 	sts	0x407F, r18	; 0x80407f <_ZZ11__vector_31E10tempMsg_ID+0x2>
     3bc:	30 93 80 40 	sts	0x4080, r19	; 0x804080 <_ZZ11__vector_31E10tempMsg_ID+0x3>
     3c0:	2c c0       	rjmp	.+88     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				}
				else
				{
					buff->fields[field_index - 1][field_len++] = rx_char;
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	21 50       	subi	r18, 0x01	; 1
     3c6:	31 09       	sbc	r19, r1
     3c8:	90 91 81 40 	lds	r25, 0x4081	; 0x804081 <_ZZ11__vector_31E9field_len>
     3cc:	41 e0       	ldi	r20, 0x01	; 1
     3ce:	49 0f       	add	r20, r25
     3d0:	40 93 81 40 	sts	0x4081, r20	; 0x804081 <_ZZ11__vector_31E9field_len>
     3d4:	65 e1       	ldi	r22, 0x15	; 21
     3d6:	62 9f       	mul	r22, r18
     3d8:	a0 01       	movw	r20, r0
     3da:	63 9f       	mul	r22, r19
     3dc:	50 0d       	add	r21, r0
     3de:	11 24       	eor	r1, r1
     3e0:	c4 0f       	add	r28, r20
     3e2:	d5 1f       	adc	r29, r21
     3e4:	c9 0f       	add	r28, r25
     3e6:	d1 1d       	adc	r29, r1
     3e8:	8b 83       	std	Y+3, r24	; 0x03
     3ea:	17 c0       	rjmp	.+46     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				}
			}
		}
		else if(rx_char == 0x0D)    /* Carriage return resets any message in progress */
     3ec:	8d 30       	cpi	r24, 0x0D	; 13
     3ee:	a9 f4       	brne	.+42     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		{
			buff->id = MESSAGE_EMPTY;
     3f0:	19 82       	std	Y+1, r1	; 0x01
     3f2:	1a 82       	std	Y+2, r1	; 0x02
			charIndex = LINKBUS_MAX_MSG_LENGTH;
     3f4:	82 e3       	ldi	r24, 0x32	; 50
     3f6:	80 93 82 40 	sts	0x4082, r24	; 0x804082 <_ZZ11__vector_31E9charIndex>
			field_len = 0;
     3fa:	10 92 81 40 	sts	0x4081, r1	; 0x804081 <_ZZ11__vector_31E9field_len>
			tempMsg_ID = 0;
     3fe:	10 92 7d 40 	sts	0x407D, r1	; 0x80407d <_ZZ11__vector_31E10tempMsg_ID>
     402:	10 92 7e 40 	sts	0x407E, r1	; 0x80407e <_ZZ11__vector_31E10tempMsg_ID+0x1>
     406:	10 92 7f 40 	sts	0x407F, r1	; 0x80407f <_ZZ11__vector_31E10tempMsg_ID+0x2>
     40a:	10 92 80 40 	sts	0x4080, r1	; 0x804080 <_ZZ11__vector_31E10tempMsg_ID+0x3>
			field_index = 0;
     40e:	10 92 7b 40 	sts	0x407B, r1	; 0x80407b <_ZZ11__vector_31E11field_index>
			buff = NULL;
     412:	10 92 83 40 	sts	0x4083, r1	; 0x804083 <_ZZ11__vector_31E4buff>
     416:	10 92 84 40 	sts	0x4084, r1	; 0x804084 <_ZZ11__vector_31E4buff+0x1>
		}

		if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
     41a:	80 91 82 40 	lds	r24, 0x4082	; 0x804082 <_ZZ11__vector_31E9charIndex>
     41e:	8f 5f       	subi	r24, 0xFF	; 255
     420:	80 93 82 40 	sts	0x4082, r24	; 0x804082 <_ZZ11__vector_31E9charIndex>
     424:	82 33       	cpi	r24, 0x32	; 50
     426:	20 f0       	brcs	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		{
			receiving_msg = FALSE;
     428:	10 92 7c 40 	sts	0x407C, r1	; 0x80407c <_ZZ11__vector_31E13receiving_msg>
			charIndex = 0;
     42c:	10 92 82 40 	sts	0x4082, r1	; 0x804082 <_ZZ11__vector_31E9charIndex>
		}
	}
}
     430:	ff 91       	pop	r31
     432:	ef 91       	pop	r30
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	bf 91       	pop	r27
     43a:	af 91       	pop	r26
     43c:	9f 91       	pop	r25
     43e:	8f 91       	pop	r24
     440:	7f 91       	pop	r23
     442:	6f 91       	pop	r22
     444:	5f 91       	pop	r21
     446:	4f 91       	pop	r20
     448:	3f 91       	pop	r19
     44a:	2f 91       	pop	r18
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	0f 90       	pop	r0
     452:	0b be       	out	0x3b, r0	; 59
     454:	0f 90       	pop	r0
     456:	0f be       	out	0x3f, r0	; 63
     458:	0f 90       	pop	r0
     45a:	1f 90       	pop	r1
     45c:	18 95       	reti

0000045e <__vector_32>:

/**

*/
ISR(USART1_DRE_vect)
{
     45e:	1f 92       	push	r1
     460:	0f 92       	push	r0
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	0f 92       	push	r0
     466:	11 24       	eor	r1, r1
     468:	0b b6       	in	r0, 0x3b	; 59
     46a:	0f 92       	push	r0
     46c:	2f 93       	push	r18
     46e:	3f 93       	push	r19
     470:	4f 93       	push	r20
     472:	5f 93       	push	r21
     474:	6f 93       	push	r22
     476:	7f 93       	push	r23
     478:	8f 93       	push	r24
     47a:	9f 93       	push	r25
     47c:	af 93       	push	r26
     47e:	bf 93       	push	r27
     480:	ef 93       	push	r30
     482:	ff 93       	push	r31
	static LinkbusTxBuffer* buff = 0;
	static uint8_t charIndex = 0;

	if(!buff)
     484:	80 91 79 40 	lds	r24, 0x4079	; 0x804079 <_ZZ11__vector_32E4buff>
     488:	90 91 7a 40 	lds	r25, 0x407A	; 0x80407a <_ZZ11__vector_32E4buff+0x1>
     48c:	89 2b       	or	r24, r25
     48e:	31 f4       	brne	.+12     	; 0x49c <__vector_32+0x3e>
	{
		buff = nextFullTxBuffer();
     490:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_Z16nextFullTxBufferv>
     494:	80 93 79 40 	sts	0x4079, r24	; 0x804079 <_ZZ11__vector_32E4buff>
     498:	90 93 7a 40 	sts	0x407A, r25	; 0x80407a <_ZZ11__vector_32E4buff+0x1>
	}

	if((*buff)[charIndex])
     49c:	e0 91 79 40 	lds	r30, 0x4079	; 0x804079 <_ZZ11__vector_32E4buff>
     4a0:	f0 91 7a 40 	lds	r31, 0x407A	; 0x80407a <_ZZ11__vector_32E4buff+0x1>
     4a4:	80 91 78 40 	lds	r24, 0x4078	; 0x804078 <__data_end>
     4a8:	df 01       	movw	r26, r30
     4aa:	a8 0f       	add	r26, r24
     4ac:	b1 1d       	adc	r27, r1
     4ae:	9c 91       	ld	r25, X
     4b0:	99 23       	and	r25, r25
     4b2:	31 f0       	breq	.+12     	; 0x4c0 <__vector_32+0x62>
	{
		/* Put data into buffer, sends the data */
		USART1.TXDATAL = (*buff)[charIndex++];
     4b4:	8f 5f       	subi	r24, 0xFF	; 255
     4b6:	80 93 78 40 	sts	0x4078, r24	; 0x804078 <__data_end>
     4ba:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
     4be:	0d c0       	rjmp	.+26     	; 0x4da <__vector_32+0x7c>
	}
	else
	{
		charIndex = 0;
     4c0:	10 92 78 40 	sts	0x4078, r1	; 0x804078 <__data_end>
		(*buff)[0] = '\0';
     4c4:	10 82       	st	Z, r1
		buff = nextFullTxBuffer();
     4c6:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_Z16nextFullTxBufferv>
     4ca:	80 93 79 40 	sts	0x4079, r24	; 0x804079 <_ZZ11__vector_32E4buff>
     4ce:	90 93 7a 40 	sts	0x407A, r25	; 0x80407a <_ZZ11__vector_32E4buff+0x1>
		if(!buff)
     4d2:	89 2b       	or	r24, r25
     4d4:	11 f4       	brne	.+4      	; 0x4da <__vector_32+0x7c>
		{
			linkbus_end_tx();
     4d6:	0e 94 96 06 	call	0xd2c	; 0xd2c <_Z14linkbus_end_txv>
		}
	}
}
     4da:	ff 91       	pop	r31
     4dc:	ef 91       	pop	r30
     4de:	bf 91       	pop	r27
     4e0:	af 91       	pop	r26
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	7f 91       	pop	r23
     4e8:	6f 91       	pop	r22
     4ea:	5f 91       	pop	r21
     4ec:	4f 91       	pop	r20
     4ee:	3f 91       	pop	r19
     4f0:	2f 91       	pop	r18
     4f2:	0f 90       	pop	r0
     4f4:	0b be       	out	0x3b, r0	; 59
     4f6:	0f 90       	pop	r0
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	0f 90       	pop	r0
     4fc:	1f 90       	pop	r1
     4fe:	18 95       	reti

00000500 <__vector_41>:
{
	
}

void wdt_init(WDReset resetType)
{
     500:	1f 92       	push	r1
     502:	0f 92       	push	r0
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	0f 92       	push	r0
     508:	11 24       	eor	r1, r1
     50a:	2f 93       	push	r18
     50c:	3f 93       	push	r19
     50e:	8f 93       	push	r24
     510:	9f 93       	push	r25
     512:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
     516:	80 ff       	sbrs	r24, 0
     518:	18 c0       	rjmp	.+48     	; 0x54a <__vector_41+0x4a>
     51a:	80 91 dd 40 	lds	r24, 0x40DD	; 0x8040dd <_ZZ11__vector_41E3cnt>
     51e:	90 91 de 40 	lds	r25, 0x40DE	; 0x8040de <_ZZ11__vector_41E3cnt+0x1>
     522:	9c 01       	movw	r18, r24
     524:	2f 5f       	subi	r18, 0xFF	; 255
     526:	3f 4f       	sbci	r19, 0xFF	; 255
     528:	20 93 dd 40 	sts	0x40DD, r18	; 0x8040dd <_ZZ11__vector_41E3cnt>
     52c:	30 93 de 40 	sts	0x40DE, r19	; 0x8040de <_ZZ11__vector_41E3cnt+0x1>
     530:	8b 32       	cpi	r24, 0x2B	; 43
     532:	91 40       	sbci	r25, 0x01	; 1
     534:	39 f4       	brne	.+14     	; 0x544 <__vector_41+0x44>
     536:	10 92 dd 40 	sts	0x40DD, r1	; 0x8040dd <_ZZ11__vector_41E3cnt>
     53a:	10 92 de 40 	sts	0x40DE, r1	; 0x8040de <_ZZ11__vector_41E3cnt+0x1>
     53e:	8a b1       	in	r24, 0x0a	; 10
     540:	80 64       	ori	r24, 0x40	; 64
     542:	8a b9       	out	0x0a, r24	; 10
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
     54a:	9f 91       	pop	r25
     54c:	8f 91       	pop	r24
     54e:	3f 91       	pop	r19
     550:	2f 91       	pop	r18
     552:	0f 90       	pop	r0
     554:	0f be       	out	0x3f, r0	; 63
     556:	0f 90       	pop	r0
     558:	1f 90       	pop	r1
     55a:	18 95       	reti

0000055c <__vector_12>:
     55c:	1f 92       	push	r1
     55e:	0f 92       	push	r0
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	0f 92       	push	r0
     564:	11 24       	eor	r1, r1
     566:	0b b6       	in	r0, 0x3b	; 59
     568:	0f 92       	push	r0
     56a:	2f 93       	push	r18
     56c:	3f 93       	push	r19
     56e:	4f 93       	push	r20
     570:	5f 93       	push	r21
     572:	6f 93       	push	r22
     574:	7f 93       	push	r23
     576:	8f 93       	push	r24
     578:	9f 93       	push	r25
     57a:	af 93       	push	r26
     57c:	bf 93       	push	r27
     57e:	ef 93       	push	r30
     580:	ff 93       	push	r31
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	00 d0       	rcall	.+0      	; 0x588 <__vector_12+0x2c>
     588:	1f 92       	push	r1
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
     592:	80 ff       	sbrs	r24, 0
     594:	38 c1       	rjmp	.+624    	; 0x806 <__vector_12+0x2aa>
     596:	80 91 9b 40 	lds	r24, 0x409B	; 0x80409b <_ZL21g_util_tick_countdown>
     59a:	90 91 9c 40 	lds	r25, 0x409C	; 0x80409c <_ZL21g_util_tick_countdown+0x1>
     59e:	89 2b       	or	r24, r25
     5a0:	49 f0       	breq	.+18     	; 0x5b4 <__vector_12+0x58>
     5a2:	80 91 9b 40 	lds	r24, 0x409B	; 0x80409b <_ZL21g_util_tick_countdown>
     5a6:	90 91 9c 40 	lds	r25, 0x409C	; 0x80409c <_ZL21g_util_tick_countdown+0x1>
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	80 93 9b 40 	sts	0x409B, r24	; 0x80409b <_ZL21g_util_tick_countdown>
     5b0:	90 93 9c 40 	sts	0x409C, r25	; 0x80409c <_ZL21g_util_tick_countdown+0x1>
     5b4:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <g_event_enabled>
     5b8:	88 23       	and	r24, r24
     5ba:	29 f0       	breq	.+10     	; 0x5c6 <__vector_12+0x6a>
     5bc:	80 91 cd 40 	lds	r24, 0x40CD	; 0x8040cd <g_event_commenced>
     5c0:	81 11       	cpse	r24, r1
     5c2:	03 c0       	rjmp	.+6      	; 0x5ca <__vector_12+0x6e>
     5c4:	03 c0       	rjmp	.+6      	; 0x5cc <__vector_12+0x70>
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	01 c0       	rjmp	.+2      	; 0x5cc <__vector_12+0x70>
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	88 23       	and	r24, r24
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <__vector_12+0x76>
     5d0:	81 c0       	rjmp	.+258    	; 0x6d4 <__vector_12+0x178>
     5d2:	80 91 9e 40 	lds	r24, 0x409E	; 0x80409e <_ZL12g_on_the_air>
     5d6:	90 91 9f 40 	lds	r25, 0x409F	; 0x80409f <_ZL12g_on_the_air+0x1>
     5da:	a0 91 a0 40 	lds	r26, 0x40A0	; 0x8040a0 <_ZL12g_on_the_air+0x2>
     5de:	b0 91 a1 40 	lds	r27, 0x40A1	; 0x8040a1 <_ZL12g_on_the_air+0x3>
     5e2:	18 16       	cp	r1, r24
     5e4:	19 06       	cpc	r1, r25
     5e6:	1a 06       	cpc	r1, r26
     5e8:	1b 06       	cpc	r1, r27
     5ea:	0c f0       	brlt	.+2      	; 0x5ee <__vector_12+0x92>
     5ec:	58 c0       	rjmp	.+176    	; 0x69e <__vector_12+0x142>
     5ee:	80 91 df 40 	lds	r24, 0x40DF	; 0x8040df <_ZZ11__vector_12E7codeInc>
     5f2:	90 91 e0 40 	lds	r25, 0x40E0	; 0x8040e0 <_ZZ11__vector_12E7codeInc+0x1>
     5f6:	00 97       	sbiw	r24, 0x00	; 0
     5f8:	09 f4       	brne	.+2      	; 0x5fc <__vector_12+0xa0>
     5fa:	44 c0       	rjmp	.+136    	; 0x684 <__vector_12+0x128>
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	80 93 df 40 	sts	0x40DF, r24	; 0x8040df <_ZZ11__vector_12E7codeInc>
     602:	90 93 e0 40 	sts	0x40E0, r25	; 0x8040e0 <_ZZ11__vector_12E7codeInc+0x1>
     606:	89 2b       	or	r24, r25
     608:	09 f0       	breq	.+2      	; 0x60c <__vector_12+0xb0>
     60a:	64 c0       	rjmp	.+200    	; 0x6d4 <__vector_12+0x178>
     60c:	ae 01       	movw	r20, r28
     60e:	4e 5f       	subi	r20, 0xFE	; 254
     610:	5f 4f       	sbci	r21, 0xFF	; 255
     612:	be 01       	movw	r22, r28
     614:	6d 5f       	subi	r22, 0xFD	; 253
     616:	7f 4f       	sbci	r23, 0xFF	; 255
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 07 08 	call	0x100e	; 0x100e <_Z9makeMorsePcPhS0_>
     620:	80 93 e1 40 	sts	0x40E1, r24	; 0x8040e1 <_ZZ11__vector_12E3key>
     624:	8b 81       	ldd	r24, Y+3	; 0x03
     626:	81 11       	cpse	r24, r1
     628:	25 c0       	rjmp	.+74     	; 0x674 <__vector_12+0x118>
     62a:	8a 81       	ldd	r24, Y+2	; 0x02
     62c:	88 23       	and	r24, r24
     62e:	11 f1       	breq	.+68     	; 0x674 <__vector_12+0x118>
     630:	8d ef       	ldi	r24, 0xFD	; 253
     632:	80 93 9a 40 	sts	0x409A, r24	; 0x80409a <_ZL18g_last_status_code>
     636:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <g_pattern_codespeed>
     63a:	0e 94 48 04 	call	0x890	; 0x890 <_Z13throttleValueh>
     63e:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <_ZL15g_code_throttle>
     642:	90 93 02 40 	sts	0x4002, r25	; 0x804002 <_ZL15g_code_throttle+0x1>
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	8b 83       	std	Y+3, r24	; 0x03
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	be 01       	movw	r22, r28
     650:	6d 5f       	subi	r22, 0xFD	; 253
     652:	7f 4f       	sbci	r23, 0xFF	; 255
     654:	82 ea       	ldi	r24, 0xA2	; 162
     656:	90 e4       	ldi	r25, 0x40	; 64
     658:	0e 94 07 08 	call	0x100e	; 0x100e <_Z9makeMorsePcPhS0_>
     65c:	ae 01       	movw	r20, r28
     65e:	4e 5f       	subi	r20, 0xFE	; 254
     660:	5f 4f       	sbci	r21, 0xFF	; 255
     662:	be 01       	movw	r22, r28
     664:	6d 5f       	subi	r22, 0xFD	; 253
     666:	7f 4f       	sbci	r23, 0xFF	; 255
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 07 08 	call	0x100e	; 0x100e <_Z9makeMorsePcPhS0_>
     670:	80 93 e1 40 	sts	0x40E1, r24	; 0x8040e1 <_ZZ11__vector_12E3key>
     674:	80 91 e1 40 	lds	r24, 0x40E1	; 0x8040e1 <_ZZ11__vector_12E3key>
     678:	88 23       	and	r24, r24
     67a:	61 f1       	breq	.+88     	; 0x6d4 <__vector_12+0x178>
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	0e 94 3d 0a 	call	0x147a	; 0x147a <_Z18powerToTransmitterh>
     682:	28 c0       	rjmp	.+80     	; 0x6d4 <__vector_12+0x178>
     684:	80 91 e1 40 	lds	r24, 0x40E1	; 0x8040e1 <_ZZ11__vector_12E3key>
     688:	0e 94 3f 0a 	call	0x147e	; 0x147e <_Z14keyTransmitterh>
     68c:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <_ZL15g_code_throttle>
     690:	90 91 02 40 	lds	r25, 0x4002	; 0x804002 <_ZL15g_code_throttle+0x1>
     694:	80 93 df 40 	sts	0x40DF, r24	; 0x8040df <_ZZ11__vector_12E7codeInc>
     698:	90 93 e0 40 	sts	0x40E0, r25	; 0x8040e0 <_ZZ11__vector_12E7codeInc+0x1>
     69c:	1b c0       	rjmp	.+54     	; 0x6d4 <__vector_12+0x178>
     69e:	80 91 9e 40 	lds	r24, 0x409E	; 0x80409e <_ZL12g_on_the_air>
     6a2:	90 91 9f 40 	lds	r25, 0x409F	; 0x80409f <_ZL12g_on_the_air+0x1>
     6a6:	a0 91 a0 40 	lds	r26, 0x40A0	; 0x8040a0 <_ZL12g_on_the_air+0x2>
     6aa:	b0 91 a1 40 	lds	r27, 0x40A1	; 0x8040a1 <_ZL12g_on_the_air+0x3>
     6ae:	89 2b       	or	r24, r25
     6b0:	8a 2b       	or	r24, r26
     6b2:	8b 2b       	or	r24, r27
     6b4:	79 f4       	brne	.+30     	; 0x6d4 <__vector_12+0x178>
     6b6:	80 91 e1 40 	lds	r24, 0x40E1	; 0x8040e1 <_ZZ11__vector_12E3key>
     6ba:	88 23       	and	r24, r24
     6bc:	59 f0       	breq	.+22     	; 0x6d4 <__vector_12+0x178>
     6be:	10 92 e1 40 	sts	0x40E1, r1	; 0x8040e1 <_ZZ11__vector_12E3key>
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	0e 94 3f 0a 	call	0x147e	; 0x147e <_Z14keyTransmitterh>
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	0e 94 3d 0a 	call	0x147a	; 0x147a <_Z18powerToTransmitterh>
     6ce:	8e ef       	ldi	r24, 0xFE	; 254
     6d0:	80 93 9a 40 	sts	0x409A, r24	; 0x80409a <_ZL18g_last_status_code>
     6d4:	80 91 e2 40 	lds	r24, 0x40E2	; 0x8040e2 <_ZZ11__vector_12E19conversionInProcess>
     6d8:	81 11       	cpse	r24, r1
     6da:	42 c0       	rjmp	.+132    	; 0x760 <__vector_12+0x204>
     6dc:	8f ef       	ldi	r24, 0xFF	; 255
     6de:	80 93 e3 40 	sts	0x40E3, r24	; 0x8040e3 <_ZZ11__vector_12E24indexConversionInProcess>
     6e2:	19 82       	std	Y+1, r1	; 0x01
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
     6e6:	85 30       	cpi	r24, 0x05	; 5
     6e8:	30 f5       	brcc	.+76     	; 0x736 <__vector_12+0x1da>
     6ea:	e9 81       	ldd	r30, Y+1	; 0x01
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	ee 0f       	add	r30, r30
     6f0:	ff 1f       	adc	r31, r31
     6f2:	ec 5f       	subi	r30, 0xFC	; 252
     6f4:	ff 4b       	sbci	r31, 0xBF	; 191
     6f6:	80 81       	ld	r24, Z
     6f8:	91 81       	ldd	r25, Z+1	; 0x01
     6fa:	89 2b       	or	r24, r25
     6fc:	59 f0       	breq	.+22     	; 0x714 <__vector_12+0x1b8>
     6fe:	e9 81       	ldd	r30, Y+1	; 0x01
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	ee 0f       	add	r30, r30
     704:	ff 1f       	adc	r31, r31
     706:	ec 5f       	subi	r30, 0xFC	; 252
     708:	ff 4b       	sbci	r31, 0xBF	; 191
     70a:	80 81       	ld	r24, Z
     70c:	91 81       	ldd	r25, Z+1	; 0x01
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	80 83       	st	Z, r24
     712:	91 83       	std	Z+1, r25	; 0x01
     714:	e9 81       	ldd	r30, Y+1	; 0x01
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	ee 0f       	add	r30, r30
     71a:	ff 1f       	adc	r31, r31
     71c:	ec 5f       	subi	r30, 0xFC	; 252
     71e:	ff 4b       	sbci	r31, 0xBF	; 191
     720:	80 81       	ld	r24, Z
     722:	91 81       	ldd	r25, Z+1	; 0x01
     724:	89 2b       	or	r24, r25
     726:	19 f4       	brne	.+6      	; 0x72e <__vector_12+0x1d2>
     728:	89 81       	ldd	r24, Y+1	; 0x01
     72a:	80 93 e3 40 	sts	0x40E3, r24	; 0x8040e3 <_ZZ11__vector_12E24indexConversionInProcess>
     72e:	89 81       	ldd	r24, Y+1	; 0x01
     730:	8f 5f       	subi	r24, 0xFF	; 255
     732:	89 83       	std	Y+1, r24	; 0x01
     734:	d7 cf       	rjmp	.-82     	; 0x6e4 <__vector_12+0x188>
     736:	80 91 e3 40 	lds	r24, 0x40E3	; 0x8040e3 <_ZZ11__vector_12E24indexConversionInProcess>
     73a:	88 23       	and	r24, r24
     73c:	0c f4       	brge	.+2      	; 0x740 <__vector_12+0x1e4>
     73e:	60 c0       	rjmp	.+192    	; 0x800 <__vector_12+0x2a4>
     740:	88 0f       	add	r24, r24
     742:	99 0b       	sbc	r25, r25
     744:	fc 01       	movw	r30, r24
     746:	ed 59       	subi	r30, 0x9D	; 157
     748:	ff 4b       	sbci	r31, 0xBF	; 191
     74a:	20 81       	ld	r18, Z
     74c:	31 81       	ldd	r19, Z+1	; 0x01
     74e:	fc 01       	movw	r30, r24
     750:	ec 5f       	subi	r30, 0xFC	; 252
     752:	ff 4b       	sbci	r31, 0xBF	; 191
     754:	20 83       	st	Z, r18
     756:	31 83       	std	Z+1, r19	; 0x01
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	80 93 e2 40 	sts	0x40E2, r24	; 0x8040e2 <_ZZ11__vector_12E19conversionInProcess>
     75e:	50 c0       	rjmp	.+160    	; 0x800 <__vector_12+0x2a4>
     760:	10 92 e4 40 	sts	0x40E4, r1	; 0x8040e4 <_ZZ11__vector_12E20holdConversionResult>
     764:	10 92 e5 40 	sts	0x40E5, r1	; 0x8040e5 <_ZZ11__vector_12E20holdConversionResult+0x1>
     768:	40 91 e3 40 	lds	r20, 0x40E3	; 0x8040e3 <_ZZ11__vector_12E24indexConversionInProcess>
     76c:	84 2f       	mov	r24, r20
     76e:	04 2e       	mov	r0, r20
     770:	00 0c       	add	r0, r0
     772:	99 0b       	sbc	r25, r25
     774:	fc 01       	movw	r30, r24
     776:	ee 0f       	add	r30, r30
     778:	ff 1f       	adc	r31, r31
     77a:	ed 52       	subi	r30, 0x2D	; 45
     77c:	ff 4b       	sbci	r31, 0xBF	; 191
     77e:	20 81       	ld	r18, Z
     780:	31 81       	ldd	r19, Z+1	; 0x01
     782:	fc 01       	movw	r30, r24
     784:	e2 53       	subi	r30, 0x32	; 50
     786:	ff 4b       	sbci	r31, 0xBF	; 191
     788:	51 e0       	ldi	r21, 0x01	; 1
     78a:	50 83       	st	Z, r21
     78c:	41 11       	cpse	r20, r1
     78e:	2d c0       	rjmp	.+90     	; 0x7ea <__vector_12+0x28e>
     790:	fc 01       	movw	r30, r24
     792:	ee 0f       	add	r30, r30
     794:	ff 1f       	adc	r31, r31
     796:	e3 59       	subi	r30, 0x93	; 147
     798:	ff 4b       	sbci	r31, 0xBF	; 191
     79a:	40 81       	ld	r20, Z
     79c:	51 81       	ldd	r21, Z+1	; 0x01
     79e:	42 17       	cp	r20, r18
     7a0:	53 07       	cpc	r21, r19
     7a2:	60 f4       	brcc	.+24     	; 0x7bc <__vector_12+0x260>
     7a4:	fc 01       	movw	r30, r24
     7a6:	ee 0f       	add	r30, r30
     7a8:	ff 1f       	adc	r31, r31
     7aa:	ec 5f       	subi	r30, 0xFC	; 252
     7ac:	ff 4b       	sbci	r31, 0xBF	; 191
     7ae:	24 e6       	ldi	r18, 0x64	; 100
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	20 83       	st	Z, r18
     7b4:	31 83       	std	Z+1, r19	; 0x01
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	19 c0       	rjmp	.+50     	; 0x7ee <__vector_12+0x292>
     7bc:	21 15       	cp	r18, r1
     7be:	31 05       	cpc	r19, r1
     7c0:	11 f0       	breq	.+4      	; 0x7c6 <__vector_12+0x26a>
     7c2:	21 50       	subi	r18, 0x01	; 1
     7c4:	31 09       	sbc	r19, r1
     7c6:	41 e0       	ldi	r20, 0x01	; 1
     7c8:	40 93 9d 40 	sts	0x409D, r20	; 0x80409d <_ZL29g_battery_measurements_active>
     7cc:	24 37       	cpi	r18, 0x74	; 116
     7ce:	44 e0       	ldi	r20, 0x04	; 4
     7d0:	34 07       	cpc	r19, r20
     7d2:	18 f0       	brcs	.+6      	; 0x7da <__vector_12+0x27e>
     7d4:	10 92 00 40 	sts	0x4000, r1	; 0x804000 <__DATA_REGION_ORIGIN__>
     7d8:	0a c0       	rjmp	.+20     	; 0x7ee <__vector_12+0x292>
     7da:	2d 38       	cpi	r18, 0x8D	; 141
     7dc:	42 e0       	ldi	r20, 0x02	; 2
     7de:	34 07       	cpc	r19, r20
     7e0:	30 f0       	brcs	.+12     	; 0x7ee <__vector_12+0x292>
     7e2:	41 e0       	ldi	r20, 0x01	; 1
     7e4:	40 93 00 40 	sts	0x4000, r20	; 0x804000 <__DATA_REGION_ORIGIN__>
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <__vector_12+0x292>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	88 0f       	add	r24, r24
     7f0:	99 1f       	adc	r25, r25
     7f2:	fc 01       	movw	r30, r24
     7f4:	ed 52       	subi	r30, 0x2D	; 45
     7f6:	ff 4b       	sbci	r31, 0xBF	; 191
     7f8:	20 83       	st	Z, r18
     7fa:	31 83       	std	Z+1, r19	; 0x01
     7fc:	10 92 e2 40 	sts	0x40E2, r1	; 0x8040e2 <_ZZ11__vector_12E19conversionInProcess>
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
     806:	23 96       	adiw	r28, 0x03	; 3
     808:	cd bf       	out	0x3d, r28	; 61
     80a:	de bf       	out	0x3e, r29	; 62
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	ff 91       	pop	r31
     812:	ef 91       	pop	r30
     814:	bf 91       	pop	r27
     816:	af 91       	pop	r26
     818:	9f 91       	pop	r25
     81a:	8f 91       	pop	r24
     81c:	7f 91       	pop	r23
     81e:	6f 91       	pop	r22
     820:	5f 91       	pop	r21
     822:	4f 91       	pop	r20
     824:	3f 91       	pop	r19
     826:	2f 91       	pop	r18
     828:	0f 90       	pop	r0
     82a:	0b be       	out	0x3b, r0	; 59
     82c:	0f 90       	pop	r0
     82e:	0f be       	out	0x3f, r0	; 63
     830:	0f 90       	pop	r0
     832:	1f 90       	pop	r1
     834:	18 95       	reti

00000836 <main>:
     836:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <atmel_start_init>
     83a:	81 e1       	ldi	r24, 0x11	; 17
     83c:	90 e4       	ldi	r25, 0x40	; 64
     83e:	0e 94 d3 06 	call	0xda6	; 0xda6 <_Z17linkbus_send_textPc>
     842:	0e 94 90 04 	call	0x920	; 0x920 <_Z21ADC0_startConversionsv>
     846:	c0 e0       	ldi	r28, 0x00	; 0
     848:	d0 e0       	ldi	r29, 0x00	; 0
     84a:	68 ee       	ldi	r22, 0xE8	; 232
     84c:	73 e0       	ldi	r23, 0x03	; 3
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 7f 09 	call	0x12fe	; 0x12fe <util_delay_ms>
     856:	81 11       	cpse	r24, r1
     858:	f8 cf       	rjmp	.-16     	; 0x84a <main+0x14>
     85a:	8e 01       	movw	r16, r28
     85c:	0f 5f       	subi	r16, 0xFF	; 255
     85e:	1f 4f       	sbci	r17, 0xFF	; 255
     860:	df 93       	push	r29
     862:	cf 93       	push	r28
     864:	89 e1       	ldi	r24, 0x19	; 25
     866:	90 e4       	ldi	r25, 0x40	; 64
     868:	9f 93       	push	r25
     86a:	8f 93       	push	r24
     86c:	85 e8       	ldi	r24, 0x85	; 133
     86e:	90 e4       	ldi	r25, 0x40	; 64
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	0e 94 9c 0c 	call	0x1938	; 0x1938 <sprintf>
     878:	85 e8       	ldi	r24, 0x85	; 133
     87a:	90 e4       	ldi	r25, 0x40	; 64
     87c:	0e 94 d3 06 	call	0xda6	; 0xda6 <_Z17linkbus_send_textPc>
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	e8 01       	movw	r28, r16
     88e:	dd cf       	rjmp	.-70     	; 0x84a <main+0x14>

00000890 <_Z13throttleValueh>:
}

uint16_t throttleValue(uint8_t speed)
{
	return 0;
}
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	08 95       	ret

00000896 <_ZL9PORT_initv>:
static void ADC0_SYSTEM_init(void);

static void PORT_init(void)
{
	/* Disable interrupt and digital input buffer on PD2 */
	PORTD.PIN2CTRL &= ~PORT_ISC_gm;
     896:	e0 e6       	ldi	r30, 0x60	; 96
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	82 89       	ldd	r24, Z+18	; 0x12
     89c:	88 7f       	andi	r24, 0xF8	; 248
     89e:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     8a0:	82 89       	ldd	r24, Z+18	; 0x12
     8a2:	84 60       	ori	r24, 0x04	; 4
     8a4:	82 8b       	std	Z+18, r24	; 0x12
	/* Disable interrupt and digital input buffer on PD3 */
	PORTD.PIN3CTRL &= ~PORT_ISC_gm;
     8a6:	83 89       	ldd	r24, Z+19	; 0x13
     8a8:	88 7f       	andi	r24, 0xF8	; 248
     8aa:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     8ac:	83 89       	ldd	r24, Z+19	; 0x13
     8ae:	84 60       	ori	r24, 0x04	; 4
     8b0:	83 8b       	std	Z+19, r24	; 0x13
	/* Disable interrupt and digital input buffer on PD4 */
	PORTD.PIN4CTRL &= ~PORT_ISC_gm;
     8b2:	84 89       	ldd	r24, Z+20	; 0x14
     8b4:	88 7f       	andi	r24, 0xF8	; 248
     8b6:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN4CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     8b8:	84 89       	ldd	r24, Z+20	; 0x14
     8ba:	84 60       	ori	r24, 0x04	; 4
     8bc:	84 8b       	std	Z+20, r24	; 0x14
	/* Disable interrupt and digital input buffer on PD5 */
	PORTD.PIN5CTRL &= ~PORT_ISC_gm;
     8be:	85 89       	ldd	r24, Z+21	; 0x15
     8c0:	88 7f       	andi	r24, 0xF8	; 248
     8c2:	85 8b       	std	Z+21, r24	; 0x15
	PORTD.PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     8c4:	85 89       	ldd	r24, Z+21	; 0x15
     8c6:	84 60       	ori	r24, 0x04	; 4
     8c8:	85 8b       	std	Z+21, r24	; 0x15
	
	/* Disable pull-up resistor */
	PORTD.PIN2CTRL &= ~PORT_PULLUPEN_bm;
     8ca:	82 89       	ldd	r24, Z+18	; 0x12
     8cc:	87 7f       	andi	r24, 0xF7	; 247
     8ce:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL &= ~PORT_PULLUPEN_bm;
     8d0:	83 89       	ldd	r24, Z+19	; 0x13
     8d2:	87 7f       	andi	r24, 0xF7	; 247
     8d4:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL &= ~PORT_PULLUPEN_bm;
     8d6:	84 89       	ldd	r24, Z+20	; 0x14
     8d8:	87 7f       	andi	r24, 0xF7	; 247
     8da:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL &= ~PORT_PULLUPEN_bm;
     8dc:	85 89       	ldd	r24, Z+21	; 0x15
     8de:	87 7f       	andi	r24, 0xF7	; 247
     8e0:	85 8b       	std	Z+21, r24	; 0x15
     8e2:	08 95       	ret

000008e4 <_ZL10VREF0_initv>:
}

static void VREF0_init(void)
{
	VREF.ADC0REF = VREF_REFSEL_2V048_gc;  /* Internal 2.048V reference */
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     8ea:	08 95       	ret

000008ec <_ZL9ADC0_initv>:
}

static void ADC0_init(void)
{
	ADC0.CTRLC = ADC_PRESC_DIV64_gc;   /* CLK_PER divided by 4 => 24096 sps */
     8ec:	e0 e0       	ldi	r30, 0x00	; 0
     8ee:	f6 e0       	ldi	r31, 0x06	; 6
     8f0:	8a e0       	ldi	r24, 0x0A	; 10
     8f2:	82 83       	std	Z+2, r24	; 0x02
	
	ADC0.CTRLA = ADC_ENABLE_bm        /* ADC Enable: enabled */
	| ADC_RESSEL_12BIT_gc      /* 12-bit mode */
//	| ADC_CONVMODE_bm          /* Differential Conversion */
	| ADC_FREERUN_bm;          /* Enable Free-Run mode */
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	80 83       	st	Z, r24
	
	ADC0.MUXPOS = ADC_MUXPOS_AIN3_gc;     /* Select ADC channel AIN3 <-> PD3 */
     8f8:	80 87       	std	Z+8, r24	; 0x08
     8fa:	08 95       	ret

000008fc <_ZL9ADC0_readv>:
}

int16_t ADC0_read(void)
{
	/* Clear the interrupt flag by reading the result */
	return ADC0.RES;
     8fc:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
     900:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
}
     904:	08 95       	ret

00000906 <_ZL10ADC0_startv>:

static void ADC0_start(void)
{
	ADC0.INTCTRL = 0x01; /* Enable interrupt */
     906:	e0 e0       	ldi	r30, 0x00	; 0
     908:	f6 e0       	ldi	r31, 0x06	; 6
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	84 87       	std	Z+12, r24	; 0x0c
	/* Start conversion */
	ADC0.COMMAND = ADC_STCONV_bm;
     90e:	82 87       	std	Z+10, r24	; 0x0a
     910:	08 95       	ret

00000912 <_ZL16ADC0_SYSTEM_initv>:
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
}

static void ADC0_SYSTEM_init(void)
{
	PORT_init();
     912:	0e 94 4b 04 	call	0x896	; 0x896 <_ZL9PORT_initv>
	VREF0_init();
     916:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_ZL10VREF0_initv>
	ADC0_init();
     91a:	0e 94 76 04 	call	0x8ec	; 0x8ec <_ZL9ADC0_initv>
     91e:	08 95       	ret

00000920 <_Z21ADC0_startConversionsv>:
}

void ADC0_startConversions(void)
{
	ADC0_SYSTEM_init();
     920:	0e 94 89 04 	call	0x912	; 0x912 <_ZL16ADC0_SYSTEM_initv>
	ADC0_start();
     924:	0e 94 83 04 	call	0x906	; 0x906 <_ZL10ADC0_startv>
     928:	08 95       	ret

0000092a <__vector_24>:
}

ISR(ADC0_RESRDY_vect)
{
     92a:	1f 92       	push	r1
     92c:	0f 92       	push	r0
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	0f 92       	push	r0
     932:	11 24       	eor	r1, r1
     934:	0b b6       	in	r0, 0x3b	; 59
     936:	0f 92       	push	r0
     938:	2f 93       	push	r18
     93a:	3f 93       	push	r19
     93c:	4f 93       	push	r20
     93e:	5f 93       	push	r21
     940:	6f 93       	push	r22
     942:	7f 93       	push	r23
     944:	8f 93       	push	r24
     946:	9f 93       	push	r25
     948:	af 93       	push	r26
     94a:	bf 93       	push	r27
     94c:	ef 93       	push	r30
     94e:	ff 93       	push	r31
// 	int16_t val = ADC0.RES;
// 	if(g_goertzel.DataPoint(val))
// 	{
// 		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
// 	}
	int16_t data = ADC0_read();
     950:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZL9ADC0_readv>
	/* Clear the interrupt flag by reading the result */
     954:	ff 91       	pop	r31
     956:	ef 91       	pop	r30
     958:	bf 91       	pop	r27
     95a:	af 91       	pop	r26
     95c:	9f 91       	pop	r25
     95e:	8f 91       	pop	r24
     960:	7f 91       	pop	r23
     962:	6f 91       	pop	r22
     964:	5f 91       	pop	r21
     966:	4f 91       	pop	r20
     968:	3f 91       	pop	r19
     96a:	2f 91       	pop	r18
     96c:	0f 90       	pop	r0
     96e:	0b be       	out	0x3b, r0	; 59
     970:	0f 90       	pop	r0
     972:	0f be       	out	0x3f, r0	; 63
     974:	0f 90       	pop	r0
     976:	1f 90       	pop	r1
     978:	18 95       	reti

0000097a <BOD_init>:
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */
     97a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	08 95       	ret

00000982 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     982:	44 e2       	ldi	r20, 0x24	; 36
     984:	68 ed       	ldi	r22, 0xD8	; 216
     986:	88 e6       	ldi	r24, 0x68	; 104
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 00 09 	call	0x1200	; 0x1200 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	08 95       	ret

00000992 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     992:	78 94       	sei

	return 0;
}
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	08 95       	ret

00000998 <_ZL9VREF_initv>:
static void VREF_init(void)
{
//	VREF.DAC0REF = VREF_REFSEL_2V048_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	VREF.DAC0REF = VREF_REFSEL_2V500_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	| VREF_ALWAYSON_bm;    /* Set the Voltage Reference in Always On mode */
	VREF.DAC0REF = VREF_REFSEL_2V500_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
     998:	83 e0       	ldi	r24, 0x03	; 3
     99a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
	/* Wait VREF start-up time */
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
     99e:	6a e0       	ldi	r22, 0x0A	; 10
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 7f 09 	call	0x12fe	; 0x12fe <util_delay_ms>
     9aa:	81 11       	cpse	r24, r1
     9ac:	f8 cf       	rjmp	.-16     	; 0x99e <_ZL9VREF_initv+0x6>
}
     9ae:	08 95       	ret

000009b0 <_Z11DAC0_setValj>:
}

void DAC0_setVal(uint16_t value)
{
	/* Store the two LSbs in DAC0.DATAL */
	DAC0.DATAL = (value & LSB_MASK) << 6;
     9b0:	28 2f       	mov	r18, r24
     9b2:	22 95       	swap	r18
     9b4:	22 0f       	add	r18, r18
     9b6:	22 0f       	add	r18, r18
     9b8:	20 7c       	andi	r18, 0xC0	; 192
     9ba:	e0 ea       	ldi	r30, 0xA0	; 160
     9bc:	f6 e0       	ldi	r31, 0x06	; 6
     9be:	22 83       	std	Z+2, r18	; 0x02
	/* Store the eight MSbs in DAC0.DATAH */
	DAC0.DATAH = value >> 2;
     9c0:	96 95       	lsr	r25
     9c2:	87 95       	ror	r24
     9c4:	96 95       	lsr	r25
     9c6:	87 95       	ror	r24
     9c8:	83 83       	std	Z+3, r24	; 0x03
     9ca:	08 95       	ret

000009cc <_Z9DAC0_initv>:
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
}

void DAC0_init(void)
{
	VREF_init();
     9cc:	0e 94 cc 04 	call	0x998	; 0x998 <_ZL9VREF_initv>
	/* Disable digital input buffer */
	PORTD.PIN6CTRL &= ~PORT_ISC_gm;
     9d0:	e0 e6       	ldi	r30, 0x60	; 96
     9d2:	f4 e0       	ldi	r31, 0x04	; 4
     9d4:	86 89       	ldd	r24, Z+22	; 0x16
     9d6:	88 7f       	andi	r24, 0xF8	; 248
     9d8:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     9da:	86 89       	ldd	r24, Z+22	; 0x16
     9dc:	84 60       	ori	r24, 0x04	; 4
     9de:	86 8b       	std	Z+22, r24	; 0x16
	/* Disable pull-up resistor */
	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
     9e0:	86 89       	ldd	r24, Z+22	; 0x16
     9e2:	87 7f       	andi	r24, 0xF7	; 247
     9e4:	86 8b       	std	Z+22, r24	; 0x16
	DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
	| DAC_OUTEN_bm           /* Enable output buffer */
	| DAC_RUNSTDBY_bm;       /* Enable Run in Standby mode */
     9e6:	81 ec       	ldi	r24, 0xC1	; 193
     9e8:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
	
	DAC0_setVal(DAC_DEFAULT_VALUE);
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_Z11DAC0_setValj>
     9f4:	08 95       	ret

000009f6 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	88 30       	cpi	r24, 0x08	; 8
     9fa:	48 f4       	brcc	.+18     	; 0xa0e <mcu_init+0x18>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     9fc:	e8 2f       	mov	r30, r24
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	e0 5f       	subi	r30, 0xF0	; 240
     a02:	fb 4f       	sbci	r31, 0xFB	; 251
     a04:	90 81       	ld	r25, Z
     a06:	98 60       	ori	r25, 0x08	; 8
     a08:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     a0a:	8f 5f       	subi	r24, 0xFF	; 255
     a0c:	f5 cf       	rjmp	.-22     	; 0x9f8 <mcu_init+0x2>
     a0e:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     a10:	88 30       	cpi	r24, 0x08	; 8
     a12:	48 f4       	brcc	.+18     	; 0xa26 <mcu_init+0x30>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     a14:	e8 2f       	mov	r30, r24
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	e0 5d       	subi	r30, 0xD0	; 208
     a1a:	fb 4f       	sbci	r31, 0xFB	; 251
     a1c:	90 81       	ld	r25, Z
     a1e:	98 60       	ori	r25, 0x08	; 8
     a20:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     a22:	8f 5f       	subi	r24, 0xFF	; 255
     a24:	f5 cf       	rjmp	.-22     	; 0xa10 <mcu_init+0x1a>
     a26:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     a28:	88 30       	cpi	r24, 0x08	; 8
     a2a:	48 f4       	brcc	.+18     	; 0xa3e <mcu_init+0x48>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     a2c:	e8 2f       	mov	r30, r24
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	e0 5b       	subi	r30, 0xB0	; 176
     a32:	fb 4f       	sbci	r31, 0xFB	; 251
     a34:	90 81       	ld	r25, Z
     a36:	98 60       	ori	r25, 0x08	; 8
     a38:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     a3a:	8f 5f       	subi	r24, 0xFF	; 255
     a3c:	f5 cf       	rjmp	.-22     	; 0xa28 <mcu_init+0x32>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     a40:	88 30       	cpi	r24, 0x08	; 8
     a42:	48 f4       	brcc	.+18     	; 0xa56 <mcu_init+0x60>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     a44:	e8 2f       	mov	r30, r24
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	e0 59       	subi	r30, 0x90	; 144
     a4a:	fb 4f       	sbci	r31, 0xFB	; 251
     a4c:	90 81       	ld	r25, Z
     a4e:	98 60       	ori	r25, 0x08	; 8
     a50:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     a52:	8f 5f       	subi	r24, 0xFF	; 255
     a54:	f5 cf       	rjmp	.-22     	; 0xa40 <mcu_init+0x4a>
     a56:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     a58:	88 30       	cpi	r24, 0x08	; 8
     a5a:	48 f4       	brcc	.+18     	; 0xa6e <mcu_init+0x78>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     a5c:	e8 2f       	mov	r30, r24
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	e0 57       	subi	r30, 0x70	; 112
     a62:	fb 4f       	sbci	r31, 0xFB	; 251
     a64:	90 81       	ld	r25, Z
     a66:	98 60       	ori	r25, 0x08	; 8
     a68:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     a6a:	8f 5f       	subi	r24, 0xFF	; 255
     a6c:	f5 cf       	rjmp	.-22     	; 0xa58 <mcu_init+0x62>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     a70:	88 30       	cpi	r24, 0x08	; 8
     a72:	48 f4       	brcc	.+18     	; 0xa86 <mcu_init+0x90>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     a74:	e8 2f       	mov	r30, r24
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	e0 55       	subi	r30, 0x50	; 80
     a7a:	fb 4f       	sbci	r31, 0xFB	; 251
     a7c:	90 81       	ld	r25, Z
     a7e:	98 60       	ori	r25, 0x08	; 8
     a80:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     a82:	8f 5f       	subi	r24, 0xFF	; 255
     a84:	f5 cf       	rjmp	.-22     	; 0xa70 <mcu_init+0x7a>
     a86:	08 95       	ret

00000a88 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     a88:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <mcu_init>

	CLKCTRL_init(); /* Set CPU clock speed appropriately */
     a8c:	0e 94 c1 04 	call	0x982	; 0x982 <CLKCTRL_init>
	TIMERB_init(); /* Timers must be initialized before utility_delay functions will work */
     a90:	0e 94 62 09 	call	0x12c4	; 0x12c4 <TIMERB_init>
	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
     a94:	0e 94 c9 04 	call	0x992	; 0x992 <CPUINT_init>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     a98:	89 b1       	in	r24, 0x09	; 9
     a9a:	8f 7b       	andi	r24, 0xBF	; 191
     a9c:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     a9e:	88 b1       	in	r24, 0x08	; 8
     aa0:	80 64       	ori	r24, 0x40	; 64
     aa2:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	LED_set_dir(PORT_DIR_OUT);

	SLPCTRL_init();
     aa4:	0e 94 60 09 	call	0x12c0	; 0x12c0 <SLPCTRL_init>
	
	DAC0_init();
     aa8:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_Z9DAC0_initv>

	linkbus_init();
     aac:	0e 94 b3 06 	call	0xd66	; 0xd66 <_Z12linkbus_initv>

	BOD_init();
     ab0:	0e 94 bd 04 	call	0x97a	; 0x97a <BOD_init>
     ab4:	08 95       	ret

00000ab6 <_ZL11I2C_1_WaitWv>:
	
	/* Initialize the data register */
	TWI1.MDATA = 0x00;
	
	/* Set bus state idle */
	TWI1.MSTATUS = TWI_BUSSTATE_IDLE_gc;
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     abc:	90 7c       	andi	r25, 0xC0	; 192
     abe:	31 f0       	breq	.+12     	; 0xacc <_ZL11I2C_1_WaitWv+0x16>
     ac0:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     ac4:	84 fd       	sbrc	r24, 4
     ac6:	07 c0       	rjmp	.+14     	; 0xad6 <_ZL11I2C_1_WaitWv+0x20>
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	08 c0       	rjmp	.+16     	; 0xadc <_ZL11I2C_1_WaitWv+0x26>
     acc:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     ad0:	9c 70       	andi	r25, 0x0C	; 12
     ad2:	19 f4       	brne	.+6      	; 0xada <_ZL11I2C_1_WaitWv+0x24>
     ad4:	03 c0       	rjmp	.+6      	; 0xadc <_ZL11I2C_1_WaitWv+0x26>
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	01 c0       	rjmp	.+2      	; 0xadc <_ZL11I2C_1_WaitWv+0x26>
     ada:	84 e0       	ldi	r24, 0x04	; 4
     adc:	88 23       	and	r24, r24
     ade:	61 f3       	breq	.-40     	; 0xab8 <_ZL11I2C_1_WaitWv+0x2>
     ae0:	08 95       	ret

00000ae2 <_ZL11I2C_1_WaitRv>:
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     ae8:	90 7c       	andi	r25, 0xC0	; 192
     aea:	29 f4       	brne	.+10     	; 0xaf6 <_ZL11I2C_1_WaitRv+0x14>
     aec:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     af0:	9c 70       	andi	r25, 0x0C	; 12
     af2:	19 f4       	brne	.+6      	; 0xafa <_ZL11I2C_1_WaitRv+0x18>
     af4:	03 c0       	rjmp	.+6      	; 0xafc <_ZL11I2C_1_WaitRv+0x1a>
     af6:	83 e0       	ldi	r24, 0x03	; 3
     af8:	01 c0       	rjmp	.+2      	; 0xafc <_ZL11I2C_1_WaitRv+0x1a>
     afa:	84 e0       	ldi	r24, 0x04	; 4
     afc:	88 23       	and	r24, r24
     afe:	91 f3       	breq	.-28     	; 0xae4 <_ZL11I2C_1_WaitRv+0x2>
     b00:	08 95       	ret

00000b02 <I2C_1_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_1_SendData(uint8_t address, uint8_t *pData, uint8_t len)
{
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	8b 01       	movw	r16, r22
     b0e:	c4 2f       	mov	r28, r20
	uint8_t retVal = (uint8_t) - 1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address & ~0x01;
     b10:	8e 7f       	andi	r24, 0xFE	; 254
     b12:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(I2C_1_WaitW() != I2C_ACKED)
     b16:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZL11I2C_1_WaitWv>
     b1a:	81 30       	cpi	r24, 0x01	; 1
     b1c:	c1 f4       	brne	.+48     	; 0xb4e <I2C_1_SendData+0x4c>
	return retVal;

	retVal = 0;
	if((len != 0) && (pData != NULL))
     b1e:	cc 23       	and	r28, r28
     b20:	c1 f0       	breq	.+48     	; 0xb52 <I2C_1_SendData+0x50>
     b22:	01 15       	cp	r16, r1
     b24:	11 05       	cpc	r17, r1
     b26:	b9 f0       	breq	.+46     	; 0xb56 <I2C_1_SendData+0x54>
     b28:	d0 e0       	ldi	r29, 0x00	; 0
	{
		while(len--)
     b2a:	ff 24       	eor	r15, r15
     b2c:	fa 94       	dec	r15
     b2e:	fc 0e       	add	r15, r28
     b30:	cc 23       	and	r28, r28
     b32:	99 f0       	breq	.+38     	; 0xb5a <I2C_1_SendData+0x58>
		{
			TWI1.MDATA = *pData;
     b34:	f8 01       	movw	r30, r16
     b36:	80 81       	ld	r24, Z
     b38:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
			if(I2C_1_WaitW() == I2C_ACKED)
     b3c:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZL11I2C_1_WaitWv>
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	69 f4       	brne	.+26     	; 0xb5e <I2C_1_SendData+0x5c>
			{
				retVal++;
     b44:	df 5f       	subi	r29, 0xFF	; 255
				pData++;
     b46:	0f 5f       	subi	r16, 0xFF	; 255
     b48:	1f 4f       	sbci	r17, 0xFF	; 255
	return retVal;

	retVal = 0;
	if((len != 0) && (pData != NULL))
	{
		while(len--)
     b4a:	cf 2d       	mov	r28, r15
     b4c:	ee cf       	rjmp	.-36     	; 0xb2a <I2C_1_SendData+0x28>
	uint8_t retVal = (uint8_t) - 1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address & ~0x01;
	if(I2C_1_WaitW() != I2C_ACKED)
	return retVal;
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	07 c0       	rjmp	.+14     	; 0xb60 <I2C_1_SendData+0x5e>

	retVal = 0;
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	05 c0       	rjmp	.+10     	; 0xb60 <I2C_1_SendData+0x5e>
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <I2C_1_SendData+0x5e>
     b5a:	8d 2f       	mov	r24, r29
     b5c:	01 c0       	rjmp	.+2      	; 0xb60 <I2C_1_SendData+0x5e>
     b5e:	8d 2f       	mov	r24, r29
			}
		}
	}
	
	return retVal;
}
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	08 95       	ret

00000b6c <I2C_1_GetData>:

/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_1_GetData(uint8_t address, uint8_t *pData, uint8_t len)
{
     b6c:	ff 92       	push	r15
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	8b 01       	movw	r16, r22
     b78:	d4 2f       	mov	r29, r20
	uint8_t retVal = (uint8_t) -1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address | 0x01;
     b7a:	81 60       	ori	r24, 0x01	; 1
     b7c:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(I2C_1_WaitW() != I2C_ACKED)
     b80:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZL11I2C_1_WaitWv>
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	49 f5       	brne	.+82     	; 0xbda <I2C_1_GetData+0x6e>
	return retVal;
	
	/* if pData[0] contains a register address, send it first */
	if(pData[0])
     b88:	f8 01       	movw	r30, r16
     b8a:	80 81       	ld	r24, Z
     b8c:	88 23       	and	r24, r24
     b8e:	31 f0       	breq	.+12     	; 0xb9c <I2C_1_GetData+0x30>
	{
		TWI1.MDATA = pData[0];
     b90:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
		if(I2C_1_WaitW() != I2C_ACKED)
     b94:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZL11I2C_1_WaitWv>
     b98:	81 30       	cpi	r24, 0x01	; 1
     b9a:	09 f5       	brne	.+66     	; 0xbde <I2C_1_GetData+0x72>
			return retVal;
		}
	}

	retVal = 0;
	if((len != 0) && (pData !=NULL ))
     b9c:	dd 23       	and	r29, r29
     b9e:	09 f1       	breq	.+66     	; 0xbe2 <I2C_1_GetData+0x76>
     ba0:	01 15       	cp	r16, r1
     ba2:	11 05       	cpc	r17, r1
     ba4:	01 f1       	breq	.+64     	; 0xbe6 <I2C_1_GetData+0x7a>
     ba6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while(len--)
     ba8:	ff 24       	eor	r15, r15
     baa:	fa 94       	dec	r15
     bac:	fd 0e       	add	r15, r29
     bae:	dd 23       	and	r29, r29
     bb0:	e1 f0       	breq	.+56     	; 0xbea <I2C_1_GetData+0x7e>
		{
			if(I2C_1_WaitR() == I2C_READY)
     bb2:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZL11I2C_1_WaitRv>
     bb6:	83 30       	cpi	r24, 0x03	; 3
     bb8:	d1 f4       	brne	.+52     	; 0xbee <I2C_1_GetData+0x82>
			{
				*pData = TWI1.MDATA;
     bba:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
     bbe:	f8 01       	movw	r30, r16
     bc0:	80 83       	st	Z, r24
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
     bc2:	f1 10       	cpse	r15, r1
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <I2C_1_GetData+0x5e>
     bc6:	87 e0       	ldi	r24, 0x07	; 7
     bc8:	01 c0       	rjmp	.+2      	; 0xbcc <I2C_1_GetData+0x60>
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <__TEXT_REGION_LENGTH__+0x7e0924>
				retVal++;
     bd0:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
     bd2:	0f 5f       	subi	r16, 0xFF	; 255
     bd4:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	retVal = 0;
	if((len != 0) && (pData !=NULL ))
	{
		while(len--)
     bd6:	df 2d       	mov	r29, r15
     bd8:	e7 cf       	rjmp	.-50     	; 0xba8 <I2C_1_GetData+0x3c>
	uint8_t retVal = (uint8_t) -1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address | 0x01;
	if(I2C_1_WaitW() != I2C_ACKED)
	return retVal;
     bda:	8f ef       	ldi	r24, 0xFF	; 255
     bdc:	09 c0       	rjmp	.+18     	; 0xbf0 <I2C_1_GetData+0x84>
	if(pData[0])
	{
		TWI1.MDATA = pData[0];
		if(I2C_1_WaitW() != I2C_ACKED)
		{
			return retVal;
     bde:	8f ef       	ldi	r24, 0xFF	; 255
     be0:	07 c0       	rjmp	.+14     	; 0xbf0 <I2C_1_GetData+0x84>
		}
	}

	retVal = 0;
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	05 c0       	rjmp	.+10     	; 0xbf0 <I2C_1_GetData+0x84>
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	03 c0       	rjmp	.+6      	; 0xbf0 <I2C_1_GetData+0x84>
     bea:	8c 2f       	mov	r24, r28
     bec:	01 c0       	rjmp	.+2      	; 0xbf0 <I2C_1_GetData+0x84>
     bee:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	08 95       	ret

00000bfc <_Z16nextFullTxBufferv>:
	g_bus_disabled = FALSE;
	USART1_enable();

	memset(rx_buffer, 0, sizeof(rx_buffer));

	for(bufferIndex=0; bufferIndex<LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	80 91 e8 40 	lds	r24, 0x40E8	; 0x8040e8 <_ZZ16nextFullTxBuffervE11bufferIndex>
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	42 e3       	ldi	r20, 0x32	; 50
     c08:	42 9f       	mul	r20, r18
     c0a:	f0 01       	movw	r30, r0
     c0c:	43 9f       	mul	r20, r19
     c0e:	f0 0d       	add	r31, r0
     c10:	11 24       	eor	r1, r1
     c12:	e3 59       	subi	r30, 0x93	; 147
     c14:	fe 4b       	sbci	r31, 0xBE	; 190
     c16:	40 81       	ld	r20, Z
     c18:	41 11       	cpse	r20, r1
     c1a:	0b c0       	rjmp	.+22     	; 0xc32 <_Z16nextFullTxBufferv+0x36>
     c1c:	9f 5f       	subi	r25, 0xFF	; 255
     c1e:	94 30       	cpi	r25, 0x04	; 4
     c20:	50 f4       	brcc	.+20     	; 0xc36 <_Z16nextFullTxBufferv+0x3a>
     c22:	8f 5f       	subi	r24, 0xFF	; 255
     c24:	80 93 e8 40 	sts	0x40E8, r24	; 0x8040e8 <_ZZ16nextFullTxBuffervE11bufferIndex>
     c28:	84 30       	cpi	r24, 0x04	; 4
     c2a:	48 f3       	brcs	.-46     	; 0xbfe <_Z16nextFullTxBufferv+0x2>
     c2c:	10 92 e8 40 	sts	0x40E8, r1	; 0x8040e8 <_ZZ16nextFullTxBuffervE11bufferIndex>
     c30:	e6 cf       	rjmp	.-52     	; 0xbfe <_Z16nextFullTxBufferv+0x2>
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	01 c0       	rjmp	.+2      	; 0xc38 <_Z16nextFullTxBufferv+0x3c>
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	88 23       	and	r24, r24
     c3a:	49 f0       	breq	.+18     	; 0xc4e <_Z16nextFullTxBufferv+0x52>
     c3c:	42 e3       	ldi	r20, 0x32	; 50
     c3e:	42 9f       	mul	r20, r18
     c40:	c0 01       	movw	r24, r0
     c42:	43 9f       	mul	r20, r19
     c44:	90 0d       	add	r25, r0
     c46:	11 24       	eor	r1, r1
     c48:	83 59       	subi	r24, 0x93	; 147
     c4a:	9e 4b       	sbci	r25, 0xBE	; 190
     c4c:	08 95       	ret
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	08 95       	ret

00000c54 <_Z17nextEmptyTxBufferv>:
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	80 91 e7 40 	lds	r24, 0x40E7	; 0x8040e7 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	42 e3       	ldi	r20, 0x32	; 50
     c60:	42 9f       	mul	r20, r18
     c62:	f0 01       	movw	r30, r0
     c64:	43 9f       	mul	r20, r19
     c66:	f0 0d       	add	r31, r0
     c68:	11 24       	eor	r1, r1
     c6a:	e3 59       	subi	r30, 0x93	; 147
     c6c:	fe 4b       	sbci	r31, 0xBE	; 190
     c6e:	40 81       	ld	r20, Z
     c70:	44 23       	and	r20, r20
     c72:	59 f0       	breq	.+22     	; 0xc8a <_Z17nextEmptyTxBufferv+0x36>
     c74:	9f 5f       	subi	r25, 0xFF	; 255
     c76:	94 30       	cpi	r25, 0x04	; 4
     c78:	50 f4       	brcc	.+20     	; 0xc8e <_Z17nextEmptyTxBufferv+0x3a>
     c7a:	8f 5f       	subi	r24, 0xFF	; 255
     c7c:	80 93 e7 40 	sts	0x40E7, r24	; 0x8040e7 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
     c80:	84 30       	cpi	r24, 0x04	; 4
     c82:	48 f3       	brcs	.-46     	; 0xc56 <_Z17nextEmptyTxBufferv+0x2>
     c84:	10 92 e7 40 	sts	0x40E7, r1	; 0x8040e7 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
     c88:	e6 cf       	rjmp	.-52     	; 0xc56 <_Z17nextEmptyTxBufferv+0x2>
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	01 c0       	rjmp	.+2      	; 0xc90 <_Z17nextEmptyTxBufferv+0x3c>
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	88 23       	and	r24, r24
     c92:	49 f0       	breq	.+18     	; 0xca6 <_Z17nextEmptyTxBufferv+0x52>
     c94:	42 e3       	ldi	r20, 0x32	; 50
     c96:	42 9f       	mul	r20, r18
     c98:	c0 01       	movw	r24, r0
     c9a:	43 9f       	mul	r20, r19
     c9c:	90 0d       	add	r25, r0
     c9e:	11 24       	eor	r1, r1
     ca0:	83 59       	subi	r24, 0x93	; 147
     ca2:	9e 4b       	sbci	r25, 0xBE	; 190
     ca4:	08 95       	ret
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	08 95       	ret

00000cac <_Z17nextEmptyRxBufferv>:
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	80 91 e6 40 	lds	r24, 0x40E6	; 0x8040e6 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	42 e4       	ldi	r20, 0x42	; 66
     cb8:	42 9f       	mul	r20, r18
     cba:	f0 01       	movw	r30, r0
     cbc:	43 9f       	mul	r20, r19
     cbe:	f0 0d       	add	r31, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	e7 51       	subi	r30, 0x17	; 23
     cc4:	ff 4b       	sbci	r31, 0xBF	; 191
     cc6:	41 81       	ldd	r20, Z+1	; 0x01
     cc8:	52 81       	ldd	r21, Z+2	; 0x02
     cca:	45 2b       	or	r20, r21
     ccc:	59 f0       	breq	.+22     	; 0xce4 <_Z17nextEmptyRxBufferv+0x38>
     cce:	9f 5f       	subi	r25, 0xFF	; 255
     cd0:	92 30       	cpi	r25, 0x02	; 2
     cd2:	50 f4       	brcc	.+20     	; 0xce8 <_Z17nextEmptyRxBufferv+0x3c>
     cd4:	8f 5f       	subi	r24, 0xFF	; 255
     cd6:	80 93 e6 40 	sts	0x40E6, r24	; 0x8040e6 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
     cda:	82 30       	cpi	r24, 0x02	; 2
     cdc:	40 f3       	brcs	.-48     	; 0xcae <_Z17nextEmptyRxBufferv+0x2>
     cde:	10 92 e6 40 	sts	0x40E6, r1	; 0x8040e6 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
     ce2:	e5 cf       	rjmp	.-54     	; 0xcae <_Z17nextEmptyRxBufferv+0x2>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	01 c0       	rjmp	.+2      	; 0xcea <_Z17nextEmptyRxBufferv+0x3e>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	88 23       	and	r24, r24
     cec:	49 f0       	breq	.+18     	; 0xd00 <_Z17nextEmptyRxBufferv+0x54>
     cee:	42 e4       	ldi	r20, 0x42	; 66
     cf0:	42 9f       	mul	r20, r18
     cf2:	c0 01       	movw	r24, r0
     cf4:	43 9f       	mul	r20, r19
     cf6:	90 0d       	add	r25, r0
     cf8:	11 24       	eor	r1, r1
     cfa:	87 51       	subi	r24, 0x17	; 23
     cfc:	9f 4b       	sbci	r25, 0xBF	; 191
     cfe:	08 95       	ret
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	08 95       	ret

00000d06 <_Z19linkbusTxInProgressv>:
     d06:	80 91 35 42 	lds	r24, 0x4235	; 0x804235 <_ZL17linkbus_tx_active>
     d0a:	08 95       	ret

00000d0c <_Z16linkbus_start_txv>:
     d0c:	cf 93       	push	r28
     d0e:	80 91 35 42 	lds	r24, 0x4235	; 0x804235 <_ZL17linkbus_tx_active>
     d12:	c1 e0       	ldi	r28, 0x01	; 1
     d14:	81 11       	cpse	r24, r1
     d16:	c0 e0       	ldi	r28, 0x00	; 0
     d18:	81 11       	cpse	r24, r1
     d1a:	05 c0       	rjmp	.+10     	; 0xd26 <_Z16linkbus_start_txv+0x1a>
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	80 93 35 42 	sts	0x4235, r24	; 0x804235 <_ZL17linkbus_tx_active>
     d22:	0e 94 76 0a 	call	0x14ec	; 0x14ec <USART1_enable_tx>
     d26:	8c 2f       	mov	r24, r28
     d28:	cf 91       	pop	r28
     d2a:	08 95       	ret

00000d2c <_Z14linkbus_end_txv>:
     d2c:	80 91 35 42 	lds	r24, 0x4235	; 0x804235 <_ZL17linkbus_tx_active>
     d30:	88 23       	and	r24, r24
     d32:	39 f0       	breq	.+14     	; 0xd42 <_Z14linkbus_end_txv+0x16>
     d34:	e0 e2       	ldi	r30, 0x20	; 32
     d36:	f8 e0       	ldi	r31, 0x08	; 8
     d38:	85 81       	ldd	r24, Z+5	; 0x05
     d3a:	8f 7d       	andi	r24, 0xDF	; 223
     d3c:	85 83       	std	Z+5, r24	; 0x05
     d3e:	10 92 35 42 	sts	0x4235, r1	; 0x804235 <_ZL17linkbus_tx_active>
     d42:	08 95       	ret

00000d44 <_Z21USART1_initializationm>:
     d44:	28 b1       	in	r18, 0x08	; 8
     d46:	2d 7f       	andi	r18, 0xFD	; 253
     d48:	28 b9       	out	0x08, r18	; 8
     d4a:	e1 e5       	ldi	r30, 0x51	; 81
     d4c:	f4 e0       	ldi	r31, 0x04	; 4
     d4e:	20 81       	ld	r18, Z
     d50:	27 7f       	andi	r18, 0xF7	; 247
     d52:	20 83       	st	Z, r18
     d54:	29 b1       	in	r18, 0x09	; 9
     d56:	2e 7f       	andi	r18, 0xFE	; 254
     d58:	29 b9       	out	0x09, r18	; 9
     d5a:	28 b1       	in	r18, 0x08	; 8
     d5c:	21 60       	ori	r18, 0x01	; 1
     d5e:	28 b9       	out	0x08, r18	; 8
     d60:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <USART1_init>
     d64:	08 95       	ret

00000d66 <_Z12linkbus_initv>:
     d66:	84 e8       	ldi	r24, 0x84	; 132
     d68:	e9 ee       	ldi	r30, 0xE9	; 233
     d6a:	f0 e4       	ldi	r31, 0x40	; 64
     d6c:	df 01       	movw	r26, r30
     d6e:	1d 92       	st	X+, r1
     d70:	8a 95       	dec	r24
     d72:	e9 f7       	brne	.-6      	; 0xd6e <_Z12linkbus_initv+0x8>
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	84 30       	cpi	r24, 0x04	; 4
     d7a:	91 05       	cpc	r25, r1
     d7c:	5c f4       	brge	.+22     	; 0xd94 <_Z12linkbus_initv+0x2e>
     d7e:	22 e3       	ldi	r18, 0x32	; 50
     d80:	28 9f       	mul	r18, r24
     d82:	f0 01       	movw	r30, r0
     d84:	29 9f       	mul	r18, r25
     d86:	f0 0d       	add	r31, r0
     d88:	11 24       	eor	r1, r1
     d8a:	e3 59       	subi	r30, 0x93	; 147
     d8c:	fe 4b       	sbci	r31, 0xBE	; 190
     d8e:	10 82       	st	Z, r1
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	f2 cf       	rjmp	.-28     	; 0xd78 <_Z12linkbus_initv+0x12>
     d94:	60 e8       	ldi	r22, 0x80	; 128
     d96:	75 e2       	ldi	r23, 0x25	; 37
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 a2 06 	call	0xd44	; 0xd44 <_Z21USART1_initializationm>
     da0:	10 92 0e 40 	sts	0x400E, r1	; 0x80400e <_ZL14g_bus_disabled>
     da4:	08 95       	ret

00000da6 <_Z17linkbus_send_textPc>:
	}
}


BOOL linkbus_send_text(char* text)
{
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled) return err;
     dae:	20 91 0e 40 	lds	r18, 0x400E	; 0x80400e <_ZL14g_bus_disabled>
     db2:	21 11       	cpse	r18, r1
     db4:	2f c0       	rjmp	.+94     	; 0xe14 <_Z17linkbus_send_textPc+0x6e>

	if(text)
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	79 f1       	breq	.+94     	; 0xe18 <_Z17linkbus_send_textPc+0x72>
     dba:	8c 01       	movw	r16, r24
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();
     dbc:	0e 94 2a 06 	call	0xc54	; 0xc54 <_Z17nextEmptyTxBufferv>


BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
	uint16_t tries = 200;
     dc0:	c8 ec       	ldi	r28, 0xC8	; 200
     dc2:	d0 e0       	ldi	r29, 0x00	; 0

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	b1 f4       	brne	.+44     	; 0xdf4 <_Z17linkbus_send_textPc+0x4e>
     dc8:	20 97       	sbiw	r28, 0x00	; 0
     dca:	a1 f0       	breq	.+40     	; 0xdf4 <_Z17linkbus_send_textPc+0x4e>
		{
			while(linkbusTxInProgress() && tries)
     dcc:	0e 94 83 06 	call	0xd06	; 0xd06 <_Z19linkbusTxInProgressv>
     dd0:	88 23       	and	r24, r24
     dd2:	21 f0       	breq	.+8      	; 0xddc <_Z17linkbus_send_textPc+0x36>
     dd4:	20 97       	sbiw	r28, 0x00	; 0
     dd6:	21 f4       	brne	.+8      	; 0xde0 <_Z17linkbus_send_textPc+0x3a>
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	03 c0       	rjmp	.+6      	; 0xde2 <_Z17linkbus_send_textPc+0x3c>
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	01 c0       	rjmp	.+2      	; 0xde2 <_Z17linkbus_send_textPc+0x3c>
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	99 23       	and	r25, r25
     de4:	21 f0       	breq	.+8      	; 0xdee <_Z17linkbus_send_textPc+0x48>
			{
				if(tries) tries--;   /* wait until transmit finishes */
     de6:	20 97       	sbiw	r28, 0x00	; 0
     de8:	89 f3       	breq	.-30     	; 0xdcc <_Z17linkbus_send_textPc+0x26>
     dea:	21 97       	sbiw	r28, 0x01	; 1
     dec:	ef cf       	rjmp	.-34     	; 0xdcc <_Z17linkbus_send_textPc+0x26>
			}
			buff = nextEmptyTxBuffer();
     dee:	0e 94 2a 06 	call	0xc54	; 0xc54 <_Z17nextEmptyTxBufferv>

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
     df2:	e8 cf       	rjmp	.-48     	; 0xdc4 <_Z17linkbus_send_textPc+0x1e>
				if(tries) tries--;   /* wait until transmit finishes */
			}
			buff = nextEmptyTxBuffer();
		}

		if(buff)
     df4:	00 97       	sbiw	r24, 0x00	; 0
     df6:	91 f0       	breq	.+36     	; 0xe1c <_Z17linkbus_send_textPc+0x76>
		{
			sprintf(*buff, text);
     df8:	1f 93       	push	r17
     dfa:	0f 93       	push	r16
     dfc:	9f 93       	push	r25
     dfe:	8f 93       	push	r24
     e00:	0e 94 9c 0c 	call	0x1938	; 0x1938 <sprintf>

			linkbus_start_tx();
     e04:	0e 94 86 06 	call	0xd0c	; 0xd0c <_Z16linkbus_start_txv>
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
//			USART1.TXDATAL = (*buff)[0]; /* send the first character */
			err = FALSE;
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	05 c0       	rjmp	.+10     	; 0xe1e <_Z17linkbus_send_textPc+0x78>
BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled) return err;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	03 c0       	rjmp	.+6      	; 0xe1e <_Z17linkbus_send_textPc+0x78>
}


BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	01 c0       	rjmp	.+2      	; 0xe1e <_Z17linkbus_send_textPc+0x78>
     e1c:	81 e0       	ldi	r24, 0x01	; 1
			err = FALSE;
		}
	}

	return(err);
}
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	08 95       	ret

00000e28 <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	fc 01       	movw	r30, r24
     e2c:	b0 97       	sbiw	r30, 0x20	; 32
     e2e:	ed 35       	cpi	r30, 0x5D	; 93
     e30:	f1 05       	cpc	r31, r1
     e32:	08 f0       	brcs	.+2      	; 0xe36 <_Z12getMorseCharc+0xe>
     e34:	e8 c0       	rjmp	.+464    	; 0x1006 <_Z12getMorseCharc+0x1de>
     e36:	ec 58       	subi	r30, 0x8C	; 140
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__tablejump2__>
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
     e3e:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 2;
     e40:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
     e42:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
     e44:	08 95       	ret

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     e46:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 4;
     e48:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
     e4a:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     e4c:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
     e4e:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
     e50:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
     e52:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     e54:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     e56:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
     e58:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
     e5a:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     e5c:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     e5e:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
     e60:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 1;
     e62:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
     e64:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
     e66:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
     e68:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
     e6a:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     e6c:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
     e6e:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
     e70:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
     e72:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     e74:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     e76:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
     e78:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 7;
     e7a:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     e7c:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     e7e:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
     e80:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 3;
     e82:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
     e84:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
     e86:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
     e88:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
     e8a:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     e8c:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
     e8e:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
     e90:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
     e92:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     e94:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
     e96:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
     e98:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
     e9a:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     e9c:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
     e9e:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
     ea0:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 7;
     ea2:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     ea4:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     ea6:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
     ea8:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
     eaa:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
     eac:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
     eae:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
     eb0:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 11;
     eb2:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     eb4:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
     eb6:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
     eb8:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
     eba:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     ebc:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
     ebe:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
     ec0:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
     ec2:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     ec4:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
     ec6:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
     ec8:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
     eca:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     ecc:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     ece:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
     ed0:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 5;
     ed2:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
     ed4:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     ed6:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
     ed8:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 3;
     eda:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
     edc:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
     ede:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
     ee0:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
     ee2:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     ee4:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
     ee6:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
     ee8:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
     eea:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     eec:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
     eee:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
     ef0:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
     ef2:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     ef4:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
     ef6:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
     ef8:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
     efa:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     efc:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
     efe:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
     f00:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
     f02:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     f04:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
     f06:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
     f08:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
     f0a:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     f0c:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
     f0e:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
     f10:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
     f12:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     f14:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
     f16:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
     f18:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
     f1a:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     f1c:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
     f1e:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
     f20:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
     f22:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     f24:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
     f26:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
     f28:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     f2a:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     f2c:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
     f2e:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
     f30:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
     f32:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     f34:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     f36:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
     f38:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 9;
     f3a:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     f3c:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     f3e:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
     f40:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
     f42:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     f44:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
     f46:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
     f48:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     f4a:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     f4c:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
     f4e:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
     f50:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
     f52:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     f54:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
     f56:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
     f58:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
     f5a:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     f5c:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
     f5e:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
     f60:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
     f62:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     f64:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
     f66:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
     f68:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
     f6a:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     f6c:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
     f6e:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
     f70:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
     f72:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     f74:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
     f76:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
     f78:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
     f7a:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     f7c:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
     f7e:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
     f80:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
     f82:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     f84:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
     f86:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
     f88:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     f8a:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     f8c:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
     f8e:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
     f90:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
     f92:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     f94:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
     f96:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
     f98:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
     f9a:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     f9c:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
     f9e:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
     fa0:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
     fa2:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     fa4:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
     fa6:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
     fa8:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
     faa:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     fac:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
     fae:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
     fb0:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 12;
     fb2:	8c e0       	ldi	r24, 0x0C	; 12
		}
		break;
     fb4:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
     fb6:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
     fb8:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     fba:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     fbc:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
     fbe:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
     fc0:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     fc2:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     fc4:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
     fc6:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
     fc8:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
     fca:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     fcc:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
     fce:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
     fd0:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
     fd2:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     fd4:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
     fd6:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
     fd8:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
     fda:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     fdc:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
     fde:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
     fe0:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
     fe2:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     fe4:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
     fe6:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
     fe8:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
     fea:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     fec:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
     fee:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
     ff0:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
     ff2:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;
     ff4:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
     ff6:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
     ff8:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
     ffa:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     ffc:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
     ffe:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
    1000:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
    1002:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
    1004:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    1006:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
    1008:	70 e0       	ldi	r23, 0x00	; 0
			morse.lengthInElements = 0;
    100a:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}

	return( morse);
}
    100c:	08 95       	ret

0000100e <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	b1 f1       	breq	.+108    	; 0x1084 <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    1018:	10 92 41 42 	sts	0x4241, r1	; 0x804241 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    101c:	61 15       	cp	r22, r1
    101e:	71 05       	cpc	r23, r1
    1020:	21 f0       	breq	.+8      	; 0x102a <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    1022:	db 01       	movw	r26, r22
    1024:	2c 91       	ld	r18, X
    1026:	20 93 10 40 	sts	0x4010, r18	; 0x804010 <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    102a:	fc 01       	movw	r30, r24
    102c:	20 81       	ld	r18, Z
    102e:	22 23       	and	r18, r18
    1030:	d9 f0       	breq	.+54     	; 0x1068 <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    1032:	80 93 3f 42 	sts	0x423F, r24	; 0x80423f <_ZZ9makeMorsePcPhS0_E3str>
    1036:	90 93 40 42 	sts	0x4240, r25	; 0x804240 <_ZZ9makeMorsePcPhS0_E3str+0x1>
			c = ' ';
    103a:	80 e2       	ldi	r24, 0x20	; 32
    103c:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    1040:	82 2f       	mov	r24, r18
    1042:	0e 94 14 07 	call	0xe28	; 0xe28 <_Z12getMorseCharc>
    1046:	60 93 3c 42 	sts	0x423C, r22	; 0x80423c <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    104a:	70 93 3d 42 	sts	0x423D, r23	; 0x80423d <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    104e:	80 93 3e 42 	sts	0x423E, r24	; 0x80423e <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    1052:	10 92 3b 42 	sts	0x423B, r1	; 0x80423b <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    1056:	10 92 3a 42 	sts	0x423A, r1	; 0x80423a <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    105a:	10 92 39 42 	sts	0x4239, r1	; 0x804239 <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    105e:	10 92 38 42 	sts	0x4238, r1	; 0x804238 <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    1062:	10 92 37 42 	sts	0x4237, r1	; 0x804237 <_ZZ9makeMorsePcPhS0_E15completedString>
    1066:	0a c0       	rjmp	.+20     	; 0x107c <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    1068:	10 92 3f 42 	sts	0x423F, r1	; 0x80423f <_ZZ9makeMorsePcPhS0_E3str>
    106c:	10 92 40 42 	sts	0x4240, r1	; 0x804240 <_ZZ9makeMorsePcPhS0_E3str+0x1>
			completedString = TRUE;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	80 93 37 42 	sts	0x4237, r24	; 0x804237 <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    1076:	20 97       	sbiw	r28, 0x00	; 0
    1078:	09 f0       	breq	.+2      	; 0x107c <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    107a:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    107c:	10 92 36 42 	sts	0x4236, r1	; 0x804236 <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	bb c0       	rjmp	.+374    	; 0x11fa <_Z9makeMorsePcPhS0_+0x1ec>
	}
	else if(str)
    1084:	e0 91 3f 42 	lds	r30, 0x423F	; 0x80423f <_ZZ9makeMorsePcPhS0_E3str>
    1088:	f0 91 40 42 	lds	r31, 0x4240	; 0x804240 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    108c:	30 97       	sbiw	r30, 0x00	; 0
    108e:	09 f4       	brne	.+2      	; 0x1092 <_Z9makeMorsePcPhS0_+0x84>
    1090:	a5 c0       	rjmp	.+330    	; 0x11dc <_Z9makeMorsePcPhS0_+0x1ce>
	{
		if(repeating)
    1092:	61 15       	cp	r22, r1
    1094:	71 05       	cpc	r23, r1
    1096:	21 f0       	breq	.+8      	; 0x10a0 <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    1098:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <_ZZ9makeMorsePcPhS0_E6repeat>
    109c:	db 01       	movw	r26, r22
    109e:	8c 93       	st	X, r24
		}

		if(completedString)
    10a0:	80 91 37 42 	lds	r24, 0x4237	; 0x804237 <_ZZ9makeMorsePcPhS0_E15completedString>
    10a4:	88 23       	and	r24, r24
    10a6:	49 f0       	breq	.+18     	; 0x10ba <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    10a8:	20 97       	sbiw	r28, 0x00	; 0
    10aa:	09 f4       	brne	.+2      	; 0x10ae <_Z9makeMorsePcPhS0_+0xa0>
    10ac:	a3 c0       	rjmp	.+326    	; 0x11f4 <_Z9makeMorsePcPhS0_+0x1e6>
			{
				*finished = TRUE;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    10b2:	10 92 41 42 	sts	0x4241, r1	; 0x804241 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	a0 c0       	rjmp	.+320    	; 0x11fa <_Z9makeMorsePcPhS0_+0x1ec>
		}

		if(elementIndex)
    10ba:	80 91 39 42 	lds	r24, 0x4239	; 0x804239 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    10be:	88 23       	and	r24, r24
    10c0:	21 f0       	breq	.+8      	; 0x10ca <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    10c2:	81 50       	subi	r24, 0x01	; 1
    10c4:	80 93 39 42 	sts	0x4239, r24	; 0x804239 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    10c8:	7f c0       	rjmp	.+254    	; 0x11c8 <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    10ca:	80 91 36 42 	lds	r24, 0x4236	; 0x804236 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    10ce:	88 23       	and	r24, r24
    10d0:	81 f0       	breq	.+32     	; 0x10f2 <_Z9makeMorsePcPhS0_+0xe4>
    10d2:	80 91 41 42 	lds	r24, 0x4241	; 0x804241 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    10d6:	81 11       	cpse	r24, r1
    10d8:	0c c0       	rjmp	.+24     	; 0x10f2 <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    10da:	10 92 36 42 	sts	0x4236, r1	; 0x804236 <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    10de:	80 91 38 42 	lds	r24, 0x4238	; 0x804238 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    10e2:	88 23       	and	r24, r24
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <_Z9makeMorsePcPhS0_+0xda>
    10e6:	70 c0       	rjmp	.+224    	; 0x11c8 <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    10e8:	80 93 39 42 	sts	0x4239, r24	; 0x804239 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    10ec:	10 92 38 42 	sts	0x4238, r1	; 0x804238 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    10f0:	6b c0       	rjmp	.+214    	; 0x11c8 <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    10f2:	90 91 3d 42 	lds	r25, 0x423D	; 0x80423d <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    10f6:	80 91 3a 42 	lds	r24, 0x423A	; 0x80423a <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    10fa:	89 17       	cp	r24, r25
    10fc:	90 f1       	brcs	.+100    	; 0x1162 <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    10fe:	80 91 3b 42 	lds	r24, 0x423B	; 0x80423b <_ZZ9makeMorsePcPhS0_E9charIndex>
    1102:	8f 5f       	subi	r24, 0xFF	; 255
    1104:	80 93 3b 42 	sts	0x423B, r24	; 0x80423b <_ZZ9makeMorsePcPhS0_E9charIndex>
    1108:	df 01       	movw	r26, r30
    110a:	a8 0f       	add	r26, r24
    110c:	b1 1d       	adc	r27, r1
    110e:	8c 91       	ld	r24, X
    1110:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    1114:	81 11       	cpse	r24, r1
    1116:	19 c0       	rjmp	.+50     	; 0x114a <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    1118:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <_ZZ9makeMorsePcPhS0_E6repeat>
    111c:	88 23       	and	r24, r24
    111e:	31 f0       	breq	.+12     	; 0x112c <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    1120:	80 81       	ld	r24, Z
    1122:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    1126:	10 92 3b 42 	sts	0x423B, r1	; 0x80423b <_ZZ9makeMorsePcPhS0_E9charIndex>
    112a:	0f c0       	rjmp	.+30     	; 0x114a <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    112c:	10 92 3f 42 	sts	0x423F, r1	; 0x80423f <_ZZ9makeMorsePcPhS0_E3str>
    1130:	10 92 40 42 	sts	0x4240, r1	; 0x804240 <_ZZ9makeMorsePcPhS0_E3str+0x1>
						carrierOn = OFF;
    1134:	10 92 36 42 	sts	0x4236, r1	; 0x804236 <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	90 93 37 42 	sts	0x4237, r25	; 0x804237 <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    113e:	20 97       	sbiw	r28, 0x00	; 0
    1140:	09 f0       	breq	.+2      	; 0x1144 <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    1142:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    1144:	10 92 41 42 	sts	0x4241, r1	; 0x804241 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    1148:	58 c0       	rjmp	.+176    	; 0x11fa <_Z9makeMorsePcPhS0_+0x1ec>
					}
				}

				morseInProgress = getMorseChar(c);
    114a:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <_ZZ9makeMorsePcPhS0_E1c>
    114e:	0e 94 14 07 	call	0xe28	; 0xe28 <_Z12getMorseCharc>
    1152:	60 93 3c 42 	sts	0x423C, r22	; 0x80423c <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    1156:	70 93 3d 42 	sts	0x423D, r23	; 0x80423d <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    115a:	80 93 3e 42 	sts	0x423E, r24	; 0x80423e <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    115e:	10 92 3a 42 	sts	0x423A, r1	; 0x80423a <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    1162:	20 91 3c 42 	lds	r18, 0x423C	; 0x80423c <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    1166:	2d 3f       	cpi	r18, 0xFD	; 253
    1168:	00 f5       	brcc	.+64     	; 0x11aa <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    116a:	40 91 3a 42 	lds	r20, 0x423A	; 0x80423a <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    116e:	31 e0       	ldi	r19, 0x01	; 1
    1170:	34 0f       	add	r19, r20
    1172:	30 93 3a 42 	sts	0x423A, r19	; 0x80423a <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <_Z9makeMorsePcPhS0_+0x172>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	4a 95       	dec	r20
    1182:	e2 f7       	brpl	.-8      	; 0x117c <_Z9makeMorsePcPhS0_+0x16e>
    1184:	82 23       	and	r24, r18

				if(isDah)
    1186:	21 f0       	breq	.+8      	; 0x1190 <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    1188:	82 e0       	ldi	r24, 0x02	; 2
    118a:	80 93 39 42 	sts	0x4239, r24	; 0x804239 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    1190:	10 92 39 42 	sts	0x4239, r1	; 0x804239 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	80 93 36 42 	sts	0x4236, r24	; 0x804236 <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    119a:	80 91 3d 42 	lds	r24, 0x423D	; 0x80423d <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    119e:	38 17       	cp	r19, r24
    11a0:	98 f0       	brcs	.+38     	; 0x11c8 <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    11a2:	82 e0       	ldi	r24, 0x02	; 2
    11a4:	80 93 38 42 	sts	0x4238, r24	; 0x804238 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    11a8:	0f c0       	rjmp	.+30     	; 0x11c8 <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    11aa:	80 91 3d 42 	lds	r24, 0x423D	; 0x80423d <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    11ae:	9f ef       	ldi	r25, 0xFF	; 255
    11b0:	90 93 3a 42 	sts	0x423A, r25	; 0x80423a <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    11b4:	10 92 36 42 	sts	0x4236, r1	; 0x804236 <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    11b8:	84 30       	cpi	r24, 0x04	; 4
    11ba:	20 f0       	brcs	.+8      	; 0x11c4 <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    11bc:	84 50       	subi	r24, 0x04	; 4
    11be:	80 93 39 42 	sts	0x4239, r24	; 0x804239 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    11c4:	10 92 39 42 	sts	0x4239, r1	; 0x804239 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    11c8:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <_ZZ9makeMorsePcPhS0_E1c>
    11cc:	8c 33       	cpi	r24, 0x3C	; 60
    11ce:	21 f4       	brne	.+8      	; 0x11d8 <_Z9makeMorsePcPhS0_+0x1ca>
		{
			holdKeyDown = TRUE;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	80 93 41 42 	sts	0x4241, r24	; 0x804241 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <_Z9makeMorsePcPhS0_+0x1ce>
		}
		else
		{
			holdKeyDown = FALSE;
    11d8:	10 92 41 42 	sts	0x4241, r1	; 0x804241 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    11dc:	20 97       	sbiw	r28, 0x00	; 0
    11de:	19 f0       	breq	.+6      	; 0x11e6 <_Z9makeMorsePcPhS0_+0x1d8>
	{
		*finished = completedString;
    11e0:	80 91 37 42 	lds	r24, 0x4237	; 0x804237 <_ZZ9makeMorsePcPhS0_E15completedString>
    11e4:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    11e6:	80 91 41 42 	lds	r24, 0x4241	; 0x804241 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    11ea:	81 11       	cpse	r24, r1
    11ec:	05 c0       	rjmp	.+10     	; 0x11f8 <_Z9makeMorsePcPhS0_+0x1ea>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    11ee:	80 91 36 42 	lds	r24, 0x4236	; 0x804236 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    11f2:	03 c0       	rjmp	.+6      	; 0x11fa <_Z9makeMorsePcPhS0_+0x1ec>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <_Z9makeMorsePcPhS0_+0x1ec>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    11f8:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    1200:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    1202:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    1204:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    1206:	40 83       	st	Z, r20
	ret                             // Return to caller
    1208:	08 95       	ret

0000120a <_Z17si5351_write_bulkPhh>:
			data[1] = reg_val;
			err |= si5351_write_bulk(data, 2);
		}

		return err;
	}
    120a:	cf 93       	push	r28
    120c:	c6 2f       	mov	r28, r22
    120e:	46 2f       	mov	r20, r22
    1210:	bc 01       	movw	r22, r24
    1212:	80 ec       	ldi	r24, 0xC0	; 192
    1214:	0e 94 81 05 	call	0xb02	; 0xb02 <I2C_1_SendData>
    1218:	91 e0       	ldi	r25, 0x01	; 1
    121a:	c8 13       	cpse	r28, r24
    121c:	01 c0       	rjmp	.+2      	; 0x1220 <_Z17si5351_write_bulkPhh+0x16>
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	89 2f       	mov	r24, r25
    1222:	cf 91       	pop	r28
    1224:	08 95       	ret

00001226 <_Z16si5351_read_bulkPhh>:
    1226:	cf 93       	push	r28
    1228:	c6 2f       	mov	r28, r22
    122a:	46 2f       	mov	r20, r22
    122c:	bc 01       	movw	r22, r24
    122e:	80 ec       	ldi	r24, 0xC0	; 192
    1230:	0e 94 b6 05 	call	0xb6c	; 0xb6c <I2C_1_GetData>
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	c8 13       	cpse	r28, r24
    1238:	01 c0       	rjmp	.+2      	; 0x123c <_Z16si5351_read_bulkPhh+0x16>
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	89 2f       	mov	r24, r25
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <_Z19si5351_clock_enable12si5351_clockh>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	EC si5351_clock_enable(Si5351_clock clk, BOOL enable)
	{
    1242:	0f 93       	push	r16
    1244:	1f 93       	push	r17
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	00 d0       	rcall	.+0      	; 0x124c <_Z19si5351_clock_enable12si5351_clockh+0xa>
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	18 2f       	mov	r17, r24
    1252:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		data[0] = SI5351_OUTPUT_ENABLE_CTRL;
    1254:	83 e0       	ldi	r24, 0x03	; 3
    1256:	89 83       	std	Y+1, r24	; 0x01

		if(si5351_read_bulk(data, 1)) 
    1258:	61 e0       	ldi	r22, 0x01	; 1
    125a:	ce 01       	movw	r24, r28
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	0e 94 13 09 	call	0x1226	; 0x1226 <_Z16si5351_read_bulkPhh>
    1262:	81 11       	cpse	r24, r1
    1264:	23 c0       	rjmp	.+70     	; 0x12ac <_Z19si5351_clock_enable12si5351_clockh+0x6a>
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    1266:	99 81       	ldd	r25, Y+1	; 0x01

		if(enable)
    1268:	00 23       	and	r16, r16
    126a:	59 f0       	breq	.+22     	; 0x1282 <_Z19si5351_clock_enable12si5351_clockh+0x40>
		{
			reg_val &= ~(1 << (uint8_t)clk);
    126c:	21 e0       	ldi	r18, 0x01	; 1
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <_Z19si5351_clock_enable12si5351_clockh+0x34>
    1272:	22 0f       	add	r18, r18
    1274:	33 1f       	adc	r19, r19
    1276:	1a 95       	dec	r17
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <_Z19si5351_clock_enable12si5351_clockh+0x30>
    127a:	82 2f       	mov	r24, r18
    127c:	80 95       	com	r24
    127e:	89 23       	and	r24, r25
    1280:	09 c0       	rjmp	.+18     	; 0x1294 <_Z19si5351_clock_enable12si5351_clockh+0x52>
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    1282:	21 e0       	ldi	r18, 0x01	; 1
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	02 c0       	rjmp	.+4      	; 0x128c <_Z19si5351_clock_enable12si5351_clockh+0x4a>
    1288:	22 0f       	add	r18, r18
    128a:	33 1f       	adc	r19, r19
    128c:	1a 95       	dec	r17
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <_Z19si5351_clock_enable12si5351_clockh+0x46>
    1290:	89 2f       	mov	r24, r25
    1292:	82 2b       	or	r24, r18
		}

		data[0] = SI5351_OUTPUT_ENABLE_CTRL;
    1294:	93 e0       	ldi	r25, 0x03	; 3
    1296:	99 83       	std	Y+1, r25	; 0x01
		data[1] = reg_val;
    1298:	8a 83       	std	Y+2, r24	; 0x02
		if(si5351_write_bulk(data, 2)) return ERROR_CODE_RTC_NONRESPONSIVE;
    129a:	62 e0       	ldi	r22, 0x02	; 2
    129c:	ce 01       	movw	r24, r28
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	0e 94 05 09 	call	0x120a	; 0x120a <_Z17si5351_write_bulkPhh>
    12a4:	88 23       	and	r24, r24
    12a6:	21 f0       	breq	.+8      	; 0x12b0 <_Z19si5351_clock_enable12si5351_clockh+0x6e>
    12a8:	8c ef       	ldi	r24, 0xFC	; 252
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <_Z19si5351_clock_enable12si5351_clockh+0x70>
		
		data[0] = SI5351_OUTPUT_ENABLE_CTRL;

		if(si5351_read_bulk(data, 1)) 
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
    12ac:	8c ef       	ldi	r24, 0xFC	; 252
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <_Z19si5351_clock_enable12si5351_clockh+0x70>

		data[0] = SI5351_OUTPUT_ENABLE_CTRL;
		data[1] = reg_val;
		if(si5351_write_bulk(data, 2)) return ERROR_CODE_RTC_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    12b0:	80 e0       	ldi	r24, 0x00	; 0
	}
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	08 95       	ret

000012c0 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	08 95       	ret

000012c4 <TIMERB_init>:
 * \return Initialization status.
 */
int8_t TIMERB_init()
{
TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    12c4:	e0 e0       	ldi	r30, 0x00	; 0
    12c6:	fb e0       	ldi	r31, 0x0B	; 11
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB0.CCMP = 0x9C40;
    12cc:	20 e4       	ldi	r18, 0x40	; 64
    12ce:	3c e9       	ldi	r19, 0x9C	; 156
    12d0:	24 87       	std	Z+12, r18	; 0x0c
    12d2:	35 87       	std	Z+13, r19	; 0x0d

TCB0.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    12d4:	93 e0       	ldi	r25, 0x03	; 3
    12d6:	90 83       	st	Z, r25

TCB0.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    12d8:	86 83       	std	Z+6, r24	; 0x06

/********************************************************************************/

TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    12da:	e0 e1       	ldi	r30, 0x10	; 16
    12dc:	fb e0       	ldi	r31, 0x0B	; 11
    12de:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB1.CCMP = 0x5DC0;
    12e0:	40 ec       	ldi	r20, 0xC0	; 192
    12e2:	5d e5       	ldi	r21, 0x5D	; 93
    12e4:	44 87       	std	Z+12, r20	; 0x0c
    12e6:	55 87       	std	Z+13, r21	; 0x0d

TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    12e8:	80 83       	st	Z, r24

TCB1.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    12ea:	86 83       	std	Z+6, r24	; 0x06


/********************************************************************************/

TCB3.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    12ec:	e0 e3       	ldi	r30, 0x30	; 48
    12ee:	fb e0       	ldi	r31, 0x0B	; 11
    12f0:	85 83       	std	Z+5, r24	; 0x05

// Set TOP
TCB3.CCMP = 0x9C40;
    12f2:	24 87       	std	Z+12, r18	; 0x0c
    12f4:	35 87       	std	Z+13, r19	; 0x0d

TCB3.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */
    12f6:	90 83       	st	Z, r25

TCB3.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    12f8:	86 83       	std	Z+6, r24	; 0x06

	return 0;
}
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	08 95       	ret

000012fe <util_delay_ms>:


bool util_delay_ms(uint32_t delayValue)
{
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
	static uint32_t countdownValue=0;
	static bool counting = false;
	
	if(delayValue)
    1302:	61 15       	cp	r22, r1
    1304:	71 05       	cpc	r23, r1
    1306:	81 05       	cpc	r24, r1
    1308:	91 05       	cpc	r25, r1
    130a:	09 f4       	brne	.+2      	; 0x130e <util_delay_ms+0x10>
    130c:	67 c0       	rjmp	.+206    	; 0x13dc <util_delay_ms+0xde>
	{
		if(counting)
    130e:	20 91 46 42 	lds	r18, 0x4246	; 0x804246 <_ZZ13util_delay_msE8counting>
    1312:	22 23       	and	r18, r18
    1314:	f1 f1       	breq	.+124    	; 0x1392 <util_delay_ms+0x94>
		{
			if(!g_ms_counter)
    1316:	00 91 47 42 	lds	r16, 0x4247	; 0x804247 <_ZL12g_ms_counter>
    131a:	10 91 48 42 	lds	r17, 0x4248	; 0x804248 <_ZL12g_ms_counter+0x1>
    131e:	20 91 49 42 	lds	r18, 0x4249	; 0x804249 <_ZL12g_ms_counter+0x2>
    1322:	30 91 4a 42 	lds	r19, 0x424A	; 0x80424a <_ZL12g_ms_counter+0x3>
    1326:	01 2b       	or	r16, r17
    1328:	02 2b       	or	r16, r18
    132a:	03 2b       	or	r16, r19
    132c:	71 f4       	brne	.+28     	; 0x134a <util_delay_ms+0x4c>
			{
				TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
				| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    132e:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

				counting = false;
    1332:	10 92 46 42 	sts	0x4246, r1	; 0x804246 <_ZZ13util_delay_msE8counting>
				countdownValue = 0;
    1336:	10 92 42 42 	sts	0x4242, r1	; 0x804242 <_ZZ13util_delay_msE14countdownValue>
    133a:	10 92 43 42 	sts	0x4243, r1	; 0x804243 <_ZZ13util_delay_msE14countdownValue+0x1>
    133e:	10 92 44 42 	sts	0x4244, r1	; 0x804244 <_ZZ13util_delay_msE14countdownValue+0x2>
    1342:	10 92 45 42 	sts	0x4245, r1	; 0x804245 <_ZZ13util_delay_msE14countdownValue+0x3>
				return(false); /* time expired */
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	62 c0       	rjmp	.+196    	; 0x140e <util_delay_ms+0x110>
			}
			else if(delayValue != countdownValue) /* countdown delay changed */
    134a:	00 91 42 42 	lds	r16, 0x4242	; 0x804242 <_ZZ13util_delay_msE14countdownValue>
    134e:	10 91 43 42 	lds	r17, 0x4243	; 0x804243 <_ZZ13util_delay_msE14countdownValue+0x1>
    1352:	20 91 44 42 	lds	r18, 0x4244	; 0x804244 <_ZZ13util_delay_msE14countdownValue+0x2>
    1356:	30 91 45 42 	lds	r19, 0x4245	; 0x804245 <_ZZ13util_delay_msE14countdownValue+0x3>
    135a:	60 17       	cp	r22, r16
    135c:	71 07       	cpc	r23, r17
    135e:	82 07       	cpc	r24, r18
    1360:	93 07       	cpc	r25, r19
    1362:	09 f4       	brne	.+2      	; 0x1366 <util_delay_ms+0x68>
    1364:	51 c0       	rjmp	.+162    	; 0x1408 <util_delay_ms+0x10a>
			{
				TCB1.CNT = 0x0000;
    1366:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    136a:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
				countdownValue = delayValue;
    136e:	60 93 42 42 	sts	0x4242, r22	; 0x804242 <_ZZ13util_delay_msE14countdownValue>
    1372:	70 93 43 42 	sts	0x4243, r23	; 0x804243 <_ZZ13util_delay_msE14countdownValue+0x1>
    1376:	80 93 44 42 	sts	0x4244, r24	; 0x804244 <_ZZ13util_delay_msE14countdownValue+0x2>
    137a:	90 93 45 42 	sts	0x4245, r25	; 0x804245 <_ZZ13util_delay_msE14countdownValue+0x3>
				g_ms_counter = delayValue;
    137e:	60 93 47 42 	sts	0x4247, r22	; 0x804247 <_ZL12g_ms_counter>
    1382:	70 93 48 42 	sts	0x4248, r23	; 0x804248 <_ZL12g_ms_counter+0x1>
    1386:	80 93 49 42 	sts	0x4249, r24	; 0x804249 <_ZL12g_ms_counter+0x2>
    138a:	90 93 4a 42 	sts	0x424A, r25	; 0x80424a <_ZL12g_ms_counter+0x3>
				return(false);
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	3e c0       	rjmp	.+124    	; 0x140e <util_delay_ms+0x110>
			}
		}
		else if(delayValue != countdownValue)
    1392:	00 91 42 42 	lds	r16, 0x4242	; 0x804242 <_ZZ13util_delay_msE14countdownValue>
    1396:	10 91 43 42 	lds	r17, 0x4243	; 0x804243 <_ZZ13util_delay_msE14countdownValue+0x1>
    139a:	20 91 44 42 	lds	r18, 0x4244	; 0x804244 <_ZZ13util_delay_msE14countdownValue+0x2>
    139e:	30 91 45 42 	lds	r19, 0x4245	; 0x804245 <_ZZ13util_delay_msE14countdownValue+0x3>
    13a2:	60 17       	cp	r22, r16
    13a4:	71 07       	cpc	r23, r17
    13a6:	82 07       	cpc	r24, r18
    13a8:	93 07       	cpc	r25, r19
    13aa:	71 f1       	breq	.+92     	; 0x1408 <util_delay_ms+0x10a>
		{
			TCB1.CNT = 0x0000;
    13ac:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    13b0:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
			countdownValue = delayValue;
    13b4:	60 93 42 42 	sts	0x4242, r22	; 0x804242 <_ZZ13util_delay_msE14countdownValue>
    13b8:	70 93 43 42 	sts	0x4243, r23	; 0x804243 <_ZZ13util_delay_msE14countdownValue+0x1>
    13bc:	80 93 44 42 	sts	0x4244, r24	; 0x804244 <_ZZ13util_delay_msE14countdownValue+0x2>
    13c0:	90 93 45 42 	sts	0x4245, r25	; 0x804245 <_ZZ13util_delay_msE14countdownValue+0x3>
			g_ms_counter = delayValue;
    13c4:	60 93 47 42 	sts	0x4247, r22	; 0x804247 <_ZL12g_ms_counter>
    13c8:	70 93 48 42 	sts	0x4248, r23	; 0x804248 <_ZL12g_ms_counter+0x1>
    13cc:	80 93 49 42 	sts	0x4249, r24	; 0x804249 <_ZL12g_ms_counter+0x2>
    13d0:	90 93 4a 42 	sts	0x424A, r25	; 0x80424a <_ZL12g_ms_counter+0x3>
			counting = true;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	80 93 46 42 	sts	0x4246, r24	; 0x804246 <_ZZ13util_delay_msE8counting>
    13da:	16 c0       	rjmp	.+44     	; 0x1408 <util_delay_ms+0x10a>
		}
	}
	else
	{
		TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
		| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    13dc:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>

		counting = false;
    13e0:	10 92 46 42 	sts	0x4246, r1	; 0x804246 <_ZZ13util_delay_msE8counting>
		countdownValue = 0;
    13e4:	10 92 42 42 	sts	0x4242, r1	; 0x804242 <_ZZ13util_delay_msE14countdownValue>
    13e8:	10 92 43 42 	sts	0x4243, r1	; 0x804243 <_ZZ13util_delay_msE14countdownValue+0x1>
    13ec:	10 92 44 42 	sts	0x4244, r1	; 0x804244 <_ZZ13util_delay_msE14countdownValue+0x2>
    13f0:	10 92 45 42 	sts	0x4245, r1	; 0x804245 <_ZZ13util_delay_msE14countdownValue+0x3>
		g_ms_counter = 0;
    13f4:	10 92 47 42 	sts	0x4247, r1	; 0x804247 <_ZL12g_ms_counter>
    13f8:	10 92 48 42 	sts	0x4248, r1	; 0x804248 <_ZL12g_ms_counter+0x1>
    13fc:	10 92 49 42 	sts	0x4249, r1	; 0x804249 <_ZL12g_ms_counter+0x2>
    1400:	10 92 4a 42 	sts	0x424A, r1	; 0x80424a <_ZL12g_ms_counter+0x3>
		return(false); /* timer reset */
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	03 c0       	rjmp	.+6      	; 0x140e <util_delay_ms+0x110>
	}
	
	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
	| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
	
	return(true);
}
    140e:	1f 91       	pop	r17
    1410:	0f 91       	pop	r16
    1412:	08 95       	ret

00001414 <__vector_13>:

/**
One millisecond utility counter based on CPU clock.
*/
ISR(TCB1_INT_vect)
{
    1414:	1f 92       	push	r1
    1416:	0f 92       	push	r0
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	0f 92       	push	r0
    141c:	11 24       	eor	r1, r1
    141e:	8f 93       	push	r24
    1420:	9f 93       	push	r25
    1422:	af 93       	push	r26
    1424:	bf 93       	push	r27
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    1426:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    142a:	80 ff       	sbrs	r24, 0
    142c:	1d c0       	rjmp	.+58     	; 0x1468 <__vector_13+0x54>
    {
		if(g_ms_counter) /* check for 1-second interval */
    142e:	80 91 47 42 	lds	r24, 0x4247	; 0x804247 <_ZL12g_ms_counter>
    1432:	90 91 48 42 	lds	r25, 0x4248	; 0x804248 <_ZL12g_ms_counter+0x1>
    1436:	a0 91 49 42 	lds	r26, 0x4249	; 0x804249 <_ZL12g_ms_counter+0x2>
    143a:	b0 91 4a 42 	lds	r27, 0x424A	; 0x80424a <_ZL12g_ms_counter+0x3>
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	a1 05       	cpc	r26, r1
    1442:	b1 05       	cpc	r27, r1
    1444:	61 f0       	breq	.+24     	; 0x145e <__vector_13+0x4a>
		{
			g_ms_counter--;	
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	a1 09       	sbc	r26, r1
    144a:	b1 09       	sbc	r27, r1
    144c:	80 93 47 42 	sts	0x4247, r24	; 0x804247 <_ZL12g_ms_counter>
    1450:	90 93 48 42 	sts	0x4248, r25	; 0x804248 <_ZL12g_ms_counter+0x1>
    1454:	a0 93 49 42 	sts	0x4249, r26	; 0x804249 <_ZL12g_ms_counter+0x2>
    1458:	b0 93 4a 42 	sts	0x424A, r27	; 0x80424a <_ZL12g_ms_counter+0x3>
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <__vector_13+0x4e>
		}
		else
		{
			TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
			| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
    145e:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
		}

        TCB1.INTFLAGS = TCB_CAPT_bm; /* clear interrupt flag */
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    }
}
    1468:	bf 91       	pop	r27
    146a:	af 91       	pop	r26
    146c:	9f 91       	pop	r25
    146e:	8f 91       	pop	r24
    1470:	0f 90       	pop	r0
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	0f 90       	pop	r0
    1476:	1f 90       	pop	r1
    1478:	18 95       	reti

0000147a <_Z18powerToTransmitterh>:
		{
// 			PORTB &= ~(1 << PORTB1);  /* Turn off 80m band */
		}

		return(result);
	}
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	08 95       	ret

0000147e <_Z14keyTransmitterh>:

	void keyTransmitter(BOOL on)
	{
		if(on)
    147e:	88 23       	and	r24, r24
    1480:	61 f0       	breq	.+24     	; 0x149a <_Z14keyTransmitterh+0x1c>
		{
			if(!g_transmitter_keyed)
    1482:	80 91 4b 42 	lds	r24, 0x424B	; 0x80424b <_ZL19g_transmitter_keyed>
    1486:	81 11       	cpse	r24, r1
    1488:	0e c0       	rjmp	.+28     	; 0x14a6 <_Z14keyTransmitterh+0x28>
			{
				si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_ENABLED);
    148a:	61 e0       	ldi	r22, 0x01	; 1
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z19si5351_clock_enable12si5351_clockh>
				g_transmitter_keyed = TRUE;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	80 93 4b 42 	sts	0x424B, r24	; 0x80424b <_ZL19g_transmitter_keyed>
    1498:	08 95       	ret
			}
		}
		else
		{
			si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED);
    149a:	60 e0       	ldi	r22, 0x00	; 0
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z19si5351_clock_enable12si5351_clockh>
			g_transmitter_keyed = FALSE;
    14a2:	10 92 4b 42 	sts	0x424B, r1	; 0x80424b <_ZL19g_transmitter_keyed>
    14a6:	08 95       	ret

000014a8 <USART1_init>:
 *
 * \return Nothing
 */
void USART1_disable()
{
	USART1.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
    14a8:	0e 94 90 0b 	call	0x1720	; 0x1720 <__floatunsisf>
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e8       	ldi	r20, 0x80	; 128
    14b2:	51 e4       	ldi	r21, 0x41	; 65
    14b4:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
    14b8:	9b 01       	movw	r18, r22
    14ba:	ac 01       	movw	r20, r24
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	7b e1       	ldi	r23, 0x1B	; 27
    14c0:	87 eb       	ldi	r24, 0xB7	; 183
    14c2:	9e e4       	ldi	r25, 0x4E	; 78
    14c4:	0e 94 ef 0a 	call	0x15de	; 0x15de <__divsf3>
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	5f e3       	ldi	r21, 0x3F	; 63
    14d0:	0e 94 83 0a 	call	0x1506	; 0x1506 <__addsf3>
    14d4:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__fixunssfsi>
    14d8:	e0 e2       	ldi	r30, 0x20	; 32
    14da:	f8 e0       	ldi	r31, 0x08	; 8
    14dc:	60 87       	std	Z+8, r22	; 0x08
    14de:	71 87       	std	Z+9, r23	; 0x09
    14e0:	80 e8       	ldi	r24, 0x80	; 128
    14e2:	85 83       	std	Z+5, r24	; 0x05
    14e4:	80 ec       	ldi	r24, 0xC0	; 192
    14e6:	86 83       	std	Z+6, r24	; 0x06
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	08 95       	ret

000014ec <USART1_enable_tx>:
    14ec:	e0 e2       	ldi	r30, 0x20	; 32
    14ee:	f8 e0       	ldi	r31, 0x08	; 8
    14f0:	86 81       	ldd	r24, Z+6	; 0x06
    14f2:	80 64       	ori	r24, 0x40	; 64
    14f4:	86 83       	std	Z+6, r24	; 0x06
    14f6:	85 81       	ldd	r24, Z+5	; 0x05
    14f8:	80 62       	ori	r24, 0x20	; 32
    14fa:	85 83       	std	Z+5, r24	; 0x05
    14fc:	08 95       	ret

000014fe <USART1_get_data>:
 *
 * \return Data register from USART1 module
 */
uint8_t USART1_get_data()
{
	return USART1.RXDATAL;
    14fe:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
}
    1502:	08 95       	ret

00001504 <__subsf3>:
    1504:	50 58       	subi	r21, 0x80	; 128

00001506 <__addsf3>:
    1506:	bb 27       	eor	r27, r27
    1508:	aa 27       	eor	r26, r26
    150a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__addsf3x>
    150e:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__fp_round>
    1512:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__fp_pscA>
    1516:	38 f0       	brcs	.+14     	; 0x1526 <__addsf3+0x20>
    1518:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__fp_pscB>
    151c:	20 f0       	brcs	.+8      	; 0x1526 <__addsf3+0x20>
    151e:	39 f4       	brne	.+14     	; 0x152e <__addsf3+0x28>
    1520:	9f 3f       	cpi	r25, 0xFF	; 255
    1522:	19 f4       	brne	.+6      	; 0x152a <__addsf3+0x24>
    1524:	26 f4       	brtc	.+8      	; 0x152e <__addsf3+0x28>
    1526:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__fp_nan>
    152a:	0e f4       	brtc	.+2      	; 0x152e <__addsf3+0x28>
    152c:	e0 95       	com	r30
    152e:	e7 fb       	bst	r30, 7
    1530:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_inf>

00001534 <__addsf3x>:
    1534:	e9 2f       	mov	r30, r25
    1536:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__fp_split3>
    153a:	58 f3       	brcs	.-42     	; 0x1512 <__addsf3+0xc>
    153c:	ba 17       	cp	r27, r26
    153e:	62 07       	cpc	r22, r18
    1540:	73 07       	cpc	r23, r19
    1542:	84 07       	cpc	r24, r20
    1544:	95 07       	cpc	r25, r21
    1546:	20 f0       	brcs	.+8      	; 0x1550 <__addsf3x+0x1c>
    1548:	79 f4       	brne	.+30     	; 0x1568 <__addsf3x+0x34>
    154a:	a6 f5       	brtc	.+104    	; 0x15b4 <__addsf3x+0x80>
    154c:	0c 94 17 0c 	jmp	0x182e	; 0x182e <__fp_zero>
    1550:	0e f4       	brtc	.+2      	; 0x1554 <__addsf3x+0x20>
    1552:	e0 95       	com	r30
    1554:	0b 2e       	mov	r0, r27
    1556:	ba 2f       	mov	r27, r26
    1558:	a0 2d       	mov	r26, r0
    155a:	0b 01       	movw	r0, r22
    155c:	b9 01       	movw	r22, r18
    155e:	90 01       	movw	r18, r0
    1560:	0c 01       	movw	r0, r24
    1562:	ca 01       	movw	r24, r20
    1564:	a0 01       	movw	r20, r0
    1566:	11 24       	eor	r1, r1
    1568:	ff 27       	eor	r31, r31
    156a:	59 1b       	sub	r21, r25
    156c:	99 f0       	breq	.+38     	; 0x1594 <__addsf3x+0x60>
    156e:	59 3f       	cpi	r21, 0xF9	; 249
    1570:	50 f4       	brcc	.+20     	; 0x1586 <__addsf3x+0x52>
    1572:	50 3e       	cpi	r21, 0xE0	; 224
    1574:	68 f1       	brcs	.+90     	; 0x15d0 <__addsf3x+0x9c>
    1576:	1a 16       	cp	r1, r26
    1578:	f0 40       	sbci	r31, 0x00	; 0
    157a:	a2 2f       	mov	r26, r18
    157c:	23 2f       	mov	r18, r19
    157e:	34 2f       	mov	r19, r20
    1580:	44 27       	eor	r20, r20
    1582:	58 5f       	subi	r21, 0xF8	; 248
    1584:	f3 cf       	rjmp	.-26     	; 0x156c <__addsf3x+0x38>
    1586:	46 95       	lsr	r20
    1588:	37 95       	ror	r19
    158a:	27 95       	ror	r18
    158c:	a7 95       	ror	r26
    158e:	f0 40       	sbci	r31, 0x00	; 0
    1590:	53 95       	inc	r21
    1592:	c9 f7       	brne	.-14     	; 0x1586 <__addsf3x+0x52>
    1594:	7e f4       	brtc	.+30     	; 0x15b4 <__addsf3x+0x80>
    1596:	1f 16       	cp	r1, r31
    1598:	ba 0b       	sbc	r27, r26
    159a:	62 0b       	sbc	r22, r18
    159c:	73 0b       	sbc	r23, r19
    159e:	84 0b       	sbc	r24, r20
    15a0:	ba f0       	brmi	.+46     	; 0x15d0 <__addsf3x+0x9c>
    15a2:	91 50       	subi	r25, 0x01	; 1
    15a4:	a1 f0       	breq	.+40     	; 0x15ce <__addsf3x+0x9a>
    15a6:	ff 0f       	add	r31, r31
    15a8:	bb 1f       	adc	r27, r27
    15aa:	66 1f       	adc	r22, r22
    15ac:	77 1f       	adc	r23, r23
    15ae:	88 1f       	adc	r24, r24
    15b0:	c2 f7       	brpl	.-16     	; 0x15a2 <__addsf3x+0x6e>
    15b2:	0e c0       	rjmp	.+28     	; 0x15d0 <__addsf3x+0x9c>
    15b4:	ba 0f       	add	r27, r26
    15b6:	62 1f       	adc	r22, r18
    15b8:	73 1f       	adc	r23, r19
    15ba:	84 1f       	adc	r24, r20
    15bc:	48 f4       	brcc	.+18     	; 0x15d0 <__addsf3x+0x9c>
    15be:	87 95       	ror	r24
    15c0:	77 95       	ror	r23
    15c2:	67 95       	ror	r22
    15c4:	b7 95       	ror	r27
    15c6:	f7 95       	ror	r31
    15c8:	9e 3f       	cpi	r25, 0xFE	; 254
    15ca:	08 f0       	brcs	.+2      	; 0x15ce <__addsf3x+0x9a>
    15cc:	b0 cf       	rjmp	.-160    	; 0x152e <__addsf3+0x28>
    15ce:	93 95       	inc	r25
    15d0:	88 0f       	add	r24, r24
    15d2:	08 f0       	brcs	.+2      	; 0x15d6 <__addsf3x+0xa2>
    15d4:	99 27       	eor	r25, r25
    15d6:	ee 0f       	add	r30, r30
    15d8:	97 95       	ror	r25
    15da:	87 95       	ror	r24
    15dc:	08 95       	ret

000015de <__divsf3>:
    15de:	0e 94 03 0b 	call	0x1606	; 0x1606 <__divsf3x>
    15e2:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__fp_round>
    15e6:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__fp_pscB>
    15ea:	58 f0       	brcs	.+22     	; 0x1602 <__divsf3+0x24>
    15ec:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__fp_pscA>
    15f0:	40 f0       	brcs	.+16     	; 0x1602 <__divsf3+0x24>
    15f2:	29 f4       	brne	.+10     	; 0x15fe <__divsf3+0x20>
    15f4:	5f 3f       	cpi	r21, 0xFF	; 255
    15f6:	29 f0       	breq	.+10     	; 0x1602 <__divsf3+0x24>
    15f8:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_inf>
    15fc:	51 11       	cpse	r21, r1
    15fe:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__fp_szero>
    1602:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__fp_nan>

00001606 <__divsf3x>:
    1606:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__fp_split3>
    160a:	68 f3       	brcs	.-38     	; 0x15e6 <__divsf3+0x8>

0000160c <__divsf3_pse>:
    160c:	99 23       	and	r25, r25
    160e:	b1 f3       	breq	.-20     	; 0x15fc <__divsf3+0x1e>
    1610:	55 23       	and	r21, r21
    1612:	91 f3       	breq	.-28     	; 0x15f8 <__divsf3+0x1a>
    1614:	95 1b       	sub	r25, r21
    1616:	55 0b       	sbc	r21, r21
    1618:	bb 27       	eor	r27, r27
    161a:	aa 27       	eor	r26, r26
    161c:	62 17       	cp	r22, r18
    161e:	73 07       	cpc	r23, r19
    1620:	84 07       	cpc	r24, r20
    1622:	38 f0       	brcs	.+14     	; 0x1632 <__divsf3_pse+0x26>
    1624:	9f 5f       	subi	r25, 0xFF	; 255
    1626:	5f 4f       	sbci	r21, 0xFF	; 255
    1628:	22 0f       	add	r18, r18
    162a:	33 1f       	adc	r19, r19
    162c:	44 1f       	adc	r20, r20
    162e:	aa 1f       	adc	r26, r26
    1630:	a9 f3       	breq	.-22     	; 0x161c <__divsf3_pse+0x10>
    1632:	35 d0       	rcall	.+106    	; 0x169e <__divsf3_pse+0x92>
    1634:	0e 2e       	mov	r0, r30
    1636:	3a f0       	brmi	.+14     	; 0x1646 <__divsf3_pse+0x3a>
    1638:	e0 e8       	ldi	r30, 0x80	; 128
    163a:	32 d0       	rcall	.+100    	; 0x16a0 <__divsf3_pse+0x94>
    163c:	91 50       	subi	r25, 0x01	; 1
    163e:	50 40       	sbci	r21, 0x00	; 0
    1640:	e6 95       	lsr	r30
    1642:	00 1c       	adc	r0, r0
    1644:	ca f7       	brpl	.-14     	; 0x1638 <__divsf3_pse+0x2c>
    1646:	2b d0       	rcall	.+86     	; 0x169e <__divsf3_pse+0x92>
    1648:	fe 2f       	mov	r31, r30
    164a:	29 d0       	rcall	.+82     	; 0x169e <__divsf3_pse+0x92>
    164c:	66 0f       	add	r22, r22
    164e:	77 1f       	adc	r23, r23
    1650:	88 1f       	adc	r24, r24
    1652:	bb 1f       	adc	r27, r27
    1654:	26 17       	cp	r18, r22
    1656:	37 07       	cpc	r19, r23
    1658:	48 07       	cpc	r20, r24
    165a:	ab 07       	cpc	r26, r27
    165c:	b0 e8       	ldi	r27, 0x80	; 128
    165e:	09 f0       	breq	.+2      	; 0x1662 <__divsf3_pse+0x56>
    1660:	bb 0b       	sbc	r27, r27
    1662:	80 2d       	mov	r24, r0
    1664:	bf 01       	movw	r22, r30
    1666:	ff 27       	eor	r31, r31
    1668:	93 58       	subi	r25, 0x83	; 131
    166a:	5f 4f       	sbci	r21, 0xFF	; 255
    166c:	3a f0       	brmi	.+14     	; 0x167c <__divsf3_pse+0x70>
    166e:	9e 3f       	cpi	r25, 0xFE	; 254
    1670:	51 05       	cpc	r21, r1
    1672:	78 f0       	brcs	.+30     	; 0x1692 <__divsf3_pse+0x86>
    1674:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_inf>
    1678:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__fp_szero>
    167c:	5f 3f       	cpi	r21, 0xFF	; 255
    167e:	e4 f3       	brlt	.-8      	; 0x1678 <__divsf3_pse+0x6c>
    1680:	98 3e       	cpi	r25, 0xE8	; 232
    1682:	d4 f3       	brlt	.-12     	; 0x1678 <__divsf3_pse+0x6c>
    1684:	86 95       	lsr	r24
    1686:	77 95       	ror	r23
    1688:	67 95       	ror	r22
    168a:	b7 95       	ror	r27
    168c:	f7 95       	ror	r31
    168e:	9f 5f       	subi	r25, 0xFF	; 255
    1690:	c9 f7       	brne	.-14     	; 0x1684 <__divsf3_pse+0x78>
    1692:	88 0f       	add	r24, r24
    1694:	91 1d       	adc	r25, r1
    1696:	96 95       	lsr	r25
    1698:	87 95       	ror	r24
    169a:	97 f9       	bld	r25, 7
    169c:	08 95       	ret
    169e:	e1 e0       	ldi	r30, 0x01	; 1
    16a0:	66 0f       	add	r22, r22
    16a2:	77 1f       	adc	r23, r23
    16a4:	88 1f       	adc	r24, r24
    16a6:	bb 1f       	adc	r27, r27
    16a8:	62 17       	cp	r22, r18
    16aa:	73 07       	cpc	r23, r19
    16ac:	84 07       	cpc	r24, r20
    16ae:	ba 07       	cpc	r27, r26
    16b0:	20 f0       	brcs	.+8      	; 0x16ba <__divsf3_pse+0xae>
    16b2:	62 1b       	sub	r22, r18
    16b4:	73 0b       	sbc	r23, r19
    16b6:	84 0b       	sbc	r24, r20
    16b8:	ba 0b       	sbc	r27, r26
    16ba:	ee 1f       	adc	r30, r30
    16bc:	88 f7       	brcc	.-30     	; 0x16a0 <__divsf3_pse+0x94>
    16be:	e0 95       	com	r30
    16c0:	08 95       	ret

000016c2 <__fixunssfsi>:
    16c2:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__fp_splitA>
    16c6:	88 f0       	brcs	.+34     	; 0x16ea <__fixunssfsi+0x28>
    16c8:	9f 57       	subi	r25, 0x7F	; 127
    16ca:	98 f0       	brcs	.+38     	; 0x16f2 <__fixunssfsi+0x30>
    16cc:	b9 2f       	mov	r27, r25
    16ce:	99 27       	eor	r25, r25
    16d0:	b7 51       	subi	r27, 0x17	; 23
    16d2:	b0 f0       	brcs	.+44     	; 0x1700 <__fixunssfsi+0x3e>
    16d4:	e1 f0       	breq	.+56     	; 0x170e <__fixunssfsi+0x4c>
    16d6:	66 0f       	add	r22, r22
    16d8:	77 1f       	adc	r23, r23
    16da:	88 1f       	adc	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	1a f0       	brmi	.+6      	; 0x16e6 <__fixunssfsi+0x24>
    16e0:	ba 95       	dec	r27
    16e2:	c9 f7       	brne	.-14     	; 0x16d6 <__fixunssfsi+0x14>
    16e4:	14 c0       	rjmp	.+40     	; 0x170e <__fixunssfsi+0x4c>
    16e6:	b1 30       	cpi	r27, 0x01	; 1
    16e8:	91 f0       	breq	.+36     	; 0x170e <__fixunssfsi+0x4c>
    16ea:	0e 94 17 0c 	call	0x182e	; 0x182e <__fp_zero>
    16ee:	b1 e0       	ldi	r27, 0x01	; 1
    16f0:	08 95       	ret
    16f2:	0c 94 17 0c 	jmp	0x182e	; 0x182e <__fp_zero>
    16f6:	67 2f       	mov	r22, r23
    16f8:	78 2f       	mov	r23, r24
    16fa:	88 27       	eor	r24, r24
    16fc:	b8 5f       	subi	r27, 0xF8	; 248
    16fe:	39 f0       	breq	.+14     	; 0x170e <__fixunssfsi+0x4c>
    1700:	b9 3f       	cpi	r27, 0xF9	; 249
    1702:	cc f3       	brlt	.-14     	; 0x16f6 <__fixunssfsi+0x34>
    1704:	86 95       	lsr	r24
    1706:	77 95       	ror	r23
    1708:	67 95       	ror	r22
    170a:	b3 95       	inc	r27
    170c:	d9 f7       	brne	.-10     	; 0x1704 <__fixunssfsi+0x42>
    170e:	3e f4       	brtc	.+14     	; 0x171e <__fixunssfsi+0x5c>
    1710:	90 95       	com	r25
    1712:	80 95       	com	r24
    1714:	70 95       	com	r23
    1716:	61 95       	neg	r22
    1718:	7f 4f       	sbci	r23, 0xFF	; 255
    171a:	8f 4f       	sbci	r24, 0xFF	; 255
    171c:	9f 4f       	sbci	r25, 0xFF	; 255
    171e:	08 95       	ret

00001720 <__floatunsisf>:
    1720:	e8 94       	clt
    1722:	09 c0       	rjmp	.+18     	; 0x1736 <__floatsisf+0x12>

00001724 <__floatsisf>:
    1724:	97 fb       	bst	r25, 7
    1726:	3e f4       	brtc	.+14     	; 0x1736 <__floatsisf+0x12>
    1728:	90 95       	com	r25
    172a:	80 95       	com	r24
    172c:	70 95       	com	r23
    172e:	61 95       	neg	r22
    1730:	7f 4f       	sbci	r23, 0xFF	; 255
    1732:	8f 4f       	sbci	r24, 0xFF	; 255
    1734:	9f 4f       	sbci	r25, 0xFF	; 255
    1736:	99 23       	and	r25, r25
    1738:	a9 f0       	breq	.+42     	; 0x1764 <__floatsisf+0x40>
    173a:	f9 2f       	mov	r31, r25
    173c:	96 e9       	ldi	r25, 0x96	; 150
    173e:	bb 27       	eor	r27, r27
    1740:	93 95       	inc	r25
    1742:	f6 95       	lsr	r31
    1744:	87 95       	ror	r24
    1746:	77 95       	ror	r23
    1748:	67 95       	ror	r22
    174a:	b7 95       	ror	r27
    174c:	f1 11       	cpse	r31, r1
    174e:	f8 cf       	rjmp	.-16     	; 0x1740 <__floatsisf+0x1c>
    1750:	fa f4       	brpl	.+62     	; 0x1790 <__floatsisf+0x6c>
    1752:	bb 0f       	add	r27, r27
    1754:	11 f4       	brne	.+4      	; 0x175a <__floatsisf+0x36>
    1756:	60 ff       	sbrs	r22, 0
    1758:	1b c0       	rjmp	.+54     	; 0x1790 <__floatsisf+0x6c>
    175a:	6f 5f       	subi	r22, 0xFF	; 255
    175c:	7f 4f       	sbci	r23, 0xFF	; 255
    175e:	8f 4f       	sbci	r24, 0xFF	; 255
    1760:	9f 4f       	sbci	r25, 0xFF	; 255
    1762:	16 c0       	rjmp	.+44     	; 0x1790 <__floatsisf+0x6c>
    1764:	88 23       	and	r24, r24
    1766:	11 f0       	breq	.+4      	; 0x176c <__floatsisf+0x48>
    1768:	96 e9       	ldi	r25, 0x96	; 150
    176a:	11 c0       	rjmp	.+34     	; 0x178e <__floatsisf+0x6a>
    176c:	77 23       	and	r23, r23
    176e:	21 f0       	breq	.+8      	; 0x1778 <__floatsisf+0x54>
    1770:	9e e8       	ldi	r25, 0x8E	; 142
    1772:	87 2f       	mov	r24, r23
    1774:	76 2f       	mov	r23, r22
    1776:	05 c0       	rjmp	.+10     	; 0x1782 <__floatsisf+0x5e>
    1778:	66 23       	and	r22, r22
    177a:	71 f0       	breq	.+28     	; 0x1798 <__floatsisf+0x74>
    177c:	96 e8       	ldi	r25, 0x86	; 134
    177e:	86 2f       	mov	r24, r22
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	2a f0       	brmi	.+10     	; 0x1790 <__floatsisf+0x6c>
    1786:	9a 95       	dec	r25
    1788:	66 0f       	add	r22, r22
    178a:	77 1f       	adc	r23, r23
    178c:	88 1f       	adc	r24, r24
    178e:	da f7       	brpl	.-10     	; 0x1786 <__floatsisf+0x62>
    1790:	88 0f       	add	r24, r24
    1792:	96 95       	lsr	r25
    1794:	87 95       	ror	r24
    1796:	97 f9       	bld	r25, 7
    1798:	08 95       	ret

0000179a <__fp_inf>:
    179a:	97 f9       	bld	r25, 7
    179c:	9f 67       	ori	r25, 0x7F	; 127
    179e:	80 e8       	ldi	r24, 0x80	; 128
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	08 95       	ret

000017a6 <__fp_nan>:
    17a6:	9f ef       	ldi	r25, 0xFF	; 255
    17a8:	80 ec       	ldi	r24, 0xC0	; 192
    17aa:	08 95       	ret

000017ac <__fp_pscA>:
    17ac:	00 24       	eor	r0, r0
    17ae:	0a 94       	dec	r0
    17b0:	16 16       	cp	r1, r22
    17b2:	17 06       	cpc	r1, r23
    17b4:	18 06       	cpc	r1, r24
    17b6:	09 06       	cpc	r0, r25
    17b8:	08 95       	ret

000017ba <__fp_pscB>:
    17ba:	00 24       	eor	r0, r0
    17bc:	0a 94       	dec	r0
    17be:	12 16       	cp	r1, r18
    17c0:	13 06       	cpc	r1, r19
    17c2:	14 06       	cpc	r1, r20
    17c4:	05 06       	cpc	r0, r21
    17c6:	08 95       	ret

000017c8 <__fp_round>:
    17c8:	09 2e       	mov	r0, r25
    17ca:	03 94       	inc	r0
    17cc:	00 0c       	add	r0, r0
    17ce:	11 f4       	brne	.+4      	; 0x17d4 <__fp_round+0xc>
    17d0:	88 23       	and	r24, r24
    17d2:	52 f0       	brmi	.+20     	; 0x17e8 <__fp_round+0x20>
    17d4:	bb 0f       	add	r27, r27
    17d6:	40 f4       	brcc	.+16     	; 0x17e8 <__fp_round+0x20>
    17d8:	bf 2b       	or	r27, r31
    17da:	11 f4       	brne	.+4      	; 0x17e0 <__fp_round+0x18>
    17dc:	60 ff       	sbrs	r22, 0
    17de:	04 c0       	rjmp	.+8      	; 0x17e8 <__fp_round+0x20>
    17e0:	6f 5f       	subi	r22, 0xFF	; 255
    17e2:	7f 4f       	sbci	r23, 0xFF	; 255
    17e4:	8f 4f       	sbci	r24, 0xFF	; 255
    17e6:	9f 4f       	sbci	r25, 0xFF	; 255
    17e8:	08 95       	ret

000017ea <__fp_split3>:
    17ea:	57 fd       	sbrc	r21, 7
    17ec:	90 58       	subi	r25, 0x80	; 128
    17ee:	44 0f       	add	r20, r20
    17f0:	55 1f       	adc	r21, r21
    17f2:	59 f0       	breq	.+22     	; 0x180a <__fp_splitA+0x10>
    17f4:	5f 3f       	cpi	r21, 0xFF	; 255
    17f6:	71 f0       	breq	.+28     	; 0x1814 <__fp_splitA+0x1a>
    17f8:	47 95       	ror	r20

000017fa <__fp_splitA>:
    17fa:	88 0f       	add	r24, r24
    17fc:	97 fb       	bst	r25, 7
    17fe:	99 1f       	adc	r25, r25
    1800:	61 f0       	breq	.+24     	; 0x181a <__fp_splitA+0x20>
    1802:	9f 3f       	cpi	r25, 0xFF	; 255
    1804:	79 f0       	breq	.+30     	; 0x1824 <__fp_splitA+0x2a>
    1806:	87 95       	ror	r24
    1808:	08 95       	ret
    180a:	12 16       	cp	r1, r18
    180c:	13 06       	cpc	r1, r19
    180e:	14 06       	cpc	r1, r20
    1810:	55 1f       	adc	r21, r21
    1812:	f2 cf       	rjmp	.-28     	; 0x17f8 <__fp_split3+0xe>
    1814:	46 95       	lsr	r20
    1816:	f1 df       	rcall	.-30     	; 0x17fa <__fp_splitA>
    1818:	08 c0       	rjmp	.+16     	; 0x182a <__fp_splitA+0x30>
    181a:	16 16       	cp	r1, r22
    181c:	17 06       	cpc	r1, r23
    181e:	18 06       	cpc	r1, r24
    1820:	99 1f       	adc	r25, r25
    1822:	f1 cf       	rjmp	.-30     	; 0x1806 <__fp_splitA+0xc>
    1824:	86 95       	lsr	r24
    1826:	71 05       	cpc	r23, r1
    1828:	61 05       	cpc	r22, r1
    182a:	08 94       	sec
    182c:	08 95       	ret

0000182e <__fp_zero>:
    182e:	e8 94       	clt

00001830 <__fp_szero>:
    1830:	bb 27       	eor	r27, r27
    1832:	66 27       	eor	r22, r22
    1834:	77 27       	eor	r23, r23
    1836:	cb 01       	movw	r24, r22
    1838:	97 f9       	bld	r25, 7
    183a:	08 95       	ret

0000183c <__mulsf3>:
    183c:	0e 94 31 0c 	call	0x1862	; 0x1862 <__mulsf3x>
    1840:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__fp_round>
    1844:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__fp_pscA>
    1848:	38 f0       	brcs	.+14     	; 0x1858 <__mulsf3+0x1c>
    184a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__fp_pscB>
    184e:	20 f0       	brcs	.+8      	; 0x1858 <__mulsf3+0x1c>
    1850:	95 23       	and	r25, r21
    1852:	11 f0       	breq	.+4      	; 0x1858 <__mulsf3+0x1c>
    1854:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_inf>
    1858:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__fp_nan>
    185c:	11 24       	eor	r1, r1
    185e:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__fp_szero>

00001862 <__mulsf3x>:
    1862:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__fp_split3>
    1866:	70 f3       	brcs	.-36     	; 0x1844 <__mulsf3+0x8>

00001868 <__mulsf3_pse>:
    1868:	95 9f       	mul	r25, r21
    186a:	c1 f3       	breq	.-16     	; 0x185c <__mulsf3+0x20>
    186c:	95 0f       	add	r25, r21
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	55 1f       	adc	r21, r21
    1872:	62 9f       	mul	r22, r18
    1874:	f0 01       	movw	r30, r0
    1876:	72 9f       	mul	r23, r18
    1878:	bb 27       	eor	r27, r27
    187a:	f0 0d       	add	r31, r0
    187c:	b1 1d       	adc	r27, r1
    187e:	63 9f       	mul	r22, r19
    1880:	aa 27       	eor	r26, r26
    1882:	f0 0d       	add	r31, r0
    1884:	b1 1d       	adc	r27, r1
    1886:	aa 1f       	adc	r26, r26
    1888:	64 9f       	mul	r22, r20
    188a:	66 27       	eor	r22, r22
    188c:	b0 0d       	add	r27, r0
    188e:	a1 1d       	adc	r26, r1
    1890:	66 1f       	adc	r22, r22
    1892:	82 9f       	mul	r24, r18
    1894:	22 27       	eor	r18, r18
    1896:	b0 0d       	add	r27, r0
    1898:	a1 1d       	adc	r26, r1
    189a:	62 1f       	adc	r22, r18
    189c:	73 9f       	mul	r23, r19
    189e:	b0 0d       	add	r27, r0
    18a0:	a1 1d       	adc	r26, r1
    18a2:	62 1f       	adc	r22, r18
    18a4:	83 9f       	mul	r24, r19
    18a6:	a0 0d       	add	r26, r0
    18a8:	61 1d       	adc	r22, r1
    18aa:	22 1f       	adc	r18, r18
    18ac:	74 9f       	mul	r23, r20
    18ae:	33 27       	eor	r19, r19
    18b0:	a0 0d       	add	r26, r0
    18b2:	61 1d       	adc	r22, r1
    18b4:	23 1f       	adc	r18, r19
    18b6:	84 9f       	mul	r24, r20
    18b8:	60 0d       	add	r22, r0
    18ba:	21 1d       	adc	r18, r1
    18bc:	82 2f       	mov	r24, r18
    18be:	76 2f       	mov	r23, r22
    18c0:	6a 2f       	mov	r22, r26
    18c2:	11 24       	eor	r1, r1
    18c4:	9f 57       	subi	r25, 0x7F	; 127
    18c6:	50 40       	sbci	r21, 0x00	; 0
    18c8:	9a f0       	brmi	.+38     	; 0x18f0 <__mulsf3_pse+0x88>
    18ca:	f1 f0       	breq	.+60     	; 0x1908 <__mulsf3_pse+0xa0>
    18cc:	88 23       	and	r24, r24
    18ce:	4a f0       	brmi	.+18     	; 0x18e2 <__mulsf3_pse+0x7a>
    18d0:	ee 0f       	add	r30, r30
    18d2:	ff 1f       	adc	r31, r31
    18d4:	bb 1f       	adc	r27, r27
    18d6:	66 1f       	adc	r22, r22
    18d8:	77 1f       	adc	r23, r23
    18da:	88 1f       	adc	r24, r24
    18dc:	91 50       	subi	r25, 0x01	; 1
    18de:	50 40       	sbci	r21, 0x00	; 0
    18e0:	a9 f7       	brne	.-22     	; 0x18cc <__mulsf3_pse+0x64>
    18e2:	9e 3f       	cpi	r25, 0xFE	; 254
    18e4:	51 05       	cpc	r21, r1
    18e6:	80 f0       	brcs	.+32     	; 0x1908 <__mulsf3_pse+0xa0>
    18e8:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_inf>
    18ec:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__fp_szero>
    18f0:	5f 3f       	cpi	r21, 0xFF	; 255
    18f2:	e4 f3       	brlt	.-8      	; 0x18ec <__mulsf3_pse+0x84>
    18f4:	98 3e       	cpi	r25, 0xE8	; 232
    18f6:	d4 f3       	brlt	.-12     	; 0x18ec <__mulsf3_pse+0x84>
    18f8:	86 95       	lsr	r24
    18fa:	77 95       	ror	r23
    18fc:	67 95       	ror	r22
    18fe:	b7 95       	ror	r27
    1900:	f7 95       	ror	r31
    1902:	e7 95       	ror	r30
    1904:	9f 5f       	subi	r25, 0xFF	; 255
    1906:	c1 f7       	brne	.-16     	; 0x18f8 <__mulsf3_pse+0x90>
    1908:	fe 2b       	or	r31, r30
    190a:	88 0f       	add	r24, r24
    190c:	91 1d       	adc	r25, r1
    190e:	96 95       	lsr	r25
    1910:	87 95       	ror	r24
    1912:	97 f9       	bld	r25, 7
    1914:	08 95       	ret

00001916 <__tablejump2__>:
    1916:	ee 0f       	add	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	00 24       	eor	r0, r0
    191c:	00 1c       	adc	r0, r0
    191e:	0b be       	out	0x3b, r0	; 59
    1920:	07 90       	elpm	r0, Z+
    1922:	f6 91       	elpm	r31, Z
    1924:	e0 2d       	mov	r30, r0
    1926:	09 94       	ijmp

00001928 <toupper>:
    1928:	91 11       	cpse	r25, r1
    192a:	08 95       	ret
    192c:	81 56       	subi	r24, 0x61	; 97
    192e:	8a 51       	subi	r24, 0x1A	; 26
    1930:	08 f4       	brcc	.+2      	; 0x1934 <toupper+0xc>
    1932:	80 52       	subi	r24, 0x20	; 32
    1934:	85 58       	subi	r24, 0x85	; 133
    1936:	08 95       	ret

00001938 <sprintf>:
    1938:	0f 93       	push	r16
    193a:	1f 93       	push	r17
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	2e 97       	sbiw	r28, 0x0e	; 14
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0d 89       	ldd	r16, Y+21	; 0x15
    194c:	1e 89       	ldd	r17, Y+22	; 0x16
    194e:	86 e0       	ldi	r24, 0x06	; 6
    1950:	8c 83       	std	Y+4, r24	; 0x04
    1952:	09 83       	std	Y+1, r16	; 0x01
    1954:	1a 83       	std	Y+2, r17	; 0x02
    1956:	8f ef       	ldi	r24, 0xFF	; 255
    1958:	9f e7       	ldi	r25, 0x7F	; 127
    195a:	8d 83       	std	Y+5, r24	; 0x05
    195c:	9e 83       	std	Y+6, r25	; 0x06
    195e:	ae 01       	movw	r20, r28
    1960:	47 5e       	subi	r20, 0xE7	; 231
    1962:	5f 4f       	sbci	r21, 0xFF	; 255
    1964:	6f 89       	ldd	r22, Y+23	; 0x17
    1966:	78 8d       	ldd	r23, Y+24	; 0x18
    1968:	ce 01       	movw	r24, r28
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	0e 94 c5 0c 	call	0x198a	; 0x198a <vfprintf>
    1970:	ef 81       	ldd	r30, Y+7	; 0x07
    1972:	f8 85       	ldd	r31, Y+8	; 0x08
    1974:	e0 0f       	add	r30, r16
    1976:	f1 1f       	adc	r31, r17
    1978:	10 82       	st	Z, r1
    197a:	2e 96       	adiw	r28, 0x0e	; 14
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	08 95       	ret

0000198a <vfprintf>:
    198a:	2f 92       	push	r2
    198c:	3f 92       	push	r3
    198e:	4f 92       	push	r4
    1990:	5f 92       	push	r5
    1992:	6f 92       	push	r6
    1994:	7f 92       	push	r7
    1996:	8f 92       	push	r8
    1998:	9f 92       	push	r9
    199a:	af 92       	push	r10
    199c:	bf 92       	push	r11
    199e:	cf 92       	push	r12
    19a0:	df 92       	push	r13
    19a2:	ef 92       	push	r14
    19a4:	ff 92       	push	r15
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	2b 97       	sbiw	r28, 0x0b	; 11
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	6c 01       	movw	r12, r24
    19ba:	7b 01       	movw	r14, r22
    19bc:	8a 01       	movw	r16, r20
    19be:	fc 01       	movw	r30, r24
    19c0:	16 82       	std	Z+6, r1	; 0x06
    19c2:	17 82       	std	Z+7, r1	; 0x07
    19c4:	83 81       	ldd	r24, Z+3	; 0x03
    19c6:	81 ff       	sbrs	r24, 1
    19c8:	cc c1       	rjmp	.+920    	; 0x1d62 <vfprintf+0x3d8>
    19ca:	ce 01       	movw	r24, r28
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	3c 01       	movw	r6, r24
    19d0:	f6 01       	movw	r30, r12
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	f7 01       	movw	r30, r14
    19d6:	93 fd       	sbrc	r25, 3
    19d8:	85 91       	lpm	r24, Z+
    19da:	93 ff       	sbrs	r25, 3
    19dc:	81 91       	ld	r24, Z+
    19de:	7f 01       	movw	r14, r30
    19e0:	88 23       	and	r24, r24
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <vfprintf+0x5c>
    19e4:	ba c1       	rjmp	.+884    	; 0x1d5a <vfprintf+0x3d0>
    19e6:	85 32       	cpi	r24, 0x25	; 37
    19e8:	39 f4       	brne	.+14     	; 0x19f8 <vfprintf+0x6e>
    19ea:	93 fd       	sbrc	r25, 3
    19ec:	85 91       	lpm	r24, Z+
    19ee:	93 ff       	sbrs	r25, 3
    19f0:	81 91       	ld	r24, Z+
    19f2:	7f 01       	movw	r14, r30
    19f4:	85 32       	cpi	r24, 0x25	; 37
    19f6:	29 f4       	brne	.+10     	; 0x1a02 <vfprintf+0x78>
    19f8:	b6 01       	movw	r22, r12
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <fputc>
    1a00:	e7 cf       	rjmp	.-50     	; 0x19d0 <vfprintf+0x46>
    1a02:	91 2c       	mov	r9, r1
    1a04:	21 2c       	mov	r2, r1
    1a06:	31 2c       	mov	r3, r1
    1a08:	ff e1       	ldi	r31, 0x1F	; 31
    1a0a:	f3 15       	cp	r31, r3
    1a0c:	d8 f0       	brcs	.+54     	; 0x1a44 <vfprintf+0xba>
    1a0e:	8b 32       	cpi	r24, 0x2B	; 43
    1a10:	79 f0       	breq	.+30     	; 0x1a30 <vfprintf+0xa6>
    1a12:	38 f4       	brcc	.+14     	; 0x1a22 <vfprintf+0x98>
    1a14:	80 32       	cpi	r24, 0x20	; 32
    1a16:	79 f0       	breq	.+30     	; 0x1a36 <vfprintf+0xac>
    1a18:	83 32       	cpi	r24, 0x23	; 35
    1a1a:	a1 f4       	brne	.+40     	; 0x1a44 <vfprintf+0xba>
    1a1c:	23 2d       	mov	r18, r3
    1a1e:	20 61       	ori	r18, 0x10	; 16
    1a20:	1d c0       	rjmp	.+58     	; 0x1a5c <vfprintf+0xd2>
    1a22:	8d 32       	cpi	r24, 0x2D	; 45
    1a24:	61 f0       	breq	.+24     	; 0x1a3e <vfprintf+0xb4>
    1a26:	80 33       	cpi	r24, 0x30	; 48
    1a28:	69 f4       	brne	.+26     	; 0x1a44 <vfprintf+0xba>
    1a2a:	23 2d       	mov	r18, r3
    1a2c:	21 60       	ori	r18, 0x01	; 1
    1a2e:	16 c0       	rjmp	.+44     	; 0x1a5c <vfprintf+0xd2>
    1a30:	83 2d       	mov	r24, r3
    1a32:	82 60       	ori	r24, 0x02	; 2
    1a34:	38 2e       	mov	r3, r24
    1a36:	e3 2d       	mov	r30, r3
    1a38:	e4 60       	ori	r30, 0x04	; 4
    1a3a:	3e 2e       	mov	r3, r30
    1a3c:	2a c0       	rjmp	.+84     	; 0x1a92 <vfprintf+0x108>
    1a3e:	f3 2d       	mov	r31, r3
    1a40:	f8 60       	ori	r31, 0x08	; 8
    1a42:	1d c0       	rjmp	.+58     	; 0x1a7e <vfprintf+0xf4>
    1a44:	37 fc       	sbrc	r3, 7
    1a46:	2d c0       	rjmp	.+90     	; 0x1aa2 <vfprintf+0x118>
    1a48:	20 ed       	ldi	r18, 0xD0	; 208
    1a4a:	28 0f       	add	r18, r24
    1a4c:	2a 30       	cpi	r18, 0x0A	; 10
    1a4e:	40 f0       	brcs	.+16     	; 0x1a60 <vfprintf+0xd6>
    1a50:	8e 32       	cpi	r24, 0x2E	; 46
    1a52:	b9 f4       	brne	.+46     	; 0x1a82 <vfprintf+0xf8>
    1a54:	36 fc       	sbrc	r3, 6
    1a56:	81 c1       	rjmp	.+770    	; 0x1d5a <vfprintf+0x3d0>
    1a58:	23 2d       	mov	r18, r3
    1a5a:	20 64       	ori	r18, 0x40	; 64
    1a5c:	32 2e       	mov	r3, r18
    1a5e:	19 c0       	rjmp	.+50     	; 0x1a92 <vfprintf+0x108>
    1a60:	36 fe       	sbrs	r3, 6
    1a62:	06 c0       	rjmp	.+12     	; 0x1a70 <vfprintf+0xe6>
    1a64:	8a e0       	ldi	r24, 0x0A	; 10
    1a66:	98 9e       	mul	r9, r24
    1a68:	20 0d       	add	r18, r0
    1a6a:	11 24       	eor	r1, r1
    1a6c:	92 2e       	mov	r9, r18
    1a6e:	11 c0       	rjmp	.+34     	; 0x1a92 <vfprintf+0x108>
    1a70:	ea e0       	ldi	r30, 0x0A	; 10
    1a72:	2e 9e       	mul	r2, r30
    1a74:	20 0d       	add	r18, r0
    1a76:	11 24       	eor	r1, r1
    1a78:	22 2e       	mov	r2, r18
    1a7a:	f3 2d       	mov	r31, r3
    1a7c:	f0 62       	ori	r31, 0x20	; 32
    1a7e:	3f 2e       	mov	r3, r31
    1a80:	08 c0       	rjmp	.+16     	; 0x1a92 <vfprintf+0x108>
    1a82:	8c 36       	cpi	r24, 0x6C	; 108
    1a84:	21 f4       	brne	.+8      	; 0x1a8e <vfprintf+0x104>
    1a86:	83 2d       	mov	r24, r3
    1a88:	80 68       	ori	r24, 0x80	; 128
    1a8a:	38 2e       	mov	r3, r24
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <vfprintf+0x108>
    1a8e:	88 36       	cpi	r24, 0x68	; 104
    1a90:	41 f4       	brne	.+16     	; 0x1aa2 <vfprintf+0x118>
    1a92:	f7 01       	movw	r30, r14
    1a94:	93 fd       	sbrc	r25, 3
    1a96:	85 91       	lpm	r24, Z+
    1a98:	93 ff       	sbrs	r25, 3
    1a9a:	81 91       	ld	r24, Z+
    1a9c:	7f 01       	movw	r14, r30
    1a9e:	81 11       	cpse	r24, r1
    1aa0:	b3 cf       	rjmp	.-154    	; 0x1a08 <vfprintf+0x7e>
    1aa2:	98 2f       	mov	r25, r24
    1aa4:	9f 7d       	andi	r25, 0xDF	; 223
    1aa6:	95 54       	subi	r25, 0x45	; 69
    1aa8:	93 30       	cpi	r25, 0x03	; 3
    1aaa:	28 f4       	brcc	.+10     	; 0x1ab6 <vfprintf+0x12c>
    1aac:	0c 5f       	subi	r16, 0xFC	; 252
    1aae:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab0:	9f e3       	ldi	r25, 0x3F	; 63
    1ab2:	99 83       	std	Y+1, r25	; 0x01
    1ab4:	0d c0       	rjmp	.+26     	; 0x1ad0 <vfprintf+0x146>
    1ab6:	83 36       	cpi	r24, 0x63	; 99
    1ab8:	31 f0       	breq	.+12     	; 0x1ac6 <vfprintf+0x13c>
    1aba:	83 37       	cpi	r24, 0x73	; 115
    1abc:	71 f0       	breq	.+28     	; 0x1ada <vfprintf+0x150>
    1abe:	83 35       	cpi	r24, 0x53	; 83
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <vfprintf+0x13a>
    1ac2:	59 c0       	rjmp	.+178    	; 0x1b76 <vfprintf+0x1ec>
    1ac4:	21 c0       	rjmp	.+66     	; 0x1b08 <vfprintf+0x17e>
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	80 81       	ld	r24, Z
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	0e 5f       	subi	r16, 0xFE	; 254
    1ace:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad0:	88 24       	eor	r8, r8
    1ad2:	83 94       	inc	r8
    1ad4:	91 2c       	mov	r9, r1
    1ad6:	53 01       	movw	r10, r6
    1ad8:	13 c0       	rjmp	.+38     	; 0x1b00 <vfprintf+0x176>
    1ada:	28 01       	movw	r4, r16
    1adc:	f2 e0       	ldi	r31, 0x02	; 2
    1ade:	4f 0e       	add	r4, r31
    1ae0:	51 1c       	adc	r5, r1
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	a0 80       	ld	r10, Z
    1ae6:	b1 80       	ldd	r11, Z+1	; 0x01
    1ae8:	36 fe       	sbrs	r3, 6
    1aea:	03 c0       	rjmp	.+6      	; 0x1af2 <vfprintf+0x168>
    1aec:	69 2d       	mov	r22, r9
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <vfprintf+0x16c>
    1af2:	6f ef       	ldi	r22, 0xFF	; 255
    1af4:	7f ef       	ldi	r23, 0xFF	; 255
    1af6:	c5 01       	movw	r24, r10
    1af8:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <strnlen>
    1afc:	4c 01       	movw	r8, r24
    1afe:	82 01       	movw	r16, r4
    1b00:	f3 2d       	mov	r31, r3
    1b02:	ff 77       	andi	r31, 0x7F	; 127
    1b04:	3f 2e       	mov	r3, r31
    1b06:	16 c0       	rjmp	.+44     	; 0x1b34 <vfprintf+0x1aa>
    1b08:	28 01       	movw	r4, r16
    1b0a:	22 e0       	ldi	r18, 0x02	; 2
    1b0c:	42 0e       	add	r4, r18
    1b0e:	51 1c       	adc	r5, r1
    1b10:	f8 01       	movw	r30, r16
    1b12:	a0 80       	ld	r10, Z
    1b14:	b1 80       	ldd	r11, Z+1	; 0x01
    1b16:	36 fe       	sbrs	r3, 6
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <vfprintf+0x196>
    1b1a:	69 2d       	mov	r22, r9
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <vfprintf+0x19a>
    1b20:	6f ef       	ldi	r22, 0xFF	; 255
    1b22:	7f ef       	ldi	r23, 0xFF	; 255
    1b24:	c5 01       	movw	r24, r10
    1b26:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <strnlen_P>
    1b2a:	4c 01       	movw	r8, r24
    1b2c:	f3 2d       	mov	r31, r3
    1b2e:	f0 68       	ori	r31, 0x80	; 128
    1b30:	3f 2e       	mov	r3, r31
    1b32:	82 01       	movw	r16, r4
    1b34:	33 fc       	sbrc	r3, 3
    1b36:	1b c0       	rjmp	.+54     	; 0x1b6e <vfprintf+0x1e4>
    1b38:	82 2d       	mov	r24, r2
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	88 16       	cp	r8, r24
    1b3e:	99 06       	cpc	r9, r25
    1b40:	b0 f4       	brcc	.+44     	; 0x1b6e <vfprintf+0x1e4>
    1b42:	b6 01       	movw	r22, r12
    1b44:	80 e2       	ldi	r24, 0x20	; 32
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <fputc>
    1b4c:	2a 94       	dec	r2
    1b4e:	f4 cf       	rjmp	.-24     	; 0x1b38 <vfprintf+0x1ae>
    1b50:	f5 01       	movw	r30, r10
    1b52:	37 fc       	sbrc	r3, 7
    1b54:	85 91       	lpm	r24, Z+
    1b56:	37 fe       	sbrs	r3, 7
    1b58:	81 91       	ld	r24, Z+
    1b5a:	5f 01       	movw	r10, r30
    1b5c:	b6 01       	movw	r22, r12
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <fputc>
    1b64:	21 10       	cpse	r2, r1
    1b66:	2a 94       	dec	r2
    1b68:	21 e0       	ldi	r18, 0x01	; 1
    1b6a:	82 1a       	sub	r8, r18
    1b6c:	91 08       	sbc	r9, r1
    1b6e:	81 14       	cp	r8, r1
    1b70:	91 04       	cpc	r9, r1
    1b72:	71 f7       	brne	.-36     	; 0x1b50 <vfprintf+0x1c6>
    1b74:	e8 c0       	rjmp	.+464    	; 0x1d46 <vfprintf+0x3bc>
    1b76:	84 36       	cpi	r24, 0x64	; 100
    1b78:	11 f0       	breq	.+4      	; 0x1b7e <vfprintf+0x1f4>
    1b7a:	89 36       	cpi	r24, 0x69	; 105
    1b7c:	41 f5       	brne	.+80     	; 0x1bce <vfprintf+0x244>
    1b7e:	f8 01       	movw	r30, r16
    1b80:	37 fe       	sbrs	r3, 7
    1b82:	07 c0       	rjmp	.+14     	; 0x1b92 <vfprintf+0x208>
    1b84:	60 81       	ld	r22, Z
    1b86:	71 81       	ldd	r23, Z+1	; 0x01
    1b88:	82 81       	ldd	r24, Z+2	; 0x02
    1b8a:	93 81       	ldd	r25, Z+3	; 0x03
    1b8c:	0c 5f       	subi	r16, 0xFC	; 252
    1b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b90:	08 c0       	rjmp	.+16     	; 0x1ba2 <vfprintf+0x218>
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	07 2e       	mov	r0, r23
    1b98:	00 0c       	add	r0, r0
    1b9a:	88 0b       	sbc	r24, r24
    1b9c:	99 0b       	sbc	r25, r25
    1b9e:	0e 5f       	subi	r16, 0xFE	; 254
    1ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba2:	f3 2d       	mov	r31, r3
    1ba4:	ff 76       	andi	r31, 0x6F	; 111
    1ba6:	3f 2e       	mov	r3, r31
    1ba8:	97 ff       	sbrs	r25, 7
    1baa:	09 c0       	rjmp	.+18     	; 0x1bbe <vfprintf+0x234>
    1bac:	90 95       	com	r25
    1bae:	80 95       	com	r24
    1bb0:	70 95       	com	r23
    1bb2:	61 95       	neg	r22
    1bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bba:	f0 68       	ori	r31, 0x80	; 128
    1bbc:	3f 2e       	mov	r3, r31
    1bbe:	2a e0       	ldi	r18, 0x0A	; 10
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	a3 01       	movw	r20, r6
    1bc4:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__ultoa_invert>
    1bc8:	88 2e       	mov	r8, r24
    1bca:	86 18       	sub	r8, r6
    1bcc:	45 c0       	rjmp	.+138    	; 0x1c58 <vfprintf+0x2ce>
    1bce:	85 37       	cpi	r24, 0x75	; 117
    1bd0:	31 f4       	brne	.+12     	; 0x1bde <vfprintf+0x254>
    1bd2:	23 2d       	mov	r18, r3
    1bd4:	2f 7e       	andi	r18, 0xEF	; 239
    1bd6:	b2 2e       	mov	r11, r18
    1bd8:	2a e0       	ldi	r18, 0x0A	; 10
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	25 c0       	rjmp	.+74     	; 0x1c28 <vfprintf+0x29e>
    1bde:	93 2d       	mov	r25, r3
    1be0:	99 7f       	andi	r25, 0xF9	; 249
    1be2:	b9 2e       	mov	r11, r25
    1be4:	8f 36       	cpi	r24, 0x6F	; 111
    1be6:	c1 f0       	breq	.+48     	; 0x1c18 <vfprintf+0x28e>
    1be8:	18 f4       	brcc	.+6      	; 0x1bf0 <vfprintf+0x266>
    1bea:	88 35       	cpi	r24, 0x58	; 88
    1bec:	79 f0       	breq	.+30     	; 0x1c0c <vfprintf+0x282>
    1bee:	b5 c0       	rjmp	.+362    	; 0x1d5a <vfprintf+0x3d0>
    1bf0:	80 37       	cpi	r24, 0x70	; 112
    1bf2:	19 f0       	breq	.+6      	; 0x1bfa <vfprintf+0x270>
    1bf4:	88 37       	cpi	r24, 0x78	; 120
    1bf6:	21 f0       	breq	.+8      	; 0x1c00 <vfprintf+0x276>
    1bf8:	b0 c0       	rjmp	.+352    	; 0x1d5a <vfprintf+0x3d0>
    1bfa:	e9 2f       	mov	r30, r25
    1bfc:	e0 61       	ori	r30, 0x10	; 16
    1bfe:	be 2e       	mov	r11, r30
    1c00:	b4 fe       	sbrs	r11, 4
    1c02:	0d c0       	rjmp	.+26     	; 0x1c1e <vfprintf+0x294>
    1c04:	fb 2d       	mov	r31, r11
    1c06:	f4 60       	ori	r31, 0x04	; 4
    1c08:	bf 2e       	mov	r11, r31
    1c0a:	09 c0       	rjmp	.+18     	; 0x1c1e <vfprintf+0x294>
    1c0c:	34 fe       	sbrs	r3, 4
    1c0e:	0a c0       	rjmp	.+20     	; 0x1c24 <vfprintf+0x29a>
    1c10:	29 2f       	mov	r18, r25
    1c12:	26 60       	ori	r18, 0x06	; 6
    1c14:	b2 2e       	mov	r11, r18
    1c16:	06 c0       	rjmp	.+12     	; 0x1c24 <vfprintf+0x29a>
    1c18:	28 e0       	ldi	r18, 0x08	; 8
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	05 c0       	rjmp	.+10     	; 0x1c28 <vfprintf+0x29e>
    1c1e:	20 e1       	ldi	r18, 0x10	; 16
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <vfprintf+0x29e>
    1c24:	20 e1       	ldi	r18, 0x10	; 16
    1c26:	32 e0       	ldi	r19, 0x02	; 2
    1c28:	f8 01       	movw	r30, r16
    1c2a:	b7 fe       	sbrs	r11, 7
    1c2c:	07 c0       	rjmp	.+14     	; 0x1c3c <vfprintf+0x2b2>
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	0c 5f       	subi	r16, 0xFC	; 252
    1c38:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3a:	06 c0       	rjmp	.+12     	; 0x1c48 <vfprintf+0x2be>
    1c3c:	60 81       	ld	r22, Z
    1c3e:	71 81       	ldd	r23, Z+1	; 0x01
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 5f       	subi	r16, 0xFE	; 254
    1c46:	1f 4f       	sbci	r17, 0xFF	; 255
    1c48:	a3 01       	movw	r20, r6
    1c4a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__ultoa_invert>
    1c4e:	88 2e       	mov	r8, r24
    1c50:	86 18       	sub	r8, r6
    1c52:	fb 2d       	mov	r31, r11
    1c54:	ff 77       	andi	r31, 0x7F	; 127
    1c56:	3f 2e       	mov	r3, r31
    1c58:	36 fe       	sbrs	r3, 6
    1c5a:	0d c0       	rjmp	.+26     	; 0x1c76 <vfprintf+0x2ec>
    1c5c:	23 2d       	mov	r18, r3
    1c5e:	2e 7f       	andi	r18, 0xFE	; 254
    1c60:	a2 2e       	mov	r10, r18
    1c62:	89 14       	cp	r8, r9
    1c64:	58 f4       	brcc	.+22     	; 0x1c7c <vfprintf+0x2f2>
    1c66:	34 fe       	sbrs	r3, 4
    1c68:	0b c0       	rjmp	.+22     	; 0x1c80 <vfprintf+0x2f6>
    1c6a:	32 fc       	sbrc	r3, 2
    1c6c:	09 c0       	rjmp	.+18     	; 0x1c80 <vfprintf+0x2f6>
    1c6e:	83 2d       	mov	r24, r3
    1c70:	8e 7e       	andi	r24, 0xEE	; 238
    1c72:	a8 2e       	mov	r10, r24
    1c74:	05 c0       	rjmp	.+10     	; 0x1c80 <vfprintf+0x2f6>
    1c76:	b8 2c       	mov	r11, r8
    1c78:	a3 2c       	mov	r10, r3
    1c7a:	03 c0       	rjmp	.+6      	; 0x1c82 <vfprintf+0x2f8>
    1c7c:	b8 2c       	mov	r11, r8
    1c7e:	01 c0       	rjmp	.+2      	; 0x1c82 <vfprintf+0x2f8>
    1c80:	b9 2c       	mov	r11, r9
    1c82:	a4 fe       	sbrs	r10, 4
    1c84:	0f c0       	rjmp	.+30     	; 0x1ca4 <vfprintf+0x31a>
    1c86:	fe 01       	movw	r30, r28
    1c88:	e8 0d       	add	r30, r8
    1c8a:	f1 1d       	adc	r31, r1
    1c8c:	80 81       	ld	r24, Z
    1c8e:	80 33       	cpi	r24, 0x30	; 48
    1c90:	21 f4       	brne	.+8      	; 0x1c9a <vfprintf+0x310>
    1c92:	9a 2d       	mov	r25, r10
    1c94:	99 7e       	andi	r25, 0xE9	; 233
    1c96:	a9 2e       	mov	r10, r25
    1c98:	09 c0       	rjmp	.+18     	; 0x1cac <vfprintf+0x322>
    1c9a:	a2 fe       	sbrs	r10, 2
    1c9c:	06 c0       	rjmp	.+12     	; 0x1caa <vfprintf+0x320>
    1c9e:	b3 94       	inc	r11
    1ca0:	b3 94       	inc	r11
    1ca2:	04 c0       	rjmp	.+8      	; 0x1cac <vfprintf+0x322>
    1ca4:	8a 2d       	mov	r24, r10
    1ca6:	86 78       	andi	r24, 0x86	; 134
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <vfprintf+0x322>
    1caa:	b3 94       	inc	r11
    1cac:	a3 fc       	sbrc	r10, 3
    1cae:	11 c0       	rjmp	.+34     	; 0x1cd2 <vfprintf+0x348>
    1cb0:	a0 fe       	sbrs	r10, 0
    1cb2:	06 c0       	rjmp	.+12     	; 0x1cc0 <vfprintf+0x336>
    1cb4:	b2 14       	cp	r11, r2
    1cb6:	88 f4       	brcc	.+34     	; 0x1cda <vfprintf+0x350>
    1cb8:	28 0c       	add	r2, r8
    1cba:	92 2c       	mov	r9, r2
    1cbc:	9b 18       	sub	r9, r11
    1cbe:	0e c0       	rjmp	.+28     	; 0x1cdc <vfprintf+0x352>
    1cc0:	b2 14       	cp	r11, r2
    1cc2:	60 f4       	brcc	.+24     	; 0x1cdc <vfprintf+0x352>
    1cc4:	b6 01       	movw	r22, r12
    1cc6:	80 e2       	ldi	r24, 0x20	; 32
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <fputc>
    1cce:	b3 94       	inc	r11
    1cd0:	f7 cf       	rjmp	.-18     	; 0x1cc0 <vfprintf+0x336>
    1cd2:	b2 14       	cp	r11, r2
    1cd4:	18 f4       	brcc	.+6      	; 0x1cdc <vfprintf+0x352>
    1cd6:	2b 18       	sub	r2, r11
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <vfprintf+0x354>
    1cda:	98 2c       	mov	r9, r8
    1cdc:	21 2c       	mov	r2, r1
    1cde:	a4 fe       	sbrs	r10, 4
    1ce0:	10 c0       	rjmp	.+32     	; 0x1d02 <vfprintf+0x378>
    1ce2:	b6 01       	movw	r22, r12
    1ce4:	80 e3       	ldi	r24, 0x30	; 48
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <fputc>
    1cec:	a2 fe       	sbrs	r10, 2
    1cee:	17 c0       	rjmp	.+46     	; 0x1d1e <vfprintf+0x394>
    1cf0:	a1 fc       	sbrc	r10, 1
    1cf2:	03 c0       	rjmp	.+6      	; 0x1cfa <vfprintf+0x370>
    1cf4:	88 e7       	ldi	r24, 0x78	; 120
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <vfprintf+0x374>
    1cfa:	88 e5       	ldi	r24, 0x58	; 88
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	b6 01       	movw	r22, r12
    1d00:	0c c0       	rjmp	.+24     	; 0x1d1a <vfprintf+0x390>
    1d02:	8a 2d       	mov	r24, r10
    1d04:	86 78       	andi	r24, 0x86	; 134
    1d06:	59 f0       	breq	.+22     	; 0x1d1e <vfprintf+0x394>
    1d08:	a1 fe       	sbrs	r10, 1
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <vfprintf+0x386>
    1d0c:	8b e2       	ldi	r24, 0x2B	; 43
    1d0e:	01 c0       	rjmp	.+2      	; 0x1d12 <vfprintf+0x388>
    1d10:	80 e2       	ldi	r24, 0x20	; 32
    1d12:	a7 fc       	sbrc	r10, 7
    1d14:	8d e2       	ldi	r24, 0x2D	; 45
    1d16:	b6 01       	movw	r22, r12
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <fputc>
    1d1e:	89 14       	cp	r8, r9
    1d20:	38 f4       	brcc	.+14     	; 0x1d30 <vfprintf+0x3a6>
    1d22:	b6 01       	movw	r22, r12
    1d24:	80 e3       	ldi	r24, 0x30	; 48
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <fputc>
    1d2c:	9a 94       	dec	r9
    1d2e:	f7 cf       	rjmp	.-18     	; 0x1d1e <vfprintf+0x394>
    1d30:	8a 94       	dec	r8
    1d32:	f3 01       	movw	r30, r6
    1d34:	e8 0d       	add	r30, r8
    1d36:	f1 1d       	adc	r31, r1
    1d38:	80 81       	ld	r24, Z
    1d3a:	b6 01       	movw	r22, r12
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <fputc>
    1d42:	81 10       	cpse	r8, r1
    1d44:	f5 cf       	rjmp	.-22     	; 0x1d30 <vfprintf+0x3a6>
    1d46:	22 20       	and	r2, r2
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <vfprintf+0x3c2>
    1d4a:	42 ce       	rjmp	.-892    	; 0x19d0 <vfprintf+0x46>
    1d4c:	b6 01       	movw	r22, r12
    1d4e:	80 e2       	ldi	r24, 0x20	; 32
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <fputc>
    1d56:	2a 94       	dec	r2
    1d58:	f6 cf       	rjmp	.-20     	; 0x1d46 <vfprintf+0x3bc>
    1d5a:	f6 01       	movw	r30, r12
    1d5c:	86 81       	ldd	r24, Z+6	; 0x06
    1d5e:	97 81       	ldd	r25, Z+7	; 0x07
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <vfprintf+0x3dc>
    1d62:	8f ef       	ldi	r24, 0xFF	; 255
    1d64:	9f ef       	ldi	r25, 0xFF	; 255
    1d66:	2b 96       	adiw	r28, 0x0b	; 11
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	df 91       	pop	r29
    1d6e:	cf 91       	pop	r28
    1d70:	1f 91       	pop	r17
    1d72:	0f 91       	pop	r16
    1d74:	ff 90       	pop	r15
    1d76:	ef 90       	pop	r14
    1d78:	df 90       	pop	r13
    1d7a:	cf 90       	pop	r12
    1d7c:	bf 90       	pop	r11
    1d7e:	af 90       	pop	r10
    1d80:	9f 90       	pop	r9
    1d82:	8f 90       	pop	r8
    1d84:	7f 90       	pop	r7
    1d86:	6f 90       	pop	r6
    1d88:	5f 90       	pop	r5
    1d8a:	4f 90       	pop	r4
    1d8c:	3f 90       	pop	r3
    1d8e:	2f 90       	pop	r2
    1d90:	08 95       	ret

00001d92 <strnlen_P>:
    1d92:	fc 01       	movw	r30, r24
    1d94:	05 90       	lpm	r0, Z+
    1d96:	61 50       	subi	r22, 0x01	; 1
    1d98:	70 40       	sbci	r23, 0x00	; 0
    1d9a:	01 10       	cpse	r0, r1
    1d9c:	d8 f7       	brcc	.-10     	; 0x1d94 <strnlen_P+0x2>
    1d9e:	80 95       	com	r24
    1da0:	90 95       	com	r25
    1da2:	8e 0f       	add	r24, r30
    1da4:	9f 1f       	adc	r25, r31
    1da6:	08 95       	ret

00001da8 <strnlen>:
    1da8:	fc 01       	movw	r30, r24
    1daa:	61 50       	subi	r22, 0x01	; 1
    1dac:	70 40       	sbci	r23, 0x00	; 0
    1dae:	01 90       	ld	r0, Z+
    1db0:	01 10       	cpse	r0, r1
    1db2:	d8 f7       	brcc	.-10     	; 0x1daa <strnlen+0x2>
    1db4:	80 95       	com	r24
    1db6:	90 95       	com	r25
    1db8:	8e 0f       	add	r24, r30
    1dba:	9f 1f       	adc	r25, r31
    1dbc:	08 95       	ret

00001dbe <fputc>:
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	fb 01       	movw	r30, r22
    1dc8:	23 81       	ldd	r18, Z+3	; 0x03
    1dca:	21 fd       	sbrc	r18, 1
    1dcc:	03 c0       	rjmp	.+6      	; 0x1dd4 <fputc+0x16>
    1dce:	8f ef       	ldi	r24, 0xFF	; 255
    1dd0:	9f ef       	ldi	r25, 0xFF	; 255
    1dd2:	2c c0       	rjmp	.+88     	; 0x1e2c <fputc+0x6e>
    1dd4:	22 ff       	sbrs	r18, 2
    1dd6:	16 c0       	rjmp	.+44     	; 0x1e04 <fputc+0x46>
    1dd8:	46 81       	ldd	r20, Z+6	; 0x06
    1dda:	57 81       	ldd	r21, Z+7	; 0x07
    1ddc:	24 81       	ldd	r18, Z+4	; 0x04
    1dde:	35 81       	ldd	r19, Z+5	; 0x05
    1de0:	42 17       	cp	r20, r18
    1de2:	53 07       	cpc	r21, r19
    1de4:	44 f4       	brge	.+16     	; 0x1df6 <fputc+0x38>
    1de6:	a0 81       	ld	r26, Z
    1de8:	b1 81       	ldd	r27, Z+1	; 0x01
    1dea:	9d 01       	movw	r18, r26
    1dec:	2f 5f       	subi	r18, 0xFF	; 255
    1dee:	3f 4f       	sbci	r19, 0xFF	; 255
    1df0:	20 83       	st	Z, r18
    1df2:	31 83       	std	Z+1, r19	; 0x01
    1df4:	8c 93       	st	X, r24
    1df6:	26 81       	ldd	r18, Z+6	; 0x06
    1df8:	37 81       	ldd	r19, Z+7	; 0x07
    1dfa:	2f 5f       	subi	r18, 0xFF	; 255
    1dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfe:	26 83       	std	Z+6, r18	; 0x06
    1e00:	37 83       	std	Z+7, r19	; 0x07
    1e02:	14 c0       	rjmp	.+40     	; 0x1e2c <fputc+0x6e>
    1e04:	8b 01       	movw	r16, r22
    1e06:	ec 01       	movw	r28, r24
    1e08:	fb 01       	movw	r30, r22
    1e0a:	00 84       	ldd	r0, Z+8	; 0x08
    1e0c:	f1 85       	ldd	r31, Z+9	; 0x09
    1e0e:	e0 2d       	mov	r30, r0
    1e10:	09 95       	icall
    1e12:	89 2b       	or	r24, r25
    1e14:	e1 f6       	brne	.-72     	; 0x1dce <fputc+0x10>
    1e16:	d8 01       	movw	r26, r16
    1e18:	16 96       	adiw	r26, 0x06	; 6
    1e1a:	8d 91       	ld	r24, X+
    1e1c:	9c 91       	ld	r25, X
    1e1e:	17 97       	sbiw	r26, 0x07	; 7
    1e20:	01 96       	adiw	r24, 0x01	; 1
    1e22:	16 96       	adiw	r26, 0x06	; 6
    1e24:	8d 93       	st	X+, r24
    1e26:	9c 93       	st	X, r25
    1e28:	17 97       	sbiw	r26, 0x07	; 7
    1e2a:	ce 01       	movw	r24, r28
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	08 95       	ret

00001e36 <__ultoa_invert>:
    1e36:	fa 01       	movw	r30, r20
    1e38:	aa 27       	eor	r26, r26
    1e3a:	28 30       	cpi	r18, 0x08	; 8
    1e3c:	51 f1       	breq	.+84     	; 0x1e92 <__ultoa_invert+0x5c>
    1e3e:	20 31       	cpi	r18, 0x10	; 16
    1e40:	81 f1       	breq	.+96     	; 0x1ea2 <__ultoa_invert+0x6c>
    1e42:	e8 94       	clt
    1e44:	6f 93       	push	r22
    1e46:	6e 7f       	andi	r22, 0xFE	; 254
    1e48:	6e 5f       	subi	r22, 0xFE	; 254
    1e4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e50:	af 4f       	sbci	r26, 0xFF	; 255
    1e52:	b1 e0       	ldi	r27, 0x01	; 1
    1e54:	3e d0       	rcall	.+124    	; 0x1ed2 <__ultoa_invert+0x9c>
    1e56:	b4 e0       	ldi	r27, 0x04	; 4
    1e58:	3c d0       	rcall	.+120    	; 0x1ed2 <__ultoa_invert+0x9c>
    1e5a:	67 0f       	add	r22, r23
    1e5c:	78 1f       	adc	r23, r24
    1e5e:	89 1f       	adc	r24, r25
    1e60:	9a 1f       	adc	r25, r26
    1e62:	a1 1d       	adc	r26, r1
    1e64:	68 0f       	add	r22, r24
    1e66:	79 1f       	adc	r23, r25
    1e68:	8a 1f       	adc	r24, r26
    1e6a:	91 1d       	adc	r25, r1
    1e6c:	a1 1d       	adc	r26, r1
    1e6e:	6a 0f       	add	r22, r26
    1e70:	71 1d       	adc	r23, r1
    1e72:	81 1d       	adc	r24, r1
    1e74:	91 1d       	adc	r25, r1
    1e76:	a1 1d       	adc	r26, r1
    1e78:	20 d0       	rcall	.+64     	; 0x1eba <__ultoa_invert+0x84>
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <__ultoa_invert+0x48>
    1e7c:	68 94       	set
    1e7e:	3f 91       	pop	r19
    1e80:	2a e0       	ldi	r18, 0x0A	; 10
    1e82:	26 9f       	mul	r18, r22
    1e84:	11 24       	eor	r1, r1
    1e86:	30 19       	sub	r19, r0
    1e88:	30 5d       	subi	r19, 0xD0	; 208
    1e8a:	31 93       	st	Z+, r19
    1e8c:	de f6       	brtc	.-74     	; 0x1e44 <__ultoa_invert+0xe>
    1e8e:	cf 01       	movw	r24, r30
    1e90:	08 95       	ret
    1e92:	46 2f       	mov	r20, r22
    1e94:	47 70       	andi	r20, 0x07	; 7
    1e96:	40 5d       	subi	r20, 0xD0	; 208
    1e98:	41 93       	st	Z+, r20
    1e9a:	b3 e0       	ldi	r27, 0x03	; 3
    1e9c:	0f d0       	rcall	.+30     	; 0x1ebc <__ultoa_invert+0x86>
    1e9e:	c9 f7       	brne	.-14     	; 0x1e92 <__ultoa_invert+0x5c>
    1ea0:	f6 cf       	rjmp	.-20     	; 0x1e8e <__ultoa_invert+0x58>
    1ea2:	46 2f       	mov	r20, r22
    1ea4:	4f 70       	andi	r20, 0x0F	; 15
    1ea6:	40 5d       	subi	r20, 0xD0	; 208
    1ea8:	4a 33       	cpi	r20, 0x3A	; 58
    1eaa:	18 f0       	brcs	.+6      	; 0x1eb2 <__ultoa_invert+0x7c>
    1eac:	49 5d       	subi	r20, 0xD9	; 217
    1eae:	31 fd       	sbrc	r19, 1
    1eb0:	40 52       	subi	r20, 0x20	; 32
    1eb2:	41 93       	st	Z+, r20
    1eb4:	02 d0       	rcall	.+4      	; 0x1eba <__ultoa_invert+0x84>
    1eb6:	a9 f7       	brne	.-22     	; 0x1ea2 <__ultoa_invert+0x6c>
    1eb8:	ea cf       	rjmp	.-44     	; 0x1e8e <__ultoa_invert+0x58>
    1eba:	b4 e0       	ldi	r27, 0x04	; 4
    1ebc:	a6 95       	lsr	r26
    1ebe:	97 95       	ror	r25
    1ec0:	87 95       	ror	r24
    1ec2:	77 95       	ror	r23
    1ec4:	67 95       	ror	r22
    1ec6:	ba 95       	dec	r27
    1ec8:	c9 f7       	brne	.-14     	; 0x1ebc <__ultoa_invert+0x86>
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	61 05       	cpc	r22, r1
    1ece:	71 05       	cpc	r23, r1
    1ed0:	08 95       	ret
    1ed2:	9b 01       	movw	r18, r22
    1ed4:	ac 01       	movw	r20, r24
    1ed6:	0a 2e       	mov	r0, r26
    1ed8:	06 94       	lsr	r0
    1eda:	57 95       	ror	r21
    1edc:	47 95       	ror	r20
    1ede:	37 95       	ror	r19
    1ee0:	27 95       	ror	r18
    1ee2:	ba 95       	dec	r27
    1ee4:	c9 f7       	brne	.-14     	; 0x1ed8 <__ultoa_invert+0xa2>
    1ee6:	62 0f       	add	r22, r18
    1ee8:	73 1f       	adc	r23, r19
    1eea:	84 1f       	adc	r24, r20
    1eec:	95 1f       	adc	r25, r21
    1eee:	a0 1d       	adc	r26, r0
    1ef0:	08 95       	ret

00001ef2 <_exit>:
    1ef2:	f8 94       	cli

00001ef4 <__stop_program>:
    1ef4:	ff cf       	rjmp	.-2      	; 0x1ef4 <__stop_program>
