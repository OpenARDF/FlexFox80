
FlexFox80.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00804000  00001ee2  00001f96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ee2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001d4  00804078  00804078  0000200e  2**0
                  ALLOC
  3 .eeprom       0000001f  00810000  00810000  0000200e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000208c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000550  00000000  00000000  000020d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009eee  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000044d4  00000000  00000000  0000c50e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000040f2  00000000  00000000  000109e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000efc  00000000  00000000  00014ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003fb3  00000000  00000000  000159d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004624  00000000  00000000  00019983  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000510  00000000  00000000  0001dfa7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_12>
      34:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__vector_13>
      38:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      60:	0c 94 90 04 	jmp	0x920	; 0x920 <__vector_24>
      64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      68:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      6c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      70:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      74:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      78:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_30>
      7c:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_31>
      80:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_32>
      84:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      88:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      8c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      90:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      94:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      98:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      9c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      a0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      a4:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_41>
      a8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      ac:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      b0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      b4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      b8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      bc:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      c0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      c4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      c8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      cc:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      d0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      d4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      d8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      dc:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      e0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      e4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      e8:	f1 07       	cpc	r31, r17
      ea:	b5 07       	cpc	r27, r21
      ec:	e1 07       	cpc	r30, r17
      ee:	f9 07       	cpc	r31, r25
      f0:	e5 07       	cpc	r30, r21
      f2:	f9 07       	cpc	r31, r25
      f4:	c5 07       	cpc	r28, r21
      f6:	b1 07       	cpc	r27, r17
      f8:	bd 07       	cpc	r27, r29
      fa:	c1 07       	cpc	r28, r17
      fc:	f9 07       	cpc	r31, r25
      fe:	d5 07       	cpc	r29, r21
     100:	a9 07       	cpc	r26, r25
     102:	d9 07       	cpc	r29, r25
     104:	a5 07       	cpc	r26, r21
     106:	b9 07       	cpc	r27, r25
     108:	7d 07       	cpc	r23, r29
     10a:	81 07       	cpc	r24, r17
     10c:	85 07       	cpc	r24, r21
     10e:	89 07       	cpc	r24, r25
     110:	8d 07       	cpc	r24, r29
     112:	91 07       	cpc	r25, r17
     114:	95 07       	cpc	r25, r21
     116:	99 07       	cpc	r25, r25
     118:	9d 07       	cpc	r25, r29
     11a:	a1 07       	cpc	r26, r17
     11c:	c9 07       	cpc	r28, r25
     11e:	cd 07       	cpc	r28, r29
     120:	f5 07       	cpc	r31, r21
     122:	d1 07       	cpc	r29, r17
     124:	f9 07       	cpc	r31, r25
     126:	ad 07       	cpc	r26, r29
     128:	e9 07       	cpc	r30, r25
     12a:	15 07       	cpc	r17, r21
     12c:	19 07       	cpc	r17, r25
     12e:	1d 07       	cpc	r17, r29
     130:	21 07       	cpc	r18, r17
     132:	25 07       	cpc	r18, r21
     134:	29 07       	cpc	r18, r25
     136:	2d 07       	cpc	r18, r29
     138:	31 07       	cpc	r19, r17
     13a:	35 07       	cpc	r19, r21
     13c:	39 07       	cpc	r19, r25
     13e:	3d 07       	cpc	r19, r29
     140:	41 07       	cpc	r20, r17
     142:	45 07       	cpc	r20, r21
     144:	49 07       	cpc	r20, r25
     146:	4d 07       	cpc	r20, r29
     148:	51 07       	cpc	r21, r17
     14a:	55 07       	cpc	r21, r21
     14c:	59 07       	cpc	r21, r25
     14e:	5d 07       	cpc	r21, r29
     150:	61 07       	cpc	r22, r17
     152:	65 07       	cpc	r22, r21
     154:	69 07       	cpc	r22, r25
     156:	6d 07       	cpc	r22, r29
     158:	71 07       	cpc	r23, r17
     15a:	75 07       	cpc	r23, r21
     15c:	79 07       	cpc	r23, r25
     15e:	f9 07       	cpc	r31, r25
     160:	f9 07       	cpc	r31, r25
     162:	f9 07       	cpc	r31, r25
     164:	f9 07       	cpc	r31, r25
     166:	dd 07       	cpc	r29, r29
     168:	f9 07       	cpc	r31, r25
     16a:	f9 07       	cpc	r31, r25
     16c:	f9 07       	cpc	r31, r25
     16e:	f9 07       	cpc	r31, r25
     170:	f9 07       	cpc	r31, r25
     172:	f9 07       	cpc	r31, r25
     174:	f9 07       	cpc	r31, r25
     176:	f9 07       	cpc	r31, r25
     178:	f9 07       	cpc	r31, r25
     17a:	f9 07       	cpc	r31, r25
     17c:	f9 07       	cpc	r31, r25
     17e:	f9 07       	cpc	r31, r25
     180:	f9 07       	cpc	r31, r25
     182:	f9 07       	cpc	r31, r25
     184:	f9 07       	cpc	r31, r25
     186:	f9 07       	cpc	r31, r25
     188:	f9 07       	cpc	r31, r25
     18a:	f9 07       	cpc	r31, r25
     18c:	f9 07       	cpc	r31, r25
     18e:	f9 07       	cpc	r31, r25
     190:	f9 07       	cpc	r31, r25
     192:	f9 07       	cpc	r31, r25
     194:	f9 07       	cpc	r31, r25
     196:	f9 07       	cpc	r31, r25
     198:	f9 07       	cpc	r31, r25
     19a:	f9 07       	cpc	r31, r25
     19c:	f9 07       	cpc	r31, r25
     19e:	f9 07       	cpc	r31, r25
     1a0:	ed 07       	cpc	r30, r29

000001a2 <__ctors_end>:
     1a2:	11 24       	eor	r1, r1
     1a4:	1f be       	out	0x3f, r1	; 63
     1a6:	cf ef       	ldi	r28, 0xFF	; 255
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	df e7       	ldi	r29, 0x7F	; 127
     1ac:	de bf       	out	0x3e, r29	; 62

000001ae <__do_copy_data>:
     1ae:	10 e4       	ldi	r17, 0x40	; 64
     1b0:	a0 e0       	ldi	r26, 0x00	; 0
     1b2:	b0 e4       	ldi	r27, 0x40	; 64
     1b4:	e2 ee       	ldi	r30, 0xE2	; 226
     1b6:	fe e1       	ldi	r31, 0x1E	; 30
     1b8:	00 e0       	ldi	r16, 0x00	; 0
     1ba:	0b bf       	out	0x3b, r16	; 59
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x14>
     1be:	07 90       	elpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	a8 37       	cpi	r26, 0x78	; 120
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0x10>

000001c8 <__do_clear_bss>:
     1c8:	22 e4       	ldi	r18, 0x42	; 66
     1ca:	a8 e7       	ldi	r26, 0x78	; 120
     1cc:	b0 e4       	ldi	r27, 0x40	; 64
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	ac 34       	cpi	r26, 0x4C	; 76
     1d4:	b2 07       	cpc	r27, r18
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
     1d8:	0e 94 16 04 	call	0x82c	; 0x82c <main>
     1dc:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     1e4:	0e 94 3f 05 	call	0xa7e	; 0xa7e <system_init>
     1e8:	08 95       	ret

000001ea <__vector_30>:
#include "include/usart_basic.h"
#include "include/morse.h"


ISR(TCB2_INT_vect)
{
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	8f 93       	push	r24
	if(TCB2.INTFLAGS & TCB_CAPT_bm)
     1f6:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
     1fa:	80 ff       	sbrs	r24, 0
     1fc:	03 c0       	rjmp	.+6      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
    {
        TCB2.INTFLAGS = TCB_CAPT_bm;
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    }
}
     204:	8f 91       	pop	r24
     206:	0f 90       	pop	r0
     208:	0f be       	out	0x3f, r0	; 63
     20a:	0f 90       	pop	r0
     20c:	1f 90       	pop	r1
     20e:	18 95       	reti

00000210 <__vector_31>:

/**

*/
ISR(USART1_RXC_vect)
{
     210:	1f 92       	push	r1
     212:	0f 92       	push	r0
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	0f 92       	push	r0
     218:	11 24       	eor	r1, r1
     21a:	0b b6       	in	r0, 0x3b	; 59
     21c:	0f 92       	push	r0
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	2f 93       	push	r18
     224:	3f 93       	push	r19
     226:	4f 93       	push	r20
     228:	5f 93       	push	r21
     22a:	6f 93       	push	r22
     22c:	7f 93       	push	r23
     22e:	8f 93       	push	r24
     230:	9f 93       	push	r25
     232:	af 93       	push	r26
     234:	bf 93       	push	r27
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	ef 93       	push	r30
     23c:	ff 93       	push	r31
	static uint8_t field_len = 0;
	static uint32_t msg_ID = 0;
	static BOOL receiving_msg = FALSE;
	uint8_t rx_char;

	rx_char = USART1_get_data();
     23e:	0e 94 75 0a 	call	0x14ea	; 0x14ea <USART1_get_data>
     242:	18 2f       	mov	r17, r24

	if(!buff)
     244:	80 91 83 40 	lds	r24, 0x4083	; 0x804083 <buff.4937>
     248:	90 91 84 40 	lds	r25, 0x4084	; 0x804084 <buff.4937+0x1>
     24c:	89 2b       	or	r24, r25
     24e:	31 f4       	brne	.+12     	; 0x25c <__vector_31+0x4c>
	{
		buff = nextEmptyRxBuffer();
     250:	0e 94 53 06 	call	0xca6	; 0xca6 <nextEmptyRxBuffer>
     254:	80 93 83 40 	sts	0x4083, r24	; 0x804083 <buff.4937>
     258:	90 93 84 40 	sts	0x4084, r25	; 0x804084 <buff.4937+0x1>
	}

	if(buff)
     25c:	c0 91 83 40 	lds	r28, 0x4083	; 0x804083 <buff.4937>
     260:	d0 91 84 40 	lds	r29, 0x4084	; 0x804084 <buff.4937+0x1>
     264:	20 97       	sbiw	r28, 0x00	; 0
     266:	09 f4       	brne	.+2      	; 0x26a <__vector_31+0x5a>
     268:	e3 c0       	rjmp	.+454    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	{
		rx_char = toupper(rx_char);
     26a:	81 2f       	mov	r24, r17
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <toupper>
//		SMCR = 0x00;                                /* exit power-down mode */

		if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
     272:	84 32       	cpi	r24, 0x24	; 36
     274:	11 f0       	breq	.+4      	; 0x27a <__vector_31+0x6a>
     276:	81 32       	cpi	r24, 0x21	; 33
     278:	49 f5       	brne	.+82     	; 0x2cc <__vector_31+0xbc>
		{
			charIndex = 0;
     27a:	10 92 82 40 	sts	0x4082, r1	; 0x804082 <charIndex.4938>
			buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
     27e:	81 32       	cpi	r24, 0x21	; 33
     280:	11 f4       	brne	.+4      	; 0x286 <__vector_31+0x76>
     282:	83 e0       	ldi	r24, 0x03	; 3
     284:	01 c0       	rjmp	.+2      	; 0x288 <__vector_31+0x78>
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	88 83       	st	Y, r24
			field_len = 0;
     28a:	10 92 81 40 	sts	0x4081, r1	; 0x804081 <field_len.4940>
			msg_ID = LINKBUS_MSG_UNKNOWN;
     28e:	10 92 7d 40 	sts	0x407D, r1	; 0x80407d <msg_ID.4941>
     292:	10 92 7e 40 	sts	0x407E, r1	; 0x80407e <msg_ID.4941+0x1>
     296:	10 92 7f 40 	sts	0x407F, r1	; 0x80407f <msg_ID.4941+0x2>
     29a:	10 92 80 40 	sts	0x4080, r1	; 0x804080 <msg_ID.4941+0x3>
			receiving_msg = TRUE;
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	80 93 7c 40 	sts	0x407C, r24	; 0x80407c <receiving_msg.4942>

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
     2a4:	10 92 7b 40 	sts	0x407B, r1	; 0x80407b <field_index.4939>
     2a8:	0a c0       	rjmp	.+20     	; 0x2be <__vector_31+0xae>
			{
				buff->fields[field_index][0] = '\0';
     2aa:	fe 01       	movw	r30, r28
     2ac:	05 e1       	ldi	r16, 0x15	; 21
     2ae:	80 9f       	mul	r24, r16
     2b0:	e0 0d       	add	r30, r0
     2b2:	f1 1d       	adc	r31, r1
     2b4:	11 24       	eor	r1, r1
     2b6:	13 82       	std	Z+3, r1	; 0x03
			field_len = 0;
			msg_ID = LINKBUS_MSG_UNKNOWN;
			receiving_msg = TRUE;

			/* Empty the field buffers */
			for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
     2b8:	8f 5f       	subi	r24, 0xFF	; 255
     2ba:	80 93 7b 40 	sts	0x407B, r24	; 0x80407b <field_index.4939>
     2be:	80 91 7b 40 	lds	r24, 0x407B	; 0x80407b <field_index.4939>
     2c2:	83 30       	cpi	r24, 0x03	; 3
     2c4:	90 f3       	brcs	.-28     	; 0x2aa <__vector_31+0x9a>
			{
				buff->fields[field_index][0] = '\0';
			}

			field_index = 0;
     2c6:	10 92 7b 40 	sts	0x407B, r1	; 0x80407b <field_index.4939>
     2ca:	a7 c0       	rjmp	.+334    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		}
		else if(receiving_msg)
     2cc:	90 91 7c 40 	lds	r25, 0x407C	; 0x80407c <receiving_msg.4942>
     2d0:	99 23       	and	r25, r25
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <__vector_31+0xc6>
     2d4:	8b c0       	rjmp	.+278    	; 0x3ec <__vector_31+0x1dc>
		{
			if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
     2d6:	8c 32       	cpi	r24, 0x2C	; 44
     2d8:	29 f0       	breq	.+10     	; 0x2e4 <__vector_31+0xd4>
     2da:	8b 33       	cpi	r24, 0x3B	; 59
     2dc:	19 f0       	breq	.+6      	; 0x2e4 <__vector_31+0xd4>
     2de:	8f 33       	cpi	r24, 0x3F	; 63
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <__vector_31+0xd4>
     2e2:	42 c0       	rjmp	.+132    	; 0x368 <__vector_31+0x158>
			{
				/* if(field_index == 0) // message ID received */
				if(field_index > 0)
     2e4:	90 91 7b 40 	lds	r25, 0x407B	; 0x80407b <field_index.4939>
     2e8:	99 23       	and	r25, r25
     2ea:	89 f0       	breq	.+34     	; 0x30e <__vector_31+0xfe>
				{
					buff->fields[field_index - 1][field_len] = 0;
     2ec:	29 2f       	mov	r18, r25
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	21 50       	subi	r18, 0x01	; 1
     2f2:	31 09       	sbc	r19, r1
     2f4:	40 91 81 40 	lds	r20, 0x4081	; 0x804081 <field_len.4940>
     2f8:	55 e1       	ldi	r21, 0x15	; 21
     2fa:	52 9f       	mul	r21, r18
     2fc:	f0 01       	movw	r30, r0
     2fe:	53 9f       	mul	r21, r19
     300:	f0 0d       	add	r31, r0
     302:	11 24       	eor	r1, r1
     304:	ec 0f       	add	r30, r28
     306:	fd 1f       	adc	r31, r29
     308:	e4 0f       	add	r30, r20
     30a:	f1 1d       	adc	r31, r1
     30c:	13 82       	std	Z+3, r1	; 0x03
				}

				field_index++;
     30e:	9f 5f       	subi	r25, 0xFF	; 255
     310:	90 93 7b 40 	sts	0x407B, r25	; 0x80407b <field_index.4939>
				field_len = 0;
     314:	10 92 81 40 	sts	0x4081, r1	; 0x804081 <field_len.4940>

				if(rx_char == ';')
     318:	8b 33       	cpi	r24, 0x3B	; 59
     31a:	69 f4       	brne	.+26     	; 0x336 <__vector_31+0x126>
				{
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
     31c:	80 91 82 40 	lds	r24, 0x4082	; 0x804082 <charIndex.4938>
     320:	84 30       	cpi	r24, 0x04	; 4
     322:	30 f0       	brcs	.+12     	; 0x330 <__vector_31+0x120>
					{
						buff->id = (LBMessageID)msg_ID;
     324:	80 91 7d 40 	lds	r24, 0x407D	; 0x80407d <msg_ID.4941>
     328:	90 91 7e 40 	lds	r25, 0x407E	; 0x80407e <msg_ID.4941+0x1>
     32c:	89 83       	std	Y+1, r24	; 0x01
     32e:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = FALSE;
     330:	10 92 7c 40 	sts	0x407C, r1	; 0x80407c <receiving_msg.4942>
     334:	10 c0       	rjmp	.+32     	; 0x356 <__vector_31+0x146>
				}
				else if(rx_char == '?')
     336:	8f 33       	cpi	r24, 0x3F	; 63
     338:	71 f4       	brne	.+28     	; 0x356 <__vector_31+0x146>
				{
					buff->type = LINKBUS_MSG_QUERY;
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	88 83       	st	Y, r24
					if(charIndex > LINKBUS_MIN_MSG_LENGTH)
     33e:	80 91 82 40 	lds	r24, 0x4082	; 0x804082 <charIndex.4938>
     342:	84 30       	cpi	r24, 0x04	; 4
     344:	30 f0       	brcs	.+12     	; 0x352 <__vector_31+0x142>
					{
						buff->id = msg_ID;
     346:	80 91 7d 40 	lds	r24, 0x407D	; 0x80407d <msg_ID.4941>
     34a:	90 91 7e 40 	lds	r25, 0x407E	; 0x80407e <msg_ID.4941+0x1>
     34e:	89 83       	std	Y+1, r24	; 0x01
     350:	9a 83       	std	Y+2, r25	; 0x02
					}
					receiving_msg = FALSE;
     352:	10 92 7c 40 	sts	0x407C, r1	; 0x80407c <receiving_msg.4942>
				}

				if(!receiving_msg)
     356:	80 91 7c 40 	lds	r24, 0x407C	; 0x80407c <receiving_msg.4942>
     35a:	81 11       	cpse	r24, r1
     35c:	5e c0       	rjmp	.+188    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				{
					buff = 0;
     35e:	10 92 83 40 	sts	0x4083, r1	; 0x804083 <buff.4937>
     362:	10 92 84 40 	sts	0x4084, r1	; 0x804084 <buff.4937+0x1>
     366:	59 c0       	rjmp	.+178    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				}
			}
			else
			{
				if(field_index == 0)    /* message ID received */
     368:	20 91 7b 40 	lds	r18, 0x407B	; 0x80407b <field_index.4939>
     36c:	21 11       	cpse	r18, r1
     36e:	29 c0       	rjmp	.+82     	; 0x3c2 <__vector_31+0x1b2>
				{
					msg_ID = msg_ID * 10 + rx_char;
     370:	40 91 7d 40 	lds	r20, 0x407D	; 0x80407d <msg_ID.4941>
     374:	50 91 7e 40 	lds	r21, 0x407E	; 0x80407e <msg_ID.4941+0x1>
     378:	60 91 7f 40 	lds	r22, 0x407F	; 0x80407f <msg_ID.4941+0x2>
     37c:	70 91 80 40 	lds	r23, 0x4080	; 0x804080 <msg_ID.4941+0x3>
     380:	44 0f       	add	r20, r20
     382:	55 1f       	adc	r21, r21
     384:	66 1f       	adc	r22, r22
     386:	77 1f       	adc	r23, r23
     388:	8a 01       	movw	r16, r20
     38a:	9b 01       	movw	r18, r22
     38c:	00 0f       	add	r16, r16
     38e:	11 1f       	adc	r17, r17
     390:	22 1f       	adc	r18, r18
     392:	33 1f       	adc	r19, r19
     394:	00 0f       	add	r16, r16
     396:	11 1f       	adc	r17, r17
     398:	22 1f       	adc	r18, r18
     39a:	33 1f       	adc	r19, r19
     39c:	40 0f       	add	r20, r16
     39e:	51 1f       	adc	r21, r17
     3a0:	62 1f       	adc	r22, r18
     3a2:	73 1f       	adc	r23, r19
     3a4:	8a 01       	movw	r16, r20
     3a6:	9b 01       	movw	r18, r22
     3a8:	08 0f       	add	r16, r24
     3aa:	11 1d       	adc	r17, r1
     3ac:	21 1d       	adc	r18, r1
     3ae:	31 1d       	adc	r19, r1
     3b0:	00 93 7d 40 	sts	0x407D, r16	; 0x80407d <msg_ID.4941>
     3b4:	10 93 7e 40 	sts	0x407E, r17	; 0x80407e <msg_ID.4941+0x1>
     3b8:	20 93 7f 40 	sts	0x407F, r18	; 0x80407f <msg_ID.4941+0x2>
     3bc:	30 93 80 40 	sts	0x4080, r19	; 0x804080 <msg_ID.4941+0x3>
     3c0:	2c c0       	rjmp	.+88     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				}
				else
				{
					buff->fields[field_index - 1][field_len++] = rx_char;
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	21 50       	subi	r18, 0x01	; 1
     3c6:	31 09       	sbc	r19, r1
     3c8:	90 91 81 40 	lds	r25, 0x4081	; 0x804081 <field_len.4940>
     3cc:	41 e0       	ldi	r20, 0x01	; 1
     3ce:	49 0f       	add	r20, r25
     3d0:	40 93 81 40 	sts	0x4081, r20	; 0x804081 <field_len.4940>
     3d4:	65 e1       	ldi	r22, 0x15	; 21
     3d6:	62 9f       	mul	r22, r18
     3d8:	a0 01       	movw	r20, r0
     3da:	63 9f       	mul	r22, r19
     3dc:	50 0d       	add	r21, r0
     3de:	11 24       	eor	r1, r1
     3e0:	c4 0f       	add	r28, r20
     3e2:	d5 1f       	adc	r29, r21
     3e4:	c9 0f       	add	r28, r25
     3e6:	d1 1d       	adc	r29, r1
     3e8:	8b 83       	std	Y+3, r24	; 0x03
     3ea:	17 c0       	rjmp	.+46     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				}
			}
		}
		else if(rx_char == 0x0D)    /* Handle carriage return */
     3ec:	8d 30       	cpi	r24, 0x0D	; 13
     3ee:	a9 f4       	brne	.+42     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		{
			buff->id = LINKBUS_MSG_UNKNOWN;
     3f0:	19 82       	std	Y+1, r1	; 0x01
     3f2:	1a 82       	std	Y+2, r1	; 0x02
			charIndex = LINKBUS_MAX_MSG_LENGTH;
     3f4:	82 e3       	ldi	r24, 0x32	; 50
     3f6:	80 93 82 40 	sts	0x4082, r24	; 0x804082 <charIndex.4938>
			field_len = 0;
     3fa:	10 92 81 40 	sts	0x4081, r1	; 0x804081 <field_len.4940>
			msg_ID = LINKBUS_MSG_UNKNOWN;
     3fe:	10 92 7d 40 	sts	0x407D, r1	; 0x80407d <msg_ID.4941>
     402:	10 92 7e 40 	sts	0x407E, r1	; 0x80407e <msg_ID.4941+0x1>
     406:	10 92 7f 40 	sts	0x407F, r1	; 0x80407f <msg_ID.4941+0x2>
     40a:	10 92 80 40 	sts	0x4080, r1	; 0x804080 <msg_ID.4941+0x3>
			field_index = 0;
     40e:	10 92 7b 40 	sts	0x407B, r1	; 0x80407b <field_index.4939>
			buff = NULL;
     412:	10 92 83 40 	sts	0x4083, r1	; 0x804083 <buff.4937>
     416:	10 92 84 40 	sts	0x4084, r1	; 0x804084 <buff.4937+0x1>
		}

		if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
     41a:	80 91 82 40 	lds	r24, 0x4082	; 0x804082 <charIndex.4938>
     41e:	8f 5f       	subi	r24, 0xFF	; 255
     420:	80 93 82 40 	sts	0x4082, r24	; 0x804082 <charIndex.4938>
     424:	82 33       	cpi	r24, 0x32	; 50
     426:	20 f0       	brcs	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		{
			receiving_msg = FALSE;
     428:	10 92 7c 40 	sts	0x407C, r1	; 0x80407c <receiving_msg.4942>
			charIndex = 0;
     42c:	10 92 82 40 	sts	0x4082, r1	; 0x804082 <charIndex.4938>
		}
	}
}
     430:	ff 91       	pop	r31
     432:	ef 91       	pop	r30
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	bf 91       	pop	r27
     43a:	af 91       	pop	r26
     43c:	9f 91       	pop	r25
     43e:	8f 91       	pop	r24
     440:	7f 91       	pop	r23
     442:	6f 91       	pop	r22
     444:	5f 91       	pop	r21
     446:	4f 91       	pop	r20
     448:	3f 91       	pop	r19
     44a:	2f 91       	pop	r18
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	0f 90       	pop	r0
     452:	0b be       	out	0x3b, r0	; 59
     454:	0f 90       	pop	r0
     456:	0f be       	out	0x3f, r0	; 63
     458:	0f 90       	pop	r0
     45a:	1f 90       	pop	r1
     45c:	18 95       	reti

0000045e <__vector_32>:

/**

*/
ISR(USART1_DRE_vect)
{
     45e:	1f 92       	push	r1
     460:	0f 92       	push	r0
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	0f 92       	push	r0
     466:	11 24       	eor	r1, r1
     468:	0b b6       	in	r0, 0x3b	; 59
     46a:	0f 92       	push	r0
     46c:	2f 93       	push	r18
     46e:	3f 93       	push	r19
     470:	4f 93       	push	r20
     472:	5f 93       	push	r21
     474:	6f 93       	push	r22
     476:	7f 93       	push	r23
     478:	8f 93       	push	r24
     47a:	9f 93       	push	r25
     47c:	af 93       	push	r26
     47e:	bf 93       	push	r27
     480:	ef 93       	push	r30
     482:	ff 93       	push	r31
	static LinkbusTxBuffer* buff = 0;
	static uint8_t charIndex = 0;

	if(!buff)
     484:	80 91 79 40 	lds	r24, 0x4079	; 0x804079 <buff.4952>
     488:	90 91 7a 40 	lds	r25, 0x407A	; 0x80407a <buff.4952+0x1>
     48c:	89 2b       	or	r24, r25
     48e:	31 f4       	brne	.+12     	; 0x49c <__vector_32+0x3e>
	{
		buff = nextFullTxBuffer();
     490:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <nextFullTxBuffer>
     494:	80 93 79 40 	sts	0x4079, r24	; 0x804079 <buff.4952>
     498:	90 93 7a 40 	sts	0x407A, r25	; 0x80407a <buff.4952+0x1>
	}

	if((*buff)[charIndex])
     49c:	e0 91 79 40 	lds	r30, 0x4079	; 0x804079 <buff.4952>
     4a0:	f0 91 7a 40 	lds	r31, 0x407A	; 0x80407a <buff.4952+0x1>
     4a4:	80 91 78 40 	lds	r24, 0x4078	; 0x804078 <__data_end>
     4a8:	df 01       	movw	r26, r30
     4aa:	a8 0f       	add	r26, r24
     4ac:	b1 1d       	adc	r27, r1
     4ae:	9c 91       	ld	r25, X
     4b0:	99 23       	and	r25, r25
     4b2:	31 f0       	breq	.+12     	; 0x4c0 <__vector_32+0x62>
	{
		/* Put data into buffer, sends the data */
		USART1.TXDATAL = (*buff)[charIndex++];
     4b4:	8f 5f       	subi	r24, 0xFF	; 255
     4b6:	80 93 78 40 	sts	0x4078, r24	; 0x804078 <__data_end>
     4ba:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
     4be:	0d c0       	rjmp	.+26     	; 0x4da <__vector_32+0x7c>
	}
	else
	{
		charIndex = 0;
     4c0:	10 92 78 40 	sts	0x4078, r1	; 0x804078 <__data_end>
		(*buff)[0] = '\0';
     4c4:	10 82       	st	Z, r1
		buff = nextFullTxBuffer();
     4c6:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <nextFullTxBuffer>
     4ca:	80 93 79 40 	sts	0x4079, r24	; 0x804079 <buff.4952>
     4ce:	90 93 7a 40 	sts	0x407A, r25	; 0x80407a <buff.4952+0x1>
		if(!buff)
     4d2:	89 2b       	or	r24, r25
     4d4:	11 f4       	brne	.+4      	; 0x4da <__vector_32+0x7c>
		{
			linkbus_end_tx();
     4d6:	0e 94 94 06 	call	0xd28	; 0xd28 <linkbus_end_tx>
		}
	}
}
     4da:	ff 91       	pop	r31
     4dc:	ef 91       	pop	r30
     4de:	bf 91       	pop	r27
     4e0:	af 91       	pop	r26
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	7f 91       	pop	r23
     4e8:	6f 91       	pop	r22
     4ea:	5f 91       	pop	r21
     4ec:	4f 91       	pop	r20
     4ee:	3f 91       	pop	r19
     4f0:	2f 91       	pop	r18
     4f2:	0f 90       	pop	r0
     4f4:	0b be       	out	0x3b, r0	; 59
     4f6:	0f 90       	pop	r0
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	0f 90       	pop	r0
     4fc:	1f 90       	pop	r1
     4fe:	18 95       	reti

00000500 <__vector_41>:
{
	
}

void wdt_init(WDReset resetType)
{
     500:	1f 92       	push	r1
     502:	0f 92       	push	r0
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	0f 92       	push	r0
     508:	11 24       	eor	r1, r1
     50a:	2f 93       	push	r18
     50c:	3f 93       	push	r19
     50e:	8f 93       	push	r24
     510:	9f 93       	push	r25
     512:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
     516:	80 ff       	sbrs	r24, 0
     518:	18 c0       	rjmp	.+48     	; 0x54a <__vector_41+0x4a>
     51a:	80 91 dd 40 	lds	r24, 0x40DD	; 0x8040dd <cnt.5653>
     51e:	90 91 de 40 	lds	r25, 0x40DE	; 0x8040de <cnt.5653+0x1>
     522:	9c 01       	movw	r18, r24
     524:	2f 5f       	subi	r18, 0xFF	; 255
     526:	3f 4f       	sbci	r19, 0xFF	; 255
     528:	20 93 dd 40 	sts	0x40DD, r18	; 0x8040dd <cnt.5653>
     52c:	30 93 de 40 	sts	0x40DE, r19	; 0x8040de <cnt.5653+0x1>
     530:	8b 32       	cpi	r24, 0x2B	; 43
     532:	91 40       	sbci	r25, 0x01	; 1
     534:	39 f4       	brne	.+14     	; 0x544 <__vector_41+0x44>
     536:	10 92 dd 40 	sts	0x40DD, r1	; 0x8040dd <cnt.5653>
     53a:	10 92 de 40 	sts	0x40DE, r1	; 0x8040de <cnt.5653+0x1>
     53e:	8a b1       	in	r24, 0x0a	; 10
     540:	80 64       	ori	r24, 0x40	; 64
     542:	8a b9       	out	0x0a, r24	; 10
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <__TEXT_REGION_LENGTH__+0x7e0b36>
     54a:	9f 91       	pop	r25
     54c:	8f 91       	pop	r24
     54e:	3f 91       	pop	r19
     550:	2f 91       	pop	r18
     552:	0f 90       	pop	r0
     554:	0f be       	out	0x3f, r0	; 63
     556:	0f 90       	pop	r0
     558:	1f 90       	pop	r1
     55a:	18 95       	reti

0000055c <__vector_12>:
     55c:	1f 92       	push	r1
     55e:	0f 92       	push	r0
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	0f 92       	push	r0
     564:	11 24       	eor	r1, r1
     566:	0b b6       	in	r0, 0x3b	; 59
     568:	0f 92       	push	r0
     56a:	2f 93       	push	r18
     56c:	3f 93       	push	r19
     56e:	4f 93       	push	r20
     570:	5f 93       	push	r21
     572:	6f 93       	push	r22
     574:	7f 93       	push	r23
     576:	8f 93       	push	r24
     578:	9f 93       	push	r25
     57a:	af 93       	push	r26
     57c:	bf 93       	push	r27
     57e:	ef 93       	push	r30
     580:	ff 93       	push	r31
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	00 d0       	rcall	.+0      	; 0x588 <__vector_12+0x2c>
     588:	1f 92       	push	r1
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
     592:	80 ff       	sbrs	r24, 0
     594:	33 c1       	rjmp	.+614    	; 0x7fc <__vector_12+0x2a0>
     596:	80 91 9b 40 	lds	r24, 0x409B	; 0x80409b <g_util_tick_countdown>
     59a:	90 91 9c 40 	lds	r25, 0x409C	; 0x80409c <g_util_tick_countdown+0x1>
     59e:	89 2b       	or	r24, r25
     5a0:	49 f0       	breq	.+18     	; 0x5b4 <__vector_12+0x58>
     5a2:	80 91 9b 40 	lds	r24, 0x409B	; 0x80409b <g_util_tick_countdown>
     5a6:	90 91 9c 40 	lds	r25, 0x409C	; 0x80409c <g_util_tick_countdown+0x1>
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	80 93 9b 40 	sts	0x409B, r24	; 0x80409b <g_util_tick_countdown>
     5b0:	90 93 9c 40 	sts	0x409C, r25	; 0x80409c <g_util_tick_countdown+0x1>
     5b4:	80 91 cc 40 	lds	r24, 0x40CC	; 0x8040cc <g_event_enabled>
     5b8:	88 23       	and	r24, r24
     5ba:	09 f4       	brne	.+2      	; 0x5be <__vector_12+0x62>
     5bc:	86 c0       	rjmp	.+268    	; 0x6ca <__vector_12+0x16e>
     5be:	80 91 cd 40 	lds	r24, 0x40CD	; 0x8040cd <g_event_commenced>
     5c2:	88 23       	and	r24, r24
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <__vector_12+0x6c>
     5c6:	81 c0       	rjmp	.+258    	; 0x6ca <__vector_12+0x16e>
     5c8:	80 91 9e 40 	lds	r24, 0x409E	; 0x80409e <g_on_the_air>
     5cc:	90 91 9f 40 	lds	r25, 0x409F	; 0x80409f <g_on_the_air+0x1>
     5d0:	a0 91 a0 40 	lds	r26, 0x40A0	; 0x8040a0 <g_on_the_air+0x2>
     5d4:	b0 91 a1 40 	lds	r27, 0x40A1	; 0x8040a1 <g_on_the_air+0x3>
     5d8:	18 16       	cp	r1, r24
     5da:	19 06       	cpc	r1, r25
     5dc:	1a 06       	cpc	r1, r26
     5de:	1b 06       	cpc	r1, r27
     5e0:	0c f0       	brlt	.+2      	; 0x5e4 <__vector_12+0x88>
     5e2:	58 c0       	rjmp	.+176    	; 0x694 <__vector_12+0x138>
     5e4:	80 91 df 40 	lds	r24, 0x40DF	; 0x8040df <codeInc.5661>
     5e8:	90 91 e0 40 	lds	r25, 0x40E0	; 0x8040e0 <codeInc.5661+0x1>
     5ec:	00 97       	sbiw	r24, 0x00	; 0
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <__vector_12+0x96>
     5f0:	44 c0       	rjmp	.+136    	; 0x67a <__vector_12+0x11e>
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	80 93 df 40 	sts	0x40DF, r24	; 0x8040df <codeInc.5661>
     5f8:	90 93 e0 40 	sts	0x40E0, r25	; 0x8040e0 <codeInc.5661+0x1>
     5fc:	89 2b       	or	r24, r25
     5fe:	09 f0       	breq	.+2      	; 0x602 <__vector_12+0xa6>
     600:	64 c0       	rjmp	.+200    	; 0x6ca <__vector_12+0x16e>
     602:	ae 01       	movw	r20, r28
     604:	4e 5f       	subi	r20, 0xFE	; 254
     606:	5f 4f       	sbci	r21, 0xFF	; 255
     608:	be 01       	movw	r22, r28
     60a:	6d 5f       	subi	r22, 0xFD	; 253
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 fd 07 	call	0xffa	; 0xffa <makeMorse>
     616:	80 93 e1 40 	sts	0x40E1, r24	; 0x8040e1 <key.5664>
     61a:	8b 81       	ldd	r24, Y+3	; 0x03
     61c:	81 11       	cpse	r24, r1
     61e:	25 c0       	rjmp	.+74     	; 0x66a <__vector_12+0x10e>
     620:	8a 81       	ldd	r24, Y+2	; 0x02
     622:	88 23       	and	r24, r24
     624:	11 f1       	breq	.+68     	; 0x66a <__vector_12+0x10e>
     626:	8d ef       	ldi	r24, 0xFD	; 253
     628:	80 93 9a 40 	sts	0x409A, r24	; 0x80409a <g_last_status_code>
     62c:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <g_pattern_codespeed>
     630:	0e 94 43 04 	call	0x886	; 0x886 <throttleValue>
     634:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <g_code_throttle>
     638:	90 93 02 40 	sts	0x4002, r25	; 0x804002 <g_code_throttle+0x1>
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	8b 83       	std	Y+3, r24	; 0x03
     640:	40 e0       	ldi	r20, 0x00	; 0
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	be 01       	movw	r22, r28
     646:	6d 5f       	subi	r22, 0xFD	; 253
     648:	7f 4f       	sbci	r23, 0xFF	; 255
     64a:	82 ea       	ldi	r24, 0xA2	; 162
     64c:	90 e4       	ldi	r25, 0x40	; 64
     64e:	0e 94 fd 07 	call	0xffa	; 0xffa <makeMorse>
     652:	ae 01       	movw	r20, r28
     654:	4e 5f       	subi	r20, 0xFE	; 254
     656:	5f 4f       	sbci	r21, 0xFF	; 255
     658:	be 01       	movw	r22, r28
     65a:	6d 5f       	subi	r22, 0xFD	; 253
     65c:	7f 4f       	sbci	r23, 0xFF	; 255
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 fd 07 	call	0xffa	; 0xffa <makeMorse>
     666:	80 93 e1 40 	sts	0x40E1, r24	; 0x8040e1 <key.5664>
     66a:	80 91 e1 40 	lds	r24, 0x40E1	; 0x8040e1 <key.5664>
     66e:	88 23       	and	r24, r24
     670:	61 f1       	breq	.+88     	; 0x6ca <__vector_12+0x16e>
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	0e 94 33 0a 	call	0x1466	; 0x1466 <powerToTransmitter>
     678:	28 c0       	rjmp	.+80     	; 0x6ca <__vector_12+0x16e>
     67a:	80 91 e1 40 	lds	r24, 0x40E1	; 0x8040e1 <key.5664>
     67e:	0e 94 35 0a 	call	0x146a	; 0x146a <keyTransmitter>
     682:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <g_code_throttle>
     686:	90 91 02 40 	lds	r25, 0x4002	; 0x804002 <g_code_throttle+0x1>
     68a:	80 93 df 40 	sts	0x40DF, r24	; 0x8040df <codeInc.5661>
     68e:	90 93 e0 40 	sts	0x40E0, r25	; 0x8040e0 <codeInc.5661+0x1>
     692:	1b c0       	rjmp	.+54     	; 0x6ca <__vector_12+0x16e>
     694:	80 91 9e 40 	lds	r24, 0x409E	; 0x80409e <g_on_the_air>
     698:	90 91 9f 40 	lds	r25, 0x409F	; 0x80409f <g_on_the_air+0x1>
     69c:	a0 91 a0 40 	lds	r26, 0x40A0	; 0x8040a0 <g_on_the_air+0x2>
     6a0:	b0 91 a1 40 	lds	r27, 0x40A1	; 0x8040a1 <g_on_the_air+0x3>
     6a4:	89 2b       	or	r24, r25
     6a6:	8a 2b       	or	r24, r26
     6a8:	8b 2b       	or	r24, r27
     6aa:	79 f4       	brne	.+30     	; 0x6ca <__vector_12+0x16e>
     6ac:	80 91 e1 40 	lds	r24, 0x40E1	; 0x8040e1 <key.5664>
     6b0:	88 23       	and	r24, r24
     6b2:	59 f0       	breq	.+22     	; 0x6ca <__vector_12+0x16e>
     6b4:	10 92 e1 40 	sts	0x40E1, r1	; 0x8040e1 <key.5664>
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	0e 94 35 0a 	call	0x146a	; 0x146a <keyTransmitter>
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	0e 94 33 0a 	call	0x1466	; 0x1466 <powerToTransmitter>
     6c4:	8e ef       	ldi	r24, 0xFE	; 254
     6c6:	80 93 9a 40 	sts	0x409A, r24	; 0x80409a <g_last_status_code>
     6ca:	80 91 e2 40 	lds	r24, 0x40E2	; 0x8040e2 <conversionInProcess.5659>
     6ce:	81 11       	cpse	r24, r1
     6d0:	42 c0       	rjmp	.+132    	; 0x756 <__vector_12+0x1fa>
     6d2:	8f ef       	ldi	r24, 0xFF	; 255
     6d4:	80 93 e3 40 	sts	0x40E3, r24	; 0x8040e3 <indexConversionInProcess.5660>
     6d8:	19 82       	std	Y+1, r1	; 0x01
     6da:	25 c0       	rjmp	.+74     	; 0x726 <__vector_12+0x1ca>
     6dc:	e9 81       	ldd	r30, Y+1	; 0x01
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	ec 5f       	subi	r30, 0xFC	; 252
     6e6:	ff 4b       	sbci	r31, 0xBF	; 191
     6e8:	80 81       	ld	r24, Z
     6ea:	91 81       	ldd	r25, Z+1	; 0x01
     6ec:	89 2b       	or	r24, r25
     6ee:	59 f0       	breq	.+22     	; 0x706 <__vector_12+0x1aa>
     6f0:	e9 81       	ldd	r30, Y+1	; 0x01
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	ee 0f       	add	r30, r30
     6f6:	ff 1f       	adc	r31, r31
     6f8:	ec 5f       	subi	r30, 0xFC	; 252
     6fa:	ff 4b       	sbci	r31, 0xBF	; 191
     6fc:	80 81       	ld	r24, Z
     6fe:	91 81       	ldd	r25, Z+1	; 0x01
     700:	01 97       	sbiw	r24, 0x01	; 1
     702:	80 83       	st	Z, r24
     704:	91 83       	std	Z+1, r25	; 0x01
     706:	e9 81       	ldd	r30, Y+1	; 0x01
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	ee 0f       	add	r30, r30
     70c:	ff 1f       	adc	r31, r31
     70e:	ec 5f       	subi	r30, 0xFC	; 252
     710:	ff 4b       	sbci	r31, 0xBF	; 191
     712:	80 81       	ld	r24, Z
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	89 2b       	or	r24, r25
     718:	19 f4       	brne	.+6      	; 0x720 <__vector_12+0x1c4>
     71a:	89 81       	ldd	r24, Y+1	; 0x01
     71c:	80 93 e3 40 	sts	0x40E3, r24	; 0x8040e3 <indexConversionInProcess.5660>
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	8f 5f       	subi	r24, 0xFF	; 255
     724:	89 83       	std	Y+1, r24	; 0x01
     726:	89 81       	ldd	r24, Y+1	; 0x01
     728:	85 30       	cpi	r24, 0x05	; 5
     72a:	c0 f2       	brcs	.-80     	; 0x6dc <__vector_12+0x180>
     72c:	80 91 e3 40 	lds	r24, 0x40E3	; 0x8040e3 <indexConversionInProcess.5660>
     730:	88 23       	and	r24, r24
     732:	0c f4       	brge	.+2      	; 0x736 <__vector_12+0x1da>
     734:	60 c0       	rjmp	.+192    	; 0x7f6 <__vector_12+0x29a>
     736:	88 0f       	add	r24, r24
     738:	99 0b       	sbc	r25, r25
     73a:	fc 01       	movw	r30, r24
     73c:	ed 59       	subi	r30, 0x9D	; 157
     73e:	ff 4b       	sbci	r31, 0xBF	; 191
     740:	20 81       	ld	r18, Z
     742:	31 81       	ldd	r19, Z+1	; 0x01
     744:	fc 01       	movw	r30, r24
     746:	ec 5f       	subi	r30, 0xFC	; 252
     748:	ff 4b       	sbci	r31, 0xBF	; 191
     74a:	20 83       	st	Z, r18
     74c:	31 83       	std	Z+1, r19	; 0x01
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 e2 40 	sts	0x40E2, r24	; 0x8040e2 <conversionInProcess.5659>
     754:	50 c0       	rjmp	.+160    	; 0x7f6 <__vector_12+0x29a>
     756:	10 92 e4 40 	sts	0x40E4, r1	; 0x8040e4 <holdConversionResult.5670>
     75a:	10 92 e5 40 	sts	0x40E5, r1	; 0x8040e5 <holdConversionResult.5670+0x1>
     75e:	40 91 e3 40 	lds	r20, 0x40E3	; 0x8040e3 <indexConversionInProcess.5660>
     762:	84 2f       	mov	r24, r20
     764:	04 2e       	mov	r0, r20
     766:	00 0c       	add	r0, r0
     768:	99 0b       	sbc	r25, r25
     76a:	fc 01       	movw	r30, r24
     76c:	ee 0f       	add	r30, r30
     76e:	ff 1f       	adc	r31, r31
     770:	ed 52       	subi	r30, 0x2D	; 45
     772:	ff 4b       	sbci	r31, 0xBF	; 191
     774:	20 81       	ld	r18, Z
     776:	31 81       	ldd	r19, Z+1	; 0x01
     778:	fc 01       	movw	r30, r24
     77a:	e2 53       	subi	r30, 0x32	; 50
     77c:	ff 4b       	sbci	r31, 0xBF	; 191
     77e:	51 e0       	ldi	r21, 0x01	; 1
     780:	50 83       	st	Z, r21
     782:	41 11       	cpse	r20, r1
     784:	2d c0       	rjmp	.+90     	; 0x7e0 <__vector_12+0x284>
     786:	fc 01       	movw	r30, r24
     788:	ee 0f       	add	r30, r30
     78a:	ff 1f       	adc	r31, r31
     78c:	e3 59       	subi	r30, 0x93	; 147
     78e:	ff 4b       	sbci	r31, 0xBF	; 191
     790:	40 81       	ld	r20, Z
     792:	51 81       	ldd	r21, Z+1	; 0x01
     794:	42 17       	cp	r20, r18
     796:	53 07       	cpc	r21, r19
     798:	60 f4       	brcc	.+24     	; 0x7b2 <__vector_12+0x256>
     79a:	fc 01       	movw	r30, r24
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	ec 5f       	subi	r30, 0xFC	; 252
     7a2:	ff 4b       	sbci	r31, 0xBF	; 191
     7a4:	24 e6       	ldi	r18, 0x64	; 100
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	20 83       	st	Z, r18
     7aa:	31 83       	std	Z+1, r19	; 0x01
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	19 c0       	rjmp	.+50     	; 0x7e4 <__vector_12+0x288>
     7b2:	21 15       	cp	r18, r1
     7b4:	31 05       	cpc	r19, r1
     7b6:	11 f0       	breq	.+4      	; 0x7bc <__vector_12+0x260>
     7b8:	21 50       	subi	r18, 0x01	; 1
     7ba:	31 09       	sbc	r19, r1
     7bc:	41 e0       	ldi	r20, 0x01	; 1
     7be:	40 93 9d 40 	sts	0x409D, r20	; 0x80409d <g_battery_measurements_active>
     7c2:	24 37       	cpi	r18, 0x74	; 116
     7c4:	44 e0       	ldi	r20, 0x04	; 4
     7c6:	34 07       	cpc	r19, r20
     7c8:	18 f0       	brcs	.+6      	; 0x7d0 <__vector_12+0x274>
     7ca:	10 92 00 40 	sts	0x4000, r1	; 0x804000 <__DATA_REGION_ORIGIN__>
     7ce:	0a c0       	rjmp	.+20     	; 0x7e4 <__vector_12+0x288>
     7d0:	2d 38       	cpi	r18, 0x8D	; 141
     7d2:	42 e0       	ldi	r20, 0x02	; 2
     7d4:	34 07       	cpc	r19, r20
     7d6:	30 f0       	brcs	.+12     	; 0x7e4 <__vector_12+0x288>
     7d8:	41 e0       	ldi	r20, 0x01	; 1
     7da:	40 93 00 40 	sts	0x4000, r20	; 0x804000 <__DATA_REGION_ORIGIN__>
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <__vector_12+0x288>
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	fc 01       	movw	r30, r24
     7ea:	ed 52       	subi	r30, 0x2D	; 45
     7ec:	ff 4b       	sbci	r31, 0xBF	; 191
     7ee:	20 83       	st	Z, r18
     7f0:	31 83       	std	Z+1, r19	; 0x01
     7f2:	10 92 e2 40 	sts	0x40E2, r1	; 0x8040e2 <conversionInProcess.5659>
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
     7fc:	23 96       	adiw	r28, 0x03	; 3
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	de bf       	out	0x3e, r29	; 62
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	ff 91       	pop	r31
     808:	ef 91       	pop	r30
     80a:	bf 91       	pop	r27
     80c:	af 91       	pop	r26
     80e:	9f 91       	pop	r25
     810:	8f 91       	pop	r24
     812:	7f 91       	pop	r23
     814:	6f 91       	pop	r22
     816:	5f 91       	pop	r21
     818:	4f 91       	pop	r20
     81a:	3f 91       	pop	r19
     81c:	2f 91       	pop	r18
     81e:	0f 90       	pop	r0
     820:	0b be       	out	0x3b, r0	; 59
     822:	0f 90       	pop	r0
     824:	0f be       	out	0x3f, r0	; 63
     826:	0f 90       	pop	r0
     828:	1f 90       	pop	r1
     82a:	18 95       	reti

0000082c <main>:
     82c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <atmel_start_init>
     830:	81 e1       	ldi	r24, 0x11	; 17
     832:	90 e4       	ldi	r25, 0x40	; 64
     834:	0e 94 d1 06 	call	0xda2	; 0xda2 <linkbus_send_text>
     838:	0e 94 8b 04 	call	0x916	; 0x916 <ADC0_startConversions>
     83c:	c0 e0       	ldi	r28, 0x00	; 0
     83e:	d0 e0       	ldi	r29, 0x00	; 0
     840:	68 ee       	ldi	r22, 0xE8	; 232
     842:	73 e0       	ldi	r23, 0x03	; 3
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 75 09 	call	0x12ea	; 0x12ea <util_delay_ms>
     84c:	81 11       	cpse	r24, r1
     84e:	f8 cf       	rjmp	.-16     	; 0x840 <main+0x14>
     850:	8e 01       	movw	r16, r28
     852:	0f 5f       	subi	r16, 0xFF	; 255
     854:	1f 4f       	sbci	r17, 0xFF	; 255
     856:	df 93       	push	r29
     858:	cf 93       	push	r28
     85a:	89 e1       	ldi	r24, 0x19	; 25
     85c:	90 e4       	ldi	r25, 0x40	; 64
     85e:	9f 93       	push	r25
     860:	8f 93       	push	r24
     862:	85 e8       	ldi	r24, 0x85	; 133
     864:	90 e4       	ldi	r25, 0x40	; 64
     866:	9f 93       	push	r25
     868:	8f 93       	push	r24
     86a:	0e 94 92 0c 	call	0x1924	; 0x1924 <sprintf>
     86e:	85 e8       	ldi	r24, 0x85	; 133
     870:	90 e4       	ldi	r25, 0x40	; 64
     872:	0e 94 d1 06 	call	0xda2	; 0xda2 <linkbus_send_text>
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	e8 01       	movw	r28, r16
     884:	dd cf       	rjmp	.-70     	; 0x840 <main+0x14>

00000886 <throttleValue>:
}

uint16_t throttleValue(uint8_t speed)
{
	return 0;
}
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	08 95       	ret

0000088c <PORT_init>:
static void ADC0_SYSTEM_init(void);

static void PORT_init(void)
{
	/* Disable interrupt and digital input buffer on PD2 */
	PORTD.PIN2CTRL &= ~PORT_ISC_gm;
     88c:	e0 e6       	ldi	r30, 0x60	; 96
     88e:	f4 e0       	ldi	r31, 0x04	; 4
     890:	82 89       	ldd	r24, Z+18	; 0x12
     892:	88 7f       	andi	r24, 0xF8	; 248
     894:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     896:	82 89       	ldd	r24, Z+18	; 0x12
     898:	84 60       	ori	r24, 0x04	; 4
     89a:	82 8b       	std	Z+18, r24	; 0x12
	/* Disable interrupt and digital input buffer on PD3 */
	PORTD.PIN3CTRL &= ~PORT_ISC_gm;
     89c:	83 89       	ldd	r24, Z+19	; 0x13
     89e:	88 7f       	andi	r24, 0xF8	; 248
     8a0:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     8a2:	83 89       	ldd	r24, Z+19	; 0x13
     8a4:	84 60       	ori	r24, 0x04	; 4
     8a6:	83 8b       	std	Z+19, r24	; 0x13
	/* Disable interrupt and digital input buffer on PD4 */
	PORTD.PIN4CTRL &= ~PORT_ISC_gm;
     8a8:	84 89       	ldd	r24, Z+20	; 0x14
     8aa:	88 7f       	andi	r24, 0xF8	; 248
     8ac:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN4CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     8ae:	84 89       	ldd	r24, Z+20	; 0x14
     8b0:	84 60       	ori	r24, 0x04	; 4
     8b2:	84 8b       	std	Z+20, r24	; 0x14
	/* Disable interrupt and digital input buffer on PD5 */
	PORTD.PIN5CTRL &= ~PORT_ISC_gm;
     8b4:	85 89       	ldd	r24, Z+21	; 0x15
     8b6:	88 7f       	andi	r24, 0xF8	; 248
     8b8:	85 8b       	std	Z+21, r24	; 0x15
	PORTD.PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     8ba:	85 89       	ldd	r24, Z+21	; 0x15
     8bc:	84 60       	ori	r24, 0x04	; 4
     8be:	85 8b       	std	Z+21, r24	; 0x15
	
	/* Disable pull-up resistor */
	PORTD.PIN2CTRL &= ~PORT_PULLUPEN_bm;
     8c0:	82 89       	ldd	r24, Z+18	; 0x12
     8c2:	87 7f       	andi	r24, 0xF7	; 247
     8c4:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL &= ~PORT_PULLUPEN_bm;
     8c6:	83 89       	ldd	r24, Z+19	; 0x13
     8c8:	87 7f       	andi	r24, 0xF7	; 247
     8ca:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL &= ~PORT_PULLUPEN_bm;
     8cc:	84 89       	ldd	r24, Z+20	; 0x14
     8ce:	87 7f       	andi	r24, 0xF7	; 247
     8d0:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL &= ~PORT_PULLUPEN_bm;
     8d2:	85 89       	ldd	r24, Z+21	; 0x15
     8d4:	87 7f       	andi	r24, 0xF7	; 247
     8d6:	85 8b       	std	Z+21, r24	; 0x15
     8d8:	08 95       	ret

000008da <VREF0_init>:
}

static void VREF0_init(void)
{
	VREF.ADC0REF = VREF_REFSEL_2V048_gc;  /* Internal 2.048V reference */
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     8e0:	08 95       	ret

000008e2 <ADC0_init>:
}

static void ADC0_init(void)
{
	ADC0.CTRLC = ADC_PRESC_DIV64_gc;   /* CLK_PER divided by 4 => 24096 sps */
     8e2:	e0 e0       	ldi	r30, 0x00	; 0
     8e4:	f6 e0       	ldi	r31, 0x06	; 6
     8e6:	8a e0       	ldi	r24, 0x0A	; 10
     8e8:	82 83       	std	Z+2, r24	; 0x02
	
	ADC0.CTRLA = ADC_ENABLE_bm        /* ADC Enable: enabled */
     8ea:	83 e0       	ldi	r24, 0x03	; 3
     8ec:	80 83       	st	Z, r24
	| ADC_RESSEL_12BIT_gc      /* 12-bit mode */
//	| ADC_CONVMODE_bm          /* Differential Conversion */
	| ADC_FREERUN_bm;          /* Enable Free-Run mode */
	
	ADC0.MUXPOS = ADC_MUXPOS_AIN3_gc;     /* Select ADC channel AIN3 <-> PD3 */
     8ee:	80 87       	std	Z+8, r24	; 0x08
     8f0:	08 95       	ret

000008f2 <ADC0_read>:
}

int16_t ADC0_read(void)
{
	/* Clear the interrupt flag by reading the result */
	return ADC0.RES;
     8f2:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
     8f6:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
}
     8fa:	08 95       	ret

000008fc <ADC0_start>:

static void ADC0_start(void)
{
	ADC0.INTCTRL = 0x01; /* Enable interrupt */
     8fc:	e0 e0       	ldi	r30, 0x00	; 0
     8fe:	f6 e0       	ldi	r31, 0x06	; 6
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	84 87       	std	Z+12, r24	; 0x0c
	/* Start conversion */
	ADC0.COMMAND = ADC_STCONV_bm;
     904:	82 87       	std	Z+10, r24	; 0x0a
     906:	08 95       	ret

00000908 <ADC0_SYSTEM_init>:
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
}

static void ADC0_SYSTEM_init(void)
{
	PORT_init();
     908:	0e 94 46 04 	call	0x88c	; 0x88c <PORT_init>
	VREF0_init();
     90c:	0e 94 6d 04 	call	0x8da	; 0x8da <VREF0_init>
	ADC0_init();
     910:	0e 94 71 04 	call	0x8e2	; 0x8e2 <ADC0_init>
     914:	08 95       	ret

00000916 <ADC0_startConversions>:
}

void ADC0_startConversions(void)
{
	ADC0_SYSTEM_init();
     916:	0e 94 84 04 	call	0x908	; 0x908 <ADC0_SYSTEM_init>
	ADC0_start();
     91a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <ADC0_start>
     91e:	08 95       	ret

00000920 <__vector_24>:
}

ISR(ADC0_RESRDY_vect)
{
     920:	1f 92       	push	r1
     922:	0f 92       	push	r0
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	0f 92       	push	r0
     928:	11 24       	eor	r1, r1
     92a:	0b b6       	in	r0, 0x3b	; 59
     92c:	0f 92       	push	r0
     92e:	2f 93       	push	r18
     930:	3f 93       	push	r19
     932:	4f 93       	push	r20
     934:	5f 93       	push	r21
     936:	6f 93       	push	r22
     938:	7f 93       	push	r23
     93a:	8f 93       	push	r24
     93c:	9f 93       	push	r25
     93e:	af 93       	push	r26
     940:	bf 93       	push	r27
     942:	ef 93       	push	r30
     944:	ff 93       	push	r31
// 	int16_t val = ADC0.RES;
// 	if(g_goertzel.DataPoint(val))
// 	{
// 		ADC0.INTCTRL = 0x00; /* disable ADC interrupt */
// 	}
	int16_t data = ADC0_read();
     946:	0e 94 79 04 	call	0x8f2	; 0x8f2 <ADC0_read>
	/* Clear the interrupt flag by reading the result */
     94a:	ff 91       	pop	r31
     94c:	ef 91       	pop	r30
     94e:	bf 91       	pop	r27
     950:	af 91       	pop	r26
     952:	9f 91       	pop	r25
     954:	8f 91       	pop	r24
     956:	7f 91       	pop	r23
     958:	6f 91       	pop	r22
     95a:	5f 91       	pop	r21
     95c:	4f 91       	pop	r20
     95e:	3f 91       	pop	r19
     960:	2f 91       	pop	r18
     962:	0f 90       	pop	r0
     964:	0b be       	out	0x3b, r0	; 59
     966:	0f 90       	pop	r0
     968:	0f be       	out	0x3f, r0	; 63
     96a:	0f 90       	pop	r0
     96c:	1f 90       	pop	r1
     96e:	18 95       	reti

00000970 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
     970:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	08 95       	ret

00000978 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     978:	44 e2       	ldi	r20, 0x24	; 36
     97a:	68 ed       	ldi	r22, 0xD8	; 216
     97c:	88 e6       	ldi	r24, 0x68	; 104
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0e 94 f6 08 	call	0x11ec	; 0x11ec <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	08 95       	ret

00000988 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     988:	78 94       	sei

	return 0;
}
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	08 95       	ret

0000098e <VREF_init>:
static void VREF_init(void)
{
//	VREF.DAC0REF = VREF_REFSEL_2V048_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	VREF.DAC0REF = VREF_REFSEL_2V500_gc /* Select the 2.048V Internal Voltage Reference for DAC */
//	| VREF_ALWAYSON_bm;    /* Set the Voltage Reference in Always On mode */
	VREF.DAC0REF = VREF_REFSEL_2V500_gc; /* Select the 2.048V Internal Voltage Reference for DAC */
     98e:	83 e0       	ldi	r24, 0x03	; 3
     990:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
	/* Wait VREF start-up time */
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
     994:	6a e0       	ldi	r22, 0x0A	; 10
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 75 09 	call	0x12ea	; 0x12ea <util_delay_ms>
     9a0:	81 11       	cpse	r24, r1
     9a2:	f8 cf       	rjmp	.-16     	; 0x994 <VREF_init+0x6>
}
     9a4:	08 95       	ret

000009a6 <DAC0_setVal>:
}

void DAC0_setVal(uint16_t value)
{
	/* Store the two LSbs in DAC0.DATAL */
	DAC0.DATAL = (value & LSB_MASK) << 6;
     9a6:	28 2f       	mov	r18, r24
     9a8:	22 95       	swap	r18
     9aa:	22 0f       	add	r18, r18
     9ac:	22 0f       	add	r18, r18
     9ae:	20 7c       	andi	r18, 0xC0	; 192
     9b0:	e0 ea       	ldi	r30, 0xA0	; 160
     9b2:	f6 e0       	ldi	r31, 0x06	; 6
     9b4:	22 83       	std	Z+2, r18	; 0x02
	/* Store the eight MSbs in DAC0.DATAH */
	DAC0.DATAH = value >> 2;
     9b6:	96 95       	lsr	r25
     9b8:	87 95       	ror	r24
     9ba:	96 95       	lsr	r25
     9bc:	87 95       	ror	r24
     9be:	83 83       	std	Z+3, r24	; 0x03
     9c0:	08 95       	ret

000009c2 <DAC0_init>:
	while(util_delay_ms(VREF_STARTUP_TIME_MS));
}

void DAC0_init(void)
{
	VREF_init();
     9c2:	0e 94 c7 04 	call	0x98e	; 0x98e <VREF_init>
	/* Disable digital input buffer */
	PORTD.PIN6CTRL &= ~PORT_ISC_gm;
     9c6:	e0 e6       	ldi	r30, 0x60	; 96
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	86 89       	ldd	r24, Z+22	; 0x16
     9cc:	88 7f       	andi	r24, 0xF8	; 248
     9ce:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     9d0:	86 89       	ldd	r24, Z+22	; 0x16
     9d2:	84 60       	ori	r24, 0x04	; 4
     9d4:	86 8b       	std	Z+22, r24	; 0x16
	/* Disable pull-up resistor */
	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
     9d6:	86 89       	ldd	r24, Z+22	; 0x16
     9d8:	87 7f       	andi	r24, 0xF7	; 247
     9da:	86 8b       	std	Z+22, r24	; 0x16
	DAC0.CTRLA = DAC_ENABLE_bm          /* Enable DAC */
     9dc:	81 ec       	ldi	r24, 0xC1	; 193
     9de:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
	| DAC_OUTEN_bm           /* Enable output buffer */
	| DAC_RUNSTDBY_bm;       /* Enable Run in Standby mode */
	
	DAC0_setVal(DAC_DEFAULT_VALUE);
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DAC0_setVal>
     9ea:	08 95       	ret

000009ec <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	08 c0       	rjmp	.+16     	; 0xa00 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     9f0:	e8 2f       	mov	r30, r24
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	e0 5f       	subi	r30, 0xF0	; 240
     9f6:	fb 4f       	sbci	r31, 0xFB	; 251
     9f8:	90 81       	ld	r25, Z
     9fa:	98 60       	ori	r25, 0x08	; 8
     9fc:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     9fe:	8f 5f       	subi	r24, 0xFF	; 255
     a00:	88 30       	cpi	r24, 0x08	; 8
     a02:	b0 f3       	brcs	.-20     	; 0x9f0 <mcu_init+0x4>
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	08 c0       	rjmp	.+16     	; 0xa18 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     a08:	e8 2f       	mov	r30, r24
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	e0 5d       	subi	r30, 0xD0	; 208
     a0e:	fb 4f       	sbci	r31, 0xFB	; 251
     a10:	90 81       	ld	r25, Z
     a12:	98 60       	ori	r25, 0x08	; 8
     a14:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     a16:	8f 5f       	subi	r24, 0xFF	; 255
     a18:	88 30       	cpi	r24, 0x08	; 8
     a1a:	b0 f3       	brcs	.-20     	; 0xa08 <mcu_init+0x1c>
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	08 c0       	rjmp	.+16     	; 0xa30 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     a20:	e8 2f       	mov	r30, r24
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	e0 5b       	subi	r30, 0xB0	; 176
     a26:	fb 4f       	sbci	r31, 0xFB	; 251
     a28:	90 81       	ld	r25, Z
     a2a:	98 60       	ori	r25, 0x08	; 8
     a2c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     a2e:	8f 5f       	subi	r24, 0xFF	; 255
     a30:	88 30       	cpi	r24, 0x08	; 8
     a32:	b0 f3       	brcs	.-20     	; 0xa20 <mcu_init+0x34>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	08 c0       	rjmp	.+16     	; 0xa48 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     a38:	e8 2f       	mov	r30, r24
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	e0 59       	subi	r30, 0x90	; 144
     a3e:	fb 4f       	sbci	r31, 0xFB	; 251
     a40:	90 81       	ld	r25, Z
     a42:	98 60       	ori	r25, 0x08	; 8
     a44:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     a46:	8f 5f       	subi	r24, 0xFF	; 255
     a48:	88 30       	cpi	r24, 0x08	; 8
     a4a:	b0 f3       	brcs	.-20     	; 0xa38 <mcu_init+0x4c>
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	08 c0       	rjmp	.+16     	; 0xa60 <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     a50:	e8 2f       	mov	r30, r24
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	e0 57       	subi	r30, 0x70	; 112
     a56:	fb 4f       	sbci	r31, 0xFB	; 251
     a58:	90 81       	ld	r25, Z
     a5a:	98 60       	ori	r25, 0x08	; 8
     a5c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     a5e:	8f 5f       	subi	r24, 0xFF	; 255
     a60:	88 30       	cpi	r24, 0x08	; 8
     a62:	b0 f3       	brcs	.-20     	; 0xa50 <mcu_init+0x64>
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	08 c0       	rjmp	.+16     	; 0xa78 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     a68:	e8 2f       	mov	r30, r24
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	e0 55       	subi	r30, 0x50	; 80
     a6e:	fb 4f       	sbci	r31, 0xFB	; 251
     a70:	90 81       	ld	r25, Z
     a72:	98 60       	ori	r25, 0x08	; 8
     a74:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     a76:	8f 5f       	subi	r24, 0xFF	; 255
     a78:	88 30       	cpi	r24, 0x08	; 8
     a7a:	b0 f3       	brcs	.-20     	; 0xa68 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     a7c:	08 95       	ret

00000a7e <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     a7e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <mcu_init>

	CLKCTRL_init(); /* Set CPU clock speed appropriately */
     a82:	0e 94 bc 04 	call	0x978	; 0x978 <CLKCTRL_init>
	TIMERB_init(); /* Timers must be initialized before utility_delay functions will work */
     a86:	0e 94 58 09 	call	0x12b0	; 0x12b0 <TIMERB_init>
	CPUINT_init(); /* Interrupts must also be enabled before timer interrupts will function */
     a8a:	0e 94 c4 04 	call	0x988	; 0x988 <CPUINT_init>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     a8e:	89 b1       	in	r24, 0x09	; 9
     a90:	8f 7b       	andi	r24, 0xBF	; 191
     a92:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     a94:	88 b1       	in	r24, 0x08	; 8
     a96:	80 64       	ori	r24, 0x40	; 64
     a98:	88 b9       	out	0x08, r24	; 8
	    false);

	LED_set_dir(PORT_DIR_OUT);


	SLPCTRL_init();
     a9a:	0e 94 56 09 	call	0x12ac	; 0x12ac <SLPCTRL_init>
	
	DAC0_init();
     a9e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <DAC0_init>

	CPUINT_init();
     aa2:	0e 94 c4 04 	call	0x988	; 0x988 <CPUINT_init>

	linkbus_init();
     aa6:	0e 94 b1 06 	call	0xd62	; 0xd62 <linkbus_init>

	BOD_init();
     aaa:	0e 94 b8 04 	call	0x970	; 0x970 <BOD_init>
     aae:	08 95       	ret

00000ab0 <I2C_1_WaitW>:
	
	/* Initialize the data register */
	TWI1.MDATA = 0x00;
	
	/* Set bus state idle */
	TWI1.MSTATUS = TWI_BUSSTATE_IDLE_gc;
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     ab6:	90 7c       	andi	r25, 0xC0	; 192
     ab8:	31 f0       	breq	.+12     	; 0xac6 <I2C_1_WaitW+0x16>
     aba:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     abe:	84 fd       	sbrc	r24, 4
     ac0:	07 c0       	rjmp	.+14     	; 0xad0 <I2C_1_WaitW+0x20>
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	08 c0       	rjmp	.+16     	; 0xad6 <I2C_1_WaitW+0x26>
     ac6:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     aca:	9c 70       	andi	r25, 0x0C	; 12
     acc:	19 f4       	brne	.+6      	; 0xad4 <I2C_1_WaitW+0x24>
     ace:	03 c0       	rjmp	.+6      	; 0xad6 <I2C_1_WaitW+0x26>
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <I2C_1_WaitW+0x26>
     ad4:	84 e0       	ldi	r24, 0x04	; 4
     ad6:	88 23       	and	r24, r24
     ad8:	61 f3       	breq	.-40     	; 0xab2 <I2C_1_WaitW+0x2>
     ada:	08 95       	ret

00000adc <I2C_1_WaitR>:
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     ae2:	90 7c       	andi	r25, 0xC0	; 192
     ae4:	29 f4       	brne	.+10     	; 0xaf0 <I2C_1_WaitR+0x14>
     ae6:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <__TEXT_REGION_LENGTH__+0x7e0925>
     aea:	9c 70       	andi	r25, 0x0C	; 12
     aec:	19 f4       	brne	.+6      	; 0xaf4 <I2C_1_WaitR+0x18>
     aee:	03 c0       	rjmp	.+6      	; 0xaf6 <I2C_1_WaitR+0x1a>
     af0:	83 e0       	ldi	r24, 0x03	; 3
     af2:	01 c0       	rjmp	.+2      	; 0xaf6 <I2C_1_WaitR+0x1a>
     af4:	84 e0       	ldi	r24, 0x04	; 4
     af6:	88 23       	and	r24, r24
     af8:	91 f3       	breq	.-28     	; 0xade <I2C_1_WaitR+0x2>
     afa:	08 95       	ret

00000afc <I2C_1_SendData>:
	return state;
}

/* Returns how many bytes have been sent, -1 means NACK at address, 0 means client ACKed to client address */
uint8_t I2C_1_SendData(uint8_t address, uint8_t *pData, uint8_t len)
{
     afc:	ff 92       	push	r15
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	8b 01       	movw	r16, r22
     b08:	d4 2f       	mov	r29, r20
	uint8_t retVal = (uint8_t) - 1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address & ~0x01;
     b0a:	8e 7f       	andi	r24, 0xFE	; 254
     b0c:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(I2C_1_WaitW() != I2C_ACKED)
     b10:	0e 94 58 05 	call	0xab0	; 0xab0 <I2C_1_WaitW>
     b14:	81 30       	cpi	r24, 0x01	; 1
     b16:	e1 f4       	brne	.+56     	; 0xb50 <I2C_1_SendData+0x54>
	return retVal;

	retVal = 0;
	if((len != 0) && (pData != NULL))
     b18:	dd 23       	and	r29, r29
     b1a:	e1 f0       	breq	.+56     	; 0xb54 <I2C_1_SendData+0x58>
     b1c:	01 15       	cp	r16, r1
     b1e:	11 05       	cpc	r17, r1
     b20:	79 f4       	brne	.+30     	; 0xb40 <I2C_1_SendData+0x44>
	/* start transmitting the client address */
	TWI1.MADDR = address & ~0x01;
	if(I2C_1_WaitW() != I2C_ACKED)
	return retVal;

	retVal = 0;
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	1a c0       	rjmp	.+52     	; 0xb5a <I2C_1_SendData+0x5e>
	if((len != 0) && (pData != NULL))
	{
		while(len--)
		{
			TWI1.MDATA = *pData;
     b26:	f8 01       	movw	r30, r16
     b28:	80 81       	ld	r24, Z
     b2a:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
			if(I2C_1_WaitW() == I2C_ACKED)
     b2e:	0e 94 58 05 	call	0xab0	; 0xab0 <I2C_1_WaitW>
     b32:	81 30       	cpi	r24, 0x01	; 1
     b34:	89 f4       	brne	.+34     	; 0xb58 <I2C_1_SendData+0x5c>
			{
				retVal++;
     b36:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
     b38:	0f 5f       	subi	r16, 0xFF	; 255
     b3a:	1f 4f       	sbci	r17, 0xFF	; 255
	return retVal;

	retVal = 0;
	if((len != 0) && (pData != NULL))
	{
		while(len--)
     b3c:	df 2d       	mov	r29, r15
			TWI1.MDATA = *pData;
			if(I2C_1_WaitW() == I2C_ACKED)
			{
				retVal++;
				pData++;
				continue;
     b3e:	01 c0       	rjmp	.+2      	; 0xb42 <I2C_1_SendData+0x46>
     b40:	c0 e0       	ldi	r28, 0x00	; 0
	return retVal;

	retVal = 0;
	if((len != 0) && (pData != NULL))
	{
		while(len--)
     b42:	ff 24       	eor	r15, r15
     b44:	fa 94       	dec	r15
     b46:	fd 0e       	add	r15, r29
     b48:	d1 11       	cpse	r29, r1
     b4a:	ed cf       	rjmp	.-38     	; 0xb26 <I2C_1_SendData+0x2a>
     b4c:	8c 2f       	mov	r24, r28
     b4e:	05 c0       	rjmp	.+10     	; 0xb5a <I2C_1_SendData+0x5e>
	uint8_t retVal = (uint8_t) - 1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address & ~0x01;
	if(I2C_1_WaitW() != I2C_ACKED)
	return retVal;
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	03 c0       	rjmp	.+6      	; 0xb5a <I2C_1_SendData+0x5e>

	retVal = 0;
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	01 c0       	rjmp	.+2      	; 0xb5a <I2C_1_SendData+0x5e>
     b58:	8c 2f       	mov	r24, r28
			}
		}
	}
	
	return retVal;
}
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	ff 90       	pop	r15
     b64:	08 95       	ret

00000b66 <I2C_1_GetData>:

/* Returns how many bytes have been received, -1 means NACK at address */
uint8_t I2C_1_GetData(uint8_t address, uint8_t *pData, uint8_t len)
{
     b66:	ff 92       	push	r15
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	8b 01       	movw	r16, r22
     b72:	d4 2f       	mov	r29, r20
	uint8_t retVal = (uint8_t) -1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address | 0x01;
     b74:	81 60       	ori	r24, 0x01	; 1
     b76:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <__TEXT_REGION_LENGTH__+0x7e0927>
	if(I2C_1_WaitW() != I2C_ACKED)
     b7a:	0e 94 58 05 	call	0xab0	; 0xab0 <I2C_1_WaitW>
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	69 f5       	brne	.+90     	; 0xbdc <I2C_1_GetData+0x76>
	return retVal;
	
	/* if pData[0] contains a register address, send it first */
	if(pData[0])
     b82:	f8 01       	movw	r30, r16
     b84:	80 81       	ld	r24, Z
     b86:	88 23       	and	r24, r24
     b88:	31 f0       	breq	.+12     	; 0xb96 <I2C_1_GetData+0x30>
	{
		TWI1.MDATA = pData[0];
     b8a:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
		if(I2C_1_WaitW() != I2C_ACKED)
     b8e:	0e 94 58 05 	call	0xab0	; 0xab0 <I2C_1_WaitW>
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	29 f5       	brne	.+74     	; 0xbe0 <I2C_1_GetData+0x7a>
			return retVal;
		}
	}

	retVal = 0;
	if((len != 0) && (pData !=NULL ))
     b96:	dd 23       	and	r29, r29
     b98:	29 f1       	breq	.+74     	; 0xbe4 <I2C_1_GetData+0x7e>
     b9a:	01 15       	cp	r16, r1
     b9c:	11 05       	cpc	r17, r1
     b9e:	b1 f4       	brne	.+44     	; 0xbcc <I2C_1_GetData+0x66>
		{
			return retVal;
		}
	}

	retVal = 0;
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	23 c0       	rjmp	.+70     	; 0xbea <I2C_1_GetData+0x84>
	if((len != 0) && (pData !=NULL ))
	{
		while(len--)
		{
			if(I2C_1_WaitR() == I2C_READY)
     ba4:	0e 94 6e 05 	call	0xadc	; 0xadc <I2C_1_WaitR>
     ba8:	83 30       	cpi	r24, 0x03	; 3
     baa:	f1 f4       	brne	.+60     	; 0xbe8 <I2C_1_GetData+0x82>
			{
				*pData = TWI1.MDATA;
     bac:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <__TEXT_REGION_LENGTH__+0x7e0928>
     bb0:	f8 01       	movw	r30, r16
     bb2:	80 83       	st	Z, r24
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
     bb4:	f1 10       	cpse	r15, r1
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <I2C_1_GetData+0x56>
     bb8:	87 e0       	ldi	r24, 0x07	; 7
     bba:	01 c0       	rjmp	.+2      	; 0xbbe <I2C_1_GetData+0x58>
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <__TEXT_REGION_LENGTH__+0x7e0924>
				retVal++;
     bc2:	cf 5f       	subi	r28, 0xFF	; 255
				pData++;
     bc4:	0f 5f       	subi	r16, 0xFF	; 255
     bc6:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	retVal = 0;
	if((len != 0) && (pData !=NULL ))
	{
		while(len--)
     bc8:	df 2d       	mov	r29, r15
			{
				*pData = TWI1.MDATA;
				TWI1.MCTRLB = (len == 0)? TWI_ACKACT_bm | TWI_MCMD_STOP_gc : TWI_MCMD_RECVTRANS_gc;
				retVal++;
				pData++;
				continue;
     bca:	01 c0       	rjmp	.+2      	; 0xbce <I2C_1_GetData+0x68>
     bcc:	c0 e0       	ldi	r28, 0x00	; 0
	}

	retVal = 0;
	if((len != 0) && (pData !=NULL ))
	{
		while(len--)
     bce:	ff 24       	eor	r15, r15
     bd0:	fa 94       	dec	r15
     bd2:	fd 0e       	add	r15, r29
     bd4:	d1 11       	cpse	r29, r1
     bd6:	e6 cf       	rjmp	.-52     	; 0xba4 <I2C_1_GetData+0x3e>
     bd8:	8c 2f       	mov	r24, r28
     bda:	07 c0       	rjmp	.+14     	; 0xbea <I2C_1_GetData+0x84>
	uint8_t retVal = (uint8_t) -1;
	
	/* start transmitting the client address */
	TWI1.MADDR = address | 0x01;
	if(I2C_1_WaitW() != I2C_ACKED)
	return retVal;
     bdc:	8f ef       	ldi	r24, 0xFF	; 255
     bde:	05 c0       	rjmp	.+10     	; 0xbea <I2C_1_GetData+0x84>
	if(pData[0])
	{
		TWI1.MDATA = pData[0];
		if(I2C_1_WaitW() != I2C_ACKED)
		{
			return retVal;
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	03 c0       	rjmp	.+6      	; 0xbea <I2C_1_GetData+0x84>
		}
	}

	retVal = 0;
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	01 c0       	rjmp	.+2      	; 0xbea <I2C_1_GetData+0x84>
     be8:	8c 2f       	mov	r24, r28
			break;
		}
	}
	
	return retVal;
}
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	ff 90       	pop	r15
     bf4:	08 95       	ret

00000bf6 <nextFullTxBuffer>:

	for(bufferIndex=0; bufferIndex<LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
	{
		tx_buffer[bufferIndex][0] = '\0';
	}
}
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0a c0       	rjmp	.+20     	; 0xc0e <nextFullTxBuffer+0x18>
     bfa:	9f 5f       	subi	r25, 0xFF	; 255
     bfc:	94 30       	cpi	r25, 0x04	; 4
     bfe:	c0 f4       	brcc	.+48     	; 0xc30 <nextFullTxBuffer+0x3a>
     c00:	8f 5f       	subi	r24, 0xFF	; 255
     c02:	80 93 e8 40 	sts	0x40E8, r24	; 0x8040e8 <bufferIndex.5228>
     c06:	84 30       	cpi	r24, 0x04	; 4
     c08:	10 f0       	brcs	.+4      	; 0xc0e <nextFullTxBuffer+0x18>
     c0a:	10 92 e8 40 	sts	0x40E8, r1	; 0x8040e8 <bufferIndex.5228>
     c0e:	80 91 e8 40 	lds	r24, 0x40E8	; 0x8040e8 <bufferIndex.5228>
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	42 e3       	ldi	r20, 0x32	; 50
     c18:	42 9f       	mul	r20, r18
     c1a:	f0 01       	movw	r30, r0
     c1c:	43 9f       	mul	r20, r19
     c1e:	f0 0d       	add	r31, r0
     c20:	11 24       	eor	r1, r1
     c22:	e3 59       	subi	r30, 0x93	; 147
     c24:	fe 4b       	sbci	r31, 0xBE	; 190
     c26:	40 81       	ld	r20, Z
     c28:	44 23       	and	r20, r20
     c2a:	39 f3       	breq	.-50     	; 0xbfa <nextFullTxBuffer+0x4>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <nextFullTxBuffer+0x3c>
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	88 23       	and	r24, r24
     c34:	49 f0       	breq	.+18     	; 0xc48 <nextFullTxBuffer+0x52>
     c36:	42 e3       	ldi	r20, 0x32	; 50
     c38:	42 9f       	mul	r20, r18
     c3a:	c0 01       	movw	r24, r0
     c3c:	43 9f       	mul	r20, r19
     c3e:	90 0d       	add	r25, r0
     c40:	11 24       	eor	r1, r1
     c42:	83 59       	subi	r24, 0x93	; 147
     c44:	9e 4b       	sbci	r25, 0xBE	; 190
     c46:	08 95       	ret
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	08 95       	ret

00000c4e <nextEmptyTxBuffer>:
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0a c0       	rjmp	.+20     	; 0xc66 <nextEmptyTxBuffer+0x18>
     c52:	9f 5f       	subi	r25, 0xFF	; 255
     c54:	94 30       	cpi	r25, 0x04	; 4
     c56:	c0 f4       	brcc	.+48     	; 0xc88 <nextEmptyTxBuffer+0x3a>
     c58:	8f 5f       	subi	r24, 0xFF	; 255
     c5a:	80 93 e7 40 	sts	0x40E7, r24	; 0x8040e7 <bufferIndex.5237>
     c5e:	84 30       	cpi	r24, 0x04	; 4
     c60:	10 f0       	brcs	.+4      	; 0xc66 <nextEmptyTxBuffer+0x18>
     c62:	10 92 e7 40 	sts	0x40E7, r1	; 0x8040e7 <bufferIndex.5237>
     c66:	80 91 e7 40 	lds	r24, 0x40E7	; 0x8040e7 <bufferIndex.5237>
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	42 e3       	ldi	r20, 0x32	; 50
     c70:	42 9f       	mul	r20, r18
     c72:	f0 01       	movw	r30, r0
     c74:	43 9f       	mul	r20, r19
     c76:	f0 0d       	add	r31, r0
     c78:	11 24       	eor	r1, r1
     c7a:	e3 59       	subi	r30, 0x93	; 147
     c7c:	fe 4b       	sbci	r31, 0xBE	; 190
     c7e:	40 81       	ld	r20, Z
     c80:	41 11       	cpse	r20, r1
     c82:	e7 cf       	rjmp	.-50     	; 0xc52 <nextEmptyTxBuffer+0x4>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <nextEmptyTxBuffer+0x3c>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	88 23       	and	r24, r24
     c8c:	49 f0       	breq	.+18     	; 0xca0 <nextEmptyTxBuffer+0x52>
     c8e:	42 e3       	ldi	r20, 0x32	; 50
     c90:	42 9f       	mul	r20, r18
     c92:	c0 01       	movw	r24, r0
     c94:	43 9f       	mul	r20, r19
     c96:	90 0d       	add	r25, r0
     c98:	11 24       	eor	r1, r1
     c9a:	83 59       	subi	r24, 0x93	; 147
     c9c:	9e 4b       	sbci	r25, 0xBE	; 190
     c9e:	08 95       	ret
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	08 95       	ret

00000ca6 <nextEmptyRxBuffer>:
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0a c0       	rjmp	.+20     	; 0xcbe <nextEmptyRxBuffer+0x18>
     caa:	9f 5f       	subi	r25, 0xFF	; 255
     cac:	92 30       	cpi	r25, 0x02	; 2
     cae:	c8 f4       	brcc	.+50     	; 0xce2 <nextEmptyRxBuffer+0x3c>
     cb0:	8f 5f       	subi	r24, 0xFF	; 255
     cb2:	80 93 e6 40 	sts	0x40E6, r24	; 0x8040e6 <bufferIndex.5246>
     cb6:	82 30       	cpi	r24, 0x02	; 2
     cb8:	10 f0       	brcs	.+4      	; 0xcbe <nextEmptyRxBuffer+0x18>
     cba:	10 92 e6 40 	sts	0x40E6, r1	; 0x8040e6 <bufferIndex.5246>
     cbe:	80 91 e6 40 	lds	r24, 0x40E6	; 0x8040e6 <bufferIndex.5246>
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	42 e4       	ldi	r20, 0x42	; 66
     cc8:	42 9f       	mul	r20, r18
     cca:	f0 01       	movw	r30, r0
     ccc:	43 9f       	mul	r20, r19
     cce:	f0 0d       	add	r31, r0
     cd0:	11 24       	eor	r1, r1
     cd2:	e7 51       	subi	r30, 0x17	; 23
     cd4:	ff 4b       	sbci	r31, 0xBF	; 191
     cd6:	41 81       	ldd	r20, Z+1	; 0x01
     cd8:	52 81       	ldd	r21, Z+2	; 0x02
     cda:	45 2b       	or	r20, r21
     cdc:	31 f7       	brne	.-52     	; 0xcaa <nextEmptyRxBuffer+0x4>
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	01 c0       	rjmp	.+2      	; 0xce4 <nextEmptyRxBuffer+0x3e>
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	88 23       	and	r24, r24
     ce6:	49 f0       	breq	.+18     	; 0xcfa <nextEmptyRxBuffer+0x54>
     ce8:	42 e4       	ldi	r20, 0x42	; 66
     cea:	42 9f       	mul	r20, r18
     cec:	c0 01       	movw	r24, r0
     cee:	43 9f       	mul	r20, r19
     cf0:	90 0d       	add	r25, r0
     cf2:	11 24       	eor	r1, r1
     cf4:	87 51       	subi	r24, 0x17	; 23
     cf6:	9f 4b       	sbci	r25, 0xBF	; 191
     cf8:	08 95       	ret
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	08 95       	ret

00000d00 <linkbusTxInProgress>:
     d00:	80 91 35 42 	lds	r24, 0x4235	; 0x804235 <linkbus_tx_active>
     d04:	08 95       	ret

00000d06 <linkbus_start_tx>:
     d06:	cf 93       	push	r28
     d08:	90 91 35 42 	lds	r25, 0x4235	; 0x804235 <linkbus_tx_active>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	91 11       	cpse	r25, r1
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	c8 2f       	mov	r28, r24
     d14:	91 11       	cpse	r25, r1
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <linkbus_start_tx+0x1c>
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	80 93 35 42 	sts	0x4235, r24	; 0x804235 <linkbus_tx_active>
     d1e:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <USART1_enable_tx>
     d22:	8c 2f       	mov	r24, r28
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret

00000d28 <linkbus_end_tx>:
     d28:	80 91 35 42 	lds	r24, 0x4235	; 0x804235 <linkbus_tx_active>
     d2c:	88 23       	and	r24, r24
     d2e:	39 f0       	breq	.+14     	; 0xd3e <linkbus_end_tx+0x16>
     d30:	e0 e2       	ldi	r30, 0x20	; 32
     d32:	f8 e0       	ldi	r31, 0x08	; 8
     d34:	85 81       	ldd	r24, Z+5	; 0x05
     d36:	8f 7d       	andi	r24, 0xDF	; 223
     d38:	85 83       	std	Z+5, r24	; 0x05
     d3a:	10 92 35 42 	sts	0x4235, r1	; 0x804235 <linkbus_tx_active>
     d3e:	08 95       	ret

00000d40 <USART1_initialization>:
     d40:	28 b1       	in	r18, 0x08	; 8
     d42:	2d 7f       	andi	r18, 0xFD	; 253
     d44:	28 b9       	out	0x08, r18	; 8
     d46:	e1 e5       	ldi	r30, 0x51	; 81
     d48:	f4 e0       	ldi	r31, 0x04	; 4
     d4a:	20 81       	ld	r18, Z
     d4c:	27 7f       	andi	r18, 0xF7	; 247
     d4e:	20 83       	st	Z, r18
     d50:	29 b1       	in	r18, 0x09	; 9
     d52:	2e 7f       	andi	r18, 0xFE	; 254
     d54:	29 b9       	out	0x09, r18	; 9
     d56:	28 b1       	in	r18, 0x08	; 8
     d58:	21 60       	ori	r18, 0x01	; 1
     d5a:	28 b9       	out	0x08, r18	; 8
     d5c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <USART1_init>
     d60:	08 95       	ret

00000d62 <linkbus_init>:
     d62:	84 e8       	ldi	r24, 0x84	; 132
     d64:	e9 ee       	ldi	r30, 0xE9	; 233
     d66:	f0 e4       	ldi	r31, 0x40	; 64
     d68:	df 01       	movw	r26, r30
     d6a:	1d 92       	st	X+, r1
     d6c:	8a 95       	dec	r24
     d6e:	e9 f7       	brne	.-6      	; 0xd6a <linkbus_init+0x8>
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0a c0       	rjmp	.+20     	; 0xd8a <linkbus_init+0x28>
     d76:	22 e3       	ldi	r18, 0x32	; 50
     d78:	28 9f       	mul	r18, r24
     d7a:	f0 01       	movw	r30, r0
     d7c:	29 9f       	mul	r18, r25
     d7e:	f0 0d       	add	r31, r0
     d80:	11 24       	eor	r1, r1
     d82:	e3 59       	subi	r30, 0x93	; 147
     d84:	fe 4b       	sbci	r31, 0xBE	; 190
     d86:	10 82       	st	Z, r1
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	91 05       	cpc	r25, r1
     d8e:	9c f3       	brlt	.-26     	; 0xd76 <linkbus_init+0x14>
     d90:	60 e8       	ldi	r22, 0x80	; 128
     d92:	75 e2       	ldi	r23, 0x25	; 37
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 a0 06 	call	0xd40	; 0xd40 <USART1_initialization>
     d9c:	10 92 0e 40 	sts	0x400E, r1	; 0x80400e <g_bus_disabled>
     da0:	08 95       	ret

00000da2 <linkbus_send_text>:


BOOL linkbus_send_text(char* text)
{
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled) return err;
     daa:	20 91 0e 40 	lds	r18, 0x400E	; 0x80400e <g_bus_disabled>
     dae:	21 11       	cpse	r18, r1
     db0:	27 c0       	rjmp	.+78     	; 0xe00 <linkbus_send_text+0x5e>

	if(text)
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	39 f1       	breq	.+78     	; 0xe04 <linkbus_send_text+0x62>
     db6:	8c 01       	movw	r16, r24
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();
     db8:	0e 94 27 06 	call	0xc4e	; 0xc4e <nextEmptyTxBuffer>


BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
	uint16_t tries = 200;
     dbc:	c8 ec       	ldi	r28, 0xC8	; 200
     dbe:	d0 e0       	ldi	r29, 0x00	; 0

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
     dc0:	0b c0       	rjmp	.+22     	; 0xdd8 <linkbus_send_text+0x36>
		{
			while(linkbusTxInProgress() && tries)
			{
				if(tries) tries--;   /* wait until transmit finishes */
     dc2:	20 97       	sbiw	r28, 0x00	; 0
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <linkbus_send_text+0x26>
     dc6:	21 97       	sbiw	r28, 0x01	; 1
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
		{
			while(linkbusTxInProgress() && tries)
     dc8:	0e 94 80 06 	call	0xd00	; 0xd00 <linkbusTxInProgress>
     dcc:	88 23       	and	r24, r24
     dce:	11 f0       	breq	.+4      	; 0xdd4 <linkbus_send_text+0x32>
     dd0:	20 97       	sbiw	r28, 0x00	; 0
     dd2:	b9 f7       	brne	.-18     	; 0xdc2 <linkbus_send_text+0x20>
			{
				if(tries) tries--;   /* wait until transmit finishes */
			}
			buff = nextEmptyTxBuffer();
     dd4:	0e 94 27 06 	call	0xc4e	; 0xc4e <nextEmptyTxBuffer>

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff && tries)
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	11 f4       	brne	.+4      	; 0xde0 <linkbus_send_text+0x3e>
     ddc:	20 97       	sbiw	r28, 0x00	; 0
     dde:	a1 f7       	brne	.-24     	; 0xdc8 <linkbus_send_text+0x26>
				if(tries) tries--;   /* wait until transmit finishes */
			}
			buff = nextEmptyTxBuffer();
		}

		if(buff)
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	91 f0       	breq	.+36     	; 0xe08 <linkbus_send_text+0x66>
		{
			sprintf(*buff, text);
     de4:	1f 93       	push	r17
     de6:	0f 93       	push	r16
     de8:	9f 93       	push	r25
     dea:	8f 93       	push	r24
     dec:	0e 94 92 0c 	call	0x1924	; 0x1924 <sprintf>

			linkbus_start_tx();
     df0:	0e 94 83 06 	call	0xd06	; 0xd06 <linkbus_start_tx>
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
//			USART1.TXDATAL = (*buff)[0]; /* send the first character */
			err = FALSE;
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	05 c0       	rjmp	.+10     	; 0xe0a <linkbus_send_text+0x68>
BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
	uint16_t tries = 200;

	if(g_bus_disabled) return err;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <linkbus_send_text+0x68>
}


BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <linkbus_send_text+0x68>
     e08:	81 e0       	ldi	r24, 0x01	; 1
			err = FALSE;
		}
	}

	return(err);
}
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	08 95       	ret

00000e14 <getMorseChar>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	fc 01       	movw	r30, r24
     e18:	b0 97       	sbiw	r30, 0x20	; 32
     e1a:	ed 35       	cpi	r30, 0x5D	; 93
     e1c:	f1 05       	cpc	r31, r1
     e1e:	08 f0       	brcs	.+2      	; 0xe22 <getMorseChar+0xe>
     e20:	e8 c0       	rjmp	.+464    	; 0xff2 <getMorseChar+0x1de>
     e22:	ec 58       	subi	r30, 0x8C	; 140
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	0c 94 81 0c 	jmp	0x1902	; 0x1902 <__tablejump2__>
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
     e2a:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 2;
     e2c:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
     e2e:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
     e30:	08 95       	ret

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     e32:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 4;
     e34:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
     e36:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     e38:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
     e3a:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
     e3c:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
     e3e:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     e40:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     e42:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
     e44:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
     e46:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     e48:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     e4a:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
     e4c:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 1;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
     e50:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
     e52:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
     e54:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
     e56:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     e58:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
     e5a:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
     e5c:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
     e5e:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     e60:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     e62:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
     e64:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 7;
     e66:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     e68:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     e6a:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
     e6c:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 3;
     e6e:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
     e70:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
     e72:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
     e74:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
     e76:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     e78:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
     e7a:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
     e7c:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
     e7e:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     e80:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
     e82:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
     e84:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
     e86:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     e88:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
     e8a:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
     e8c:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 7;
     e8e:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     e90:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     e92:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
     e94:	72 e0       	ldi	r23, 0x02	; 2
			morse.lengthInElements = 5;
     e96:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
     e98:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
     e9a:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
     e9c:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 11;
     e9e:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     ea0:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
     ea2:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
     ea4:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
     ea6:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     ea8:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
     eaa:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
     eac:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
     eae:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     eb0:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
     eb2:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
     eb4:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
     eb6:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     eb8:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     eba:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
     ebc:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 5;
     ebe:	85 e0       	ldi	r24, 0x05	; 5
		}
		break;
     ec0:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     ec2:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
     ec4:	71 e0       	ldi	r23, 0x01	; 1
			morse.lengthInElements = 3;
     ec6:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
     ec8:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
     eca:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
     ecc:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 7;
     ece:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     ed0:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
     ed2:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
     ed4:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 9;
     ed6:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     ed8:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
     eda:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
     edc:	73 e0       	ldi	r23, 0x03	; 3
			morse.lengthInElements = 9;
     ede:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     ee0:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
     ee2:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
     ee4:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
     ee6:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     ee8:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
     eea:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
     eec:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 13;
     eee:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     ef0:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
     ef2:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
     ef4:	74 e0       	ldi	r23, 0x04	; 4
			morse.lengthInElements = 11;
     ef6:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     ef8:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
     efa:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
     efc:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
     efe:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     f00:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
     f02:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
     f04:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
     f06:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     f08:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
     f0a:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
     f0c:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
     f0e:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     f10:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
     f12:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
     f14:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     f16:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     f18:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
     f1a:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
     f1c:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
     f1e:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     f20:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
     f22:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
     f24:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 9;
     f26:	89 e0       	ldi	r24, 0x09	; 9
		}
		break;
     f28:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
     f2a:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
     f2c:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
     f2e:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     f30:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
     f32:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
     f34:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     f36:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     f38:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
     f3a:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
     f3c:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
     f3e:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     f40:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
     f42:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
     f44:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 17;
     f46:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     f48:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
     f4a:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
     f4c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
     f4e:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     f50:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
     f52:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
     f54:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
     f56:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     f58:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
     f5a:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
     f5c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
     f5e:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     f60:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
     f62:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
     f64:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
     f66:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     f68:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
     f6a:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
     f6c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
     f6e:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     f70:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
     f72:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
     f74:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     f76:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     f78:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
     f7a:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
     f7c:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 15;
     f7e:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     f80:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
     f82:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
     f84:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 19;
     f86:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     f88:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
     f8a:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
     f8c:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 11;
     f8e:	8b e0       	ldi	r24, 0x0B	; 11
		}
		break;
     f90:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
     f92:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
     f94:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
     f96:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     f98:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
     f9a:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
     f9c:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 12;
     f9e:	8c e0       	ldi	r24, 0x0C	; 12
		}
		break;
     fa0:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
     fa2:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
     fa4:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     fa6:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     fa8:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
     faa:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
     fac:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 13;
     fae:	8d e0       	ldi	r24, 0x0D	; 13
		}
		break;
     fb0:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
     fb2:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
     fb4:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
     fb6:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     fb8:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
     fba:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
     fbc:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
     fbe:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     fc0:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
     fc2:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
     fc4:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 15;
     fc6:	8f e0       	ldi	r24, 0x0F	; 15
		}
		break;
     fc8:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
     fca:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
     fcc:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
     fce:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     fd0:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
     fd2:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
     fd4:	76 e0       	ldi	r23, 0x06	; 6
			morse.lengthInElements = 17;
     fd6:	81 e1       	ldi	r24, 0x11	; 17
		}
		break;
     fd8:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
     fda:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
     fdc:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
     fde:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;
     fe0:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
     fe2:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
     fe4:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
     fe6:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;
     fe8:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
     fea:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
     fec:	75 e0       	ldi	r23, 0x05	; 5
			morse.lengthInElements = 19;
     fee:	83 e1       	ldi	r24, 0x13	; 19
		}
		break;
     ff0:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
     ff2:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
     ff4:	70 e0       	ldi	r23, 0x00	; 0
			morse.lengthInElements = 0;
     ff6:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}

	return( morse);
}
     ff8:	08 95       	ret

00000ffa <makeMorse>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	b1 f1       	breq	.+108    	; 0x1070 <makeMorse+0x76>
	{
		holdKeyDown = FALSE;
    1004:	10 92 41 42 	sts	0x4241, r1	; 0x804241 <holdKeyDown.4196>

		if(repeating)
    1008:	61 15       	cp	r22, r1
    100a:	71 05       	cpc	r23, r1
    100c:	21 f0       	breq	.+8      	; 0x1016 <makeMorse+0x1c>
		{
			repeat = *repeating;
    100e:	db 01       	movw	r26, r22
    1010:	2c 91       	ld	r18, X
    1012:	20 93 10 40 	sts	0x4010, r18	; 0x804010 <repeat.4188>
		}

		if(*s)
    1016:	fc 01       	movw	r30, r24
    1018:	20 81       	ld	r18, Z
    101a:	22 23       	and	r18, r18
    101c:	d9 f0       	breq	.+54     	; 0x1054 <makeMorse+0x5a>
		{
			str = s;
    101e:	80 93 3f 42 	sts	0x423F, r24	; 0x80423f <str.4186>
    1022:	90 93 40 42 	sts	0x4240, r25	; 0x804240 <str.4186+0x1>
			c = ' ';
    1026:	80 e2       	ldi	r24, 0x20	; 32
    1028:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <c.4187>
			morseInProgress = getMorseChar(*str);
    102c:	82 2f       	mov	r24, r18
    102e:	0e 94 0a 07 	call	0xe14	; 0xe14 <getMorseChar>
    1032:	60 93 3c 42 	sts	0x423C, r22	; 0x80423c <morseInProgress.4189>
    1036:	70 93 3d 42 	sts	0x423D, r23	; 0x80423d <morseInProgress.4189+0x1>
    103a:	80 93 3e 42 	sts	0x423E, r24	; 0x80423e <morseInProgress.4189+0x2>
			charIndex = 0;
    103e:	10 92 3b 42 	sts	0x423B, r1	; 0x80423b <charIndex.4190>
			symbolIndex = 0;
    1042:	10 92 3a 42 	sts	0x423A, r1	; 0x80423a <symbolIndex.4191>
			elementIndex = 0;
    1046:	10 92 39 42 	sts	0x4239, r1	; 0x804239 <elementIndex.4192>
			addedSpace = 0;
    104a:	10 92 38 42 	sts	0x4238, r1	; 0x804238 <addedSpace.4193>
			completedString = FALSE;
    104e:	10 92 37 42 	sts	0x4237, r1	; 0x804237 <completedString.4194>
    1052:	0a c0       	rjmp	.+20     	; 0x1068 <makeMorse+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    1054:	10 92 3f 42 	sts	0x423F, r1	; 0x80423f <str.4186>
    1058:	10 92 40 42 	sts	0x4240, r1	; 0x804240 <str.4186+0x1>
			completedString = TRUE;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	80 93 37 42 	sts	0x4237, r24	; 0x804237 <completedString.4194>
			if(finished)
    1062:	20 97       	sbiw	r28, 0x00	; 0
    1064:	09 f0       	breq	.+2      	; 0x1068 <makeMorse+0x6e>
			{
				*finished = TRUE;
    1066:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    1068:	10 92 36 42 	sts	0x4236, r1	; 0x804236 <carrierOn.4195>
		return( OFF);
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	bb c0       	rjmp	.+374    	; 0x11e6 <makeMorse+0x1ec>
	}
	else if(str)
    1070:	e0 91 3f 42 	lds	r30, 0x423F	; 0x80423f <str.4186>
    1074:	f0 91 40 42 	lds	r31, 0x4240	; 0x804240 <str.4186+0x1>
    1078:	30 97       	sbiw	r30, 0x00	; 0
    107a:	09 f4       	brne	.+2      	; 0x107e <makeMorse+0x84>
    107c:	a5 c0       	rjmp	.+330    	; 0x11c8 <makeMorse+0x1ce>
	{
		if(repeating)
    107e:	61 15       	cp	r22, r1
    1080:	71 05       	cpc	r23, r1
    1082:	21 f0       	breq	.+8      	; 0x108c <makeMorse+0x92>
		{
			*repeating = repeat;
    1084:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <repeat.4188>
    1088:	db 01       	movw	r26, r22
    108a:	8c 93       	st	X, r24
		}

		if(completedString)
    108c:	80 91 37 42 	lds	r24, 0x4237	; 0x804237 <completedString.4194>
    1090:	88 23       	and	r24, r24
    1092:	49 f0       	breq	.+18     	; 0x10a6 <makeMorse+0xac>
		{
			if(finished)
    1094:	20 97       	sbiw	r28, 0x00	; 0
    1096:	09 f4       	brne	.+2      	; 0x109a <makeMorse+0xa0>
    1098:	a3 c0       	rjmp	.+326    	; 0x11e0 <makeMorse+0x1e6>
			{
				*finished = TRUE;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    109e:	10 92 41 42 	sts	0x4241, r1	; 0x804241 <holdKeyDown.4196>
			}
			return( OFF);
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	a0 c0       	rjmp	.+320    	; 0x11e6 <makeMorse+0x1ec>
		}

		if(elementIndex)
    10a6:	80 91 39 42 	lds	r24, 0x4239	; 0x804239 <elementIndex.4192>
    10aa:	88 23       	and	r24, r24
    10ac:	21 f0       	breq	.+8      	; 0x10b6 <makeMorse+0xbc>
		{
			elementIndex--;
    10ae:	81 50       	subi	r24, 0x01	; 1
    10b0:	80 93 39 42 	sts	0x4239, r24	; 0x804239 <elementIndex.4192>
    10b4:	7f c0       	rjmp	.+254    	; 0x11b4 <makeMorse+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    10b6:	80 91 36 42 	lds	r24, 0x4236	; 0x804236 <carrierOn.4195>
    10ba:	88 23       	and	r24, r24
    10bc:	81 f0       	breq	.+32     	; 0x10de <makeMorse+0xe4>
    10be:	80 91 41 42 	lds	r24, 0x4241	; 0x804241 <holdKeyDown.4196>
    10c2:	81 11       	cpse	r24, r1
    10c4:	0c c0       	rjmp	.+24     	; 0x10de <makeMorse+0xe4>
		{
			carrierOn = FALSE;
    10c6:	10 92 36 42 	sts	0x4236, r1	; 0x804236 <carrierOn.4195>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    10ca:	80 91 38 42 	lds	r24, 0x4238	; 0x804238 <addedSpace.4193>
    10ce:	88 23       	and	r24, r24
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <makeMorse+0xda>
    10d2:	70 c0       	rjmp	.+224    	; 0x11b4 <makeMorse+0x1ba>
			{
				elementIndex = addedSpace;
    10d4:	80 93 39 42 	sts	0x4239, r24	; 0x804239 <elementIndex.4192>
				addedSpace = 0;
    10d8:	10 92 38 42 	sts	0x4238, r1	; 0x804238 <addedSpace.4193>
    10dc:	6b c0       	rjmp	.+214    	; 0x11b4 <makeMorse+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    10de:	90 91 3d 42 	lds	r25, 0x423D	; 0x80423d <morseInProgress.4189+0x1>
    10e2:	80 91 3a 42 	lds	r24, 0x423A	; 0x80423a <symbolIndex.4191>
    10e6:	89 17       	cp	r24, r25
    10e8:	90 f1       	brcs	.+100    	; 0x114e <makeMorse+0x154>
			{
				c = (*(str + ++charIndex));
    10ea:	80 91 3b 42 	lds	r24, 0x423B	; 0x80423b <charIndex.4190>
    10ee:	8f 5f       	subi	r24, 0xFF	; 255
    10f0:	80 93 3b 42 	sts	0x423B, r24	; 0x80423b <charIndex.4190>
    10f4:	df 01       	movw	r26, r30
    10f6:	a8 0f       	add	r26, r24
    10f8:	b1 1d       	adc	r27, r1
    10fa:	8c 91       	ld	r24, X
    10fc:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <c.4187>

				if(!c)  /* wrap to beginning of text */
    1100:	81 11       	cpse	r24, r1
    1102:	19 c0       	rjmp	.+50     	; 0x1136 <makeMorse+0x13c>
				{
					if(repeat)
    1104:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <repeat.4188>
    1108:	88 23       	and	r24, r24
    110a:	31 f0       	breq	.+12     	; 0x1118 <makeMorse+0x11e>
					{
						c = *str;
    110c:	80 81       	ld	r24, Z
    110e:	80 93 0f 40 	sts	0x400F, r24	; 0x80400f <c.4187>
						charIndex = 0;
    1112:	10 92 3b 42 	sts	0x423B, r1	; 0x80423b <charIndex.4190>
    1116:	0f c0       	rjmp	.+30     	; 0x1136 <makeMorse+0x13c>
					}
					else
					{
						str = NULL;
    1118:	10 92 3f 42 	sts	0x423F, r1	; 0x80423f <str.4186>
    111c:	10 92 40 42 	sts	0x4240, r1	; 0x804240 <str.4186+0x1>
						carrierOn = OFF;
    1120:	10 92 36 42 	sts	0x4236, r1	; 0x804236 <carrierOn.4195>
						completedString = TRUE;
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	90 93 37 42 	sts	0x4237, r25	; 0x804237 <completedString.4194>
						if(finished)
    112a:	20 97       	sbiw	r28, 0x00	; 0
    112c:	09 f0       	breq	.+2      	; 0x1130 <makeMorse+0x136>
						{
							*finished = TRUE;
    112e:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    1130:	10 92 41 42 	sts	0x4241, r1	; 0x804241 <holdKeyDown.4196>
						return( OFF );
    1134:	58 c0       	rjmp	.+176    	; 0x11e6 <makeMorse+0x1ec>
					}
				}

				morseInProgress = getMorseChar(c);
    1136:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <c.4187>
    113a:	0e 94 0a 07 	call	0xe14	; 0xe14 <getMorseChar>
    113e:	60 93 3c 42 	sts	0x423C, r22	; 0x80423c <morseInProgress.4189>
    1142:	70 93 3d 42 	sts	0x423D, r23	; 0x80423d <morseInProgress.4189+0x1>
    1146:	80 93 3e 42 	sts	0x423E, r24	; 0x80423e <morseInProgress.4189+0x2>
				symbolIndex = 0;
    114a:	10 92 3a 42 	sts	0x423A, r1	; 0x80423a <symbolIndex.4191>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    114e:	20 91 3c 42 	lds	r18, 0x423C	; 0x80423c <morseInProgress.4189>
    1152:	2d 3f       	cpi	r18, 0xFD	; 253
    1154:	00 f5       	brcc	.+64     	; 0x1196 <makeMorse+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    1156:	40 91 3a 42 	lds	r20, 0x423A	; 0x80423a <symbolIndex.4191>
    115a:	31 e0       	ldi	r19, 0x01	; 1
    115c:	34 0f       	add	r19, r20
    115e:	30 93 3a 42 	sts	0x423A, r19	; 0x80423a <symbolIndex.4191>
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 c0       	rjmp	.+4      	; 0x116c <makeMorse+0x172>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	4a 95       	dec	r20
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <makeMorse+0x16e>
    1170:	82 23       	and	r24, r18

				if(isDah)
    1172:	21 f0       	breq	.+8      	; 0x117c <makeMorse+0x182>
				{
					elementIndex = 2;
    1174:	82 e0       	ldi	r24, 0x02	; 2
    1176:	80 93 39 42 	sts	0x4239, r24	; 0x804239 <elementIndex.4192>
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <makeMorse+0x186>
				}
				else
				{
					elementIndex = 0;
    117c:	10 92 39 42 	sts	0x4239, r1	; 0x804239 <elementIndex.4192>
				}

				carrierOn = TRUE;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	80 93 36 42 	sts	0x4236, r24	; 0x804236 <carrierOn.4195>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    1186:	80 91 3d 42 	lds	r24, 0x423D	; 0x80423d <morseInProgress.4189+0x1>
    118a:	38 17       	cp	r19, r24
    118c:	98 f0       	brcs	.+38     	; 0x11b4 <makeMorse+0x1ba>
				{
					addedSpace = 2;
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	80 93 38 42 	sts	0x4238, r24	; 0x804238 <addedSpace.4193>
    1194:	0f c0       	rjmp	.+30     	; 0x11b4 <makeMorse+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    1196:	80 91 3d 42 	lds	r24, 0x423D	; 0x80423d <morseInProgress.4189+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    119a:	9f ef       	ldi	r25, 0xFF	; 255
    119c:	90 93 3a 42 	sts	0x423A, r25	; 0x80423a <symbolIndex.4191>
				carrierOn = FALSE;
    11a0:	10 92 36 42 	sts	0x4236, r1	; 0x804236 <carrierOn.4195>
				if(sym >= 4 )
    11a4:	84 30       	cpi	r24, 0x04	; 4
    11a6:	20 f0       	brcs	.+8      	; 0x11b0 <makeMorse+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    11a8:	84 50       	subi	r24, 0x04	; 4
    11aa:	80 93 39 42 	sts	0x4239, r24	; 0x804239 <elementIndex.4192>
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <makeMorse+0x1ba>
				}
				else
				{
					elementIndex = 0;
    11b0:	10 92 39 42 	sts	0x4239, r1	; 0x804239 <elementIndex.4192>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    11b4:	80 91 0f 40 	lds	r24, 0x400F	; 0x80400f <c.4187>
    11b8:	8c 33       	cpi	r24, 0x3C	; 60
    11ba:	21 f4       	brne	.+8      	; 0x11c4 <makeMorse+0x1ca>
		{
			holdKeyDown = TRUE;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	80 93 41 42 	sts	0x4241, r24	; 0x804241 <holdKeyDown.4196>
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <makeMorse+0x1ce>
		}
		else
		{
			holdKeyDown = FALSE;
    11c4:	10 92 41 42 	sts	0x4241, r1	; 0x804241 <holdKeyDown.4196>
		}
	}

	if(finished)
    11c8:	20 97       	sbiw	r28, 0x00	; 0
    11ca:	19 f0       	breq	.+6      	; 0x11d2 <makeMorse+0x1d8>
	{
		*finished = completedString;
    11cc:	80 91 37 42 	lds	r24, 0x4237	; 0x804237 <completedString.4194>
    11d0:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    11d2:	80 91 41 42 	lds	r24, 0x4241	; 0x804241 <holdKeyDown.4196>
    11d6:	81 11       	cpse	r24, r1
    11d8:	05 c0       	rjmp	.+10     	; 0x11e4 <makeMorse+0x1ea>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    11da:	80 91 36 42 	lds	r24, 0x4236	; 0x804236 <carrierOn.4195>
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <makeMorse+0x1ec>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <makeMorse+0x1ec>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    11e4:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	08 95       	ret

000011ec <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    11ec:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    11ee:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    11f0:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    11f2:	40 83       	st	Z, r20
	ret                             // Return to caller
    11f4:	08 95       	ret

000011f6 <si5351_write_bulk>:
			data[1] = reg_val;
			err |= si5351_write_bulk(data, 2);
		}

		return err;
	}
    11f6:	cf 93       	push	r28
    11f8:	c6 2f       	mov	r28, r22
    11fa:	46 2f       	mov	r20, r22
    11fc:	bc 01       	movw	r22, r24
    11fe:	80 ec       	ldi	r24, 0xC0	; 192
    1200:	0e 94 7e 05 	call	0xafc	; 0xafc <I2C_1_SendData>
    1204:	91 e0       	ldi	r25, 0x01	; 1
    1206:	c8 13       	cpse	r28, r24
    1208:	01 c0       	rjmp	.+2      	; 0x120c <si5351_write_bulk+0x16>
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	89 2f       	mov	r24, r25
    120e:	cf 91       	pop	r28
    1210:	08 95       	ret

00001212 <si5351_read_bulk>:
    1212:	cf 93       	push	r28
    1214:	c6 2f       	mov	r28, r22
    1216:	46 2f       	mov	r20, r22
    1218:	bc 01       	movw	r22, r24
    121a:	80 ec       	ldi	r24, 0xC0	; 192
    121c:	0e 94 b3 05 	call	0xb66	; 0xb66 <I2C_1_GetData>
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	c8 13       	cpse	r28, r24
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <si5351_read_bulk+0x16>
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	89 2f       	mov	r24, r25
    122a:	cf 91       	pop	r28
    122c:	08 95       	ret

0000122e <si5351_clock_enable>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	EC si5351_clock_enable(Si5351_clock clk, BOOL enable)
	{
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	00 d0       	rcall	.+0      	; 0x1238 <si5351_clock_enable+0xa>
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	18 2f       	mov	r17, r24
    123e:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t data[2];
		
		data[0] = SI5351_OUTPUT_ENABLE_CTRL;
    1240:	83 e0       	ldi	r24, 0x03	; 3
    1242:	89 83       	std	Y+1, r24	; 0x01

		if(si5351_read_bulk(data, 1)) 
    1244:	61 e0       	ldi	r22, 0x01	; 1
    1246:	ce 01       	movw	r24, r28
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	0e 94 09 09 	call	0x1212	; 0x1212 <si5351_read_bulk>
    124e:	81 11       	cpse	r24, r1
    1250:	23 c0       	rjmp	.+70     	; 0x1298 <si5351_clock_enable+0x6a>
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
		}
		
		reg_val = data[0];
    1252:	99 81       	ldd	r25, Y+1	; 0x01

		if(enable)
    1254:	00 23       	and	r16, r16
    1256:	59 f0       	breq	.+22     	; 0x126e <si5351_clock_enable+0x40>
		{
			reg_val &= ~(1 << (uint8_t)clk);
    1258:	21 e0       	ldi	r18, 0x01	; 1
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <si5351_clock_enable+0x34>
    125e:	22 0f       	add	r18, r18
    1260:	33 1f       	adc	r19, r19
    1262:	1a 95       	dec	r17
    1264:	e2 f7       	brpl	.-8      	; 0x125e <si5351_clock_enable+0x30>
    1266:	82 2f       	mov	r24, r18
    1268:	80 95       	com	r24
    126a:	89 23       	and	r24, r25
    126c:	09 c0       	rjmp	.+18     	; 0x1280 <si5351_clock_enable+0x52>
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    126e:	21 e0       	ldi	r18, 0x01	; 1
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <si5351_clock_enable+0x4a>
    1274:	22 0f       	add	r18, r18
    1276:	33 1f       	adc	r19, r19
    1278:	1a 95       	dec	r17
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <si5351_clock_enable+0x46>
    127c:	89 2f       	mov	r24, r25
    127e:	82 2b       	or	r24, r18
		}

		data[0] = SI5351_OUTPUT_ENABLE_CTRL;
    1280:	93 e0       	ldi	r25, 0x03	; 3
    1282:	99 83       	std	Y+1, r25	; 0x01
		data[1] = reg_val;
    1284:	8a 83       	std	Y+2, r24	; 0x02
		if(si5351_write_bulk(data, 2)) return ERROR_CODE_RTC_NONRESPONSIVE;
    1286:	62 e0       	ldi	r22, 0x02	; 2
    1288:	ce 01       	movw	r24, r28
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <si5351_write_bulk>
    1290:	88 23       	and	r24, r24
    1292:	21 f0       	breq	.+8      	; 0x129c <si5351_clock_enable+0x6e>
    1294:	8c ef       	ldi	r24, 0xFC	; 252
    1296:	03 c0       	rjmp	.+6      	; 0x129e <si5351_clock_enable+0x70>
		
		data[0] = SI5351_OUTPUT_ENABLE_CTRL;

		if(si5351_read_bulk(data, 1)) 
		{
			return ERROR_CODE_RTC_NONRESPONSIVE;
    1298:	8c ef       	ldi	r24, 0xFC	; 252
    129a:	01 c0       	rjmp	.+2      	; 0x129e <si5351_clock_enable+0x70>

		data[0] = SI5351_OUTPUT_ENABLE_CTRL;
		data[1] = reg_val;
		if(si5351_write_bulk(data, 2)) return ERROR_CODE_RTC_NONRESPONSIVE;

		return ERROR_CODE_NO_ERROR;
    129c:	80 e0       	ldi	r24, 0x00	; 0
	}
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	08 95       	ret

000012ac <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	08 95       	ret

000012b0 <TIMERB_init>:
 *
 * \return Initialization status.
 */
int8_t TIMERB_init()
{
TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    12b0:	e0 e0       	ldi	r30, 0x00	; 0
    12b2:	fb e0       	ldi	r31, 0x0B	; 11
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	85 83       	std	Z+5, r24	; 0x05
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

// Set TOP
TCB0.CCMP = 0x9C40;
    12b8:	20 e4       	ldi	r18, 0x40	; 64
    12ba:	3c e9       	ldi	r19, 0x9C	; 156
    12bc:	24 87       	std	Z+12, r18	; 0x0c
    12be:	35 87       	std	Z+13, r19	; 0x0d

TCB0.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
    12c0:	93 e0       	ldi	r25, 0x03	; 3
    12c2:	90 83       	st	Z, r25
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

TCB0.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    12c4:	86 83       	std	Z+6, r24	; 0x06

/********************************************************************************/

TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    12c6:	e0 e1       	ldi	r30, 0x10	; 16
    12c8:	fb e0       	ldi	r31, 0x0B	; 11
    12ca:	85 83       	std	Z+5, r24	; 0x05
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

// Set TOP
TCB1.CCMP = 0x5DC0;
    12cc:	40 ec       	ldi	r20, 0xC0	; 192
    12ce:	5d e5       	ldi	r21, 0x5D	; 93
    12d0:	44 87       	std	Z+12, r20	; 0x0c
    12d2:	55 87       	std	Z+13, r21	; 0x0d

TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    12d4:	80 83       	st	Z, r24
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

TCB1.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    12d6:	86 83       	std	Z+6, r24	; 0x06


/********************************************************************************/

TCB3.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    12d8:	e0 e3       	ldi	r30, 0x30	; 48
    12da:	fb e0       	ldi	r31, 0x0B	; 11
    12dc:	85 83       	std	Z+5, r24	; 0x05
| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

// Set TOP
TCB3.CCMP = 0x9C40;
    12de:	24 87       	std	Z+12, r18	; 0x0c
    12e0:	35 87       	std	Z+13, r19	; 0x0d

TCB3.CTRLA = TCB_CLKSEL_DIV2_gc     /* CLK_PER */
    12e2:	90 83       	st	Z, r25
| 1 << TCB_ENABLE_bp   /* Enable: enabled */
| 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
| 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
| 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

TCB3.INTFLAGS = TCB_CAPT_bm; /* Clear flag */
    12e4:	86 83       	std	Z+6, r24	; 0x06

	return 0;
}
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	08 95       	ret

000012ea <util_delay_ms>:


bool util_delay_ms(uint32_t delayValue)
{
    12ea:	0f 93       	push	r16
    12ec:	1f 93       	push	r17
	static uint32_t countdownValue=0;
	static bool counting = false;
	
	if(delayValue)
    12ee:	61 15       	cp	r22, r1
    12f0:	71 05       	cpc	r23, r1
    12f2:	81 05       	cpc	r24, r1
    12f4:	91 05       	cpc	r25, r1
    12f6:	09 f4       	brne	.+2      	; 0x12fa <util_delay_ms+0x10>
    12f8:	67 c0       	rjmp	.+206    	; 0x13c8 <util_delay_ms+0xde>
	{
		if(counting)
    12fa:	20 91 46 42 	lds	r18, 0x4246	; 0x804246 <counting.4075>
    12fe:	22 23       	and	r18, r18
    1300:	f1 f1       	breq	.+124    	; 0x137e <util_delay_ms+0x94>
		{
			if(!g_ms_counter)
    1302:	00 91 47 42 	lds	r16, 0x4247	; 0x804247 <g_ms_counter>
    1306:	10 91 48 42 	lds	r17, 0x4248	; 0x804248 <g_ms_counter+0x1>
    130a:	20 91 49 42 	lds	r18, 0x4249	; 0x804249 <g_ms_counter+0x2>
    130e:	30 91 4a 42 	lds	r19, 0x424A	; 0x80424a <g_ms_counter+0x3>
    1312:	01 2b       	or	r16, r17
    1314:	02 2b       	or	r16, r18
    1316:	03 2b       	or	r16, r19
    1318:	71 f4       	brne	.+28     	; 0x1336 <util_delay_ms+0x4c>
			{
				TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    131a:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
				| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

				counting = false;
    131e:	10 92 46 42 	sts	0x4246, r1	; 0x804246 <counting.4075>
				countdownValue = 0;
    1322:	10 92 42 42 	sts	0x4242, r1	; 0x804242 <countdownValue.4074>
    1326:	10 92 43 42 	sts	0x4243, r1	; 0x804243 <countdownValue.4074+0x1>
    132a:	10 92 44 42 	sts	0x4244, r1	; 0x804244 <countdownValue.4074+0x2>
    132e:	10 92 45 42 	sts	0x4245, r1	; 0x804245 <countdownValue.4074+0x3>
				return(false); /* time expired */
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	62 c0       	rjmp	.+196    	; 0x13fa <util_delay_ms+0x110>
			}
			else if(delayValue != countdownValue) /* countdown delay changed */
    1336:	00 91 42 42 	lds	r16, 0x4242	; 0x804242 <countdownValue.4074>
    133a:	10 91 43 42 	lds	r17, 0x4243	; 0x804243 <countdownValue.4074+0x1>
    133e:	20 91 44 42 	lds	r18, 0x4244	; 0x804244 <countdownValue.4074+0x2>
    1342:	30 91 45 42 	lds	r19, 0x4245	; 0x804245 <countdownValue.4074+0x3>
    1346:	60 17       	cp	r22, r16
    1348:	71 07       	cpc	r23, r17
    134a:	82 07       	cpc	r24, r18
    134c:	93 07       	cpc	r25, r19
    134e:	09 f4       	brne	.+2      	; 0x1352 <util_delay_ms+0x68>
    1350:	51 c0       	rjmp	.+162    	; 0x13f4 <util_delay_ms+0x10a>
			{
				TCB1.CNT = 0x0000;
    1352:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    1356:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
				countdownValue = delayValue;
    135a:	60 93 42 42 	sts	0x4242, r22	; 0x804242 <countdownValue.4074>
    135e:	70 93 43 42 	sts	0x4243, r23	; 0x804243 <countdownValue.4074+0x1>
    1362:	80 93 44 42 	sts	0x4244, r24	; 0x804244 <countdownValue.4074+0x2>
    1366:	90 93 45 42 	sts	0x4245, r25	; 0x804245 <countdownValue.4074+0x3>
				g_ms_counter = delayValue;
    136a:	60 93 47 42 	sts	0x4247, r22	; 0x804247 <g_ms_counter>
    136e:	70 93 48 42 	sts	0x4248, r23	; 0x804248 <g_ms_counter+0x1>
    1372:	80 93 49 42 	sts	0x4249, r24	; 0x804249 <g_ms_counter+0x2>
    1376:	90 93 4a 42 	sts	0x424A, r25	; 0x80424a <g_ms_counter+0x3>
				return(false);
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	3e c0       	rjmp	.+124    	; 0x13fa <util_delay_ms+0x110>
			}
		}
		else if(delayValue != countdownValue)
    137e:	00 91 42 42 	lds	r16, 0x4242	; 0x804242 <countdownValue.4074>
    1382:	10 91 43 42 	lds	r17, 0x4243	; 0x804243 <countdownValue.4074+0x1>
    1386:	20 91 44 42 	lds	r18, 0x4244	; 0x804244 <countdownValue.4074+0x2>
    138a:	30 91 45 42 	lds	r19, 0x4245	; 0x804245 <countdownValue.4074+0x3>
    138e:	60 17       	cp	r22, r16
    1390:	71 07       	cpc	r23, r17
    1392:	82 07       	cpc	r24, r18
    1394:	93 07       	cpc	r25, r19
    1396:	71 f1       	breq	.+92     	; 0x13f4 <util_delay_ms+0x10a>
		{
			TCB1.CNT = 0x0000;
    1398:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7e0b1a>
    139c:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <__TEXT_REGION_LENGTH__+0x7e0b1b>
			countdownValue = delayValue;
    13a0:	60 93 42 42 	sts	0x4242, r22	; 0x804242 <countdownValue.4074>
    13a4:	70 93 43 42 	sts	0x4243, r23	; 0x804243 <countdownValue.4074+0x1>
    13a8:	80 93 44 42 	sts	0x4244, r24	; 0x804244 <countdownValue.4074+0x2>
    13ac:	90 93 45 42 	sts	0x4245, r25	; 0x804245 <countdownValue.4074+0x3>
			g_ms_counter = delayValue;
    13b0:	60 93 47 42 	sts	0x4247, r22	; 0x804247 <g_ms_counter>
    13b4:	70 93 48 42 	sts	0x4248, r23	; 0x804248 <g_ms_counter+0x1>
    13b8:	80 93 49 42 	sts	0x4249, r24	; 0x804249 <g_ms_counter+0x2>
    13bc:	90 93 4a 42 	sts	0x424A, r25	; 0x80424a <g_ms_counter+0x3>
			counting = true;
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	80 93 46 42 	sts	0x4246, r24	; 0x804246 <counting.4075>
    13c6:	16 c0       	rjmp	.+44     	; 0x13f4 <util_delay_ms+0x10a>
		}
	}
	else
	{
		TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    13c8:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
		| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

		counting = false;
    13cc:	10 92 46 42 	sts	0x4246, r1	; 0x804246 <counting.4075>
		countdownValue = 0;
    13d0:	10 92 42 42 	sts	0x4242, r1	; 0x804242 <countdownValue.4074>
    13d4:	10 92 43 42 	sts	0x4243, r1	; 0x804243 <countdownValue.4074+0x1>
    13d8:	10 92 44 42 	sts	0x4244, r1	; 0x804244 <countdownValue.4074+0x2>
    13dc:	10 92 45 42 	sts	0x4245, r1	; 0x804245 <countdownValue.4074+0x3>
		g_ms_counter = 0;
    13e0:	10 92 47 42 	sts	0x4247, r1	; 0x804247 <g_ms_counter>
    13e4:	10 92 48 42 	sts	0x4248, r1	; 0x804248 <g_ms_counter+0x1>
    13e8:	10 92 49 42 	sts	0x4249, r1	; 0x804249 <g_ms_counter+0x2>
    13ec:	10 92 4a 42 	sts	0x424A, r1	; 0x80424a <g_ms_counter+0x3>
		return(false); /* timer reset */
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	03 c0       	rjmp	.+6      	; 0x13fa <util_delay_ms+0x110>
	}
	
	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
	| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
	
	return(true);
}
    13fa:	1f 91       	pop	r17
    13fc:	0f 91       	pop	r16
    13fe:	08 95       	ret

00001400 <__vector_13>:

/**
One millisecond utility counter based on CPU clock.
*/
ISR(TCB1_INT_vect)
{
    1400:	1f 92       	push	r1
    1402:	0f 92       	push	r0
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	0f 92       	push	r0
    1408:	11 24       	eor	r1, r1
    140a:	8f 93       	push	r24
    140c:	9f 93       	push	r25
    140e:	af 93       	push	r26
    1410:	bf 93       	push	r27
    if(TCB1.INTFLAGS & TCB_CAPT_bm)
    1412:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    1416:	80 ff       	sbrs	r24, 0
    1418:	1d c0       	rjmp	.+58     	; 0x1454 <__vector_13+0x54>
    {
		if(g_ms_counter) /* check for 1-second interval */
    141a:	80 91 47 42 	lds	r24, 0x4247	; 0x804247 <g_ms_counter>
    141e:	90 91 48 42 	lds	r25, 0x4248	; 0x804248 <g_ms_counter+0x1>
    1422:	a0 91 49 42 	lds	r26, 0x4249	; 0x804249 <g_ms_counter+0x2>
    1426:	b0 91 4a 42 	lds	r27, 0x424A	; 0x80424a <g_ms_counter+0x3>
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	a1 05       	cpc	r26, r1
    142e:	b1 05       	cpc	r27, r1
    1430:	61 f0       	breq	.+24     	; 0x144a <__vector_13+0x4a>
		{
			g_ms_counter--;	
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	a1 09       	sbc	r26, r1
    1436:	b1 09       	sbc	r27, r1
    1438:	80 93 47 42 	sts	0x4247, r24	; 0x804247 <g_ms_counter>
    143c:	90 93 48 42 	sts	0x4248, r25	; 0x804248 <g_ms_counter+0x1>
    1440:	a0 93 49 42 	sts	0x4249, r26	; 0x804249 <g_ms_counter+0x2>
    1444:	b0 93 4a 42 	sts	0x424A, r27	; 0x80424a <g_ms_counter+0x3>
    1448:	02 c0       	rjmp	.+4      	; 0x144e <__vector_13+0x4e>
		}
		else
		{
			TCB1.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    144a:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <__TEXT_REGION_LENGTH__+0x7e0b15>
			| 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */
		}

        TCB1.INTFLAGS = TCB_CAPT_bm; /* clear interrupt flag */
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
    }
}
    1454:	bf 91       	pop	r27
    1456:	af 91       	pop	r26
    1458:	9f 91       	pop	r25
    145a:	8f 91       	pop	r24
    145c:	0f 90       	pop	r0
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	0f 90       	pop	r0
    1462:	1f 90       	pop	r1
    1464:	18 95       	reti

00001466 <powerToTransmitter>:
		{
// 			PORTB &= ~(1 << PORTB1);  /* Turn off 80m band */
		}

		return(result);
	}
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	08 95       	ret

0000146a <keyTransmitter>:

	void keyTransmitter(BOOL on)
	{
		if(on)
    146a:	88 23       	and	r24, r24
    146c:	61 f0       	breq	.+24     	; 0x1486 <keyTransmitter+0x1c>
		{
			if(!g_transmitter_keyed)
    146e:	80 91 4b 42 	lds	r24, 0x424B	; 0x80424b <g_transmitter_keyed>
    1472:	81 11       	cpse	r24, r1
    1474:	0e c0       	rjmp	.+28     	; 0x1492 <keyTransmitter+0x28>
			{
				si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_ENABLED);
    1476:	61 e0       	ldi	r22, 0x01	; 1
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	0e 94 17 09 	call	0x122e	; 0x122e <si5351_clock_enable>
				g_transmitter_keyed = TRUE;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	80 93 4b 42 	sts	0x424B, r24	; 0x80424b <g_transmitter_keyed>
    1484:	08 95       	ret
			}
		}
		else
		{
			si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED);
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	0e 94 17 09 	call	0x122e	; 0x122e <si5351_clock_enable>
			g_transmitter_keyed = FALSE;
    148e:	10 92 4b 42 	sts	0x424B, r1	; 0x80424b <g_transmitter_keyed>
    1492:	08 95       	ret

00001494 <USART1_init>:
 *
 * \return Nothing
 */
void USART1_disable()
{
	USART1.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
    1494:	0e 94 86 0b 	call	0x170c	; 0x170c <__floatunsisf>
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	51 e4       	ldi	r21, 0x41	; 65
    14a0:	0e 94 14 0c 	call	0x1828	; 0x1828 <__mulsf3>
    14a4:	9b 01       	movw	r18, r22
    14a6:	ac 01       	movw	r20, r24
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	7b e1       	ldi	r23, 0x1B	; 27
    14ac:	87 eb       	ldi	r24, 0xB7	; 183
    14ae:	9e e4       	ldi	r25, 0x4E	; 78
    14b0:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__divsf3>
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__addsf3>
    14c0:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__fixunssfsi>
    14c4:	e0 e2       	ldi	r30, 0x20	; 32
    14c6:	f8 e0       	ldi	r31, 0x08	; 8
    14c8:	60 87       	std	Z+8, r22	; 0x08
    14ca:	71 87       	std	Z+9, r23	; 0x09
    14cc:	80 e8       	ldi	r24, 0x80	; 128
    14ce:	85 83       	std	Z+5, r24	; 0x05
    14d0:	80 ec       	ldi	r24, 0xC0	; 192
    14d2:	86 83       	std	Z+6, r24	; 0x06
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	08 95       	ret

000014d8 <USART1_enable_tx>:
    14d8:	e0 e2       	ldi	r30, 0x20	; 32
    14da:	f8 e0       	ldi	r31, 0x08	; 8
    14dc:	86 81       	ldd	r24, Z+6	; 0x06
    14de:	80 64       	ori	r24, 0x40	; 64
    14e0:	86 83       	std	Z+6, r24	; 0x06
    14e2:	85 81       	ldd	r24, Z+5	; 0x05
    14e4:	80 62       	ori	r24, 0x20	; 32
    14e6:	85 83       	std	Z+5, r24	; 0x05
    14e8:	08 95       	ret

000014ea <USART1_get_data>:
 *
 * \return Data register from USART1 module
 */
uint8_t USART1_get_data()
{
	return USART1.RXDATAL;
    14ea:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
}
    14ee:	08 95       	ret

000014f0 <__subsf3>:
    14f0:	50 58       	subi	r21, 0x80	; 128

000014f2 <__addsf3>:
    14f2:	bb 27       	eor	r27, r27
    14f4:	aa 27       	eor	r26, r26
    14f6:	0e 94 90 0a 	call	0x1520	; 0x1520 <__addsf3x>
    14fa:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__fp_round>
    14fe:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fp_pscA>
    1502:	38 f0       	brcs	.+14     	; 0x1512 <__addsf3+0x20>
    1504:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__fp_pscB>
    1508:	20 f0       	brcs	.+8      	; 0x1512 <__addsf3+0x20>
    150a:	39 f4       	brne	.+14     	; 0x151a <__addsf3+0x28>
    150c:	9f 3f       	cpi	r25, 0xFF	; 255
    150e:	19 f4       	brne	.+6      	; 0x1516 <__addsf3+0x24>
    1510:	26 f4       	brtc	.+8      	; 0x151a <__addsf3+0x28>
    1512:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_nan>
    1516:	0e f4       	brtc	.+2      	; 0x151a <__addsf3+0x28>
    1518:	e0 95       	com	r30
    151a:	e7 fb       	bst	r30, 7
    151c:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_inf>

00001520 <__addsf3x>:
    1520:	e9 2f       	mov	r30, r25
    1522:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fp_split3>
    1526:	58 f3       	brcs	.-42     	; 0x14fe <__addsf3+0xc>
    1528:	ba 17       	cp	r27, r26
    152a:	62 07       	cpc	r22, r18
    152c:	73 07       	cpc	r23, r19
    152e:	84 07       	cpc	r24, r20
    1530:	95 07       	cpc	r25, r21
    1532:	20 f0       	brcs	.+8      	; 0x153c <__addsf3x+0x1c>
    1534:	79 f4       	brne	.+30     	; 0x1554 <__addsf3x+0x34>
    1536:	a6 f5       	brtc	.+104    	; 0x15a0 <__addsf3x+0x80>
    1538:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__fp_zero>
    153c:	0e f4       	brtc	.+2      	; 0x1540 <__addsf3x+0x20>
    153e:	e0 95       	com	r30
    1540:	0b 2e       	mov	r0, r27
    1542:	ba 2f       	mov	r27, r26
    1544:	a0 2d       	mov	r26, r0
    1546:	0b 01       	movw	r0, r22
    1548:	b9 01       	movw	r22, r18
    154a:	90 01       	movw	r18, r0
    154c:	0c 01       	movw	r0, r24
    154e:	ca 01       	movw	r24, r20
    1550:	a0 01       	movw	r20, r0
    1552:	11 24       	eor	r1, r1
    1554:	ff 27       	eor	r31, r31
    1556:	59 1b       	sub	r21, r25
    1558:	99 f0       	breq	.+38     	; 0x1580 <__addsf3x+0x60>
    155a:	59 3f       	cpi	r21, 0xF9	; 249
    155c:	50 f4       	brcc	.+20     	; 0x1572 <__addsf3x+0x52>
    155e:	50 3e       	cpi	r21, 0xE0	; 224
    1560:	68 f1       	brcs	.+90     	; 0x15bc <__addsf3x+0x9c>
    1562:	1a 16       	cp	r1, r26
    1564:	f0 40       	sbci	r31, 0x00	; 0
    1566:	a2 2f       	mov	r26, r18
    1568:	23 2f       	mov	r18, r19
    156a:	34 2f       	mov	r19, r20
    156c:	44 27       	eor	r20, r20
    156e:	58 5f       	subi	r21, 0xF8	; 248
    1570:	f3 cf       	rjmp	.-26     	; 0x1558 <__addsf3x+0x38>
    1572:	46 95       	lsr	r20
    1574:	37 95       	ror	r19
    1576:	27 95       	ror	r18
    1578:	a7 95       	ror	r26
    157a:	f0 40       	sbci	r31, 0x00	; 0
    157c:	53 95       	inc	r21
    157e:	c9 f7       	brne	.-14     	; 0x1572 <__addsf3x+0x52>
    1580:	7e f4       	brtc	.+30     	; 0x15a0 <__addsf3x+0x80>
    1582:	1f 16       	cp	r1, r31
    1584:	ba 0b       	sbc	r27, r26
    1586:	62 0b       	sbc	r22, r18
    1588:	73 0b       	sbc	r23, r19
    158a:	84 0b       	sbc	r24, r20
    158c:	ba f0       	brmi	.+46     	; 0x15bc <__addsf3x+0x9c>
    158e:	91 50       	subi	r25, 0x01	; 1
    1590:	a1 f0       	breq	.+40     	; 0x15ba <__addsf3x+0x9a>
    1592:	ff 0f       	add	r31, r31
    1594:	bb 1f       	adc	r27, r27
    1596:	66 1f       	adc	r22, r22
    1598:	77 1f       	adc	r23, r23
    159a:	88 1f       	adc	r24, r24
    159c:	c2 f7       	brpl	.-16     	; 0x158e <__addsf3x+0x6e>
    159e:	0e c0       	rjmp	.+28     	; 0x15bc <__addsf3x+0x9c>
    15a0:	ba 0f       	add	r27, r26
    15a2:	62 1f       	adc	r22, r18
    15a4:	73 1f       	adc	r23, r19
    15a6:	84 1f       	adc	r24, r20
    15a8:	48 f4       	brcc	.+18     	; 0x15bc <__addsf3x+0x9c>
    15aa:	87 95       	ror	r24
    15ac:	77 95       	ror	r23
    15ae:	67 95       	ror	r22
    15b0:	b7 95       	ror	r27
    15b2:	f7 95       	ror	r31
    15b4:	9e 3f       	cpi	r25, 0xFE	; 254
    15b6:	08 f0       	brcs	.+2      	; 0x15ba <__addsf3x+0x9a>
    15b8:	b0 cf       	rjmp	.-160    	; 0x151a <__addsf3+0x28>
    15ba:	93 95       	inc	r25
    15bc:	88 0f       	add	r24, r24
    15be:	08 f0       	brcs	.+2      	; 0x15c2 <__addsf3x+0xa2>
    15c0:	99 27       	eor	r25, r25
    15c2:	ee 0f       	add	r30, r30
    15c4:	97 95       	ror	r25
    15c6:	87 95       	ror	r24
    15c8:	08 95       	ret

000015ca <__divsf3>:
    15ca:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__divsf3x>
    15ce:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__fp_round>
    15d2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__fp_pscB>
    15d6:	58 f0       	brcs	.+22     	; 0x15ee <__divsf3+0x24>
    15d8:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fp_pscA>
    15dc:	40 f0       	brcs	.+16     	; 0x15ee <__divsf3+0x24>
    15de:	29 f4       	brne	.+10     	; 0x15ea <__divsf3+0x20>
    15e0:	5f 3f       	cpi	r21, 0xFF	; 255
    15e2:	29 f0       	breq	.+10     	; 0x15ee <__divsf3+0x24>
    15e4:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_inf>
    15e8:	51 11       	cpse	r21, r1
    15ea:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_szero>
    15ee:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_nan>

000015f2 <__divsf3x>:
    15f2:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fp_split3>
    15f6:	68 f3       	brcs	.-38     	; 0x15d2 <__divsf3+0x8>

000015f8 <__divsf3_pse>:
    15f8:	99 23       	and	r25, r25
    15fa:	b1 f3       	breq	.-20     	; 0x15e8 <__divsf3+0x1e>
    15fc:	55 23       	and	r21, r21
    15fe:	91 f3       	breq	.-28     	; 0x15e4 <__divsf3+0x1a>
    1600:	95 1b       	sub	r25, r21
    1602:	55 0b       	sbc	r21, r21
    1604:	bb 27       	eor	r27, r27
    1606:	aa 27       	eor	r26, r26
    1608:	62 17       	cp	r22, r18
    160a:	73 07       	cpc	r23, r19
    160c:	84 07       	cpc	r24, r20
    160e:	38 f0       	brcs	.+14     	; 0x161e <__divsf3_pse+0x26>
    1610:	9f 5f       	subi	r25, 0xFF	; 255
    1612:	5f 4f       	sbci	r21, 0xFF	; 255
    1614:	22 0f       	add	r18, r18
    1616:	33 1f       	adc	r19, r19
    1618:	44 1f       	adc	r20, r20
    161a:	aa 1f       	adc	r26, r26
    161c:	a9 f3       	breq	.-22     	; 0x1608 <__divsf3_pse+0x10>
    161e:	35 d0       	rcall	.+106    	; 0x168a <__divsf3_pse+0x92>
    1620:	0e 2e       	mov	r0, r30
    1622:	3a f0       	brmi	.+14     	; 0x1632 <__divsf3_pse+0x3a>
    1624:	e0 e8       	ldi	r30, 0x80	; 128
    1626:	32 d0       	rcall	.+100    	; 0x168c <__divsf3_pse+0x94>
    1628:	91 50       	subi	r25, 0x01	; 1
    162a:	50 40       	sbci	r21, 0x00	; 0
    162c:	e6 95       	lsr	r30
    162e:	00 1c       	adc	r0, r0
    1630:	ca f7       	brpl	.-14     	; 0x1624 <__divsf3_pse+0x2c>
    1632:	2b d0       	rcall	.+86     	; 0x168a <__divsf3_pse+0x92>
    1634:	fe 2f       	mov	r31, r30
    1636:	29 d0       	rcall	.+82     	; 0x168a <__divsf3_pse+0x92>
    1638:	66 0f       	add	r22, r22
    163a:	77 1f       	adc	r23, r23
    163c:	88 1f       	adc	r24, r24
    163e:	bb 1f       	adc	r27, r27
    1640:	26 17       	cp	r18, r22
    1642:	37 07       	cpc	r19, r23
    1644:	48 07       	cpc	r20, r24
    1646:	ab 07       	cpc	r26, r27
    1648:	b0 e8       	ldi	r27, 0x80	; 128
    164a:	09 f0       	breq	.+2      	; 0x164e <__divsf3_pse+0x56>
    164c:	bb 0b       	sbc	r27, r27
    164e:	80 2d       	mov	r24, r0
    1650:	bf 01       	movw	r22, r30
    1652:	ff 27       	eor	r31, r31
    1654:	93 58       	subi	r25, 0x83	; 131
    1656:	5f 4f       	sbci	r21, 0xFF	; 255
    1658:	3a f0       	brmi	.+14     	; 0x1668 <__divsf3_pse+0x70>
    165a:	9e 3f       	cpi	r25, 0xFE	; 254
    165c:	51 05       	cpc	r21, r1
    165e:	78 f0       	brcs	.+30     	; 0x167e <__divsf3_pse+0x86>
    1660:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_inf>
    1664:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_szero>
    1668:	5f 3f       	cpi	r21, 0xFF	; 255
    166a:	e4 f3       	brlt	.-8      	; 0x1664 <__divsf3_pse+0x6c>
    166c:	98 3e       	cpi	r25, 0xE8	; 232
    166e:	d4 f3       	brlt	.-12     	; 0x1664 <__divsf3_pse+0x6c>
    1670:	86 95       	lsr	r24
    1672:	77 95       	ror	r23
    1674:	67 95       	ror	r22
    1676:	b7 95       	ror	r27
    1678:	f7 95       	ror	r31
    167a:	9f 5f       	subi	r25, 0xFF	; 255
    167c:	c9 f7       	brne	.-14     	; 0x1670 <__divsf3_pse+0x78>
    167e:	88 0f       	add	r24, r24
    1680:	91 1d       	adc	r25, r1
    1682:	96 95       	lsr	r25
    1684:	87 95       	ror	r24
    1686:	97 f9       	bld	r25, 7
    1688:	08 95       	ret
    168a:	e1 e0       	ldi	r30, 0x01	; 1
    168c:	66 0f       	add	r22, r22
    168e:	77 1f       	adc	r23, r23
    1690:	88 1f       	adc	r24, r24
    1692:	bb 1f       	adc	r27, r27
    1694:	62 17       	cp	r22, r18
    1696:	73 07       	cpc	r23, r19
    1698:	84 07       	cpc	r24, r20
    169a:	ba 07       	cpc	r27, r26
    169c:	20 f0       	brcs	.+8      	; 0x16a6 <__divsf3_pse+0xae>
    169e:	62 1b       	sub	r22, r18
    16a0:	73 0b       	sbc	r23, r19
    16a2:	84 0b       	sbc	r24, r20
    16a4:	ba 0b       	sbc	r27, r26
    16a6:	ee 1f       	adc	r30, r30
    16a8:	88 f7       	brcc	.-30     	; 0x168c <__divsf3_pse+0x94>
    16aa:	e0 95       	com	r30
    16ac:	08 95       	ret

000016ae <__fixunssfsi>:
    16ae:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__fp_splitA>
    16b2:	88 f0       	brcs	.+34     	; 0x16d6 <__fixunssfsi+0x28>
    16b4:	9f 57       	subi	r25, 0x7F	; 127
    16b6:	98 f0       	brcs	.+38     	; 0x16de <__fixunssfsi+0x30>
    16b8:	b9 2f       	mov	r27, r25
    16ba:	99 27       	eor	r25, r25
    16bc:	b7 51       	subi	r27, 0x17	; 23
    16be:	b0 f0       	brcs	.+44     	; 0x16ec <__fixunssfsi+0x3e>
    16c0:	e1 f0       	breq	.+56     	; 0x16fa <__fixunssfsi+0x4c>
    16c2:	66 0f       	add	r22, r22
    16c4:	77 1f       	adc	r23, r23
    16c6:	88 1f       	adc	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	1a f0       	brmi	.+6      	; 0x16d2 <__fixunssfsi+0x24>
    16cc:	ba 95       	dec	r27
    16ce:	c9 f7       	brne	.-14     	; 0x16c2 <__fixunssfsi+0x14>
    16d0:	14 c0       	rjmp	.+40     	; 0x16fa <__fixunssfsi+0x4c>
    16d2:	b1 30       	cpi	r27, 0x01	; 1
    16d4:	91 f0       	breq	.+36     	; 0x16fa <__fixunssfsi+0x4c>
    16d6:	0e 94 0d 0c 	call	0x181a	; 0x181a <__fp_zero>
    16da:	b1 e0       	ldi	r27, 0x01	; 1
    16dc:	08 95       	ret
    16de:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__fp_zero>
    16e2:	67 2f       	mov	r22, r23
    16e4:	78 2f       	mov	r23, r24
    16e6:	88 27       	eor	r24, r24
    16e8:	b8 5f       	subi	r27, 0xF8	; 248
    16ea:	39 f0       	breq	.+14     	; 0x16fa <__fixunssfsi+0x4c>
    16ec:	b9 3f       	cpi	r27, 0xF9	; 249
    16ee:	cc f3       	brlt	.-14     	; 0x16e2 <__fixunssfsi+0x34>
    16f0:	86 95       	lsr	r24
    16f2:	77 95       	ror	r23
    16f4:	67 95       	ror	r22
    16f6:	b3 95       	inc	r27
    16f8:	d9 f7       	brne	.-10     	; 0x16f0 <__fixunssfsi+0x42>
    16fa:	3e f4       	brtc	.+14     	; 0x170a <__fixunssfsi+0x5c>
    16fc:	90 95       	com	r25
    16fe:	80 95       	com	r24
    1700:	70 95       	com	r23
    1702:	61 95       	neg	r22
    1704:	7f 4f       	sbci	r23, 0xFF	; 255
    1706:	8f 4f       	sbci	r24, 0xFF	; 255
    1708:	9f 4f       	sbci	r25, 0xFF	; 255
    170a:	08 95       	ret

0000170c <__floatunsisf>:
    170c:	e8 94       	clt
    170e:	09 c0       	rjmp	.+18     	; 0x1722 <__floatsisf+0x12>

00001710 <__floatsisf>:
    1710:	97 fb       	bst	r25, 7
    1712:	3e f4       	brtc	.+14     	; 0x1722 <__floatsisf+0x12>
    1714:	90 95       	com	r25
    1716:	80 95       	com	r24
    1718:	70 95       	com	r23
    171a:	61 95       	neg	r22
    171c:	7f 4f       	sbci	r23, 0xFF	; 255
    171e:	8f 4f       	sbci	r24, 0xFF	; 255
    1720:	9f 4f       	sbci	r25, 0xFF	; 255
    1722:	99 23       	and	r25, r25
    1724:	a9 f0       	breq	.+42     	; 0x1750 <__floatsisf+0x40>
    1726:	f9 2f       	mov	r31, r25
    1728:	96 e9       	ldi	r25, 0x96	; 150
    172a:	bb 27       	eor	r27, r27
    172c:	93 95       	inc	r25
    172e:	f6 95       	lsr	r31
    1730:	87 95       	ror	r24
    1732:	77 95       	ror	r23
    1734:	67 95       	ror	r22
    1736:	b7 95       	ror	r27
    1738:	f1 11       	cpse	r31, r1
    173a:	f8 cf       	rjmp	.-16     	; 0x172c <__floatsisf+0x1c>
    173c:	fa f4       	brpl	.+62     	; 0x177c <__floatsisf+0x6c>
    173e:	bb 0f       	add	r27, r27
    1740:	11 f4       	brne	.+4      	; 0x1746 <__floatsisf+0x36>
    1742:	60 ff       	sbrs	r22, 0
    1744:	1b c0       	rjmp	.+54     	; 0x177c <__floatsisf+0x6c>
    1746:	6f 5f       	subi	r22, 0xFF	; 255
    1748:	7f 4f       	sbci	r23, 0xFF	; 255
    174a:	8f 4f       	sbci	r24, 0xFF	; 255
    174c:	9f 4f       	sbci	r25, 0xFF	; 255
    174e:	16 c0       	rjmp	.+44     	; 0x177c <__floatsisf+0x6c>
    1750:	88 23       	and	r24, r24
    1752:	11 f0       	breq	.+4      	; 0x1758 <__floatsisf+0x48>
    1754:	96 e9       	ldi	r25, 0x96	; 150
    1756:	11 c0       	rjmp	.+34     	; 0x177a <__floatsisf+0x6a>
    1758:	77 23       	and	r23, r23
    175a:	21 f0       	breq	.+8      	; 0x1764 <__floatsisf+0x54>
    175c:	9e e8       	ldi	r25, 0x8E	; 142
    175e:	87 2f       	mov	r24, r23
    1760:	76 2f       	mov	r23, r22
    1762:	05 c0       	rjmp	.+10     	; 0x176e <__floatsisf+0x5e>
    1764:	66 23       	and	r22, r22
    1766:	71 f0       	breq	.+28     	; 0x1784 <__floatsisf+0x74>
    1768:	96 e8       	ldi	r25, 0x86	; 134
    176a:	86 2f       	mov	r24, r22
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	2a f0       	brmi	.+10     	; 0x177c <__floatsisf+0x6c>
    1772:	9a 95       	dec	r25
    1774:	66 0f       	add	r22, r22
    1776:	77 1f       	adc	r23, r23
    1778:	88 1f       	adc	r24, r24
    177a:	da f7       	brpl	.-10     	; 0x1772 <__floatsisf+0x62>
    177c:	88 0f       	add	r24, r24
    177e:	96 95       	lsr	r25
    1780:	87 95       	ror	r24
    1782:	97 f9       	bld	r25, 7
    1784:	08 95       	ret

00001786 <__fp_inf>:
    1786:	97 f9       	bld	r25, 7
    1788:	9f 67       	ori	r25, 0x7F	; 127
    178a:	80 e8       	ldi	r24, 0x80	; 128
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	08 95       	ret

00001792 <__fp_nan>:
    1792:	9f ef       	ldi	r25, 0xFF	; 255
    1794:	80 ec       	ldi	r24, 0xC0	; 192
    1796:	08 95       	ret

00001798 <__fp_pscA>:
    1798:	00 24       	eor	r0, r0
    179a:	0a 94       	dec	r0
    179c:	16 16       	cp	r1, r22
    179e:	17 06       	cpc	r1, r23
    17a0:	18 06       	cpc	r1, r24
    17a2:	09 06       	cpc	r0, r25
    17a4:	08 95       	ret

000017a6 <__fp_pscB>:
    17a6:	00 24       	eor	r0, r0
    17a8:	0a 94       	dec	r0
    17aa:	12 16       	cp	r1, r18
    17ac:	13 06       	cpc	r1, r19
    17ae:	14 06       	cpc	r1, r20
    17b0:	05 06       	cpc	r0, r21
    17b2:	08 95       	ret

000017b4 <__fp_round>:
    17b4:	09 2e       	mov	r0, r25
    17b6:	03 94       	inc	r0
    17b8:	00 0c       	add	r0, r0
    17ba:	11 f4       	brne	.+4      	; 0x17c0 <__fp_round+0xc>
    17bc:	88 23       	and	r24, r24
    17be:	52 f0       	brmi	.+20     	; 0x17d4 <__fp_round+0x20>
    17c0:	bb 0f       	add	r27, r27
    17c2:	40 f4       	brcc	.+16     	; 0x17d4 <__fp_round+0x20>
    17c4:	bf 2b       	or	r27, r31
    17c6:	11 f4       	brne	.+4      	; 0x17cc <__fp_round+0x18>
    17c8:	60 ff       	sbrs	r22, 0
    17ca:	04 c0       	rjmp	.+8      	; 0x17d4 <__fp_round+0x20>
    17cc:	6f 5f       	subi	r22, 0xFF	; 255
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255
    17d0:	8f 4f       	sbci	r24, 0xFF	; 255
    17d2:	9f 4f       	sbci	r25, 0xFF	; 255
    17d4:	08 95       	ret

000017d6 <__fp_split3>:
    17d6:	57 fd       	sbrc	r21, 7
    17d8:	90 58       	subi	r25, 0x80	; 128
    17da:	44 0f       	add	r20, r20
    17dc:	55 1f       	adc	r21, r21
    17de:	59 f0       	breq	.+22     	; 0x17f6 <__fp_splitA+0x10>
    17e0:	5f 3f       	cpi	r21, 0xFF	; 255
    17e2:	71 f0       	breq	.+28     	; 0x1800 <__fp_splitA+0x1a>
    17e4:	47 95       	ror	r20

000017e6 <__fp_splitA>:
    17e6:	88 0f       	add	r24, r24
    17e8:	97 fb       	bst	r25, 7
    17ea:	99 1f       	adc	r25, r25
    17ec:	61 f0       	breq	.+24     	; 0x1806 <__fp_splitA+0x20>
    17ee:	9f 3f       	cpi	r25, 0xFF	; 255
    17f0:	79 f0       	breq	.+30     	; 0x1810 <__fp_splitA+0x2a>
    17f2:	87 95       	ror	r24
    17f4:	08 95       	ret
    17f6:	12 16       	cp	r1, r18
    17f8:	13 06       	cpc	r1, r19
    17fa:	14 06       	cpc	r1, r20
    17fc:	55 1f       	adc	r21, r21
    17fe:	f2 cf       	rjmp	.-28     	; 0x17e4 <__fp_split3+0xe>
    1800:	46 95       	lsr	r20
    1802:	f1 df       	rcall	.-30     	; 0x17e6 <__fp_splitA>
    1804:	08 c0       	rjmp	.+16     	; 0x1816 <__fp_splitA+0x30>
    1806:	16 16       	cp	r1, r22
    1808:	17 06       	cpc	r1, r23
    180a:	18 06       	cpc	r1, r24
    180c:	99 1f       	adc	r25, r25
    180e:	f1 cf       	rjmp	.-30     	; 0x17f2 <__fp_splitA+0xc>
    1810:	86 95       	lsr	r24
    1812:	71 05       	cpc	r23, r1
    1814:	61 05       	cpc	r22, r1
    1816:	08 94       	sec
    1818:	08 95       	ret

0000181a <__fp_zero>:
    181a:	e8 94       	clt

0000181c <__fp_szero>:
    181c:	bb 27       	eor	r27, r27
    181e:	66 27       	eor	r22, r22
    1820:	77 27       	eor	r23, r23
    1822:	cb 01       	movw	r24, r22
    1824:	97 f9       	bld	r25, 7
    1826:	08 95       	ret

00001828 <__mulsf3>:
    1828:	0e 94 27 0c 	call	0x184e	; 0x184e <__mulsf3x>
    182c:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__fp_round>
    1830:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fp_pscA>
    1834:	38 f0       	brcs	.+14     	; 0x1844 <__mulsf3+0x1c>
    1836:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__fp_pscB>
    183a:	20 f0       	brcs	.+8      	; 0x1844 <__mulsf3+0x1c>
    183c:	95 23       	and	r25, r21
    183e:	11 f0       	breq	.+4      	; 0x1844 <__mulsf3+0x1c>
    1840:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_inf>
    1844:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_nan>
    1848:	11 24       	eor	r1, r1
    184a:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_szero>

0000184e <__mulsf3x>:
    184e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fp_split3>
    1852:	70 f3       	brcs	.-36     	; 0x1830 <__mulsf3+0x8>

00001854 <__mulsf3_pse>:
    1854:	95 9f       	mul	r25, r21
    1856:	c1 f3       	breq	.-16     	; 0x1848 <__mulsf3+0x20>
    1858:	95 0f       	add	r25, r21
    185a:	50 e0       	ldi	r21, 0x00	; 0
    185c:	55 1f       	adc	r21, r21
    185e:	62 9f       	mul	r22, r18
    1860:	f0 01       	movw	r30, r0
    1862:	72 9f       	mul	r23, r18
    1864:	bb 27       	eor	r27, r27
    1866:	f0 0d       	add	r31, r0
    1868:	b1 1d       	adc	r27, r1
    186a:	63 9f       	mul	r22, r19
    186c:	aa 27       	eor	r26, r26
    186e:	f0 0d       	add	r31, r0
    1870:	b1 1d       	adc	r27, r1
    1872:	aa 1f       	adc	r26, r26
    1874:	64 9f       	mul	r22, r20
    1876:	66 27       	eor	r22, r22
    1878:	b0 0d       	add	r27, r0
    187a:	a1 1d       	adc	r26, r1
    187c:	66 1f       	adc	r22, r22
    187e:	82 9f       	mul	r24, r18
    1880:	22 27       	eor	r18, r18
    1882:	b0 0d       	add	r27, r0
    1884:	a1 1d       	adc	r26, r1
    1886:	62 1f       	adc	r22, r18
    1888:	73 9f       	mul	r23, r19
    188a:	b0 0d       	add	r27, r0
    188c:	a1 1d       	adc	r26, r1
    188e:	62 1f       	adc	r22, r18
    1890:	83 9f       	mul	r24, r19
    1892:	a0 0d       	add	r26, r0
    1894:	61 1d       	adc	r22, r1
    1896:	22 1f       	adc	r18, r18
    1898:	74 9f       	mul	r23, r20
    189a:	33 27       	eor	r19, r19
    189c:	a0 0d       	add	r26, r0
    189e:	61 1d       	adc	r22, r1
    18a0:	23 1f       	adc	r18, r19
    18a2:	84 9f       	mul	r24, r20
    18a4:	60 0d       	add	r22, r0
    18a6:	21 1d       	adc	r18, r1
    18a8:	82 2f       	mov	r24, r18
    18aa:	76 2f       	mov	r23, r22
    18ac:	6a 2f       	mov	r22, r26
    18ae:	11 24       	eor	r1, r1
    18b0:	9f 57       	subi	r25, 0x7F	; 127
    18b2:	50 40       	sbci	r21, 0x00	; 0
    18b4:	9a f0       	brmi	.+38     	; 0x18dc <__mulsf3_pse+0x88>
    18b6:	f1 f0       	breq	.+60     	; 0x18f4 <__mulsf3_pse+0xa0>
    18b8:	88 23       	and	r24, r24
    18ba:	4a f0       	brmi	.+18     	; 0x18ce <__mulsf3_pse+0x7a>
    18bc:	ee 0f       	add	r30, r30
    18be:	ff 1f       	adc	r31, r31
    18c0:	bb 1f       	adc	r27, r27
    18c2:	66 1f       	adc	r22, r22
    18c4:	77 1f       	adc	r23, r23
    18c6:	88 1f       	adc	r24, r24
    18c8:	91 50       	subi	r25, 0x01	; 1
    18ca:	50 40       	sbci	r21, 0x00	; 0
    18cc:	a9 f7       	brne	.-22     	; 0x18b8 <__mulsf3_pse+0x64>
    18ce:	9e 3f       	cpi	r25, 0xFE	; 254
    18d0:	51 05       	cpc	r21, r1
    18d2:	80 f0       	brcs	.+32     	; 0x18f4 <__mulsf3_pse+0xa0>
    18d4:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_inf>
    18d8:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_szero>
    18dc:	5f 3f       	cpi	r21, 0xFF	; 255
    18de:	e4 f3       	brlt	.-8      	; 0x18d8 <__mulsf3_pse+0x84>
    18e0:	98 3e       	cpi	r25, 0xE8	; 232
    18e2:	d4 f3       	brlt	.-12     	; 0x18d8 <__mulsf3_pse+0x84>
    18e4:	86 95       	lsr	r24
    18e6:	77 95       	ror	r23
    18e8:	67 95       	ror	r22
    18ea:	b7 95       	ror	r27
    18ec:	f7 95       	ror	r31
    18ee:	e7 95       	ror	r30
    18f0:	9f 5f       	subi	r25, 0xFF	; 255
    18f2:	c1 f7       	brne	.-16     	; 0x18e4 <__mulsf3_pse+0x90>
    18f4:	fe 2b       	or	r31, r30
    18f6:	88 0f       	add	r24, r24
    18f8:	91 1d       	adc	r25, r1
    18fa:	96 95       	lsr	r25
    18fc:	87 95       	ror	r24
    18fe:	97 f9       	bld	r25, 7
    1900:	08 95       	ret

00001902 <__tablejump2__>:
    1902:	ee 0f       	add	r30, r30
    1904:	ff 1f       	adc	r31, r31
    1906:	00 24       	eor	r0, r0
    1908:	00 1c       	adc	r0, r0
    190a:	0b be       	out	0x3b, r0	; 59
    190c:	07 90       	elpm	r0, Z+
    190e:	f6 91       	elpm	r31, Z
    1910:	e0 2d       	mov	r30, r0
    1912:	09 94       	ijmp

00001914 <toupper>:
    1914:	91 11       	cpse	r25, r1
    1916:	08 95       	ret
    1918:	81 56       	subi	r24, 0x61	; 97
    191a:	8a 51       	subi	r24, 0x1A	; 26
    191c:	08 f4       	brcc	.+2      	; 0x1920 <toupper+0xc>
    191e:	80 52       	subi	r24, 0x20	; 32
    1920:	85 58       	subi	r24, 0x85	; 133
    1922:	08 95       	ret

00001924 <sprintf>:
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	2e 97       	sbiw	r28, 0x0e	; 14
    1932:	cd bf       	out	0x3d, r28	; 61
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0d 89       	ldd	r16, Y+21	; 0x15
    1938:	1e 89       	ldd	r17, Y+22	; 0x16
    193a:	86 e0       	ldi	r24, 0x06	; 6
    193c:	8c 83       	std	Y+4, r24	; 0x04
    193e:	09 83       	std	Y+1, r16	; 0x01
    1940:	1a 83       	std	Y+2, r17	; 0x02
    1942:	8f ef       	ldi	r24, 0xFF	; 255
    1944:	9f e7       	ldi	r25, 0x7F	; 127
    1946:	8d 83       	std	Y+5, r24	; 0x05
    1948:	9e 83       	std	Y+6, r25	; 0x06
    194a:	ae 01       	movw	r20, r28
    194c:	47 5e       	subi	r20, 0xE7	; 231
    194e:	5f 4f       	sbci	r21, 0xFF	; 255
    1950:	6f 89       	ldd	r22, Y+23	; 0x17
    1952:	78 8d       	ldd	r23, Y+24	; 0x18
    1954:	ce 01       	movw	r24, r28
    1956:	01 96       	adiw	r24, 0x01	; 1
    1958:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vfprintf>
    195c:	ef 81       	ldd	r30, Y+7	; 0x07
    195e:	f8 85       	ldd	r31, Y+8	; 0x08
    1960:	e0 0f       	add	r30, r16
    1962:	f1 1f       	adc	r31, r17
    1964:	10 82       	st	Z, r1
    1966:	2e 96       	adiw	r28, 0x0e	; 14
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	08 95       	ret

00001976 <vfprintf>:
    1976:	2f 92       	push	r2
    1978:	3f 92       	push	r3
    197a:	4f 92       	push	r4
    197c:	5f 92       	push	r5
    197e:	6f 92       	push	r6
    1980:	7f 92       	push	r7
    1982:	8f 92       	push	r8
    1984:	9f 92       	push	r9
    1986:	af 92       	push	r10
    1988:	bf 92       	push	r11
    198a:	cf 92       	push	r12
    198c:	df 92       	push	r13
    198e:	ef 92       	push	r14
    1990:	ff 92       	push	r15
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	2b 97       	sbiw	r28, 0x0b	; 11
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	6c 01       	movw	r12, r24
    19a6:	7b 01       	movw	r14, r22
    19a8:	8a 01       	movw	r16, r20
    19aa:	fc 01       	movw	r30, r24
    19ac:	16 82       	std	Z+6, r1	; 0x06
    19ae:	17 82       	std	Z+7, r1	; 0x07
    19b0:	83 81       	ldd	r24, Z+3	; 0x03
    19b2:	81 ff       	sbrs	r24, 1
    19b4:	cc c1       	rjmp	.+920    	; 0x1d4e <vfprintf+0x3d8>
    19b6:	ce 01       	movw	r24, r28
    19b8:	01 96       	adiw	r24, 0x01	; 1
    19ba:	3c 01       	movw	r6, r24
    19bc:	f6 01       	movw	r30, r12
    19be:	93 81       	ldd	r25, Z+3	; 0x03
    19c0:	f7 01       	movw	r30, r14
    19c2:	93 fd       	sbrc	r25, 3
    19c4:	85 91       	lpm	r24, Z+
    19c6:	93 ff       	sbrs	r25, 3
    19c8:	81 91       	ld	r24, Z+
    19ca:	7f 01       	movw	r14, r30
    19cc:	88 23       	and	r24, r24
    19ce:	09 f4       	brne	.+2      	; 0x19d2 <vfprintf+0x5c>
    19d0:	ba c1       	rjmp	.+884    	; 0x1d46 <vfprintf+0x3d0>
    19d2:	85 32       	cpi	r24, 0x25	; 37
    19d4:	39 f4       	brne	.+14     	; 0x19e4 <vfprintf+0x6e>
    19d6:	93 fd       	sbrc	r25, 3
    19d8:	85 91       	lpm	r24, Z+
    19da:	93 ff       	sbrs	r25, 3
    19dc:	81 91       	ld	r24, Z+
    19de:	7f 01       	movw	r14, r30
    19e0:	85 32       	cpi	r24, 0x25	; 37
    19e2:	29 f4       	brne	.+10     	; 0x19ee <vfprintf+0x78>
    19e4:	b6 01       	movw	r22, r12
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <fputc>
    19ec:	e7 cf       	rjmp	.-50     	; 0x19bc <vfprintf+0x46>
    19ee:	91 2c       	mov	r9, r1
    19f0:	21 2c       	mov	r2, r1
    19f2:	31 2c       	mov	r3, r1
    19f4:	ff e1       	ldi	r31, 0x1F	; 31
    19f6:	f3 15       	cp	r31, r3
    19f8:	d8 f0       	brcs	.+54     	; 0x1a30 <vfprintf+0xba>
    19fa:	8b 32       	cpi	r24, 0x2B	; 43
    19fc:	79 f0       	breq	.+30     	; 0x1a1c <vfprintf+0xa6>
    19fe:	38 f4       	brcc	.+14     	; 0x1a0e <vfprintf+0x98>
    1a00:	80 32       	cpi	r24, 0x20	; 32
    1a02:	79 f0       	breq	.+30     	; 0x1a22 <vfprintf+0xac>
    1a04:	83 32       	cpi	r24, 0x23	; 35
    1a06:	a1 f4       	brne	.+40     	; 0x1a30 <vfprintf+0xba>
    1a08:	23 2d       	mov	r18, r3
    1a0a:	20 61       	ori	r18, 0x10	; 16
    1a0c:	1d c0       	rjmp	.+58     	; 0x1a48 <vfprintf+0xd2>
    1a0e:	8d 32       	cpi	r24, 0x2D	; 45
    1a10:	61 f0       	breq	.+24     	; 0x1a2a <vfprintf+0xb4>
    1a12:	80 33       	cpi	r24, 0x30	; 48
    1a14:	69 f4       	brne	.+26     	; 0x1a30 <vfprintf+0xba>
    1a16:	23 2d       	mov	r18, r3
    1a18:	21 60       	ori	r18, 0x01	; 1
    1a1a:	16 c0       	rjmp	.+44     	; 0x1a48 <vfprintf+0xd2>
    1a1c:	83 2d       	mov	r24, r3
    1a1e:	82 60       	ori	r24, 0x02	; 2
    1a20:	38 2e       	mov	r3, r24
    1a22:	e3 2d       	mov	r30, r3
    1a24:	e4 60       	ori	r30, 0x04	; 4
    1a26:	3e 2e       	mov	r3, r30
    1a28:	2a c0       	rjmp	.+84     	; 0x1a7e <vfprintf+0x108>
    1a2a:	f3 2d       	mov	r31, r3
    1a2c:	f8 60       	ori	r31, 0x08	; 8
    1a2e:	1d c0       	rjmp	.+58     	; 0x1a6a <vfprintf+0xf4>
    1a30:	37 fc       	sbrc	r3, 7
    1a32:	2d c0       	rjmp	.+90     	; 0x1a8e <vfprintf+0x118>
    1a34:	20 ed       	ldi	r18, 0xD0	; 208
    1a36:	28 0f       	add	r18, r24
    1a38:	2a 30       	cpi	r18, 0x0A	; 10
    1a3a:	40 f0       	brcs	.+16     	; 0x1a4c <vfprintf+0xd6>
    1a3c:	8e 32       	cpi	r24, 0x2E	; 46
    1a3e:	b9 f4       	brne	.+46     	; 0x1a6e <vfprintf+0xf8>
    1a40:	36 fc       	sbrc	r3, 6
    1a42:	81 c1       	rjmp	.+770    	; 0x1d46 <vfprintf+0x3d0>
    1a44:	23 2d       	mov	r18, r3
    1a46:	20 64       	ori	r18, 0x40	; 64
    1a48:	32 2e       	mov	r3, r18
    1a4a:	19 c0       	rjmp	.+50     	; 0x1a7e <vfprintf+0x108>
    1a4c:	36 fe       	sbrs	r3, 6
    1a4e:	06 c0       	rjmp	.+12     	; 0x1a5c <vfprintf+0xe6>
    1a50:	8a e0       	ldi	r24, 0x0A	; 10
    1a52:	98 9e       	mul	r9, r24
    1a54:	20 0d       	add	r18, r0
    1a56:	11 24       	eor	r1, r1
    1a58:	92 2e       	mov	r9, r18
    1a5a:	11 c0       	rjmp	.+34     	; 0x1a7e <vfprintf+0x108>
    1a5c:	ea e0       	ldi	r30, 0x0A	; 10
    1a5e:	2e 9e       	mul	r2, r30
    1a60:	20 0d       	add	r18, r0
    1a62:	11 24       	eor	r1, r1
    1a64:	22 2e       	mov	r2, r18
    1a66:	f3 2d       	mov	r31, r3
    1a68:	f0 62       	ori	r31, 0x20	; 32
    1a6a:	3f 2e       	mov	r3, r31
    1a6c:	08 c0       	rjmp	.+16     	; 0x1a7e <vfprintf+0x108>
    1a6e:	8c 36       	cpi	r24, 0x6C	; 108
    1a70:	21 f4       	brne	.+8      	; 0x1a7a <vfprintf+0x104>
    1a72:	83 2d       	mov	r24, r3
    1a74:	80 68       	ori	r24, 0x80	; 128
    1a76:	38 2e       	mov	r3, r24
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <vfprintf+0x108>
    1a7a:	88 36       	cpi	r24, 0x68	; 104
    1a7c:	41 f4       	brne	.+16     	; 0x1a8e <vfprintf+0x118>
    1a7e:	f7 01       	movw	r30, r14
    1a80:	93 fd       	sbrc	r25, 3
    1a82:	85 91       	lpm	r24, Z+
    1a84:	93 ff       	sbrs	r25, 3
    1a86:	81 91       	ld	r24, Z+
    1a88:	7f 01       	movw	r14, r30
    1a8a:	81 11       	cpse	r24, r1
    1a8c:	b3 cf       	rjmp	.-154    	; 0x19f4 <vfprintf+0x7e>
    1a8e:	98 2f       	mov	r25, r24
    1a90:	9f 7d       	andi	r25, 0xDF	; 223
    1a92:	95 54       	subi	r25, 0x45	; 69
    1a94:	93 30       	cpi	r25, 0x03	; 3
    1a96:	28 f4       	brcc	.+10     	; 0x1aa2 <vfprintf+0x12c>
    1a98:	0c 5f       	subi	r16, 0xFC	; 252
    1a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9c:	9f e3       	ldi	r25, 0x3F	; 63
    1a9e:	99 83       	std	Y+1, r25	; 0x01
    1aa0:	0d c0       	rjmp	.+26     	; 0x1abc <vfprintf+0x146>
    1aa2:	83 36       	cpi	r24, 0x63	; 99
    1aa4:	31 f0       	breq	.+12     	; 0x1ab2 <vfprintf+0x13c>
    1aa6:	83 37       	cpi	r24, 0x73	; 115
    1aa8:	71 f0       	breq	.+28     	; 0x1ac6 <vfprintf+0x150>
    1aaa:	83 35       	cpi	r24, 0x53	; 83
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <vfprintf+0x13a>
    1aae:	59 c0       	rjmp	.+178    	; 0x1b62 <vfprintf+0x1ec>
    1ab0:	21 c0       	rjmp	.+66     	; 0x1af4 <vfprintf+0x17e>
    1ab2:	f8 01       	movw	r30, r16
    1ab4:	80 81       	ld	r24, Z
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	0e 5f       	subi	r16, 0xFE	; 254
    1aba:	1f 4f       	sbci	r17, 0xFF	; 255
    1abc:	88 24       	eor	r8, r8
    1abe:	83 94       	inc	r8
    1ac0:	91 2c       	mov	r9, r1
    1ac2:	53 01       	movw	r10, r6
    1ac4:	13 c0       	rjmp	.+38     	; 0x1aec <vfprintf+0x176>
    1ac6:	28 01       	movw	r4, r16
    1ac8:	f2 e0       	ldi	r31, 0x02	; 2
    1aca:	4f 0e       	add	r4, r31
    1acc:	51 1c       	adc	r5, r1
    1ace:	f8 01       	movw	r30, r16
    1ad0:	a0 80       	ld	r10, Z
    1ad2:	b1 80       	ldd	r11, Z+1	; 0x01
    1ad4:	36 fe       	sbrs	r3, 6
    1ad6:	03 c0       	rjmp	.+6      	; 0x1ade <vfprintf+0x168>
    1ad8:	69 2d       	mov	r22, r9
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <vfprintf+0x16c>
    1ade:	6f ef       	ldi	r22, 0xFF	; 255
    1ae0:	7f ef       	ldi	r23, 0xFF	; 255
    1ae2:	c5 01       	movw	r24, r10
    1ae4:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <strnlen>
    1ae8:	4c 01       	movw	r8, r24
    1aea:	82 01       	movw	r16, r4
    1aec:	f3 2d       	mov	r31, r3
    1aee:	ff 77       	andi	r31, 0x7F	; 127
    1af0:	3f 2e       	mov	r3, r31
    1af2:	16 c0       	rjmp	.+44     	; 0x1b20 <vfprintf+0x1aa>
    1af4:	28 01       	movw	r4, r16
    1af6:	22 e0       	ldi	r18, 0x02	; 2
    1af8:	42 0e       	add	r4, r18
    1afa:	51 1c       	adc	r5, r1
    1afc:	f8 01       	movw	r30, r16
    1afe:	a0 80       	ld	r10, Z
    1b00:	b1 80       	ldd	r11, Z+1	; 0x01
    1b02:	36 fe       	sbrs	r3, 6
    1b04:	03 c0       	rjmp	.+6      	; 0x1b0c <vfprintf+0x196>
    1b06:	69 2d       	mov	r22, r9
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <vfprintf+0x19a>
    1b0c:	6f ef       	ldi	r22, 0xFF	; 255
    1b0e:	7f ef       	ldi	r23, 0xFF	; 255
    1b10:	c5 01       	movw	r24, r10
    1b12:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <strnlen_P>
    1b16:	4c 01       	movw	r8, r24
    1b18:	f3 2d       	mov	r31, r3
    1b1a:	f0 68       	ori	r31, 0x80	; 128
    1b1c:	3f 2e       	mov	r3, r31
    1b1e:	82 01       	movw	r16, r4
    1b20:	33 fc       	sbrc	r3, 3
    1b22:	1b c0       	rjmp	.+54     	; 0x1b5a <vfprintf+0x1e4>
    1b24:	82 2d       	mov	r24, r2
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	88 16       	cp	r8, r24
    1b2a:	99 06       	cpc	r9, r25
    1b2c:	b0 f4       	brcc	.+44     	; 0x1b5a <vfprintf+0x1e4>
    1b2e:	b6 01       	movw	r22, r12
    1b30:	80 e2       	ldi	r24, 0x20	; 32
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <fputc>
    1b38:	2a 94       	dec	r2
    1b3a:	f4 cf       	rjmp	.-24     	; 0x1b24 <vfprintf+0x1ae>
    1b3c:	f5 01       	movw	r30, r10
    1b3e:	37 fc       	sbrc	r3, 7
    1b40:	85 91       	lpm	r24, Z+
    1b42:	37 fe       	sbrs	r3, 7
    1b44:	81 91       	ld	r24, Z+
    1b46:	5f 01       	movw	r10, r30
    1b48:	b6 01       	movw	r22, r12
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <fputc>
    1b50:	21 10       	cpse	r2, r1
    1b52:	2a 94       	dec	r2
    1b54:	21 e0       	ldi	r18, 0x01	; 1
    1b56:	82 1a       	sub	r8, r18
    1b58:	91 08       	sbc	r9, r1
    1b5a:	81 14       	cp	r8, r1
    1b5c:	91 04       	cpc	r9, r1
    1b5e:	71 f7       	brne	.-36     	; 0x1b3c <vfprintf+0x1c6>
    1b60:	e8 c0       	rjmp	.+464    	; 0x1d32 <vfprintf+0x3bc>
    1b62:	84 36       	cpi	r24, 0x64	; 100
    1b64:	11 f0       	breq	.+4      	; 0x1b6a <vfprintf+0x1f4>
    1b66:	89 36       	cpi	r24, 0x69	; 105
    1b68:	41 f5       	brne	.+80     	; 0x1bba <vfprintf+0x244>
    1b6a:	f8 01       	movw	r30, r16
    1b6c:	37 fe       	sbrs	r3, 7
    1b6e:	07 c0       	rjmp	.+14     	; 0x1b7e <vfprintf+0x208>
    1b70:	60 81       	ld	r22, Z
    1b72:	71 81       	ldd	r23, Z+1	; 0x01
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	93 81       	ldd	r25, Z+3	; 0x03
    1b78:	0c 5f       	subi	r16, 0xFC	; 252
    1b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7c:	08 c0       	rjmp	.+16     	; 0x1b8e <vfprintf+0x218>
    1b7e:	60 81       	ld	r22, Z
    1b80:	71 81       	ldd	r23, Z+1	; 0x01
    1b82:	07 2e       	mov	r0, r23
    1b84:	00 0c       	add	r0, r0
    1b86:	88 0b       	sbc	r24, r24
    1b88:	99 0b       	sbc	r25, r25
    1b8a:	0e 5f       	subi	r16, 0xFE	; 254
    1b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8e:	f3 2d       	mov	r31, r3
    1b90:	ff 76       	andi	r31, 0x6F	; 111
    1b92:	3f 2e       	mov	r3, r31
    1b94:	97 ff       	sbrs	r25, 7
    1b96:	09 c0       	rjmp	.+18     	; 0x1baa <vfprintf+0x234>
    1b98:	90 95       	com	r25
    1b9a:	80 95       	com	r24
    1b9c:	70 95       	com	r23
    1b9e:	61 95       	neg	r22
    1ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba6:	f0 68       	ori	r31, 0x80	; 128
    1ba8:	3f 2e       	mov	r3, r31
    1baa:	2a e0       	ldi	r18, 0x0A	; 10
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	a3 01       	movw	r20, r6
    1bb0:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ultoa_invert>
    1bb4:	88 2e       	mov	r8, r24
    1bb6:	86 18       	sub	r8, r6
    1bb8:	45 c0       	rjmp	.+138    	; 0x1c44 <vfprintf+0x2ce>
    1bba:	85 37       	cpi	r24, 0x75	; 117
    1bbc:	31 f4       	brne	.+12     	; 0x1bca <vfprintf+0x254>
    1bbe:	23 2d       	mov	r18, r3
    1bc0:	2f 7e       	andi	r18, 0xEF	; 239
    1bc2:	b2 2e       	mov	r11, r18
    1bc4:	2a e0       	ldi	r18, 0x0A	; 10
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	25 c0       	rjmp	.+74     	; 0x1c14 <vfprintf+0x29e>
    1bca:	93 2d       	mov	r25, r3
    1bcc:	99 7f       	andi	r25, 0xF9	; 249
    1bce:	b9 2e       	mov	r11, r25
    1bd0:	8f 36       	cpi	r24, 0x6F	; 111
    1bd2:	c1 f0       	breq	.+48     	; 0x1c04 <vfprintf+0x28e>
    1bd4:	18 f4       	brcc	.+6      	; 0x1bdc <vfprintf+0x266>
    1bd6:	88 35       	cpi	r24, 0x58	; 88
    1bd8:	79 f0       	breq	.+30     	; 0x1bf8 <vfprintf+0x282>
    1bda:	b5 c0       	rjmp	.+362    	; 0x1d46 <vfprintf+0x3d0>
    1bdc:	80 37       	cpi	r24, 0x70	; 112
    1bde:	19 f0       	breq	.+6      	; 0x1be6 <vfprintf+0x270>
    1be0:	88 37       	cpi	r24, 0x78	; 120
    1be2:	21 f0       	breq	.+8      	; 0x1bec <vfprintf+0x276>
    1be4:	b0 c0       	rjmp	.+352    	; 0x1d46 <vfprintf+0x3d0>
    1be6:	e9 2f       	mov	r30, r25
    1be8:	e0 61       	ori	r30, 0x10	; 16
    1bea:	be 2e       	mov	r11, r30
    1bec:	b4 fe       	sbrs	r11, 4
    1bee:	0d c0       	rjmp	.+26     	; 0x1c0a <vfprintf+0x294>
    1bf0:	fb 2d       	mov	r31, r11
    1bf2:	f4 60       	ori	r31, 0x04	; 4
    1bf4:	bf 2e       	mov	r11, r31
    1bf6:	09 c0       	rjmp	.+18     	; 0x1c0a <vfprintf+0x294>
    1bf8:	34 fe       	sbrs	r3, 4
    1bfa:	0a c0       	rjmp	.+20     	; 0x1c10 <vfprintf+0x29a>
    1bfc:	29 2f       	mov	r18, r25
    1bfe:	26 60       	ori	r18, 0x06	; 6
    1c00:	b2 2e       	mov	r11, r18
    1c02:	06 c0       	rjmp	.+12     	; 0x1c10 <vfprintf+0x29a>
    1c04:	28 e0       	ldi	r18, 0x08	; 8
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	05 c0       	rjmp	.+10     	; 0x1c14 <vfprintf+0x29e>
    1c0a:	20 e1       	ldi	r18, 0x10	; 16
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <vfprintf+0x29e>
    1c10:	20 e1       	ldi	r18, 0x10	; 16
    1c12:	32 e0       	ldi	r19, 0x02	; 2
    1c14:	f8 01       	movw	r30, r16
    1c16:	b7 fe       	sbrs	r11, 7
    1c18:	07 c0       	rjmp	.+14     	; 0x1c28 <vfprintf+0x2b2>
    1c1a:	60 81       	ld	r22, Z
    1c1c:	71 81       	ldd	r23, Z+1	; 0x01
    1c1e:	82 81       	ldd	r24, Z+2	; 0x02
    1c20:	93 81       	ldd	r25, Z+3	; 0x03
    1c22:	0c 5f       	subi	r16, 0xFC	; 252
    1c24:	1f 4f       	sbci	r17, 0xFF	; 255
    1c26:	06 c0       	rjmp	.+12     	; 0x1c34 <vfprintf+0x2be>
    1c28:	60 81       	ld	r22, Z
    1c2a:	71 81       	ldd	r23, Z+1	; 0x01
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	0e 5f       	subi	r16, 0xFE	; 254
    1c32:	1f 4f       	sbci	r17, 0xFF	; 255
    1c34:	a3 01       	movw	r20, r6
    1c36:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__ultoa_invert>
    1c3a:	88 2e       	mov	r8, r24
    1c3c:	86 18       	sub	r8, r6
    1c3e:	fb 2d       	mov	r31, r11
    1c40:	ff 77       	andi	r31, 0x7F	; 127
    1c42:	3f 2e       	mov	r3, r31
    1c44:	36 fe       	sbrs	r3, 6
    1c46:	0d c0       	rjmp	.+26     	; 0x1c62 <vfprintf+0x2ec>
    1c48:	23 2d       	mov	r18, r3
    1c4a:	2e 7f       	andi	r18, 0xFE	; 254
    1c4c:	a2 2e       	mov	r10, r18
    1c4e:	89 14       	cp	r8, r9
    1c50:	58 f4       	brcc	.+22     	; 0x1c68 <vfprintf+0x2f2>
    1c52:	34 fe       	sbrs	r3, 4
    1c54:	0b c0       	rjmp	.+22     	; 0x1c6c <vfprintf+0x2f6>
    1c56:	32 fc       	sbrc	r3, 2
    1c58:	09 c0       	rjmp	.+18     	; 0x1c6c <vfprintf+0x2f6>
    1c5a:	83 2d       	mov	r24, r3
    1c5c:	8e 7e       	andi	r24, 0xEE	; 238
    1c5e:	a8 2e       	mov	r10, r24
    1c60:	05 c0       	rjmp	.+10     	; 0x1c6c <vfprintf+0x2f6>
    1c62:	b8 2c       	mov	r11, r8
    1c64:	a3 2c       	mov	r10, r3
    1c66:	03 c0       	rjmp	.+6      	; 0x1c6e <vfprintf+0x2f8>
    1c68:	b8 2c       	mov	r11, r8
    1c6a:	01 c0       	rjmp	.+2      	; 0x1c6e <vfprintf+0x2f8>
    1c6c:	b9 2c       	mov	r11, r9
    1c6e:	a4 fe       	sbrs	r10, 4
    1c70:	0f c0       	rjmp	.+30     	; 0x1c90 <vfprintf+0x31a>
    1c72:	fe 01       	movw	r30, r28
    1c74:	e8 0d       	add	r30, r8
    1c76:	f1 1d       	adc	r31, r1
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 33       	cpi	r24, 0x30	; 48
    1c7c:	21 f4       	brne	.+8      	; 0x1c86 <vfprintf+0x310>
    1c7e:	9a 2d       	mov	r25, r10
    1c80:	99 7e       	andi	r25, 0xE9	; 233
    1c82:	a9 2e       	mov	r10, r25
    1c84:	09 c0       	rjmp	.+18     	; 0x1c98 <vfprintf+0x322>
    1c86:	a2 fe       	sbrs	r10, 2
    1c88:	06 c0       	rjmp	.+12     	; 0x1c96 <vfprintf+0x320>
    1c8a:	b3 94       	inc	r11
    1c8c:	b3 94       	inc	r11
    1c8e:	04 c0       	rjmp	.+8      	; 0x1c98 <vfprintf+0x322>
    1c90:	8a 2d       	mov	r24, r10
    1c92:	86 78       	andi	r24, 0x86	; 134
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <vfprintf+0x322>
    1c96:	b3 94       	inc	r11
    1c98:	a3 fc       	sbrc	r10, 3
    1c9a:	11 c0       	rjmp	.+34     	; 0x1cbe <vfprintf+0x348>
    1c9c:	a0 fe       	sbrs	r10, 0
    1c9e:	06 c0       	rjmp	.+12     	; 0x1cac <vfprintf+0x336>
    1ca0:	b2 14       	cp	r11, r2
    1ca2:	88 f4       	brcc	.+34     	; 0x1cc6 <vfprintf+0x350>
    1ca4:	28 0c       	add	r2, r8
    1ca6:	92 2c       	mov	r9, r2
    1ca8:	9b 18       	sub	r9, r11
    1caa:	0e c0       	rjmp	.+28     	; 0x1cc8 <vfprintf+0x352>
    1cac:	b2 14       	cp	r11, r2
    1cae:	60 f4       	brcc	.+24     	; 0x1cc8 <vfprintf+0x352>
    1cb0:	b6 01       	movw	r22, r12
    1cb2:	80 e2       	ldi	r24, 0x20	; 32
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <fputc>
    1cba:	b3 94       	inc	r11
    1cbc:	f7 cf       	rjmp	.-18     	; 0x1cac <vfprintf+0x336>
    1cbe:	b2 14       	cp	r11, r2
    1cc0:	18 f4       	brcc	.+6      	; 0x1cc8 <vfprintf+0x352>
    1cc2:	2b 18       	sub	r2, r11
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <vfprintf+0x354>
    1cc6:	98 2c       	mov	r9, r8
    1cc8:	21 2c       	mov	r2, r1
    1cca:	a4 fe       	sbrs	r10, 4
    1ccc:	10 c0       	rjmp	.+32     	; 0x1cee <vfprintf+0x378>
    1cce:	b6 01       	movw	r22, r12
    1cd0:	80 e3       	ldi	r24, 0x30	; 48
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <fputc>
    1cd8:	a2 fe       	sbrs	r10, 2
    1cda:	17 c0       	rjmp	.+46     	; 0x1d0a <vfprintf+0x394>
    1cdc:	a1 fc       	sbrc	r10, 1
    1cde:	03 c0       	rjmp	.+6      	; 0x1ce6 <vfprintf+0x370>
    1ce0:	88 e7       	ldi	r24, 0x78	; 120
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <vfprintf+0x374>
    1ce6:	88 e5       	ldi	r24, 0x58	; 88
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	b6 01       	movw	r22, r12
    1cec:	0c c0       	rjmp	.+24     	; 0x1d06 <vfprintf+0x390>
    1cee:	8a 2d       	mov	r24, r10
    1cf0:	86 78       	andi	r24, 0x86	; 134
    1cf2:	59 f0       	breq	.+22     	; 0x1d0a <vfprintf+0x394>
    1cf4:	a1 fe       	sbrs	r10, 1
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <vfprintf+0x386>
    1cf8:	8b e2       	ldi	r24, 0x2B	; 43
    1cfa:	01 c0       	rjmp	.+2      	; 0x1cfe <vfprintf+0x388>
    1cfc:	80 e2       	ldi	r24, 0x20	; 32
    1cfe:	a7 fc       	sbrc	r10, 7
    1d00:	8d e2       	ldi	r24, 0x2D	; 45
    1d02:	b6 01       	movw	r22, r12
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <fputc>
    1d0a:	89 14       	cp	r8, r9
    1d0c:	38 f4       	brcc	.+14     	; 0x1d1c <vfprintf+0x3a6>
    1d0e:	b6 01       	movw	r22, r12
    1d10:	80 e3       	ldi	r24, 0x30	; 48
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <fputc>
    1d18:	9a 94       	dec	r9
    1d1a:	f7 cf       	rjmp	.-18     	; 0x1d0a <vfprintf+0x394>
    1d1c:	8a 94       	dec	r8
    1d1e:	f3 01       	movw	r30, r6
    1d20:	e8 0d       	add	r30, r8
    1d22:	f1 1d       	adc	r31, r1
    1d24:	80 81       	ld	r24, Z
    1d26:	b6 01       	movw	r22, r12
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <fputc>
    1d2e:	81 10       	cpse	r8, r1
    1d30:	f5 cf       	rjmp	.-22     	; 0x1d1c <vfprintf+0x3a6>
    1d32:	22 20       	and	r2, r2
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <vfprintf+0x3c2>
    1d36:	42 ce       	rjmp	.-892    	; 0x19bc <vfprintf+0x46>
    1d38:	b6 01       	movw	r22, r12
    1d3a:	80 e2       	ldi	r24, 0x20	; 32
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <fputc>
    1d42:	2a 94       	dec	r2
    1d44:	f6 cf       	rjmp	.-20     	; 0x1d32 <vfprintf+0x3bc>
    1d46:	f6 01       	movw	r30, r12
    1d48:	86 81       	ldd	r24, Z+6	; 0x06
    1d4a:	97 81       	ldd	r25, Z+7	; 0x07
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <vfprintf+0x3dc>
    1d4e:	8f ef       	ldi	r24, 0xFF	; 255
    1d50:	9f ef       	ldi	r25, 0xFF	; 255
    1d52:	2b 96       	adiw	r28, 0x0b	; 11
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	ff 90       	pop	r15
    1d62:	ef 90       	pop	r14
    1d64:	df 90       	pop	r13
    1d66:	cf 90       	pop	r12
    1d68:	bf 90       	pop	r11
    1d6a:	af 90       	pop	r10
    1d6c:	9f 90       	pop	r9
    1d6e:	8f 90       	pop	r8
    1d70:	7f 90       	pop	r7
    1d72:	6f 90       	pop	r6
    1d74:	5f 90       	pop	r5
    1d76:	4f 90       	pop	r4
    1d78:	3f 90       	pop	r3
    1d7a:	2f 90       	pop	r2
    1d7c:	08 95       	ret

00001d7e <strnlen_P>:
    1d7e:	fc 01       	movw	r30, r24
    1d80:	05 90       	lpm	r0, Z+
    1d82:	61 50       	subi	r22, 0x01	; 1
    1d84:	70 40       	sbci	r23, 0x00	; 0
    1d86:	01 10       	cpse	r0, r1
    1d88:	d8 f7       	brcc	.-10     	; 0x1d80 <strnlen_P+0x2>
    1d8a:	80 95       	com	r24
    1d8c:	90 95       	com	r25
    1d8e:	8e 0f       	add	r24, r30
    1d90:	9f 1f       	adc	r25, r31
    1d92:	08 95       	ret

00001d94 <strnlen>:
    1d94:	fc 01       	movw	r30, r24
    1d96:	61 50       	subi	r22, 0x01	; 1
    1d98:	70 40       	sbci	r23, 0x00	; 0
    1d9a:	01 90       	ld	r0, Z+
    1d9c:	01 10       	cpse	r0, r1
    1d9e:	d8 f7       	brcc	.-10     	; 0x1d96 <strnlen+0x2>
    1da0:	80 95       	com	r24
    1da2:	90 95       	com	r25
    1da4:	8e 0f       	add	r24, r30
    1da6:	9f 1f       	adc	r25, r31
    1da8:	08 95       	ret

00001daa <fputc>:
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	fb 01       	movw	r30, r22
    1db4:	23 81       	ldd	r18, Z+3	; 0x03
    1db6:	21 fd       	sbrc	r18, 1
    1db8:	03 c0       	rjmp	.+6      	; 0x1dc0 <fputc+0x16>
    1dba:	8f ef       	ldi	r24, 0xFF	; 255
    1dbc:	9f ef       	ldi	r25, 0xFF	; 255
    1dbe:	2c c0       	rjmp	.+88     	; 0x1e18 <fputc+0x6e>
    1dc0:	22 ff       	sbrs	r18, 2
    1dc2:	16 c0       	rjmp	.+44     	; 0x1df0 <fputc+0x46>
    1dc4:	46 81       	ldd	r20, Z+6	; 0x06
    1dc6:	57 81       	ldd	r21, Z+7	; 0x07
    1dc8:	24 81       	ldd	r18, Z+4	; 0x04
    1dca:	35 81       	ldd	r19, Z+5	; 0x05
    1dcc:	42 17       	cp	r20, r18
    1dce:	53 07       	cpc	r21, r19
    1dd0:	44 f4       	brge	.+16     	; 0x1de2 <fputc+0x38>
    1dd2:	a0 81       	ld	r26, Z
    1dd4:	b1 81       	ldd	r27, Z+1	; 0x01
    1dd6:	9d 01       	movw	r18, r26
    1dd8:	2f 5f       	subi	r18, 0xFF	; 255
    1dda:	3f 4f       	sbci	r19, 0xFF	; 255
    1ddc:	20 83       	st	Z, r18
    1dde:	31 83       	std	Z+1, r19	; 0x01
    1de0:	8c 93       	st	X, r24
    1de2:	26 81       	ldd	r18, Z+6	; 0x06
    1de4:	37 81       	ldd	r19, Z+7	; 0x07
    1de6:	2f 5f       	subi	r18, 0xFF	; 255
    1de8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dea:	26 83       	std	Z+6, r18	; 0x06
    1dec:	37 83       	std	Z+7, r19	; 0x07
    1dee:	14 c0       	rjmp	.+40     	; 0x1e18 <fputc+0x6e>
    1df0:	8b 01       	movw	r16, r22
    1df2:	ec 01       	movw	r28, r24
    1df4:	fb 01       	movw	r30, r22
    1df6:	00 84       	ldd	r0, Z+8	; 0x08
    1df8:	f1 85       	ldd	r31, Z+9	; 0x09
    1dfa:	e0 2d       	mov	r30, r0
    1dfc:	09 95       	icall
    1dfe:	89 2b       	or	r24, r25
    1e00:	e1 f6       	brne	.-72     	; 0x1dba <fputc+0x10>
    1e02:	d8 01       	movw	r26, r16
    1e04:	16 96       	adiw	r26, 0x06	; 6
    1e06:	8d 91       	ld	r24, X+
    1e08:	9c 91       	ld	r25, X
    1e0a:	17 97       	sbiw	r26, 0x07	; 7
    1e0c:	01 96       	adiw	r24, 0x01	; 1
    1e0e:	16 96       	adiw	r26, 0x06	; 6
    1e10:	8d 93       	st	X+, r24
    1e12:	9c 93       	st	X, r25
    1e14:	17 97       	sbiw	r26, 0x07	; 7
    1e16:	ce 01       	movw	r24, r28
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	08 95       	ret

00001e22 <__ultoa_invert>:
    1e22:	fa 01       	movw	r30, r20
    1e24:	aa 27       	eor	r26, r26
    1e26:	28 30       	cpi	r18, 0x08	; 8
    1e28:	51 f1       	breq	.+84     	; 0x1e7e <__ultoa_invert+0x5c>
    1e2a:	20 31       	cpi	r18, 0x10	; 16
    1e2c:	81 f1       	breq	.+96     	; 0x1e8e <__ultoa_invert+0x6c>
    1e2e:	e8 94       	clt
    1e30:	6f 93       	push	r22
    1e32:	6e 7f       	andi	r22, 0xFE	; 254
    1e34:	6e 5f       	subi	r22, 0xFE	; 254
    1e36:	7f 4f       	sbci	r23, 0xFF	; 255
    1e38:	8f 4f       	sbci	r24, 0xFF	; 255
    1e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3c:	af 4f       	sbci	r26, 0xFF	; 255
    1e3e:	b1 e0       	ldi	r27, 0x01	; 1
    1e40:	3e d0       	rcall	.+124    	; 0x1ebe <__ultoa_invert+0x9c>
    1e42:	b4 e0       	ldi	r27, 0x04	; 4
    1e44:	3c d0       	rcall	.+120    	; 0x1ebe <__ultoa_invert+0x9c>
    1e46:	67 0f       	add	r22, r23
    1e48:	78 1f       	adc	r23, r24
    1e4a:	89 1f       	adc	r24, r25
    1e4c:	9a 1f       	adc	r25, r26
    1e4e:	a1 1d       	adc	r26, r1
    1e50:	68 0f       	add	r22, r24
    1e52:	79 1f       	adc	r23, r25
    1e54:	8a 1f       	adc	r24, r26
    1e56:	91 1d       	adc	r25, r1
    1e58:	a1 1d       	adc	r26, r1
    1e5a:	6a 0f       	add	r22, r26
    1e5c:	71 1d       	adc	r23, r1
    1e5e:	81 1d       	adc	r24, r1
    1e60:	91 1d       	adc	r25, r1
    1e62:	a1 1d       	adc	r26, r1
    1e64:	20 d0       	rcall	.+64     	; 0x1ea6 <__ultoa_invert+0x84>
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <__ultoa_invert+0x48>
    1e68:	68 94       	set
    1e6a:	3f 91       	pop	r19
    1e6c:	2a e0       	ldi	r18, 0x0A	; 10
    1e6e:	26 9f       	mul	r18, r22
    1e70:	11 24       	eor	r1, r1
    1e72:	30 19       	sub	r19, r0
    1e74:	30 5d       	subi	r19, 0xD0	; 208
    1e76:	31 93       	st	Z+, r19
    1e78:	de f6       	brtc	.-74     	; 0x1e30 <__ultoa_invert+0xe>
    1e7a:	cf 01       	movw	r24, r30
    1e7c:	08 95       	ret
    1e7e:	46 2f       	mov	r20, r22
    1e80:	47 70       	andi	r20, 0x07	; 7
    1e82:	40 5d       	subi	r20, 0xD0	; 208
    1e84:	41 93       	st	Z+, r20
    1e86:	b3 e0       	ldi	r27, 0x03	; 3
    1e88:	0f d0       	rcall	.+30     	; 0x1ea8 <__ultoa_invert+0x86>
    1e8a:	c9 f7       	brne	.-14     	; 0x1e7e <__ultoa_invert+0x5c>
    1e8c:	f6 cf       	rjmp	.-20     	; 0x1e7a <__ultoa_invert+0x58>
    1e8e:	46 2f       	mov	r20, r22
    1e90:	4f 70       	andi	r20, 0x0F	; 15
    1e92:	40 5d       	subi	r20, 0xD0	; 208
    1e94:	4a 33       	cpi	r20, 0x3A	; 58
    1e96:	18 f0       	brcs	.+6      	; 0x1e9e <__ultoa_invert+0x7c>
    1e98:	49 5d       	subi	r20, 0xD9	; 217
    1e9a:	31 fd       	sbrc	r19, 1
    1e9c:	40 52       	subi	r20, 0x20	; 32
    1e9e:	41 93       	st	Z+, r20
    1ea0:	02 d0       	rcall	.+4      	; 0x1ea6 <__ultoa_invert+0x84>
    1ea2:	a9 f7       	brne	.-22     	; 0x1e8e <__ultoa_invert+0x6c>
    1ea4:	ea cf       	rjmp	.-44     	; 0x1e7a <__ultoa_invert+0x58>
    1ea6:	b4 e0       	ldi	r27, 0x04	; 4
    1ea8:	a6 95       	lsr	r26
    1eaa:	97 95       	ror	r25
    1eac:	87 95       	ror	r24
    1eae:	77 95       	ror	r23
    1eb0:	67 95       	ror	r22
    1eb2:	ba 95       	dec	r27
    1eb4:	c9 f7       	brne	.-14     	; 0x1ea8 <__ultoa_invert+0x86>
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	61 05       	cpc	r22, r1
    1eba:	71 05       	cpc	r23, r1
    1ebc:	08 95       	ret
    1ebe:	9b 01       	movw	r18, r22
    1ec0:	ac 01       	movw	r20, r24
    1ec2:	0a 2e       	mov	r0, r26
    1ec4:	06 94       	lsr	r0
    1ec6:	57 95       	ror	r21
    1ec8:	47 95       	ror	r20
    1eca:	37 95       	ror	r19
    1ecc:	27 95       	ror	r18
    1ece:	ba 95       	dec	r27
    1ed0:	c9 f7       	brne	.-14     	; 0x1ec4 <__ultoa_invert+0xa2>
    1ed2:	62 0f       	add	r22, r18
    1ed4:	73 1f       	adc	r23, r19
    1ed6:	84 1f       	adc	r24, r20
    1ed8:	95 1f       	adc	r25, r21
    1eda:	a0 1d       	adc	r26, r0
    1edc:	08 95       	ret

00001ede <_exit>:
    1ede:	f8 94       	cli

00001ee0 <__stop_program>:
    1ee0:	ff cf       	rjmp	.-2      	; 0x1ee0 <__stop_program>
